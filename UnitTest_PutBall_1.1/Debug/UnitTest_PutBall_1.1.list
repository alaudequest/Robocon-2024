
UnitTest_PutBall_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800589c  0800589c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058a4  080058a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080058ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004138  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004148  20004148  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f824  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002921  00000000  00000000  0002f8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  000321c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b75  00000000  00000000  000330c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000226fa  00000000  00000000  00033c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000135a8  00000000  00000000  0005632f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d07ca  00000000  00000000  000698d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003eac  00000000  00000000  0013a0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0013df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005814 	.word	0x08005814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005814 	.word	0x08005814

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b970 	b.w	8000e14 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	460d      	mov	r5, r1
 8000b54:	4604      	mov	r4, r0
 8000b56:	460f      	mov	r7, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14a      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4694      	mov	ip, r2
 8000b60:	d965      	bls.n	8000c2e <__udivmoddi4+0xe2>
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	b143      	cbz	r3, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b6c:	f1c3 0220 	rsb	r2, r3, #32
 8000b70:	409f      	lsls	r7, r3
 8000b72:	fa20 f202 	lsr.w	r2, r0, r2
 8000b76:	4317      	orrs	r7, r2
 8000b78:	409c      	lsls	r4, r3
 8000b7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7e:	fa1f f58c 	uxth.w	r5, ip
 8000b82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b86:	0c22      	lsrs	r2, r4, #16
 8000b88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b90:	fb01 f005 	mul.w	r0, r1, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x62>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba0:	f080 811c 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	f240 8119 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000baa:	3902      	subs	r1, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	b2a4      	uxth	r4, r4
 8000bb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bbe:	fb00 f505 	mul.w	r5, r0, r5
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x90>
 8000bc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bce:	f080 8107 	bcs.w	8000de0 <__udivmoddi4+0x294>
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	f240 8104 	bls.w	8000de0 <__udivmoddi4+0x294>
 8000bd8:	4464      	add	r4, ip
 8000bda:	3802      	subs	r0, #2
 8000bdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	2100      	movs	r1, #0
 8000be4:	b11e      	cbz	r6, 8000bee <__udivmoddi4+0xa2>
 8000be6:	40dc      	lsrs	r4, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	e9c6 4300 	strd	r4, r3, [r6]
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0xbc>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80ed 	beq.w	8000dd6 <__udivmoddi4+0x28a>
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000c02:	4608      	mov	r0, r1
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	fab3 f183 	clz	r1, r3
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d149      	bne.n	8000ca4 <__udivmoddi4+0x158>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	d302      	bcc.n	8000c1a <__udivmoddi4+0xce>
 8000c14:	4282      	cmp	r2, r0
 8000c16:	f200 80f8 	bhi.w	8000e0a <__udivmoddi4+0x2be>
 8000c1a:	1a84      	subs	r4, r0, r2
 8000c1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	4617      	mov	r7, r2
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d0e2      	beq.n	8000bee <__udivmoddi4+0xa2>
 8000c28:	e9c6 4700 	strd	r4, r7, [r6]
 8000c2c:	e7df      	b.n	8000bee <__udivmoddi4+0xa2>
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xe6>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f382 	clz	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8090 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3c:	1a8a      	subs	r2, r1, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2101      	movs	r1, #1
 8000c48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c50:	0c22      	lsrs	r2, r4, #16
 8000c52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c56:	fb0e f005 	mul.w	r0, lr, r5
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2b8>
 8000c6e:	4645      	mov	r5, r8
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c78:	fb07 2210 	mls	r2, r7, r0, r2
 8000c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x14e>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x14c>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2c2>
 8000c98:	4610      	mov	r0, r2
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca2:	e79f      	b.n	8000be4 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0720 	rsb	r7, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cba:	40fd      	lsrs	r5, r7
 8000cbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc0:	4323      	orrs	r3, r4
 8000cc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	fb09 5518 	mls	r5, r9, r8, r5
 8000cce:	0c1c      	lsrs	r4, r3, #16
 8000cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	fa02 f201 	lsl.w	r2, r2, r1
 8000cde:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf0:	42a5      	cmp	r5, r4
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4464      	add	r4, ip
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	b29d      	uxth	r5, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2ac>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2ac>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	4464      	add	r4, ip
 8000d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	42ac      	cmp	r4, r5
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46ae      	mov	lr, r5
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x29c>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x298>
 8000d3c:	b156      	cbz	r6, 8000d54 <__udivmoddi4+0x208>
 8000d3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d42:	eb64 040e 	sbc.w	r4, r4, lr
 8000d46:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4a:	40ca      	lsrs	r2, r1
 8000d4c:	40cc      	lsrs	r4, r1
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	e9c6 7400 	strd	r7, r4, [r6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	f1c3 0120 	rsb	r1, r3, #32
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	fa20 f201 	lsr.w	r2, r0, r1
 8000d68:	fa25 f101 	lsr.w	r1, r5, r1
 8000d6c:	409d      	lsls	r5, r3
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d86:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8a:	428d      	cmp	r5, r1
 8000d8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x258>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000d9c:	428d      	cmp	r5, r1
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1b49      	subs	r1, r1, r5
 8000da6:	b292      	uxth	r2, r2
 8000da8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dac:	fb07 1115 	mls	r1, r7, r5, r1
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	fb05 f10e 	mul.w	r1, r5, lr
 8000db8:	4291      	cmp	r1, r2
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x282>
 8000dbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000dc6:	4291      	cmp	r1, r2
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000dca:	3d02      	subs	r5, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	1a52      	subs	r2, r2, r1
 8000dd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0xfc>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e708      	b.n	8000bee <__udivmoddi4+0xa2>
 8000ddc:	4639      	mov	r1, r7
 8000dde:	e6e6      	b.n	8000bae <__udivmoddi4+0x62>
 8000de0:	4610      	mov	r0, r2
 8000de2:	e6fb      	b.n	8000bdc <__udivmoddi4+0x90>
 8000de4:	4548      	cmp	r0, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df0:	3b01      	subs	r3, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df4:	4645      	mov	r5, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x282>
 8000df8:	462b      	mov	r3, r5
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x258>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e04:	3d02      	subs	r5, #2
 8000e06:	4462      	add	r2, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e70a      	b.n	8000c24 <__udivmoddi4+0xd8>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x14e>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <Accel_Cal>:
#include "Accel.h"
#include "stdlib.h"
#define deltaT 0.01

void Accel_Cal(Accel_Param *accel, float target_vel, float target_time)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e24:	edc7 0a01 	vstr	s1, [r7, #4]
	if(target_vel != accel->target_vel_Pre)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e32:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	d021      	beq.n	8000e80 <Accel_Cal+0x68>
	{
		if(target_vel < accel->target_vel_Pre)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e42:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	d503      	bpl.n	8000e58 <Accel_Cal+0x40>
		{
			accel->Flag = 1;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	741a      	strb	r2, [r3, #16]
 8000e56:	e002      	b.n	8000e5e <Accel_Cal+0x46>
		}
		else
		{
			accel->Flag = 0;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	741a      	strb	r2, [r3, #16]
		}
		accel->accel = (target_vel - accel->vel_controller)/target_time;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e64:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	edc3 7a00 	vstr	s15, [r3]
		accel->target_vel_Pre = target_vel;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
	}
		accel->vel_controller +=  accel->accel * deltaT;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb07 	bl	8000498 <__aeabi_f2d>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb00 	bl	8000498 <__aeabi_f2d>
 8000e98:	a31d      	add	r3, pc, #116	; (adr r3, 8000f10 <Accel_Cal+0xf8>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fb53 	bl	8000548 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	f7ff f997 	bl	80001dc <__adddf3>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fde1 	bl	8000a7c <__aeabi_d2f>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	605a      	str	r2, [r3, #4]

			if(accel->Flag)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	7c1b      	ldrb	r3, [r3, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <Accel_Cal+0xce>
			{
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ece:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eda:	dc00      	bgt.n	8000ede <Accel_Cal+0xc6>
			}
			else
			{
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
			}
}
 8000edc:	e011      	b.n	8000f02 <Accel_Cal+0xea>
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	605a      	str	r2, [r3, #4]
}
 8000ee4:	e00d      	b.n	8000f02 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d400      	bmi.n	8000efc <Accel_Cal+0xe4>
}
 8000efa:	e002      	b.n	8000f02 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	605a      	str	r2, [r3, #4]
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w
 8000f10:	47ae147b 	.word	0x47ae147b
 8000f14:	3f847ae1 	.word	0x3f847ae1

08000f18 <DC_Drive_BTS>:
//		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
//	}
//}

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfb8      	it	lt
 8000f3a:	425b      	neglt	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	619a      	str	r2, [r3, #24]

	if(motor->Mode==0){
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8a1b      	ldrh	r3, [r3, #16]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 80e9 	bne.w	800112a <DC_Drive_BTS+0x212>
		if(Input < 0)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da4d      	bge.n	8000ffa <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <DC_Drive_BTS+0x5c>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	89da      	ldrh	r2, [r3, #14]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	e01e      	b.n	8000fb2 <DC_Drive_BTS+0x9a>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d107      	bne.n	8000f8c <DC_Drive_BTS+0x74>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	89d9      	ldrh	r1, [r3, #14]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	460b      	mov	r3, r1
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38
 8000f8a:	e012      	b.n	8000fb2 <DC_Drive_BTS+0x9a>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d107      	bne.n	8000fa4 <DC_Drive_BTS+0x8c>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	89d9      	ldrh	r1, [r3, #14]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fa2:	e006      	b.n	8000fb2 <DC_Drive_BTS+0x9a>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	89d9      	ldrh	r1, [r3, #14]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <DC_Drive_BTS+0xae>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
		}
	}
}
 8000fc4:	e1d6      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d105      	bne.n	8000fda <DC_Drive_BTS+0xc2>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	6393      	str	r3, [r2, #56]	; 0x38
 8000fd8:	e1cc      	b.n	8001374 <DC_Drive_BTS+0x45c>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d105      	bne.n	8000fee <DC_Drive_BTS+0xd6>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fec:	e1c2      	b.n	8001374 <DC_Drive_BTS+0x45c>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ff8:	e1bc      	b.n	8001374 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd4d      	ble.n	800109c <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <DC_Drive_BTS+0xfc>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
 8001012:	e018      	b.n	8001046 <DC_Drive_BTS+0x12e>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d105      	bne.n	8001028 <DC_Drive_BTS+0x110>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	6393      	str	r3, [r2, #56]	; 0x38
 8001026:	e00e      	b.n	8001046 <DC_Drive_BTS+0x12e>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d105      	bne.n	800103c <DC_Drive_BTS+0x124>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	63d3      	str	r3, [r2, #60]	; 0x3c
 800103a:	e004      	b.n	8001046 <DC_Drive_BTS+0x12e>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <DC_Drive_BTS+0x144>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	89da      	ldrh	r2, [r3, #14]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
}
 800105a:	e18b      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d107      	bne.n	8001074 <DC_Drive_BTS+0x15c>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	89d9      	ldrh	r1, [r3, #14]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	6393      	str	r3, [r2, #56]	; 0x38
 8001072:	e17f      	b.n	8001374 <DC_Drive_BTS+0x45c>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d107      	bne.n	800108c <DC_Drive_BTS+0x174>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	89d9      	ldrh	r1, [r3, #14]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	460b      	mov	r3, r1
 8001088:	63d3      	str	r3, [r2, #60]	; 0x3c
 800108a:	e173      	b.n	8001374 <DC_Drive_BTS+0x45c>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	89d9      	ldrh	r1, [r3, #14]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	460b      	mov	r3, r1
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
}
 800109a:	e16b      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <DC_Drive_BTS+0x198>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e018      	b.n	80010e2 <DC_Drive_BTS+0x1ca>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d105      	bne.n	80010c4 <DC_Drive_BTS+0x1ac>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	6393      	str	r3, [r2, #56]	; 0x38
 80010c2:	e00e      	b.n	80010e2 <DC_Drive_BTS+0x1ca>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d105      	bne.n	80010d8 <DC_Drive_BTS+0x1c0>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010d6:	e004      	b.n	80010e2 <DC_Drive_BTS+0x1ca>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d105      	bne.n	80010f6 <DC_Drive_BTS+0x1de>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f4:	e13e      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d105      	bne.n	800110a <DC_Drive_BTS+0x1f2>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	6393      	str	r3, [r2, #56]	; 0x38
 8001108:	e134      	b.n	8001374 <DC_Drive_BTS+0x45c>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d105      	bne.n	800111e <DC_Drive_BTS+0x206>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2300      	movs	r3, #0
 800111a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800111c:	e12a      	b.n	8001374 <DC_Drive_BTS+0x45c>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001128:	e124      	b.n	8001374 <DC_Drive_BTS+0x45c>
		if(Input < 0)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da64      	bge.n	80011fa <DC_Drive_BTS+0x2e2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode-motor->Pwm);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10a      	bne.n	800114e <DC_Drive_BTS+0x236>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8a1b      	ldrh	r3, [r3, #16]
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	89db      	ldrh	r3, [r3, #14]
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
 800114c:	e02a      	b.n	80011a4 <DC_Drive_BTS+0x28c>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d10b      	bne.n	800116e <DC_Drive_BTS+0x256>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8a1b      	ldrh	r3, [r3, #16]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	89db      	ldrh	r3, [r3, #14]
 8001160:	1ad1      	subs	r1, r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	460b      	mov	r3, r1
 800116a:	6393      	str	r3, [r2, #56]	; 0x38
 800116c:	e01a      	b.n	80011a4 <DC_Drive_BTS+0x28c>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b08      	cmp	r3, #8
 8001174:	d10b      	bne.n	800118e <DC_Drive_BTS+0x276>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8a1b      	ldrh	r3, [r3, #16]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	89db      	ldrh	r3, [r3, #14]
 8001180:	1ad1      	subs	r1, r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	460b      	mov	r3, r1
 800118a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800118c:	e00a      	b.n	80011a4 <DC_Drive_BTS+0x28c>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8a1b      	ldrh	r3, [r3, #16]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	89db      	ldrh	r3, [r3, #14]
 8001198:	1ad1      	subs	r1, r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	460b      	mov	r3, r1
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <DC_Drive_BTS+0x2a2>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8a1a      	ldrh	r2, [r3, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011b8:	e0dc      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d107      	bne.n	80011d2 <DC_Drive_BTS+0x2ba>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8a19      	ldrh	r1, [r3, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	6393      	str	r3, [r2, #56]	; 0x38
 80011d0:	e0d0      	b.n	8001374 <DC_Drive_BTS+0x45c>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d107      	bne.n	80011ea <DC_Drive_BTS+0x2d2>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8a19      	ldrh	r1, [r3, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	460b      	mov	r3, r1
 80011e6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011e8:	e0c4      	b.n	8001374 <DC_Drive_BTS+0x45c>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8a19      	ldrh	r1, [r3, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011f8:	e0bc      	b.n	8001374 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd64      	ble.n	80012ca <DC_Drive_BTS+0x3b2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d106      	bne.n	8001216 <DC_Drive_BTS+0x2fe>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8a1a      	ldrh	r2, [r3, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e01e      	b.n	8001254 <DC_Drive_BTS+0x33c>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d107      	bne.n	800122e <DC_Drive_BTS+0x316>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8a19      	ldrh	r1, [r3, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	460b      	mov	r3, r1
 800122a:	6393      	str	r3, [r2, #56]	; 0x38
 800122c:	e012      	b.n	8001254 <DC_Drive_BTS+0x33c>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d107      	bne.n	8001246 <DC_Drive_BTS+0x32e>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8a19      	ldrh	r1, [r3, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	460b      	mov	r3, r1
 8001242:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001244:	e006      	b.n	8001254 <DC_Drive_BTS+0x33c>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8a19      	ldrh	r1, [r3, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	460b      	mov	r3, r1
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10a      	bne.n	8001272 <DC_Drive_BTS+0x35a>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8a1b      	ldrh	r3, [r3, #16]
 8001260:	461a      	mov	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	89db      	ldrh	r3, [r3, #14]
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001270:	e080      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d10b      	bne.n	8001292 <DC_Drive_BTS+0x37a>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	89db      	ldrh	r3, [r3, #14]
 8001284:	1ad1      	subs	r1, r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	460b      	mov	r3, r1
 800128e:	6393      	str	r3, [r2, #56]	; 0x38
 8001290:	e070      	b.n	8001374 <DC_Drive_BTS+0x45c>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d10b      	bne.n	80012b2 <DC_Drive_BTS+0x39a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8a1b      	ldrh	r3, [r3, #16]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	89db      	ldrh	r3, [r3, #14]
 80012a4:	1ad1      	subs	r1, r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	460b      	mov	r3, r1
 80012ae:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012b0:	e060      	b.n	8001374 <DC_Drive_BTS+0x45c>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	89db      	ldrh	r3, [r3, #14]
 80012bc:	1ad1      	subs	r1, r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	460b      	mov	r3, r1
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012c8:	e054      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d106      	bne.n	80012e0 <DC_Drive_BTS+0x3c8>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8a1a      	ldrh	r2, [r3, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
 80012de:	e01e      	b.n	800131e <DC_Drive_BTS+0x406>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d107      	bne.n	80012f8 <DC_Drive_BTS+0x3e0>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8a19      	ldrh	r1, [r3, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	460b      	mov	r3, r1
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38
 80012f6:	e012      	b.n	800131e <DC_Drive_BTS+0x406>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d107      	bne.n	8001310 <DC_Drive_BTS+0x3f8>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8a19      	ldrh	r1, [r3, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	460b      	mov	r3, r1
 800130c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800130e:	e006      	b.n	800131e <DC_Drive_BTS+0x406>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8a19      	ldrh	r1, [r3, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	460b      	mov	r3, r1
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d106      	bne.n	8001334 <DC_Drive_BTS+0x41c>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8a1a      	ldrh	r2, [r3, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001332:	e01f      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d107      	bne.n	800134c <DC_Drive_BTS+0x434>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8a19      	ldrh	r1, [r3, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	6393      	str	r3, [r2, #56]	; 0x38
}
 800134a:	e013      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d107      	bne.n	8001364 <DC_Drive_BTS+0x44c>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8a19      	ldrh	r1, [r3, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	460b      	mov	r3, r1
 8001360:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001362:	e007      	b.n	8001374 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8a19      	ldrh	r1, [r3, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	460b      	mov	r3, r1
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001372:	e7ff      	b.n	8001374 <DC_Drive_BTS+0x45c>
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6178      	str	r0, [r7, #20]
 8001388:	6139      	str	r1, [r7, #16]
 800138a:	60fa      	str	r2, [r7, #12]
 800138c:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <CountRead>:
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
	enc->vel_Pre = enc->vel_Real;
	enc->count_Pre = enc->count_X4;
}

double CountRead(EncoderRead *enc,uint8_t count_mode){
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013dc:	441a      	add	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <CountRead+0x52>
	{
		return enc->count_X4;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f83b 	bl	8000474 <__aeabi_i2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	e033      	b.n	800146c <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d110      	bne.n	800142e <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <CountRead+0x64>
 8001414:	3303      	adds	r3, #3
 8001416:	109b      	asrs	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f826 	bl	8000474 <__aeabi_i2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	e01e      	b.n	800146c <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e1b      	ldrb	r3, [r3, #24]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d116      	bne.n	8001464 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800143e:	fb03 f202 	mul.w	r2, r3, r2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fb92 f3f3 	sdiv	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f811 	bl	8000474 <__aeabi_i2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001462:	e003      	b.n	800146c <CountRead+0xba>
	}else {
		return 0;
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
	}
}
 800146c:	ec43 2b17 	vmov	d7, r2, r3
 8001470:	eeb0 0a47 	vmov.f32	s0, s14
 8001474:	eef0 0a67 	vmov.f32	s1, s15
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d10a      	bne.n	80014a6 <ResetCount+0x28>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
		enc->count_X1 = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
	}
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80014c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <vApplicationGetIdleTaskMemory+0x30>)
 80014ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2000002c 	.word	0x2000002c
 80014e4:	20000080 	.word	0x20000080

080014e8 <Manual_SetHome>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Manual_SetHome()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af02      	add	r7, sp, #8
	DC_Drive_BTS(&DC, &htim1, 1000, 200, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80014ee:	2304      	movs	r3, #4
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	23c8      	movs	r3, #200	; 0xc8
 80014f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <Manual_SetHome+0x50>)
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <Manual_SetHome+0x54>)
 8001500:	f7ff fd0a 	bl	8000f18 <DC_Drive_BTS>
	osDelay(5000);
 8001504:	f241 3088 	movw	r0, #5000	; 0x1388
 8001508:	f002 ff79 	bl	80043fe <osDelay>
	DC_Drive_BTS(&DC, &htim1, 1000, 0, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800150c:	2304      	movs	r3, #4
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800151a:	4907      	ldr	r1, [pc, #28]	; (8001538 <Manual_SetHome+0x50>)
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <Manual_SetHome+0x54>)
 800151e:	f7ff fcfb 	bl	8000f18 <DC_Drive_BTS>
	ResetCount(&ENC_DC, 1);
 8001522:	2101      	movs	r1, #1
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <Manual_SetHome+0x58>)
 8001526:	f7ff ffaa 	bl	800147e <ResetCount>
	__isReady = 1;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <Manual_SetHome+0x5c>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]

}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000280 	.word	0x20000280
 800153c:	20000330 	.word	0x20000330
 8001540:	20000360 	.word	0x20000360
 8001544:	20000326 	.word	0x20000326

08001548 <PutBall>:

void PutBall()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af02      	add	r7, sp, #8
// 			Target_PWM = 0;
// 			Target_Time = 1;
// 			putBallFlag = 1;
// 		}
// 	}
	if(__isBall)
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <PutBall+0x1d0>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80ac 	beq.w	80016b0 <PutBall+0x168>
	{
		if(!putBallFlag)
 8001558:	4b70      	ldr	r3, [pc, #448]	; (800171c <PutBall+0x1d4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d16a      	bne.n	8001636 <PutBall+0xee>
		{
			if(!__isWall)
 8001560:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <PutBall+0x1d8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d12b      	bne.n	80015c0 <PutBall+0x78>
			{
				if(CountRead(&ENC_DC, count_ModeX1) >= -70000)
 8001568:	2100      	movs	r1, #0
 800156a:	486e      	ldr	r0, [pc, #440]	; (8001724 <PutBall+0x1dc>)
 800156c:	f7ff ff21 	bl	80013b2 <CountRead>
 8001570:	ec51 0b10 	vmov	r0, r1, d0
 8001574:	a360      	add	r3, pc, #384	; (adr r3, 80016f8 <PutBall+0x1b0>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff fa6b 	bl	8000a54 <__aeabi_dcmpge>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <PutBall+0x4c>
				{
					Target_PWM = -300;
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <PutBall+0x1e0>)
 8001586:	4a69      	ldr	r2, [pc, #420]	; (800172c <PutBall+0x1e4>)
 8001588:	601a      	str	r2, [r3, #0]
					Target_Time = 0.5;
 800158a:	4b69      	ldr	r3, [pc, #420]	; (8001730 <PutBall+0x1e8>)
 800158c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e08d      	b.n	80016b0 <PutBall+0x168>
				}
				else if(CountRead(&ENC_DC, count_ModeX1) < -70000)
 8001594:	2100      	movs	r1, #0
 8001596:	4863      	ldr	r0, [pc, #396]	; (8001724 <PutBall+0x1dc>)
 8001598:	f7ff ff0b 	bl	80013b2 <CountRead>
 800159c:	ec51 0b10 	vmov	r0, r1, d0
 80015a0:	a355      	add	r3, pc, #340	; (adr r3, 80016f8 <PutBall+0x1b0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff fa41 	bl	8000a2c <__aeabi_dcmplt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d07f      	beq.n	80016b0 <PutBall+0x168>
				{
					Target_PWM = 0;
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <PutBall+0x1e0>)
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
					Target_Time = 0.1;
 80015b8:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <PutBall+0x1e8>)
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <PutBall+0x1ec>)
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e077      	b.n	80016b0 <PutBall+0x168>
				}
			}
			else
			{
				if(CountRead(&ENC_DC, count_ModeX1) >= -80000)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4858      	ldr	r0, [pc, #352]	; (8001724 <PutBall+0x1dc>)
 80015c4:	f7ff fef5 	bl	80013b2 <CountRead>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a34c      	add	r3, pc, #304	; (adr r3, 8001700 <PutBall+0x1b8>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff fa3f 	bl	8000a54 <__aeabi_dcmpge>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <PutBall+0xa2>
				{
					Target_PWM = -400;
 80015dc:	4b52      	ldr	r3, [pc, #328]	; (8001728 <PutBall+0x1e0>)
 80015de:	4a56      	ldr	r2, [pc, #344]	; (8001738 <PutBall+0x1f0>)
 80015e0:	601a      	str	r2, [r3, #0]
					Target_Time = 0.1;
 80015e2:	4b53      	ldr	r3, [pc, #332]	; (8001730 <PutBall+0x1e8>)
 80015e4:	4a53      	ldr	r2, [pc, #332]	; (8001734 <PutBall+0x1ec>)
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e062      	b.n	80016b0 <PutBall+0x168>
				}
				else if(CountRead(&ENC_DC, count_ModeX1) < -82000)
 80015ea:	2100      	movs	r1, #0
 80015ec:	484d      	ldr	r0, [pc, #308]	; (8001724 <PutBall+0x1dc>)
 80015ee:	f7ff fee0 	bl	80013b2 <CountRead>
 80015f2:	ec51 0b10 	vmov	r0, r1, d0
 80015f6:	a344      	add	r3, pc, #272	; (adr r3, 8001708 <PutBall+0x1c0>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff fa16 	bl	8000a2c <__aeabi_dcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d054      	beq.n	80016b0 <PutBall+0x168>
				{
					Target_PWM = 0;
 8001606:	4b48      	ldr	r3, [pc, #288]	; (8001728 <PutBall+0x1e0>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
					Target_Time = 1.4;
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <PutBall+0x1e8>)
 8001610:	4a4a      	ldr	r2, [pc, #296]	; (800173c <PutBall+0x1f4>)
 8001612:	601a      	str	r2, [r3, #0]
					attempt++;
 8001614:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <PutBall+0x1f8>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b48      	ldr	r3, [pc, #288]	; (8001740 <PutBall+0x1f8>)
 800161e:	801a      	strh	r2, [r3, #0]
					if(attempt > 200)
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <PutBall+0x1f8>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	2bc8      	cmp	r3, #200	; 0xc8
 8001626:	d943      	bls.n	80016b0 <PutBall+0x168>
					{
						attempt = 0;
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <PutBall+0x1f8>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
						putBallFlag = 1;
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <PutBall+0x1d4>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e03c      	b.n	80016b0 <PutBall+0x168>
				}
			}
		}
		else
		{
			if(CountRead(&ENC_DC, count_ModeX1) < -20000)
 8001636:	2100      	movs	r1, #0
 8001638:	483a      	ldr	r0, [pc, #232]	; (8001724 <PutBall+0x1dc>)
 800163a:	f7ff feba 	bl	80013b2 <CountRead>
 800163e:	ec51 0b10 	vmov	r0, r1, d0
 8001642:	a333      	add	r3, pc, #204	; (adr r3, 8001710 <PutBall+0x1c8>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f9f0 	bl	8000a2c <__aeabi_dcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <PutBall+0x11a>
			{
				Target_PWM = 300;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <PutBall+0x1e0>)
 8001654:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <PutBall+0x1fc>)
 8001656:	601a      	str	r2, [r3, #0]
				Target_Time = 1;
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <PutBall+0x1e8>)
 800165a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e026      	b.n	80016b0 <PutBall+0x168>
			}
			else
			{
				Target_PWM = 0;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <PutBall+0x1e0>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
				Target_Time = 0.8;
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <PutBall+0x1e8>)
 800166c:	4a36      	ldr	r2, [pc, #216]	; (8001748 <PutBall+0x200>)
 800166e:	601a      	str	r2, [r3, #0]
				attempt++;
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <PutBall+0x1f8>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <PutBall+0x1f8>)
 800167a:	801a      	strh	r2, [r3, #0]
				if(attempt > 200)
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <PutBall+0x1f8>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2bc8      	cmp	r3, #200	; 0xc8
 8001682:	d915      	bls.n	80016b0 <PutBall+0x168>
				{
					ResetCount(&ENC_DC, 1);
 8001684:	2101      	movs	r1, #1
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <PutBall+0x1dc>)
 8001688:	f7ff fef9 	bl	800147e <ResetCount>
					__isBall = 0;
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <PutBall+0x1d0>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
					__isWall = 0;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <PutBall+0x1d8>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
					attempt = 0;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <PutBall+0x1f8>)
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]
					Ball_RecognizeTime = 0;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <PutBall+0x204>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
					Wall_RecognizeTime = 0;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <PutBall+0x208>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
					putBallFlag = 0;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <PutBall+0x1d4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	Accel_Cal(&Accel_DC, Target_PWM, Target_Time);
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <PutBall+0x1e0>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <PutBall+0x1e8>)
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	eef0 0a47 	vmov.f32	s1, s14
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	4823      	ldr	r0, [pc, #140]	; (8001754 <PutBall+0x20c>)
 80016c6:	f7ff fba7 	bl	8000e18 <Accel_Cal>
	DC_Drive_BTS(&DC, &htim1, 1000, Accel_DC.vel_controller, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <PutBall+0x20c>)
 80016cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	2304      	movs	r3, #4
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e4:	491c      	ldr	r1, [pc, #112]	; (8001758 <PutBall+0x210>)
 80016e6:	481d      	ldr	r0, [pc, #116]	; (800175c <PutBall+0x214>)
 80016e8:	f7ff fc16 	bl	8000f18 <DC_Drive_BTS>
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	00000000 	.word	0x00000000
 80016fc:	c0f11700 	.word	0xc0f11700
 8001700:	00000000 	.word	0x00000000
 8001704:	c0f38800 	.word	0xc0f38800
 8001708:	00000000 	.word	0x00000000
 800170c:	c0f40500 	.word	0xc0f40500
 8001710:	00000000 	.word	0x00000000
 8001714:	c0d38800 	.word	0xc0d38800
 8001718:	20000324 	.word	0x20000324
 800171c:	20000320 	.word	0x20000320
 8001720:	20000325 	.word	0x20000325
 8001724:	20000360 	.word	0x20000360
 8001728:	20000318 	.word	0x20000318
 800172c:	c3960000 	.word	0xc3960000
 8001730:	2000031c 	.word	0x2000031c
 8001734:	3dcccccd 	.word	0x3dcccccd
 8001738:	c3c80000 	.word	0xc3c80000
 800173c:	3fb33333 	.word	0x3fb33333
 8001740:	20000322 	.word	0x20000322
 8001744:	43960000 	.word	0x43960000
 8001748:	3f4ccccd 	.word	0x3f4ccccd
 800174c:	2000032a 	.word	0x2000032a
 8001750:	2000032c 	.word	0x2000032c
 8001754:	2000034c 	.word	0x2000034c
 8001758:	20000280 	.word	0x20000280
 800175c:	20000330 	.word	0x20000330

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b08e      	sub	sp, #56	; 0x38
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f000 fc6f 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176a:	f000 f853 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f000 f9bb 	bl	8001ae8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001772:	f000 f8b9 	bl	80018e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001776:	f000 f963 	bl	8001a40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800177a:	2100      	movs	r1, #0
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <main+0x98>)
 800177e:	f001 fd0b 	bl	8003198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001782:	2104      	movs	r1, #4
 8001784:	481c      	ldr	r0, [pc, #112]	; (80017f8 <main+0x98>)
 8001786:	f001 fd07 	bl	8003198 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800178a:	213c      	movs	r1, #60	; 0x3c
 800178c:	481b      	ldr	r0, [pc, #108]	; (80017fc <main+0x9c>)
 800178e:	f001 fe71 	bl	8003474 <HAL_TIM_Encoder_Start_IT>
  EncoderSetting(&ENC_DC, &htim2, 19200, 0.001);
 8001792:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80017f0 <main+0x90>
 8001796:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800179a:	4918      	ldr	r1, [pc, #96]	; (80017fc <main+0x9c>)
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <main+0xa0>)
 800179e:	f7ff fdef 	bl	8001380 <EncoderSetting>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AccelTask */
  osThreadDef(AccelTask, StartAccelTask, osPriorityAboveNormal, 0, 128);
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <main+0xa4>)
 80017a4:	f107 041c 	add.w	r4, r7, #28
 80017a8:	461d      	mov	r5, r3
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelTaskHandle = osThreadCreate(osThread(AccelTask), NULL);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fdd2 	bl	8004366 <osThreadCreate>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a10      	ldr	r2, [pc, #64]	; (8001808 <main+0xa8>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogicTask */
  osThreadDef(LogicTask, StartLogicTask, osPriorityBelowNormal, 0, 128);
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <main+0xac>)
 80017ca:	463c      	mov	r4, r7
 80017cc:	461d      	mov	r5, r3
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogicTaskHandle = osThreadCreate(osThread(LogicTask), NULL);
 80017da:	463b      	mov	r3, r7
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fdc1 	bl	8004366 <osThreadCreate>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <main+0xb0>)
 80017e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017ea:	f002 fdb5 	bl	8004358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x8e>
 80017f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017f4:	3f50624d 	.word	0x3f50624d
 80017f8:	20000280 	.word	0x20000280
 80017fc:	200002c8 	.word	0x200002c8
 8001800:	20000360 	.word	0x20000360
 8001804:	08005838 	.word	0x08005838
 8001808:	20000310 	.word	0x20000310
 800180c:	08005860 	.word	0x08005860
 8001810:	20000314 	.word	0x20000314

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	; 0x50
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2230      	movs	r2, #48	; 0x30
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f003 ffca 	bl	80057bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <SystemClock_Config+0xcc>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <SystemClock_Config+0xd0>)
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001870:	2301      	movs	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001884:	2304      	movs	r3, #4
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001888:	23a8      	movs	r3, #168	; 0xa8
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800188c:	2302      	movs	r3, #2
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001890:	2304      	movs	r3, #4
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fead 	bl	80025f8 <HAL_RCC_OscConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a4:	f000 f9f2 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a8:	230f      	movs	r3, #15
 80018aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ac:	2302      	movs	r3, #2
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2105      	movs	r1, #5
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 f90e 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018d2:	f000 f9db 	bl	8001c8c <Error_Handler>
  }
}
 80018d6:	bf00      	nop
 80018d8:	3750      	adds	r7, #80	; 0x50
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2220      	movs	r2, #32
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f003 ff4b 	bl	80057bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001928:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <MX_TIM1_Init+0x154>)
 800192a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM1_Init+0x150>)
 800192e:	2253      	movs	r2, #83	; 0x53
 8001930:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x150>)
 800193a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x150>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001952:	4839      	ldr	r0, [pc, #228]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001954:	f001 fb06 	bl	8002f64 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800195e:	f000 f995 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800196c:	4619      	mov	r1, r3
 800196e:	4832      	ldr	r0, [pc, #200]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001970:	f001 fff8 	bl	8003964 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800197a:	f000 f987 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197e:	482e      	ldr	r0, [pc, #184]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001980:	f001 fbb0 	bl	80030e4 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800198a:	f000 f97f 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199a:	4619      	mov	r1, r3
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <MX_TIM1_Init+0x150>)
 800199e:	f002 fbe1 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019a8:	f000 f970 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4819      	ldr	r0, [pc, #100]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019d2:	f001 ff05 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019dc:	f000 f956 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	2204      	movs	r2, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019ea:	f001 fef9 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019f4:	f000 f94a 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a1c:	f002 fc1e 	bl	800425c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a26:	f000 f931 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a2c:	f000 f9f0 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3758      	adds	r7, #88	; 0x58
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000280 	.word	0x20000280
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 feb4 	bl	80057bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a84:	2303      	movs	r3, #3
 8001a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001ab0:	f001 fc3a 	bl	8003328 <HAL_TIM_Encoder_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001aba:	f000 f8e7 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <MX_TIM2_Init+0xa4>)
 8001acc:	f002 fb4a 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ad6:	f000 f8d9 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002c8 	.word	0x200002c8

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_GPIO_Init+0xa8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Ball_Recognize_Pin Wall_Recognize_Pin */
  GPIO_InitStruct.Pin = Ball_Recognize_Pin|Wall_Recognize_Pin;
 8001b6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_GPIO_Init+0xac>)
 8001b84:	f000 fb84 	bl	8002290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021000 	.word	0x40021000

08001b98 <StartAccelTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void const * argument)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(!__isReady)
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <StartAccelTask+0x24>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <StartAccelTask+0x16>
	{
		Manual_SetHome();
 8001ba8:	f7ff fc9e 	bl	80014e8 <Manual_SetHome>
 8001bac:	e001      	b.n	8001bb2 <StartAccelTask+0x1a>
	}
	else
	{
		PutBall();
 8001bae:	f7ff fccb 	bl	8001548 <PutBall>
	}
    osDelay(10);
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f002 fc23 	bl	80043fe <osDelay>
	if(!__isReady)
 8001bb8:	e7f2      	b.n	8001ba0 <StartAccelTask+0x8>
 8001bba:	bf00      	nop
 8001bbc:	20000326 	.word	0x20000326

08001bc0 <StartLogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogicTask */
void StartLogicTask(void const * argument)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogicTask */
  /* Infinite loop */
  for(;;)
  {
	CountRead(&ENC_DC, count_ModeX1);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <StartLogicTask+0x88>)
 8001bcc:	f7ff fbf1 	bl	80013b2 <CountRead>
	Ball_State = HAL_GPIO_ReadPin(Ball_Recognize_GPIO_Port, Ball_Recognize_Pin);
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <StartLogicTask+0x8c>)
 8001bd4:	f000 fcf8 	bl	80025c8 <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <StartLogicTask+0x90>)
 8001bde:	701a      	strb	r2, [r3, #0]
	Wall_State = HAL_GPIO_ReadPin(Wall_Recognize_GPIO_Port, Wall_Recognize_Pin);
 8001be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <StartLogicTask+0x8c>)
 8001be6:	f000 fcef 	bl	80025c8 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <StartLogicTask+0x94>)
 8001bf0:	701a      	strb	r2, [r3, #0]
	if(!Ball_State)
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <StartLogicTask+0x90>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d121      	bne.n	8001c3e <StartLogicTask+0x7e>
	{
		if(Ball_RecognizeTime >= 2000)
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <StartLogicTask+0x98>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c02:	d316      	bcc.n	8001c32 <StartLogicTask+0x72>
		{
			__isBall = 1;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <StartLogicTask+0x9c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
			if(Wall_State)
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <StartLogicTask+0x94>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <StartLogicTask+0x7e>
			{
				if(Wall_RecognizeTime >= 1000)
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <StartLogicTask+0xa0>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d303      	bcc.n	8001c24 <StartLogicTask+0x64>
				{
					__isWall = 1;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <StartLogicTask+0xa4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e00c      	b.n	8001c3e <StartLogicTask+0x7e>
				}
				else
				{
					Wall_RecognizeTime++;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <StartLogicTask+0xa0>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <StartLogicTask+0xa0>)
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <StartLogicTask+0x7e>
				}
			}
		}
		else
		{
			Ball_RecognizeTime++;
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <StartLogicTask+0x98>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <StartLogicTask+0x98>)
 8001c3c:	801a      	strh	r2, [r3, #0]
		}
	}
    osDelay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f002 fbdd 	bl	80043fe <osDelay>
	CountRead(&ENC_DC, count_ModeX1);
 8001c44:	e7c0      	b.n	8001bc8 <StartLogicTask+0x8>
 8001c46:	bf00      	nop
 8001c48:	20000360 	.word	0x20000360
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	20000327 	.word	0x20000327
 8001c54:	20000328 	.word	0x20000328
 8001c58:	2000032a 	.word	0x2000032a
 8001c5c:	20000324 	.word	0x20000324
 8001c60:	2000032c 	.word	0x2000032c
 8001c64:	20000325 	.word	0x20000325

08001c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c7a:	f000 fa07 	bl	800208c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40002000 	.word	0x40002000

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_MspInit+0x54>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x54>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_MspInit+0x54>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_MspInit+0x54>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	210f      	movs	r1, #15
 8001cda:	f06f 0001 	mvn.w	r0, #1
 8001cde:	f000 faad 	bl	800223c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_TIM_Base_MspInit+0x3c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10d      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_TIM_Base_MspInit+0x40>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_TIM_Base_MspInit+0x40>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_TIM_Base_MspInit+0x40>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d152      	bne.n	8001dfc <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4810      	ldr	r0, [pc, #64]	; (8001e08 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001dc8:	f000 fa62 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001de8:	f000 fa52 	bl	8002290 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2105      	movs	r1, #5
 8001df0:	201c      	movs	r0, #28
 8001df2:	f000 fa23 	bl	800223c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df6:	201c      	movs	r0, #28
 8001df8:	f000 fa3c 	bl	8002274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_TIM_MspPostInit+0x68>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d11e      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_TIM_MspPostInit+0x6c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <HAL_TIM_MspPostInit+0x6c>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_TIM_MspPostInit+0x6c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <HAL_TIM_MspPostInit+0x70>)
 8001e6c:	f000 fa10 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020000 	.word	0x40020000

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_InitTick+0xe4>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <HAL_InitTick+0xe4>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_InitTick+0xe4>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb0:	f107 0210 	add.w	r2, r7, #16
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f820 	bl	8002f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eca:	f001 f805 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8001ece:	6378      	str	r0, [r7, #52]	; 0x34
 8001ed0:	e004      	b.n	8001edc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed2:	f001 f801 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_InitTick+0xe8>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_InitTick+0xec>)
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_InitTick+0xf0>)
 8001eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_InitTick+0xec>)
 8001ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_InitTick+0xec>)
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_InitTick+0xec>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_InitTick+0xec>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_InitTick+0xec>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001f10:	4817      	ldr	r0, [pc, #92]	; (8001f70 <HAL_InitTick+0xec>)
 8001f12:	f001 f827 	bl	8002f64 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11b      	bne.n	8001f5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001f24:	4812      	ldr	r0, [pc, #72]	; (8001f70 <HAL_InitTick+0xec>)
 8001f26:	f001 f86d 	bl	8003004 <HAL_TIM_Base_Start_IT>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d111      	bne.n	8001f5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f38:	202d      	movs	r0, #45	; 0x2d
 8001f3a:	f000 f99b 	bl	8002274 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d808      	bhi.n	8001f56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	202d      	movs	r0, #45	; 0x2d
 8001f4a:	f000 f977 	bl	800223c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_InitTick+0xf4>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e002      	b.n	8001f5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	200003a8 	.word	0x200003a8
 8001f74:	40002000 	.word	0x40002000
 8001f78:	20000004 	.word	0x20000004

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <MemManage_Handler+0x4>

08001f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM2_IRQHandler+0x10>)
 8001fae:	f001 fb0f 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200002c8 	.word	0x200002c8

08001fbc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fc2:	f001 fb05 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200003a8 	.word	0x200003a8

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800202c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ffa:	490e      	ldr	r1, [pc, #56]	; (8002034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002010:	4c0b      	ldr	r4, [pc, #44]	; (8002040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800201e:	f7ff ffd7 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002022:	f003 fbd3 	bl	80057cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002026:	f7ff fb9b 	bl	8001760 <main>
  bx  lr    
 800202a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800202c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002038:	080058ac 	.word	0x080058ac
  ldr r2, =_sbss
 800203c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002040:	20004148 	.word	0x20004148

08002044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_Init+0x40>)
 8002052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_Init+0x40>)
 800205e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_Init+0x40>)
 800206a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	2003      	movs	r0, #3
 8002072:	f000 f8d8 	bl	8002226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002076:	200f      	movs	r0, #15
 8002078:	f7ff ff04 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207c:	f7ff fe0c 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	200003f0 	.word	0x200003f0

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200003f0 	.word	0x200003f0

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0b      	blt.n	800215a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4907      	ldr	r1, [pc, #28]	; (8002168 <__NVIC_EnableIRQ+0x38>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff4c 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224e:	f7ff ff61 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6978      	ldr	r0, [r7, #20]
 800225a:	f7ff ffb1 	bl	80021c0 <NVIC_EncodePriority>
 800225e:	4602      	mov	r2, r0
 8002260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff80 	bl	800216c <__NVIC_SetPriority>
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff54 	bl	8002130 <__NVIC_EnableIRQ>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e16b      	b.n	8002584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 815a 	bne.w	800257e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80b4 	beq.w	800257e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_GPIO_Init+0x30c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a5f      	ldr	r2, [pc, #380]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x328>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x32c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_GPIO_Init+0x330>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x20a>
 8002496:	2307      	movs	r3, #7
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249a:	2308      	movs	r3, #8
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae90 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fd00 	bl	80020b4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fcfc 	bl	80020b4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fcec 	bl	80020b4 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fce8 	bl	80020b4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff fca1 	bl	80020b4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fc9d 	bl	80020b4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fc80 	bl	80020b4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff fc7c 	bl	80020b4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff fc60 	bl	80020b4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fc5c 	bl	80020b4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fc49 	bl	80020b4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff fc45 	bl	80020b4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fc05 	bl	80020b4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7ff fc01 	bl	80020b4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7ff fbc6 	bl	80020b4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7ff fbc2 	bl	80020b4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7ff fbb0 	bl	80020b4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7ff fbac 	bl	80020b4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fb80 	bl	80020b4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff fb7c 	bl	80020b4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fb55 	bl	80020b4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fb51 	bl	80020b4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fb3e 	bl	80020b4 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff fb3a 	bl	80020b4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7ff fa6c 	bl	80020b4 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7ff fa68 	bl	80020b4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f8f8 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08005884 	.word	0x08005884
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	; 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc4:	f7fd feaa 	bl	8000b1c <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fe50 	bl	8000b1c <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08005894 	.word	0x08005894

08002f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_RCC_GetClockConfig+0x60>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0207 	and.w	r2, r3, #7
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	601a      	str	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e041      	b.n	8002ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe feb0 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fdce 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04e      	b.n	80030ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d01d      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <HAL_TIM_Base_Start_IT+0xc8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d111      	bne.n	80030a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d010      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	e007      	b.n	80030b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40010400 	.word	0x40010400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40001800 	.word	0x40001800

080030e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f839 	bl	8003182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fd0e 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_TIM_PWM_Start+0x24>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e022      	b.n	8003202 <HAL_TIM_PWM_Start+0x6a>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d109      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x3e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e015      	b.n	8003202 <HAL_TIM_PWM_Start+0x6a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d109      	bne.n	80031f0 <HAL_TIM_PWM_Start+0x58>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e008      	b.n	8003202 <HAL_TIM_PWM_Start+0x6a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07c      	b.n	8003304 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0x82>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003218:	e013      	b.n	8003242 <HAL_TIM_PWM_Start+0xaa>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d104      	bne.n	800322a <HAL_TIM_PWM_Start+0x92>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003228:	e00b      	b.n	8003242 <HAL_TIM_PWM_Start+0xaa>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d104      	bne.n	800323a <HAL_TIM_PWM_Start+0xa2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003238:	e003      	b.n	8003242 <HAL_TIM_PWM_Start+0xaa>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 ff64 	bl	8004118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_TIM_PWM_Start+0x174>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIM_PWM_Start+0xcc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <HAL_TIM_PWM_Start+0x178>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_TIM_PWM_Start+0xd0>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_TIM_PWM_Start+0xd2>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_TIM_PWM_Start+0x174>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d022      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d01d      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_TIM_PWM_Start+0x17c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <HAL_TIM_PWM_Start+0x180>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_PWM_Start+0x184>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_TIM_PWM_Start+0x178>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_TIM_PWM_Start+0x188>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIM_PWM_Start+0x136>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_TIM_PWM_Start+0x18c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d010      	beq.n	8003302 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	e007      	b.n	8003302 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010000 	.word	0x40010000
 8003310:	40010400 	.word	0x40010400
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40014000 	.word	0x40014000
 8003324:	40001800 	.word	0x40001800

08003328 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e097      	b.n	800346c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fe fcef 	bl	8001d34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336c:	f023 0307 	bic.w	r3, r3, #7
 8003370:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f000 fbe1 	bl	8003b44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	4313      	orrs	r3, r2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033c8:	f023 030c 	bic.w	r3, r3, #12
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	011a      	lsls	r2, r3, #4
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	031b      	lsls	r3, r3, #12
 80033f8:	4313      	orrs	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	4313      	orrs	r3, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003484:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800348c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003494:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800349c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d110      	bne.n	80034c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034aa:	7b7b      	ldrb	r3, [r7, #13]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e089      	b.n	80035c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c4:	e031      	b.n	800352a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d110      	bne.n	80034ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034cc:	7bbb      	ldrb	r3, [r7, #14]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d2:	7b3b      	ldrb	r3, [r7, #12]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e075      	b.n	80035c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ec:	e01d      	b.n	800352a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034fa:	7b7b      	ldrb	r3, [r7, #13]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d102      	bne.n	8003506 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003500:	7b3b      	ldrb	r3, [r7, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e05e      	b.n	80035c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d010      	beq.n	8003558 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003536:	e01f      	b.n	8003578 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2201      	movs	r2, #1
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fde9 	bl	8004118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0202 	orr.w	r2, r2, #2
 8003554:	60da      	str	r2, [r3, #12]
      break;
 8003556:	e02e      	b.n	80035b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	2104      	movs	r1, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fdd9 	bl	8004118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0204 	orr.w	r2, r2, #4
 8003574:	60da      	str	r2, [r3, #12]
      break;
 8003576:	e01e      	b.n	80035b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fdc9 	bl	8004118 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	2104      	movs	r1, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fdc2 	bl	8004118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0202 	orr.w	r2, r2, #2
 80035a2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0204 	orr.w	r2, r2, #4
 80035b2:	60da      	str	r2, [r3, #12]
      break;
 80035b4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0202 	mvn.w	r2, #2
 80035fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa77 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa69 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa7a 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b04      	cmp	r3, #4
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0204 	mvn.w	r2, #4
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa4d 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa3f 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa50 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b08      	cmp	r3, #8
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0208 	mvn.w	r2, #8
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2204      	movs	r2, #4
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa23 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa15 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fa26 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d122      	bne.n	8003728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d11b      	bne.n	8003728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0210 	mvn.w	r2, #16
 80036f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9f9 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 8003714:	e005      	b.n	8003722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9eb 	bl	8003af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f9fc 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0201 	mvn.w	r2, #1
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe fa8a 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fdca 	bl	8004314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d10e      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d107      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9c1 	bl	8003b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0220 	mvn.w	r2, #32
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fd94 	bl	8004300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0ae      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	f200 809f 	bhi.w	800394c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003849 	.word	0x08003849
 8003818:	0800394d 	.word	0x0800394d
 800381c:	0800394d 	.word	0x0800394d
 8003820:	0800394d 	.word	0x0800394d
 8003824:	08003889 	.word	0x08003889
 8003828:	0800394d 	.word	0x0800394d
 800382c:	0800394d 	.word	0x0800394d
 8003830:	0800394d 	.word	0x0800394d
 8003834:	080038cb 	.word	0x080038cb
 8003838:	0800394d 	.word	0x0800394d
 800383c:	0800394d 	.word	0x0800394d
 8003840:	0800394d 	.word	0x0800394d
 8003844:	0800390b 	.word	0x0800390b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fa18 	bl	8003c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6999      	ldr	r1, [r3, #24]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	619a      	str	r2, [r3, #24]
      break;
 8003886:	e064      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa68 	bl	8003d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6999      	ldr	r1, [r3, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	021a      	lsls	r2, r3, #8
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	619a      	str	r2, [r3, #24]
      break;
 80038c8:	e043      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fabd 	bl	8003e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0208 	orr.w	r2, r2, #8
 80038e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0204 	bic.w	r2, r2, #4
 80038f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69d9      	ldr	r1, [r3, #28]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	61da      	str	r2, [r3, #28]
      break;
 8003908:	e023      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fb11 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69d9      	ldr	r1, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	021a      	lsls	r2, r3, #8
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	61da      	str	r2, [r3, #28]
      break;
 800394a:	e002      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
      break;
 8003950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e0b4      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x186>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800399e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d03e      	beq.n	8003a38 <HAL_TIM_ConfigClockSource+0xd4>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	f200 8087 	bhi.w	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	f000 8086 	beq.w	8003ad6 <HAL_TIM_ConfigClockSource+0x172>
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d87f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d01a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xa6>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d87b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d050      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x11a>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d877      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d03c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xfa>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d873      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d058      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x13a>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d86f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d064      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d86b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d060      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d867      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d05a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 fb5d 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	609a      	str	r2, [r3, #8]
      break;
 8003a36:	e04f      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f000 fb46 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5a:	609a      	str	r2, [r3, #8]
      break;
 8003a5c:	e03c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 faba 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2150      	movs	r1, #80	; 0x50
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fb13 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e02c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fad9 	bl	8004042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2160      	movs	r1, #96	; 0x60
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fb03 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e01c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fa9a 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 faf3 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e00c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f000 faea 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003ace:	e003      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x64>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC1_SetConfig+0x8e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0320 	bic.w	r3, r3, #32
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC2_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10d      	bne.n	8003de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <TIM_OC2_SetConfig+0xe4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_OC2_SetConfig+0x94>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC2_SetConfig+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d113      	bne.n	8003e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC3_SetConfig+0x66>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10d      	bne.n	8003ed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <TIM_OC3_SetConfig+0xe0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC3_SetConfig+0x92>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <TIM_OC3_SetConfig+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d113      	bne.n	8003f0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <TIM_OC4_SetConfig+0xa4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC4_SetConfig+0x68>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <TIM_OC4_SetConfig+0xa8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d109      	bne.n	8003fb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	019b      	lsls	r3, r3, #6
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0210 	bic.w	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800406c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f043 0307 	orr.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	021a      	lsls	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2201      	movs	r2, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e05a      	b.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a21      	ldr	r2, [pc, #132]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d01d      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1a      	ldr	r2, [pc, #104]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10c      	bne.n	8004220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400
 8004254:	40014000 	.word	0x40014000
 8004258:	40001800 	.word	0x40001800

0800425c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004274:	2302      	movs	r3, #2
 8004276:	e03d      	b.n	80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800433a:	2b84      	cmp	r3, #132	; 0x84
 800433c:	d005      	beq.n	800434a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800433e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	3303      	adds	r3, #3
 8004348:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800435c:	f000 fade 	bl	800491c <vTaskStartScheduler>
  
  return osOK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	bd80      	pop	{r7, pc}

08004366 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004368:	b089      	sub	sp, #36	; 0x24
 800436a:	af04      	add	r7, sp, #16
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <osThreadCreate+0x54>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01c      	beq.n	80043ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685c      	ldr	r4, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691e      	ldr	r6, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ffc8 	bl	8004328 <makeFreeRtosPriority>
 8004398:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043a2:	9202      	str	r2, [sp, #8]
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	9100      	str	r1, [sp, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4632      	mov	r2, r6
 80043ac:	4629      	mov	r1, r5
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 f8ed 	bl	800458e <xTaskCreateStatic>
 80043b4:	4603      	mov	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e01c      	b.n	80043f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685c      	ldr	r4, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ffaa 	bl	8004328 <makeFreeRtosPriority>
 80043d4:	4602      	mov	r2, r0
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	9200      	str	r2, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	4632      	mov	r2, r6
 80043e2:	4629      	mov	r1, r5
 80043e4:	4620      	mov	r0, r4
 80043e6:	f000 f92f 	bl	8004648 <xTaskCreate>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043f4:	68fb      	ldr	r3, [r7, #12]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <osDelay+0x16>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e000      	b.n	8004416 <osDelay+0x18>
 8004414:	2301      	movs	r3, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fa4c 	bl	80048b4 <vTaskDelay>
  
  return osOK;
 800441c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f103 0208 	add.w	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f103 0208 	add.w	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f103 0208 	add.w	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d103      	bne.n	80044e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e00c      	b.n	8004502 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3308      	adds	r3, #8
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e002      	b.n	80044f6 <vListInsert+0x2e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d2f6      	bcs.n	80044f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6892      	ldr	r2, [r2, #8]
 8004550:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6852      	ldr	r2, [r2, #4]
 800455a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d103      	bne.n	800456e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08e      	sub	sp, #56	; 0x38
 8004592:	af04      	add	r7, sp, #16
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	61fb      	str	r3, [r7, #28]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045d4:	2354      	movs	r3, #84	; 0x54
 80045d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b54      	cmp	r3, #84	; 0x54
 80045dc:	d00a      	beq.n	80045f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61bb      	str	r3, [r7, #24]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <xTaskCreateStatic+0xac>
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01b      	beq.n	800463a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004614:	2300      	movs	r3, #0
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f850 	bl	80046d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004634:	f000 f8d4 	bl	80047e0 <prvAddNewTaskToReadyList>
 8004638:	e001      	b.n	800463e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800463e:	697b      	ldr	r3, [r7, #20]
	}
 8004640:	4618      	mov	r0, r3
 8004642:	3728      	adds	r7, #40	; 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08c      	sub	sp, #48	; 0x30
 800464c:	af04      	add	r7, sp, #16
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fec3 	bl	80053e8 <pvPortMalloc>
 8004662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800466a:	2054      	movs	r0, #84	; 0x54
 800466c:	f000 febc 	bl	80053e8 <pvPortMalloc>
 8004670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
 800467e:	e005      	b.n	800468c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004680:	6978      	ldr	r0, [r7, #20]
 8004682:	f000 ff7d 	bl	8005580 <vPortFree>
 8004686:	e001      	b.n	800468c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d017      	beq.n	80046c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	2300      	movs	r3, #0
 800469e:	9303      	str	r3, [sp, #12]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	9302      	str	r3, [sp, #8]
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f80e 	bl	80046d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b6:	69f8      	ldr	r0, [r7, #28]
 80046b8:	f000 f892 	bl	80047e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e002      	b.n	80046c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c8:	69bb      	ldr	r3, [r7, #24]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046ea:	3b01      	subs	r3, #1
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f023 0307 	bic.w	r3, r3, #7
 80046f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	617b      	str	r3, [r7, #20]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01f      	beq.n	8004760 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e012      	b.n	800474c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	7819      	ldrb	r1, [r3, #0]
 800472e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	3334      	adds	r3, #52	; 0x34
 8004736:	460a      	mov	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	d9e9      	bls.n	8004726 <prvInitialiseNewTask+0x54>
 8004752:	e000      	b.n	8004756 <prvInitialiseNewTask+0x84>
			{
				break;
 8004754:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475e:	e003      	b.n	8004768 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	2b06      	cmp	r3, #6
 800476c:	d901      	bls.n	8004772 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800476e:	2306      	movs	r3, #6
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2200      	movs	r2, #0
 8004782:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fe6c 	bl	8004466 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	3318      	adds	r3, #24
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fe67 	bl	8004466 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	f1c3 0207 	rsb	r2, r3, #7
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	2200      	movs	r2, #0
 80047b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	69b8      	ldr	r0, [r7, #24]
 80047c2:	f000 fc05 	bl	8004fd0 <pxPortInitialiseStack>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047e8:	f000 fd1c 	bl	8005224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047ec:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <prvAddNewTaskToReadyList+0xb8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a29      	ldr	r2, [pc, #164]	; (8004898 <prvAddNewTaskToReadyList+0xb8>)
 80047f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047f6:	4b29      	ldr	r3, [pc, #164]	; (800489c <prvAddNewTaskToReadyList+0xbc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047fe:	4a27      	ldr	r2, [pc, #156]	; (800489c <prvAddNewTaskToReadyList+0xbc>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <prvAddNewTaskToReadyList+0xb8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800480c:	f000 fabc 	bl	8004d88 <prvInitialiseTaskLists>
 8004810:	e00d      	b.n	800482e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <prvAddNewTaskToReadyList+0xc0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <prvAddNewTaskToReadyList+0xbc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d802      	bhi.n	800482e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <prvAddNewTaskToReadyList+0xbc>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 8004836:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4313      	orrs	r3, r2
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7ff fe0d 	bl	8004480 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004866:	f000 fd0d 	bl	8005284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <prvAddNewTaskToReadyList+0xc0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <prvAddNewTaskToReadyList+0xbc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	d207      	bcs.n	8004890 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	200004f4 	.word	0x200004f4
 800489c:	200003f4 	.word	0x200003f4
 80048a0:	20000500 	.word	0x20000500
 80048a4:	20000510 	.word	0x20000510
 80048a8:	200004fc 	.word	0x200004fc
 80048ac:	200003f8 	.word	0x200003f8
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d017      	beq.n	80048f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <vTaskDelay+0x60>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <vTaskDelay+0x30>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60bb      	str	r3, [r7, #8]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048e4:	f000 f87a 	bl	80049dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048e8:	2100      	movs	r1, #0
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fb0a 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048f0:	f000 f882 	bl	80049f8 <xTaskResumeAll>
 80048f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d107      	bne.n	800490c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <vTaskDelay+0x64>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	2000051c 	.word	0x2000051c
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800492a:	463a      	mov	r2, r7
 800492c:	1d39      	adds	r1, r7, #4
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fdbe 	bl	80014b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	9202      	str	r2, [sp, #8]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2300      	movs	r3, #0
 8004948:	460a      	mov	r2, r1
 800494a:	491e      	ldr	r1, [pc, #120]	; (80049c4 <vTaskStartScheduler+0xa8>)
 800494c:	481e      	ldr	r0, [pc, #120]	; (80049c8 <vTaskStartScheduler+0xac>)
 800494e:	f7ff fe1e 	bl	800458e <xTaskCreateStatic>
 8004952:	4603      	mov	r3, r0
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <vTaskStartScheduler+0xb0>)
 8004956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <vTaskStartScheduler+0xb0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004960:	2301      	movs	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e001      	b.n	800496a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d116      	bne.n	800499e <vTaskStartScheduler+0x82>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	613b      	str	r3, [r7, #16]
}
 8004982:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <vTaskStartScheduler+0xb4>)
 8004986:	f04f 32ff 	mov.w	r2, #4294967295
 800498a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <vTaskStartScheduler+0xb8>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <vTaskStartScheduler+0xbc>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004998:	f000 fba2 	bl	80050e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800499c:	e00e      	b.n	80049bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d10a      	bne.n	80049bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60fb      	str	r3, [r7, #12]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <vTaskStartScheduler+0x9e>
}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0800587c 	.word	0x0800587c
 80049c8:	08004d59 	.word	0x08004d59
 80049cc:	20000518 	.word	0x20000518
 80049d0:	20000514 	.word	0x20000514
 80049d4:	20000500 	.word	0x20000500
 80049d8:	200004f8 	.word	0x200004f8

080049dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <vTaskSuspendAll+0x18>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	4a03      	ldr	r2, [pc, #12]	; (80049f4 <vTaskSuspendAll+0x18>)
 80049e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	2000051c 	.word	0x2000051c

080049f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <xTaskResumeAll+0x114>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	603b      	str	r3, [r7, #0]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a24:	f000 fbfe 	bl	8005224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a28:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <xTaskResumeAll+0x114>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a37      	ldr	r2, [pc, #220]	; (8004b0c <xTaskResumeAll+0x114>)
 8004a30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <xTaskResumeAll+0x114>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d161      	bne.n	8004afe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <xTaskResumeAll+0x118>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d05d      	beq.n	8004afe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a42:	e02e      	b.n	8004aa2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a44:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <xTaskResumeAll+0x11c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3318      	adds	r3, #24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fd72 	bl	800453a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fd6d 	bl	800453a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <xTaskResumeAll+0x120>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <xTaskResumeAll+0x120>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <xTaskResumeAll+0x124>)
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7ff fcf9 	bl	8004480 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <xTaskResumeAll+0x128>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <xTaskResumeAll+0x12c>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <xTaskResumeAll+0x11c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1cc      	bne.n	8004a44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ab0:	f000 fa08 	bl	8004ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <xTaskResumeAll+0x130>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ac0:	f000 f836 	bl	8004b30 <xTaskIncrementTick>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <xTaskResumeAll+0x12c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f1      	bne.n	8004ac0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <xTaskResumeAll+0x130>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <xTaskResumeAll+0x12c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <xTaskResumeAll+0x134>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004afe:	f000 fbc1 	bl	8005284 <vPortExitCritical>

	return xAlreadyYielded;
 8004b02:	68bb      	ldr	r3, [r7, #8]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000051c 	.word	0x2000051c
 8004b10:	200004f4 	.word	0x200004f4
 8004b14:	200004b4 	.word	0x200004b4
 8004b18:	200004fc 	.word	0x200004fc
 8004b1c:	200003f8 	.word	0x200003f8
 8004b20:	200003f4 	.word	0x200003f4
 8004b24:	20000508 	.word	0x20000508
 8004b28:	20000504 	.word	0x20000504
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3a:	4b4e      	ldr	r3, [pc, #312]	; (8004c74 <xTaskIncrementTick+0x144>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f040 808e 	bne.w	8004c60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b44:	4b4c      	ldr	r3, [pc, #304]	; (8004c78 <xTaskIncrementTick+0x148>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <xTaskIncrementTick+0x148>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d120      	bne.n	8004b9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b58:	4b48      	ldr	r3, [pc, #288]	; (8004c7c <xTaskIncrementTick+0x14c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	603b      	str	r3, [r7, #0]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xTaskIncrementTick+0x46>
 8004b78:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <xTaskIncrementTick+0x14c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <xTaskIncrementTick+0x150>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3e      	ldr	r2, [pc, #248]	; (8004c7c <xTaskIncrementTick+0x14c>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4a3e      	ldr	r2, [pc, #248]	; (8004c80 <xTaskIncrementTick+0x150>)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <xTaskIncrementTick+0x154>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a3c      	ldr	r2, [pc, #240]	; (8004c84 <xTaskIncrementTick+0x154>)
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	f000 f995 	bl	8004ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	; (8004c88 <xTaskIncrementTick+0x158>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d348      	bcc.n	8004c36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <xTaskIncrementTick+0x14c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bae:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <xTaskIncrementTick+0x158>)
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	601a      	str	r2, [r3, #0]
					break;
 8004bb6:	e03e      	b.n	8004c36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <xTaskIncrementTick+0x14c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d203      	bcs.n	8004bd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bd0:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <xTaskIncrementTick+0x158>)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bd6:	e02e      	b.n	8004c36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff fcac 	bl	800453a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3318      	adds	r3, #24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fca3 	bl	800453a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <xTaskIncrementTick+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <xTaskIncrementTick+0x15c>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <xTaskIncrementTick+0x160>)
 8004c14:	441a      	add	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7ff fc2f 	bl	8004480 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <xTaskIncrementTick+0x164>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3b9      	bcc.n	8004ba4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c34:	e7b6      	b.n	8004ba4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <xTaskIncrementTick+0x164>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4914      	ldr	r1, [pc, #80]	; (8004c90 <xTaskIncrementTick+0x160>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d901      	bls.n	8004c52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <xTaskIncrementTick+0x168>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	e004      	b.n	8004c6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c60:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <xTaskIncrementTick+0x16c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <xTaskIncrementTick+0x16c>)
 8004c68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	2000051c 	.word	0x2000051c
 8004c78:	200004f8 	.word	0x200004f8
 8004c7c:	200004ac 	.word	0x200004ac
 8004c80:	200004b0 	.word	0x200004b0
 8004c84:	2000050c 	.word	0x2000050c
 8004c88:	20000514 	.word	0x20000514
 8004c8c:	200004fc 	.word	0x200004fc
 8004c90:	200003f8 	.word	0x200003f8
 8004c94:	200003f4 	.word	0x200003f4
 8004c98:	20000508 	.word	0x20000508
 8004c9c:	20000504 	.word	0x20000504

08004ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <vTaskSwitchContext+0xa4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <vTaskSwitchContext+0xa8>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cb4:	e03f      	b.n	8004d36 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <vTaskSwitchContext+0xa8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <vTaskSwitchContext+0xac>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	f1c3 031f 	rsb	r3, r3, #31
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	491f      	ldr	r1, [pc, #124]	; (8004d50 <vTaskSwitchContext+0xb0>)
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	607b      	str	r3, [r7, #4]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <vTaskSwitchContext+0x5a>
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <vTaskSwitchContext+0xb0>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d104      	bne.n	8004d2c <vTaskSwitchContext+0x8c>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <vTaskSwitchContext+0xb4>)
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000051c 	.word	0x2000051c
 8004d48:	20000508 	.word	0x20000508
 8004d4c:	200004fc 	.word	0x200004fc
 8004d50:	200003f8 	.word	0x200003f8
 8004d54:	200003f4 	.word	0x200003f4

08004d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d60:	f000 f852 	bl	8004e08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <prvIdleTask+0x28>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d9f9      	bls.n	8004d60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <prvIdleTask+0x2c>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d7c:	e7f0      	b.n	8004d60 <prvIdleTask+0x8>
 8004d7e:	bf00      	nop
 8004d80:	200003f8 	.word	0x200003f8
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	e00c      	b.n	8004dae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <prvInitialiseTaskLists+0x60>)
 8004da0:	4413      	add	r3, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb3f 	bl	8004426 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3301      	adds	r3, #1
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d9ef      	bls.n	8004d94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <prvInitialiseTaskLists+0x64>)
 8004db6:	f7ff fb36 	bl	8004426 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dba:	480d      	ldr	r0, [pc, #52]	; (8004df0 <prvInitialiseTaskLists+0x68>)
 8004dbc:	f7ff fb33 	bl	8004426 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dc0:	480c      	ldr	r0, [pc, #48]	; (8004df4 <prvInitialiseTaskLists+0x6c>)
 8004dc2:	f7ff fb30 	bl	8004426 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dc6:	480c      	ldr	r0, [pc, #48]	; (8004df8 <prvInitialiseTaskLists+0x70>)
 8004dc8:	f7ff fb2d 	bl	8004426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dcc:	480b      	ldr	r0, [pc, #44]	; (8004dfc <prvInitialiseTaskLists+0x74>)
 8004dce:	f7ff fb2a 	bl	8004426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <prvInitialiseTaskLists+0x78>)
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <prvInitialiseTaskLists+0x64>)
 8004dd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvInitialiseTaskLists+0x7c>)
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <prvInitialiseTaskLists+0x68>)
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200003f8 	.word	0x200003f8
 8004dec:	20000484 	.word	0x20000484
 8004df0:	20000498 	.word	0x20000498
 8004df4:	200004b4 	.word	0x200004b4
 8004df8:	200004c8 	.word	0x200004c8
 8004dfc:	200004e0 	.word	0x200004e0
 8004e00:	200004ac 	.word	0x200004ac
 8004e04:	200004b0 	.word	0x200004b0

08004e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e0e:	e019      	b.n	8004e44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e10:	f000 fa08 	bl	8005224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <prvCheckTasksWaitingTermination+0x50>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb8a 	bl	800453a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <prvCheckTasksWaitingTermination+0x54>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <prvCheckTasksWaitingTermination+0x54>)
 8004e2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e3a:	f000 fa23 	bl	8005284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f810 	bl	8004e64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <prvCheckTasksWaitingTermination+0x58>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e1      	bne.n	8004e10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200004c8 	.word	0x200004c8
 8004e5c:	200004f4 	.word	0x200004f4
 8004e60:	200004dc 	.word	0x200004dc

08004e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d108      	bne.n	8004e88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fb80 	bl	8005580 <vPortFree>
				vPortFree( pxTCB );
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fb7d 	bl	8005580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e86:	e018      	b.n	8004eba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d103      	bne.n	8004e9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb74 	bl	8005580 <vPortFree>
	}
 8004e98:	e00f      	b.n	8004eba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d00a      	beq.n	8004eba <prvDeleteTCB+0x56>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <prvDeleteTCB+0x54>
	}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004edc:	e008      	b.n	8004ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	200004ac 	.word	0x200004ac
 8004f00:	20000514 	.word	0x20000514

08004f04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f14:	4b28      	ldr	r3, [pc, #160]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fb0d 	bl	800453a <uxListRemove>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d10a      	bne.n	8004f5c <prvAddCurrentTaskToDelayedList+0x58>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	481a      	ldr	r0, [pc, #104]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f56:	f7ff fa93 	bl	8004480 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f5a:	e026      	b.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d209      	bcs.n	8004f88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7ff faa1 	bl	80044c8 <vListInsert>
}
 8004f86:	e010      	b.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7ff fa97 	bl	80044c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d202      	bcs.n	8004faa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6013      	str	r3, [r2, #0]
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200004f8 	.word	0x200004f8
 8004fb8:	200003f4 	.word	0x200003f4
 8004fbc:	200004fc 	.word	0x200004fc
 8004fc0:	200004e0 	.word	0x200004e0
 8004fc4:	200004b0 	.word	0x200004b0
 8004fc8:	200004ac 	.word	0x200004ac
 8004fcc:	20000514 	.word	0x20000514

08004fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3b04      	subs	r3, #4
 8004fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <pxPortInitialiseStack+0x64>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b14      	subs	r3, #20
 800500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b04      	subs	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f06f 0202 	mvn.w	r2, #2
 800501e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b20      	subs	r3, #32
 8005024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	08005039 	.word	0x08005039

08005038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <prvTaskExitError+0x54>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d00a      	beq.n	8005062 <prvTaskExitError+0x2a>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60fb      	str	r3, [r7, #12]
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <prvTaskExitError+0x28>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005076:	bf00      	nop
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0fc      	beq.n	8005078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c

08005090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <pxCurrentTCBConst2>)
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f380 8809 	msr	PSP, r0
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8811 	msr	BASEPRI, r0
 80050aa:	4770      	bx	lr
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst2>:
 80050b0:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <prvPortStartFirstTask+0x24>)
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f380 8808 	msr	MSP, r0
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8814 	msr	CONTROL, r0
 80050ca:	b662      	cpsie	i
 80050cc:	b661      	cpsie	f
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	df00      	svc	0
 80050d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050da:	bf00      	nop
 80050dc:	e000ed08 	.word	0xe000ed08

080050e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <xPortStartScheduler+0x120>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a46      	ldr	r2, [pc, #280]	; (8005204 <xPortStartScheduler+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10a      	bne.n	8005106 <xPortStartScheduler+0x26>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005106:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <xPortStartScheduler+0x120>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3f      	ldr	r2, [pc, #252]	; (8005208 <xPortStartScheduler+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10a      	bne.n	8005126 <xPortStartScheduler+0x46>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <xPortStartScheduler+0x12c>)
 8005128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <xPortStartScheduler+0x130>)
 800514c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <xPortStartScheduler+0x134>)
 8005150:	2207      	movs	r2, #7
 8005152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005154:	e009      	b.n	800516a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <xPortStartScheduler+0x134>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3b01      	subs	r3, #1
 800515c:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <xPortStartScheduler+0x134>)
 800515e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d0ef      	beq.n	8005156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005176:	4b27      	ldr	r3, [pc, #156]	; (8005214 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1c3 0307 	rsb	r3, r3, #7
 800517e:	2b04      	cmp	r3, #4
 8005180:	d00a      	beq.n	8005198 <xPortStartScheduler+0xb8>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60bb      	str	r3, [r7, #8]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <xPortStartScheduler+0x134>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <xPortStartScheduler+0x134>)
 80051a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <xPortStartScheduler+0x134>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <xPortStartScheduler+0x134>)
 80051ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <xPortStartScheduler+0x138>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <xPortStartScheduler+0x138>)
 80051bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <xPortStartScheduler+0x138>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <xPortStartScheduler+0x138>)
 80051c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ce:	f000 f8dd 	bl	800538c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <xPortStartScheduler+0x13c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051d8:	f000 f8fc 	bl	80053d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <xPortStartScheduler+0x140>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <xPortStartScheduler+0x140>)
 80051e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051e8:	f7ff ff66 	bl	80050b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051ec:	f7ff fd58 	bl	8004ca0 <vTaskSwitchContext>
	prvTaskExitError();
 80051f0:	f7ff ff22 	bl	8005038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	e000ed00 	.word	0xe000ed00
 8005204:	410fc271 	.word	0x410fc271
 8005208:	410fc270 	.word	0x410fc270
 800520c:	e000e400 	.word	0xe000e400
 8005210:	20000520 	.word	0x20000520
 8005214:	20000524 	.word	0x20000524
 8005218:	e000ed20 	.word	0xe000ed20
 800521c:	2000000c 	.word	0x2000000c
 8005220:	e000ef34 	.word	0xe000ef34

08005224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <vPortEnterCritical+0x58>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <vPortEnterCritical+0x58>)
 8005246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <vPortEnterCritical+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10f      	bne.n	8005270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <vPortEnterCritical+0x5c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <vPortEnterCritical+0x4c>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	603b      	str	r3, [r7, #0]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vPortEnterCritical+0x4a>
	}
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	2000000c 	.word	0x2000000c
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <vPortExitCritical+0x50>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vPortExitCritical+0x24>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <vPortExitCritical+0x50>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <vPortExitCritical+0x50>)
 80052b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <vPortExitCritical+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <vPortExitCritical+0x42>
 80052ba:	2300      	movs	r3, #0
 80052bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
	...

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	f01e 0f10 	tst.w	lr, #16
 80052f0:	bf08      	it	eq
 80052f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005304:	f380 8811 	msr	BASEPRI, r0
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f7ff fcc6 	bl	8004ca0 <vTaskSwitchContext>
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f380 8811 	msr	BASEPRI, r0
 800531c:	bc09      	pop	{r0, r3}
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	6808      	ldr	r0, [r1, #0]
 8005322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005326:	f01e 0f10 	tst.w	lr, #16
 800532a:	bf08      	it	eq
 800532c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005330:	f380 8809 	msr	PSP, r0
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst>:
 8005340:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
}
 8005360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005362:	f7ff fbe5 	bl	8004b30 <xTaskIncrementTick>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <SysTick_Handler+0x40>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <vPortSetupTimerInterrupt+0x38>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <vPortSetupTimerInterrupt+0x3c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <vPortSetupTimerInterrupt+0x40>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <vPortSetupTimerInterrupt+0x44>)
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <vPortSetupTimerInterrupt+0x34>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010
 80053c4:	e000e018 	.word	0xe000e018
 80053c8:	20000000 	.word	0x20000000
 80053cc:	10624dd3 	.word	0x10624dd3
 80053d0:	e000e014 	.word	0xe000e014

080053d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053e4 <vPortEnableVFP+0x10>
 80053d8:	6801      	ldr	r1, [r0, #0]
 80053da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053de:	6001      	str	r1, [r0, #0]
 80053e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053e2:	bf00      	nop
 80053e4:	e000ed88 	.word	0xe000ed88

080053e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f4:	f7ff faf2 	bl	80049dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053f8:	4b5b      	ldr	r3, [pc, #364]	; (8005568 <pvPortMalloc+0x180>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005400:	f000 f920 	bl	8005644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005404:	4b59      	ldr	r3, [pc, #356]	; (800556c <pvPortMalloc+0x184>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8093 	bne.w	8005538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <pvPortMalloc+0x6c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06e      	beq.n	8005538 <pvPortMalloc+0x150>
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <pvPortMalloc+0x188>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d869      	bhi.n	8005538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005464:	4b43      	ldr	r3, [pc, #268]	; (8005574 <pvPortMalloc+0x18c>)
 8005466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005468:	4b42      	ldr	r3, [pc, #264]	; (8005574 <pvPortMalloc+0x18c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800546e:	e004      	b.n	800547a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <pvPortMalloc+0xa4>
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f1      	bne.n	8005470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <pvPortMalloc+0x180>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	429a      	cmp	r2, r3
 8005494:	d050      	beq.n	8005538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	2308      	movs	r3, #8
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d91f      	bls.n	80054f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <pvPortMalloc+0xf8>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	613b      	str	r3, [r7, #16]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f2:	69b8      	ldr	r0, [r7, #24]
 80054f4:	f000 f908 	bl	8005708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <pvPortMalloc+0x188>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <pvPortMalloc+0x188>)
 8005504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <pvPortMalloc+0x188>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <pvPortMalloc+0x190>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d203      	bcs.n	800551a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <pvPortMalloc+0x188>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <pvPortMalloc+0x190>)
 8005518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <pvPortMalloc+0x184>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	431a      	orrs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <pvPortMalloc+0x194>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <pvPortMalloc+0x194>)
 8005536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005538:	f7ff fa5e 	bl	80049f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <pvPortMalloc+0x174>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <pvPortMalloc+0x172>
	return pvReturn;
 800555c:	69fb      	ldr	r3, [r7, #28]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20004130 	.word	0x20004130
 800556c:	20004144 	.word	0x20004144
 8005570:	20004134 	.word	0x20004134
 8005574:	20004128 	.word	0x20004128
 8005578:	20004138 	.word	0x20004138
 800557c:	2000413c 	.word	0x2000413c

08005580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04d      	beq.n	800562e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005592:	2308      	movs	r3, #8
 8005594:	425b      	negs	r3, r3
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <vPortFree+0xb8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <vPortFree+0x44>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <vPortFree+0x62>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60bb      	str	r3, [r7, #8]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <vPortFree+0xb8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11a      	bne.n	800562e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <vPortFree+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005608:	f7ff f9e8 	bl	80049dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <vPortFree+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <vPortFree+0xbc>)
 8005618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 f874 	bl	8005708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <vPortFree+0xc0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <vPortFree+0xc0>)
 8005628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800562a:	f7ff f9e5 	bl	80049f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800562e:	bf00      	nop
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20004144 	.word	0x20004144
 800563c:	20004134 	.word	0x20004134
 8005640:	20004140 	.word	0x20004140

08005644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800564a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800564e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <prvHeapInit+0xac>)
 8005652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3307      	adds	r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <prvHeapInit+0xac>)
 8005674:	4413      	add	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <prvHeapInit+0xb0>)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <prvHeapInit+0xb0>)
 8005684:	2200      	movs	r2, #0
 8005686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005690:	2208      	movs	r2, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <prvHeapInit+0xb4>)
 80056a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <prvHeapInit+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <prvHeapInit+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvHeapInit+0xb4>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <prvHeapInit+0xb8>)
 80056d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <prvHeapInit+0xbc>)
 80056da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <prvHeapInit+0xc0>)
 80056de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000528 	.word	0x20000528
 80056f4:	20004128 	.word	0x20004128
 80056f8:	20004130 	.word	0x20004130
 80056fc:	20004138 	.word	0x20004138
 8005700:	20004134 	.word	0x20004134
 8005704:	20004144 	.word	0x20004144

08005708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <prvInsertBlockIntoFreeList+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <prvInsertBlockIntoFreeList+0x14>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d8f7      	bhi.n	8005716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d108      	bne.n	800574a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d118      	bne.n	8005790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00d      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e008      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e003      	b.n	8005798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d002      	beq.n	80057a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20004128 	.word	0x20004128
 80057b8:	20004130 	.word	0x20004130

080057bc <memset>:
 80057bc:	4402      	add	r2, r0
 80057be:	4603      	mov	r3, r0
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d100      	bne.n	80057c6 <memset+0xa>
 80057c4:	4770      	bx	lr
 80057c6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ca:	e7f9      	b.n	80057c0 <memset+0x4>

080057cc <__libc_init_array>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4d0d      	ldr	r5, [pc, #52]	; (8005804 <__libc_init_array+0x38>)
 80057d0:	4c0d      	ldr	r4, [pc, #52]	; (8005808 <__libc_init_array+0x3c>)
 80057d2:	1b64      	subs	r4, r4, r5
 80057d4:	10a4      	asrs	r4, r4, #2
 80057d6:	2600      	movs	r6, #0
 80057d8:	42a6      	cmp	r6, r4
 80057da:	d109      	bne.n	80057f0 <__libc_init_array+0x24>
 80057dc:	4d0b      	ldr	r5, [pc, #44]	; (800580c <__libc_init_array+0x40>)
 80057de:	4c0c      	ldr	r4, [pc, #48]	; (8005810 <__libc_init_array+0x44>)
 80057e0:	f000 f818 	bl	8005814 <_init>
 80057e4:	1b64      	subs	r4, r4, r5
 80057e6:	10a4      	asrs	r4, r4, #2
 80057e8:	2600      	movs	r6, #0
 80057ea:	42a6      	cmp	r6, r4
 80057ec:	d105      	bne.n	80057fa <__libc_init_array+0x2e>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f4:	4798      	blx	r3
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7ee      	b.n	80057d8 <__libc_init_array+0xc>
 80057fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fe:	4798      	blx	r3
 8005800:	3601      	adds	r6, #1
 8005802:	e7f2      	b.n	80057ea <__libc_init_array+0x1e>
 8005804:	080058a4 	.word	0x080058a4
 8005808:	080058a4 	.word	0x080058a4
 800580c:	080058a4 	.word	0x080058a4
 8005810:	080058a8 	.word	0x080058a8

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
