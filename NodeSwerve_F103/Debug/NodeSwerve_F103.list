
NodeSwerve_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b730  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800b840  0800b840  0001b840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce8  0800bce8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800bce8  0800bce8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bce8  0800bce8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcec  0800bcec  0001bcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800bcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a9c  20000064  0800bd54  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  0800bd54  00021b00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb32  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000495a  00000000  00000000  0003cc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00041560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b6  00000000  00000000  00042dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c0f9  00000000  00000000  00044076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d773  00000000  00000000  0006016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000980c6  00000000  00000000  0007d8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ccc  00000000  00000000  001159a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0011c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b828 	.word	0x0800b828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	0800b828 	.word	0x0800b828

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <canctrl_RxHeaderGetModeID>:
#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
uint32_t canctrl_GetEvent(){return canEvent;}
CAN_MODE_ID canctrl_RxHeaderGetModeID(){return rxHeader.StdId & 0x0f;}
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <canctrl_RxHeaderGetModeID+0x18>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	200000a4 	.word	0x200000a4

080010fc <canctrl_SetTargetDevice>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f826 	bl	800115c <canctrl_SetID>
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <canctrl_GetRxHeader>:
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 8001118:	b4b0      	push	{r4, r5, r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <canctrl_GetRxHeader+0x28>)
 8001124:	461c      	mov	r4, r3
 8001126:	4615      	mov	r5, r2
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bcb0      	pop	{r4, r5, r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000a4 	.word	0x200000a4

08001144 <canctrl_RTR_SetToData>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <canctrl_RTR_SetToData+0x14>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000008c 	.word	0x2000008c

0800115c <canctrl_SetID>:
	memset(txData,0,sizeof(txData));
	txHeader.StdId = 0;
	return err;
}

HAL_StatusTypeDef canctrl_SetID(uint32_t ID){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(ID > 0x7ff) return HAL_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116a:	d301      	bcc.n	8001170 <canctrl_SetID+0x14>
 800116c:	2301      	movs	r3, #1
 800116e:	e006      	b.n	800117e <canctrl_SetID+0x22>
	txHeader.StdId |= ID;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <canctrl_SetID+0x2c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4313      	orrs	r3, r2
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <canctrl_SetID+0x2c>)
 800117a:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	2000008c 	.word	0x2000008c

0800118c <canctrl_PutMessage>:


HAL_StatusTypeDef canctrl_PutMessage(void* data,size_t dataSize)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	memset(txData,0,sizeof(txData));
 8001196:	2208      	movs	r2, #8
 8001198:	2100      	movs	r1, #0
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <canctrl_PutMessage+0x34>)
 800119c:	f009 fa26 	bl	800a5ec <memset>
	if(dataSize <= 8) txHeader.DLC = dataSize;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d802      	bhi.n	80011ac <canctrl_PutMessage+0x20>
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <canctrl_PutMessage+0x38>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6113      	str	r3, [r2, #16]
	memcpy(txData,data,sizeof(txData));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <canctrl_PutMessage+0x34>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6810      	ldr	r0, [r2, #0]
 80011b2:	6851      	ldr	r1, [r2, #4]
 80011b4:	c303      	stmia	r3!, {r0, r1}
	return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000c0 	.word	0x200000c0
 80011c4:	2000008c 	.word	0x2000008c

080011c8 <canctrl_GetMessage>:

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <canctrl_GetMessage+0x2c>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <canctrl_GetMessage+0x18>
 80011dc:	2301      	movs	r3, #1
 80011de:	e005      	b.n	80011ec <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4905      	ldr	r1, [pc, #20]	; (80011f8 <canctrl_GetMessage+0x30>)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f009 fa85 	bl	800a6f4 <memcpy>
	return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000a4 	.word	0x200000a4
 80011f8:	200000c8 	.word	0x200000c8

080011fc <canctrl_SendMultipleMessages>:

HAL_StatusTypeDef canctrl_SendMultipleMessages(CAN_HandleTypeDef *can,
											CAN_DEVICE_ID targetID,
											void *data,
											size_t sizeOfDataType)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	460b      	mov	r3, r1
 800120a:	72fb      	strb	r3, [r7, #11]
	if(!can || !data || !sizeOfDataType) return HAL_ERROR;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <canctrl_SendMultipleMessages+0x22>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <canctrl_SendMultipleMessages+0x22>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <canctrl_SendMultipleMessages+0x26>
 800121e:	2301      	movs	r3, #1
 8001220:	e06e      	b.n	8001300 <canctrl_SendMultipleMessages+0x104>
	static bool IsBusy = false;
	static uint16_t tempTxDataLen = 0;
	if(IsBusy) return HAL_BUSY;
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <canctrl_SendMultipleMessages+0x10c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <canctrl_SendMultipleMessages+0x32>
 800122a:	2302      	movs	r3, #2
 800122c:	e068      	b.n	8001300 <canctrl_SendMultipleMessages+0x104>
	if(!tempTxDataLen) {
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <canctrl_SendMultipleMessages+0x42>
		tempTxDataLen = sizeOfDataType;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 800123c:	801a      	strh	r2, [r3, #0]
	}
	if(tempTxDataLen >= 8 && tempTxDataLen <= sizeOfDataType) {
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d91d      	bls.n	8001282 <canctrl_SendMultipleMessages+0x86>
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4293      	cmp	r3, r2
 8001250:	d317      	bcc.n	8001282 <canctrl_SendMultipleMessages+0x86>
		txHeader.DLC = 8;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <canctrl_SendMultipleMessages+0x114>)
 8001254:	2208      	movs	r2, #8
 8001256:	611a      	str	r2, [r3, #16]
		memcpy(txData,data+(sizeOfDataType - tempTxDataLen),8);
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	441a      	add	r2, r3
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <canctrl_SendMultipleMessages+0x118>)
 8001268:	6810      	ldr	r0, [r2, #0]
 800126a:	6851      	ldr	r1, [r2, #4]
 800126c:	c303      	stmia	r3!, {r0, r1}
		tempTxDataLen -= txHeader.DLC;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <canctrl_SendMultipleMessages+0x114>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	b29b      	uxth	r3, r3
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	e02a      	b.n	80012d8 <canctrl_SendMultipleMessages+0xdc>
	}
	else if(tempTxDataLen < 8){
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b07      	cmp	r3, #7
 8001288:	d826      	bhi.n	80012d8 <canctrl_SendMultipleMessages+0xdc>
		txHeader.DLC = tempTxDataLen;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <canctrl_SendMultipleMessages+0x114>)
 8001292:	611a      	str	r2, [r3, #16]
		memcpy(txData,data+(sizeOfDataType - tempTxDataLen),txHeader.DLC);
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <canctrl_SendMultipleMessages+0x114>)
 80012a4:	6912      	ldr	r2, [r2, #16]
 80012a6:	4619      	mov	r1, r3
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <canctrl_SendMultipleMessages+0x118>)
 80012aa:	f009 fa23 	bl	800a6f4 <memcpy>
		tempTxDataLen = 0;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <canctrl_SendMultipleMessages+0x110>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
		if(canctrl_Send(can, targetID) == HAL_OK){
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	4619      	mov	r1, r3
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f8a3 	bl	8001404 <canctrl_Send>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <canctrl_SendMultipleMessages+0xd8>
			memset(txData,0,sizeof(txData));
 80012c4:	2208      	movs	r2, #8
 80012c6:	2100      	movs	r1, #0
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <canctrl_SendMultipleMessages+0x118>)
 80012ca:	f009 f98f 	bl	800a5ec <memset>
			IsBusy = false;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <canctrl_SendMultipleMessages+0x10c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
		}
		return HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e013      	b.n	8001300 <canctrl_SendMultipleMessages+0x104>
	}
	IsBusy = true;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <canctrl_SendMultipleMessages+0x10c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
	if(canctrl_Send(can, targetID) == HAL_OK){
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	4619      	mov	r1, r3
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f88e 	bl	8001404 <canctrl_Send>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d107      	bne.n	80012fe <canctrl_SendMultipleMessages+0x102>
		memset(txData,0,sizeof(txData));
 80012ee:	2208      	movs	r2, #8
 80012f0:	2100      	movs	r1, #0
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <canctrl_SendMultipleMessages+0x118>)
 80012f4:	f009 f97a 	bl	800a5ec <memset>
		IsBusy = false;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <canctrl_SendMultipleMessages+0x10c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	}
	return HAL_BUSY;
 80012fe:	2302      	movs	r3, #2
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200000d4 	.word	0x200000d4
 800130c:	200000d6 	.word	0x200000d6
 8001310:	2000008c 	.word	0x2000008c
 8001314:	200000c0 	.word	0x200000c0

08001318 <canctrl_GetMultipleMessages>:

HAL_StatusTypeDef canctrl_GetMultipleMessages(void *data, size_t sizeOfDataType)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	static uint16_t tempRxDataLen = 0;
	static uint32_t stdID_PreMesg = 0;

	uint32_t canMaskMode = rxHeader.StdId & 0x0f;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <canctrl_GetMultipleMessages+0xd8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	60fb      	str	r3, [r7, #12]
	//If this is a new message (which is tempRxDataLen = 0), set stdID_PreMesg to received ID of rxHeader
	if(((canMaskMode) != stdID_PreMesg) && !tempRxDataLen){
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <canctrl_GetMultipleMessages+0xdc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d01e      	beq.n	8001374 <canctrl_GetMultipleMessages+0x5c>
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11a      	bne.n	8001374 <canctrl_GetMultipleMessages+0x5c>
		stdID_PreMesg = canMaskMode;
 800133e:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <canctrl_GetMultipleMessages+0xdc>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6013      	str	r3, [r2, #0]
		// copy first data to output data, increase length received data
		memcpy(data+tempRxDataLen,rxData,rxHeader.DLC);
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <canctrl_GetMultipleMessages+0xd8>)
 8001350:	6912      	ldr	r2, [r2, #16]
 8001352:	492a      	ldr	r1, [pc, #168]	; (80013fc <canctrl_GetMultipleMessages+0xe4>)
 8001354:	4618      	mov	r0, r3
 8001356:	f009 f9cd 	bl	800a6f4 <memcpy>
		tempRxDataLen += rxHeader.DLC;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <canctrl_GetMultipleMessages+0xd8>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4413      	add	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 800136a:	801a      	strh	r2, [r3, #0]
		canEvent = 0;
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <canctrl_GetMultipleMessages+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e029      	b.n	80013c8 <canctrl_GetMultipleMessages+0xb0>
	}
	//If data already exist but the previous message ID is not match with current received ID, return ERROR
	else if(((canMaskMode) != stdID_PreMesg) && tempRxDataLen){
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <canctrl_GetMultipleMessages+0xdc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	429a      	cmp	r2, r3
 800137c:	d008      	beq.n	8001390 <canctrl_GetMultipleMessages+0x78>
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <canctrl_GetMultipleMessages+0x78>
		canEvent = 0;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <canctrl_GetMultipleMessages+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e02a      	b.n	80013e6 <canctrl_GetMultipleMessages+0xce>
	}
	//If the received ID is match with the previous message
	else if((canMaskMode) == stdID_PreMesg){
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <canctrl_GetMultipleMessages+0xdc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	429a      	cmp	r2, r3
 8001398:	d116      	bne.n	80013c8 <canctrl_GetMultipleMessages+0xb0>
		memcpy(data+tempRxDataLen,rxData,rxHeader.DLC);
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <canctrl_GetMultipleMessages+0xd8>)
 80013a6:	6912      	ldr	r2, [r2, #16]
 80013a8:	4914      	ldr	r1, [pc, #80]	; (80013fc <canctrl_GetMultipleMessages+0xe4>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 f9a2 	bl	800a6f4 <memcpy>
		tempRxDataLen += rxHeader.DLC;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <canctrl_GetMultipleMessages+0xd8>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 80013c0:	801a      	strh	r2, [r3, #0]
		canEvent = 0;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <canctrl_GetMultipleMessages+0xe8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
	}
	if(tempRxDataLen == sizeOfDataType){
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d107      	bne.n	80013e4 <canctrl_GetMultipleMessages+0xcc>
		tempRxDataLen = 0;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <canctrl_GetMultipleMessages+0xe0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
		stdID_PreMesg = 0;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <canctrl_GetMultipleMessages+0xdc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <canctrl_GetMultipleMessages+0xce>
	} else return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000a4 	.word	0x200000a4
 80013f4:	200000d8 	.word	0x200000d8
 80013f8:	200000dc 	.word	0x200000dc
 80013fc:	200000c8 	.word	0x200000c8
 8001400:	200000d0 	.word	0x200000d0

08001404 <canctrl_Send>:


HAL_StatusTypeDef canctrl_Send(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]

	if(!txHeader.DLC && !can) return HAL_ERROR;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <canctrl_Send+0x74>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d104      	bne.n	8001422 <canctrl_Send+0x1e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <canctrl_Send+0x1e>
 800141e:	2301      	movs	r3, #1
 8001420:	e026      	b.n	8001470 <canctrl_Send+0x6c>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f003 fc3f 	bl	8004ca6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <canctrl_Send+0x2e>
 800142e:	2302      	movs	r3, #2
 8001430:	e01e      	b.n	8001470 <canctrl_Send+0x6c>
	HAL_StatusTypeDef err = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
	txHeader.IDE = CAN_ID_STD;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <canctrl_Send+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
	canctrl_RTR_SetToData();
 800143c:	f7ff fe82 	bl	8001144 <canctrl_RTR_SetToData>
	if(targetID) canctrl_SetTargetDevice(targetID);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <canctrl_Send+0x4a>
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe57 	bl	80010fc <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <canctrl_Send+0x78>)
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <canctrl_Send+0x7c>)
 8001452:	4909      	ldr	r1, [pc, #36]	; (8001478 <canctrl_Send+0x74>)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f003 fb57 	bl	8004b08 <HAL_CAN_AddTxMessage>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
	txHeader.StdId = 0;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <canctrl_Send+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	memset(txData,0,sizeof(txData));
 8001464:	2208      	movs	r2, #8
 8001466:	2100      	movs	r1, #0
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <canctrl_Send+0x7c>)
 800146a:	f009 f8bf 	bl	800a5ec <memset>
	return err;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000008c 	.word	0x2000008c
 800147c:	20000080 	.word	0x20000080
 8001480:	200000c0 	.word	0x200000c0

08001484 <canctrl_Receive_2>:
	checkEventFromRxHeader();
	return HAL_OK;
}

CAN_MODE_ID canctrl_Receive_2(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <canctrl_Receive_2+0x24>)
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <canctrl_Receive_2+0x28>)
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f003 fc3a 	bl	8004d0e <HAL_CAN_GetRxMessage>
	return canctrl_RxHeaderGetModeID();
 800149a:	f7ff fe21 	bl	80010e0 <canctrl_RxHeaderGetModeID>
 800149e:	4603      	mov	r3, r0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000c8 	.word	0x200000c8
 80014ac:	200000a4 	.word	0x200000a4

080014b0 <canctrl_Filter_List16>:
												uint16_t ID2,
												uint16_t ID3,
												uint16_t ID4,
												uint32_t filBank,
												uint32_t FIFO)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	817b      	strh	r3, [r7, #10]
 80014c2:	460b      	mov	r3, r1
 80014c4:	813b      	strh	r3, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 80014ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d4:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		ID1 << 5; // 0010000000100000
 80014d6:	897b      	ldrh	r3, [r7, #10]
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		ID2 << 5; // 0010000001000000
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	ID3 << 5; // 0010000001100000
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	ID4 << 5; // 0010000010000000
 80014e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014ec:	015b      	lsls	r3, r3, #5
 80014ee:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDLIST;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 80014f8:	230d      	movs	r3, #13
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f003 f9f3 	bl	80048ee <HAL_CAN_ConfigFilter>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b08e      	sub	sp, #56	; 0x38
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	817b      	strh	r3, [r7, #10]
 8001524:	460b      	mov	r3, r1
 8001526:	813b      	strh	r3, [r7, #8]
 8001528:	4613      	mov	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 800152c:	2301      	movs	r3, #1
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 8001530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 8001534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001536:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 800153c:	897b      	ldrh	r3, [r7, #10]
 800153e:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 8001540:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001544:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 8001552:	230d      	movs	r3, #13
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4619      	mov	r1, r3
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f003 f9c6 	bl	80048ee <HAL_CAN_ConfigFilter>
 8001562:	4603      	mov	r3, r0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <canfunc_RTR_PID>:
	canfunc_MotorPutSpeedAndAngle(speedAngle);
	canctrl_Send(can, deviceID);
}

void canfunc_RTR_PID(CAN_HandleTypeDef *can, PID_Param pid, PID_type type)
{
 800156c:	b084      	sub	sp, #16
 800156e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001570:	b095      	sub	sp, #84	; 0x54
 8001572:	af10      	add	r7, sp, #64	; 0x40
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800157a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t deviceID = *(__IO uint32_t*)(0x08000000 + 64*1024);
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <canfunc_RTR_PID+0x64>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	81fb      	strh	r3, [r7, #14]
	while(canfunc_PutAndSendParamPID(can, deviceID,  pid, type) != HAL_OK);
 8001584:	bf00      	nop
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	b2de      	uxtb	r6, r3
 800158a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800158e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001590:	466d      	mov	r5, sp
 8001592:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80015aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ae:	cb0c      	ldmia	r3, {r2, r3}
 80015b0:	4631      	mov	r1, r6
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f86d 	bl	8001692 <canfunc_PutAndSendParamPID>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e3      	bne.n	8001586 <canfunc_RTR_PID+0x1a>
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80015ca:	b004      	add	sp, #16
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	08010000 	.word	0x08010000

080015d4 <canfunc_GetBoolValue>:

bool canfunc_GetBoolValue()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t temp;
	if(canctrl_GetMessage(&temp, sizeof(uint8_t)) != HAL_OK) while(1);
 80015da:	1dbb      	adds	r3, r7, #6
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fdf2 	bl	80011c8 <canctrl_GetMessage>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d000      	beq.n	80015ec <canfunc_GetBoolValue+0x18>
 80015ea:	e7fe      	b.n	80015ea <canfunc_GetBoolValue+0x16>
	bool bVal = temp - 1;
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
	return bVal;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <canfunc_SetBoolValue>:

void canfunc_SetBoolValue(bool bVal, CAN_MODE_ID modeID)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	if(modeID != CANCTRL_MODE_TEST
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d00e      	beq.n	8001638 <canfunc_SetBoolValue+0x34>
	&& modeID != CANCTRL_MODE_PID_BLDC_BREAKPROTECTION
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	2b0a      	cmp	r3, #10
 800161e:	d00b      	beq.n	8001638 <canfunc_SetBoolValue+0x34>
	&& modeID != CANCTRL_MODE_SET_HOME
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d008      	beq.n	8001638 <canfunc_SetBoolValue+0x34>
	&& modeID != CANCTRL_MODE_MOTOR_BLDC_BRAKE
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	2b06      	cmp	r3, #6
 800162a:	d005      	beq.n	8001638 <canfunc_SetBoolValue+0x34>
	&& modeID != CANCTRL_MODE_UNTANGLE_WIRE
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	2b0b      	cmp	r3, #11
 8001630:	d002      	beq.n	8001638 <canfunc_SetBoolValue+0x34>
	&& modeID != CANCTRL_MODE_ROBOT_ERROR
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d10e      	bne.n	8001656 <canfunc_SetBoolValue+0x52>
	) return;
	canctrl_SetID(modeID);
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fd8e 	bl	800115c <canctrl_SetID>
	uint8_t temp = (uint8_t)bVal + 1;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73fb      	strb	r3, [r7, #15]
	canctrl_PutMessage((void*)&temp, 1);
 8001648:	f107 030f 	add.w	r3, r7, #15
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd9c 	bl	800118c <canctrl_PutMessage>
 8001654:	e000      	b.n	8001658 <canfunc_SetBoolValue+0x54>
	) return;
 8001656:	bf00      	nop
}
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <canfunc_MotorGetSpeedAndAngle>:
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
}

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2108      	movs	r1, #8
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdab 	bl	80011c8 <canctrl_GetMessage>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d000      	beq.n	800167a <canfunc_MotorGetSpeedAndAngle+0x1c>
 8001678:	e7fe      	b.n	8001678 <canfunc_MotorGetSpeedAndAngle+0x1a>
	return speedAngle;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	461a      	mov	r2, r3
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001686:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <canfunc_PutAndSendParamPID>:
 * @param targetID value of @arg CAN_DEVICE_ID enum
 * @param pid struct of PID_Param, can be extract from struct BoardParameter_t
 *
 */
HAL_StatusTypeDef canfunc_PutAndSendParamPID(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID, PID_Param pid, PID_type type)
{
 8001692:	b082      	sub	sp, #8
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80016a0:	e880 000c 	stmia.w	r0, {r2, r3}
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	CAN_PID canPID;
	 switch (type){
 80016a8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d006      	beq.n	80016be <canfunc_PutAndSendParamPID+0x2c>
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	dc10      	bgt.n	80016d6 <canfunc_PutAndSendParamPID+0x44>
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d00a      	beq.n	80016ce <canfunc_PutAndSendParamPID+0x3c>
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d004      	beq.n	80016c6 <canfunc_PutAndSendParamPID+0x34>
 80016bc:	e00b      	b.n	80016d6 <canfunc_PutAndSendParamPID+0x44>
	 case PID_BLDC_SPEED:
		 canctrl_SetID(CANCTRL_MODE_PID_BLDC_SPEED);
 80016be:	2009      	movs	r0, #9
 80016c0:	f7ff fd4c 	bl	800115c <canctrl_SetID>
		 break;
 80016c4:	e009      	b.n	80016da <canfunc_PutAndSendParamPID+0x48>
	 case PID_DC_ANGLE:
		 canctrl_SetID(CANCTRL_MODE_PID_DC_ANGLE);
 80016c6:	2008      	movs	r0, #8
 80016c8:	f7ff fd48 	bl	800115c <canctrl_SetID>
		 break;
 80016cc:	e005      	b.n	80016da <canfunc_PutAndSendParamPID+0x48>
	 case PID_DC_SPEED:
		 canctrl_SetID(CANCTRL_MODE_PID_DC_SPEED);
 80016ce:	2007      	movs	r0, #7
 80016d0:	f7ff fd44 	bl	800115c <canctrl_SetID>
		 break;
 80016d4:	e001      	b.n	80016da <canfunc_PutAndSendParamPID+0x48>
	 default:
		 return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e011      	b.n	80016fe <canfunc_PutAndSendParamPID+0x6c>
		 break;
	 }
	//Need to send 5 parameters of PID: kP, kI, kD, alpha, deltaT
	canPID.kp = pid.kP;
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	60fb      	str	r3, [r7, #12]
	canPID.ki = pid.kI;
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	613b      	str	r3, [r7, #16]
	canPID.kd = pid.kD;
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	617b      	str	r3, [r7, #20]
	canPID.alpha = pid.alpha;
 80016e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e8:	61bb      	str	r3, [r7, #24]
	canPID.deltaT = pid.deltaT;
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	61fb      	str	r3, [r7, #28]
	return canctrl_SendMultipleMessages(can, targetID, (void*)&canPID, sizeof(CAN_PID));
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	78f9      	ldrb	r1, [r7, #3]
 80016f4:	2314      	movs	r3, #20
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fd80 	bl	80011fc <canctrl_SendMultipleMessages>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001708:	b002      	add	sp, #8
 800170a:	4770      	bx	lr

0800170c <canfunc_Convert_CAN_PID_to_PID_Param>:

void canfunc_Convert_CAN_PID_to_PID_Param(CAN_PID canPID, PID_Param *pid)
{
 800170c:	b084      	sub	sp, #16
 800170e:	b490      	push	{r4, r7}
 8001710:	af00      	add	r7, sp, #0
 8001712:	f107 0408 	add.w	r4, r7, #8
 8001716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pid->kP = canPID.kp;
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	60da      	str	r2, [r3, #12]
	pid->kI = canPID.ki;
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	615a      	str	r2, [r3, #20]
	pid->kD = canPID.kd;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	621a      	str	r2, [r3, #32]
	pid->alpha = canPID.alpha;
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
	pid->deltaT = canPID.deltaT;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc90      	pop	{r4, r7}
 800173e:	b004      	add	sp, #16
 8001740:	4770      	bx	lr

08001742 <canfunc_GetTypePID>:

PID_type canfunc_GetTypePID(){
 8001742:	b580      	push	{r7, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 8001748:	463b      	mov	r3, r7
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fce4 	bl	8001118 <canctrl_GetRxHeader>
	uint32_t temp = (rxHeader.StdId & 0x0f)-6;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b06      	subs	r3, #6
 8001758:	61fb      	str	r3, [r7, #28]
	return temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	b2db      	uxtb	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <canfunc_GetPID>:
CAN_PID canPID1;
void canfunc_GetPID(void (*pCallback)(CAN_PID canPID,PID_type type))
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
	static CAN_PID canPID;
	if(!pCallback) return;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d012      	beq.n	800179c <canfunc_GetPID+0x34>
	if(canctrl_GetMultipleMessages((void*)&canPID1, sizeof(canPID)) == HAL_OK){
 8001776:	2114      	movs	r1, #20
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <canfunc_GetPID+0x3c>)
 800177a:	f7ff fdcd 	bl	8001318 <canctrl_GetMultipleMessages>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <canfunc_GetPID+0x36>
		pCallback(canPID1,canfunc_GetTypePID());
 8001784:	f7ff ffdd 	bl	8001742 <canfunc_GetTypePID>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <canfunc_GetPID+0x3c>)
 800178e:	9201      	str	r2, [sp, #4]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	9200      	str	r2, [sp, #0]
 8001794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001796:	687c      	ldr	r4, [r7, #4]
 8001798:	47a0      	blx	r4
 800179a:	e000      	b.n	800179e <canfunc_GetPID+0x36>
	if(!pCallback) return;
 800179c:	bf00      	nop
	}

}
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	200000e0 	.word	0x200000e0

080017a8 <DecodeFrameDataAndCheckCRC>:
		else
			return;
	}
}

static AppErrorCode DecodeFrameDataAndCheckCRC() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
	uint32_t crcField = APP_DATA_LENGTH + APP_COMMAND_LIST_LENGTH + fd.payloadLength;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <DecodeFrameDataAndCheckCRC+0x64>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3302      	adds	r3, #2
 80017b4:	60fb      	str	r3, [r7, #12]
	uint32_t crcNibbleByteMSB = *(_pRxBuffer + crcField) << 8;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <DecodeFrameDataAndCheckCRC+0x68>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	60bb      	str	r3, [r7, #8]
	uint32_t crcNibbleByteLSB = *(_pRxBuffer + crcField + 1);
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <DecodeFrameDataAndCheckCRC+0x68>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	607b      	str	r3, [r7, #4]
	fd.cmdList = *(_pRxBuffer + 1);
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <DecodeFrameDataAndCheckCRC+0x68>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <DecodeFrameDataAndCheckCRC+0x64>)
 80017dc:	715a      	strb	r2, [r3, #5]
	fd.crc16 = crcNibbleByteMSB | crcNibbleByteLSB;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <DecodeFrameDataAndCheckCRC+0x64>)
 80017ec:	805a      	strh	r2, [r3, #2]
	if (!IsPassCRC()) {
 80017ee:	f000 f8dd 	bl	80019ac <IsPassCRC>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <DecodeFrameDataAndCheckCRC+0x5a>
		return APPERR_CRC_FAIL;
 80017fe:	2306      	movs	r3, #6
 8001800:	e000      	b.n	8001804 <DecodeFrameDataAndCheckCRC+0x5c>
	}
	return APPERR_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200000f8 	.word	0x200000f8
 8001810:	2000010c 	.word	0x2000010c

08001814 <appintf_ReceiveDataInterrupt>:
 * void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 * 		appintf_ReceiveDataInterrupt(huart);
 * }
 * @param huart
 */
void appintf_ReceiveDataInterrupt(UART_HandleTypeDef *huart) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	if (huart != pAppUART)
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <appintf_ReceiveDataInterrupt+0xd8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d15e      	bne.n	80018e4 <appintf_ReceiveDataInterrupt+0xd0>
		return;
	if (pAppUART == NULL)
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <appintf_ReceiveDataInterrupt+0xd8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <appintf_ReceiveDataInterrupt+0x20>
		jumpToError(APPERR_UART_PORT_NULL);
 800182e:	2009      	movs	r0, #9
 8001830:	f000 f890 	bl	8001954 <jumpToError>
	static bool isOnFrameReceived = false;
//	if (fd.isOnProcess)
//		return;
	// if this is a new frame data, extract data length and receive all remain data in interrupt indicated by data length
	if (!isOnFrameReceived) {
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <appintf_ReceiveDataInterrupt+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d027      	beq.n	8001892 <appintf_ReceiveDataInterrupt+0x7e>
		isOnFrameReceived = true;
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <appintf_ReceiveDataInterrupt+0xdc>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
//		fd.isOnProcess = true;
		fd.payloadLength = *(_pRxBuffer + 0);
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <appintf_ReceiveDataInterrupt+0xe0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <appintf_ReceiveDataInterrupt+0xe4>)
 8001850:	701a      	strb	r2, [r3, #0]
		uint32_t totalLength = fd.totalLength = fd.payloadLength + APP_CRC_LENGTH + APP_COMMAND_LIST_LENGTH + APP_DATA_LENGTH;
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <appintf_ReceiveDataInterrupt+0xe4>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	3304      	adds	r3, #4
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <appintf_ReceiveDataInterrupt+0xe4>)
 800185c:	705a      	strb	r2, [r3, #1]
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <appintf_ReceiveDataInterrupt+0xe4>)
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	60fb      	str	r3, [r7, #12]
		if (totalLength < _rxBufSize)
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <appintf_ReceiveDataInterrupt+0xe8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4293      	cmp	r3, r2
 800186e:	d20c      	bcs.n	800188a <appintf_ReceiveDataInterrupt+0x76>
			HAL_UART_Receive_IT(pAppUART, (uint8_t*) _pRxBuffer + APP_DATA_LENGTH, totalLength - APP_DATA_LENGTH);
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <appintf_ReceiveDataInterrupt+0xd8>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <appintf_ReceiveDataInterrupt+0xe0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	f005 fea7 	bl	80075d6 <HAL_UART_Receive_IT>
 8001888:	e02d      	b.n	80018e6 <appintf_ReceiveDataInterrupt+0xd2>
		else
			jumpToError(APPERR_OUT_OF_BUFFER_SIZE);
 800188a:	2008      	movs	r0, #8
 800188c:	f000 f862 	bl	8001954 <jumpToError>
 8001890:	e029      	b.n	80018e6 <appintf_ReceiveDataInterrupt+0xd2>

//		fd.isOnProcess = false;
	}
	else { // if all data of the frame have been received, begin to extract data and reset to receive new frame, and calling to user callback function
//		fd.isOnProcess = true;
		isOnFrameReceived = false;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <appintf_ReceiveDataInterrupt+0xdc>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
		if (DecodeFrameDataAndCheckCRC() == APPERR_OK) {
 8001898:	f7ff ff86 	bl	80017a8 <DecodeFrameDataAndCheckCRC>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10d      	bne.n	80018be <appintf_ReceiveDataInterrupt+0xaa>
			if (pCallback != NULL)
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <appintf_ReceiveDataInterrupt+0xec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <appintf_ReceiveDataInterrupt+0xa4>
				pCallback(fd.cmdList);
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <appintf_ReceiveDataInterrupt+0xec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <appintf_ReceiveDataInterrupt+0xe4>)
 80018b0:	7952      	ldrb	r2, [r2, #5]
 80018b2:	4610      	mov	r0, r2
 80018b4:	4798      	blx	r3
 80018b6:	e002      	b.n	80018be <appintf_ReceiveDataInterrupt+0xaa>
			else {
				jumpToError(APPERR_NULL_CALLBACK_FUNCTION);
 80018b8:	2005      	movs	r0, #5
 80018ba:	f000 f84b 	bl	8001954 <jumpToError>
			}
		}
		HAL_UART_Receive_IT(pAppUART, (uint8_t*) _pRxBuffer, APP_DATA_LENGTH);
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <appintf_ReceiveDataInterrupt+0xd8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <appintf_ReceiveDataInterrupt+0xe0>)
 80018c4:	6811      	ldr	r1, [r2, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f005 fe84 	bl	80075d6 <HAL_UART_Receive_IT>
		memset(_pRxBuffer, 0, _rxBufSize);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <appintf_ReceiveDataInterrupt+0xe0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <appintf_ReceiveDataInterrupt+0xe8>)
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f008 fe87 	bl	800a5ec <memset>
		ResetFrameData();
 80018de:	f000 f84f 	bl	8001980 <ResetFrameData>
 80018e2:	e000      	b.n	80018e6 <appintf_ReceiveDataInterrupt+0xd2>
		return;
 80018e4:	bf00      	nop
//		fd.isOnProcess = false;
	}
}
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200000f4 	.word	0x200000f4
 80018f0:	20000112 	.word	0x20000112
 80018f4:	2000010c 	.word	0x2000010c
 80018f8:	200000f8 	.word	0x200000f8
 80018fc:	20000110 	.word	0x20000110
 8001900:	20000100 	.word	0x20000100

08001904 <appintf_Reset>:

void appintf_Reset()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(pAppUART, _pRxBuffer, APP_DATA_LENGTH);
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <appintf_Reset+0x3c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <appintf_Reset+0x40>)
 800190e:	6811      	ldr	r1, [r2, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fe5f 	bl	80075d6 <HAL_UART_Receive_IT>
	memset(_pTxBuffer, 0, _txBufSize);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <appintf_Reset+0x44>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <appintf_Reset+0x48>)
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fe62 	bl	800a5ec <memset>
	memset(_pRxBuffer, 0, _rxBufSize);
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <appintf_Reset+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a08      	ldr	r2, [pc, #32]	; (8001950 <appintf_Reset+0x4c>)
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f008 fe5a 	bl	800a5ec <memset>
	ResetFrameData();
 8001938:	f000 f822 	bl	8001980 <ResetFrameData>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000f4 	.word	0x200000f4
 8001944:	2000010c 	.word	0x2000010c
 8001948:	20000108 	.word	0x20000108
 800194c:	20000111 	.word	0x20000111
 8001950:	20000110 	.word	0x20000110

08001954 <jumpToError>:
	memcpy(_pTxBuffer + crcField, temp, 2);
	isTxBufferEmpty = false;
}

static inline void jumpToError(AppErrorCode err)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	if (pAppErr != NULL)
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <jumpToError+0x28>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <jumpToError+0x1e>
		pAppErr(err);
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <jumpToError+0x28>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	4610      	mov	r0, r2
 800196e:	4798      	blx	r3
	else
		while (1);
}
 8001970:	e000      	b.n	8001974 <jumpToError+0x20>
		while (1);
 8001972:	e7fe      	b.n	8001972 <jumpToError+0x1e>
}
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000104 	.word	0x20000104

08001980 <ResetFrameData>:
	memset(_pTxBuffer, 0, _txBufSize);
	isTxBufferEmpty = true;
	ResetFrameData();
}

static void ResetFrameData() {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
	FrameData fdTemp = { 0 };
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	809a      	strh	r2, [r3, #4]
	fd = fdTemp;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <ResetFrameData+0x28>)
 8001990:	463a      	mov	r2, r7
 8001992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001996:	6018      	str	r0, [r3, #0]
 8001998:	3304      	adds	r3, #4
 800199a:	8019      	strh	r1, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000f8 	.word	0x200000f8

080019ac <IsPassCRC>:

static bool IsPassCRC() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	uint8_t payloadField = APP_COMMAND_LIST_LENGTH + APP_DATA_LENGTH;
 80019b2:	2302      	movs	r3, #2
 80019b4:	71fb      	strb	r3, [r7, #7]
	uint8_t *pPayloadCRC = _pRxBuffer + payloadField;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <IsPassCRC+0x38>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4413      	add	r3, r2
 80019be:	603b      	str	r3, [r7, #0]
	if (crc16_Unreflected(pPayloadCRC, fd.payloadLength + APP_CRC_LENGTH, 0)) {
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <IsPassCRC+0x3c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3302      	adds	r3, #2
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f000 f80e 	bl	80019ec <crc16_Unreflected>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <IsPassCRC+0x2e>
		return false;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <IsPassCRC+0x30>
	}
	return true;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000010c 	.word	0x2000010c
 80019e8:	200000f8 	.word	0x200000f8

080019ec <crc16_Unreflected>:
/* two types of crcs are possible: unreflected (bits shift left) and
 * reflected (bits shift right).
 */
uint16_t crc16_Unreflected(const uint8_t *buf, uint32_t len,
		uint16_t crc_init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
	/* we use uint32_t, rather than uint16_t, as they are likely to be
	 faster. We just ignore the top 16 bits and let them do what they want.
	 */
	uint32_t crc16 = (uint32_t) crc_init;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	617b      	str	r3, [r7, #20]

	while (len-- != 0)
 80019fe:	e00f      	b.n	8001a20 <crc16_Unreflected+0x34>
		crc16 = crc16_ccitt_table[((crc16 >> 8) ^ *buf++) & 0xff] ^ (crc16 << 8);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	0a1a      	lsrs	r2, r3, #8
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	60f9      	str	r1, [r7, #12]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4053      	eors	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <crc16_Unreflected+0x4c>)
 8001a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a16:	461a      	mov	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	4053      	eors	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
	while (len-- != 0)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ea      	bne.n	8001a00 <crc16_Unreflected+0x14>

    return (uint16_t) crc16;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	b29b      	uxth	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	0800b8e0 	.word	0x0800b8e0

08001a3c <absf>:
#include"AngleOptimizer.h"
Angle_Opt_Param opt;


float absf(float num)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if (num>=0)return num;
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fb0f 	bl	800106c <__aeabi_fcmpge>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <absf+0x1c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	e002      	b.n	8001a5e <absf+0x22>
	else return num*-1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <modulo360>:

float modulo360(float Angle){
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	int Result = (int)Angle/360.0;
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fb0f 	bl	8001094 <__aeabi_f2iz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fcbb 	bl	80003f4 <__aeabi_i2d>
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <modulo360+0x6c>)
 8001a84:	f7fe fe4a 	bl	800071c <__aeabi_ddiv>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7fe ffb4 	bl	80009fc <__aeabi_d2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	60fb      	str	r3, [r7, #12]
	return Angle-Result*360.0;
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe fcbd 	bl	8000418 <__aeabi_f2d>
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	460d      	mov	r5, r1
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7fe fca6 	bl	80003f4 <__aeabi_i2d>
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <modulo360+0x6c>)
 8001aae:	f7fe fd0b 	bl	80004c8 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fb4d 	bl	8000158 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ffc1 	bl	8000a4c <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad4:	40768000 	.word	0x40768000

08001ad8 <angopt_QuadrantCheckInput>:
	int Result = (int)Angle/180.0;
	return Angle-Result*180.0;
}

int angopt_QuadrantCheckInput(float x, float y)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	float xT = x,yT = y;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	60bb      	str	r3, [r7, #8]
	if(absf(xT)<0.0001) xT = 0;
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff ffa6 	bl	8001a3c <absf>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc90 	bl	8000418 <__aeabi_f2d>
 8001af8:	a35b      	add	r3, pc, #364	; (adr r3, 8001c68 <angopt_QuadrantCheckInput+0x190>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe ff55 	bl	80009ac <__aeabi_dcmplt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <angopt_QuadrantCheckInput+0x36>
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
	if(absf(yT)<0.0001) yT = 0;
 8001b0e:	68b8      	ldr	r0, [r7, #8]
 8001b10:	f7ff ff94 	bl	8001a3c <absf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc7e 	bl	8000418 <__aeabi_f2d>
 8001b1c:	a352      	add	r3, pc, #328	; (adr r3, 8001c68 <angopt_QuadrantCheckInput+0x190>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe ff43 	bl	80009ac <__aeabi_dcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <angopt_QuadrantCheckInput+0x5a>
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]

	if((xT>0)&&(yT>0))return 1;
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff faa2 	bl	8001080 <__aeabi_fcmpgt>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <angopt_QuadrantCheckInput+0x7e>
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f7ff fa9a 	bl	8001080 <__aeabi_fcmpgt>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <angopt_QuadrantCheckInput+0x7e>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e082      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT>0)&&(yT<0))return 2;
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fa90 	bl	8001080 <__aeabi_fcmpgt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <angopt_QuadrantCheckInput+0xa2>
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f7ff fa6a 	bl	8001044 <__aeabi_fcmplt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <angopt_QuadrantCheckInput+0xa2>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e070      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT<0)&&(yT<0))return 3;
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fa60 	bl	8001044 <__aeabi_fcmplt>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <angopt_QuadrantCheckInput+0xc6>
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f7ff fa58 	bl	8001044 <__aeabi_fcmplt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <angopt_QuadrantCheckInput+0xc6>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e05e      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT<0)&&(yT>0))return 4;
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fa4e 	bl	8001044 <__aeabi_fcmplt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <angopt_QuadrantCheckInput+0xea>
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f7ff fa64 	bl	8001080 <__aeabi_fcmpgt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <angopt_QuadrantCheckInput+0xea>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e04c      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT==0)&&(yT>0))return -1;
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fa32 	bl	8001030 <__aeabi_fcmpeq>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <angopt_QuadrantCheckInput+0x110>
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f7ff fa52 	bl	8001080 <__aeabi_fcmpgt>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <angopt_QuadrantCheckInput+0x110>
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e039      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT==0)&&(yT<0))return -2;
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fa1f 	bl	8001030 <__aeabi_fcmpeq>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <angopt_QuadrantCheckInput+0x136>
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	f7ff fa21 	bl	8001044 <__aeabi_fcmplt>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <angopt_QuadrantCheckInput+0x136>
 8001c08:	f06f 0301 	mvn.w	r3, #1
 8001c0c:	e026      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT>0)&&(yT==0))return -3;
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fa34 	bl	8001080 <__aeabi_fcmpgt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <angopt_QuadrantCheckInput+0x15c>
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	68b8      	ldr	r0, [r7, #8]
 8001c24:	f7ff fa04 	bl	8001030 <__aeabi_fcmpeq>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <angopt_QuadrantCheckInput+0x15c>
 8001c2e:	f06f 0302 	mvn.w	r3, #2
 8001c32:	e013      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>
	else if((xT<0)&&(yT==0))return -4;
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fa03 	bl	8001044 <__aeabi_fcmplt>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00a      	beq.n	8001c5a <angopt_QuadrantCheckInput+0x182>
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	68b8      	ldr	r0, [r7, #8]
 8001c4a:	f7ff f9f1 	bl	8001030 <__aeabi_fcmpeq>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <angopt_QuadrantCheckInput+0x182>
 8001c54:	f06f 0303 	mvn.w	r3, #3
 8001c58:	e000      	b.n	8001c5c <angopt_QuadrantCheckInput+0x184>

	return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	eb1c432d 	.word	0xeb1c432d
 8001c6c:	3f1a36e2 	.word	0x3f1a36e2

08001c70 <angopt_QuadRantCheckOutput2>:
			else Direc = -1;
		}
}

int angopt_QuadRantCheckOutput2(float Input1,float Input2)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
#define Case1		opt.Case1
#define Case2		opt.Case2
#define Direc 		opt.direct

	float XCurr1 = cos(Input1*M_PI/180);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fbcc 	bl	8000418 <__aeabi_f2d>
 8001c80:	a351      	add	r3, pc, #324	; (adr r3, 8001dc8 <angopt_QuadRantCheckOutput2+0x158>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fc1f 	bl	80004c8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <angopt_QuadRantCheckOutput2+0x160>)
 8001c98:	f7fe fd40 	bl	800071c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f008 fd88 	bl	800a7b8 <cos>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe fecc 	bl	8000a4c <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	617b      	str	r3, [r7, #20]
	float YCurr1 = sin(Input1*M_PI/180);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fbad 	bl	8000418 <__aeabi_f2d>
 8001cbe:	a342      	add	r3, pc, #264	; (adr r3, 8001dc8 <angopt_QuadRantCheckOutput2+0x158>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc00 	bl	80004c8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <angopt_QuadRantCheckOutput2+0x160>)
 8001cd6:	f7fe fd21 	bl	800071c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f008 fdaf 	bl	800a844 <sin>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe fead 	bl	8000a4c <__aeabi_d2f>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	613b      	str	r3, [r7, #16]

	float XCurr2 = cos(Input2*M_PI/180);
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f7fe fb8e 	bl	8000418 <__aeabi_f2d>
 8001cfc:	a332      	add	r3, pc, #200	; (adr r3, 8001dc8 <angopt_QuadRantCheckOutput2+0x158>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fbe1 	bl	80004c8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <angopt_QuadRantCheckOutput2+0x160>)
 8001d14:	f7fe fd02 	bl	800071c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f008 fd4a 	bl	800a7b8 <cos>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fe8e 	bl	8000a4c <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
	float YCurr2 = sin(Input2*M_PI/180);
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7fe fb6f 	bl	8000418 <__aeabi_f2d>
 8001d3a:	a323      	add	r3, pc, #140	; (adr r3, 8001dc8 <angopt_QuadRantCheckOutput2+0x158>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fbc2 	bl	80004c8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <angopt_QuadRantCheckOutput2+0x160>)
 8001d52:	f7fe fce3 	bl	800071c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f008 fd71 	bl	800a844 <sin>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fe6f 	bl	8000a4c <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60bb      	str	r3, [r7, #8]


	Case1 = angopt_QuadrantCheckInput(XCurr1, YCurr1);
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff feaf 	bl	8001ad8 <angopt_QuadrantCheckInput>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001d7e:	6253      	str	r3, [r2, #36]	; 0x24
	Case2 = angopt_QuadrantCheckInput(XCurr2, YCurr2);
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fea8 	bl	8001ad8 <angopt_QuadrantCheckInput>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001d8c:	6293      	str	r3, [r2, #40]	; 0x28

	if (Case1 == 0)Direc = 0;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <angopt_QuadRantCheckOutput2+0x12e>
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e00d      	b.n	8001dba <angopt_QuadRantCheckOutput2+0x14a>

		else {
			if(Case2 == Case1)Direc = 1;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d103      	bne.n	8001db2 <angopt_QuadRantCheckOutput2+0x142>
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e003      	b.n	8001dba <angopt_QuadRantCheckOutput2+0x14a>
			else Direc = -1;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	601a      	str	r2, [r3, #0]
		}
	return Direc;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <angopt_QuadRantCheckOutput2+0x164>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	54442d18 	.word	0x54442d18
 8001dcc:	400921fb 	.word	0x400921fb
 8001dd0:	40668000 	.word	0x40668000
 8001dd4:	20000114 	.word	0x20000114

08001dd8 <angopt_Cal>:

void angopt_Cal(float input)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	if(input != preAngle){
 8001de0:	4b87      	ldr	r3, [pc, #540]	; (8002000 <angopt_Cal+0x228>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff f922 	bl	8001030 <__aeabi_fcmpeq>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d000      	beq.n	8001df4 <angopt_Cal+0x1c>
		preCal = calInput;
		currentAngle += deltaAngle;
		if(currentAngle>=1080) currentAngle-=360;
		else if (currentAngle<=-1080) currentAngle+=360;
	}
}
 8001df2:	e101      	b.n	8001ff8 <angopt_Cal+0x220>
		calInput = input;
 8001df4:	4a82      	ldr	r2, [pc, #520]	; (8002000 <angopt_Cal+0x228>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6153      	str	r3, [r2, #20]
		if((currentAngle>=0)&&(calInput<0))
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <angopt_Cal+0x228>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f932 	bl	800106c <__aeabi_fcmpge>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d014      	beq.n	8001e38 <angopt_Cal+0x60>
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <angopt_Cal+0x228>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f914 	bl	8001044 <__aeabi_fcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <angopt_Cal+0x60>
			calInput+=360;
 8001e22:	4b77      	ldr	r3, [pc, #476]	; (8002000 <angopt_Cal+0x228>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4977      	ldr	r1, [pc, #476]	; (8002004 <angopt_Cal+0x22c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fe65 	bl	8000af8 <__addsf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <angopt_Cal+0x228>)
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	e01d      	b.n	8001e74 <angopt_Cal+0x9c>
		else if ((currentAngle<0)&&(calInput>0))
 8001e38:	4b71      	ldr	r3, [pc, #452]	; (8002000 <angopt_Cal+0x228>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f8ff 	bl	8001044 <__aeabi_fcmplt>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <angopt_Cal+0x9c>
 8001e4c:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <angopt_Cal+0x228>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f913 	bl	8001080 <__aeabi_fcmpgt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <angopt_Cal+0x9c>
			calInput-=360;
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <angopt_Cal+0x228>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	4967      	ldr	r1, [pc, #412]	; (8002004 <angopt_Cal+0x22c>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe44 	bl	8000af4 <__aeabi_fsub>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b63      	ldr	r3, [pc, #396]	; (8002000 <angopt_Cal+0x228>)
 8001e72:	615a      	str	r2, [r3, #20]
		deltaAngle = calInput - modulo360(currentAngle);
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <angopt_Cal+0x228>)
 8001e76:	695c      	ldr	r4, [r3, #20]
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <angopt_Cal+0x228>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fdf3 	bl	8001a68 <modulo360>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7fe fe34 	bl	8000af4 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <angopt_Cal+0x228>)
 8001e92:	609a      	str	r2, [r3, #8]
		if(deltaAngle>180)
 8001e94:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <angopt_Cal+0x228>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	495b      	ldr	r1, [pc, #364]	; (8002008 <angopt_Cal+0x230>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f8f0 	bl	8001080 <__aeabi_fcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <angopt_Cal+0xe4>
			deltaAngle+=-360;
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <angopt_Cal+0x228>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4956      	ldr	r1, [pc, #344]	; (8002004 <angopt_Cal+0x22c>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fe21 	bl	8000af4 <__aeabi_fsub>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <angopt_Cal+0x228>)
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e012      	b.n	8001ee2 <angopt_Cal+0x10a>
		else if(deltaAngle<-180)
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <angopt_Cal+0x228>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4952      	ldr	r1, [pc, #328]	; (800200c <angopt_Cal+0x234>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f8be 	bl	8001044 <__aeabi_fcmplt>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <angopt_Cal+0x10a>
			deltaAngle+=360;
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <angopt_Cal+0x228>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	494c      	ldr	r1, [pc, #304]	; (8002004 <angopt_Cal+0x22c>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fe0f 	bl	8000af8 <__addsf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <angopt_Cal+0x228>)
 8001ee0:	609a      	str	r2, [r3, #8]
		if((deltaAngle<=90)&&(deltaAngle>=-90))deltaAngle = deltaAngle;
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <angopt_Cal+0x228>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	494a      	ldr	r1, [pc, #296]	; (8002010 <angopt_Cal+0x238>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f8b5 	bl	8001058 <__aeabi_fcmple>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <angopt_Cal+0x138>
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <angopt_Cal+0x228>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4946      	ldr	r1, [pc, #280]	; (8002014 <angopt_Cal+0x23c>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f8b6 	bl	800106c <__aeabi_fcmpge>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <angopt_Cal+0x138>
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <angopt_Cal+0x228>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <angopt_Cal+0x228>)
 8001f0c:	6093      	str	r3, [r2, #8]
 8001f0e:	e038      	b.n	8001f82 <angopt_Cal+0x1aa>
		else if ((deltaAngle>90)&&(deltaAngle<=180))deltaAngle += -180.0;
 8001f10:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <angopt_Cal+0x228>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	493e      	ldr	r1, [pc, #248]	; (8002010 <angopt_Cal+0x238>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f8b2 	bl	8001080 <__aeabi_fcmpgt>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d013      	beq.n	8001f4a <angopt_Cal+0x172>
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <angopt_Cal+0x228>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4938      	ldr	r1, [pc, #224]	; (8002008 <angopt_Cal+0x230>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f895 	bl	8001058 <__aeabi_fcmple>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <angopt_Cal+0x172>
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <angopt_Cal+0x228>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4933      	ldr	r1, [pc, #204]	; (8002008 <angopt_Cal+0x230>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fdda 	bl	8000af4 <__aeabi_fsub>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <angopt_Cal+0x228>)
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e01b      	b.n	8001f82 <angopt_Cal+0x1aa>
		else if ((deltaAngle<-90)&&(deltaAngle>=-180))deltaAngle += 180.0;
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <angopt_Cal+0x228>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4931      	ldr	r1, [pc, #196]	; (8002014 <angopt_Cal+0x23c>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f877 	bl	8001044 <__aeabi_fcmplt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d012      	beq.n	8001f82 <angopt_Cal+0x1aa>
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <angopt_Cal+0x228>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	492a      	ldr	r1, [pc, #168]	; (800200c <angopt_Cal+0x234>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f882 	bl	800106c <__aeabi_fcmpge>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <angopt_Cal+0x1aa>
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <angopt_Cal+0x228>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4925      	ldr	r1, [pc, #148]	; (8002008 <angopt_Cal+0x230>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fdbf 	bl	8000af8 <__addsf3>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <angopt_Cal+0x228>)
 8001f80:	609a      	str	r2, [r3, #8]
		preAngle = input;
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <angopt_Cal+0x228>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6113      	str	r3, [r2, #16]
		preCal = calInput;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <angopt_Cal+0x228>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <angopt_Cal+0x228>)
 8001f8e:	6193      	str	r3, [r2, #24]
		currentAngle += deltaAngle;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <angopt_Cal+0x228>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <angopt_Cal+0x228>)
 8001f96:	6892      	ldr	r2, [r2, #8]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fdac 	bl	8000af8 <__addsf3>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <angopt_Cal+0x228>)
 8001fa6:	605a      	str	r2, [r3, #4]
		if(currentAngle>=1080) currentAngle-=360;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <angopt_Cal+0x228>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	491a      	ldr	r1, [pc, #104]	; (8002018 <angopt_Cal+0x240>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f85c 	bl	800106c <__aeabi_fcmpge>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <angopt_Cal+0x1f8>
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <angopt_Cal+0x228>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4911      	ldr	r1, [pc, #68]	; (8002004 <angopt_Cal+0x22c>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fd97 	bl	8000af4 <__aeabi_fsub>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <angopt_Cal+0x228>)
 8001fcc:	605a      	str	r2, [r3, #4]
}
 8001fce:	e013      	b.n	8001ff8 <angopt_Cal+0x220>
		else if (currentAngle<=-1080) currentAngle+=360;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <angopt_Cal+0x228>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4911      	ldr	r1, [pc, #68]	; (800201c <angopt_Cal+0x244>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f83e 	bl	8001058 <__aeabi_fcmple>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d100      	bne.n	8001fe4 <angopt_Cal+0x20c>
}
 8001fe2:	e009      	b.n	8001ff8 <angopt_Cal+0x220>
		else if (currentAngle<=-1080) currentAngle+=360;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <angopt_Cal+0x228>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4906      	ldr	r1, [pc, #24]	; (8002004 <angopt_Cal+0x22c>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fd84 	bl	8000af8 <__addsf3>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <angopt_Cal+0x228>)
 8001ff6:	605a      	str	r2, [r3, #4]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	20000114 	.word	0x20000114
 8002004:	43b40000 	.word	0x43b40000
 8002008:	43340000 	.word	0x43340000
 800200c:	c3340000 	.word	0xc3340000
 8002010:	42b40000 	.word	0x42b40000
 8002014:	c2b40000 	.word	0xc2b40000
 8002018:	44870000 	.word	0x44870000
 800201c:	c4870000 	.word	0xc4870000

08002020 <angopt_GetOptAngle>:

float angopt_GetOptAngle()
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
#define currentAngle 	opt.currentAngle
	return currentAngle;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <angopt_GetOptAngle+0x10>)
 8002026:	685b      	ldr	r3, [r3, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000114 	.word	0x20000114

08002034 <angopt_Reset>:

void angopt_Reset()
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	direct = 0;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <angopt_Reset+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
	currentAngle = 0;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <angopt_Reset+0x4c>)
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
	deltaAngle = 0;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <angopt_Reset+0x4c>)
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
	outputAngle = 0;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <angopt_Reset+0x4c>)
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
	preAngle = 0;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <angopt_Reset+0x4c>)
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
	calInput = 0;
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <angopt_Reset+0x4c>)
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
	preCal = 0;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <angopt_Reset+0x4c>)
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
	deltaCal = 0;
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <angopt_Reset+0x4c>)
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000114 	.word	0x20000114

08002084 <brd_GetSafyDC>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

Safety_Check brd_GetSafyDC()
{
 8002084:	b4b0      	push	{r4, r5, r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return brdParam.SafeDC;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <brd_GetSafyDC+0x28>)
 8002090:	4615      	mov	r5, r2
 8002092:	f103 0408 	add.w	r4, r3, #8
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800209e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bcb0      	pop	{r4, r5, r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000144 	.word	0x20000144

080020b0 <brd_SetSafyDC>:
void brd_SetSafyDC(Safety_Check safe){
 80020b0:	b084      	sub	sp, #16
 80020b2:	b4b0      	push	{r4, r5, r7}
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	f107 040c 	add.w	r4, r7, #12
 80020ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	brdParam.SafeDC = safe;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <brd_SetSafyDC+0x30>)
 80020c0:	f103 0408 	add.w	r4, r3, #8
 80020c4:	f107 050c 	add.w	r5, r7, #12
 80020c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bcb0      	pop	{r4, r5, r7}
 80020da:	b004      	add	sp, #16
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000144 	.word	0x20000144

080020e4 <brd_GetSafyBLDC>:

Safety_Check brd_GetSafyBLDC()
{
 80020e4:	b4b0      	push	{r4, r5, r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	return brdParam.SafeBLDC;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <brd_GetSafyBLDC+0x28>)
 80020f0:	4615      	mov	r5, r2
 80020f2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80020f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bcb0      	pop	{r4, r5, r7}
 800210a:	4770      	bx	lr
 800210c:	20000144 	.word	0x20000144

08002110 <brd_SetSafyBLDC>:
void brd_SetSafyBLDC(Safety_Check safe)
{
 8002110:	b084      	sub	sp, #16
 8002112:	b4b0      	push	{r4, r5, r7}
 8002114:	af00      	add	r7, sp, #0
 8002116:	f107 040c 	add.w	r4, r7, #12
 800211a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	brdParam.SafeBLDC = safe;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <brd_SetSafyBLDC+0x30>)
 8002120:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002124:	f107 050c 	add.w	r5, r7, #12
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bcb0      	pop	{r4, r5, r7}
 800213a:	b004      	add	sp, #16
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000144 	.word	0x20000144

08002144 <brd_GetCurrentAngleDC>:

float brd_GetCurrentAngleDC(){return encoder_GetPulse(&brdParam.encDC, MODE_ANGLE);}
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
 8002148:	2102      	movs	r1, #2
 800214a:	4803      	ldr	r0, [pc, #12]	; (8002158 <brd_GetCurrentAngleDC+0x14>)
 800214c:	f000 fad6 	bl	80026fc <encoder_GetPulse>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200001dc 	.word	0x200001dc

0800215c <brd_Init>:
float brd_GetCurrentSpeedBLDC(){return encoder_GetSpeed(&brdParam.encBLDC);}
int brd_GetCurrentCountBLDC(){return (int)encoder_GetPulse(&brdParam.encBLDC, MODE_X4);}

void brd_Init()
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af04      	add	r7, sp, #16
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002162:	213c      	movs	r1, #60	; 0x3c
 8002164:	484f      	ldr	r0, [pc, #316]	; (80022a4 <brd_Init+0x148>)
 8002166:	f004 fc48 	bl	80069fa <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800216a:	213c      	movs	r1, #60	; 0x3c
 800216c:	484e      	ldr	r0, [pc, #312]	; (80022a8 <brd_Init+0x14c>)
 800216e:	f004 fc44 	bl	80069fa <HAL_TIM_Encoder_Start_IT>
	encoder_Init(&brdParam.encDC, &htim3, DCEncoderPerRound*DCGearRatio, PIDDeltaT);
 8002172:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <brd_Init+0x150>)
 8002174:	f640 52cf 	movw	r2, #3535	; 0xdcf
 8002178:	494a      	ldr	r1, [pc, #296]	; (80022a4 <brd_Init+0x148>)
 800217a:	484d      	ldr	r0, [pc, #308]	; (80022b0 <brd_Init+0x154>)
 800217c:	f000 fa1a 	bl	80025b4 <encoder_Init>
	encoder_Init(&brdParam.encBLDC, &htim4, _BLDCEncoderPerRound*_BLDCGearRatio, PIDDeltaT);
 8002180:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <brd_Init+0x150>)
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	4948      	ldr	r1, [pc, #288]	; (80022a8 <brd_Init+0x14c>)
 8002188:	484a      	ldr	r0, [pc, #296]	; (80022b4 <brd_Init+0x158>)
 800218a:	f000 fa13 	bl	80025b4 <encoder_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800218e:	2104      	movs	r1, #4
 8002190:	4849      	ldr	r0, [pc, #292]	; (80022b8 <brd_Init+0x15c>)
 8002192:	f004 f9c9 	bl	8006528 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002196:	2108      	movs	r1, #8
 8002198:	4847      	ldr	r0, [pc, #284]	; (80022b8 <brd_Init+0x15c>)
 800219a:	f004 f9c5 	bl	8006528 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800219e:	210c      	movs	r1, #12
 80021a0:	4845      	ldr	r0, [pc, #276]	; (80022b8 <brd_Init+0x15c>)
 80021a2:	f004 f9c1 	bl	8006528 <HAL_TIM_PWM_Start>
	MotorBLDC_Init(&brdParam.mbldc, &htim2, TIM_CHANNEL_2,
 80021a6:	2301      	movs	r3, #1
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <brd_Init+0x160>)
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2310      	movs	r3, #16
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <brd_Init+0x160>)
 80021b4:	2204      	movs	r2, #4
 80021b6:	4940      	ldr	r1, [pc, #256]	; (80022b8 <brd_Init+0x15c>)
 80021b8:	4841      	ldr	r0, [pc, #260]	; (80022c0 <brd_Init+0x164>)
 80021ba:	f000 fc88 	bl	8002ace <MotorBLDC_Init>
			BLDC_BRAKE_GPIO_Port,
			BLDC_BRAKE_Pin,
			BLDC_DIR_GPIO_Port,
			BLDC_DIR_Pin);
	MotorDC_Init(&brdParam.mdc, &htim2, MOTOR_PWM_INVERSE,
 80021be:	230c      	movs	r3, #12
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2308      	movs	r3, #8
 80021c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c8:	493b      	ldr	r1, [pc, #236]	; (80022b8 <brd_Init+0x15c>)
 80021ca:	483e      	ldr	r0, [pc, #248]	; (80022c4 <brd_Init+0x168>)
 80021cc:	f000 fb0d 	bl	80027ea <MotorDC_Init>
			TIM_CHANNEL_3,
			TIM_CHANNEL_4);
	brdParam.pidBLDC_Speed.kP = 0.03;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <brd_Init+0x16c>)
 80021d2:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <brd_Init+0x170>)
 80021d4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	brdParam.pidBLDC_Speed.kI = 2.5;
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <brd_Init+0x16c>)
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <brd_Init+0x174>)
 80021dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	brdParam.pidBLDC_Speed.kD = 0;
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <brd_Init+0x16c>)
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	brdParam.pidBLDC_Speed.alpha = 0;
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <brd_Init+0x16c>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	brdParam.pidBLDC_Speed.deltaT = PIDDeltaT;
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <brd_Init+0x16c>)
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <brd_Init+0x150>)
 80021f8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	brdParam.pidBLDC_Speed.u_AboveLimit = 1000;
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <brd_Init+0x16c>)
 80021fe:	4a35      	ldr	r2, [pc, #212]	; (80022d4 <brd_Init+0x178>)
 8002200:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	brdParam.pidBLDC_Speed.u_BelowLimit = -1000;
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <brd_Init+0x16c>)
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <brd_Init+0x17c>)
 8002208:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	brdParam.pidBLDC_Speed.kB = 1/PIDDeltaT;
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <brd_Init+0x16c>)
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <brd_Init+0x180>)
 8002210:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	brdParam.pidDC_Angle.kP = 3;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <brd_Init+0x16c>)
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <brd_Init+0x184>)
 8002218:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	brdParam.pidDC_Angle.kI = 0;
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <brd_Init+0x16c>)
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	brdParam.pidDC_Angle.kD = 0.04;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <brd_Init+0x16c>)
 8002228:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <brd_Init+0x188>)
 800222a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	brdParam.pidDC_Angle.alpha = 0.8;
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <brd_Init+0x16c>)
 8002230:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <brd_Init+0x18c>)
 8002232:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	brdParam.pidDC_Angle.deltaT = PIDDeltaT;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <brd_Init+0x16c>)
 8002238:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <brd_Init+0x150>)
 800223a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	brdParam.pidDC_Angle.u_AboveLimit = 500;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <brd_Init+0x16c>)
 8002240:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <brd_Init+0x190>)
 8002242:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	brdParam.pidDC_Angle.u_BelowLimit = -500;
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <brd_Init+0x16c>)
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <brd_Init+0x194>)
 800224a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	brdParam.pidDC_Angle.kB = 1/PIDDeltaT;
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <brd_Init+0x16c>)
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <brd_Init+0x180>)
 8002252:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	brdParam.pidDC_Speed.kP = 1;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <brd_Init+0x16c>)
 8002258:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	brdParam.pidDC_Speed.kI = 200;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <brd_Init+0x16c>)
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <brd_Init+0x180>)
 8002264:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	brdParam.pidDC_Speed.kD = 0;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <brd_Init+0x16c>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	brdParam.pidDC_Speed.alpha = 0;
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <brd_Init+0x16c>)
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	brdParam.pidDC_Speed.deltaT = PIDDeltaT;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <brd_Init+0x16c>)
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <brd_Init+0x150>)
 8002280:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <brd_Init+0x16c>)
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <brd_Init+0x178>)
 8002288:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	brdParam.pidDC_Speed.u_BelowLimit = DC_SUM_BELOW_LIMIT;
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <brd_Init+0x16c>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <brd_Init+0x17c>)
 8002290:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	brdParam.pidDC_Speed.kB = 1/PIDDeltaT;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <brd_Init+0x16c>)
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <brd_Init+0x180>)
 8002298:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200005ec 	.word	0x200005ec
 80022a8:	20000634 	.word	0x20000634
 80022ac:	3ba3d70a 	.word	0x3ba3d70a
 80022b0:	200001dc 	.word	0x200001dc
 80022b4:	200001b4 	.word	0x200001b4
 80022b8:	200005a4 	.word	0x200005a4
 80022bc:	40010800 	.word	0x40010800
 80022c0:	200001a0 	.word	0x200001a0
 80022c4:	20000190 	.word	0x20000190
 80022c8:	20000144 	.word	0x20000144
 80022cc:	3cf5c28f 	.word	0x3cf5c28f
 80022d0:	40200000 	.word	0x40200000
 80022d4:	447a0000 	.word	0x447a0000
 80022d8:	c47a0000 	.word	0xc47a0000
 80022dc:	43480000 	.word	0x43480000
 80022e0:	40400000 	.word	0x40400000
 80022e4:	3d23d70a 	.word	0x3d23d70a
 80022e8:	3f4ccccd 	.word	0x3f4ccccd
 80022ec:	43fa0000 	.word	0x43fa0000
 80022f0:	c3fa0000 	.word	0xc3fa0000

080022f4 <brd_SetPID>:




void brd_SetPID(PID_Param pid,PID_type type)
{
 80022f4:	b084      	sub	sp, #16
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	f107 0c08 	add.w	ip, r7, #8
 80022fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(type){
 8002302:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002306:	2b03      	cmp	r3, #3
 8002308:	d019      	beq.n	800233e <brd_SetPID+0x4a>
 800230a:	2b03      	cmp	r3, #3
 800230c:	dc21      	bgt.n	8002352 <brd_SetPID+0x5e>
 800230e:	2b01      	cmp	r3, #1
 8002310:	d002      	beq.n	8002318 <brd_SetPID+0x24>
 8002312:	2b02      	cmp	r3, #2
 8002314:	d00a      	beq.n	800232c <brd_SetPID+0x38>
		break;
	case PID_BLDC_SPEED:
		brdParam.pidBLDC_Speed = pid;
		break;
	}
}
 8002316:	e01c      	b.n	8002352 <brd_SetPID+0x5e>
		brdParam.pidDC_Speed = pid;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <brd_SetPID+0x6c>)
 800231a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800231e:	f107 0108 	add.w	r1, r7, #8
 8002322:	2244      	movs	r2, #68	; 0x44
 8002324:	4618      	mov	r0, r3
 8002326:	f008 f9e5 	bl	800a6f4 <memcpy>
		break;
 800232a:	e012      	b.n	8002352 <brd_SetPID+0x5e>
		brdParam.pidDC_Angle = pid;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <brd_SetPID+0x6c>)
 800232e:	33c0      	adds	r3, #192	; 0xc0
 8002330:	f107 0108 	add.w	r1, r7, #8
 8002334:	2244      	movs	r2, #68	; 0x44
 8002336:	4618      	mov	r0, r3
 8002338:	f008 f9dc 	bl	800a6f4 <memcpy>
		break;
 800233c:	e009      	b.n	8002352 <brd_SetPID+0x5e>
		brdParam.pidBLDC_Speed = pid;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <brd_SetPID+0x6c>)
 8002340:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002344:	f107 0108 	add.w	r1, r7, #8
 8002348:	2244      	movs	r2, #68	; 0x44
 800234a:	4618      	mov	r0, r3
 800234c:	f008 f9d2 	bl	800a6f4 <memcpy>
		break;
 8002350:	bf00      	nop
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800235a:	b004      	add	sp, #16
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000144 	.word	0x20000144

08002364 <brd_GetPID>:



PID_Param brd_GetPID(PID_type type)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
	switch(type){
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d019      	beq.n	80023aa <brd_GetPID+0x46>
 8002376:	2b03      	cmp	r3, #3
 8002378:	dc21      	bgt.n	80023be <brd_GetPID+0x5a>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d002      	beq.n	8002384 <brd_GetPID+0x20>
 800237e:	2b02      	cmp	r3, #2
 8002380:	d00a      	beq.n	8002398 <brd_GetPID+0x34>
 8002382:	e01c      	b.n	80023be <brd_GetPID+0x5a>
	case PID_DC_SPEED:
		return brdParam.pidDC_Speed;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <brd_GetPID+0x74>)
 8002388:	4610      	mov	r0, r2
 800238a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800238e:	2244      	movs	r2, #68	; 0x44
 8002390:	4619      	mov	r1, r3
 8002392:	f008 f9af 	bl	800a6f4 <memcpy>
 8002396:	e01b      	b.n	80023d0 <brd_GetPID+0x6c>
		break;
	case PID_DC_ANGLE:
		return brdParam.pidDC_Angle;
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <brd_GetPID+0x74>)
 800239c:	4610      	mov	r0, r2
 800239e:	33c0      	adds	r3, #192	; 0xc0
 80023a0:	2244      	movs	r2, #68	; 0x44
 80023a2:	4619      	mov	r1, r3
 80023a4:	f008 f9a6 	bl	800a6f4 <memcpy>
 80023a8:	e012      	b.n	80023d0 <brd_GetPID+0x6c>
		break;
	case PID_BLDC_SPEED:
		return brdParam.pidBLDC_Speed;
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <brd_GetPID+0x74>)
 80023ae:	4610      	mov	r0, r2
 80023b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80023b4:	2244      	movs	r2, #68	; 0x44
 80023b6:	4619      	mov	r1, r3
 80023b8:	f008 f99c 	bl	800a6f4 <memcpy>
 80023bc:	e008      	b.n	80023d0 <brd_GetPID+0x6c>
		break;
	}
	return brdParam.pidDC_Speed;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <brd_GetPID+0x74>)
 80023c2:	4610      	mov	r0, r2
 80023c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023c8:	2244      	movs	r2, #68	; 0x44
 80023ca:	4619      	mov	r1, r3
 80023cc:	f008 f992 	bl	800a6f4 <memcpy>
}
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000144 	.word	0x20000144

080023dc <brd_ResetState>:

void brd_ResetState()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	brd_SetTargetAngleDC(0);
 80023e0:	f04f 0000 	mov.w	r0, #0
 80023e4:	f000 f858 	bl	8002498 <brd_SetTargetAngleDC>
	brdParam.pidDC_Speed.u_AboveLimit = 0;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <brd_ResetState+0x4c>)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	brdParam.pidDC_Speed.u_BelowLimit= 0;
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <brd_ResetState+0x4c>)
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	encoder_ResetCount(&brdParam.encDC);
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <brd_ResetState+0x50>)
 80023fe:	f000 f9db 	bl	80027b8 <encoder_ResetCount>
	osDelay(1000);
 8002402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002406:	f005 feeb 	bl	80081e0 <osDelay>
	brdParam.pidDC_Speed.uI = 0;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <brd_ResetState+0x4c>)
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
//	brdParam.pidDC_Speed.u_AboveLimit = 100;
//	brdParam.pidDC_Speed.u_BelowLimit= -100;
//	brdParam.pidDC_Speed.uI_AboveLimit = DC_INTERGRAL_ABOVE_LIMIT;
//	brdParam.pidDC_Speed.uI_BelowLimit = DC_INTERGRAL_BELOW_LIMIT;
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <brd_ResetState+0x4c>)
 8002416:	4a06      	ldr	r2, [pc, #24]	; (8002430 <brd_ResetState+0x54>)
 8002418:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	brdParam.pidDC_Speed.u_BelowLimit= DC_SUM_BELOW_LIMIT;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <brd_ResetState+0x4c>)
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <brd_ResetState+0x58>)
 8002420:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000144 	.word	0x20000144
 800242c:	200001dc 	.word	0x200001dc
 8002430:	447a0000 	.word	0x447a0000
 8002434:	c47a0000 	.word	0xc47a0000

08002438 <brd_GetObjMotorDC>:

}



MotorDC brd_GetObjMotorDC(){return brdParam.mdc;}
 8002438:	b490      	push	{r4, r7}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <brd_GetObjMotorDC+0x20>)
 8002444:	4614      	mov	r4, r2
 8002446:	334c      	adds	r3, #76	; 0x4c
 8002448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bc90      	pop	{r4, r7}
 8002456:	4770      	bx	lr
 8002458:	20000144 	.word	0x20000144

0800245c <brd_GetObjMotorBLDC>:
void brd_SetObjMotorDC(MotorDC mdc){brdParam.mdc = mdc;}

MotorBLDC brd_GetObjMotorBLDC(){return brdParam.mbldc;}
 800245c:	b4b0      	push	{r4, r5, r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <brd_GetObjMotorBLDC+0x24>)
 8002468:	4615      	mov	r5, r2
 800246a:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bcb0      	pop	{r4, r5, r7}
 800247e:	4770      	bx	lr
 8002480:	20000144 	.word	0x20000144

08002484 <brd_GetTargetAngleDC>:
void brd_SetObjMotorBLDC(MotorBLDC mbldc){brdParam.mbldc = mbldc;}

float brd_GetTargetAngleDC(){return brdParam.targetAngleDC;}
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <brd_GetTargetAngleDC+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000144 	.word	0x20000144

08002498 <brd_SetTargetAngleDC>:
void brd_SetTargetAngleDC(float angle){brdParam.targetAngleDC = angle;}
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <brd_SetTargetAngleDC+0x18>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000144 	.word	0x20000144

080024b4 <brd_SetTargetSpeedBLDC>:

void brd_SetTargetSpeedBLDC(float speed){brdParam.targetSpeedBLDC = speed;}
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <brd_SetTargetSpeedBLDC+0x18>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6053      	str	r3, [r2, #4]
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000144 	.word	0x20000144

080024d0 <brd_GetTargetSpeedBLDC>:
float brd_GetTargetSpeedBLDC(){return brdParam.targetSpeedBLDC;}
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <brd_GetTargetSpeedBLDC+0x10>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	20000144 	.word	0x20000144

080024e4 <brd_SetObjEncDC>:

void brd_SetObjEncDC(Encoder_t encDC){brdParam.encDC = encDC;}
 80024e4:	b084      	sub	sp, #16
 80024e6:	b4b0      	push	{r4, r5, r7}
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	f107 040c 	add.w	r4, r7, #12
 80024ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <brd_SetObjEncDC+0x34>)
 80024f4:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80024f8:	f107 050c 	add.w	r5, r7, #12
 80024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002508:	e884 0003 	stmia.w	r4, {r0, r1}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bcb0      	pop	{r4, r5, r7}
 8002512:	b004      	add	sp, #16
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000144 	.word	0x20000144

0800251c <brd_GetObjEncDC>:
Encoder_t brd_GetObjEncDC(){return brdParam.encDC;}
 800251c:	b4b0      	push	{r4, r5, r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <brd_GetObjEncDC+0x2c>)
 8002528:	4615      	mov	r5, r2
 800252a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800252e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800253a:	e885 0003 	stmia.w	r5, {r0, r1}
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bcb0      	pop	{r4, r5, r7}
 8002546:	4770      	bx	lr
 8002548:	20000144 	.word	0x20000144

0800254c <brd_SetObjEncBLDC>:

void brd_SetObjEncBLDC(Encoder_t encBLDC){brdParam.encBLDC = encBLDC;}
 800254c:	b084      	sub	sp, #16
 800254e:	b4b0      	push	{r4, r5, r7}
 8002550:	af00      	add	r7, sp, #0
 8002552:	f107 040c 	add.w	r4, r7, #12
 8002556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <brd_SetObjEncBLDC+0x34>)
 800255c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002560:	f107 050c 	add.w	r5, r7, #12
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002570:	e884 0003 	stmia.w	r4, {r0, r1}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bcb0      	pop	{r4, r5, r7}
 800257a:	b004      	add	sp, #16
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000144 	.word	0x20000144

08002584 <brd_GetObjEncBLDC>:
Encoder_t brd_GetObjEncBLDC(){return brdParam.encBLDC;}
 8002584:	b4b0      	push	{r4, r5, r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <brd_GetObjEncBLDC+0x2c>)
 8002590:	4615      	mov	r5, r2
 8002592:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bcb0      	pop	{r4, r5, r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000144 	.word	0x20000144

080025b4 <encoder_Init>:
#include "Encoder.h"
#include "stdbool.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <encoder_GetSpeed>:



float encoder_GetSpeed(Encoder_t *enc)
{
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4 - enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fb25 	bl	8000c60 <__aeabi_i2f>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7fe fc26 	bl	8000e70 <__aeabi_fdiv>
 8002624:	4603      	mov	r3, r0
 8002626:	461c      	mov	r4, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fb12 	bl	8000c58 <__aeabi_ui2f>
 8002634:	4603      	mov	r3, r0
 8002636:	4619      	mov	r1, r3
 8002638:	4620      	mov	r0, r4
 800263a:	f7fe fc19 	bl	8000e70 <__aeabi_fdiv>
 800263e:	4603      	mov	r3, r0
 8002640:	492d      	ldr	r1, [pc, #180]	; (80026f8 <encoder_GetSpeed+0x118>)
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb60 	bl	8000d08 <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	615a      	str	r2, [r3, #20]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd fedf 	bl	8000418 <__aeabi_f2d>
 800265a:	a323      	add	r3, pc, #140	; (adr r3, 80026e8 <encoder_GetSpeed+0x108>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd ff32 	bl	80004c8 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4614      	mov	r4, r2
 800266a:	461d      	mov	r5, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fed1 	bl	8000418 <__aeabi_f2d>
 8002676:	a31e      	add	r3, pc, #120	; (adr r3, 80026f0 <encoder_GetSpeed+0x110>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd ff24 	bl	80004c8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fd68 	bl	800015c <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4614      	mov	r4, r2
 8002692:	461d      	mov	r5, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd febd 	bl	8000418 <__aeabi_f2d>
 800269e:	a314      	add	r3, pc, #80	; (adr r3, 80026f0 <encoder_GetSpeed+0x110>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ff10 	bl	80004c8 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4620      	mov	r0, r4
 80026ae:	4629      	mov	r1, r5
 80026b0:	f7fd fd54 	bl	800015c <__adddf3>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f7fe f9c6 	bl	8000a4c <__aeabi_d2f>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	61da      	str	r2, [r3, #28]
	enc->vel_Pre = enc->vel_Real;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
	enc->count_Pre = enc->count_X4;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60da      	str	r2, [r3, #12]
	return enc->vel_Real;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bdb0      	pop	{r4, r5, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	f3af 8000 	nop.w
 80026e8:	ced91687 	.word	0xced91687
 80026ec:	3feb53f7 	.word	0x3feb53f7
 80026f0:	532617c2 	.word	0x532617c2
 80026f4:	3fb2a305 	.word	0x3fb2a305
 80026f8:	42700000 	.word	0x42700000

080026fc <encoder_GetPulse>:

float encoder_GetPulse(Encoder_t *enc, EncoderCountMode count_Mode)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b21a      	sxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	441a      	add	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
	if (count_Mode == MODE_X4) return enc->count_X4;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <encoder_GetPulse+0x3e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fa95 	bl	8000c60 <__aeabi_i2f>
 8002736:	4603      	mov	r3, r0
 8002738:	e037      	b.n	80027aa <encoder_GetPulse+0xae>
	else if (count_Mode == MODE_X1) return (float)enc->count_X4/4;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <encoder_GetPulse+0x5e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fa8b 	bl	8000c60 <__aeabi_i2f>
 800274a:	4603      	mov	r3, r0
 800274c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fb8d 	bl	8000e70 <__aeabi_fdiv>
 8002756:	4603      	mov	r3, r0
 8002758:	e027      	b.n	80027aa <encoder_GetPulse+0xae>
	else if (count_Mode == MODE_ANGLE) {
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d122      	bne.n	80027a6 <encoder_GetPulse+0xaa>
		enc->Degree = (float)((float)enc->count_X4*(float)360/((float)enc->count_PerRevol*(float)4));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fa7b 	bl	8000c60 <__aeabi_i2f>
 800276a:	4603      	mov	r3, r0
 800276c:	4911      	ldr	r1, [pc, #68]	; (80027b4 <encoder_GetPulse+0xb8>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe faca 	bl	8000d08 <__aeabi_fmul>
 8002774:	4603      	mov	r3, r0
 8002776:	461c      	mov	r4, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fa6b 	bl	8000c58 <__aeabi_ui2f>
 8002782:	4603      	mov	r3, r0
 8002784:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fabd 	bl	8000d08 <__aeabi_fmul>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f7fe fb6c 	bl	8000e70 <__aeabi_fdiv>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	621a      	str	r2, [r3, #32]
		return enc->Degree;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	e001      	b.n	80027aa <encoder_GetPulse+0xae>
	}
	return 0;
 80027a6:	f04f 0300 	mov.w	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	43b40000 	.word	0x43b40000

080027b8 <encoder_ResetCount>:
void encoder_ResetCount(Encoder_t *enc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
	enc->vel_Real = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	889b      	ldrh	r3, [r3, #4]
 800282a:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	bfb8      	it	lt
 8002832:	425b      	neglt	r3, r3
 8002834:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	889b      	ldrh	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <MotorDC_Drive+0x2c>
 800283e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002842:	f000 8097 	beq.w	8002974 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 8002846:	e13d      	b.n	8002ac4 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <MotorDC_Drive+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
 800285a:	e018      	b.n	800288e <MotorDC_Drive+0x72>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d105      	bne.n	8002870 <MotorDC_Drive+0x54>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	6393      	str	r3, [r2, #56]	; 0x38
 800286e:	e00e      	b.n	800288e <MotorDC_Drive+0x72>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d105      	bne.n	8002884 <MotorDC_Drive+0x68>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002882:	e004      	b.n	800288e <MotorDC_Drive+0x72>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <MotorDC_Drive+0x86>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2200      	movs	r2, #0
 800289e:	635a      	str	r2, [r3, #52]	; 0x34
 80028a0:	e018      	b.n	80028d4 <MotorDC_Drive+0xb8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d105      	bne.n	80028b6 <MotorDC_Drive+0x9a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	6393      	str	r3, [r2, #56]	; 0x38
 80028b4:	e00e      	b.n	80028d4 <MotorDC_Drive+0xb8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d105      	bne.n	80028ca <MotorDC_Drive+0xae>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80028c8:	e004      	b.n	80028d4 <MotorDC_Drive+0xb8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da23      	bge.n	8002922 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <MotorDC_Drive+0xd2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80028ec:	e0e7      	b.n	8002abe <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d105      	bne.n	8002902 <MotorDC_Drive+0xe6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6393      	str	r3, [r2, #56]	; 0x38
 8002900:	e037      	b.n	8002972 <MotorDC_Drive+0x156>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d105      	bne.n	8002916 <MotorDC_Drive+0xfa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002914:	e02d      	b.n	8002972 <MotorDC_Drive+0x156>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002920:	e0cd      	b.n	8002abe <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f340 80ca 	ble.w	8002abe <MotorDC_Drive+0x2a2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <MotorDC_Drive+0x122>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800293c:	e0bf      	b.n	8002abe <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d105      	bne.n	8002952 <MotorDC_Drive+0x136>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002950:	e0b5      	b.n	8002abe <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b08      	cmp	r3, #8
 8002958:	d105      	bne.n	8002966 <MotorDC_Drive+0x14a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002964:	e0ab      	b.n	8002abe <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002970:	e0a5      	b.n	8002abe <MotorDC_Drive+0x2a2>
 8002972:	e0a4      	b.n	8002abe <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <MotorDC_Drive+0x16c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	89fa      	ldrh	r2, [r7, #14]
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	e018      	b.n	80029ba <MotorDC_Drive+0x19e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d105      	bne.n	800299c <MotorDC_Drive+0x180>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	6393      	str	r3, [r2, #56]	; 0x38
 800299a:	e00e      	b.n	80029ba <MotorDC_Drive+0x19e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d105      	bne.n	80029b0 <MotorDC_Drive+0x194>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80029ae:	e004      	b.n	80029ba <MotorDC_Drive+0x19e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <MotorDC_Drive+0x1b2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	89fa      	ldrh	r2, [r7, #14]
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
 80029cc:	e018      	b.n	8002a00 <MotorDC_Drive+0x1e4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d105      	bne.n	80029e2 <MotorDC_Drive+0x1c6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	6393      	str	r3, [r2, #56]	; 0x38
 80029e0:	e00e      	b.n	8002a00 <MotorDC_Drive+0x1e4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d105      	bne.n	80029f6 <MotorDC_Drive+0x1da>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80029f4:	e004      	b.n	8002a00 <MotorDC_Drive+0x1e4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da2b      	bge.n	8002a5e <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <MotorDC_Drive+0x202>
 8002a0e:	89f9      	ldrh	r1, [r7, #14]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	1a8a      	subs	r2, r1, r2
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002a1c:	e051      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <MotorDC_Drive+0x21a>
 8002a26:	89f9      	ldrh	r1, [r7, #14]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1acb      	subs	r3, r1, r3
 8002a32:	6393      	str	r3, [r2, #56]	; 0x38
 8002a34:	e042      	b.n	8002abc <MotorDC_Drive+0x2a0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d107      	bne.n	8002a4e <MotorDC_Drive+0x232>
 8002a3e:	89f9      	ldrh	r1, [r7, #14]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1acb      	subs	r3, r1, r3
 8002a4a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002a4c:	e036      	b.n	8002abc <MotorDC_Drive+0x2a0>
 8002a4e:	89f9      	ldrh	r1, [r7, #14]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1acb      	subs	r3, r1, r3
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002a5c:	e031      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	dd2e      	ble.n	8002ac2 <MotorDC_Drive+0x2a6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <MotorDC_Drive+0x260>
 8002a6c:	89f9      	ldrh	r1, [r7, #14]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	1a8a      	subs	r2, r1, r2
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002a7a:	e022      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d107      	bne.n	8002a94 <MotorDC_Drive+0x278>
 8002a84:	89f9      	ldrh	r1, [r7, #14]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1acb      	subs	r3, r1, r3
 8002a90:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002a92:	e016      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d107      	bne.n	8002aac <MotorDC_Drive+0x290>
 8002a9c:	89f9      	ldrh	r1, [r7, #14]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1acb      	subs	r3, r1, r3
 8002aa8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002aaa:	e00a      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8002aac:	89f9      	ldrh	r1, [r7, #14]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002aba:	e002      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
 8002abc:	e001      	b.n	8002ac2 <MotorDC_Drive+0x2a6>
		break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <MotorDC_Drive+0x2a8>
		break;
 8002ac2:	bf00      	nop
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <MotorBLDC_Init>:
void MotorBLDC_Init(MotorBLDC *bldcMotor, TIM_HandleTypeDef *htim, uint32_t channel,
		GPIO_TypeDef *brakePort, uint16_t brakePin,
		GPIO_TypeDef *dirPort, uint16_t dirPin)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
	bldcMotor->Channel = channel;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
	bldcMotor->timBLDC = htim;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	611a      	str	r2, [r3, #16]
	bldcMotor->brakePin = brakePin;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8b3a      	ldrh	r2, [r7, #24]
 8002aec:	809a      	strh	r2, [r3, #4]
	bldcMotor->brakePort = brakePort;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	609a      	str	r2, [r3, #8]
	bldcMotor->dirPort = dirPort;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	60da      	str	r2, [r3, #12]
	bldcMotor->dirPin = dirPin;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8c3a      	ldrh	r2, [r7, #32]
 8002afe:	80da      	strh	r2, [r3, #6]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <MotorBLDC_Drive>:
{
	HAL_GPIO_WritePin(bldcMotor->brakePort, bldcMotor->brakePin, brake);
}

void MotorBLDC_Drive(MotorBLDC *bldcMotor, int32_t speedInput)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC, bldcMotor->Channel, 0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <MotorBLDC_Drive+0x1e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
 8002b26:	e018      	b.n	8002b5a <MotorBLDC_Drive+0x50>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d105      	bne.n	8002b3c <MotorBLDC_Drive+0x32>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	6393      	str	r3, [r2, #56]	; 0x38
 8002b3a:	e00e      	b.n	8002b5a <MotorBLDC_Drive+0x50>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d105      	bne.n	8002b50 <MotorBLDC_Drive+0x46>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b4e:	e004      	b.n	8002b5a <MotorBLDC_Drive+0x50>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
	if (!speedInput) return;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03f      	beq.n	8002be0 <MotorBLDC_Drive+0xd6>
	uint32_t pwm = abs(speedInput);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfb8      	it	lt
 8002b66:	425b      	neglt	r3, r3
 8002b68:	60fb      	str	r3, [r7, #12]
	if (speedInput < 0)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da08      	bge.n	8002b82 <MotorBLDC_Drive+0x78>
		HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_REVERSE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68d8      	ldr	r0, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	88db      	ldrh	r3, [r3, #6]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f002 ff69 	bl	8005a52 <HAL_GPIO_WritePin>
 8002b80:	e00a      	b.n	8002b98 <MotorBLDC_Drive+0x8e>
	else if (speedInput > 0) HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_FORWARD);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dd07      	ble.n	8002b98 <MotorBLDC_Drive+0x8e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68d8      	ldr	r0, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	88db      	ldrh	r3, [r3, #6]
 8002b90:	2200      	movs	r2, #0
 8002b92:	4619      	mov	r1, r3
 8002b94:	f002 ff5d 	bl	8005a52 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC, bldcMotor->Channel, pwm);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <MotorBLDC_Drive+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8002baa:	e01a      	b.n	8002be2 <MotorBLDC_Drive+0xd8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d105      	bne.n	8002bc0 <MotorBLDC_Drive+0xb6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bbe:	e010      	b.n	8002be2 <MotorBLDC_Drive+0xd8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d105      	bne.n	8002bd4 <MotorBLDC_Drive+0xca>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002bd2:	e006      	b.n	8002be2 <MotorBLDC_Drive+0xd8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	e000      	b.n	8002be2 <MotorBLDC_Drive+0xd8>
	if (!speedInput) return;
 8002be0:	bf00      	nop
}
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <PID_DC_CalSpeed>:
#include "PID_SwerveModule.h"
pErrorPID pErrPID;
bool isBreakProtectionDone = false;

void PID_DC_CalSpeed(float Target_set)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b0c0      	sub	sp, #256	; 0x100
 8002bec:	af0e      	add	r7, sp, #56	; 0x38
 8002bee:	6078      	str	r0, [r7, #4]
	MotorDC mdc = brd_GetObjMotorDC();
 8002bf0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fc1f 	bl	8002438 <brd_GetObjMotorDC>
	Encoder_t encDC = brd_GetObjEncDC();
 8002bfa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc8c 	bl	800251c <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_SPEED);
 8002c04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fbaa 	bl	8002364 <brd_GetPID>

	Safety_Check safeDC = brd_GetSafyDC();
 8002c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa35 	bl	8002084 <brd_GetSafyDC>
	Safety_Check safeBLDC = brd_GetSafyBLDC();
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fa60 	bl	80020e4 <brd_GetSafyBLDC>

	float result = PID_Calculate(&pid, Target_set, encoder_GetSpeed(&encDC));
 8002c24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fcd9 	bl	80025e0 <encoder_GetSpeed>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f007 fbf0 	bl	800a41c <PID_Calculate>
 8002c3c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	safeDC.ValueNow = encoder_GetPulse(&encDC, MODE_X4);
 8002c40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fd58 	bl	80026fc <encoder_GetPulse>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30

	if (absf(result)>500)
 8002c50:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002c54:	f7fe fef2 	bl	8001a3c <absf>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4949      	ldr	r1, [pc, #292]	; (8002d80 <PID_DC_CalSpeed+0x198>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fa0f 	bl	8001080 <__aeabi_fcmpgt>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02b      	beq.n	8002cc0 <PID_DC_CalSpeed+0xd8>
	{
		// Nếu số xung encoder trước và sau không thay đổi thì EncCheck tăng
		if ((safeDC.ValueNow == safeDC.ValuePre)||(result*encoder_GetSpeed(&encDC)<0))
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f9de 	bl	8001030 <__aeabi_fcmpeq>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d113      	bne.n	8002ca2 <PID_DC_CalSpeed+0xba>
 8002c7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fcae 	bl	80025e0 <encoder_GetSpeed>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f83c 	bl	8000d08 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f9d4 	bl	8001044 <__aeabi_fcmplt>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <PID_DC_CalSpeed+0xd4>
			{
			if(safeDC.SaftyFlag == 0){
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f9c1 	bl	8001030 <__aeabi_fcmpeq>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <PID_DC_CalSpeed+0xd8>
				safeDC.EncCheckForDC ++;
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
			if(safeDC.SaftyFlag == 0){
 8002cba:	e001      	b.n	8002cc0 <PID_DC_CalSpeed+0xd8>
			}
			}
		else
			{
				safeDC.EncCheckForDC = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
			}
	}
	// Nếu số xung không đổi với tốc cao thì có khả năng lỗi encoder
	if (safeDC.EncCheckForDC>=20){
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	2b13      	cmp	r3, #19
 8002cc4:	dd06      	ble.n	8002cd4 <PID_DC_CalSpeed+0xec>
		safeDC.SaftyFlag = 1;
 8002cc6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40
		pErrPID(ERROR_PID_FEEDBACK_ERROR);
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <PID_DC_CalSpeed+0x19c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4798      	blx	r3
	}
	safeDC.ValuePre = safeDC.ValueNow;
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34

	brd_SetPID(pid, PID_DC_SPEED);
 8002cd8:	2301      	movs	r3, #1
 8002cda:	930d      	str	r3, [sp, #52]	; 0x34
 8002cdc:	466d      	mov	r5, sp
 8002cde:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf8:	f7ff fafc 	bl	80022f4 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 8002cfc:	466d      	mov	r5, sp
 8002cfe:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8002d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d14:	f7ff fbe6 	bl	80024e4 <brd_SetObjEncDC>
	brd_SetSafyDC(safeDC);
 8002d18:	466c      	mov	r4, sp
 8002d1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d2a:	f7ff f9c1 	bl	80020b0 <brd_SetSafyDC>

	if((safeDC.SaftyFlag == 1)||(safeBLDC.SaftyFlag == 1)){
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f97b 	bl	8001030 <__aeabi_fcmpeq>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <PID_DC_CalSpeed+0x16a>
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f972 	bl	8001030 <__aeabi_fcmpeq>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <PID_DC_CalSpeed+0x178>
		MotorDC_Drive(&mdc, 0);
 8002d52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fd5f 	bl	800281c <MotorDC_Drive>
 8002d5e:	e00b      	b.n	8002d78 <PID_DC_CalSpeed+0x190>
	}else{

			MotorDC_Drive(&mdc, (int32_t) result);
 8002d60:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002d64:	f7fe f996 	bl	8001094 <__aeabi_f2iz>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fd53 	bl	800281c <MotorDC_Drive>

	}
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	37c8      	adds	r7, #200	; 0xc8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d80:	43fa0000 	.word	0x43fa0000
 8002d84:	200002d0 	.word	0x200002d0

08002d88 <PID_DC_CalPos>:

void PID_DC_CalPos(float Target_set)
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b0ac      	sub	sp, #176	; 0xb0
 8002d8c:	af0e      	add	r7, sp, #56	; 0x38
 8002d8e:	6078      	str	r0, [r7, #4]
	Encoder_t encDC = brd_GetObjEncDC();
 8002d90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fbc1 	bl	800251c <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_ANGLE);
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fadf 	bl	8002364 <brd_GetPID>
	pid.u_AboveLimit = 1000;
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <PID_DC_CalPos+0x90>)
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
	pid.u_BelowLimit = -1000;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <PID_DC_CalPos+0x94>)
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
	float result = PID_Calculate(&pid, Target_set, encoder_GetPulse(&encDC, MODE_ANGLE));
 8002dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fca1 	bl	80026fc <encoder_GetPulse>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 fb2a 	bl	800a41c <PID_Calculate>
 8002dc8:	6778      	str	r0, [r7, #116]	; 0x74
	brd_SetPID(pid, PID_DC_ANGLE);
 8002dca:	2302      	movs	r3, #2
 8002dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8002dce:	466d      	mov	r5, sp
 8002dd0:	f107 0418 	add.w	r4, r7, #24
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	f7ff fa83 	bl	80022f4 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 8002dee:	466d      	mov	r5, sp
 8002df0:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e06:	f7ff fb6d 	bl	80024e4 <brd_SetObjEncDC>
	PID_DC_CalSpeed(result);
 8002e0a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e0c:	f7ff feec 	bl	8002be8 <PID_DC_CalSpeed>
}
 8002e10:	bf00      	nop
 8002e12:	3778      	adds	r7, #120	; 0x78
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	447a0000 	.word	0x447a0000
 8002e1c:	c47a0000 	.word	0xc47a0000

08002e20 <PID_BLDC_CalSpeed>:

void PID_BLDC_CalSpeed(float Target_set)
{
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b0c2      	sub	sp, #264	; 0x108
 8002e24:	af0e      	add	r7, sp, #56	; 0x38
 8002e26:	6078      	str	r0, [r7, #4]
	MotorBLDC mbldc = brd_GetObjMotorBLDC();
 8002e28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fb15 	bl	800245c <brd_GetObjMotorBLDC>
	Encoder_t encBLDC = brd_GetObjEncBLDC();
 8002e32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fba4 	bl	8002584 <brd_GetObjEncBLDC>
	PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8002e3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e40:	2103      	movs	r1, #3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fa8e 	bl	8002364 <brd_GetPID>
	Safety_Check safeBLDC = brd_GetSafyBLDC();
 8002e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f949 	bl	80020e4 <brd_GetSafyBLDC>
	Safety_Check safeDC = brd_GetSafyDC();
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f914 	bl	8002084 <brd_GetSafyDC>
	if (isBreakProtectionDone == false) {
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	; (8003058 <PID_BLDC_CalSpeed+0x238>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <PID_BLDC_CalSpeed+0x56>
		MotorBLDC_Drive(&mbldc, 0);
 8002e6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fe4a 	bl	8002b0a <MotorBLDC_Drive>
	}
	if (((abs(encBLDC.vel_Real) < 0.5) && abs(Target_set) < 0.5)||(safeBLDC.SaftyFlag == 1)||(safeDC.SaftyFlag == 1)) {
 8002e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f90a 	bl	8001094 <__aeabi_f2iz>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db13      	blt.n	8002eae <PID_BLDC_CalSpeed+0x8e>
 8002e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe f902 	bl	8001094 <__aeabi_f2iz>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dc0b      	bgt.n	8002eae <PID_BLDC_CalSpeed+0x8e>
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe f8fc 	bl	8001094 <__aeabi_f2iz>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	db05      	blt.n	8002eae <PID_BLDC_CalSpeed+0x8e>
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f8f6 	bl	8001094 <__aeabi_f2iz>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	dd11      	ble.n	8002ed2 <PID_BLDC_CalSpeed+0xb2>
 8002eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f8bb 	bl	8001030 <__aeabi_fcmpeq>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d108      	bne.n	8002ed2 <PID_BLDC_CalSpeed+0xb2>
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f8b2 	bl	8001030 <__aeabi_fcmpeq>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d030      	beq.n	8002f34 <PID_BLDC_CalSpeed+0x114>
		HAL_GPIO_WritePin(BLDC_BRAKE_GPIO_Port, BLDC_BRAKE_Pin, GPIO_PIN_SET);
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	4861      	ldr	r0, [pc, #388]	; (800305c <PID_BLDC_CalSpeed+0x23c>)
 8002ed8:	f002 fdbb 	bl	8005a52 <HAL_GPIO_WritePin>
		MotorBLDC_Drive(&mbldc, 0);
 8002edc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fe11 	bl	8002b0a <MotorBLDC_Drive>
		pid.uI = 0;
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	667b      	str	r3, [r7, #100]	; 0x64
		pid.e = 0;
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
		pid.u = 0;
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		pid.uHat = 0;
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		brd_SetPID(pid, PID_BLDC_SPEED);
 8002f04:	2303      	movs	r3, #3
 8002f06:	930d      	str	r3, [sp, #52]	; 0x34
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f24:	f7ff f9e6 	bl	80022f4 <brd_SetPID>
		encoder_ResetCount(&encBLDC);
 8002f28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fc43 	bl	80027b8 <encoder_ResetCount>
 8002f32:	e08d      	b.n	8003050 <PID_BLDC_CalSpeed+0x230>
	}else{
				HAL_GPIO_WritePin(BLDC_BRAKE_GPIO_Port, BLDC_BRAKE_Pin, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2110      	movs	r1, #16
 8002f38:	4848      	ldr	r0, [pc, #288]	; (800305c <PID_BLDC_CalSpeed+0x23c>)
 8002f3a:	f002 fd8a 	bl	8005a52 <HAL_GPIO_WritePin>
				float result = PID_Calculate(&pid, Target_set, encoder_GetSpeed(&encBLDC));
 8002f3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fb4c 	bl	80025e0 <encoder_GetSpeed>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f007 fa63 	bl	800a41c <PID_Calculate>
 8002f56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
				MotorBLDC_Drive(&mbldc, (int32_t) result);
 8002f5a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002f5e:	f7fe f899 	bl	8001094 <__aeabi_f2iz>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fdcd 	bl	8002b0a <MotorBLDC_Drive>
				brd_SetObjEncBLDC(encBLDC);
 8002f70:	466d      	mov	r5, sp
 8002f72:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f88:	f7ff fae0 	bl	800254c <brd_SetObjEncBLDC>
				brd_SetPID(pid, PID_BLDC_SPEED);
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8002f90:	466d      	mov	r5, sp
 8002f92:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fac:	f7ff f9a2 	bl	80022f4 <brd_SetPID>

				if (absf(result)>500)
 8002fb0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002fb4:	f7fe fd42 	bl	8001a3c <absf>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4929      	ldr	r1, [pc, #164]	; (8003060 <PID_BLDC_CalSpeed+0x240>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe f85f 	bl	8001080 <__aeabi_fcmpgt>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d037      	beq.n	8003038 <PID_BLDC_CalSpeed+0x218>
				{
					// Nếu số xung encoder trước và sau không thay đổi thì EncCheck tăng
					if ((safeBLDC.ValueNow == safeBLDC.ValuePre)||(result*encoder_GetSpeed(&encBLDC)<0))
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f82e 	bl	8001030 <__aeabi_fcmpeq>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d113      	bne.n	8003002 <PID_BLDC_CalSpeed+0x1e2>
 8002fda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fafe 	bl	80025e0 <encoder_GetSpeed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fe8c 	bl	8000d08 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f824 	bl	8001044 <__aeabi_fcmplt>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <PID_BLDC_CalSpeed+0x1fc>
						{
						if(safeBLDC.SaftyFlag == 0){
 8003002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe f811 	bl	8001030 <__aeabi_fcmpeq>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <PID_BLDC_CalSpeed+0x200>
							safeBLDC.EncCheckForDC ++;
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	3301      	adds	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
						if(safeBLDC.SaftyFlag == 0){
 800301a:	e001      	b.n	8003020 <PID_BLDC_CalSpeed+0x200>
						}
						}
					else
						{
							safeBLDC.EncCheckForDC = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
						}
					if (safeBLDC.EncCheckForDC>=20){
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2b13      	cmp	r3, #19
 8003024:	dd06      	ble.n	8003034 <PID_BLDC_CalSpeed+0x214>
						safeBLDC.SaftyFlag = 1;
 8003026:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
						pErrPID(ERROR_PID_FEEDBACK_ERROR);
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <PID_BLDC_CalSpeed+0x244>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2000      	movs	r0, #0
 8003032:	4798      	blx	r3
					}
					safeBLDC.ValuePre = safeBLDC.ValueNow;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				brd_SetSafyBLDC(safeBLDC);
 8003038:	466c      	mov	r4, sp
 800303a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800303e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304a:	f7ff f861 	bl	8002110 <brd_SetSafyBLDC>


	}

}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	37d0      	adds	r7, #208	; 0xd0
 8003054:	46bd      	mov	sp, r7
 8003056:	bdb0      	pop	{r4, r5, r7, pc}
 8003058:	200002d4 	.word	0x200002d4
 800305c:	40010800 	.word	0x40010800
 8003060:	43fa0000 	.word	0x43fa0000
 8003064:	200002d0 	.word	0x200002d0

08003068 <PID_BLDC_BreakProtection>:

void PID_BLDC_BreakProtection(bool Mode)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b0a6      	sub	sp, #152	; 0x98
 800306c:	af0e      	add	r7, sp, #56	; 0x38
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
	if (Mode) {
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d029      	beq.n	80030cc <PID_BLDC_BreakProtection+0x64>
		isBreakProtectionDone = false;
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <PID_BLDC_BreakProtection+0x70>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
		MotorBLDC mbldc = brd_GetObjMotorBLDC();
 800307e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f9ea 	bl	800245c <brd_GetObjMotorBLDC>
		PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f968 	bl	8002364 <brd_GetPID>
		pid.uI = 0;
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
		brd_SetPID(pid, PID_BLDC_SPEED);
 800309a:	2303      	movs	r3, #3
 800309c:	930d      	str	r3, [sp, #52]	; 0x34
 800309e:	466d      	mov	r5, sp
 80030a0:	f107 0418 	add.w	r4, r7, #24
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	602b      	str	r3, [r5, #0]
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ba:	f7ff f91b 	bl	80022f4 <brd_SetPID>
		MotorBLDC_Drive(&mbldc, 0);
 80030be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fd20 	bl	8002b0a <MotorBLDC_Drive>
 80030ca:	e002      	b.n	80030d2 <PID_BLDC_BreakProtection+0x6a>
		return;
	}
	else
		isBreakProtectionDone = true;
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <PID_BLDC_BreakProtection+0x70>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
}
 80030d2:	3760      	adds	r7, #96	; 0x60
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	200002d4 	.word	0x200002d4

080030dc <PID_DC_UntangleWireBLDC>:

void PID_DC_UntangleWireBLDC()
{
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b0aa      	sub	sp, #168	; 0xa8
 80030e0:	af0e      	add	r7, sp, #56	; 0x38
	Encoder_t encDC = brd_GetObjEncDC();
 80030e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fa18 	bl	800251c <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_ANGLE);
 80030ec:	463b      	mov	r3, r7
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f937 	bl	8002364 <brd_GetPID>
	pid.u_AboveLimit = 60;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <PID_DC_UntangleWireBLDC+0x90>)
 80030f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	pid.u_BelowLimit = -60;
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <PID_DC_UntangleWireBLDC+0x94>)
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
	float result = PID_Calculate(&pid, 0, encoder_GetPulse(&encDC, MODE_ANGLE));
 80030fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff faf9 	bl	80026fc <encoder_GetPulse>
 800310a:	4602      	mov	r2, r0
 800310c:	463b      	mov	r3, r7
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f007 f982 	bl	800a41c <PID_Calculate>
 8003118:	66f8      	str	r0, [r7, #108]	; 0x6c
	brd_SetPID(pid, PID_DC_ANGLE);
 800311a:	2302      	movs	r3, #2
 800311c:	930d      	str	r3, [sp, #52]	; 0x34
 800311e:	466d      	mov	r5, sp
 8003120:	f107 0410 	add.w	r4, r7, #16
 8003124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	602b      	str	r3, [r5, #0]
 8003134:	463b      	mov	r3, r7
 8003136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003138:	f7ff f8dc 	bl	80022f4 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 800313c:	466d      	mov	r5, sp
 800313e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314a:	e885 0003 	stmia.w	r5, {r0, r1}
 800314e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	f7ff f9c6 	bl	80024e4 <brd_SetObjEncDC>
	PID_DC_CalSpeed(result);
 8003158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800315a:	f7ff fd45 	bl	8002be8 <PID_DC_CalSpeed>
	angopt_Reset();
 800315e:	f7fe ff69 	bl	8002034 <angopt_Reset>
}
 8003162:	bf00      	nop
 8003164:	3770      	adds	r7, #112	; 0x70
 8003166:	46bd      	mov	sp, r7
 8003168:	bdb0      	pop	{r4, r5, r7, pc}
 800316a:	bf00      	nop
 800316c:	42700000 	.word	0x42700000
 8003170:	c2700000 	.word	0xc2700000

08003174 <PID_RegisterErrorCallback>:
	pid.kI = 5;
	brd_SetPID(pid, PID_BLDC_SPEED);
}

void PID_RegisterErrorCallback(void (*pErrorPID)(ErrorPID))
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	pErrPID = pErrorPID;
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <PID_RegisterErrorCallback+0x18>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	200002d0 	.word	0x200002d0

08003190 <sethome_Begin>:
#include "PID_SwerveModule.h"
#include "cmsis_os.h"
SetHomeEvent homeEvent = 0;
float speed = 0;

void sethome_Begin() {
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
	homeEvent = SET_HOME_BEGIN;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <sethome_Begin+0x14>)
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	200002d5 	.word	0x200002d5

080031a8 <homeBeginHandle>:

void homeBeginHandle() {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 80031ac:	2120      	movs	r1, #32
 80031ae:	480e      	ldr	r0, [pc, #56]	; (80031e8 <homeBeginHandle+0x40>)
 80031b0:	f002 fc38 	bl	8005a24 <HAL_GPIO_ReadPin>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <homeBeginHandle+0x2e>
		HAL_Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f001 fa78 	bl	80046b0 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 80031c0:	2120      	movs	r1, #32
 80031c2:	4809      	ldr	r0, [pc, #36]	; (80031e8 <homeBeginHandle+0x40>)
 80031c4:	f002 fc2e 	bl	8005a24 <HAL_GPIO_ReadPin>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <homeBeginHandle+0x3a>
			homeEvent = SET_HOME_COMPLETE;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <homeBeginHandle+0x44>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	701a      	strb	r2, [r3, #0]
		}
	} else {
		speed = TUNE_COARSE_SPEED;
		homeEvent = SET_HOME_TUNE_COARSE;
	}
}
 80031d4:	e005      	b.n	80031e2 <homeBeginHandle+0x3a>
		speed = TUNE_COARSE_SPEED;
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <homeBeginHandle+0x48>)
 80031d8:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <homeBeginHandle+0x4c>)
 80031da:	601a      	str	r2, [r3, #0]
		homeEvent = SET_HOME_TUNE_COARSE;
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <homeBeginHandle+0x44>)
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40010800 	.word	0x40010800
 80031ec:	200002d5 	.word	0x200002d5
 80031f0:	200002d8 	.word	0x200002d8
 80031f4:	41a00000 	.word	0x41a00000

080031f8 <tuneCoarseHandle>:

void tuneCoarseHandle() {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	if (brd_GetCurrentAngleDC() > TUNE_COARSE_ABOVE_DEGREE && speed > 0) {
 80031fc:	f7fe ffa2 	bl	8002144 <brd_GetCurrentAngleDC>
 8003200:	4603      	mov	r3, r0
 8003202:	4925      	ldr	r1, [pc, #148]	; (8003298 <tuneCoarseHandle+0xa0>)
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd ff3b 	bl	8001080 <__aeabi_fcmpgt>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <tuneCoarseHandle+0x3a>
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <tuneCoarseHandle+0xa4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd ff31 	bl	8001080 <__aeabi_fcmpgt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d006      	beq.n	8003232 <tuneCoarseHandle+0x3a>
		speed *= -1;
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <tuneCoarseHandle+0xa4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <tuneCoarseHandle+0xa4>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e019      	b.n	8003266 <tuneCoarseHandle+0x6e>
	} else if (brd_GetCurrentAngleDC() < TUNE_COARSE_BELOW_DEGREE && speed < 0) {
 8003232:	f7fe ff87 	bl	8002144 <brd_GetCurrentAngleDC>
 8003236:	4603      	mov	r3, r0
 8003238:	4919      	ldr	r1, [pc, #100]	; (80032a0 <tuneCoarseHandle+0xa8>)
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd ff02 	bl	8001044 <__aeabi_fcmplt>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00f      	beq.n	8003266 <tuneCoarseHandle+0x6e>
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <tuneCoarseHandle+0xa4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fef8 	bl	8001044 <__aeabi_fcmplt>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <tuneCoarseHandle+0x6e>
		speed *= -1;
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <tuneCoarseHandle+0xa4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <tuneCoarseHandle+0xa4>)
 8003264:	6013      	str	r3, [r2, #0]
	}
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8003266:	2120      	movs	r1, #32
 8003268:	480e      	ldr	r0, [pc, #56]	; (80032a4 <tuneCoarseHandle+0xac>)
 800326a:	f002 fbdb 	bl	8005a24 <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10f      	bne.n	8003294 <tuneCoarseHandle+0x9c>
		osDelay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f004 ffb3 	bl	80081e0 <osDelay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 800327a:	2120      	movs	r1, #32
 800327c:	4809      	ldr	r0, [pc, #36]	; (80032a4 <tuneCoarseHandle+0xac>)
 800327e:	f002 fbd1 	bl	8005a24 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <tuneCoarseHandle+0x9c>
			speed = TUNE_FINE_SPEED;
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <tuneCoarseHandle+0xa4>)
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <tuneCoarseHandle+0xb0>)
 800328c:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_COARSE_SENSOR_DETECT;
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <tuneCoarseHandle+0xb4>)
 8003290:	2203      	movs	r2, #3
 8003292:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	43340000 	.word	0x43340000
 800329c:	200002d8 	.word	0x200002d8
 80032a0:	c3340000 	.word	0xc3340000
 80032a4:	40010800 	.word	0x40010800
 80032a8:	40a00000 	.word	0x40a00000
 80032ac:	200002d5 	.word	0x200002d5

080032b0 <tuneFineHandle>:
void tuneFineHandle() {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	if (brd_GetCurrentAngleDC() > TUNE_FINE_ABOVE_DEGREE && speed > 0) {
 80032b4:	f7fe ff46 	bl	8002144 <brd_GetCurrentAngleDC>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fede 	bl	8001080 <__aeabi_fcmpgt>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <tuneFineHandle+0x3c>
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <tuneFineHandle+0xa4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fed4 	bl	8001080 <__aeabi_fcmpgt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <tuneFineHandle+0x3c>
		speed *= -1;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <tuneFineHandle+0xa4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <tuneFineHandle+0xa4>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e019      	b.n	8003320 <tuneFineHandle+0x70>
	} else if (brd_GetCurrentAngleDC() < TUNE_FINE_BELOW_DEGREE && speed < 0) {
 80032ec:	f7fe ff2a 	bl	8002144 <brd_GetCurrentAngleDC>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4919      	ldr	r1, [pc, #100]	; (8003358 <tuneFineHandle+0xa8>)
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fea5 	bl	8001044 <__aeabi_fcmplt>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00f      	beq.n	8003320 <tuneFineHandle+0x70>
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <tuneFineHandle+0xa4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fe9b 	bl	8001044 <__aeabi_fcmplt>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <tuneFineHandle+0x70>
		speed *= -1;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <tuneFineHandle+0xa4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <tuneFineHandle+0xa4>)
 800331e:	6013      	str	r3, [r2, #0]
	}
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8003320:	2120      	movs	r1, #32
 8003322:	480e      	ldr	r0, [pc, #56]	; (800335c <tuneFineHandle+0xac>)
 8003324:	f002 fb7e 	bl	8005a24 <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d110      	bne.n	8003350 <tuneFineHandle+0xa0>
		HAL_Delay(10);
 800332e:	200a      	movs	r0, #10
 8003330:	f001 f9be 	bl	80046b0 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8003334:	2120      	movs	r1, #32
 8003336:	4809      	ldr	r0, [pc, #36]	; (800335c <tuneFineHandle+0xac>)
 8003338:	f002 fb74 	bl	8005a24 <HAL_GPIO_ReadPin>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <tuneFineHandle+0xa0>
			speed = 0;
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <tuneFineHandle+0xa4>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_FINE_SENSOR_DETECT;
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <tuneFineHandle+0xb0>)
 800334c:	2205      	movs	r2, #5
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200002d8 	.word	0x200002d8
 8003358:	bf800000 	.word	0xbf800000
 800335c:	40010800 	.word	0x40010800
 8003360:	200002d5 	.word	0x200002d5

08003364 <sethome_IsComplete>:

bool sethome_IsComplete()
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
	if (homeEvent == SET_HOME_COMPLETE) return 1;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <sethome_IsComplete+0x1c>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b07      	cmp	r3, #7
 800336e:	d101      	bne.n	8003374 <sethome_IsComplete+0x10>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <sethome_IsComplete+0x12>
	return 0;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200002d5 	.word	0x200002d5

08003384 <sethome_Procedure>:

void sethome_Procedure(void (*pSetHomeCompleteCallback)())
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	switch (homeEvent) {
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <sethome_Procedure+0x70>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	2b06      	cmp	r3, #6
 8003394:	d82a      	bhi.n	80033ec <sethome_Procedure+0x68>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <sethome_Procedure+0x18>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033b9 	.word	0x080033b9
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033c5 	.word	0x080033c5
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033e3 	.word	0x080033e3
 80033b4:	080033eb 	.word	0x080033eb
		case SET_HOME_BEGIN:
			homeBeginHandle();
 80033b8:	f7ff fef6 	bl	80031a8 <homeBeginHandle>
		break;
 80033bc:	e016      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_TUNE_COARSE:
			tuneCoarseHandle();
 80033be:	f7ff ff1b 	bl	80031f8 <tuneCoarseHandle>
		break;
 80033c2:	e013      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_TUNE_COARSE_SENSOR_DETECT:
			brd_ResetState();
 80033c4:	f7ff f80a 	bl	80023dc <brd_ResetState>
			homeEvent = SET_HOME_TUNE_FINE;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <sethome_Procedure+0x70>)
 80033ca:	2204      	movs	r2, #4
 80033cc:	701a      	strb	r2, [r3, #0]
		break;
 80033ce:	e00d      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_TUNE_FINE:
			tuneFineHandle();
 80033d0:	f7ff ff6e 	bl	80032b0 <tuneFineHandle>
		break;
 80033d4:	e00a      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_TUNE_FINE_SENSOR_DETECT:
			brd_ResetState();
 80033d6:	f7ff f801 	bl	80023dc <brd_ResetState>
			homeEvent = SET_HOME_STEADY;
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <sethome_Procedure+0x70>)
 80033dc:	2206      	movs	r2, #6
 80033de:	701a      	strb	r2, [r3, #0]
		break;
 80033e0:	e004      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_STEADY:
			homeEvent = SET_HOME_COMPLETE;
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <sethome_Procedure+0x70>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	701a      	strb	r2, [r3, #0]
		break;
 80033e8:	e000      	b.n	80033ec <sethome_Procedure+0x68>
		case SET_HOME_COMPLETE:
			break;
 80033ea:	bf00      	nop
	}

}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200002d5 	.word	0x200002d5

080033f8 <sethome_GetSpeed>:

float sethome_GetSpeed() {
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	return speed;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <sethome_GetSpeed+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	200002d8 	.word	0x200002d8

0800340c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a06      	ldr	r2, [pc, #24]	; (8003448 <vApplicationGetIdleTaskMemory+0x28>)
 8003430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4a05      	ldr	r2, [pc, #20]	; (800344c <vApplicationGetIdleTaskMemory+0x2c>)
 8003436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	200002dc 	.word	0x200002dc
 800344c:	2000037c 	.word	0x2000037c

08003450 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003458:	2102      	movs	r1, #2
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f001 fd9d 	bl	8004f9a <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO0);
 8003460:	2100      	movs	r1, #0
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe f80e 	bl	8001484 <canctrl_Receive_2>
 8003468:	4603      	mov	r3, r0
 800346a:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskHandleCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	7bf9      	ldrb	r1, [r7, #15]
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	2203      	movs	r2, #3
 8003480:	f006 faca 	bl	8009a18 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
	HAL_GPIO_TogglePin(UserLED_GPIO_Port, UserLED_Pin);
 800349a:	2108      	movs	r1, #8
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800349e:	f002 faf0 	bl	8005a82 <HAL_GPIO_TogglePin>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000096c 	.word	0x2000096c
 80034b0:	e000ed04 	.word	0xe000ed04
 80034b4:	40010c00 	.word	0x40010c00

080034b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80034c0:	2110      	movs	r1, #16
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f001 fd69 	bl	8004f9a <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO1);
 80034c8:	2101      	movs	r1, #1
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd ffda 	bl	8001484 <canctrl_Receive_2>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskHandleCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	7bf9      	ldrb	r1, [r7, #15]
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	2203      	movs	r2, #3
 80034e8:	f006 fa96 	bl	8009a18 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80034f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	f3bf 8f6f 	isb	sy
	HAL_GPIO_TogglePin(UserLED_GPIO_Port, UserLED_Pin);
 8003502:	2108      	movs	r1, #8
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8003506:	f002 fabc 	bl	8005a82 <HAL_GPIO_TogglePin>
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000096c 	.word	0x2000096c
 8003518:	e000ed04 	.word	0xe000ed04
 800351c:	40010c00 	.word	0x40010c00

08003520 <CAN_Init>:

void CAN_Init() {
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan);
 8003526:	4823      	ldr	r0, [pc, #140]	; (80035b4 <CAN_Init+0x94>)
 8003528:	f001 faaa 	bl	8004a80 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING
 800352c:	2116      	movs	r1, #22
 800352e:	4821      	ldr	r0, [pc, #132]	; (80035b4 <CAN_Init+0x94>)
 8003530:	f001 fd0e 	bl	8004f50 <HAL_CAN_ActivateNotification>
			| CAN_IT_RX_FIFO1_MSG_PENDING
			| CAN_IT_RX_FIFO0_FULL);
	uint16_t deviceID = *(__IO uint32_t*) FLASH_ADDR_TARGET << CAN_DEVICE_POS;
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <CAN_Init+0x98>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	80fb      	strh	r3, [r7, #6]
	canctrl_Filter_List16(&hcan,
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f043 0305 	orr.w	r3, r3, #5
 8003544:	b299      	uxth	r1, r3
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	f043 030b 	orr.w	r3, r3, #11
 800354c:	b29a      	uxth	r2, r3
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	f043 0303 	orr.w	r3, r3, #3
 8003554:	b29b      	uxth	r3, r3
 8003556:	2000      	movs	r0, #0
 8003558:	9002      	str	r0, [sp, #8]
 800355a:	2000      	movs	r0, #0
 800355c:	9001      	str	r0, [sp, #4]
 800355e:	2000      	movs	r0, #0
 8003560:	9000      	str	r0, [sp, #0]
 8003562:	4814      	ldr	r0, [pc, #80]	; (80035b4 <CAN_Init+0x94>)
 8003564:	f7fd ffa4 	bl	80014b0 <canctrl_Filter_List16>
			deviceID | CANCTRL_MODE_LED_BLUE,
			deviceID | CANCTRL_MODE_UNTANGLE_WIRE,
			deviceID | CANCTRL_MODE_MOTOR_SPEED_ANGLE,
			0,
			0, CAN_RX_FIFO0);
	canctrl_Filter_List16(&hcan,
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	f043 0309 	orr.w	r3, r3, #9
 800356e:	b299      	uxth	r1, r3
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	b29a      	uxth	r2, r3
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	f043 0307 	orr.w	r3, r3, #7
 800357e:	b29b      	uxth	r3, r3
 8003580:	2000      	movs	r0, #0
 8003582:	9002      	str	r0, [sp, #8]
 8003584:	2001      	movs	r0, #1
 8003586:	9001      	str	r0, [sp, #4]
 8003588:	2000      	movs	r0, #0
 800358a:	9000      	str	r0, [sp, #0]
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <CAN_Init+0x94>)
 800358e:	f7fd ff8f 	bl	80014b0 <canctrl_Filter_List16>
			0,
			1, CAN_RX_FIFO0);
	// chỉ cần Node phát hiện bit này trong Header thì biết đây là remote frame và bộ lọc ngay lập tức nhận
	// sau đó Node tiếp tục phân tích header để xem bản tin đang yêu cầu request thông tin gì
	// trong trường hợp header không thoả mãn filter list (ví dụ bản tin không có kèm theo deviceID)
	canctrl_Filter_Mask16(&hcan,
 8003592:	2300      	movs	r3, #0
 8003594:	9302      	str	r3, [sp, #8]
 8003596:	2302      	movs	r3, #2
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2304      	movs	r3, #4
 80035a0:	2200      	movs	r2, #0
 80035a2:	2104      	movs	r1, #4
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <CAN_Init+0x94>)
 80035a6:	f7fd ffb4 	bl	8001512 <canctrl_Filter_Mask16>
//  if(hcan.Init.Mode == CAN_MODE_LOOPBACK)
	// method 2:
//	if(hcan.Instance->BTR & (CAN_BTR_LBKM))
	// method 3:
//	(CAN1->BTR & (CAN_BTR_LBKM))
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000057c 	.word	0x2000057c
 80035b8:	08010000 	.word	0x08010000

080035bc <can_GetPID_CompleteCallback>:

void can_GetPID_CompleteCallback(CAN_PID canPID, PID_type type) {
 80035bc:	b084      	sub	sp, #16
 80035be:	b5b0      	push	{r4, r5, r7, lr}
 80035c0:	b0a0      	sub	sp, #128	; 0x80
 80035c2:	af0e      	add	r7, sp, #56	; 0x38
 80035c4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80035c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	PID_Param pid = brd_GetPID(type);
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fec5 	bl	8002364 <brd_GetPID>
	canfunc_Convert_CAN_PID_to_PID_Param(canPID, &pid);
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e8:	f7fe f890 	bl	800170c <canfunc_Convert_CAN_PID_to_PID_Param>
	brd_SetPID(pid, type);
 80035ec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80035f0:	930d      	str	r3, [sp, #52]	; 0x34
 80035f2:	466d      	mov	r5, sp
 80035f4:	f107 0414 	add.w	r4, r7, #20
 80035f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800360c:	f7fe fe72 	bl	80022f4 <brd_SetPID>
}
 8003610:	bf00      	nop
 8003612:	3748      	adds	r7, #72	; 0x48
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800361a:	b004      	add	sp, #16
 800361c:	4770      	bx	lr
	...

08003620 <handleFunctionCAN>:

void handleFunctionCAN(CAN_MODE_ID mode) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	3b01      	subs	r3, #1
 800362e:	2b0a      	cmp	r3, #10
 8003630:	d860      	bhi.n	80036f4 <handleFunctionCAN+0xd4>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <handleFunctionCAN+0x18>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	080036f5 	.word	0x080036f5
 800363c:	080036f5 	.word	0x080036f5
 8003640:	080036af 	.word	0x080036af
 8003644:	080036f5 	.word	0x080036f5
 8003648:	080036f5 	.word	0x080036f5
 800364c:	08003665 	.word	0x08003665
 8003650:	080036d3 	.word	0x080036d3
 8003654:	080036d3 	.word	0x080036d3
 8003658:	080036d3 	.word	0x080036d3
 800365c:	08003693 	.word	0x08003693
 8003660:	080036db 	.word	0x080036db
		case CANCTRL_MODE_SET_HOME:
			break;
		case CANCTRL_MODE_MOTOR_BLDC_BRAKE:
			if (canfunc_GetBoolValue()) {
 8003664:	f7fd ffb6 	bl	80015d4 <canfunc_GetBoolValue>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <handleFunctionCAN+0x60>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 800366e:	213c      	movs	r1, #60	; 0x3c
 8003670:	4823      	ldr	r0, [pc, #140]	; (8003700 <handleFunctionCAN+0xe0>)
 8003672:	f003 f92b 	bl	80068cc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8003676:	213c      	movs	r1, #60	; 0x3c
 8003678:	4822      	ldr	r0, [pc, #136]	; (8003704 <handleFunctionCAN+0xe4>)
 800367a:	f003 f927 	bl	80068cc <HAL_TIM_Encoder_Stop>
			}
			else {
				HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
				HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
			}
			break;
 800367e:	e03a      	b.n	80036f6 <handleFunctionCAN+0xd6>
				HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003680:	213c      	movs	r1, #60	; 0x3c
 8003682:	481f      	ldr	r0, [pc, #124]	; (8003700 <handleFunctionCAN+0xe0>)
 8003684:	f003 f894 	bl	80067b0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003688:	213c      	movs	r1, #60	; 0x3c
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <handleFunctionCAN+0xe4>)
 800368c:	f003 f890 	bl	80067b0 <HAL_TIM_Encoder_Start>
			break;
 8003690:	e031      	b.n	80036f6 <handleFunctionCAN+0xd6>
		case CANCTRL_MODE_PID_BLDC_BREAKPROTECTION:
			uint8_t Break = canfunc_GetBoolValue();
 8003692:	f7fd ff9f 	bl	80015d4 <canfunc_GetBoolValue>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]
			PID_BLDC_BreakProtection(Break);
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fcde 	bl	8003068 <PID_BLDC_BreakProtection>
		case CANCTRL_MODE_TEST:
			//			TestMode = canfunc_GetBoolValue();
			break;
 80036ac:	e023      	b.n	80036f6 <handleFunctionCAN+0xd6>
		case CANCTRL_MODE_LED_BLUE:
			break;
		case CANCTRL_MODE_MOTOR_SPEED_ANGLE:
			CAN_SpeedBLDC_AngleDC speedAngle;
			speedAngle = canfunc_MotorGetSpeedAndAngle();
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd ffd3 	bl	800165e <canfunc_MotorGetSpeedAndAngle>
			brd_SetTargetAngleDC(speedAngle.dcAngle);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe feec 	bl	8002498 <brd_SetTargetAngleDC>
			brd_SetTargetSpeedBLDC(speedAngle.bldcSpeed);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd facc 	bl	8000c60 <__aeabi_i2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fef2 	bl	80024b4 <brd_SetTargetSpeedBLDC>
			break;
 80036d0:	e011      	b.n	80036f6 <handleFunctionCAN+0xd6>
		case CANCTRL_MODE_PID_DC_SPEED:
			case CANCTRL_MODE_PID_DC_ANGLE:
			case CANCTRL_MODE_PID_BLDC_SPEED:
			canfunc_GetPID(&can_GetPID_CompleteCallback);
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <handleFunctionCAN+0xe8>)
 80036d4:	f7fe f848 	bl	8001768 <canfunc_GetPID>
			break;
 80036d8:	e00d      	b.n	80036f6 <handleFunctionCAN+0xd6>
		case CANCTRL_MODE_UNTANGLE_WIRE:
			if (canfunc_GetBoolValue())
 80036da:	f7fd ff7b 	bl	80015d4 <canfunc_GetBoolValue>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <handleFunctionCAN+0xcc>
				untangleBLDC = 1;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <handleFunctionCAN+0xec>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
			else
				untangleBLDC = 0;
			break;
 80036ea:	e004      	b.n	80036f6 <handleFunctionCAN+0xd6>
				untangleBLDC = 0;
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <handleFunctionCAN+0xec>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
			break;
 80036f2:	e000      	b.n	80036f6 <handleFunctionCAN+0xd6>
		default:
			break;
 80036f4:	bf00      	nop
	}
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200005ec 	.word	0x200005ec
 8003704:	20000634 	.word	0x20000634
 8003708:	080035bd 	.word	0x080035bd
 800370c:	20000c1d 	.word	0x20000c1d

08003710 <handle_CAN_RTR_Response>:

void handle_CAN_RTR_Response(CAN_HandleTypeDef *can, CAN_MODE_ID modeID) {
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b0b6      	sub	sp, #216	; 0xd8
 8003714:	af10      	add	r7, sp, #64	; 0x40
 8003716:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003718:	460b      	mov	r3, r1
 800371a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	PID_Param pid;
	switch (modeID) {
 800371e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003722:	3b01      	subs	r3, #1
 8003724:	2b08      	cmp	r3, #8
 8003726:	f200 8081 	bhi.w	800382c <handle_CAN_RTR_Response+0x11c>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <handle_CAN_RTR_Response+0x20>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003755 	.word	0x08003755
 8003734:	0800382d 	.word	0x0800382d
 8003738:	0800382d 	.word	0x0800382d
 800373c:	0800382d 	.word	0x0800382d
 8003740:	0800382d 	.word	0x0800382d
 8003744:	0800382d 	.word	0x0800382d
 8003748:	080037e9 	.word	0x080037e9
 800374c:	080037a5 	.word	0x080037a5
 8003750:	0800376d 	.word	0x0800376d
		case CANCTRL_MODE_SET_HOME:
			bool setHomeValue = 1;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			xQueueSend(qHome, (void* )&setHomeValue, 1/portTICK_PERIOD_MS);
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <handle_CAN_RTR_Response+0x128>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8003762:	2300      	movs	r3, #0
 8003764:	2201      	movs	r2, #1
 8003766:	f004 ff63 	bl	8008630 <xQueueGenericSend>
			break;
 800376a:	e060      	b.n	800382e <handle_CAN_RTR_Response+0x11e>
		case CANCTRL_MODE_PID_BLDC_SPEED:
			pid = brd_GetPID(PID_BLDC_SPEED);
 800376c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003770:	2103      	movs	r1, #3
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fdf6 	bl	8002364 <brd_GetPID>
			canfunc_RTR_PID(can, pid, PID_BLDC_SPEED);
 8003778:	2303      	movs	r3, #3
 800377a:	930e      	str	r3, [sp, #56]	; 0x38
 800377c:	466d      	mov	r5, sp
 800377e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003792:	e885 0003 	stmia.w	r5, {r0, r1}
 8003796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800379a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800379c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800379e:	f7fd fee5 	bl	800156c <canfunc_RTR_PID>
			break;
 80037a2:	e044      	b.n	800382e <handle_CAN_RTR_Response+0x11e>
		case CANCTRL_MODE_PID_DC_ANGLE:
			pid = brd_GetPID(PID_DC_ANGLE);
 80037a4:	463b      	mov	r3, r7
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fddb 	bl	8002364 <brd_GetPID>
 80037ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037b2:	4639      	mov	r1, r7
 80037b4:	2244      	movs	r2, #68	; 0x44
 80037b6:	4618      	mov	r0, r3
 80037b8:	f006 ff9c 	bl	800a6f4 <memcpy>
			canfunc_RTR_PID(can, pid, PID_DC_ANGLE);
 80037bc:	2302      	movs	r3, #2
 80037be:	930e      	str	r3, [sp, #56]	; 0x38
 80037c0:	466d      	mov	r5, sp
 80037c2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80037c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037e2:	f7fd fec3 	bl	800156c <canfunc_RTR_PID>
			break;
 80037e6:	e022      	b.n	800382e <handle_CAN_RTR_Response+0x11e>
		case CANCTRL_MODE_PID_DC_SPEED:
			pid = brd_GetPID(PID_DC_SPEED);
 80037e8:	463b      	mov	r3, r7
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fdb9 	bl	8002364 <brd_GetPID>
 80037f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037f6:	4639      	mov	r1, r7
 80037f8:	2244      	movs	r2, #68	; 0x44
 80037fa:	4618      	mov	r0, r3
 80037fc:	f006 ff7a 	bl	800a6f4 <memcpy>
			canfunc_RTR_PID(can, pid, PID_DC_SPEED);
 8003800:	2301      	movs	r3, #1
 8003802:	930e      	str	r3, [sp, #56]	; 0x38
 8003804:	466d      	mov	r5, sp
 8003806:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800380a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381a:	e885 0003 	stmia.w	r5, {r0, r1}
 800381e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003824:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003826:	f7fd fea1 	bl	800156c <canfunc_RTR_PID>
			break;
 800382a:	e000      	b.n	800382e <handle_CAN_RTR_Response+0x11e>
		default:
			break;
 800382c:	bf00      	nop
	}
}
 800382e:	bf00      	nop
 8003830:	3798      	adds	r7, #152	; 0x98
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	bf00      	nop
 8003838:	20000c18 	.word	0x20000c18

0800383c <SetHomeCompleteCallback>:

void SetHomeCompleteCallback() {
 800383c:	b5b0      	push	{r4, r5, r7, lr}
 800383e:	b090      	sub	sp, #64	; 0x40
 8003840:	af06      	add	r7, sp, #24
	Encoder_t encDC = brd_GetObjEncDC();
 8003842:	463b      	mov	r3, r7
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fe69 	bl	800251c <brd_GetObjEncDC>
	encoder_ResetCount(&encDC);
 800384a:	463b      	mov	r3, r7
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe ffb3 	bl	80027b8 <encoder_ResetCount>
	brd_SetObjEncDC(encDC);
 8003852:	466d      	mov	r5, sp
 8003854:	f107 0410 	add.w	r4, r7, #16
 8003858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003860:	e885 0003 	stmia.w	r5, {r0, r1}
 8003864:	463b      	mov	r3, r7
 8003866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003868:	f7fe fe3c 	bl	80024e4 <brd_SetObjEncDC>
	canfunc_SetBoolValue(1, CANCTRL_MODE_SET_HOME);
 800386c:	2101      	movs	r1, #1
 800386e:	2001      	movs	r0, #1
 8003870:	f7fd fec8 	bl	8001604 <canfunc_SetBoolValue>
	canctrl_Send(&hcan, *(__IO uint32_t*) FLASH_ADDR_TARGET);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <SetHomeCompleteCallback+0x50>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	4804      	ldr	r0, [pc, #16]	; (8003890 <SetHomeCompleteCallback+0x54>)
 800387e:	f7fd fdc1 	bl	8001404 <canctrl_Send>
}
 8003882:	bf00      	nop
 8003884:	3728      	adds	r7, #40	; 0x28
 8003886:	46bd      	mov	sp, r7
 8003888:	bdb0      	pop	{r4, r5, r7, pc}
 800388a:	bf00      	nop
 800388c:	08010000 	.word	0x08010000
 8003890:	2000057c 	.word	0x2000057c

08003894 <HAL_CAN_ErrorCallback>:
		while (1);
	}
	HAL_FLASH_Lock();
}
///////////////////////////////////////// Error Handler //////////////////////////////////////////
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	while (1);
 800389c:	e7fe      	b.n	800389c <HAL_CAN_ErrorCallback+0x8>
	...

080038a0 <HAL_UART_ErrorCallback>:
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_UART_ErrorCallback+0x60>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d122      	bne.n	80038f8 <HAL_UART_ErrorCallback+0x58>
		__HAL_UART_DISABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c0:	60da      	str	r2, [r3, #12]
		__HAL_UART_CLEAR_OREFLAG(huart);
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
		errorCountUART++;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_UART_ErrorCallback+0x64>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_UART_ErrorCallback+0x64>)
 80038e2:	801a      	strh	r2, [r3, #0]
		appintf_Reset();
 80038e4:	f7fe f80e 	bl	8001904 <appintf_Reset>
		__HAL_UART_ENABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f6:	60da      	str	r2, [r3, #12]
	}
//	while (1);
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40013800 	.word	0x40013800
 8003904:	20000c1e 	.word	0x20000c1e

08003908 <PID_ErrorHandler>:

void PID_ErrorHandler(ErrorPID errPID){
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	canfunc_SetBoolValue(1, CANCTRL_MODE_ROBOT_ERROR);
 8003912:	2104      	movs	r1, #4
 8003914:	2001      	movs	r0, #1
 8003916:	f7fd fe75 	bl	8001604 <canfunc_SetBoolValue>
	canctrl_Send(&hcan, *(__IO uint32_t*) FLASH_ADDR_TARGET);
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <PID_ErrorHandler+0x28>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	4804      	ldr	r0, [pc, #16]	; (8003934 <PID_ErrorHandler+0x2c>)
 8003924:	f7fd fd6e 	bl	8001404 <canctrl_Send>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	08010000 	.word	0x08010000
 8003934:	2000057c 	.word	0x2000057c

08003938 <HAL_CAN_RxFifo0FullCallback>:
///////////////////////////////////////// Error Handler //////////////////////////////////////////
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	__NOP();
 8003940:	bf00      	nop
//	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	appintf_ReceiveDataInterrupt(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd ff5d 	bl	8001814 <appintf_ReceiveDataInterrupt>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003964:	b5b0      	push	{r4, r5, r7, lr}
 8003966:	b09a      	sub	sp, #104	; 0x68
 8003968:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800396a:	f000 fe6f 	bl	800464c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800396e:	f000 f88b 	bl	8003a88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003972:	f000 fa45 	bl	8003e00 <MX_GPIO_Init>
	MX_CAN_Init();
 8003976:	f000 f8cd 	bl	8003b14 <MX_CAN_Init>
	MX_TIM3_Init();
 800397a:	f000 f96f 	bl	8003c5c <MX_TIM3_Init>
	MX_TIM4_Init();
 800397e:	f000 f9c1 	bl	8003d04 <MX_TIM4_Init>
	MX_TIM2_Init();
 8003982:	f000 f8fd 	bl	8003b80 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003986:	f000 fa11 	bl	8003dac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	brd_Init();
 800398a:	f7fe fbe7 	bl	800215c <brd_Init>
	qPID = xQueueCreate(2, sizeof(float));
 800398e:	2200      	movs	r2, #0
 8003990:	2104      	movs	r1, #4
 8003992:	2002      	movs	r0, #2
 8003994:	f004 fdef 	bl	8008576 <xQueueGenericCreate>
 8003998:	4603      	mov	r3, r0
 800399a:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <main+0xf0>)
 800399c:	6013      	str	r3, [r2, #0]
	qHome = xQueueCreate(1, sizeof(bool));
 800399e:	2200      	movs	r2, #0
 80039a0:	2101      	movs	r1, #1
 80039a2:	2001      	movs	r0, #1
 80039a4:	f004 fde7 	bl	8008576 <xQueueGenericCreate>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <main+0xf4>)
 80039ac:	6013      	str	r3, [r2, #0]

	HAL_UART_Transmit(&huart1, (uint8_t*) "Hello World", strlen("Hello World"), HAL_MAX_DELAY);
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	220b      	movs	r2, #11
 80039b4:	4929      	ldr	r1, [pc, #164]	; (8003a5c <main+0xf8>)
 80039b6:	482a      	ldr	r0, [pc, #168]	; (8003a60 <main+0xfc>)
 80039b8:	f003 fd8a 	bl	80074d0 <HAL_UART_Transmit>
	PID_RegisterErrorCallback(&PID_ErrorHandler);
 80039bc:	4829      	ldr	r0, [pc, #164]	; (8003a64 <main+0x100>)
 80039be:	f7ff fbd9 	bl	8003174 <PID_RegisterErrorCallback>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of qCAN */
	osMessageQDef(qCAN, 5, uint16_t);
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <main+0x104>)
 80039c4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80039c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	qCANHandle = osMessageCreate(osMessageQ(qCAN), NULL);
 80039ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fc17 	bl	8008208 <osMessageCreate>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <main+0x108>)
 80039de:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <main+0x10c>)
 80039e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80039e6:	461d      	mov	r5, r3
 80039e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80039f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fba4 	bl	8008148 <osThreadCreate>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <main+0x110>)
 8003a04:	6013      	str	r3, [r2, #0]

	/* definition and creation of TaskCalcPID */
	osThreadStaticDef(TaskCalcPID, StartTaskPID, osPriorityNormal, 0, 128, TaskCalcPIDBuffer, &TaskCalcPIDControlBlock);
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <main+0x114>)
 8003a08:	f107 0420 	add.w	r4, r7, #32
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskCalcPIDHandle = osThreadCreate(osThread(TaskCalcPID), NULL);
 8003a1a:	f107 0320 	add.w	r3, r7, #32
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 fb91 	bl	8008148 <osThreadCreate>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <main+0x118>)
 8003a2a:	6013      	str	r3, [r2, #0]

	/* definition and creation of TaskHandleCAN */
	osThreadStaticDef(TaskHandleCAN, StartCANbus, osPriorityAboveNormal, 0, 128, TaskHandleCANBuffer, &TaskHandleCANControlBlock);
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <main+0x11c>)
 8003a2e:	1d3c      	adds	r4, r7, #4
 8003a30:	461d      	mov	r5, r3
 8003a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskHandleCANHandle = osThreadCreate(osThread(TaskHandleCAN), NULL);
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fb80 	bl	8008148 <osThreadCreate>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <main+0x120>)
 8003a4c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8003a4e:	f004 fb74 	bl	800813a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a52:	e7fe      	b.n	8003a52 <main+0xee>
 8003a54:	20000c14 	.word	0x20000c14
 8003a58:	20000c18 	.word	0x20000c18
 8003a5c:	0800b840 	.word	0x0800b840
 8003a60:	2000067c 	.word	0x2000067c
 8003a64:	08003909 	.word	0x08003909
 8003a68:	0800b84c 	.word	0x0800b84c
 8003a6c:	20000c10 	.word	0x20000c10
 8003a70:	0800b868 	.word	0x0800b868
 8003a74:	200006c4 	.word	0x200006c4
 8003a78:	0800b890 	.word	0x0800b890
 8003a7c:	200006c8 	.word	0x200006c8
 8003a80:	0800b8bc 	.word	0x0800b8bc
 8003a84:	2000096c 	.word	0x2000096c

08003a88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b090      	sub	sp, #64	; 0x40
 8003a8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a8e:	f107 0318 	add.w	r3, r7, #24
 8003a92:	2228      	movs	r2, #40	; 0x28
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f006 fda8 	bl	800a5ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abc:	2302      	movs	r3, #2
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ac6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003acc:	f107 0318 	add.w	r3, r7, #24
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 ffef 	bl	8005ab4 <HAL_RCC_OscConfig>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <SystemClock_Config+0x58>
			{
		Error_Handler();
 8003adc:	f000 fb22 	bl	8004124 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f002 fa5c 	bl	8005fb8 <HAL_RCC_ClockConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SystemClock_Config+0x82>
			{
		Error_Handler();
 8003b06:	f000 fb0d 	bl	8004124 <Error_Handler>
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	3740      	adds	r7, #64	; 0x40
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <MX_CAN_Init+0x68>)
 8003b1c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 9;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b20:	2209      	movs	r2, #9
 8003b22:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b36:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_CAN_Init+0x64>)
 8003b64:	f000 fdc8 	bl	80046f8 <HAL_CAN_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_CAN_Init+0x5e>
			{
		Error_Handler();
 8003b6e:	f000 fad9 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000057c 	.word	0x2000057c
 8003b7c:	40006400 	.word	0x40006400

08003b80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b86:	f107 0320 	add.w	r3, r7, #32
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	611a      	str	r2, [r3, #16]
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003ba4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ba8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6;
 8003baa:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bac:	2206      	movs	r2, #6
 8003bae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bbc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bca:	4823      	ldr	r0, [pc, #140]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bcc:	f002 fc5c 	bl	8006488 <HAL_TIM_PWM_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM2_Init+0x5a>
			{
		Error_Handler();
 8003bd6:	f000 faa5 	bl	8004124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	4619      	mov	r1, r3
 8003be8:	481b      	ldr	r0, [pc, #108]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003bea:	f003 fbb1 	bl	8007350 <HAL_TIMEx_MasterConfigSynchronization>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM2_Init+0x78>
			{
		Error_Handler();
 8003bf4:	f000 fa96 	bl	8004124 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bf8:	2360      	movs	r3, #96	; 0x60
 8003bfa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4812      	ldr	r0, [pc, #72]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003c10:	f003 f8aa 	bl	8006d68 <HAL_TIM_PWM_ConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM2_Init+0x9e>
			{
		Error_Handler();
 8003c1a:	f000 fa83 	bl	8004124 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	2208      	movs	r2, #8
 8003c22:	4619      	mov	r1, r3
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003c26:	f003 f89f 	bl	8006d68 <HAL_TIM_PWM_ConfigChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM2_Init+0xb4>
			{
		Error_Handler();
 8003c30:	f000 fa78 	bl	8004124 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	220c      	movs	r2, #12
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4807      	ldr	r0, [pc, #28]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003c3c:	f003 f894 	bl	8006d68 <HAL_TIM_PWM_ConfigChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM2_Init+0xca>
			{
		Error_Handler();
 8003c46:	f000 fa6d 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <MX_TIM2_Init+0xd8>)
 8003c4c:	f000 fb94 	bl	8004378 <HAL_TIM_MspPostInit>

}
 8003c50:	bf00      	nop
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200005a4 	.word	0x200005a4

08003c5c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f006 fcbe 	bl	800a5ec <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <MX_TIM3_Init+0xa4>)
 8003c7c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c90:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	480c      	ldr	r0, [pc, #48]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003cca:	f002 fccf 	bl	800666c <HAL_TIM_Encoder_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8003cd4:	f000 fa26 	bl	8004124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4805      	ldr	r0, [pc, #20]	; (8003cfc <MX_TIM3_Init+0xa0>)
 8003ce6:	f003 fb33 	bl	8007350 <HAL_TIMEx_MasterConfigSynchronization>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8003cf0:	f000 fa18 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	3730      	adds	r7, #48	; 0x30
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200005ec 	.word	0x200005ec
 8003d00:	40000400 	.word	0x40000400

08003d04 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f006 fc6a 	bl	800a5ec <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003d20:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d22:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <MX_TIM4_Init+0xa4>)
 8003d24:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d38:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d40:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d46:	2303      	movs	r3, #3
 8003d48:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003d6a:	f107 030c 	add.w	r3, r7, #12
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480c      	ldr	r0, [pc, #48]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d72:	f002 fc7b 	bl	800666c <HAL_TIM_Encoder_Init>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8003d7c:	f000 f9d2 	bl	8004124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d80:	2300      	movs	r3, #0
 8003d82:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4805      	ldr	r0, [pc, #20]	; (8003da4 <MX_TIM4_Init+0xa0>)
 8003d8e:	f003 fadf 	bl	8007350 <HAL_TIMEx_MasterConfigSynchronization>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8003d98:	f000 f9c4 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003d9c:	bf00      	nop
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000634 	.word	0x20000634
 8003da8:	40000800 	.word	0x40000800

08003dac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <MX_USART1_UART_Init+0x50>)
 8003db4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dbc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003de2:	4805      	ldr	r0, [pc, #20]	; (8003df8 <MX_USART1_UART_Init+0x4c>)
 8003de4:	f003 fb24 	bl	8007430 <HAL_UART_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_USART1_UART_Init+0x46>
			{
		Error_Handler();
 8003dee:	f000 f999 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	2000067c 	.word	0x2000067c
 8003dfc:	40013800 	.word	0x40013800

08003e00 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003e06:	f107 0310 	add.w	r3, r7, #16
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e1a:	f043 0320 	orr.w	r3, r3, #32
 8003e1e:	6193      	str	r3, [r2, #24]
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6193      	str	r3, [r2, #24]
 8003e38:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6193      	str	r3, [r2, #24]
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <MX_GPIO_Init+0xc8>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BLDC_DIR_Pin | BLDC_BRAKE_Pin, GPIO_PIN_RESET);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2111      	movs	r1, #17
 8003e60:	481a      	ldr	r0, [pc, #104]	; (8003ecc <MX_GPIO_Init+0xcc>)
 8003e62:	f001 fdf6 	bl	8005a52 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2108      	movs	r1, #8
 8003e6a:	4819      	ldr	r0, [pc, #100]	; (8003ed0 <MX_GPIO_Init+0xd0>)
 8003e6c:	f001 fdf1 	bl	8005a52 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BLDC_DIR_Pin BLDC_BRAKE_Pin */
	GPIO_InitStruct.Pin = BLDC_DIR_Pin | BLDC_BRAKE_Pin;
 8003e70:	2311      	movs	r3, #17
 8003e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	f107 0310 	add.w	r3, r7, #16
 8003e84:	4619      	mov	r1, r3
 8003e86:	4811      	ldr	r0, [pc, #68]	; (8003ecc <MX_GPIO_Init+0xcc>)
 8003e88:	f001 fc48 	bl	800571c <HAL_GPIO_Init>

	/*Configure GPIO pin : Sensor_Home_Pin */
	GPIO_InitStruct.Pin = Sensor_Home_Pin;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Sensor_Home_GPIO_Port, &GPIO_InitStruct);
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	480b      	ldr	r0, [pc, #44]	; (8003ecc <MX_GPIO_Init+0xcc>)
 8003ea0:	f001 fc3c 	bl	800571c <HAL_GPIO_Init>

	/*Configure GPIO pin : UserLED_Pin */
	GPIO_InitStruct.Pin = UserLED_Pin;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(UserLED_GPIO_Port, &GPIO_InitStruct);
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <MX_GPIO_Init+0xd0>)
 8003ebc:	f001 fc2e 	bl	800571c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003ec0:	bf00      	nop
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40010800 	.word	0x40010800
 8003ed0:	40010c00 	.word	0x40010c00

08003ed4 <SethomeHandle>:

/* USER CODE BEGIN 4 */

void SethomeHandle() {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
	if (xQueueReceive(qHome, (void*) &IsSetHome, 1 / portTICK_PERIOD_MS) == pdTRUE) {
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <SethomeHandle+0x2c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <SethomeHandle+0x30>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fca3 	bl	800882c <xQueueReceive>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <SethomeHandle+0x28>
		brd_SetTargetAngleDC(0);
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f7fe fad2 	bl	8002498 <brd_SetTargetAngleDC>
		brd_SetTargetSpeedBLDC(0);
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f7fe fadc 	bl	80024b4 <brd_SetTargetSpeedBLDC>
	}
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000c18 	.word	0x20000c18
 8003f04:	20000c1c 	.word	0x20000c1c

08003f08 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	SET_HOME_DEFAULT_TASK:
	sethome_Begin();
 8003f10:	f7ff f93e 	bl	8003190 <sethome_Begin>
	while (!sethome_IsComplete()) {
 8003f14:	e010      	b.n	8003f38 <StartDefaultTask+0x30>
		sethome_Procedure();
 8003f16:	f7ff fa35 	bl	8003384 <sethome_Procedure>
		float speed = sethome_GetSpeed();
 8003f1a:	f7ff fa6d 	bl	80033f8 <sethome_GetSpeed>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	60fb      	str	r3, [r7, #12]
		xQueueSend(qPID, (const void* )&speed, 10/portTICK_PERIOD_MS);
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <StartDefaultTask+0x68>)
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	f107 010c 	add.w	r1, r7, #12
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	f004 fb7f 	bl	8008630 <xQueueGenericSend>
		osDelay(1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f004 f954 	bl	80081e0 <osDelay>
	while (!sethome_IsComplete()) {
 8003f38:	f7ff fa14 	bl	8003364 <sethome_IsComplete>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f083 0301 	eor.w	r3, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e6      	bne.n	8003f16 <StartDefaultTask+0xe>
	}
	SetHomeCompleteCallback();
 8003f48:	f7ff fc78 	bl	800383c <SetHomeCompleteCallback>
	IsSetHome = 0;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <StartDefaultTask+0x6c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */

	for (;;) {
		SethomeHandle();
 8003f52:	f7ff ffbf 	bl	8003ed4 <SethomeHandle>
		if (IsSetHome) {
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <StartDefaultTask+0x6c>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <StartDefaultTask+0x5e>
			osDelay(1);
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f004 f93e 	bl	80081e0 <osDelay>
			goto SET_HOME_DEFAULT_TASK;
 8003f64:	e7d4      	b.n	8003f10 <StartDefaultTask+0x8>
		}
		osDelay(1);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f004 f93a 	bl	80081e0 <osDelay>
		SethomeHandle();
 8003f6c:	e7f1      	b.n	8003f52 <StartDefaultTask+0x4a>
 8003f6e:	bf00      	nop
 8003f70:	20000c14 	.word	0x20000c14
 8003f74:	20000c1c 	.word	0x20000c1c

08003f78 <StartTaskPID>:
float EncoderAngle = 0;
float TestSpeed,TestAngle;
int direct;
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const *argument)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskPID */
	SET_HOME_PID_TASK:
	PID_BLDC_BreakProtection(1);
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7ff f871 	bl	8003068 <PID_BLDC_BreakProtection>
	osDelay(1000);
 8003f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f8a:	f004 f929 	bl	80081e0 <osDelay>
	PID_BLDC_BreakProtection(0);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f7ff f86a 	bl	8003068 <PID_BLDC_BreakProtection>
	/*
	 * The sethome PID DC speed is controlled by message queue speed qPID from default task in set home mode
	 */
	float TargetValue = 0;
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
	while (!sethome_IsComplete()) {
 8003f9a:	e00e      	b.n	8003fba <StartTaskPID+0x42>
		xQueueReceive(qPID, &TargetValue, 0);
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <StartTaskPID+0xfc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f107 010c 	add.w	r1, r7, #12
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fc40 	bl	800882c <xQueueReceive>
		PID_DC_CalSpeed((float) TargetValue);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fe1a 	bl	8002be8 <PID_DC_CalSpeed>
		osDelay(5);
 8003fb4:	2005      	movs	r0, #5
 8003fb6:	f004 f913 	bl	80081e0 <osDelay>
	while (!sethome_IsComplete()) {
 8003fba:	f7ff f9d3 	bl	8003364 <sethome_IsComplete>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e8      	bne.n	8003f9c <StartTaskPID+0x24>
	}
	/* Infinite loop */
	for (;;) {
		if (IsSetHome)
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <StartTaskPID+0x100>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d000      	beq.n	8003fd4 <StartTaskPID+0x5c>
			goto SET_HOME_PID_TASK;
 8003fd2:	e7d5      	b.n	8003f80 <StartTaskPID+0x8>
		if (DC_IsEnablePID)
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <StartTaskPID+0x104>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d016      	beq.n	800400a <StartTaskPID+0x92>
		{
			if (untangleBLDC == true){
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <StartTaskPID+0x108>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <StartTaskPID+0x72>
				PID_DC_UntangleWireBLDC();
 8003fe4:	f7ff f87a 	bl	80030dc <PID_DC_UntangleWireBLDC>
 8003fe8:	e00f      	b.n	800400a <StartTaskPID+0x92>
			}else{
				TestAngle = brd_GetTargetAngleDC();
 8003fea:	f7fe fa4b 	bl	8002484 <brd_GetTargetAngleDC>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <StartTaskPID+0x10c>)
 8003ff2:	6013      	str	r3, [r2, #0]
//				float rawAngle = TestAngle;
				angopt_Cal(TestAngle);
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <StartTaskPID+0x10c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd feed 	bl	8001dd8 <angopt_Cal>

				PID_DC_CalPos(angopt_GetOptAngle());
 8003ffe:	f7fe f80f 	bl	8002020 <angopt_GetOptAngle>
 8004002:	4603      	mov	r3, r0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe febf 	bl	8002d88 <PID_DC_CalPos>
			}
		}
//			PID_DC_CalPos(TestAngle);
		if (BLDC_IsEnablePID) {
 800400a:	4b1f      	ldr	r3, [pc, #124]	; (8004088 <StartTaskPID+0x110>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d027      	beq.n	8004062 <StartTaskPID+0xea>
			if (untangleBLDC == true)
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <StartTaskPID+0x108>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <StartTaskPID+0xac>
				PID_BLDC_CalSpeed(0);
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f7fe feff 	bl	8002e20 <PID_BLDC_CalSpeed>
 8004022:	e023      	b.n	800406c <StartTaskPID+0xf4>
			else{
				direct = angopt_QuadRantCheckOutput2(brd_GetTargetAngleDC(),angopt_GetOptAngle());
 8004024:	f7fe fa2e 	bl	8002484 <brd_GetTargetAngleDC>
 8004028:	4604      	mov	r4, r0
 800402a:	f7fd fff9 	bl	8002020 <angopt_GetOptAngle>
 800402e:	4603      	mov	r3, r0
 8004030:	4619      	mov	r1, r3
 8004032:	4620      	mov	r0, r4
 8004034:	f7fd fe1c 	bl	8001c70 <angopt_QuadRantCheckOutput2>
 8004038:	4603      	mov	r3, r0
 800403a:	4a14      	ldr	r2, [pc, #80]	; (800408c <StartTaskPID+0x114>)
 800403c:	6013      	str	r3, [r2, #0]
				PID_BLDC_CalSpeed(direct*brd_GetTargetSpeedBLDC());
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <StartTaskPID+0x114>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fe0c 	bl	8000c60 <__aeabi_i2f>
 8004048:	4604      	mov	r4, r0
 800404a:	f7fe fa41 	bl	80024d0 <brd_GetTargetSpeedBLDC>
 800404e:	4603      	mov	r3, r0
 8004050:	4619      	mov	r1, r3
 8004052:	4620      	mov	r0, r4
 8004054:	f7fc fe58 	bl	8000d08 <__aeabi_fmul>
 8004058:	4603      	mov	r3, r0
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fee0 	bl	8002e20 <PID_BLDC_CalSpeed>
 8004060:	e004      	b.n	800406c <StartTaskPID+0xf4>
//				int direct = angopt_QuadRantCheckOutput2(TestAngle,angopt_GetOptAngle());
//				PID_BLDC_CalSpeed(direct*TestSpeed);
			}

		}else{
			HAL_GPIO_WritePin(BLDC_BRAKE_GPIO_Port, BLDC_BRAKE_Pin, GPIO_PIN_RESET);
 8004062:	2200      	movs	r2, #0
 8004064:	2110      	movs	r1, #16
 8004066:	480a      	ldr	r0, [pc, #40]	; (8004090 <StartTaskPID+0x118>)
 8004068:	f001 fcf3 	bl	8005a52 <HAL_GPIO_WritePin>
		}
		osDelay(5);
 800406c:	2005      	movs	r0, #5
 800406e:	f004 f8b7 	bl	80081e0 <osDelay>
		if (IsSetHome)
 8004072:	e7aa      	b.n	8003fca <StartTaskPID+0x52>
 8004074:	20000c14 	.word	0x20000c14
 8004078:	20000c1c 	.word	0x20000c1c
 800407c:	20000001 	.word	0x20000001
 8004080:	20000c1d 	.word	0x20000c1d
 8004084:	20000c20 	.word	0x20000c20
 8004088:	20000000 	.word	0x20000000
 800408c:	20000c24 	.word	0x20000c24
 8004090:	40010800 	.word	0x40010800

08004094 <StartCANbus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCANbus */
void StartCANbus(void const *argument)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCANbus */
	CAN_Init();
 800409c:	f7ff fa40 	bl	8003520 <CAN_Init>
	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80040a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	2100      	movs	r1, #0
 80040aa:	2000      	movs	r0, #0
 80040ac:	f005 fc54 	bl	8009958 <xTaskNotifyWait>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f4      	beq.n	80040a0 <StartCANbus+0xc>
			CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd f82c 	bl	8001118 <canctrl_GetRxHeader>
			if (((rxHeader.StdId >> CAN_DEVICE_POS) == *(__IO uint32_t*) FLASH_ADDR_TARGET)) {
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	0a1a      	lsrs	r2, r3, #8
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <StartCANbus+0x64>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d110      	bne.n	80040ee <StartCANbus+0x5a>
				if (rxHeader.RTR == CAN_RTR_REMOTE)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d105      	bne.n	80040de <StartCANbus+0x4a>
					handle_CAN_RTR_Response(&hcan, modeID);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4619      	mov	r1, r3
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <StartCANbus+0x68>)
 80040da:	f7ff fb19 	bl	8003710 <handle_CAN_RTR_Response>
				if (rxHeader.RTR == CAN_RTR_DATA)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <StartCANbus+0x5a>
					handleFunctionCAN((CAN_MODE_ID) modeID);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fa99 	bl	8003620 <handleFunctionCAN>
			}
			HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80040ee:	2112      	movs	r1, #18
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <StartCANbus+0x68>)
 80040f2:	f000 ff2d 	bl	8004f50 <HAL_CAN_ActivateNotification>
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80040f6:	e7d3      	b.n	80040a0 <StartCANbus+0xc>
 80040f8:	08010000 	.word	0x08010000
 80040fc:	2000057c 	.word	0x2000057c

08004100 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004112:	f000 fab1 	bl	8004678 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00

08004124 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004128:	b672      	cpsid	i
}
 800412a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800412c:	e7fe      	b.n	800412c <Error_Handler+0x8>
	...

08004130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_MspInit+0x68>)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_MspInit+0x68>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6193      	str	r3, [r2, #24]
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_MspInit+0x68>)
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_MspInit+0x68>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	4a11      	ldr	r2, [pc, #68]	; (8004198 <HAL_MspInit+0x68>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	61d3      	str	r3, [r2, #28]
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_MspInit+0x68>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	210f      	movs	r1, #15
 800416a:	f06f 0001 	mvn.w	r0, #1
 800416e:	f001 f9f8 	bl	8005562 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_MspInit+0x6c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_MspInit+0x6c>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40010000 	.word	0x40010000

080041a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_CAN_MspInit+0xbc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d149      	bne.n	8004254 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ca:	61d3      	str	r3, [r2, #28]
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	6193      	str	r3, [r2, #24]
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_CAN_MspInit+0xc0>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	4619      	mov	r1, r3
 8004204:	4817      	ldr	r0, [pc, #92]	; (8004264 <HAL_CAN_MspInit+0xc4>)
 8004206:	f001 fa89 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800420a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	4619      	mov	r1, r3
 800421e:	4811      	ldr	r0, [pc, #68]	; (8004264 <HAL_CAN_MspInit+0xc4>)
 8004220:	f001 fa7c 	bl	800571c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8004224:	2200      	movs	r2, #0
 8004226:	2105      	movs	r1, #5
 8004228:	2013      	movs	r0, #19
 800422a:	f001 f99a 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800422e:	2013      	movs	r0, #19
 8004230:	f001 f9b3 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8004234:	2200      	movs	r2, #0
 8004236:	2105      	movs	r1, #5
 8004238:	2014      	movs	r0, #20
 800423a:	f001 f992 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800423e:	2014      	movs	r0, #20
 8004240:	f001 f9ab 	bl	800559a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8004244:	2200      	movs	r2, #0
 8004246:	2105      	movs	r1, #5
 8004248:	2015      	movs	r0, #21
 800424a:	f001 f98a 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800424e:	2015      	movs	r0, #21
 8004250:	f001 f9a3 	bl	800559a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40006400 	.word	0x40006400
 8004260:	40021000 	.word	0x40021000
 8004264:	40010800 	.word	0x40010800

08004268 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d10b      	bne.n	8004292 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_TIM_PWM_MspInit+0x34>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <HAL_TIM_PWM_MspInit+0x34>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	61d3      	str	r3, [r2, #28]
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_TIM_PWM_MspInit+0x34>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 0318 	add.w	r3, r7, #24
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <HAL_TIM_Encoder_MspInit+0xc4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d124      	bne.n	800430a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a28      	ldr	r2, [pc, #160]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	61d3      	str	r3, [r2, #28]
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f0:	23c0      	movs	r3, #192	; 0xc0
 80042f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fc:	f107 0318 	add.w	r3, r7, #24
 8004300:	4619      	mov	r1, r3
 8004302:	481a      	ldr	r0, [pc, #104]	; (800436c <HAL_TIM_Encoder_MspInit+0xcc>)
 8004304:	f001 fa0a 	bl	800571c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004308:	e028      	b.n	800435c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_TIM_Encoder_MspInit+0xd0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d123      	bne.n	800435c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4a13      	ldr	r2, [pc, #76]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	61d3      	str	r3, [r2, #28]
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004332:	f043 0308 	orr.w	r3, r3, #8
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_TIM_Encoder_MspInit+0xc8>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004344:	23c0      	movs	r3, #192	; 0xc0
 8004346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004350:	f107 0318 	add.w	r3, r7, #24
 8004354:	4619      	mov	r1, r3
 8004356:	4807      	ldr	r0, [pc, #28]	; (8004374 <HAL_TIM_Encoder_MspInit+0xd4>)
 8004358:	f001 f9e0 	bl	800571c <HAL_GPIO_Init>
}
 800435c:	bf00      	nop
 800435e:	3728      	adds	r7, #40	; 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40000400 	.word	0x40000400
 8004368:	40021000 	.word	0x40021000
 800436c:	40010800 	.word	0x40010800
 8004370:	40000800 	.word	0x40000800
 8004374:	40010c00 	.word	0x40010c00

08004378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d117      	bne.n	80043c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_TIM_MspPostInit+0x58>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <HAL_TIM_MspPostInit+0x58>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6193      	str	r3, [r2, #24]
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_TIM_MspPostInit+0x58>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80043b0:	230e      	movs	r3, #14
 80043b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2302      	movs	r3, #2
 80043ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043bc:	f107 0310 	add.w	r3, r7, #16
 80043c0:	4619      	mov	r1, r3
 80043c2:	4804      	ldr	r0, [pc, #16]	; (80043d4 <HAL_TIM_MspPostInit+0x5c>)
 80043c4:	f001 f9aa 	bl	800571c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40010800 	.word	0x40010800

080043d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	f107 0310 	add.w	r3, r7, #16
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_UART_MspInit+0x9c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d139      	bne.n	800446c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <HAL_UART_MspInit+0xa0>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <HAL_UART_MspInit+0xa0>)
 80043fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004402:	6193      	str	r3, [r2, #24]
 8004404:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_UART_MspInit+0xa0>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_UART_MspInit+0xa0>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_UART_MspInit+0xa0>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	6193      	str	r3, [r2, #24]
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_UART_MspInit+0xa0>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800442c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004432:	2303      	movs	r3, #3
 8004434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 0310 	add.w	r3, r7, #16
 800443a:	4619      	mov	r1, r3
 800443c:	480f      	ldr	r0, [pc, #60]	; (800447c <HAL_UART_MspInit+0xa4>)
 800443e:	f001 f96d 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	4619      	mov	r1, r3
 8004456:	4809      	ldr	r0, [pc, #36]	; (800447c <HAL_UART_MspInit+0xa4>)
 8004458:	f001 f960 	bl	800571c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2105      	movs	r1, #5
 8004460:	2025      	movs	r0, #37	; 0x25
 8004462:	f001 f87e 	bl	8005562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004466:	2025      	movs	r0, #37	; 0x25
 8004468:	f001 f897 	bl	800559a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800446c:	bf00      	nop
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40013800 	.word	0x40013800
 8004478:	40021000 	.word	0x40021000
 800447c:	40010800 	.word	0x40010800

08004480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	; 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_InitTick+0xd0>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <HAL_InitTick+0xd0>)
 800449c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044a0:	6193      	str	r3, [r2, #24]
 80044a2:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_InitTick+0xd0>)
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044ae:	f107 020c 	add.w	r2, r7, #12
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 feed 	bl	8006298 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80044be:	f001 fed7 	bl	8006270 <HAL_RCC_GetPCLK2Freq>
 80044c2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_InitTick+0xd4>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	0c9b      	lsrs	r3, r3, #18
 80044ce:	3b01      	subs	r3, #1
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_InitTick+0xd8>)
 80044d4:	4a21      	ldr	r2, [pc, #132]	; (800455c <HAL_InitTick+0xdc>)
 80044d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_InitTick+0xd8>)
 80044da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_InitTick+0xd8>)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <HAL_InitTick+0xd8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_InitTick+0xd8>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f2:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_InitTick+0xd8>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80044f8:	4817      	ldr	r0, [pc, #92]	; (8004558 <HAL_InitTick+0xd8>)
 80044fa:	f001 ff1b 	bl	8006334 <HAL_TIM_Base_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11b      	bne.n	8004544 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800450c:	4812      	ldr	r0, [pc, #72]	; (8004558 <HAL_InitTick+0xd8>)
 800450e:	f001 ff69 	bl	80063e4 <HAL_TIM_Base_Start_IT>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004520:	2019      	movs	r0, #25
 8004522:	f001 f83a 	bl	800559a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d808      	bhi.n	800453e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800452c:	2200      	movs	r2, #0
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	2019      	movs	r0, #25
 8004532:	f001 f816 	bl	8005562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_InitTick+0xe0>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e002      	b.n	8004544 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004548:	4618      	mov	r0, r3
 800454a:	3730      	adds	r7, #48	; 0x30
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	431bde83 	.word	0x431bde83
 8004558:	20000c28 	.word	0x20000c28
 800455c:	40012c00 	.word	0x40012c00
 8004560:	20000008 	.word	0x20000008

08004564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004568:	e7fe      	b.n	8004568 <NMI_Handler+0x4>

0800456a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456e:	e7fe      	b.n	800456e <HardFault_Handler+0x4>

08004570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004574:	e7fe      	b.n	8004574 <MemManage_Handler+0x4>

08004576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800457a:	e7fe      	b.n	800457a <BusFault_Handler+0x4>

0800457c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004580:	e7fe      	b.n	8004580 <UsageFault_Handler+0x4>

08004582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
	...

08004590 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8004596:	f000 fd26 	bl	8004fe6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000057c 	.word	0x2000057c

080045a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80045aa:	f000 fd1c 	bl	8004fe6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000057c 	.word	0x2000057c

080045b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <CAN1_RX1_IRQHandler+0x10>)
 80045be:	f000 fd12 	bl	8004fe6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000057c 	.word	0x2000057c

080045cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <TIM1_UP_IRQHandler+0x10>)
 80045d2:	f002 fac0 	bl	8006b56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000c28 	.word	0x20000c28

080045e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045e4:	4802      	ldr	r0, [pc, #8]	; (80045f0 <USART1_IRQHandler+0x10>)
 80045e6:	f003 f81b 	bl	8007620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000067c 	.word	0x2000067c

080045f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004600:	f7ff fff8 	bl	80045f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004606:	490c      	ldr	r1, [pc, #48]	; (8004638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <LoopFillZerobss+0x16>)
  movs r3, #0
 800460a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800460c:	e002      	b.n	8004614 <LoopCopyDataInit>

0800460e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800460e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004612:	3304      	adds	r3, #4

08004614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004618:	d3f9      	bcc.n	800460e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800461c:	4c09      	ldr	r4, [pc, #36]	; (8004644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004620:	e001      	b.n	8004626 <LoopFillZerobss>

08004622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004624:	3204      	adds	r2, #4

08004626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004628:	d3fb      	bcc.n	8004622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800462a:	f006 f83d 	bl	800a6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800462e:	f7ff f999 	bl	8003964 <main>
  bx lr
 8004632:	4770      	bx	lr
  ldr r0, =_sdata
 8004634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004638:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800463c:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 8004640:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004644:	20001b00 	.word	0x20001b00

08004648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004648:	e7fe      	b.n	8004648 <ADC1_2_IRQHandler>
	...

0800464c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_Init+0x28>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_Init+0x28>)
 8004656:	f043 0310 	orr.w	r3, r3, #16
 800465a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465c:	2003      	movs	r0, #3
 800465e:	f000 ff75 	bl	800554c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004662:	200f      	movs	r0, #15
 8004664:	f7ff ff0c 	bl	8004480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004668:	f7ff fd62 	bl	8004130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40022000 	.word	0x40022000

08004678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_IncTick+0x1c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_IncTick+0x20>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4413      	add	r3, r2
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <HAL_IncTick+0x20>)
 800468a:	6013      	str	r3, [r2, #0]
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	2000000c 	.word	0x2000000c
 8004698:	20000c70 	.word	0x20000c70

0800469c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return uwTick;
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <HAL_GetTick+0x10>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	20000c70 	.word	0x20000c70

080046b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7ff fff0 	bl	800469c <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d005      	beq.n	80046d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <HAL_Delay+0x44>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046d6:	bf00      	nop
 80046d8:	f7ff ffe0 	bl	800469c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d8f7      	bhi.n	80046d8 <HAL_Delay+0x28>
  {
  }
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0ed      	b.n	80048e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fd42 	bl	80041a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800472c:	f7ff ffb6 	bl	800469c <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004732:	e012      	b.n	800475a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004734:	f7ff ffb2 	bl	800469c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b0a      	cmp	r3, #10
 8004740:	d90b      	bls.n	800475a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2205      	movs	r2, #5
 8004752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0c5      	b.n	80048e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0e5      	beq.n	8004734 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0202 	bic.w	r2, r2, #2
 8004776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004778:	f7ff ff90 	bl	800469c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800477e:	e012      	b.n	80047a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004780:	f7ff ff8c 	bl	800469c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b0a      	cmp	r3, #10
 800478c:	d90b      	bls.n	80047a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2205      	movs	r2, #5
 800479e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e09f      	b.n	80048e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7e1b      	ldrb	r3, [r3, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d108      	bne.n	80047ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e007      	b.n	80047de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7e5b      	ldrb	r3, [r3, #25]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d108      	bne.n	80047f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e007      	b.n	8004808 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7e9b      	ldrb	r3, [r3, #26]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0220 	orr.w	r2, r2, #32
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e007      	b.n	8004832 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0220 	bic.w	r2, r2, #32
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7edb      	ldrb	r3, [r3, #27]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0210 	bic.w	r2, r2, #16
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e007      	b.n	800485c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0210 	orr.w	r2, r2, #16
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	7f1b      	ldrb	r3, [r3, #28]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d108      	bne.n	8004876 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e007      	b.n	8004886 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0208 	bic.w	r2, r2, #8
 8004884:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7f5b      	ldrb	r3, [r3, #29]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d108      	bne.n	80048a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0204 	orr.w	r2, r2, #4
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e007      	b.n	80048b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	1e5a      	subs	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004904:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d003      	beq.n	8004914 <HAL_CAN_ConfigFilter+0x26>
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	2b02      	cmp	r3, #2
 8004910:	f040 80aa 	bne.w	8004a68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800491a:	f043 0201 	orr.w	r2, r3, #1
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	2201      	movs	r2, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d123      	bne.n	8004996 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	43db      	mvns	r3, r3
 8004958:	401a      	ands	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004970:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3248      	adds	r2, #72	; 0x48
 8004976:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800498a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800498c:	6979      	ldr	r1, [r7, #20]
 800498e:	3348      	adds	r3, #72	; 0x48
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d122      	bne.n	80049e4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3248      	adds	r2, #72	; 0x48
 80049c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049da:	6979      	ldr	r1, [r7, #20]
 80049dc:	3348      	adds	r3, #72	; 0x48
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80049fe:	e007      	b.n	8004a10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004a2a:	e007      	b.n	8004a3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e006      	b.n	8004a76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d12e      	bne.n	8004af2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aac:	f7ff fdf6 	bl	800469c <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ab2:	e012      	b.n	8004ada <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ab4:	f7ff fdf2 	bl	800469c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b0a      	cmp	r3, #10
 8004ac0:	d90b      	bls.n	8004ada <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e012      	b.n	8004b00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e006      	b.n	8004b00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b26:	7ffb      	ldrb	r3, [r7, #31]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d003      	beq.n	8004b34 <HAL_CAN_AddTxMessage+0x2c>
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	f040 80ad 	bne.w	8004c8e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8095 	beq.w	8004c7e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	0e1b      	lsrs	r3, r3, #24
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b5e:	2201      	movs	r2, #1
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	409a      	lsls	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6809      	ldr	r1, [r1, #0]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3318      	adds	r3, #24
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	440b      	add	r3, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e00f      	b.n	8004bac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004ba0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	440b      	add	r3, r1
 8004baa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	440b      	add	r3, r1
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	7d1b      	ldrb	r3, [r3, #20]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d111      	bne.n	8004bec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6811      	ldr	r1, [r2, #0]
 8004bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	3318      	adds	r3, #24
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	440b      	add	r3, r1
 8004be8:	3304      	adds	r3, #4
 8004bea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3307      	adds	r3, #7
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	061a      	lsls	r2, r3, #24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3306      	adds	r3, #6
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3305      	adds	r3, #5
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	4313      	orrs	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	3204      	adds	r2, #4
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4610      	mov	r0, r2
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6811      	ldr	r1, [r2, #0]
 8004c14:	ea43 0200 	orr.w	r2, r3, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004c22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3303      	adds	r3, #3
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	061a      	lsls	r2, r3, #24
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3302      	adds	r3, #2
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	7812      	ldrb	r2, [r2, #0]
 8004c44:	4610      	mov	r0, r2
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	ea43 0200 	orr.w	r2, r3, r0
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	440b      	add	r3, r1
 8004c54:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3318      	adds	r3, #24
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	6811      	ldr	r1, [r2, #0]
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3318      	adds	r3, #24
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	440b      	add	r3, r1
 8004c78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e00e      	b.n	8004c9c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e006      	b.n	8004c9c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3724      	adds	r7, #36	; 0x24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004cba:	7afb      	ldrb	r3, [r7, #11]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d002      	beq.n	8004cc6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004cc0:	7afb      	ldrb	r3, [r7, #11]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d11d      	bne.n	8004d02 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d22:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d003      	beq.n	8004d32 <HAL_CAN_GetRxMessage+0x24>
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	f040 8103 	bne.w	8004f38 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10e      	bne.n	8004d56 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0f7      	b.n	8004f46 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0e8      	b.n	8004f46 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	331b      	adds	r3, #27
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0204 	and.w	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	331b      	adds	r3, #27
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	4413      	add	r3, r2
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	0d5b      	lsrs	r3, r3, #21
 8004da2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	331b      	adds	r3, #27
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4413      	add	r3, r2
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	08db      	lsrs	r3, r3, #3
 8004dbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	331b      	adds	r3, #27
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	4413      	add	r3, r2
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0202 	and.w	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	331b      	adds	r3, #27
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2208      	movs	r2, #8
 8004df6:	611a      	str	r2, [r3, #16]
 8004df8:	e00b      	b.n	8004e12 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	331b      	adds	r3, #27
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4413      	add	r3, r2
 8004e06:	3304      	adds	r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	331b      	adds	r3, #27
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3304      	adds	r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	331b      	adds	r3, #27
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4413      	add	r3, r2
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	0a1a      	lsrs	r2, r3, #8
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	0c1a      	lsrs	r2, r3, #16
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	3302      	adds	r3, #2
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e1a      	lsrs	r2, r3, #24
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	3303      	adds	r3, #3
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	0a1a      	lsrs	r2, r3, #8
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3305      	adds	r3, #5
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	0c1a      	lsrs	r2, r3, #16
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	3306      	adds	r3, #6
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0e1a      	lsrs	r2, r3, #24
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	3307      	adds	r3, #7
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d108      	bne.n	8004f24 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0220 	orr.w	r2, r2, #32
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	e007      	b.n	8004f34 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e006      	b.n	8004f46 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f60:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <HAL_CAN_ActivateNotification+0x1e>
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d109      	bne.n	8004f82 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6959      	ldr	r1, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e006      	b.n	8004f90 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004faa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d002      	beq.n	8004fb8 <HAL_CAN_DeactivateNotification+0x1e>
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10a      	bne.n	8004fce <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e006      	b.n	8004fdc <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b08a      	sub	sp, #40	; 0x28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d07c      	beq.n	8005126 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d023      	beq.n	800507e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2201      	movs	r2, #1
 800503c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f983 	bl	8005354 <HAL_CAN_TxMailbox0CompleteCallback>
 800504e:	e016      	b.n	800507e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
 8005062:	e00c      	b.n	800507e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	e002      	b.n	800507e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f986 	bl	800538a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d024      	beq.n	80050d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005090:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f962 	bl	8005366 <HAL_CAN_TxMailbox1CompleteCallback>
 80050a2:	e016      	b.n	80050d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e00c      	b.n	80050d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	e002      	b.n	80050d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f965 	bl	800539c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d024      	beq.n	8005126 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f941 	bl	8005378 <HAL_CAN_TxMailbox2CompleteCallback>
 80050f6:	e016      	b.n	8005126 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	e00c      	b.n	8005126 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	e002      	b.n	8005126 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f944 	bl	80053ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005140:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2210      	movs	r2, #16
 8005148:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2208      	movs	r2, #8
 8005164:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe fbe6 	bl	8003938 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fe f963 	bl	8003450 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2210      	movs	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2208      	movs	r2, #8
 80051c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8f8 	bl	80053c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fe f965 	bl	80034b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2210      	movs	r2, #16
 8005208:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8e1 	bl	80053d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8d9 	bl	80053e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d07b      	beq.n	8005334 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d072      	beq.n	800532c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f043 0304 	orr.w	r3, r3, #4
 8005298:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d043      	beq.n	800532c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03e      	beq.n	800532c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052b4:	2b60      	cmp	r3, #96	; 0x60
 80052b6:	d02b      	beq.n	8005310 <HAL_CAN_IRQHandler+0x32a>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d82e      	bhi.n	800531a <HAL_CAN_IRQHandler+0x334>
 80052bc:	2b50      	cmp	r3, #80	; 0x50
 80052be:	d022      	beq.n	8005306 <HAL_CAN_IRQHandler+0x320>
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d82a      	bhi.n	800531a <HAL_CAN_IRQHandler+0x334>
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d019      	beq.n	80052fc <HAL_CAN_IRQHandler+0x316>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d826      	bhi.n	800531a <HAL_CAN_IRQHandler+0x334>
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d010      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x30c>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d822      	bhi.n	800531a <HAL_CAN_IRQHandler+0x334>
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d002      	beq.n	80052de <HAL_CAN_IRQHandler+0x2f8>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d005      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80052dc:	e01d      	b.n	800531a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052e6:	e019      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f043 0310 	orr.w	r3, r3, #16
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052f0:	e014      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f043 0320 	orr.w	r3, r3, #32
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052fa:	e00f      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005304:	e00a      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800530e:	e005      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005318:	e000      	b.n	800531c <HAL_CAN_IRQHandler+0x336>
            break;
 800531a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800532a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fe faa4 	bl	8003894 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800534c:	bf00      	nop
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
	...

080053f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <__NVIC_SetPriorityGrouping+0x44>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005414:	4013      	ands	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800542a:	4a04      	ldr	r2, [pc, #16]	; (800543c <__NVIC_SetPriorityGrouping+0x44>)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	60d3      	str	r3, [r2, #12]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <__NVIC_GetPriorityGrouping+0x18>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	f003 0307 	and.w	r3, r3, #7
}
 800544e:	4618      	mov	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	e000ed00 	.word	0xe000ed00

0800545c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546a:	2b00      	cmp	r3, #0
 800546c:	db0b      	blt.n	8005486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	f003 021f 	and.w	r2, r3, #31
 8005474:	4906      	ldr	r1, [pc, #24]	; (8005490 <__NVIC_EnableIRQ+0x34>)
 8005476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	2001      	movs	r0, #1
 800547e:	fa00 f202 	lsl.w	r2, r0, r2
 8005482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	e000e100 	.word	0xe000e100

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	; 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff4f 	bl	80053f8 <__NVIC_SetPriorityGrouping>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	4603      	mov	r3, r0
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005574:	f7ff ff64 	bl	8005440 <__NVIC_GetPriorityGrouping>
 8005578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7ff ffb2 	bl	80054e8 <NVIC_EncodePriority>
 8005584:	4602      	mov	r2, r0
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff81 	bl	8005494 <__NVIC_SetPriority>
}
 8005592:	bf00      	nop
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff57 	bl	800545c <__NVIC_EnableIRQ>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d008      	beq.n	80055e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e020      	b.n	8005622 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 020e 	bic.w	r2, r2, #14
 80055ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f202 	lsl.w	r2, r1, r2
 800560e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d005      	beq.n	8005650 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e051      	b.n	80056f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 020e 	bic.w	r2, r2, #14
 800565e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <HAL_DMA_Abort_IT+0xd4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d029      	beq.n	80056ce <HAL_DMA_Abort_IT+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <HAL_DMA_Abort_IT+0xd8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d022      	beq.n	80056ca <HAL_DMA_Abort_IT+0x9e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_DMA_Abort_IT+0xdc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01a      	beq.n	80056c4 <HAL_DMA_Abort_IT+0x98>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_DMA_Abort_IT+0xe0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d012      	beq.n	80056be <HAL_DMA_Abort_IT+0x92>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_DMA_Abort_IT+0xe4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00a      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x8c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_DMA_Abort_IT+0xe8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d102      	bne.n	80056b2 <HAL_DMA_Abort_IT+0x86>
 80056ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056b0:	e00e      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056b6:	e00b      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056bc:	e008      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056c2:	e005      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c8:	e002      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056ca:	2310      	movs	r3, #16
 80056cc:	e000      	b.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4a11      	ldr	r2, [pc, #68]	; (8005718 <HAL_DMA_Abort_IT+0xec>)
 80056d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
    } 
  }
  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40020008 	.word	0x40020008
 8005704:	4002001c 	.word	0x4002001c
 8005708:	40020030 	.word	0x40020030
 800570c:	40020044 	.word	0x40020044
 8005710:	40020058 	.word	0x40020058
 8005714:	4002006c 	.word	0x4002006c
 8005718:	40020000 	.word	0x40020000

0800571c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800571c:	b480      	push	{r7}
 800571e:	b08b      	sub	sp, #44	; 0x2c
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800572a:	2300      	movs	r3, #0
 800572c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800572e:	e169      	b.n	8005a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005730:	2201      	movs	r2, #1
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	4013      	ands	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	429a      	cmp	r2, r3
 800574a:	f040 8158 	bne.w	80059fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4a9a      	ldr	r2, [pc, #616]	; (80059bc <HAL_GPIO_Init+0x2a0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d05e      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
 8005758:	4a98      	ldr	r2, [pc, #608]	; (80059bc <HAL_GPIO_Init+0x2a0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d875      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 800575e:	4a98      	ldr	r2, [pc, #608]	; (80059c0 <HAL_GPIO_Init+0x2a4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d058      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
 8005764:	4a96      	ldr	r2, [pc, #600]	; (80059c0 <HAL_GPIO_Init+0x2a4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d86f      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 800576a:	4a96      	ldr	r2, [pc, #600]	; (80059c4 <HAL_GPIO_Init+0x2a8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d052      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
 8005770:	4a94      	ldr	r2, [pc, #592]	; (80059c4 <HAL_GPIO_Init+0x2a8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d869      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 8005776:	4a94      	ldr	r2, [pc, #592]	; (80059c8 <HAL_GPIO_Init+0x2ac>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d04c      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
 800577c:	4a92      	ldr	r2, [pc, #584]	; (80059c8 <HAL_GPIO_Init+0x2ac>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d863      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 8005782:	4a92      	ldr	r2, [pc, #584]	; (80059cc <HAL_GPIO_Init+0x2b0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d046      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
 8005788:	4a90      	ldr	r2, [pc, #576]	; (80059cc <HAL_GPIO_Init+0x2b0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d85d      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 800578e:	2b12      	cmp	r3, #18
 8005790:	d82a      	bhi.n	80057e8 <HAL_GPIO_Init+0xcc>
 8005792:	2b12      	cmp	r3, #18
 8005794:	d859      	bhi.n	800584a <HAL_GPIO_Init+0x12e>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <HAL_GPIO_Init+0x80>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	08005817 	.word	0x08005817
 80057a0:	080057f1 	.word	0x080057f1
 80057a4:	08005803 	.word	0x08005803
 80057a8:	08005845 	.word	0x08005845
 80057ac:	0800584b 	.word	0x0800584b
 80057b0:	0800584b 	.word	0x0800584b
 80057b4:	0800584b 	.word	0x0800584b
 80057b8:	0800584b 	.word	0x0800584b
 80057bc:	0800584b 	.word	0x0800584b
 80057c0:	0800584b 	.word	0x0800584b
 80057c4:	0800584b 	.word	0x0800584b
 80057c8:	0800584b 	.word	0x0800584b
 80057cc:	0800584b 	.word	0x0800584b
 80057d0:	0800584b 	.word	0x0800584b
 80057d4:	0800584b 	.word	0x0800584b
 80057d8:	0800584b 	.word	0x0800584b
 80057dc:	0800584b 	.word	0x0800584b
 80057e0:	080057f9 	.word	0x080057f9
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	4a79      	ldr	r2, [pc, #484]	; (80059d0 <HAL_GPIO_Init+0x2b4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80057ee:	e02c      	b.n	800584a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	623b      	str	r3, [r7, #32]
          break;
 80057f6:	e029      	b.n	800584c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	3304      	adds	r3, #4
 80057fe:	623b      	str	r3, [r7, #32]
          break;
 8005800:	e024      	b.n	800584c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	3308      	adds	r3, #8
 8005808:	623b      	str	r3, [r7, #32]
          break;
 800580a:	e01f      	b.n	800584c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	330c      	adds	r3, #12
 8005812:	623b      	str	r3, [r7, #32]
          break;
 8005814:	e01a      	b.n	800584c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800581e:	2304      	movs	r3, #4
 8005820:	623b      	str	r3, [r7, #32]
          break;
 8005822:	e013      	b.n	800584c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800582c:	2308      	movs	r3, #8
 800582e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	611a      	str	r2, [r3, #16]
          break;
 8005836:	e009      	b.n	800584c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005838:	2308      	movs	r3, #8
 800583a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	615a      	str	r2, [r3, #20]
          break;
 8005842:	e003      	b.n	800584c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005844:	2300      	movs	r3, #0
 8005846:	623b      	str	r3, [r7, #32]
          break;
 8005848:	e000      	b.n	800584c <HAL_GPIO_Init+0x130>
          break;
 800584a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2bff      	cmp	r3, #255	; 0xff
 8005850:	d801      	bhi.n	8005856 <HAL_GPIO_Init+0x13a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	e001      	b.n	800585a <HAL_GPIO_Init+0x13e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2bff      	cmp	r3, #255	; 0xff
 8005860:	d802      	bhi.n	8005868 <HAL_GPIO_Init+0x14c>
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	e002      	b.n	800586e <HAL_GPIO_Init+0x152>
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	3b08      	subs	r3, #8
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	210f      	movs	r1, #15
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80b1 	beq.w	80059fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800589c:	4b4d      	ldr	r3, [pc, #308]	; (80059d4 <HAL_GPIO_Init+0x2b8>)
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	4a4c      	ldr	r2, [pc, #304]	; (80059d4 <HAL_GPIO_Init+0x2b8>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6193      	str	r3, [r2, #24]
 80058a8:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <HAL_GPIO_Init+0x2b8>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80058b4:	4a48      	ldr	r2, [pc, #288]	; (80059d8 <HAL_GPIO_Init+0x2bc>)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	3302      	adds	r3, #2
 80058bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	220f      	movs	r2, #15
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a40      	ldr	r2, [pc, #256]	; (80059dc <HAL_GPIO_Init+0x2c0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_GPIO_Init+0x1ec>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3f      	ldr	r2, [pc, #252]	; (80059e0 <HAL_GPIO_Init+0x2c4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00d      	beq.n	8005904 <HAL_GPIO_Init+0x1e8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3e      	ldr	r2, [pc, #248]	; (80059e4 <HAL_GPIO_Init+0x2c8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <HAL_GPIO_Init+0x1e4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3d      	ldr	r2, [pc, #244]	; (80059e8 <HAL_GPIO_Init+0x2cc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_GPIO_Init+0x1e0>
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <HAL_GPIO_Init+0x1ee>
 80058fc:	2304      	movs	r3, #4
 80058fe:	e004      	b.n	800590a <HAL_GPIO_Init+0x1ee>
 8005900:	2302      	movs	r3, #2
 8005902:	e002      	b.n	800590a <HAL_GPIO_Init+0x1ee>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_GPIO_Init+0x1ee>
 8005908:	2300      	movs	r3, #0
 800590a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590c:	f002 0203 	and.w	r2, r2, #3
 8005910:	0092      	lsls	r2, r2, #2
 8005912:	4093      	lsls	r3, r2
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800591a:	492f      	ldr	r1, [pc, #188]	; (80059d8 <HAL_GPIO_Init+0x2bc>)
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	3302      	adds	r3, #2
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005934:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	492c      	ldr	r1, [pc, #176]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]
 8005940:	e006      	b.n	8005950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	43db      	mvns	r3, r3
 800594a:	4928      	ldr	r1, [pc, #160]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800594c:	4013      	ands	r3, r2
 800594e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800595c:	4b23      	ldr	r3, [pc, #140]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4922      	ldr	r1, [pc, #136]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
 8005968:	e006      	b.n	8005978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	43db      	mvns	r3, r3
 8005972:	491e      	ldr	r1, [pc, #120]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005974:	4013      	ands	r3, r2
 8005976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4918      	ldr	r1, [pc, #96]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
 8005990:	e006      	b.n	80059a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005992:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	43db      	mvns	r3, r3
 800599a:	4914      	ldr	r1, [pc, #80]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 800599c:	4013      	ands	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d021      	beq.n	80059f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	490e      	ldr	r1, [pc, #56]	; (80059ec <HAL_GPIO_Init+0x2d0>)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]
 80059b8:	e021      	b.n	80059fe <HAL_GPIO_Init+0x2e2>
 80059ba:	bf00      	nop
 80059bc:	10320000 	.word	0x10320000
 80059c0:	10310000 	.word	0x10310000
 80059c4:	10220000 	.word	0x10220000
 80059c8:	10210000 	.word	0x10210000
 80059cc:	10120000 	.word	0x10120000
 80059d0:	10110000 	.word	0x10110000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010800 	.word	0x40010800
 80059e0:	40010c00 	.word	0x40010c00
 80059e4:	40011000 	.word	0x40011000
 80059e8:	40011400 	.word	0x40011400
 80059ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_GPIO_Init+0x304>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	4909      	ldr	r1, [pc, #36]	; (8005a20 <HAL_GPIO_Init+0x304>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	3301      	adds	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f47f ae8e 	bne.w	8005730 <HAL_GPIO_Init+0x14>
  }
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	372c      	adds	r7, #44	; 0x2c
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr
 8005a20:	40010400 	.word	0x40010400

08005a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	887b      	ldrh	r3, [r7, #2]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
 8005a40:	e001      	b.n	8005a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	807b      	strh	r3, [r7, #2]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a62:	787b      	ldrb	r3, [r7, #1]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a6e:	e003      	b.n	8005a78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	041a      	lsls	r2, r3, #16
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a94:	887a      	ldrh	r2, [r7, #2]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	041a      	lsls	r2, r3, #16
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	43d9      	mvns	r1, r3
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e272      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8087 	beq.w	8005be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ad4:	4b92      	ldr	r3, [pc, #584]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d00c      	beq.n	8005afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ae0:	4b8f      	ldr	r3, [pc, #572]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d112      	bne.n	8005b12 <HAL_RCC_OscConfig+0x5e>
 8005aec:	4b8c      	ldr	r3, [pc, #560]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d10b      	bne.n	8005b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afa:	4b89      	ldr	r3, [pc, #548]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d06c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x12c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d168      	bne.n	8005be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e24c      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCC_OscConfig+0x76>
 8005b1c:	4b80      	ldr	r3, [pc, #512]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7f      	ldr	r2, [pc, #508]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e02e      	b.n	8005b88 <HAL_RCC_OscConfig+0xd4>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x98>
 8005b32:	4b7b      	ldr	r3, [pc, #492]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a7a      	ldr	r2, [pc, #488]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b78      	ldr	r3, [pc, #480]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e01d      	b.n	8005b88 <HAL_RCC_OscConfig+0xd4>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCC_OscConfig+0xbc>
 8005b56:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a71      	ldr	r2, [pc, #452]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b6f      	ldr	r3, [pc, #444]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6e      	ldr	r2, [pc, #440]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e00b      	b.n	8005b88 <HAL_RCC_OscConfig+0xd4>
 8005b70:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b68      	ldr	r3, [pc, #416]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a67      	ldr	r2, [pc, #412]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fe fd84 	bl	800469c <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fe fd80 	bl	800469c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e200      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005baa:	4b5d      	ldr	r3, [pc, #372]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0xe4>
 8005bb6:	e014      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fe fd70 	bl	800469c <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc0:	f7fe fd6c 	bl	800469c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b64      	cmp	r3, #100	; 0x64
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e1ec      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bd2:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x10c>
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d063      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bee:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bfa:	4b49      	ldr	r3, [pc, #292]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d11c      	bne.n	8005c40 <HAL_RCC_OscConfig+0x18c>
 8005c06:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d116      	bne.n	8005c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c12:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_RCC_OscConfig+0x176>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e1c0      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4939      	ldr	r1, [pc, #228]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3e:	e03a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c48:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCC_OscConfig+0x270>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4e:	f7fe fd25 	bl	800469c <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c56:	f7fe fd21 	bl	800469c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e1a1      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c68:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4927      	ldr	r1, [pc, #156]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
 8005c88:	e015      	b.n	8005cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8a:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <HAL_RCC_OscConfig+0x270>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c90:	f7fe fd04 	bl	800469c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c98:	f7fe fd00 	bl	800469c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e180      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d03a      	beq.n	8005d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d019      	beq.n	8005cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cca:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd0:	f7fe fce4 	bl	800469c <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd8:	f7fe fce0 	bl	800469c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e160      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	f000 fafe 	bl	80062f8 <RCC_Delay>
 8005cfc:	e01c      	b.n	8005d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <HAL_RCC_OscConfig+0x274>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d04:	f7fe fcca 	bl	800469c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0a:	e00f      	b.n	8005d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d0c:	f7fe fcc6 	bl	800469c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d908      	bls.n	8005d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e146      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	42420000 	.word	0x42420000
 8005d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2c:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e9      	bne.n	8005d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80a6 	beq.w	8005e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d4a:	4b8b      	ldr	r3, [pc, #556]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d56:	4b88      	ldr	r3, [pc, #544]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4a87      	ldr	r2, [pc, #540]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d60:	61d3      	str	r3, [r2, #28]
 8005d62:	4b85      	ldr	r3, [pc, #532]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	60bb      	str	r3, [r7, #8]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d72:	4b82      	ldr	r3, [pc, #520]	; (8005f7c <HAL_RCC_OscConfig+0x4c8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d118      	bne.n	8005db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d7e:	4b7f      	ldr	r3, [pc, #508]	; (8005f7c <HAL_RCC_OscConfig+0x4c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a7e      	ldr	r2, [pc, #504]	; (8005f7c <HAL_RCC_OscConfig+0x4c8>)
 8005d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d8a:	f7fe fc87 	bl	800469c <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d92:	f7fe fc83 	bl	800469c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b64      	cmp	r3, #100	; 0x64
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e103      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	4b75      	ldr	r3, [pc, #468]	; (8005f7c <HAL_RCC_OscConfig+0x4c8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f0      	beq.n	8005d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x312>
 8005db8:	4b6f      	ldr	r3, [pc, #444]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	4a6e      	ldr	r2, [pc, #440]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6213      	str	r3, [r2, #32]
 8005dc4:	e02d      	b.n	8005e22 <HAL_RCC_OscConfig+0x36e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x334>
 8005dce:	4b6a      	ldr	r3, [pc, #424]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	4a69      	ldr	r2, [pc, #420]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	6213      	str	r3, [r2, #32]
 8005dda:	4b67      	ldr	r3, [pc, #412]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	4a66      	ldr	r2, [pc, #408]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005de0:	f023 0304 	bic.w	r3, r3, #4
 8005de4:	6213      	str	r3, [r2, #32]
 8005de6:	e01c      	b.n	8005e22 <HAL_RCC_OscConfig+0x36e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCC_OscConfig+0x356>
 8005df0:	4b61      	ldr	r3, [pc, #388]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	4a60      	ldr	r2, [pc, #384]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005df6:	f043 0304 	orr.w	r3, r3, #4
 8005dfa:	6213      	str	r3, [r2, #32]
 8005dfc:	4b5e      	ldr	r3, [pc, #376]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	4a5d      	ldr	r2, [pc, #372]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	6213      	str	r3, [r2, #32]
 8005e08:	e00b      	b.n	8005e22 <HAL_RCC_OscConfig+0x36e>
 8005e0a:	4b5b      	ldr	r3, [pc, #364]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	4a5a      	ldr	r2, [pc, #360]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	6213      	str	r3, [r2, #32]
 8005e16:	4b58      	ldr	r3, [pc, #352]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4a57      	ldr	r2, [pc, #348]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d015      	beq.n	8005e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2a:	f7fe fc37 	bl	800469c <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e30:	e00a      	b.n	8005e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fe fc33 	bl	800469c <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0b1      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e48:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0ee      	beq.n	8005e32 <HAL_RCC_OscConfig+0x37e>
 8005e54:	e014      	b.n	8005e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fe fc21 	bl	800469c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fe fc1d 	bl	800469c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e09b      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e74:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ee      	bne.n	8005e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d105      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e86:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	4a3b      	ldr	r2, [pc, #236]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8087 	beq.w	8005faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9c:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d061      	beq.n	8005f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d146      	bne.n	8005f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <HAL_RCC_OscConfig+0x4cc>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fe fbf1 	bl	800469c <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fe fbed 	bl	800469c <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e06d      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed0:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f0      	bne.n	8005ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d108      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4921      	ldr	r1, [pc, #132]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a19      	ldr	r1, [r3, #32]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	491b      	ldr	r1, [pc, #108]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <HAL_RCC_OscConfig+0x4cc>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fe fbc1 	bl	800469c <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fe fbbd 	bl	800469c <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e03d      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x46a>
 8005f3c:	e035      	b.n	8005faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <HAL_RCC_OscConfig+0x4cc>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fe fbaa 	bl	800469c <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4c:	f7fe fba6 	bl	800469c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e026      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_RCC_OscConfig+0x4c4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x498>
 8005f6a:	e01e      	b.n	8005faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e019      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x500>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d001      	beq.n	8005faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000

08005fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0d0      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d910      	bls.n	8005ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b67      	ldr	r3, [pc, #412]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 0207 	bic.w	r2, r3, #7
 8005fe2:	4965      	ldr	r1, [pc, #404]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0b8      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d020      	beq.n	800604a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006014:	4b59      	ldr	r3, [pc, #356]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a58      	ldr	r2, [pc, #352]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 800601a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800601e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800602c:	4b53      	ldr	r3, [pc, #332]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a52      	ldr	r2, [pc, #328]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006038:	4b50      	ldr	r3, [pc, #320]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	494d      	ldr	r1, [pc, #308]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d040      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605e:	4b47      	ldr	r3, [pc, #284]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d115      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e07f      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d107      	bne.n	8006086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006076:	4b41      	ldr	r3, [pc, #260]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e073      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006086:	4b3d      	ldr	r3, [pc, #244]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e06b      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006096:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f023 0203 	bic.w	r2, r3, #3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4936      	ldr	r1, [pc, #216]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060a8:	f7fe faf8 	bl	800469c <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ae:	e00a      	b.n	80060c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b0:	f7fe faf4 	bl	800469c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e053      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c6:	4b2d      	ldr	r3, [pc, #180]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 020c 	and.w	r2, r3, #12
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d1eb      	bne.n	80060b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d8:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d210      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e6:	4b24      	ldr	r3, [pc, #144]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f023 0207 	bic.w	r2, r3, #7
 80060ee:	4922      	ldr	r1, [pc, #136]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e032      	b.n	800616e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006114:	4b19      	ldr	r3, [pc, #100]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4916      	ldr	r1, [pc, #88]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	490e      	ldr	r1, [pc, #56]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006146:	f000 f821 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800614a:	4602      	mov	r2, r0
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	490a      	ldr	r1, [pc, #40]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006158:	5ccb      	ldrb	r3, [r1, r3]
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1cc>)
 8006160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006162:	4b09      	ldr	r3, [pc, #36]	; (8006188 <HAL_RCC_ClockConfig+0x1d0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe f98a 	bl	8004480 <HAL_InitTick>

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40022000 	.word	0x40022000
 800617c:	40021000 	.word	0x40021000
 8006180:	0800bae0 	.word	0x0800bae0
 8006184:	20000004 	.word	0x20000004
 8006188:	20000008 	.word	0x20000008

0800618c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061a6:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <HAL_RCC_GetSysClockFreq+0x94>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x30>
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x36>
 80061ba:	e027      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <HAL_RCC_GetSysClockFreq+0x98>)
 80061be:	613b      	str	r3, [r7, #16]
      break;
 80061c0:	e027      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	0c9b      	lsrs	r3, r3, #18
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	4a17      	ldr	r2, [pc, #92]	; (8006228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80061cc:	5cd3      	ldrb	r3, [r2, r3]
 80061ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d010      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <HAL_RCC_GetSysClockFreq+0x94>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0c5b      	lsrs	r3, r3, #17
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	4a11      	ldr	r2, [pc, #68]	; (800622c <HAL_RCC_GetSysClockFreq+0xa0>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <HAL_RCC_GetSysClockFreq+0x98>)
 80061ee:	fb03 f202 	mul.w	r2, r3, r2
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e004      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	613b      	str	r3, [r7, #16]
      break;
 800620a:	e002      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetSysClockFreq+0x98>)
 800620e:	613b      	str	r3, [r7, #16]
      break;
 8006210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006212:	693b      	ldr	r3, [r7, #16]
}
 8006214:	4618      	mov	r0, r3
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40021000 	.word	0x40021000
 8006224:	007a1200 	.word	0x007a1200
 8006228:	0800baf8 	.word	0x0800baf8
 800622c:	0800bb08 	.word	0x0800bb08
 8006230:	003d0900 	.word	0x003d0900

08006234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006238:	4b02      	ldr	r3, [pc, #8]	; (8006244 <HAL_RCC_GetHCLKFreq+0x10>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	20000004 	.word	0x20000004

08006248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800624c:	f7ff fff2 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCC_GetPCLK1Freq+0x24>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000
 800626c:	0800baf0 	.word	0x0800baf0

08006270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006274:	f7ff ffde 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	0adb      	lsrs	r3, r3, #11
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4903      	ldr	r1, [pc, #12]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000
 8006294:	0800baf0 	.word	0x0800baf0

08006298 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	220f      	movs	r2, #15
 80062a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 0203 	and.w	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_RCC_GetClockConfig+0x5c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0207 	and.w	r2, r3, #7
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40022000 	.word	0x40022000

080062f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <RCC_Delay+0x34>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <RCC_Delay+0x38>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	0a5b      	lsrs	r3, r3, #9
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006314:	bf00      	nop
  }
  while (Delay --);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1e5a      	subs	r2, r3, #1
 800631a:	60fa      	str	r2, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f9      	bne.n	8006314 <RCC_Delay+0x1c>
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	20000004 	.word	0x20000004
 8006330:	10624dd3 	.word	0x10624dd3

08006334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e041      	b.n	80063ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f839 	bl	80063d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fdde 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d001      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e03a      	b.n	8006472 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_TIM_Base_Start_IT+0x98>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x58>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006426:	d009      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x58>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <HAL_TIM_Base_Start_IT+0x9c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x58>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a13      	ldr	r2, [pc, #76]	; (8006484 <HAL_TIM_Base_Start_IT+0xa0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d111      	bne.n	8006460 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b06      	cmp	r3, #6
 800644c:	d010      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645e:	e007      	b.n	8006470 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800

08006488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e041      	b.n	800651e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fd feda 	bl	8004268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fd34 	bl	8006f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_TIM_PWM_Start+0x24>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e022      	b.n	8006592 <HAL_TIM_PWM_Start+0x6a>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d109      	bne.n	8006566 <HAL_TIM_PWM_Start+0x3e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e015      	b.n	8006592 <HAL_TIM_PWM_Start+0x6a>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d109      	bne.n	8006580 <HAL_TIM_PWM_Start+0x58>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	e008      	b.n	8006592 <HAL_TIM_PWM_Start+0x6a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e05e      	b.n	8006658 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_TIM_PWM_Start+0x82>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a8:	e013      	b.n	80065d2 <HAL_TIM_PWM_Start+0xaa>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_PWM_Start+0x92>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b8:	e00b      	b.n	80065d2 <HAL_TIM_PWM_Start+0xaa>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d104      	bne.n	80065ca <HAL_TIM_PWM_Start+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c8:	e003      	b.n	80065d2 <HAL_TIM_PWM_Start+0xaa>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2201      	movs	r2, #1
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fe94 	bl	8007308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <HAL_TIM_PWM_Start+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d107      	bne.n	80065fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a18      	ldr	r2, [pc, #96]	; (8006660 <HAL_TIM_PWM_Start+0x138>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00e      	beq.n	8006622 <HAL_TIM_PWM_Start+0xfa>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d009      	beq.n	8006622 <HAL_TIM_PWM_Start+0xfa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a14      	ldr	r2, [pc, #80]	; (8006664 <HAL_TIM_PWM_Start+0x13c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIM_PWM_Start+0xfa>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a12      	ldr	r2, [pc, #72]	; (8006668 <HAL_TIM_PWM_Start+0x140>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d111      	bne.n	8006646 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b06      	cmp	r3, #6
 8006632:	d010      	beq.n	8006656 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	e007      	b.n	8006656 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800

0800666c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e093      	b.n	80067a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fd fe03 	bl	80042a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fc37 	bl	8006f34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	4313      	orrs	r3, r2
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800670c:	f023 030c 	bic.w	r3, r3, #12
 8006710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	4313      	orrs	r3, r2
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	4313      	orrs	r3, r2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	4313      	orrs	r3, r2
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d110      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d102      	bne.n	80067ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067e6:	7b7b      	ldrb	r3, [r7, #13]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d001      	beq.n	80067f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e069      	b.n	80068c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006800:	e031      	b.n	8006866 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d110      	bne.n	800682a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d102      	bne.n	8006814 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800680e:	7b3b      	ldrb	r3, [r7, #12]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e055      	b.n	80068c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006828:	e01d      	b.n	8006866 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d108      	bne.n	8006842 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d105      	bne.n	8006842 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006836:	7b7b      	ldrb	r3, [r7, #13]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800683c:	7b3b      	ldrb	r3, [r7, #12]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d001      	beq.n	8006846 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e03e      	b.n	80068c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_TIM_Encoder_Start+0xc4>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b04      	cmp	r3, #4
 8006870:	d008      	beq.n	8006884 <HAL_TIM_Encoder_Start+0xd4>
 8006872:	e00f      	b.n	8006894 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fd43 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 8006882:	e016      	b.n	80068b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	2104      	movs	r1, #4
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fd3b 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 8006892:	e00e      	b.n	80068b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2201      	movs	r2, #1
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fd33 	bl	8007308 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2201      	movs	r2, #1
 80068a8:	2104      	movs	r1, #4
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fd2c 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 80068b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0201 	orr.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_TIM_Encoder_Stop+0x18>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d008      	beq.n	80068f4 <HAL_TIM_Encoder_Stop+0x28>
 80068e2:	e00f      	b.n	8006904 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fd0b 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 80068f2:	e016      	b.n	8006922 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2104      	movs	r1, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd03 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 8006902:	e00e      	b.n	8006922 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fcfb 	bl	8007308 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	2104      	movs	r1, #4
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fcf4 	bl	8007308 <TIM_CCxChannelCmd>
      break;
 8006920:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	f241 1311 	movw	r3, #4369	; 0x1111
 800692c:	4013      	ands	r3, r2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10f      	bne.n	8006952 <HAL_TIM_Encoder_Stop+0x86>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	f240 4344 	movw	r3, #1092	; 0x444
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_TIM_Encoder_Stop+0x86>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_TIM_Encoder_Stop+0x92>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d138      	bne.n	80069d0 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_TIM_Encoder_Stop+0xa2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	e013      	b.n	8006996 <HAL_TIM_Encoder_Stop+0xca>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d104      	bne.n	800697e <HAL_TIM_Encoder_Stop+0xb2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	e00b      	b.n	8006996 <HAL_TIM_Encoder_Stop+0xca>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d104      	bne.n	800698e <HAL_TIM_Encoder_Stop+0xc2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	e003      	b.n	8006996 <HAL_TIM_Encoder_Stop+0xca>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_Encoder_Stop+0xda>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	e024      	b.n	80069f0 <HAL_TIM_Encoder_Stop+0x124>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_Encoder_Stop+0xea>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069b4:	e01c      	b.n	80069f0 <HAL_TIM_Encoder_Stop+0x124>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_Encoder_Stop+0xfa>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	e014      	b.n	80069f0 <HAL_TIM_Encoder_Stop+0x124>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ce:	e00f      	b.n	80069f0 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a1a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a22:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d110      	bne.n	8006a4c <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a30:	7b7b      	ldrb	r3, [r7, #13]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e089      	b.n	8006b4e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4a:	e031      	b.n	8006ab0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d110      	bne.n	8006a74 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d102      	bne.n	8006a5e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a58:	7b3b      	ldrb	r3, [r7, #12]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d001      	beq.n	8006a62 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e075      	b.n	8006b4e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a72:	e01d      	b.n	8006ab0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d108      	bne.n	8006a8c <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d105      	bne.n	8006a8c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a80:	7b7b      	ldrb	r3, [r7, #13]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d102      	bne.n	8006a8c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a86:	7b3b      	ldrb	r3, [r7, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e05e      	b.n	8006b4e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_Encoder_Start_IT+0xc4>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d010      	beq.n	8006ade <HAL_TIM_Encoder_Start_IT+0xe4>
 8006abc:	e01f      	b.n	8006afe <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fc1e 	bl	8007308 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0202 	orr.w	r2, r2, #2
 8006ada:	60da      	str	r2, [r3, #12]
      break;
 8006adc:	e02e      	b.n	8006b3c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	2104      	movs	r1, #4
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fc0e 	bl	8007308 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0204 	orr.w	r2, r2, #4
 8006afa:	60da      	str	r2, [r3, #12]
      break;
 8006afc:	e01e      	b.n	8006b3c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2201      	movs	r2, #1
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fbfe 	bl	8007308 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	2104      	movs	r1, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fbf7 	bl	8007308 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0202 	orr.w	r2, r2, #2
 8006b28:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0204 	orr.w	r2, r2, #4
 8006b38:	60da      	str	r2, [r3, #12]
      break;
 8006b3a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d122      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d11b      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0202 	mvn.w	r2, #2
 8006b82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9b0 	bl	8006efe <HAL_TIM_IC_CaptureCallback>
 8006b9e:	e005      	b.n	8006bac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9a3 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9b2 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d122      	bne.n	8006c06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d11b      	bne.n	8006c06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f06f 0204 	mvn.w	r2, #4
 8006bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f986 	bl	8006efe <HAL_TIM_IC_CaptureCallback>
 8006bf2:	e005      	b.n	8006c00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f979 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f988 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d122      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d11b      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0208 	mvn.w	r2, #8
 8006c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f95c 	bl	8006efe <HAL_TIM_IC_CaptureCallback>
 8006c46:	e005      	b.n	8006c54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f94f 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f95e 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d122      	bne.n	8006cae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d11b      	bne.n	8006cae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f06f 0210 	mvn.w	r2, #16
 8006c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2208      	movs	r2, #8
 8006c84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f932 	bl	8006efe <HAL_TIM_IC_CaptureCallback>
 8006c9a:	e005      	b.n	8006ca8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f925 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f934 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10e      	bne.n	8006cda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d107      	bne.n	8006cda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f06f 0201 	mvn.w	r2, #1
 8006cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fd fa13 	bl	8004100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d10e      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb8c 	bl	800741e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d10e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d107      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8f8 	bl	8006f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d10e      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f06f 0220 	mvn.w	r2, #32
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb57 	bl	800740c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e0ae      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b0c      	cmp	r3, #12
 8006d92:	f200 809f 	bhi.w	8006ed4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dd1 	.word	0x08006dd1
 8006da0:	08006ed5 	.word	0x08006ed5
 8006da4:	08006ed5 	.word	0x08006ed5
 8006da8:	08006ed5 	.word	0x08006ed5
 8006dac:	08006e11 	.word	0x08006e11
 8006db0:	08006ed5 	.word	0x08006ed5
 8006db4:	08006ed5 	.word	0x08006ed5
 8006db8:	08006ed5 	.word	0x08006ed5
 8006dbc:	08006e53 	.word	0x08006e53
 8006dc0:	08006ed5 	.word	0x08006ed5
 8006dc4:	08006ed5 	.word	0x08006ed5
 8006dc8:	08006ed5 	.word	0x08006ed5
 8006dcc:	08006e93 	.word	0x08006e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f90e 	bl	8006ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0208 	orr.w	r2, r2, #8
 8006dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0204 	bic.w	r2, r2, #4
 8006dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6999      	ldr	r1, [r3, #24]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	619a      	str	r2, [r3, #24]
      break;
 8006e0e:	e064      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 f954 	bl	80070c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6999      	ldr	r1, [r3, #24]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	619a      	str	r2, [r3, #24]
      break;
 8006e50:	e043      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f99d 	bl	8007198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0208 	orr.w	r2, r2, #8
 8006e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0204 	bic.w	r2, r2, #4
 8006e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69d9      	ldr	r1, [r3, #28]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	61da      	str	r2, [r3, #28]
      break;
 8006e90:	e023      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f9e7 	bl	800726c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69d9      	ldr	r1, [r3, #28]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	021a      	lsls	r2, r3, #8
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	61da      	str	r2, [r3, #28]
      break;
 8006ed2:	e002      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a29      	ldr	r2, [pc, #164]	; (8006fec <TIM_Base_SetConfig+0xb8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0x30>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0x30>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <TIM_Base_SetConfig+0xbc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x30>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <TIM_Base_SetConfig+0xc0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <TIM_Base_SetConfig+0xb8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0x62>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0x62>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <TIM_Base_SetConfig+0xbc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0x62>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_Base_SetConfig+0xc0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a07      	ldr	r2, [pc, #28]	; (8006fec <TIM_Base_SetConfig+0xb8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d103      	bne.n	8006fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800

08006ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f023 0201 	bic.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 0302 	bic.w	r3, r3, #2
 8007040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <TIM_OC1_SetConfig+0xc8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10c      	bne.n	800706e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0308 	bic.w	r3, r3, #8
 800705a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <TIM_OC1_SetConfig+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d111      	bne.n	800709a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800707c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40012c00 	.word	0x40012c00

080070c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f023 0210 	bic.w	r2, r3, #16
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0320 	bic.w	r3, r3, #32
 800710e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <TIM_OC2_SetConfig+0xd0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d10d      	bne.n	8007140 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800712a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a14      	ldr	r2, [pc, #80]	; (8007194 <TIM_OC2_SetConfig+0xd0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d113      	bne.n	8007170 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800714e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40012c00 	.word	0x40012c00

08007198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <TIM_OC3_SetConfig+0xd0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d10d      	bne.n	8007212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a14      	ldr	r2, [pc, #80]	; (8007268 <TIM_OC3_SetConfig+0xd0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d113      	bne.n	8007242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40012c00 	.word	0x40012c00

0800726c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	031b      	lsls	r3, r3, #12
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <TIM_OC4_SetConfig+0x98>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d109      	bne.n	80072e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	019b      	lsls	r3, r3, #6
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	40012c00 	.word	0x40012c00

08007308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	2201      	movs	r2, #1
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	431a      	orrs	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007364:	2302      	movs	r3, #2
 8007366:	e046      	b.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a16      	ldr	r2, [pc, #88]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b4:	d009      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a12      	ldr	r2, [pc, #72]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a10      	ldr	r2, [pc, #64]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10c      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800

0800740c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr

08007430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e042      	b.n	80074c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fc ffbe 	bl	80043d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2224      	movs	r2, #36	; 0x24
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fdbb 	bl	8007ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d16d      	bne.n	80075cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_UART_Transmit+0x2c>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e066      	b.n	80075ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2221      	movs	r2, #33	; 0x21
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800750e:	f7fd f8c5 	bl	800469c <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88fa      	ldrh	r2, [r7, #6]
 8007518:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	88fa      	ldrh	r2, [r7, #6]
 800751e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007528:	d108      	bne.n	800753c <HAL_UART_Transmit+0x6c>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e003      	b.n	8007544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007544:	e02a      	b.n	800759c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fb0b 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e036      	b.n	80075ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	3302      	adds	r3, #2
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e007      	b.n	800758e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1cf      	bne.n	8007546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2140      	movs	r1, #64	; 0x40
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fadb 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e006      	b.n	80075ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d112      	bne.n	8007616 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Receive_IT+0x26>
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e00b      	b.n	8007618 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fb1b 	bl	8007c48 <UART_Start_Receive_IT>
 8007612:	4603      	mov	r3, r0
 8007614:	e000      	b.n	8007618 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007616:	2302      	movs	r3, #2
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b0ba      	sub	sp, #232	; 0xe8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007646:	2300      	movs	r3, #0
 8007648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800764c:	2300      	movs	r3, #0
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800765e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10f      	bne.n	8007686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
 8007672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fbf8 	bl	8007e74 <UART_Receive_IT>
      return;
 8007684:	e25b      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80de 	beq.w	800784c <HAL_UART_IRQHandler+0x22c>
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80d1 	beq.w	800784c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
 80076b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f043 0201 	orr.w	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
 8007722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800772e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	f043 0208 	orr.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 81f2 	beq.w	8007b34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb83 	bl	8007e74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_UART_IRQHandler+0x17a>
 8007792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa8d 	bl	8007cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d041      	beq.n	8007832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007806:	4a7e      	ldr	r2, [pc, #504]	; (8007a00 <HAL_UART_IRQHandler+0x3e0>)
 8007808:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	4618      	mov	r0, r3
 8007810:	f7fd ff0c 	bl	800562c <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e00e      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fc f838 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	e00a      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fc f834 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	e006      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fc f830 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007846:	e175      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	bf00      	nop
    return;
 800784a:	e173      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	2b01      	cmp	r3, #1
 8007852:	f040 814f 	bne.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8148 	beq.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8141 	beq.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80b6 	beq.w	8007a04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8145 	beq.w	8007b38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f080 813e 	bcs.w	8007b38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	f000 8088 	beq.w	80079e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007908:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1d9      	bne.n	80078d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800792c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007940:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007944:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007948:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e1      	bne.n	800791c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3314      	adds	r3, #20
 800795e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3314      	adds	r3, #20
 8007978:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800797c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800797e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007982:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800798a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e3      	bne.n	8007958 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	330c      	adds	r3, #12
 80079a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b0:	f023 0310 	bic.w	r3, r3, #16
 80079b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80079c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e3      	bne.n	800799e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fd fdeb 	bl	80055b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f8ad 	bl	8007b56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079fc:	e09c      	b.n	8007b38 <HAL_UART_IRQHandler+0x518>
 80079fe:	bf00      	nop
 8007a00:	08007d7f 	.word	0x08007d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 808e 	beq.w	8007b3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8089 	beq.w	8007b3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	330c      	adds	r3, #12
 8007a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8007a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e3      	bne.n	8007a2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	623b      	str	r3, [r7, #32]
   return(result);
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3314      	adds	r3, #20
 8007a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a86:	633a      	str	r2, [r7, #48]	; 0x30
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e3      	bne.n	8007a62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007acc:	61fa      	str	r2, [r7, #28]
 8007ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e3      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ae6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f832 	bl	8007b56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007af2:	e023      	b.n	8007b3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_UART_IRQHandler+0x4f4>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f94a 	bl	8007da6 <UART_Transmit_IT>
    return;
 8007b12:	e014      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <HAL_UART_IRQHandler+0x51e>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f989 	bl	8007e44 <UART_EndTransmit_IT>
    return;
 8007b32:	e004      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
    return;
 8007b34:	bf00      	nop
 8007b36:	e002      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007b3c:	bf00      	nop
  }
}
 8007b3e:	37e8      	adds	r7, #232	; 0xe8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr

08007b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b090      	sub	sp, #64	; 0x40
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7c:	e050      	b.n	8007c20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d04c      	beq.n	8007c20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b8c:	f7fc fd86 	bl	800469c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d241      	bcs.n	8007c20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3314      	adds	r3, #20
 8007bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	613b      	str	r3, [r7, #16]
   return(result);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3314      	adds	r3, #20
 8007bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf0:	623a      	str	r2, [r7, #32]
 8007bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69f9      	ldr	r1, [r7, #28]
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e5      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e00f      	b.n	8007c40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bf0c      	ite	eq
 8007c30:	2301      	moveq	r3, #1
 8007c32:	2300      	movne	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d09f      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3740      	adds	r7, #64	; 0x40
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	88fa      	ldrh	r2, [r7, #6]
 8007c60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2222      	movs	r2, #34	; 0x22
 8007c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0220 	orr.w	r2, r2, #32
 8007cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr

08007cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b095      	sub	sp, #84	; 0x54
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ce2:	643a      	str	r2, [r7, #64]	; 0x40
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e5      	bne.n	8007cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3314      	adds	r3, #20
 8007cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3314      	adds	r3, #20
 8007d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d119      	bne.n	8007d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f023 0310 	bic.w	r3, r3, #16
 8007d48:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	330c      	adds	r3, #12
 8007d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d52:	61ba      	str	r2, [r7, #24]
 8007d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6979      	ldr	r1, [r7, #20]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e5      	bne.n	8007d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d74:	bf00      	nop
 8007d76:	3754      	adds	r7, #84	; 0x54
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr

08007d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7fb fd81 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b21      	cmp	r3, #33	; 0x21
 8007db8:	d13e      	bne.n	8007e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc2:	d114      	bne.n	8007dee <UART_Transmit_IT+0x48>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d110      	bne.n	8007dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	1c9a      	adds	r2, r3, #2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	621a      	str	r2, [r3, #32]
 8007dec:	e008      	b.n	8007e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	1c59      	adds	r1, r3, #1
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6211      	str	r1, [r2, #32]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10f      	bne.n	8007e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fe6d 	bl	8007b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08c      	sub	sp, #48	; 0x30
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b22      	cmp	r3, #34	; 0x22
 8007e86:	f040 80ae 	bne.w	8007fe6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e92:	d117      	bne.n	8007ec4 <UART_Receive_IT+0x50>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d113      	bne.n	8007ec4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	1c9a      	adds	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8007ec2:	e026      	b.n	8007f12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed6:	d007      	beq.n	8007ee8 <UART_Receive_IT+0x74>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <UART_Receive_IT+0x82>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e008      	b.n	8007f08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d15d      	bne.n	8007fe2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0220 	bic.w	r2, r2, #32
 8007f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0201 	bic.w	r2, r2, #1
 8007f54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d135      	bne.n	8007fd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	613b      	str	r3, [r7, #16]
   return(result);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f023 0310 	bic.w	r3, r3, #16
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	330c      	adds	r3, #12
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	623a      	str	r2, [r7, #32]
 8007f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	69f9      	ldr	r1, [r7, #28]
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d10a      	bne.n	8007fca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fdc0 	bl	8007b56 <HAL_UARTEx_RxEventCallback>
 8007fd6:	e002      	b.n	8007fde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fb fcb7 	bl	800394c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e002      	b.n	8007fe8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e000      	b.n	8007fe8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007fe6:	2302      	movs	r3, #2
  }
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3730      	adds	r7, #48	; 0x30
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800802a:	f023 030c 	bic.w	r3, r3, #12
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	430b      	orrs	r3, r1
 8008036:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a2c      	ldr	r2, [pc, #176]	; (8008104 <UART_SetConfig+0x114>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d103      	bne.n	8008060 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008058:	f7fe f90a 	bl	8006270 <HAL_RCC_GetPCLK2Freq>
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	e002      	b.n	8008066 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008060:	f7fe f8f2 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 8008064:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009a      	lsls	r2, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	fbb2 f3f3 	udiv	r3, r2, r3
 800807c:	4a22      	ldr	r2, [pc, #136]	; (8008108 <UART_SetConfig+0x118>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	0119      	lsls	r1, r3, #4
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009a      	lsls	r2, r3, #2
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	fbb2 f2f3 	udiv	r2, r2, r3
 800809c:	4b1a      	ldr	r3, [pc, #104]	; (8008108 <UART_SetConfig+0x118>)
 800809e:	fba3 0302 	umull	r0, r3, r3, r2
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	2064      	movs	r0, #100	; 0x64
 80080a6:	fb00 f303 	mul.w	r3, r0, r3
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	3332      	adds	r3, #50	; 0x32
 80080b0:	4a15      	ldr	r2, [pc, #84]	; (8008108 <UART_SetConfig+0x118>)
 80080b2:	fba2 2303 	umull	r2, r3, r2, r3
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080bc:	4419      	add	r1, r3
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009a      	lsls	r2, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <UART_SetConfig+0x118>)
 80080d6:	fba3 0302 	umull	r0, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	2064      	movs	r0, #100	; 0x64
 80080de:	fb00 f303 	mul.w	r3, r0, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	3332      	adds	r3, #50	; 0x32
 80080e8:	4a07      	ldr	r2, [pc, #28]	; (8008108 <UART_SetConfig+0x118>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	440a      	add	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40013800 	.word	0x40013800
 8008108:	51eb851f 	.word	0x51eb851f

0800810c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800811a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800811e:	2b84      	cmp	r3, #132	; 0x84
 8008120:	d005      	beq.n	800812e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	3303      	adds	r3, #3
 800812c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800812e:	68fb      	ldr	r3, [r7, #12]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800813e:	f000 ff3b 	bl	8008fb8 <vTaskStartScheduler>
  
  return osOK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	bd80      	pop	{r7, pc}

08008148 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	b089      	sub	sp, #36	; 0x24
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d020      	beq.n	800819c <osThreadCreate+0x54>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d01c      	beq.n	800819c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685c      	ldr	r4, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691e      	ldr	r6, [r3, #16]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ffc9 	bl	800810c <makeFreeRtosPriority>
 800817a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008184:	9202      	str	r2, [sp, #8]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9100      	str	r1, [sp, #0]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	4632      	mov	r2, r6
 800818e:	4629      	mov	r1, r5
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fd3b 	bl	8008c0c <xTaskCreateStatic>
 8008196:	4603      	mov	r3, r0
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e01c      	b.n	80081d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685c      	ldr	r4, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081a8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ffab 	bl	800810c <makeFreeRtosPriority>
 80081b6:	4602      	mov	r2, r0
 80081b8:	f107 030c 	add.w	r3, r7, #12
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	9200      	str	r2, [sp, #0]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	4632      	mov	r2, r6
 80081c4:	4629      	mov	r1, r5
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 fd7c 	bl	8008cc4 <xTaskCreate>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d001      	beq.n	80081d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081d6:	68fb      	ldr	r3, [r7, #12]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <osDelay+0x16>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	e000      	b.n	80081f8 <osDelay+0x18>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fea9 	bl	8008f50 <vTaskDelay>
  
  return osOK;
 80081fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b085      	sub	sp, #20
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d011      	beq.n	800823e <osMessageCreate+0x36>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2400      	movs	r4, #0
 8008234:	9400      	str	r4, [sp, #0]
 8008236:	f000 f927 	bl	8008488 <xQueueGenericCreateStatic>
 800823a:	4603      	mov	r3, r0
 800823c:	e008      	b.n	8008250 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	4619      	mov	r1, r3
 800824a:	f000 f994 	bl	8008576 <xQueueGenericCreate>
 800824e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bd90      	pop	{r4, r7, pc}

08008258 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f103 0208 	add.w	r2, r3, #8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f103 0208 	add.w	r2, r3, #8
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0208 	add.w	r2, r3, #8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr

08008296 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc80      	pop	{r7}
 80082ac:	4770      	bx	lr

080082ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d103      	bne.n	8008314 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e00c      	b.n	800832e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3308      	adds	r3, #8
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	e002      	b.n	8008322 <vListInsert+0x2e>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	429a      	cmp	r2, r3
 800832c:	d2f6      	bcs.n	800831c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6892      	ldr	r2, [r2, #8]
 800837a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6852      	ldr	r2, [r2, #4]
 8008384:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d103      	bne.n	8008398 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr
	...

080083b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083e2:	f001 fd43 	bl	8009e6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	441a      	add	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	3b01      	subs	r3, #1
 8008414:	68f9      	ldr	r1, [r7, #12]
 8008416:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	441a      	add	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d114      	bne.n	8008462 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01a      	beq.n	8008476 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3310      	adds	r3, #16
 8008444:	4618      	mov	r0, r3
 8008446:	f001 f81f 	bl	8009488 <xTaskRemoveFromEventList>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d012      	beq.n	8008476 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008450:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <xQueueGenericReset+0xcc>)
 8008452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	e009      	b.n	8008476 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3310      	adds	r3, #16
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fef6 	bl	8008258 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3324      	adds	r3, #36	; 0x24
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fef1 	bl	8008258 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008476:	f001 fd29 	bl	8009ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800847a:	2301      	movs	r3, #1
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <xQueueGenericCreateStatic+0x52>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <xQueueGenericCreateStatic+0x56>
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <xQueueGenericCreateStatic+0x58>
 80084de:	2300      	movs	r3, #0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	623b      	str	r3, [r7, #32]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <xQueueGenericCreateStatic+0x7e>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <xQueueGenericCreateStatic+0x82>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <xQueueGenericCreateStatic+0x84>
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	61fb      	str	r3, [r7, #28]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008526:	2348      	movs	r3, #72	; 0x48
 8008528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2b48      	cmp	r3, #72	; 0x48
 800852e:	d00a      	beq.n	8008546 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	61bb      	str	r3, [r7, #24]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00d      	beq.n	800856c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008558:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f843 	bl	80085f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800856e:	4618      	mov	r0, r3
 8008570:	3730      	adds	r7, #48	; 0x30
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008576:	b580      	push	{r7, lr}
 8008578:	b08a      	sub	sp, #40	; 0x28
 800857a:	af02      	add	r7, sp, #8
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	4613      	mov	r3, r2
 8008582:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	e004      	b.n	80085b6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	3348      	adds	r3, #72	; 0x48
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fd56 	bl	800a06c <pvPortMalloc>
 80085c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00f      	beq.n	80085e8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	3348      	adds	r3, #72	; 0x48
 80085cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085d6:	79fa      	ldrb	r2, [r7, #7]
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	68b9      	ldr	r1, [r7, #8]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f805 	bl	80085f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80085e8:	69bb      	ldr	r3, [r7, #24]
	}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e002      	b.n	8008614 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008620:	2101      	movs	r1, #1
 8008622:	69b8      	ldr	r0, [r7, #24]
 8008624:	f7ff fec8 	bl	80083b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800863e:	2300      	movs	r3, #0
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xQueueGenericSend+0x32>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <xQueueGenericSend+0x40>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <xQueueGenericSend+0x44>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <xQueueGenericSend+0x46>
 8008674:	2300      	movs	r3, #0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <xQueueGenericSend+0x60>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d103      	bne.n	800869e <xQueueGenericSend+0x6e>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <xQueueGenericSend+0x72>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericSend+0x74>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericSend+0x8e>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	623b      	str	r3, [r7, #32]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086be:	f001 f8a7 	bl	8009810 <xTaskGetSchedulerState>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <xQueueGenericSend+0x9e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xQueueGenericSend+0xa2>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueGenericSend+0xa4>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericSend+0xbe>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	61fb      	str	r3, [r7, #28]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ee:	f001 fbbd 	bl	8009e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <xQueueGenericSend+0xd4>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d129      	bne.n	8008758 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800870a:	f000 f96f 	bl	80089ec <prvCopyDataToQueue>
 800870e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d010      	beq.n	800873a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	4618      	mov	r0, r3
 800871e:	f000 feb3 	bl	8009488 <xTaskRemoveFromEventList>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d013      	beq.n	8008750 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008728:	4b3f      	ldr	r3, [pc, #252]	; (8008828 <xQueueGenericSend+0x1f8>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	e00a      	b.n	8008750 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008740:	4b39      	ldr	r3, [pc, #228]	; (8008828 <xQueueGenericSend+0x1f8>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008750:	f001 fbbc 	bl	8009ecc <vPortExitCritical>
				return pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	e063      	b.n	8008820 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800875e:	f001 fbb5 	bl	8009ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008762:	2300      	movs	r3, #0
 8008764:	e05c      	b.n	8008820 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4618      	mov	r0, r3
 8008772:	f000 feeb 	bl	800954c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800877a:	f001 fba7 	bl	8009ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800877e:	f000 fc85 	bl	800908c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008782:	f001 fb73 	bl	8009e6c <vPortEnterCritical>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800878c:	b25b      	sxtb	r3, r3
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d103      	bne.n	800879c <xQueueGenericSend+0x16c>
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d103      	bne.n	80087b2 <xQueueGenericSend+0x182>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b2:	f001 fb8b 	bl	8009ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087b6:	1d3a      	adds	r2, r7, #4
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 feda 	bl	8009578 <xTaskCheckForTimeOut>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d124      	bne.n	8008814 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087cc:	f000 fa06 	bl	8008bdc <prvIsQueueFull>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d018      	beq.n	8008808 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	3310      	adds	r3, #16
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fe2e 	bl	8009440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e6:	f000 f991 	bl	8008b0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ea:	f000 fc5d 	bl	80090a8 <xTaskResumeAll>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af7c 	bne.w	80086ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <xQueueGenericSend+0x1f8>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	e772      	b.n	80086ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800880a:	f000 f97f 	bl	8008b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800880e:	f000 fc4b 	bl	80090a8 <xTaskResumeAll>
 8008812:	e76c      	b.n	80086ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 f979 	bl	8008b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800881a:	f000 fc45 	bl	80090a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800881e:	2300      	movs	r3, #0
		}
	}
}
 8008820:	4618      	mov	r0, r3
 8008822:	3738      	adds	r7, #56	; 0x38
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08c      	sub	sp, #48	; 0x30
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008838:	2300      	movs	r3, #0
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <xQueueReceive+0x30>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	623b      	str	r3, [r7, #32]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <xQueueReceive+0x3e>
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <xQueueReceive+0x42>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueReceive+0x44>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <xQueueReceive+0x5e>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	61fb      	str	r3, [r7, #28]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800888a:	f000 ffc1 	bl	8009810 <xTaskGetSchedulerState>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <xQueueReceive+0x6e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <xQueueReceive+0x72>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueReceive+0x74>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueReceive+0x8e>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	61bb      	str	r3, [r7, #24]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ba:	f001 fad7 	bl	8009e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01f      	beq.n	800890a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ce:	f000 f8f7 	bl	8008ac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	1e5a      	subs	r2, r3, #1
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00f      	beq.n	8008902 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	3310      	adds	r3, #16
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fdce 	bl	8009488 <xTaskRemoveFromEventList>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088f2:	4b3d      	ldr	r3, [pc, #244]	; (80089e8 <xQueueReceive+0x1bc>)
 80088f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008902:	f001 fae3 	bl	8009ecc <vPortExitCritical>
				return pdPASS;
 8008906:	2301      	movs	r3, #1
 8008908:	e069      	b.n	80089de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008910:	f001 fadc 	bl	8009ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008914:	2300      	movs	r3, #0
 8008916:	e062      	b.n	80089de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800891e:	f107 0310 	add.w	r3, r7, #16
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fe12 	bl	800954c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008928:	2301      	movs	r3, #1
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800892c:	f001 face 	bl	8009ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008930:	f000 fbac 	bl	800908c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008934:	f001 fa9a 	bl	8009e6c <vPortEnterCritical>
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800893e:	b25b      	sxtb	r3, r3
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d103      	bne.n	800894e <xQueueReceive+0x122>
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008954:	b25b      	sxtb	r3, r3
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d103      	bne.n	8008964 <xQueueReceive+0x138>
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008964:	f001 fab2 	bl	8009ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008968:	1d3a      	adds	r2, r7, #4
 800896a:	f107 0310 	add.w	r3, r7, #16
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fe01 	bl	8009578 <xTaskCheckForTimeOut>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d123      	bne.n	80089c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800897c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897e:	f000 f917 	bl	8008bb0 <prvIsQueueEmpty>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d017      	beq.n	80089b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	3324      	adds	r3, #36	; 0x24
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fd55 	bl	8009440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008998:	f000 f8b8 	bl	8008b0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800899c:	f000 fb84 	bl	80090a8 <xTaskResumeAll>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d189      	bne.n	80088ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <xQueueReceive+0x1bc>)
 80089a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	e780      	b.n	80088ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ba:	f000 f8a7 	bl	8008b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089be:	f000 fb73 	bl	80090a8 <xTaskResumeAll>
 80089c2:	e77a      	b.n	80088ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c6:	f000 f8a1 	bl	8008b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ca:	f000 fb6d 	bl	80090a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d0:	f000 f8ee 	bl	8008bb0 <prvIsQueueEmpty>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f43f af6f 	beq.w	80088ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3730      	adds	r7, #48	; 0x30
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d14d      	bne.n	8008aae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 ff18 	bl	800984c <xTaskPriorityDisinherit>
 8008a1c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	e043      	b.n	8008aae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d119      	bne.n	8008a60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6898      	ldr	r0, [r3, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	461a      	mov	r2, r3
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	f001 fe5c 	bl	800a6f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	441a      	add	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d32b      	bcc.n	8008aae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	609a      	str	r2, [r3, #8]
 8008a5e:	e026      	b.n	8008aae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	68d8      	ldr	r0, [r3, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	f001 fe42 	bl	800a6f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	425b      	negs	r3, r3
 8008a7a:	441a      	add	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d207      	bcs.n	8008a9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	425b      	negs	r3, r3
 8008a96:	441a      	add	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d105      	bne.n	8008aae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ab6:	697b      	ldr	r3, [r7, #20]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d018      	beq.n	8008b04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	441a      	add	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d303      	bcc.n	8008af4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68d9      	ldr	r1, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	461a      	mov	r2, r3
 8008afe:	6838      	ldr	r0, [r7, #0]
 8008b00:	f001 fdf8 	bl	800a6f4 <memcpy>
	}
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b14:	f001 f9aa 	bl	8009e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b20:	e011      	b.n	8008b46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d012      	beq.n	8008b50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3324      	adds	r3, #36	; 0x24
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fcaa 	bl	8009488 <xTaskRemoveFromEventList>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b3a:	f000 fd7f 	bl	800963c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dce9      	bgt.n	8008b22 <prvUnlockQueue+0x16>
 8008b4e:	e000      	b.n	8008b52 <prvUnlockQueue+0x46>
					break;
 8008b50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b5a:	f001 f9b7 	bl	8009ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b5e:	f001 f985 	bl	8009e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b6a:	e011      	b.n	8008b90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3310      	adds	r3, #16
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fc85 	bl	8009488 <xTaskRemoveFromEventList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b84:	f000 fd5a 	bl	800963c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dce9      	bgt.n	8008b6c <prvUnlockQueue+0x60>
 8008b98:	e000      	b.n	8008b9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	22ff      	movs	r2, #255	; 0xff
 8008ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ba4:	f001 f992 	bl	8009ecc <vPortExitCritical>
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb8:	f001 f958 	bl	8009e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	e001      	b.n	8008bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bce:	f001 f97d 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008be4:	f001 f942 	bl	8009e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d102      	bne.n	8008bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e001      	b.n	8008bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bfe:	f001 f965 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 8008c02:	68fb      	ldr	r3, [r7, #12]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	623b      	str	r3, [r7, #32]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	61fb      	str	r3, [r7, #28]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c52:	23a0      	movs	r3, #160	; 0xa0
 8008c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2ba0      	cmp	r3, #160	; 0xa0
 8008c5a:	d00a      	beq.n	8008c72 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	61bb      	str	r3, [r7, #24]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01e      	beq.n	8008cb6 <xTaskCreateStatic+0xaa>
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01b      	beq.n	8008cb6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c90:	2300      	movs	r3, #0
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f851 	bl	8008d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cb0:	f000 f8e4 	bl	8008e7c <prvAddNewTaskToReadyList>
 8008cb4:	e001      	b.n	8008cba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cba:	697b      	ldr	r3, [r7, #20]
	}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3728      	adds	r7, #40	; 0x28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08c      	sub	sp, #48	; 0x30
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 f9c7 	bl	800a06c <pvPortMalloc>
 8008cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00e      	beq.n	8008d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008ce6:	20a0      	movs	r0, #160	; 0xa0
 8008ce8:	f001 f9c0 	bl	800a06c <pvPortMalloc>
 8008cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8008cfa:	e005      	b.n	8008d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	f001 fa79 	bl	800a1f4 <vPortFree>
 8008d02:	e001      	b.n	8008d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d16:	88fa      	ldrh	r2, [r7, #6]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9303      	str	r3, [sp, #12]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f80f 	bl	8008d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d32:	69f8      	ldr	r0, [r7, #28]
 8008d34:	f000 f8a2 	bl	8008e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	e002      	b.n	8008d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d44:	69bb      	ldr	r3, [r7, #24]
	}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	e012      	b.n	8008dc4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	7819      	ldrb	r1, [r3, #0]
 8008da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	4413      	add	r3, r2
 8008dac:	3334      	adds	r3, #52	; 0x34
 8008dae:	460a      	mov	r2, r1
 8008db0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d006      	beq.n	8008dcc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	61fb      	str	r3, [r7, #28]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d9e9      	bls.n	8008d9e <prvInitialiseNewTask+0x4e>
 8008dca:	e000      	b.n	8008dce <prvInitialiseNewTask+0x7e>
		{
			break;
 8008dcc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2b06      	cmp	r3, #6
 8008dda:	d901      	bls.n	8008de0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ddc:	2306      	movs	r3, #6
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	2200      	movs	r2, #0
 8008df0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	3304      	adds	r3, #4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fa4d 	bl	8008296 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	3318      	adds	r3, #24
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fa48 	bl	8008296 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	f1c3 0207 	rsb	r2, r3, #7
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	334c      	adds	r3, #76	; 0x4c
 8008e30:	224c      	movs	r2, #76	; 0x4c
 8008e32:	2100      	movs	r1, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 fbd9 	bl	800a5ec <memset>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	4a0c      	ldr	r2, [pc, #48]	; (8008e70 <prvInitialiseNewTask+0x120>)
 8008e3e:	651a      	str	r2, [r3, #80]	; 0x50
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <prvInitialiseNewTask+0x124>)
 8008e44:	655a      	str	r2, [r3, #84]	; 0x54
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	4a0b      	ldr	r2, [pc, #44]	; (8008e78 <prvInitialiseNewTask+0x128>)
 8008e4a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	69b8      	ldr	r0, [r7, #24]
 8008e52:	f000 ff17 	bl	8009c84 <pxPortInitialiseStack>
 8008e56:	4602      	mov	r2, r0
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e68:	bf00      	nop
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200019c0 	.word	0x200019c0
 8008e74:	20001a28 	.word	0x20001a28
 8008e78:	20001a90 	.word	0x20001a90

08008e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e84:	f000 fff2 	bl	8009e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e88:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <prvAddNewTaskToReadyList+0xb8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <prvAddNewTaskToReadyList+0xb8>)
 8008e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e92:	4b29      	ldr	r3, [pc, #164]	; (8008f38 <prvAddNewTaskToReadyList+0xbc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e9a:	4a27      	ldr	r2, [pc, #156]	; (8008f38 <prvAddNewTaskToReadyList+0xbc>)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ea0:	4b24      	ldr	r3, [pc, #144]	; (8008f34 <prvAddNewTaskToReadyList+0xb8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d110      	bne.n	8008eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ea8:	f000 fbec 	bl	8009684 <prvInitialiseTaskLists>
 8008eac:	e00d      	b.n	8008eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008eae:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <prvAddNewTaskToReadyList+0xc0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eb6:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <prvAddNewTaskToReadyList+0xbc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d802      	bhi.n	8008eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <prvAddNewTaskToReadyList+0xbc>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eca:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <prvAddNewTaskToReadyList+0xc4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <prvAddNewTaskToReadyList+0xc4>)
 8008ed2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	2201      	movs	r2, #1
 8008eda:	409a      	lsls	r2, r3
 8008edc:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <prvAddNewTaskToReadyList+0xc8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	4a18      	ldr	r2, [pc, #96]	; (8008f44 <prvAddNewTaskToReadyList+0xc8>)
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4a15      	ldr	r2, [pc, #84]	; (8008f48 <prvAddNewTaskToReadyList+0xcc>)
 8008ef4:	441a      	add	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f7ff f9d6 	bl	80082ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f02:	f000 ffe3 	bl	8009ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <prvAddNewTaskToReadyList+0xc0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00e      	beq.n	8008f2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <prvAddNewTaskToReadyList+0xbc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d207      	bcs.n	8008f2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f1c:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <prvAddNewTaskToReadyList+0xd0>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20000d74 	.word	0x20000d74
 8008f38:	20000c74 	.word	0x20000c74
 8008f3c:	20000d80 	.word	0x20000d80
 8008f40:	20000d90 	.word	0x20000d90
 8008f44:	20000d7c 	.word	0x20000d7c
 8008f48:	20000c78 	.word	0x20000c78
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d017      	beq.n	8008f92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f62:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <vTaskDelay+0x60>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <vTaskDelay+0x30>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60bb      	str	r3, [r7, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f80:	f000 f884 	bl	800908c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f84:	2100      	movs	r1, #0
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fe16 	bl	8009bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f8c:	f000 f88c 	bl	80090a8 <xTaskResumeAll>
 8008f90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d107      	bne.n	8008fa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <vTaskDelay+0x64>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000d9c 	.word	0x20000d9c
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	1d39      	adds	r1, r7, #4
 8008fca:	f107 0308 	add.w	r3, r7, #8
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fa fa26 	bl	8003420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	9202      	str	r2, [sp, #8]
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	4921      	ldr	r1, [pc, #132]	; (800906c <vTaskStartScheduler+0xb4>)
 8008fe8:	4821      	ldr	r0, [pc, #132]	; (8009070 <vTaskStartScheduler+0xb8>)
 8008fea:	f7ff fe0f 	bl	8008c0c <xTaskCreateStatic>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4a20      	ldr	r2, [pc, #128]	; (8009074 <vTaskStartScheduler+0xbc>)
 8008ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ff4:	4b1f      	ldr	r3, [pc, #124]	; (8009074 <vTaskStartScheduler+0xbc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e001      	b.n	8009006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d11b      	bne.n	8009044 <vTaskStartScheduler+0x8c>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	613b      	str	r3, [r7, #16]
}
 800901e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009020:	4b15      	ldr	r3, [pc, #84]	; (8009078 <vTaskStartScheduler+0xc0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	334c      	adds	r3, #76	; 0x4c
 8009026:	4a15      	ldr	r2, [pc, #84]	; (800907c <vTaskStartScheduler+0xc4>)
 8009028:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800902a:	4b15      	ldr	r3, [pc, #84]	; (8009080 <vTaskStartScheduler+0xc8>)
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009032:	4b14      	ldr	r3, [pc, #80]	; (8009084 <vTaskStartScheduler+0xcc>)
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <vTaskStartScheduler+0xd0>)
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800903e:	f000 fea3 	bl	8009d88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009042:	e00e      	b.n	8009062 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d10a      	bne.n	8009062 <vTaskStartScheduler+0xaa>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	60fb      	str	r3, [r7, #12]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <vTaskStartScheduler+0xa8>
}
 8009062:	bf00      	nop
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	0800b8d8 	.word	0x0800b8d8
 8009070:	08009655 	.word	0x08009655
 8009074:	20000d98 	.word	0x20000d98
 8009078:	20000c74 	.word	0x20000c74
 800907c:	20000060 	.word	0x20000060
 8009080:	20000d94 	.word	0x20000d94
 8009084:	20000d80 	.word	0x20000d80
 8009088:	20000d78 	.word	0x20000d78

0800908c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <vTaskSuspendAll+0x18>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a03      	ldr	r2, [pc, #12]	; (80090a4 <vTaskSuspendAll+0x18>)
 8009098:	6013      	str	r3, [r2, #0]
}
 800909a:	bf00      	nop
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000d9c 	.word	0x20000d9c

080090a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090b6:	4b41      	ldr	r3, [pc, #260]	; (80091bc <xTaskResumeAll+0x114>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	603b      	str	r3, [r7, #0]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090d4:	f000 feca 	bl	8009e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090d8:	4b38      	ldr	r3, [pc, #224]	; (80091bc <xTaskResumeAll+0x114>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3b01      	subs	r3, #1
 80090de:	4a37      	ldr	r2, [pc, #220]	; (80091bc <xTaskResumeAll+0x114>)
 80090e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e2:	4b36      	ldr	r3, [pc, #216]	; (80091bc <xTaskResumeAll+0x114>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d161      	bne.n	80091ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090ea:	4b35      	ldr	r3, [pc, #212]	; (80091c0 <xTaskResumeAll+0x118>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d05d      	beq.n	80091ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090f2:	e02e      	b.n	8009152 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80090f4:	4b33      	ldr	r3, [pc, #204]	; (80091c4 <xTaskResumeAll+0x11c>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3318      	adds	r3, #24
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff f92f 	bl	8008364 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3304      	adds	r3, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f92a 	bl	8008364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	2201      	movs	r2, #1
 8009116:	409a      	lsls	r2, r3
 8009118:	4b2b      	ldr	r3, [pc, #172]	; (80091c8 <xTaskResumeAll+0x120>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4313      	orrs	r3, r2
 800911e:	4a2a      	ldr	r2, [pc, #168]	; (80091c8 <xTaskResumeAll+0x120>)
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4a27      	ldr	r2, [pc, #156]	; (80091cc <xTaskResumeAll+0x124>)
 8009130:	441a      	add	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3304      	adds	r3, #4
 8009136:	4619      	mov	r1, r3
 8009138:	4610      	mov	r0, r2
 800913a:	f7ff f8b8 	bl	80082ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4b23      	ldr	r3, [pc, #140]	; (80091d0 <xTaskResumeAll+0x128>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	429a      	cmp	r2, r3
 800914a:	d302      	bcc.n	8009152 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800914c:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <xTaskResumeAll+0x12c>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <xTaskResumeAll+0x11c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1cc      	bne.n	80090f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009160:	f000 fb32 	bl	80097c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009164:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <xTaskResumeAll+0x130>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d010      	beq.n	8009192 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009170:	f000 f836 	bl	80091e0 <xTaskIncrementTick>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800917a:	4b16      	ldr	r3, [pc, #88]	; (80091d4 <xTaskResumeAll+0x12c>)
 800917c:	2201      	movs	r2, #1
 800917e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3b01      	subs	r3, #1
 8009184:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f1      	bne.n	8009170 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800918c:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <xTaskResumeAll+0x130>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009192:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <xTaskResumeAll+0x12c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800919a:	2301      	movs	r3, #1
 800919c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800919e:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <xTaskResumeAll+0x134>)
 80091a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091ae:	f000 fe8d 	bl	8009ecc <vPortExitCritical>

	return xAlreadyYielded;
 80091b2:	68bb      	ldr	r3, [r7, #8]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	20000d9c 	.word	0x20000d9c
 80091c0:	20000d74 	.word	0x20000d74
 80091c4:	20000d34 	.word	0x20000d34
 80091c8:	20000d7c 	.word	0x20000d7c
 80091cc:	20000c78 	.word	0x20000c78
 80091d0:	20000c74 	.word	0x20000c74
 80091d4:	20000d88 	.word	0x20000d88
 80091d8:	20000d84 	.word	0x20000d84
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ea:	4b51      	ldr	r3, [pc, #324]	; (8009330 <xTaskIncrementTick+0x150>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f040 808d 	bne.w	800930e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091f4:	4b4f      	ldr	r3, [pc, #316]	; (8009334 <xTaskIncrementTick+0x154>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091fc:	4a4d      	ldr	r2, [pc, #308]	; (8009334 <xTaskIncrementTick+0x154>)
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d120      	bne.n	800924a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009208:	4b4b      	ldr	r3, [pc, #300]	; (8009338 <xTaskIncrementTick+0x158>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <xTaskIncrementTick+0x48>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	603b      	str	r3, [r7, #0]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <xTaskIncrementTick+0x46>
 8009228:	4b43      	ldr	r3, [pc, #268]	; (8009338 <xTaskIncrementTick+0x158>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	4b43      	ldr	r3, [pc, #268]	; (800933c <xTaskIncrementTick+0x15c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a41      	ldr	r2, [pc, #260]	; (8009338 <xTaskIncrementTick+0x158>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	4a41      	ldr	r2, [pc, #260]	; (800933c <xTaskIncrementTick+0x15c>)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	4b40      	ldr	r3, [pc, #256]	; (8009340 <xTaskIncrementTick+0x160>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	4a3f      	ldr	r2, [pc, #252]	; (8009340 <xTaskIncrementTick+0x160>)
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	f000 fabf 	bl	80097c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800924a:	4b3e      	ldr	r3, [pc, #248]	; (8009344 <xTaskIncrementTick+0x164>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	429a      	cmp	r2, r3
 8009252:	d34d      	bcc.n	80092f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009254:	4b38      	ldr	r3, [pc, #224]	; (8009338 <xTaskIncrementTick+0x158>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <xTaskIncrementTick+0x82>
 800925e:	2301      	movs	r3, #1
 8009260:	e000      	b.n	8009264 <xTaskIncrementTick+0x84>
 8009262:	2300      	movs	r3, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009268:	4b36      	ldr	r3, [pc, #216]	; (8009344 <xTaskIncrementTick+0x164>)
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	601a      	str	r2, [r3, #0]
					break;
 8009270:	e03e      	b.n	80092f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009272:	4b31      	ldr	r3, [pc, #196]	; (8009338 <xTaskIncrementTick+0x158>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d203      	bcs.n	8009292 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800928a:	4a2e      	ldr	r2, [pc, #184]	; (8009344 <xTaskIncrementTick+0x164>)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6013      	str	r3, [r2, #0]
						break;
 8009290:	e02e      	b.n	80092f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	3304      	adds	r3, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff f864 	bl	8008364 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d004      	beq.n	80092ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	3318      	adds	r3, #24
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff f85b 	bl	8008364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	2201      	movs	r2, #1
 80092b4:	409a      	lsls	r2, r3
 80092b6:	4b24      	ldr	r3, [pc, #144]	; (8009348 <xTaskIncrementTick+0x168>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	4a22      	ldr	r2, [pc, #136]	; (8009348 <xTaskIncrementTick+0x168>)
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4a1f      	ldr	r2, [pc, #124]	; (800934c <xTaskIncrementTick+0x16c>)
 80092ce:	441a      	add	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7fe ffe9 	bl	80082ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e0:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <xTaskIncrementTick+0x170>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d3b4      	bcc.n	8009254 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092ea:	2301      	movs	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092ee:	e7b1      	b.n	8009254 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092f0:	4b17      	ldr	r3, [pc, #92]	; (8009350 <xTaskIncrementTick+0x170>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4915      	ldr	r1, [pc, #84]	; (800934c <xTaskIncrementTick+0x16c>)
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d907      	bls.n	8009318 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	e004      	b.n	8009318 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <xTaskIncrementTick+0x174>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	4a0f      	ldr	r2, [pc, #60]	; (8009354 <xTaskIncrementTick+0x174>)
 8009316:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <xTaskIncrementTick+0x178>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009324:	697b      	ldr	r3, [r7, #20]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000d9c 	.word	0x20000d9c
 8009334:	20000d78 	.word	0x20000d78
 8009338:	20000d2c 	.word	0x20000d2c
 800933c:	20000d30 	.word	0x20000d30
 8009340:	20000d8c 	.word	0x20000d8c
 8009344:	20000d94 	.word	0x20000d94
 8009348:	20000d7c 	.word	0x20000d7c
 800934c:	20000c78 	.word	0x20000c78
 8009350:	20000c74 	.word	0x20000c74
 8009354:	20000d84 	.word	0x20000d84
 8009358:	20000d88 	.word	0x20000d88

0800935c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009362:	4b31      	ldr	r3, [pc, #196]	; (8009428 <vTaskSwitchContext+0xcc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800936a:	4b30      	ldr	r3, [pc, #192]	; (800942c <vTaskSwitchContext+0xd0>)
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009370:	e055      	b.n	800941e <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8009372:	4b2e      	ldr	r3, [pc, #184]	; (800942c <vTaskSwitchContext+0xd0>)
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009378:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <vTaskSwitchContext+0xd4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <vTaskSwitchContext+0xd4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	429a      	cmp	r2, r3
 8009386:	d808      	bhi.n	800939a <vTaskSwitchContext+0x3e>
 8009388:	4b29      	ldr	r3, [pc, #164]	; (8009430 <vTaskSwitchContext+0xd4>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	4b28      	ldr	r3, [pc, #160]	; (8009430 <vTaskSwitchContext+0xd4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3334      	adds	r3, #52	; 0x34
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7fa f839 	bl	800340c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800939a:	4b26      	ldr	r3, [pc, #152]	; (8009434 <vTaskSwitchContext+0xd8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	fab3 f383 	clz	r3, r3
 80093a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	f1c3 031f 	rsb	r3, r3, #31
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	4921      	ldr	r1, [pc, #132]	; (8009438 <vTaskSwitchContext+0xdc>)
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <vTaskSwitchContext+0x7e>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	607b      	str	r3, [r7, #4]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <vTaskSwitchContext+0x7c>
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4a14      	ldr	r2, [pc, #80]	; (8009438 <vTaskSwitchContext+0xdc>)
 80093e6:	4413      	add	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	605a      	str	r2, [r3, #4]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	3308      	adds	r3, #8
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d104      	bne.n	800940a <vTaskSwitchContext+0xae>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a07      	ldr	r2, [pc, #28]	; (8009430 <vTaskSwitchContext+0xd4>)
 8009412:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <vTaskSwitchContext+0xd4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	334c      	adds	r3, #76	; 0x4c
 800941a:	4a08      	ldr	r2, [pc, #32]	; (800943c <vTaskSwitchContext+0xe0>)
 800941c:	6013      	str	r3, [r2, #0]
}
 800941e:	bf00      	nop
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000d9c 	.word	0x20000d9c
 800942c:	20000d88 	.word	0x20000d88
 8009430:	20000c74 	.word	0x20000c74
 8009434:	20000d7c 	.word	0x20000d7c
 8009438:	20000c78 	.word	0x20000c78
 800943c:	20000060 	.word	0x20000060

08009440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009466:	4b07      	ldr	r3, [pc, #28]	; (8009484 <vTaskPlaceOnEventList+0x44>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3318      	adds	r3, #24
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7fe ff40 	bl	80082f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009474:	2101      	movs	r1, #1
 8009476:	6838      	ldr	r0, [r7, #0]
 8009478:	f000 fb9e 	bl	8009bb8 <prvAddCurrentTaskToDelayedList>
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000c74 	.word	0x20000c74

08009488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	3318      	adds	r3, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe ff53 	bl	8008364 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <xTaskRemoveFromEventList+0xac>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d11c      	bne.n	8009500 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe ff4a 	bl	8008364 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	2201      	movs	r2, #1
 80094d6:	409a      	lsls	r2, r3
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <xTaskRemoveFromEventList+0xb0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4313      	orrs	r3, r2
 80094de:	4a16      	ldr	r2, [pc, #88]	; (8009538 <xTaskRemoveFromEventList+0xb0>)
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4a13      	ldr	r2, [pc, #76]	; (800953c <xTaskRemoveFromEventList+0xb4>)
 80094f0:	441a      	add	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7fe fed8 	bl	80082ae <vListInsertEnd>
 80094fe:	e005      	b.n	800950c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	3318      	adds	r3, #24
 8009504:	4619      	mov	r1, r3
 8009506:	480e      	ldr	r0, [pc, #56]	; (8009540 <xTaskRemoveFromEventList+0xb8>)
 8009508:	f7fe fed1 	bl	80082ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <xTaskRemoveFromEventList+0xbc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	429a      	cmp	r2, r3
 8009518:	d905      	bls.n	8009526 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800951a:	2301      	movs	r3, #1
 800951c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800951e:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <xTaskRemoveFromEventList+0xc0>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	e001      	b.n	800952a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800952a:	697b      	ldr	r3, [r7, #20]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000d9c 	.word	0x20000d9c
 8009538:	20000d7c 	.word	0x20000d7c
 800953c:	20000c78 	.word	0x20000c78
 8009540:	20000d34 	.word	0x20000d34
 8009544:	20000c74 	.word	0x20000c74
 8009548:	20000d88 	.word	0x20000d88

0800954c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <vTaskInternalSetTimeOutState+0x24>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <vTaskInternalSetTimeOutState+0x28>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	605a      	str	r2, [r3, #4]
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000d8c 	.word	0x20000d8c
 8009574:	20000d78 	.word	0x20000d78

08009578 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	613b      	str	r3, [r7, #16]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	60fb      	str	r3, [r7, #12]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095ba:	f000 fc57 	bl	8009e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095be:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <xTaskCheckForTimeOut+0xbc>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d102      	bne.n	80095de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	e023      	b.n	8009626 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <xTaskCheckForTimeOut+0xc0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d007      	beq.n	80095fa <xTaskCheckForTimeOut+0x82>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d302      	bcc.n	80095fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095f4:	2301      	movs	r3, #1
 80095f6:	61fb      	str	r3, [r7, #28]
 80095f8:	e015      	b.n	8009626 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	429a      	cmp	r2, r3
 8009602:	d20b      	bcs.n	800961c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	1ad2      	subs	r2, r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff ff9b 	bl	800954c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	e004      	b.n	8009626 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009622:	2301      	movs	r3, #1
 8009624:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009626:	f000 fc51 	bl	8009ecc <vPortExitCritical>

	return xReturn;
 800962a:	69fb      	ldr	r3, [r7, #28]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3720      	adds	r7, #32
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20000d78 	.word	0x20000d78
 8009638:	20000d8c 	.word	0x20000d8c

0800963c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009640:	4b03      	ldr	r3, [pc, #12]	; (8009650 <vTaskMissedYield+0x14>)
 8009642:	2201      	movs	r2, #1
 8009644:	601a      	str	r2, [r3, #0]
}
 8009646:	bf00      	nop
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	20000d88 	.word	0x20000d88

08009654 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800965c:	f000 f852 	bl	8009704 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvIdleTask+0x28>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d9f9      	bls.n	800965c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <prvIdleTask+0x2c>)
 800966a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009678:	e7f0      	b.n	800965c <prvIdleTask+0x8>
 800967a:	bf00      	nop
 800967c:	20000c78 	.word	0x20000c78
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800968a:	2300      	movs	r3, #0
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	e00c      	b.n	80096aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4a12      	ldr	r2, [pc, #72]	; (80096e4 <prvInitialiseTaskLists+0x60>)
 800969c:	4413      	add	r3, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fdda 	bl	8008258 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3301      	adds	r3, #1
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b06      	cmp	r3, #6
 80096ae:	d9ef      	bls.n	8009690 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096b0:	480d      	ldr	r0, [pc, #52]	; (80096e8 <prvInitialiseTaskLists+0x64>)
 80096b2:	f7fe fdd1 	bl	8008258 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096b6:	480d      	ldr	r0, [pc, #52]	; (80096ec <prvInitialiseTaskLists+0x68>)
 80096b8:	f7fe fdce 	bl	8008258 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096bc:	480c      	ldr	r0, [pc, #48]	; (80096f0 <prvInitialiseTaskLists+0x6c>)
 80096be:	f7fe fdcb 	bl	8008258 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096c2:	480c      	ldr	r0, [pc, #48]	; (80096f4 <prvInitialiseTaskLists+0x70>)
 80096c4:	f7fe fdc8 	bl	8008258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096c8:	480b      	ldr	r0, [pc, #44]	; (80096f8 <prvInitialiseTaskLists+0x74>)
 80096ca:	f7fe fdc5 	bl	8008258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ce:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <prvInitialiseTaskLists+0x78>)
 80096d0:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <prvInitialiseTaskLists+0x64>)
 80096d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <prvInitialiseTaskLists+0x7c>)
 80096d6:	4a05      	ldr	r2, [pc, #20]	; (80096ec <prvInitialiseTaskLists+0x68>)
 80096d8:	601a      	str	r2, [r3, #0]
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000c78 	.word	0x20000c78
 80096e8:	20000d04 	.word	0x20000d04
 80096ec:	20000d18 	.word	0x20000d18
 80096f0:	20000d34 	.word	0x20000d34
 80096f4:	20000d48 	.word	0x20000d48
 80096f8:	20000d60 	.word	0x20000d60
 80096fc:	20000d2c 	.word	0x20000d2c
 8009700:	20000d30 	.word	0x20000d30

08009704 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800970a:	e019      	b.n	8009740 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800970c:	f000 fbae 	bl	8009e6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <prvCheckTasksWaitingTermination+0x50>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3304      	adds	r3, #4
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fe21 	bl	8008364 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <prvCheckTasksWaitingTermination+0x54>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3b01      	subs	r3, #1
 8009728:	4a0b      	ldr	r2, [pc, #44]	; (8009758 <prvCheckTasksWaitingTermination+0x54>)
 800972a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800972c:	4b0b      	ldr	r3, [pc, #44]	; (800975c <prvCheckTasksWaitingTermination+0x58>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3b01      	subs	r3, #1
 8009732:	4a0a      	ldr	r2, [pc, #40]	; (800975c <prvCheckTasksWaitingTermination+0x58>)
 8009734:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009736:	f000 fbc9 	bl	8009ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f810 	bl	8009760 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <prvCheckTasksWaitingTermination+0x58>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e1      	bne.n	800970c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20000d48 	.word	0x20000d48
 8009758:	20000d74 	.word	0x20000d74
 800975c:	20000d5c 	.word	0x20000d5c

08009760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	334c      	adds	r3, #76	; 0x4c
 800976c:	4618      	mov	r0, r3
 800976e:	f000 ff45 	bl	800a5fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009778:	2b00      	cmp	r3, #0
 800977a:	d108      	bne.n	800978e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fd37 	bl	800a1f4 <vPortFree>
				vPortFree( pxTCB );
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fd34 	bl	800a1f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800978c:	e018      	b.n	80097c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009794:	2b01      	cmp	r3, #1
 8009796:	d103      	bne.n	80097a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fd2b 	bl	800a1f4 <vPortFree>
	}
 800979e:	e00f      	b.n	80097c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d00a      	beq.n	80097c0 <prvDeleteTCB+0x60>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	60fb      	str	r3, [r7, #12]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <prvDeleteTCB+0x5e>
	}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <prvResetNextTaskUnblockTime+0x40>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <prvResetNextTaskUnblockTime+0x14>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <prvResetNextTaskUnblockTime+0x16>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097e2:	4b0a      	ldr	r3, [pc, #40]	; (800980c <prvResetNextTaskUnblockTime+0x44>)
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295
 80097e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097ea:	e008      	b.n	80097fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <prvResetNextTaskUnblockTime+0x40>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4a04      	ldr	r2, [pc, #16]	; (800980c <prvResetNextTaskUnblockTime+0x44>)
 80097fc:	6013      	str	r3, [r2, #0]
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	bc80      	pop	{r7}
 8009806:	4770      	bx	lr
 8009808:	20000d2c 	.word	0x20000d2c
 800980c:	20000d94 	.word	0x20000d94

08009810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009816:	4b0b      	ldr	r3, [pc, #44]	; (8009844 <xTaskGetSchedulerState+0x34>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800981e:	2301      	movs	r3, #1
 8009820:	607b      	str	r3, [r7, #4]
 8009822:	e008      	b.n	8009836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009824:	4b08      	ldr	r3, [pc, #32]	; (8009848 <xTaskGetSchedulerState+0x38>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800982c:	2302      	movs	r3, #2
 800982e:	607b      	str	r3, [r7, #4]
 8009830:	e001      	b.n	8009836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009836:	687b      	ldr	r3, [r7, #4]
	}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	bc80      	pop	{r7}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20000d80 	.word	0x20000d80
 8009848:	20000d9c 	.word	0x20000d9c

0800984c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d06e      	beq.n	8009940 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009862:	4b3a      	ldr	r3, [pc, #232]	; (800994c <xTaskPriorityDisinherit+0x100>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	429a      	cmp	r2, r3
 800986a:	d00a      	beq.n	8009882 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	60bb      	str	r3, [r7, #8]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a4:	1e5a      	subs	r2, r3, #1
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d044      	beq.n	8009940 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d140      	bne.n	8009940 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fd4e 	bl	8008364 <uxListRemove>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d115      	bne.n	80098fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	491f      	ldr	r1, [pc, #124]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <xTaskPriorityDisinherit+0xae>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	2201      	movs	r2, #1
 80098ea:	fa02 f303 	lsl.w	r3, r2, r3
 80098ee:	43da      	mvns	r2, r3
 80098f0:	4b18      	ldr	r3, [pc, #96]	; (8009954 <xTaskPriorityDisinherit+0x108>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4013      	ands	r3, r2
 80098f6:	4a17      	ldr	r2, [pc, #92]	; (8009954 <xTaskPriorityDisinherit+0x108>)
 80098f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	f1c3 0207 	rsb	r2, r3, #7
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	2201      	movs	r2, #1
 8009914:	409a      	lsls	r2, r3
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <xTaskPriorityDisinherit+0x108>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4313      	orrs	r3, r2
 800991c:	4a0d      	ldr	r2, [pc, #52]	; (8009954 <xTaskPriorityDisinherit+0x108>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a08      	ldr	r2, [pc, #32]	; (8009950 <xTaskPriorityDisinherit+0x104>)
 800992e:	441a      	add	r2, r3
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7fe fcb9 	bl	80082ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009940:	697b      	ldr	r3, [r7, #20]
	}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000c74 	.word	0x20000c74
 8009950:	20000c78 	.word	0x20000c78
 8009954:	20000d7c 	.word	0x20000d7c

08009958 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009966:	f000 fa81 	bl	8009e6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800996a:	4b29      	ldr	r3, [pc, #164]	; (8009a10 <xTaskNotifyWait+0xb8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b02      	cmp	r3, #2
 8009976:	d01c      	beq.n	80099b2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009978:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <xTaskNotifyWait+0xb8>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	43d2      	mvns	r2, r2
 8009984:	400a      	ands	r2, r1
 8009986:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800998a:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <xTaskNotifyWait+0xb8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800999a:	2101      	movs	r1, #1
 800999c:	6838      	ldr	r0, [r7, #0]
 800999e:	f000 f90b 	bl	8009bb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <xTaskNotifyWait+0xbc>)
 80099a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80099b2:	f000 fa8b 	bl	8009ecc <vPortExitCritical>

		taskENTER_CRITICAL();
 80099b6:	f000 fa59 	bl	8009e6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80099c0:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <xTaskNotifyWait+0xb8>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80099cc:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <xTaskNotifyWait+0xb8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d002      	beq.n	80099e0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e00a      	b.n	80099f6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80099e0:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <xTaskNotifyWait+0xb8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	43d2      	mvns	r2, r2
 80099ec:	400a      	ands	r2, r1
 80099ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 80099f2:	2301      	movs	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f6:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <xTaskNotifyWait+0xb8>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8009a00:	f000 fa64 	bl	8009ecc <vPortExitCritical>

		return xReturn;
 8009a04:	697b      	ldr	r3, [r7, #20]
	}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000c74 	.word	0x20000c74
 8009a14:	e000ed04 	.word	0xe000ed04

08009a18 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08e      	sub	sp, #56	; 0x38
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a48:	f000 fad2 	bl	8009ff0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a50:	f3ef 8211 	mrs	r2, BASEPRI
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623a      	str	r2, [r7, #32]
 8009a66:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a68:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d82f      	bhi.n	8009af4 <xTaskGenericNotifyFromISR+0xdc>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <xTaskGenericNotifyFromISR+0x84>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009ab1 	.word	0x08009ab1
 8009aa4:	08009ac3 	.word	0x08009ac3
 8009aa8:	08009ad3 	.word	0x08009ad3
 8009aac:	08009add 	.word	0x08009add
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8009ac0:	e018      	b.n	8009af4 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8009ad0:	e010      	b.n	8009af4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8009ada:	e00b      	b.n	8009af4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d004      	beq.n	8009aee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009aec:	e001      	b.n	8009af2 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009af2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d146      	bne.n	8009b8a <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	61bb      	str	r3, [r7, #24]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b1a:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <xTaskGenericNotifyFromISR+0x188>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d11c      	bne.n	8009b5c <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fc1c 	bl	8008364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	2201      	movs	r2, #1
 8009b32:	409a      	lsls	r2, r3
 8009b34:	4b1b      	ldr	r3, [pc, #108]	; (8009ba4 <xTaskGenericNotifyFromISR+0x18c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <xTaskGenericNotifyFromISR+0x18c>)
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <xTaskGenericNotifyFromISR+0x190>)
 8009b4c:	441a      	add	r2, r3
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	3304      	adds	r3, #4
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7fe fbaa 	bl	80082ae <vListInsertEnd>
 8009b5a:	e005      	b.n	8009b68 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	3318      	adds	r3, #24
 8009b60:	4619      	mov	r1, r3
 8009b62:	4812      	ldr	r0, [pc, #72]	; (8009bac <xTaskGenericNotifyFromISR+0x194>)
 8009b64:	f7fe fba3 	bl	80082ae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <xTaskGenericNotifyFromISR+0x198>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d909      	bls.n	8009b8a <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e002      	b.n	8009b8a <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <xTaskGenericNotifyFromISR+0x19c>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b94:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3738      	adds	r7, #56	; 0x38
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000d9c 	.word	0x20000d9c
 8009ba4:	20000d7c 	.word	0x20000d7c
 8009ba8:	20000c78 	.word	0x20000c78
 8009bac:	20000d34 	.word	0x20000d34
 8009bb0:	20000c74 	.word	0x20000c74
 8009bb4:	20000d88 	.word	0x20000d88

08009bb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bc2:	4b29      	ldr	r3, [pc, #164]	; (8009c68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe fbc8 	bl	8008364 <uxListRemove>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	2201      	movs	r2, #1
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	43da      	mvns	r2, r3
 8009be8:	4b21      	ldr	r3, [pc, #132]	; (8009c70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4013      	ands	r3, r2
 8009bee:	4a20      	ldr	r2, [pc, #128]	; (8009c70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bf0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf8:	d10a      	bne.n	8009c10 <prvAddCurrentTaskToDelayedList+0x58>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d007      	beq.n	8009c10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4619      	mov	r1, r3
 8009c08:	481a      	ldr	r0, [pc, #104]	; (8009c74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c0a:	f7fe fb50 	bl	80082ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c0e:	e026      	b.n	8009c5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c18:	4b14      	ldr	r3, [pc, #80]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d209      	bcs.n	8009c3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c28:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3304      	adds	r3, #4
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f7fe fb5d 	bl	80082f4 <vListInsert>
}
 8009c3a:	e010      	b.n	8009c5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7fe fb53 	bl	80082f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d202      	bcs.n	8009c5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c58:	4a09      	ldr	r2, [pc, #36]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6013      	str	r3, [r2, #0]
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000d78 	.word	0x20000d78
 8009c6c:	20000c74 	.word	0x20000c74
 8009c70:	20000d7c 	.word	0x20000d7c
 8009c74:	20000d60 	.word	0x20000d60
 8009c78:	20000d30 	.word	0x20000d30
 8009c7c:	20000d2c 	.word	0x20000d2c
 8009c80:	20000d94 	.word	0x20000d94

08009c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3b04      	subs	r3, #4
 8009c94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f023 0201 	bic.w	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cb4:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <pxPortInitialiseStack+0x54>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b14      	subs	r3, #20
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3b20      	subs	r3, #32
 8009cca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bc80      	pop	{r7}
 8009cd6:	4770      	bx	lr
 8009cd8:	08009cdd 	.word	0x08009cdd

08009cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ce6:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <prvTaskExitError+0x54>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d00a      	beq.n	8009d06 <prvTaskExitError+0x2a>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	60fb      	str	r3, [r7, #12]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <prvTaskExitError+0x28>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60bb      	str	r3, [r7, #8]
}
 8009d18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d1a:	bf00      	nop
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0fc      	beq.n	8009d1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	20000010 	.word	0x20000010
	...

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d5e:	4770      	bx	lr

08009d60 <pxCurrentTCBConst2>:
 8009d60:	20000c74 	.word	0x20000c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009d68:	4806      	ldr	r0, [pc, #24]	; (8009d84 <prvPortStartFirstTask+0x1c>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	b662      	cpsie	i
 8009d74:	b661      	cpsie	f
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	df00      	svc	0
 8009d80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d82:	bf00      	nop
 8009d84:	e000ed08 	.word	0xe000ed08

08009d88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d8e:	4b32      	ldr	r3, [pc, #200]	; (8009e58 <xPortStartScheduler+0xd0>)
 8009d90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	22ff      	movs	r2, #255	; 0xff
 8009d9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	4b2a      	ldr	r3, [pc, #168]	; (8009e5c <xPortStartScheduler+0xd4>)
 8009db4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009db6:	4b2a      	ldr	r3, [pc, #168]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009db8:	2207      	movs	r2, #7
 8009dba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dbc:	e009      	b.n	8009dd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009dbe:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009dc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dda:	2b80      	cmp	r3, #128	; 0x80
 8009ddc:	d0ef      	beq.n	8009dbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dde:	4b20      	ldr	r3, [pc, #128]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f1c3 0307 	rsb	r3, r3, #7
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d00a      	beq.n	8009e00 <xPortStartScheduler+0x78>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	60bb      	str	r3, [r7, #8]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e00:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	021b      	lsls	r3, r3, #8
 8009e06:	4a16      	ldr	r2, [pc, #88]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009e08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e0a:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e12:	4a13      	ldr	r2, [pc, #76]	; (8009e60 <xPortStartScheduler+0xd8>)
 8009e14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <xPortStartScheduler+0xdc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <xPortStartScheduler+0xdc>)
 8009e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <xPortStartScheduler+0xdc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a0d      	ldr	r2, [pc, #52]	; (8009e64 <xPortStartScheduler+0xdc>)
 8009e30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e36:	f000 f8b9 	bl	8009fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <xPortStartScheduler+0xe0>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e40:	f7ff ff92 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e44:	f7ff fa8a 	bl	800935c <vTaskSwitchContext>
	prvTaskExitError();
 8009e48:	f7ff ff48 	bl	8009cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	e000e400 	.word	0xe000e400
 8009e5c:	20000da0 	.word	0x20000da0
 8009e60:	20000da4 	.word	0x20000da4
 8009e64:	e000ed20 	.word	0xe000ed20
 8009e68:	20000010 	.word	0x20000010

08009e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	607b      	str	r3, [r7, #4]
}
 8009e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <vPortEnterCritical+0x58>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	4a0d      	ldr	r2, [pc, #52]	; (8009ec4 <vPortEnterCritical+0x58>)
 8009e8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <vPortEnterCritical+0x58>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10f      	bne.n	8009eb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e98:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <vPortEnterCritical+0x5c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	603b      	str	r3, [r7, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vPortEnterCritical+0x4a>
	}
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000010 	.word	0x20000010
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ed2:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <vPortExitCritical+0x4c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10a      	bne.n	8009ef0 <vPortExitCritical+0x24>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ef0:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <vPortExitCritical+0x4c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	4a08      	ldr	r2, [pc, #32]	; (8009f18 <vPortExitCritical+0x4c>)
 8009ef8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009efa:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <vPortExitCritical+0x4c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d105      	bne.n	8009f0e <vPortExitCritical+0x42>
 8009f02:	2300      	movs	r3, #0
 8009f04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	f383 8811 	msr	BASEPRI, r3
}
 8009f0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr
 8009f18:	20000010 	.word	0x20000010
 8009f1c:	00000000 	.word	0x00000000

08009f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f20:	f3ef 8009 	mrs	r0, PSP
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4b0d      	ldr	r3, [pc, #52]	; (8009f60 <pxCurrentTCBConst>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f30:	6010      	str	r0, [r2, #0]
 8009f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009f36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f3a:	f380 8811 	msr	BASEPRI, r0
 8009f3e:	f7ff fa0d 	bl	800935c <vTaskSwitchContext>
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8811 	msr	BASEPRI, r0
 8009f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f4e:	6819      	ldr	r1, [r3, #0]
 8009f50:	6808      	ldr	r0, [r1, #0]
 8009f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f56:	f380 8809 	msr	PSP, r0
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	4770      	bx	lr

08009f60 <pxCurrentTCBConst>:
 8009f60:	20000c74 	.word	0x20000c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f82:	f7ff f92d 	bl	80091e0 <xTaskIncrementTick>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <SysTick_Handler+0x40>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
}
 8009f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <vPortSetupTimerInterrupt+0x30>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fbc:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <vPortSetupTimerInterrupt+0x38>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a09      	ldr	r2, [pc, #36]	; (8009fe8 <vPortSetupTimerInterrupt+0x3c>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	099b      	lsrs	r3, r3, #6
 8009fc8:	4a08      	ldr	r2, [pc, #32]	; (8009fec <vPortSetupTimerInterrupt+0x40>)
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <vPortSetupTimerInterrupt+0x30>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr
 8009fdc:	e000e010 	.word	0xe000e010
 8009fe0:	e000e018 	.word	0xe000e018
 8009fe4:	20000004 	.word	0x20000004
 8009fe8:	10624dd3 	.word	0x10624dd3
 8009fec:	e000e014 	.word	0xe000e014

08009ff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ff6:	f3ef 8305 	mrs	r3, IPSR
 8009ffa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b0f      	cmp	r3, #15
 800a000:	d914      	bls.n	800a02c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a002:	4a16      	ldr	r2, [pc, #88]	; (800a05c <vPortValidateInterruptPriority+0x6c>)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a00c:	4b14      	ldr	r3, [pc, #80]	; (800a060 <vPortValidateInterruptPriority+0x70>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	7afa      	ldrb	r2, [r7, #11]
 800a012:	429a      	cmp	r2, r3
 800a014:	d20a      	bcs.n	800a02c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	607b      	str	r3, [r7, #4]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <vPortValidateInterruptPriority+0x74>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a034:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <vPortValidateInterruptPriority+0x78>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d90a      	bls.n	800a052 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	603b      	str	r3, [r7, #0]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <vPortValidateInterruptPriority+0x60>
	}
 800a052:	bf00      	nop
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	bc80      	pop	{r7}
 800a05a:	4770      	bx	lr
 800a05c:	e000e3f0 	.word	0xe000e3f0
 800a060:	20000da0 	.word	0x20000da0
 800a064:	e000ed0c 	.word	0xe000ed0c
 800a068:	20000da4 	.word	0x20000da4

0800a06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	; 0x28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a078:	f7ff f808 	bl	800908c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a07c:	4b58      	ldr	r3, [pc, #352]	; (800a1e0 <pvPortMalloc+0x174>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a084:	f000 f910 	bl	800a2a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a088:	4b56      	ldr	r3, [pc, #344]	; (800a1e4 <pvPortMalloc+0x178>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 808e 	bne.w	800a1b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01d      	beq.n	800a0d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a09c:	2208      	movs	r2, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d014      	beq.n	800a0d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <pvPortMalloc+0x6c>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d069      	beq.n	800a1b2 <pvPortMalloc+0x146>
 800a0de:	4b42      	ldr	r3, [pc, #264]	; (800a1e8 <pvPortMalloc+0x17c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d864      	bhi.n	800a1b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0e8:	4b40      	ldr	r3, [pc, #256]	; (800a1ec <pvPortMalloc+0x180>)
 800a0ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ec:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <pvPortMalloc+0x180>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f2:	e004      	b.n	800a0fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d903      	bls.n	800a110 <pvPortMalloc+0xa4>
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f1      	bne.n	800a0f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a110:	4b33      	ldr	r3, [pc, #204]	; (800a1e0 <pvPortMalloc+0x174>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a116:	429a      	cmp	r2, r3
 800a118:	d04b      	beq.n	800a1b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2208      	movs	r2, #8
 800a120:	4413      	add	r3, r2
 800a122:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	1ad2      	subs	r2, r2, r3
 800a134:	2308      	movs	r3, #8
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	429a      	cmp	r2, r3
 800a13a:	d91f      	bls.n	800a17c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <pvPortMalloc+0xf8>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	613b      	str	r3, [r7, #16]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a176:	69b8      	ldr	r0, [r7, #24]
 800a178:	f000 f8f8 	bl	800a36c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <pvPortMalloc+0x17c>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	4a18      	ldr	r2, [pc, #96]	; (800a1e8 <pvPortMalloc+0x17c>)
 800a188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18a:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <pvPortMalloc+0x17c>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b18      	ldr	r3, [pc, #96]	; (800a1f0 <pvPortMalloc+0x184>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d203      	bcs.n	800a19e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <pvPortMalloc+0x17c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a15      	ldr	r2, [pc, #84]	; (800a1f0 <pvPortMalloc+0x184>)
 800a19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <pvPortMalloc+0x178>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b2:	f7fe ff79 	bl	80090a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00a      	beq.n	800a1d6 <pvPortMalloc+0x16a>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	60fb      	str	r3, [r7, #12]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <pvPortMalloc+0x168>
	return pvReturn;
 800a1d6:	69fb      	ldr	r3, [r7, #28]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	; 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	200019b0 	.word	0x200019b0
 800a1e4:	200019bc 	.word	0x200019bc
 800a1e8:	200019b4 	.word	0x200019b4
 800a1ec:	200019a8 	.word	0x200019a8
 800a1f0:	200019b8 	.word	0x200019b8

0800a1f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d048      	beq.n	800a298 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a206:	2308      	movs	r3, #8
 800a208:	425b      	negs	r3, r3
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4413      	add	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <vPortFree+0xac>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4013      	ands	r3, r2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <vPortFree+0x44>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	60fb      	str	r3, [r7, #12]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <vPortFree+0x62>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	60bb      	str	r3, [r7, #8]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <vPortFree+0xac>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d019      	beq.n	800a298 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d115      	bne.n	800a298 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <vPortFree+0xac>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	43db      	mvns	r3, r3
 800a276:	401a      	ands	r2, r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a27c:	f7fe ff06 	bl	800908c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <vPortFree+0xb0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4413      	add	r3, r2
 800a28a:	4a06      	ldr	r2, [pc, #24]	; (800a2a4 <vPortFree+0xb0>)
 800a28c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a28e:	6938      	ldr	r0, [r7, #16]
 800a290:	f000 f86c 	bl	800a36c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a294:	f7fe ff08 	bl	80090a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a298:	bf00      	nop
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200019bc 	.word	0x200019bc
 800a2a4:	200019b4 	.word	0x200019b4

0800a2a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a2b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2b4:	4b27      	ldr	r3, [pc, #156]	; (800a354 <prvHeapInit+0xac>)
 800a2b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00c      	beq.n	800a2dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3307      	adds	r3, #7
 800a2c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 0307 	bic.w	r3, r3, #7
 800a2ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	4a1f      	ldr	r2, [pc, #124]	; (800a354 <prvHeapInit+0xac>)
 800a2d8:	4413      	add	r3, r2
 800a2da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2e0:	4a1d      	ldr	r2, [pc, #116]	; (800a358 <prvHeapInit+0xb0>)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2e6:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <prvHeapInit+0xb0>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2f4:	2208      	movs	r2, #8
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f023 0307 	bic.w	r3, r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a15      	ldr	r2, [pc, #84]	; (800a35c <prvHeapInit+0xb4>)
 800a308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a30a:	4b14      	ldr	r3, [pc, #80]	; (800a35c <prvHeapInit+0xb4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <prvHeapInit+0xb4>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	1ad2      	subs	r2, r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <prvHeapInit+0xb4>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <prvHeapInit+0xb8>)
 800a336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4a09      	ldr	r2, [pc, #36]	; (800a364 <prvHeapInit+0xbc>)
 800a33e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a340:	4b09      	ldr	r3, [pc, #36]	; (800a368 <prvHeapInit+0xc0>)
 800a342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a346:	601a      	str	r2, [r3, #0]
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000da8 	.word	0x20000da8
 800a358:	200019a8 	.word	0x200019a8
 800a35c:	200019b0 	.word	0x200019b0
 800a360:	200019b8 	.word	0x200019b8
 800a364:	200019b4 	.word	0x200019b4
 800a368:	200019bc 	.word	0x200019bc

0800a36c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a374:	4b27      	ldr	r3, [pc, #156]	; (800a414 <prvInsertBlockIntoFreeList+0xa8>)
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	e002      	b.n	800a380 <prvInsertBlockIntoFreeList+0x14>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d8f7      	bhi.n	800a37a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d108      	bne.n	800a3ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	441a      	add	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d118      	bne.n	800a3f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <prvInsertBlockIntoFreeList+0xac>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d00d      	beq.n	800a3ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	441a      	add	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	e008      	b.n	800a3fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3ea:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <prvInsertBlockIntoFreeList+0xac>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e003      	b.n	800a3fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d002      	beq.n	800a40a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc80      	pop	{r7}
 800a412:	4770      	bx	lr
 800a414:	200019a8 	.word	0x200019a8
 800a418:	200019b0 	.word	0x200019b0

0800a41c <PID_Calculate>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Calculate(PID_Param *pid, float setPoint, float currentValue)
{
 800a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
//-----------------------Input-------------------------//
	e = setPoint - currentValue;
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	68b8      	ldr	r0, [r7, #8]
 800a42c:	f7f6 fb62 	bl	8000af4 <__aeabi_fsub>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	601a      	str	r2, [r3, #0]
	if(!kI) kB = 0;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	f04f 0100 	mov.w	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f7f6 fdf5 	bl	8001030 <__aeabi_fcmpeq>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <PID_Calculate+0x3a>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	61da      	str	r2, [r3, #28]
 800a454:	e00a      	b.n	800a46c <PID_Calculate+0x50>
	else kB = 1/deltaT;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	4619      	mov	r1, r3
 800a45c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a460:	f7f6 fd06 	bl	8000e70 <__aeabi_fdiv>
 800a464:	4603      	mov	r3, r0
 800a466:	461a      	mov	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	61da      	str	r2, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f7f6 fc46 	bl	8000d08 <__aeabi_fmul>
 800a47c:	4603      	mov	r3, r0
 800a47e:	461a      	mov	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	611a      	str	r2, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	699c      	ldr	r4, [r3, #24]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	695a      	ldr	r2, [r3, #20]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7f6 fc38 	bl	8000d08 <__aeabi_fmul>
 800a498:	4603      	mov	r3, r0
 800a49a:	461e      	mov	r6, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	69dd      	ldr	r5, [r3, #28]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	f7f6 fb22 	bl	8000af4 <__aeabi_fsub>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7f6 fc27 	bl	8000d08 <__aeabi_fmul>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7f6 fb1a 	bl	8000af8 <__addsf3>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f7f6 fc1a 	bl	8000d08 <__aeabi_fmul>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7f6 fb0d 	bl	8000af8 <__addsf3>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	619a      	str	r2, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a1c      	ldr	r4, [r3, #32]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7f6 fafd 	bl	8000af4 <__aeabi_fsub>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7f6 fc02 	bl	8000d08 <__aeabi_fmul>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f7f6 fcae 	bl	8000e70 <__aeabi_fdiv>
 800a514:	4603      	mov	r3, r0
 800a516:	461a      	mov	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	625a      	str	r2, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	4619      	mov	r1, r3
 800a522:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a526:	f7f6 fae5 	bl	8000af4 <__aeabi_fsub>
 800a52a:	4603      	mov	r3, r0
 800a52c:	461a      	mov	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f7f6 fbe7 	bl	8000d08 <__aeabi_fmul>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461c      	mov	r4, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7f6 fbdd 	bl	8000d08 <__aeabi_fmul>
 800a54e:	4603      	mov	r3, r0
 800a550:	4619      	mov	r1, r3
 800a552:	4620      	mov	r0, r4
 800a554:	f7f6 fad0 	bl	8000af8 <__addsf3>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	691a      	ldr	r2, [r3, #16]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7f6 fabc 	bl	8000af8 <__addsf3>
 800a580:	4603      	mov	r3, r0
 800a582:	461a      	mov	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7f6 fab4 	bl	8000af8 <__addsf3>
 800a590:	4603      	mov	r3, r0
 800a592:	461a      	mov	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	635a      	str	r2, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7f6 fd62 	bl	800106c <__aeabi_fcmpge>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <PID_Calculate+0x19c>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	639a      	str	r2, [r3, #56]	; 0x38
 800a5b6:	e013      	b.n	800a5e0 <PID_Calculate+0x1c4>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	f7f6 fd48 	bl	8001058 <__aeabi_fcmple>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <PID_Calculate+0x1bc>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
 800a5d6:	e003      	b.n	800a5e0 <PID_Calculate+0x1c4>
	else uHat = u;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5ec <memset>:
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	4402      	add	r2, r0
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d100      	bne.n	800a5f6 <memset+0xa>
 800a5f4:	4770      	bx	lr
 800a5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fa:	e7f9      	b.n	800a5f0 <memset+0x4>

0800a5fc <_reclaim_reent>:
 800a5fc:	4b29      	ldr	r3, [pc, #164]	; (800a6a4 <_reclaim_reent+0xa8>)
 800a5fe:	b570      	push	{r4, r5, r6, lr}
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4604      	mov	r4, r0
 800a604:	4283      	cmp	r3, r0
 800a606:	d04b      	beq.n	800a6a0 <_reclaim_reent+0xa4>
 800a608:	69c3      	ldr	r3, [r0, #28]
 800a60a:	b143      	cbz	r3, 800a61e <_reclaim_reent+0x22>
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d144      	bne.n	800a69c <_reclaim_reent+0xa0>
 800a612:	69e3      	ldr	r3, [r4, #28]
 800a614:	6819      	ldr	r1, [r3, #0]
 800a616:	b111      	cbz	r1, 800a61e <_reclaim_reent+0x22>
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 f879 	bl	800a710 <_free_r>
 800a61e:	6961      	ldr	r1, [r4, #20]
 800a620:	b111      	cbz	r1, 800a628 <_reclaim_reent+0x2c>
 800a622:	4620      	mov	r0, r4
 800a624:	f000 f874 	bl	800a710 <_free_r>
 800a628:	69e1      	ldr	r1, [r4, #28]
 800a62a:	b111      	cbz	r1, 800a632 <_reclaim_reent+0x36>
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 f86f 	bl	800a710 <_free_r>
 800a632:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a634:	b111      	cbz	r1, 800a63c <_reclaim_reent+0x40>
 800a636:	4620      	mov	r0, r4
 800a638:	f000 f86a 	bl	800a710 <_free_r>
 800a63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a63e:	b111      	cbz	r1, 800a646 <_reclaim_reent+0x4a>
 800a640:	4620      	mov	r0, r4
 800a642:	f000 f865 	bl	800a710 <_free_r>
 800a646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a648:	b111      	cbz	r1, 800a650 <_reclaim_reent+0x54>
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 f860 	bl	800a710 <_free_r>
 800a650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a652:	b111      	cbz	r1, 800a65a <_reclaim_reent+0x5e>
 800a654:	4620      	mov	r0, r4
 800a656:	f000 f85b 	bl	800a710 <_free_r>
 800a65a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a65c:	b111      	cbz	r1, 800a664 <_reclaim_reent+0x68>
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f856 	bl	800a710 <_free_r>
 800a664:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a666:	b111      	cbz	r1, 800a66e <_reclaim_reent+0x72>
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 f851 	bl	800a710 <_free_r>
 800a66e:	6a23      	ldr	r3, [r4, #32]
 800a670:	b1b3      	cbz	r3, 800a6a0 <_reclaim_reent+0xa4>
 800a672:	4620      	mov	r0, r4
 800a674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a678:	4718      	bx	r3
 800a67a:	5949      	ldr	r1, [r1, r5]
 800a67c:	b941      	cbnz	r1, 800a690 <_reclaim_reent+0x94>
 800a67e:	3504      	adds	r5, #4
 800a680:	69e3      	ldr	r3, [r4, #28]
 800a682:	2d80      	cmp	r5, #128	; 0x80
 800a684:	68d9      	ldr	r1, [r3, #12]
 800a686:	d1f8      	bne.n	800a67a <_reclaim_reent+0x7e>
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 f841 	bl	800a710 <_free_r>
 800a68e:	e7c0      	b.n	800a612 <_reclaim_reent+0x16>
 800a690:	680e      	ldr	r6, [r1, #0]
 800a692:	4620      	mov	r0, r4
 800a694:	f000 f83c 	bl	800a710 <_free_r>
 800a698:	4631      	mov	r1, r6
 800a69a:	e7ef      	b.n	800a67c <_reclaim_reent+0x80>
 800a69c:	2500      	movs	r5, #0
 800a69e:	e7ef      	b.n	800a680 <_reclaim_reent+0x84>
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000060 	.word	0x20000060

0800a6a8 <__libc_init_array>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	4d0c      	ldr	r5, [pc, #48]	; (800a6e0 <__libc_init_array+0x38>)
 800a6ae:	4c0d      	ldr	r4, [pc, #52]	; (800a6e4 <__libc_init_array+0x3c>)
 800a6b0:	1b64      	subs	r4, r4, r5
 800a6b2:	10a4      	asrs	r4, r4, #2
 800a6b4:	42a6      	cmp	r6, r4
 800a6b6:	d109      	bne.n	800a6cc <__libc_init_array+0x24>
 800a6b8:	f001 f8b6 	bl	800b828 <_init>
 800a6bc:	2600      	movs	r6, #0
 800a6be:	4d0a      	ldr	r5, [pc, #40]	; (800a6e8 <__libc_init_array+0x40>)
 800a6c0:	4c0a      	ldr	r4, [pc, #40]	; (800a6ec <__libc_init_array+0x44>)
 800a6c2:	1b64      	subs	r4, r4, r5
 800a6c4:	10a4      	asrs	r4, r4, #2
 800a6c6:	42a6      	cmp	r6, r4
 800a6c8:	d105      	bne.n	800a6d6 <__libc_init_array+0x2e>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d0:	4798      	blx	r3
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	e7ee      	b.n	800a6b4 <__libc_init_array+0xc>
 800a6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6da:	4798      	blx	r3
 800a6dc:	3601      	adds	r6, #1
 800a6de:	e7f2      	b.n	800a6c6 <__libc_init_array+0x1e>
 800a6e0:	0800bce8 	.word	0x0800bce8
 800a6e4:	0800bce8 	.word	0x0800bce8
 800a6e8:	0800bce8 	.word	0x0800bce8
 800a6ec:	0800bcec 	.word	0x0800bcec

0800a6f0 <__retarget_lock_acquire_recursive>:
 800a6f0:	4770      	bx	lr

0800a6f2 <__retarget_lock_release_recursive>:
 800a6f2:	4770      	bx	lr

0800a6f4 <memcpy>:
 800a6f4:	440a      	add	r2, r1
 800a6f6:	4291      	cmp	r1, r2
 800a6f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6fc:	d100      	bne.n	800a700 <memcpy+0xc>
 800a6fe:	4770      	bx	lr
 800a700:	b510      	push	{r4, lr}
 800a702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a706:	4291      	cmp	r1, r2
 800a708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70c:	d1f9      	bne.n	800a702 <memcpy+0xe>
 800a70e:	bd10      	pop	{r4, pc}

0800a710 <_free_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4605      	mov	r5, r0
 800a714:	2900      	cmp	r1, #0
 800a716:	d040      	beq.n	800a79a <_free_r+0x8a>
 800a718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71c:	1f0c      	subs	r4, r1, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfb8      	it	lt
 800a722:	18e4      	addlt	r4, r4, r3
 800a724:	f000 f83c 	bl	800a7a0 <__malloc_lock>
 800a728:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <_free_r+0x8c>)
 800a72a:	6813      	ldr	r3, [r2, #0]
 800a72c:	b933      	cbnz	r3, 800a73c <_free_r+0x2c>
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	6014      	str	r4, [r2, #0]
 800a732:	4628      	mov	r0, r5
 800a734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a738:	f000 b838 	b.w	800a7ac <__malloc_unlock>
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	d908      	bls.n	800a752 <_free_r+0x42>
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	1821      	adds	r1, r4, r0
 800a744:	428b      	cmp	r3, r1
 800a746:	bf01      	itttt	eq
 800a748:	6819      	ldreq	r1, [r3, #0]
 800a74a:	685b      	ldreq	r3, [r3, #4]
 800a74c:	1809      	addeq	r1, r1, r0
 800a74e:	6021      	streq	r1, [r4, #0]
 800a750:	e7ed      	b.n	800a72e <_free_r+0x1e>
 800a752:	461a      	mov	r2, r3
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	b10b      	cbz	r3, 800a75c <_free_r+0x4c>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d9fa      	bls.n	800a752 <_free_r+0x42>
 800a75c:	6811      	ldr	r1, [r2, #0]
 800a75e:	1850      	adds	r0, r2, r1
 800a760:	42a0      	cmp	r0, r4
 800a762:	d10b      	bne.n	800a77c <_free_r+0x6c>
 800a764:	6820      	ldr	r0, [r4, #0]
 800a766:	4401      	add	r1, r0
 800a768:	1850      	adds	r0, r2, r1
 800a76a:	4283      	cmp	r3, r0
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	d1e0      	bne.n	800a732 <_free_r+0x22>
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	4408      	add	r0, r1
 800a776:	6010      	str	r0, [r2, #0]
 800a778:	6053      	str	r3, [r2, #4]
 800a77a:	e7da      	b.n	800a732 <_free_r+0x22>
 800a77c:	d902      	bls.n	800a784 <_free_r+0x74>
 800a77e:	230c      	movs	r3, #12
 800a780:	602b      	str	r3, [r5, #0]
 800a782:	e7d6      	b.n	800a732 <_free_r+0x22>
 800a784:	6820      	ldr	r0, [r4, #0]
 800a786:	1821      	adds	r1, r4, r0
 800a788:	428b      	cmp	r3, r1
 800a78a:	bf01      	itttt	eq
 800a78c:	6819      	ldreq	r1, [r3, #0]
 800a78e:	685b      	ldreq	r3, [r3, #4]
 800a790:	1809      	addeq	r1, r1, r0
 800a792:	6021      	streq	r1, [r4, #0]
 800a794:	6063      	str	r3, [r4, #4]
 800a796:	6054      	str	r4, [r2, #4]
 800a798:	e7cb      	b.n	800a732 <_free_r+0x22>
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20001afc 	.word	0x20001afc

0800a7a0 <__malloc_lock>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__malloc_lock+0x8>)
 800a7a2:	f7ff bfa5 	b.w	800a6f0 <__retarget_lock_acquire_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	20001af8 	.word	0x20001af8

0800a7ac <__malloc_unlock>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__malloc_unlock+0x8>)
 800a7ae:	f7ff bfa0 	b.w	800a6f2 <__retarget_lock_release_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20001af8 	.word	0x20001af8

0800a7b8 <cos>:
 800a7b8:	b530      	push	{r4, r5, lr}
 800a7ba:	4a20      	ldr	r2, [pc, #128]	; (800a83c <cos+0x84>)
 800a7bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	dc06      	bgt.n	800a7d4 <cos+0x1c>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	b007      	add	sp, #28
 800a7cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d0:	f000 b87e 	b.w	800a8d0 <__kernel_cos>
 800a7d4:	4a1a      	ldr	r2, [pc, #104]	; (800a840 <cos+0x88>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	dd05      	ble.n	800a7e6 <cos+0x2e>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	f7f5 fcbb 	bl	8000158 <__aeabi_dsub>
 800a7e2:	b007      	add	sp, #28
 800a7e4:	bd30      	pop	{r4, r5, pc}
 800a7e6:	aa02      	add	r2, sp, #8
 800a7e8:	f000 f9ea 	bl	800abc0 <__ieee754_rem_pio2>
 800a7ec:	f000 0003 	and.w	r0, r0, #3
 800a7f0:	2801      	cmp	r0, #1
 800a7f2:	d009      	beq.n	800a808 <cos+0x50>
 800a7f4:	2802      	cmp	r0, #2
 800a7f6:	d011      	beq.n	800a81c <cos+0x64>
 800a7f8:	b9b8      	cbnz	r0, 800a82a <cos+0x72>
 800a7fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a802:	f000 f865 	bl	800a8d0 <__kernel_cos>
 800a806:	e7ec      	b.n	800a7e2 <cos+0x2a>
 800a808:	9000      	str	r0, [sp, #0]
 800a80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a812:	f000 f91d 	bl	800aa50 <__kernel_sin>
 800a816:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a81a:	e7e2      	b.n	800a7e2 <cos+0x2a>
 800a81c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a824:	f000 f854 	bl	800a8d0 <__kernel_cos>
 800a828:	e7f5      	b.n	800a816 <cos+0x5e>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a836:	f000 f90b 	bl	800aa50 <__kernel_sin>
 800a83a:	e7d2      	b.n	800a7e2 <cos+0x2a>
 800a83c:	3fe921fb 	.word	0x3fe921fb
 800a840:	7fefffff 	.word	0x7fefffff

0800a844 <sin>:
 800a844:	b530      	push	{r4, r5, lr}
 800a846:	4a20      	ldr	r2, [pc, #128]	; (800a8c8 <sin+0x84>)
 800a848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a84c:	4293      	cmp	r3, r2
 800a84e:	b087      	sub	sp, #28
 800a850:	dc06      	bgt.n	800a860 <sin+0x1c>
 800a852:	2300      	movs	r3, #0
 800a854:	2200      	movs	r2, #0
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2300      	movs	r3, #0
 800a85a:	f000 f8f9 	bl	800aa50 <__kernel_sin>
 800a85e:	e006      	b.n	800a86e <sin+0x2a>
 800a860:	4a1a      	ldr	r2, [pc, #104]	; (800a8cc <sin+0x88>)
 800a862:	4293      	cmp	r3, r2
 800a864:	dd05      	ble.n	800a872 <sin+0x2e>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	f7f5 fc75 	bl	8000158 <__aeabi_dsub>
 800a86e:	b007      	add	sp, #28
 800a870:	bd30      	pop	{r4, r5, pc}
 800a872:	aa02      	add	r2, sp, #8
 800a874:	f000 f9a4 	bl	800abc0 <__ieee754_rem_pio2>
 800a878:	f000 0003 	and.w	r0, r0, #3
 800a87c:	2801      	cmp	r0, #1
 800a87e:	d009      	beq.n	800a894 <sin+0x50>
 800a880:	2802      	cmp	r0, #2
 800a882:	d00e      	beq.n	800a8a2 <sin+0x5e>
 800a884:	b9c0      	cbnz	r0, 800a8b8 <sin+0x74>
 800a886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a88a:	2301      	movs	r3, #1
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a892:	e7e2      	b.n	800a85a <sin+0x16>
 800a894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89c:	f000 f818 	bl	800a8d0 <__kernel_cos>
 800a8a0:	e7e5      	b.n	800a86e <sin+0x2a>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ae:	f000 f8cf 	bl	800aa50 <__kernel_sin>
 800a8b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a8b6:	e7da      	b.n	800a86e <sin+0x2a>
 800a8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c0:	f000 f806 	bl	800a8d0 <__kernel_cos>
 800a8c4:	e7f5      	b.n	800a8b2 <sin+0x6e>
 800a8c6:	bf00      	nop
 800a8c8:	3fe921fb 	.word	0x3fe921fb
 800a8cc:	7fefffff 	.word	0x7fefffff

0800a8d0 <__kernel_cos>:
 800a8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a8d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a8dc:	4680      	mov	r8, r0
 800a8de:	460f      	mov	r7, r1
 800a8e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a8e4:	da04      	bge.n	800a8f0 <__kernel_cos+0x20>
 800a8e6:	f7f6 f889 	bl	80009fc <__aeabi_d2iz>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f000 8086 	beq.w	800a9fc <__kernel_cos+0x12c>
 800a8f0:	4642      	mov	r2, r8
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f5 fde6 	bl	80004c8 <__aeabi_dmul>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4b4e      	ldr	r3, [pc, #312]	; (800aa38 <__kernel_cos+0x168>)
 800a900:	4604      	mov	r4, r0
 800a902:	460d      	mov	r5, r1
 800a904:	f7f5 fde0 	bl	80004c8 <__aeabi_dmul>
 800a908:	a33f      	add	r3, pc, #252	; (adr r3, 800aa08 <__kernel_cos+0x138>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4682      	mov	sl, r0
 800a910:	468b      	mov	fp, r1
 800a912:	4620      	mov	r0, r4
 800a914:	4629      	mov	r1, r5
 800a916:	f7f5 fdd7 	bl	80004c8 <__aeabi_dmul>
 800a91a:	a33d      	add	r3, pc, #244	; (adr r3, 800aa10 <__kernel_cos+0x140>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fc1c 	bl	800015c <__adddf3>
 800a924:	4622      	mov	r2, r4
 800a926:	462b      	mov	r3, r5
 800a928:	f7f5 fdce 	bl	80004c8 <__aeabi_dmul>
 800a92c:	a33a      	add	r3, pc, #232	; (adr r3, 800aa18 <__kernel_cos+0x148>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 fc11 	bl	8000158 <__aeabi_dsub>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fdc5 	bl	80004c8 <__aeabi_dmul>
 800a93e:	a338      	add	r3, pc, #224	; (adr r3, 800aa20 <__kernel_cos+0x150>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fc0a 	bl	800015c <__adddf3>
 800a948:	4622      	mov	r2, r4
 800a94a:	462b      	mov	r3, r5
 800a94c:	f7f5 fdbc 	bl	80004c8 <__aeabi_dmul>
 800a950:	a335      	add	r3, pc, #212	; (adr r3, 800aa28 <__kernel_cos+0x158>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fbff 	bl	8000158 <__aeabi_dsub>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fdb3 	bl	80004c8 <__aeabi_dmul>
 800a962:	a333      	add	r3, pc, #204	; (adr r3, 800aa30 <__kernel_cos+0x160>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fbf8 	bl	800015c <__adddf3>
 800a96c:	4622      	mov	r2, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	f7f5 fdaa 	bl	80004c8 <__aeabi_dmul>
 800a974:	4622      	mov	r2, r4
 800a976:	462b      	mov	r3, r5
 800a978:	f7f5 fda6 	bl	80004c8 <__aeabi_dmul>
 800a97c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	4640      	mov	r0, r8
 800a986:	4639      	mov	r1, r7
 800a988:	f7f5 fd9e 	bl	80004c8 <__aeabi_dmul>
 800a98c:	460b      	mov	r3, r1
 800a98e:	4602      	mov	r2, r0
 800a990:	4629      	mov	r1, r5
 800a992:	4620      	mov	r0, r4
 800a994:	f7f5 fbe0 	bl	8000158 <__aeabi_dsub>
 800a998:	4b28      	ldr	r3, [pc, #160]	; (800aa3c <__kernel_cos+0x16c>)
 800a99a:	4680      	mov	r8, r0
 800a99c:	429e      	cmp	r6, r3
 800a99e:	4689      	mov	r9, r1
 800a9a0:	dc0e      	bgt.n	800a9c0 <__kernel_cos+0xf0>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	4659      	mov	r1, fp
 800a9aa:	f7f5 fbd5 	bl	8000158 <__aeabi_dsub>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4922      	ldr	r1, [pc, #136]	; (800aa40 <__kernel_cos+0x170>)
 800a9b6:	f7f5 fbcf 	bl	8000158 <__aeabi_dsub>
 800a9ba:	b003      	add	sp, #12
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	4b20      	ldr	r3, [pc, #128]	; (800aa44 <__kernel_cos+0x174>)
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	bfcc      	ite	gt
 800a9ca:	4d1f      	ldrgt	r5, [pc, #124]	; (800aa48 <__kernel_cos+0x178>)
 800a9cc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	491a      	ldr	r1, [pc, #104]	; (800aa40 <__kernel_cos+0x170>)
 800a9d6:	f7f5 fbbf 	bl	8000158 <__aeabi_dsub>
 800a9da:	4622      	mov	r2, r4
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	4650      	mov	r0, sl
 800a9e4:	4659      	mov	r1, fp
 800a9e6:	f7f5 fbb7 	bl	8000158 <__aeabi_dsub>
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	f7f5 fbb3 	bl	8000158 <__aeabi_dsub>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	e7dc      	b.n	800a9b6 <__kernel_cos+0xe6>
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	4910      	ldr	r1, [pc, #64]	; (800aa40 <__kernel_cos+0x170>)
 800aa00:	e7db      	b.n	800a9ba <__kernel_cos+0xea>
 800aa02:	bf00      	nop
 800aa04:	f3af 8000 	nop.w
 800aa08:	be8838d4 	.word	0xbe8838d4
 800aa0c:	bda8fae9 	.word	0xbda8fae9
 800aa10:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa14:	3e21ee9e 	.word	0x3e21ee9e
 800aa18:	809c52ad 	.word	0x809c52ad
 800aa1c:	3e927e4f 	.word	0x3e927e4f
 800aa20:	19cb1590 	.word	0x19cb1590
 800aa24:	3efa01a0 	.word	0x3efa01a0
 800aa28:	16c15177 	.word	0x16c15177
 800aa2c:	3f56c16c 	.word	0x3f56c16c
 800aa30:	5555554c 	.word	0x5555554c
 800aa34:	3fa55555 	.word	0x3fa55555
 800aa38:	3fe00000 	.word	0x3fe00000
 800aa3c:	3fd33332 	.word	0x3fd33332
 800aa40:	3ff00000 	.word	0x3ff00000
 800aa44:	3fe90000 	.word	0x3fe90000
 800aa48:	3fd20000 	.word	0x3fd20000
 800aa4c:	00000000 	.word	0x00000000

0800aa50 <__kernel_sin>:
 800aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	e9cd 2300 	strd	r2, r3, [sp]
 800aa5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa5e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa62:	4682      	mov	sl, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aa68:	da03      	bge.n	800aa72 <__kernel_sin+0x22>
 800aa6a:	f7f5 ffc7 	bl	80009fc <__aeabi_d2iz>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d050      	beq.n	800ab14 <__kernel_sin+0xc4>
 800aa72:	4652      	mov	r2, sl
 800aa74:	4623      	mov	r3, r4
 800aa76:	4650      	mov	r0, sl
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f7f5 fd25 	bl	80004c8 <__aeabi_dmul>
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4650      	mov	r0, sl
 800aa88:	4621      	mov	r1, r4
 800aa8a:	f7f5 fd1d 	bl	80004c8 <__aeabi_dmul>
 800aa8e:	a33e      	add	r3, pc, #248	; (adr r3, 800ab88 <__kernel_sin+0x138>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	4680      	mov	r8, r0
 800aa96:	4689      	mov	r9, r1
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f5 fd14 	bl	80004c8 <__aeabi_dmul>
 800aaa0:	a33b      	add	r3, pc, #236	; (adr r3, 800ab90 <__kernel_sin+0x140>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fb57 	bl	8000158 <__aeabi_dsub>
 800aaaa:	4632      	mov	r2, r6
 800aaac:	463b      	mov	r3, r7
 800aaae:	f7f5 fd0b 	bl	80004c8 <__aeabi_dmul>
 800aab2:	a339      	add	r3, pc, #228	; (adr r3, 800ab98 <__kernel_sin+0x148>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fb50 	bl	800015c <__adddf3>
 800aabc:	4632      	mov	r2, r6
 800aabe:	463b      	mov	r3, r7
 800aac0:	f7f5 fd02 	bl	80004c8 <__aeabi_dmul>
 800aac4:	a336      	add	r3, pc, #216	; (adr r3, 800aba0 <__kernel_sin+0x150>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fb45 	bl	8000158 <__aeabi_dsub>
 800aace:	4632      	mov	r2, r6
 800aad0:	463b      	mov	r3, r7
 800aad2:	f7f5 fcf9 	bl	80004c8 <__aeabi_dmul>
 800aad6:	a334      	add	r3, pc, #208	; (adr r3, 800aba8 <__kernel_sin+0x158>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fb3e 	bl	800015c <__adddf3>
 800aae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae4:	b9dd      	cbnz	r5, 800ab1e <__kernel_sin+0xce>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4630      	mov	r0, r6
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fceb 	bl	80004c8 <__aeabi_dmul>
 800aaf2:	a32f      	add	r3, pc, #188	; (adr r3, 800abb0 <__kernel_sin+0x160>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fb2e 	bl	8000158 <__aeabi_dsub>
 800aafc:	4642      	mov	r2, r8
 800aafe:	464b      	mov	r3, r9
 800ab00:	f7f5 fce2 	bl	80004c8 <__aeabi_dmul>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	f7f5 fb26 	bl	800015c <__adddf3>
 800ab10:	4682      	mov	sl, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	4650      	mov	r0, sl
 800ab16:	4621      	mov	r1, r4
 800ab18:	b006      	add	sp, #24
 800ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1e:	2200      	movs	r2, #0
 800ab20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab24:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <__kernel_sin+0x168>)
 800ab26:	f7f5 fccf 	bl	80004c8 <__aeabi_dmul>
 800ab2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 fcc7 	bl	80004c8 <__aeabi_dmul>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab42:	f7f5 fb09 	bl	8000158 <__aeabi_dsub>
 800ab46:	4632      	mov	r2, r6
 800ab48:	463b      	mov	r3, r7
 800ab4a:	f7f5 fcbd 	bl	80004c8 <__aeabi_dmul>
 800ab4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab52:	f7f5 fb01 	bl	8000158 <__aeabi_dsub>
 800ab56:	a316      	add	r3, pc, #88	; (adr r3, 800abb0 <__kernel_sin+0x160>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460f      	mov	r7, r1
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 fcb0 	bl	80004c8 <__aeabi_dmul>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 faf4 	bl	800015c <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4650      	mov	r0, sl
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	f7f5 faec 	bl	8000158 <__aeabi_dsub>
 800ab80:	e7c6      	b.n	800ab10 <__kernel_sin+0xc0>
 800ab82:	bf00      	nop
 800ab84:	f3af 8000 	nop.w
 800ab88:	5acfd57c 	.word	0x5acfd57c
 800ab8c:	3de5d93a 	.word	0x3de5d93a
 800ab90:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab94:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab98:	57b1fe7d 	.word	0x57b1fe7d
 800ab9c:	3ec71de3 	.word	0x3ec71de3
 800aba0:	19c161d5 	.word	0x19c161d5
 800aba4:	3f2a01a0 	.word	0x3f2a01a0
 800aba8:	1110f8a6 	.word	0x1110f8a6
 800abac:	3f811111 	.word	0x3f811111
 800abb0:	55555549 	.word	0x55555549
 800abb4:	3fc55555 	.word	0x3fc55555
 800abb8:	3fe00000 	.word	0x3fe00000
 800abbc:	00000000 	.word	0x00000000

0800abc0 <__ieee754_rem_pio2>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	4614      	mov	r4, r2
 800abc6:	4ac2      	ldr	r2, [pc, #776]	; (800aed0 <__ieee754_rem_pio2+0x310>)
 800abc8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800abcc:	b08d      	sub	sp, #52	; 0x34
 800abce:	4592      	cmp	sl, r2
 800abd0:	9104      	str	r1, [sp, #16]
 800abd2:	dc07      	bgt.n	800abe4 <__ieee754_rem_pio2+0x24>
 800abd4:	2200      	movs	r2, #0
 800abd6:	2300      	movs	r3, #0
 800abd8:	e9c4 0100 	strd	r0, r1, [r4]
 800abdc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800abe0:	2500      	movs	r5, #0
 800abe2:	e024      	b.n	800ac2e <__ieee754_rem_pio2+0x6e>
 800abe4:	4abb      	ldr	r2, [pc, #748]	; (800aed4 <__ieee754_rem_pio2+0x314>)
 800abe6:	4592      	cmp	sl, r2
 800abe8:	dc72      	bgt.n	800acd0 <__ieee754_rem_pio2+0x110>
 800abea:	9b04      	ldr	r3, [sp, #16]
 800abec:	4dba      	ldr	r5, [pc, #744]	; (800aed8 <__ieee754_rem_pio2+0x318>)
 800abee:	2b00      	cmp	r3, #0
 800abf0:	a3a9      	add	r3, pc, #676	; (adr r3, 800ae98 <__ieee754_rem_pio2+0x2d8>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	dd36      	ble.n	800ac66 <__ieee754_rem_pio2+0xa6>
 800abf8:	f7f5 faae 	bl	8000158 <__aeabi_dsub>
 800abfc:	45aa      	cmp	sl, r5
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	d018      	beq.n	800ac36 <__ieee754_rem_pio2+0x76>
 800ac04:	a3a6      	add	r3, pc, #664	; (adr r3, 800aea0 <__ieee754_rem_pio2+0x2e0>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 faa5 	bl	8000158 <__aeabi_dsub>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4630      	mov	r0, r6
 800ac14:	e9c4 2300 	strd	r2, r3, [r4]
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fa9d 	bl	8000158 <__aeabi_dsub>
 800ac1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800aea0 <__ieee754_rem_pio2+0x2e0>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fa98 	bl	8000158 <__aeabi_dsub>
 800ac28:	2501      	movs	r5, #1
 800ac2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac2e:	4628      	mov	r0, r5
 800ac30:	b00d      	add	sp, #52	; 0x34
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	a39c      	add	r3, pc, #624	; (adr r3, 800aea8 <__ieee754_rem_pio2+0x2e8>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	f7f5 fa8c 	bl	8000158 <__aeabi_dsub>
 800ac40:	a39b      	add	r3, pc, #620	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2f0>)
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	f7f5 fa85 	bl	8000158 <__aeabi_dsub>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4630      	mov	r0, r6
 800ac54:	e9c4 2300 	strd	r2, r3, [r4]
 800ac58:	4639      	mov	r1, r7
 800ac5a:	f7f5 fa7d 	bl	8000158 <__aeabi_dsub>
 800ac5e:	a394      	add	r3, pc, #592	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2f0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	e7de      	b.n	800ac24 <__ieee754_rem_pio2+0x64>
 800ac66:	f7f5 fa79 	bl	800015c <__adddf3>
 800ac6a:	45aa      	cmp	sl, r5
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	d016      	beq.n	800aca0 <__ieee754_rem_pio2+0xe0>
 800ac72:	a38b      	add	r3, pc, #556	; (adr r3, 800aea0 <__ieee754_rem_pio2+0x2e0>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fa70 	bl	800015c <__adddf3>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4630      	mov	r0, r6
 800ac82:	e9c4 2300 	strd	r2, r3, [r4]
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fa66 	bl	8000158 <__aeabi_dsub>
 800ac8c:	a384      	add	r3, pc, #528	; (adr r3, 800aea0 <__ieee754_rem_pio2+0x2e0>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 fa63 	bl	800015c <__adddf3>
 800ac96:	f04f 35ff 	mov.w	r5, #4294967295
 800ac9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac9e:	e7c6      	b.n	800ac2e <__ieee754_rem_pio2+0x6e>
 800aca0:	a381      	add	r3, pc, #516	; (adr r3, 800aea8 <__ieee754_rem_pio2+0x2e8>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 fa59 	bl	800015c <__adddf3>
 800acaa:	a381      	add	r3, pc, #516	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2f0>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	4606      	mov	r6, r0
 800acb2:	460f      	mov	r7, r1
 800acb4:	f7f5 fa52 	bl	800015c <__adddf3>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4630      	mov	r0, r6
 800acbe:	e9c4 2300 	strd	r2, r3, [r4]
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 fa48 	bl	8000158 <__aeabi_dsub>
 800acc8:	a379      	add	r3, pc, #484	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2f0>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	e7e0      	b.n	800ac92 <__ieee754_rem_pio2+0xd2>
 800acd0:	4a82      	ldr	r2, [pc, #520]	; (800aedc <__ieee754_rem_pio2+0x31c>)
 800acd2:	4592      	cmp	sl, r2
 800acd4:	f300 80d4 	bgt.w	800ae80 <__ieee754_rem_pio2+0x2c0>
 800acd8:	f000 f966 	bl	800afa8 <fabs>
 800acdc:	a376      	add	r3, pc, #472	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2f8>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	4606      	mov	r6, r0
 800ace4:	460f      	mov	r7, r1
 800ace6:	f7f5 fbef 	bl	80004c8 <__aeabi_dmul>
 800acea:	2200      	movs	r2, #0
 800acec:	4b7c      	ldr	r3, [pc, #496]	; (800aee0 <__ieee754_rem_pio2+0x320>)
 800acee:	f7f5 fa35 	bl	800015c <__adddf3>
 800acf2:	f7f5 fe83 	bl	80009fc <__aeabi_d2iz>
 800acf6:	4605      	mov	r5, r0
 800acf8:	f7f5 fb7c 	bl	80003f4 <__aeabi_i2d>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad04:	a364      	add	r3, pc, #400	; (adr r3, 800ae98 <__ieee754_rem_pio2+0x2d8>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fbdd 	bl	80004c8 <__aeabi_dmul>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fa1f 	bl	8000158 <__aeabi_dsub>
 800ad1a:	a361      	add	r3, pc, #388	; (adr r3, 800aea0 <__ieee754_rem_pio2+0x2e0>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	4680      	mov	r8, r0
 800ad22:	4689      	mov	r9, r1
 800ad24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad28:	f7f5 fbce 	bl	80004c8 <__aeabi_dmul>
 800ad2c:	2d1f      	cmp	r5, #31
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	dc0e      	bgt.n	800ad52 <__ieee754_rem_pio2+0x192>
 800ad34:	4b6b      	ldr	r3, [pc, #428]	; (800aee4 <__ieee754_rem_pio2+0x324>)
 800ad36:	1e6a      	subs	r2, r5, #1
 800ad38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3c:	4553      	cmp	r3, sl
 800ad3e:	d008      	beq.n	800ad52 <__ieee754_rem_pio2+0x192>
 800ad40:	4632      	mov	r2, r6
 800ad42:	463b      	mov	r3, r7
 800ad44:	4640      	mov	r0, r8
 800ad46:	4649      	mov	r1, r9
 800ad48:	f7f5 fa06 	bl	8000158 <__aeabi_dsub>
 800ad4c:	e9c4 0100 	strd	r0, r1, [r4]
 800ad50:	e012      	b.n	800ad78 <__ieee754_rem_pio2+0x1b8>
 800ad52:	463b      	mov	r3, r7
 800ad54:	4632      	mov	r2, r6
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 f9fd 	bl	8000158 <__aeabi_dsub>
 800ad5e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800ad62:	9305      	str	r3, [sp, #20]
 800ad64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad68:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	dc1f      	bgt.n	800adb0 <__ieee754_rem_pio2+0x1f0>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	e9c4 2300 	strd	r2, r3, [r4]
 800ad78:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4653      	mov	r3, sl
 800ad80:	4649      	mov	r1, r9
 800ad82:	f7f5 f9e9 	bl	8000158 <__aeabi_dsub>
 800ad86:	4632      	mov	r2, r6
 800ad88:	463b      	mov	r3, r7
 800ad8a:	f7f5 f9e5 	bl	8000158 <__aeabi_dsub>
 800ad8e:	460b      	mov	r3, r1
 800ad90:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad94:	9904      	ldr	r1, [sp, #16]
 800ad96:	4602      	mov	r2, r0
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	f6bf af48 	bge.w	800ac2e <__ieee754_rem_pio2+0x6e>
 800ad9e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800ada2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ada6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adaa:	60e3      	str	r3, [r4, #12]
 800adac:	426d      	negs	r5, r5
 800adae:	e73e      	b.n	800ac2e <__ieee754_rem_pio2+0x6e>
 800adb0:	a33d      	add	r3, pc, #244	; (adr r3, 800aea8 <__ieee754_rem_pio2+0x2e8>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adba:	f7f5 fb85 	bl	80004c8 <__aeabi_dmul>
 800adbe:	4606      	mov	r6, r0
 800adc0:	460f      	mov	r7, r1
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4640      	mov	r0, r8
 800adc8:	4649      	mov	r1, r9
 800adca:	f7f5 f9c5 	bl	8000158 <__aeabi_dsub>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4682      	mov	sl, r0
 800add4:	468b      	mov	fp, r1
 800add6:	4640      	mov	r0, r8
 800add8:	4649      	mov	r1, r9
 800adda:	f7f5 f9bd 	bl	8000158 <__aeabi_dsub>
 800adde:	4632      	mov	r2, r6
 800ade0:	463b      	mov	r3, r7
 800ade2:	f7f5 f9b9 	bl	8000158 <__aeabi_dsub>
 800ade6:	a332      	add	r3, pc, #200	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2f0>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	4606      	mov	r6, r0
 800adee:	460f      	mov	r7, r1
 800adf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf4:	f7f5 fb68 	bl	80004c8 <__aeabi_dmul>
 800adf8:	4632      	mov	r2, r6
 800adfa:	463b      	mov	r3, r7
 800adfc:	f7f5 f9ac 	bl	8000158 <__aeabi_dsub>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	f7f5 f9a4 	bl	8000158 <__aeabi_dsub>
 800ae10:	9a05      	ldr	r2, [sp, #20]
 800ae12:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b31      	cmp	r3, #49	; 0x31
 800ae1a:	dc06      	bgt.n	800ae2a <__ieee754_rem_pio2+0x26a>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	46d0      	mov	r8, sl
 800ae22:	46d9      	mov	r9, fp
 800ae24:	e9c4 2300 	strd	r2, r3, [r4]
 800ae28:	e7a6      	b.n	800ad78 <__ieee754_rem_pio2+0x1b8>
 800ae2a:	a325      	add	r3, pc, #148	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x300>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae34:	f7f5 fb48 	bl	80004c8 <__aeabi_dmul>
 800ae38:	4606      	mov	r6, r0
 800ae3a:	460f      	mov	r7, r1
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4650      	mov	r0, sl
 800ae42:	4659      	mov	r1, fp
 800ae44:	f7f5 f988 	bl	8000158 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4689      	mov	r9, r1
 800ae50:	4650      	mov	r0, sl
 800ae52:	4659      	mov	r1, fp
 800ae54:	f7f5 f980 	bl	8000158 <__aeabi_dsub>
 800ae58:	4632      	mov	r2, r6
 800ae5a:	463b      	mov	r3, r7
 800ae5c:	f7f5 f97c 	bl	8000158 <__aeabi_dsub>
 800ae60:	a319      	add	r3, pc, #100	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x308>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6e:	f7f5 fb2b 	bl	80004c8 <__aeabi_dmul>
 800ae72:	4632      	mov	r2, r6
 800ae74:	463b      	mov	r3, r7
 800ae76:	f7f5 f96f 	bl	8000158 <__aeabi_dsub>
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	e75f      	b.n	800ad40 <__ieee754_rem_pio2+0x180>
 800ae80:	4a19      	ldr	r2, [pc, #100]	; (800aee8 <__ieee754_rem_pio2+0x328>)
 800ae82:	4592      	cmp	sl, r2
 800ae84:	dd32      	ble.n	800aeec <__ieee754_rem_pio2+0x32c>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	f7f5 f965 	bl	8000158 <__aeabi_dsub>
 800ae8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae92:	e9c4 0100 	strd	r0, r1, [r4]
 800ae96:	e6a3      	b.n	800abe0 <__ieee754_rem_pio2+0x20>
 800ae98:	54400000 	.word	0x54400000
 800ae9c:	3ff921fb 	.word	0x3ff921fb
 800aea0:	1a626331 	.word	0x1a626331
 800aea4:	3dd0b461 	.word	0x3dd0b461
 800aea8:	1a600000 	.word	0x1a600000
 800aeac:	3dd0b461 	.word	0x3dd0b461
 800aeb0:	2e037073 	.word	0x2e037073
 800aeb4:	3ba3198a 	.word	0x3ba3198a
 800aeb8:	6dc9c883 	.word	0x6dc9c883
 800aebc:	3fe45f30 	.word	0x3fe45f30
 800aec0:	2e000000 	.word	0x2e000000
 800aec4:	3ba3198a 	.word	0x3ba3198a
 800aec8:	252049c1 	.word	0x252049c1
 800aecc:	397b839a 	.word	0x397b839a
 800aed0:	3fe921fb 	.word	0x3fe921fb
 800aed4:	4002d97b 	.word	0x4002d97b
 800aed8:	3ff921fb 	.word	0x3ff921fb
 800aedc:	413921fb 	.word	0x413921fb
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	0800bb0c 	.word	0x0800bb0c
 800aee8:	7fefffff 	.word	0x7fefffff
 800aeec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aef0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aef4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aef8:	460f      	mov	r7, r1
 800aefa:	4606      	mov	r6, r0
 800aefc:	f7f5 fd7e 	bl	80009fc <__aeabi_d2iz>
 800af00:	f7f5 fa78 	bl	80003f4 <__aeabi_i2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af10:	f7f5 f922 	bl	8000158 <__aeabi_dsub>
 800af14:	2200      	movs	r2, #0
 800af16:	4b22      	ldr	r3, [pc, #136]	; (800afa0 <__ieee754_rem_pio2+0x3e0>)
 800af18:	f7f5 fad6 	bl	80004c8 <__aeabi_dmul>
 800af1c:	460f      	mov	r7, r1
 800af1e:	4606      	mov	r6, r0
 800af20:	f7f5 fd6c 	bl	80009fc <__aeabi_d2iz>
 800af24:	f7f5 fa66 	bl	80003f4 <__aeabi_i2d>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af34:	f7f5 f910 	bl	8000158 <__aeabi_dsub>
 800af38:	2200      	movs	r2, #0
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <__ieee754_rem_pio2+0x3e0>)
 800af3c:	f7f5 fac4 	bl	80004c8 <__aeabi_dmul>
 800af40:	f04f 0803 	mov.w	r8, #3
 800af44:	2600      	movs	r6, #0
 800af46:	2700      	movs	r7, #0
 800af48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800af50:	4632      	mov	r2, r6
 800af52:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af56:	463b      	mov	r3, r7
 800af58:	46c2      	mov	sl, r8
 800af5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800af5e:	f7f5 fd1b 	bl	8000998 <__aeabi_dcmpeq>
 800af62:	2800      	cmp	r0, #0
 800af64:	d1f4      	bne.n	800af50 <__ieee754_rem_pio2+0x390>
 800af66:	4b0f      	ldr	r3, [pc, #60]	; (800afa4 <__ieee754_rem_pio2+0x3e4>)
 800af68:	462a      	mov	r2, r5
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	2302      	movs	r3, #2
 800af6e:	4621      	mov	r1, r4
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	a806      	add	r0, sp, #24
 800af74:	4653      	mov	r3, sl
 800af76:	f000 f81b 	bl	800afb0 <__kernel_rem_pio2>
 800af7a:	9b04      	ldr	r3, [sp, #16]
 800af7c:	4605      	mov	r5, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f6bf ae55 	bge.w	800ac2e <__ieee754_rem_pio2+0x6e>
 800af84:	e9d4 2100 	ldrd	r2, r1, [r4]
 800af88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af8c:	e9c4 2300 	strd	r2, r3, [r4]
 800af90:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800af94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af98:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800af9c:	e706      	b.n	800adac <__ieee754_rem_pio2+0x1ec>
 800af9e:	bf00      	nop
 800afa0:	41700000 	.word	0x41700000
 800afa4:	0800bb8c 	.word	0x0800bb8c

0800afa8 <fabs>:
 800afa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afac:	4619      	mov	r1, r3
 800afae:	4770      	bx	lr

0800afb0 <__kernel_rem_pio2>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800afb8:	9308      	str	r3, [sp, #32]
 800afba:	9106      	str	r1, [sp, #24]
 800afbc:	4bb6      	ldr	r3, [pc, #728]	; (800b298 <__kernel_rem_pio2+0x2e8>)
 800afbe:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800afc0:	f112 0f14 	cmn.w	r2, #20
 800afc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afc8:	bfa8      	it	ge
 800afca:	1ed4      	subge	r4, r2, #3
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	9b08      	ldr	r3, [sp, #32]
 800afd0:	bfb8      	it	lt
 800afd2:	2400      	movlt	r4, #0
 800afd4:	f103 33ff 	add.w	r3, r3, #4294967295
 800afd8:	9307      	str	r3, [sp, #28]
 800afda:	bfa4      	itt	ge
 800afdc:	2318      	movge	r3, #24
 800afde:	fb94 f4f3 	sdivge	r4, r4, r3
 800afe2:	f06f 0317 	mvn.w	r3, #23
 800afe6:	fb04 3303 	mla	r3, r4, r3, r3
 800afea:	eb03 0b02 	add.w	fp, r3, r2
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	1aa7      	subs	r7, r4, r2
 800aff4:	eb03 0802 	add.w	r8, r3, r2
 800aff8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800affa:	2500      	movs	r5, #0
 800affc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b000:	2200      	movs	r2, #0
 800b002:	2300      	movs	r3, #0
 800b004:	9009      	str	r0, [sp, #36]	; 0x24
 800b006:	ae20      	add	r6, sp, #128	; 0x80
 800b008:	4545      	cmp	r5, r8
 800b00a:	dd14      	ble.n	800b036 <__kernel_rem_pio2+0x86>
 800b00c:	f04f 0800 	mov.w	r8, #0
 800b010:	9a08      	ldr	r2, [sp, #32]
 800b012:	ab20      	add	r3, sp, #128	; 0x80
 800b014:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b018:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b01c:	9b02      	ldr	r3, [sp, #8]
 800b01e:	4598      	cmp	r8, r3
 800b020:	dc35      	bgt.n	800b08e <__kernel_rem_pio2+0xde>
 800b022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b024:	2200      	movs	r2, #0
 800b026:	f1a3 0908 	sub.w	r9, r3, #8
 800b02a:	2300      	movs	r3, #0
 800b02c:	462f      	mov	r7, r5
 800b02e:	2600      	movs	r6, #0
 800b030:	e9cd 2300 	strd	r2, r3, [sp]
 800b034:	e01f      	b.n	800b076 <__kernel_rem_pio2+0xc6>
 800b036:	42ef      	cmn	r7, r5
 800b038:	d40b      	bmi.n	800b052 <__kernel_rem_pio2+0xa2>
 800b03a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b03e:	e9cd 2300 	strd	r2, r3, [sp]
 800b042:	f7f5 f9d7 	bl	80003f4 <__aeabi_i2d>
 800b046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b04a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b04e:	3501      	adds	r5, #1
 800b050:	e7da      	b.n	800b008 <__kernel_rem_pio2+0x58>
 800b052:	4610      	mov	r0, r2
 800b054:	4619      	mov	r1, r3
 800b056:	e7f8      	b.n	800b04a <__kernel_rem_pio2+0x9a>
 800b058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b060:	f7f5 fa32 	bl	80004c8 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b06c:	f7f5 f876 	bl	800015c <__adddf3>
 800b070:	e9cd 0100 	strd	r0, r1, [sp]
 800b074:	3601      	adds	r6, #1
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	3f08      	subs	r7, #8
 800b07a:	429e      	cmp	r6, r3
 800b07c:	ddec      	ble.n	800b058 <__kernel_rem_pio2+0xa8>
 800b07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b082:	f108 0801 	add.w	r8, r8, #1
 800b086:	e8ea 2302 	strd	r2, r3, [sl], #8
 800b08a:	3508      	adds	r5, #8
 800b08c:	e7c6      	b.n	800b01c <__kernel_rem_pio2+0x6c>
 800b08e:	9b02      	ldr	r3, [sp, #8]
 800b090:	aa0c      	add	r2, sp, #48	; 0x30
 800b092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b096:	930b      	str	r3, [sp, #44]	; 0x2c
 800b098:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b09a:	9e02      	ldr	r6, [sp, #8]
 800b09c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a2:	ab98      	add	r3, sp, #608	; 0x260
 800b0a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0a8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b0ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800b0ae:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800b0b2:	46d0      	mov	r8, sl
 800b0b4:	46b1      	mov	r9, r6
 800b0b6:	af0c      	add	r7, sp, #48	; 0x30
 800b0b8:	9700      	str	r7, [sp, #0]
 800b0ba:	f1b9 0f00 	cmp.w	r9, #0
 800b0be:	f1a8 0808 	sub.w	r8, r8, #8
 800b0c2:	dc70      	bgt.n	800b1a6 <__kernel_rem_pio2+0x1f6>
 800b0c4:	465a      	mov	r2, fp
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	f000 fab1 	bl	800b630 <scalbn>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	f7f5 f9f6 	bl	80004c8 <__aeabi_dmul>
 800b0dc:	f000 fb24 	bl	800b728 <floor>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4b6e      	ldr	r3, [pc, #440]	; (800b29c <__kernel_rem_pio2+0x2ec>)
 800b0e4:	f7f5 f9f0 	bl	80004c8 <__aeabi_dmul>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 f832 	bl	8000158 <__aeabi_dsub>
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	f7f5 fc80 	bl	80009fc <__aeabi_d2iz>
 800b0fc:	9004      	str	r0, [sp, #16]
 800b0fe:	f7f5 f979 	bl	80003f4 <__aeabi_i2d>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 f825 	bl	8000158 <__aeabi_dsub>
 800b10e:	f1bb 0f00 	cmp.w	fp, #0
 800b112:	4680      	mov	r8, r0
 800b114:	4689      	mov	r9, r1
 800b116:	dd6f      	ble.n	800b1f8 <__kernel_rem_pio2+0x248>
 800b118:	1e71      	subs	r1, r6, #1
 800b11a:	ab0c      	add	r3, sp, #48	; 0x30
 800b11c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b120:	9c04      	ldr	r4, [sp, #16]
 800b122:	f1cb 0018 	rsb	r0, fp, #24
 800b126:	fa43 f200 	asr.w	r2, r3, r0
 800b12a:	4414      	add	r4, r2
 800b12c:	4082      	lsls	r2, r0
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	aa0c      	add	r2, sp, #48	; 0x30
 800b132:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b136:	f1cb 0217 	rsb	r2, fp, #23
 800b13a:	9404      	str	r4, [sp, #16]
 800b13c:	4113      	asrs	r3, r2
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	dd66      	ble.n	800b214 <__kernel_rem_pio2+0x264>
 800b146:	2200      	movs	r2, #0
 800b148:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b14c:	4614      	mov	r4, r2
 800b14e:	9b04      	ldr	r3, [sp, #16]
 800b150:	3301      	adds	r3, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	4296      	cmp	r6, r2
 800b156:	f300 80ad 	bgt.w	800b2b4 <__kernel_rem_pio2+0x304>
 800b15a:	f1bb 0f00 	cmp.w	fp, #0
 800b15e:	dd07      	ble.n	800b170 <__kernel_rem_pio2+0x1c0>
 800b160:	f1bb 0f01 	cmp.w	fp, #1
 800b164:	f000 80b5 	beq.w	800b2d2 <__kernel_rem_pio2+0x322>
 800b168:	f1bb 0f02 	cmp.w	fp, #2
 800b16c:	f000 80bb 	beq.w	800b2e6 <__kernel_rem_pio2+0x336>
 800b170:	9b00      	ldr	r3, [sp, #0]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d14e      	bne.n	800b214 <__kernel_rem_pio2+0x264>
 800b176:	4642      	mov	r2, r8
 800b178:	464b      	mov	r3, r9
 800b17a:	2000      	movs	r0, #0
 800b17c:	4948      	ldr	r1, [pc, #288]	; (800b2a0 <__kernel_rem_pio2+0x2f0>)
 800b17e:	f7f4 ffeb 	bl	8000158 <__aeabi_dsub>
 800b182:	4680      	mov	r8, r0
 800b184:	4689      	mov	r9, r1
 800b186:	2c00      	cmp	r4, #0
 800b188:	d044      	beq.n	800b214 <__kernel_rem_pio2+0x264>
 800b18a:	465a      	mov	r2, fp
 800b18c:	2000      	movs	r0, #0
 800b18e:	4944      	ldr	r1, [pc, #272]	; (800b2a0 <__kernel_rem_pio2+0x2f0>)
 800b190:	f000 fa4e 	bl	800b630 <scalbn>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f4 ffdc 	bl	8000158 <__aeabi_dsub>
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	e036      	b.n	800b214 <__kernel_rem_pio2+0x264>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4b3e      	ldr	r3, [pc, #248]	; (800b2a4 <__kernel_rem_pio2+0x2f4>)
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	f7f5 f98b 	bl	80004c8 <__aeabi_dmul>
 800b1b2:	f7f5 fc23 	bl	80009fc <__aeabi_d2iz>
 800b1b6:	f7f5 f91d 	bl	80003f4 <__aeabi_i2d>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4b38      	ldr	r3, [pc, #224]	; (800b2a8 <__kernel_rem_pio2+0x2f8>)
 800b1c6:	f7f5 f97f 	bl	80004c8 <__aeabi_dmul>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f4 ffc1 	bl	8000158 <__aeabi_dsub>
 800b1d6:	f7f5 fc11 	bl	80009fc <__aeabi_d2iz>
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	f109 39ff 	add.w	r9, r9, #4294967295
 800b1e0:	f843 0b04 	str.w	r0, [r3], #4
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1ee:	f7f4 ffb5 	bl	800015c <__adddf3>
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	e760      	b.n	800b0ba <__kernel_rem_pio2+0x10a>
 800b1f8:	d105      	bne.n	800b206 <__kernel_rem_pio2+0x256>
 800b1fa:	1e73      	subs	r3, r6, #1
 800b1fc:	aa0c      	add	r2, sp, #48	; 0x30
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	15db      	asrs	r3, r3, #23
 800b204:	e79b      	b.n	800b13e <__kernel_rem_pio2+0x18e>
 800b206:	2200      	movs	r2, #0
 800b208:	4b28      	ldr	r3, [pc, #160]	; (800b2ac <__kernel_rem_pio2+0x2fc>)
 800b20a:	f7f5 fbe3 	bl	80009d4 <__aeabi_dcmpge>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d13e      	bne.n	800b290 <__kernel_rem_pio2+0x2e0>
 800b212:	9000      	str	r0, [sp, #0]
 800b214:	2200      	movs	r2, #0
 800b216:	2300      	movs	r3, #0
 800b218:	4640      	mov	r0, r8
 800b21a:	4649      	mov	r1, r9
 800b21c:	f7f5 fbbc 	bl	8000998 <__aeabi_dcmpeq>
 800b220:	2800      	cmp	r0, #0
 800b222:	f000 80b2 	beq.w	800b38a <__kernel_rem_pio2+0x3da>
 800b226:	1e74      	subs	r4, r6, #1
 800b228:	4623      	mov	r3, r4
 800b22a:	2200      	movs	r2, #0
 800b22c:	9902      	ldr	r1, [sp, #8]
 800b22e:	428b      	cmp	r3, r1
 800b230:	da60      	bge.n	800b2f4 <__kernel_rem_pio2+0x344>
 800b232:	2a00      	cmp	r2, #0
 800b234:	d075      	beq.n	800b322 <__kernel_rem_pio2+0x372>
 800b236:	ab0c      	add	r3, sp, #48	; 0x30
 800b238:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b23c:	f1ab 0b18 	sub.w	fp, fp, #24
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80a0 	beq.w	800b386 <__kernel_rem_pio2+0x3d6>
 800b246:	465a      	mov	r2, fp
 800b248:	2000      	movs	r0, #0
 800b24a:	4915      	ldr	r1, [pc, #84]	; (800b2a0 <__kernel_rem_pio2+0x2f0>)
 800b24c:	f000 f9f0 	bl	800b630 <scalbn>
 800b250:	46a2      	mov	sl, r4
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	f04f 0800 	mov.w	r8, #0
 800b25a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b25c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b2a4 <__kernel_rem_pio2+0x2f4>
 800b260:	00e5      	lsls	r5, r4, #3
 800b262:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b266:	f1ba 0f00 	cmp.w	sl, #0
 800b26a:	f280 80c4 	bge.w	800b3f6 <__kernel_rem_pio2+0x446>
 800b26e:	4626      	mov	r6, r4
 800b270:	2e00      	cmp	r6, #0
 800b272:	f2c0 80f6 	blt.w	800b462 <__kernel_rem_pio2+0x4b2>
 800b276:	4b0e      	ldr	r3, [pc, #56]	; (800b2b0 <__kernel_rem_pio2+0x300>)
 800b278:	f04f 0a00 	mov.w	sl, #0
 800b27c:	9307      	str	r3, [sp, #28]
 800b27e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b280:	f04f 0b00 	mov.w	fp, #0
 800b284:	f04f 0800 	mov.w	r8, #0
 800b288:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b28c:	1ba7      	subs	r7, r4, r6
 800b28e:	e0dc      	b.n	800b44a <__kernel_rem_pio2+0x49a>
 800b290:	2302      	movs	r3, #2
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	e757      	b.n	800b146 <__kernel_rem_pio2+0x196>
 800b296:	bf00      	nop
 800b298:	0800bcd8 	.word	0x0800bcd8
 800b29c:	40200000 	.word	0x40200000
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	3e700000 	.word	0x3e700000
 800b2a8:	41700000 	.word	0x41700000
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	0800bc98 	.word	0x0800bc98
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	b944      	cbnz	r4, 800b2ca <__kernel_rem_pio2+0x31a>
 800b2b8:	b11b      	cbz	r3, 800b2c2 <__kernel_rem_pio2+0x312>
 800b2ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	461c      	mov	r4, r3
 800b2c4:	3201      	adds	r2, #1
 800b2c6:	3704      	adds	r7, #4
 800b2c8:	e744      	b.n	800b154 <__kernel_rem_pio2+0x1a4>
 800b2ca:	1acb      	subs	r3, r1, r3
 800b2cc:	603b      	str	r3, [r7, #0]
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	e7f7      	b.n	800b2c2 <__kernel_rem_pio2+0x312>
 800b2d2:	1e72      	subs	r2, r6, #1
 800b2d4:	ab0c      	add	r3, sp, #48	; 0x30
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b2de:	a90c      	add	r1, sp, #48	; 0x30
 800b2e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b2e4:	e744      	b.n	800b170 <__kernel_rem_pio2+0x1c0>
 800b2e6:	1e72      	subs	r2, r6, #1
 800b2e8:	ab0c      	add	r3, sp, #48	; 0x30
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b2f2:	e7f4      	b.n	800b2de <__kernel_rem_pio2+0x32e>
 800b2f4:	a90c      	add	r1, sp, #48	; 0x30
 800b2f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	e795      	b.n	800b22c <__kernel_rem_pio2+0x27c>
 800b300:	3301      	adds	r3, #1
 800b302:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b306:	2900      	cmp	r1, #0
 800b308:	d0fa      	beq.n	800b300 <__kernel_rem_pio2+0x350>
 800b30a:	9a08      	ldr	r2, [sp, #32]
 800b30c:	a920      	add	r1, sp, #128	; 0x80
 800b30e:	18b2      	adds	r2, r6, r2
 800b310:	f106 0801 	add.w	r8, r6, #1
 800b314:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b318:	18f4      	adds	r4, r6, r3
 800b31a:	4544      	cmp	r4, r8
 800b31c:	da04      	bge.n	800b328 <__kernel_rem_pio2+0x378>
 800b31e:	4626      	mov	r6, r4
 800b320:	e6bf      	b.n	800b0a2 <__kernel_rem_pio2+0xf2>
 800b322:	2301      	movs	r3, #1
 800b324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b326:	e7ec      	b.n	800b302 <__kernel_rem_pio2+0x352>
 800b328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b332:	f7f5 f85f 	bl	80003f4 <__aeabi_i2d>
 800b336:	2600      	movs	r6, #0
 800b338:	2700      	movs	r7, #0
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	e9c5 0100 	strd	r0, r1, [r5]
 800b340:	3b08      	subs	r3, #8
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	9504      	str	r5, [sp, #16]
 800b346:	9b07      	ldr	r3, [sp, #28]
 800b348:	4599      	cmp	r9, r3
 800b34a:	dd05      	ble.n	800b358 <__kernel_rem_pio2+0x3a8>
 800b34c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b350:	f108 0801 	add.w	r8, r8, #1
 800b354:	3508      	adds	r5, #8
 800b356:	e7e0      	b.n	800b31a <__kernel_rem_pio2+0x36a>
 800b358:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b35c:	9900      	ldr	r1, [sp, #0]
 800b35e:	f109 0901 	add.w	r9, r9, #1
 800b362:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b366:	9100      	str	r1, [sp, #0]
 800b368:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b36c:	f8cd c010 	str.w	ip, [sp, #16]
 800b370:	f7f5 f8aa 	bl	80004c8 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4630      	mov	r0, r6
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f4 feee 	bl	800015c <__adddf3>
 800b380:	4606      	mov	r6, r0
 800b382:	460f      	mov	r7, r1
 800b384:	e7df      	b.n	800b346 <__kernel_rem_pio2+0x396>
 800b386:	3c01      	subs	r4, #1
 800b388:	e755      	b.n	800b236 <__kernel_rem_pio2+0x286>
 800b38a:	f1cb 0200 	rsb	r2, fp, #0
 800b38e:	4640      	mov	r0, r8
 800b390:	4649      	mov	r1, r9
 800b392:	f000 f94d 	bl	800b630 <scalbn>
 800b396:	2200      	movs	r2, #0
 800b398:	4ba3      	ldr	r3, [pc, #652]	; (800b628 <__kernel_rem_pio2+0x678>)
 800b39a:	4604      	mov	r4, r0
 800b39c:	460d      	mov	r5, r1
 800b39e:	f7f5 fb19 	bl	80009d4 <__aeabi_dcmpge>
 800b3a2:	b1f8      	cbz	r0, 800b3e4 <__kernel_rem_pio2+0x434>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4ba1      	ldr	r3, [pc, #644]	; (800b62c <__kernel_rem_pio2+0x67c>)
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f5 f88c 	bl	80004c8 <__aeabi_dmul>
 800b3b0:	f7f5 fb24 	bl	80009fc <__aeabi_d2iz>
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	f7f5 f81d 	bl	80003f4 <__aeabi_i2d>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	4b9a      	ldr	r3, [pc, #616]	; (800b628 <__kernel_rem_pio2+0x678>)
 800b3be:	f7f5 f883 	bl	80004c8 <__aeabi_dmul>
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7f4 fec5 	bl	8000158 <__aeabi_dsub>
 800b3ce:	f7f5 fb15 	bl	80009fc <__aeabi_d2iz>
 800b3d2:	1c74      	adds	r4, r6, #1
 800b3d4:	ab0c      	add	r3, sp, #48	; 0x30
 800b3d6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b3da:	f10b 0b18 	add.w	fp, fp, #24
 800b3de:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b3e2:	e730      	b.n	800b246 <__kernel_rem_pio2+0x296>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f5 fb08 	bl	80009fc <__aeabi_d2iz>
 800b3ec:	ab0c      	add	r3, sp, #48	; 0x30
 800b3ee:	4634      	mov	r4, r6
 800b3f0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b3f4:	e727      	b.n	800b246 <__kernel_rem_pio2+0x296>
 800b3f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b3f8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b3fc:	f7f4 fffa 	bl	80003f4 <__aeabi_i2d>
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	f7f5 f860 	bl	80004c8 <__aeabi_dmul>
 800b408:	4642      	mov	r2, r8
 800b40a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b40e:	464b      	mov	r3, r9
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 f858 	bl	80004c8 <__aeabi_dmul>
 800b418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b41c:	4606      	mov	r6, r0
 800b41e:	460f      	mov	r7, r1
 800b420:	e721      	b.n	800b266 <__kernel_rem_pio2+0x2b6>
 800b422:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b426:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b42a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b42e:	f8cd c01c 	str.w	ip, [sp, #28]
 800b432:	f7f5 f849 	bl	80004c8 <__aeabi_dmul>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	f7f4 fe8d 	bl	800015c <__adddf3>
 800b442:	4682      	mov	sl, r0
 800b444:	468b      	mov	fp, r1
 800b446:	f108 0801 	add.w	r8, r8, #1
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	4598      	cmp	r8, r3
 800b44e:	dc01      	bgt.n	800b454 <__kernel_rem_pio2+0x4a4>
 800b450:	45b8      	cmp	r8, r7
 800b452:	dde6      	ble.n	800b422 <__kernel_rem_pio2+0x472>
 800b454:	ab48      	add	r3, sp, #288	; 0x120
 800b456:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b45a:	e9c7 ab00 	strd	sl, fp, [r7]
 800b45e:	3e01      	subs	r6, #1
 800b460:	e706      	b.n	800b270 <__kernel_rem_pio2+0x2c0>
 800b462:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b464:	2b02      	cmp	r3, #2
 800b466:	dc09      	bgt.n	800b47c <__kernel_rem_pio2+0x4cc>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dc32      	bgt.n	800b4d2 <__kernel_rem_pio2+0x522>
 800b46c:	d058      	beq.n	800b520 <__kernel_rem_pio2+0x570>
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	f003 0007 	and.w	r0, r3, #7
 800b474:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d1f5      	bne.n	800b46e <__kernel_rem_pio2+0x4be>
 800b482:	ab48      	add	r3, sp, #288	; 0x120
 800b484:	441d      	add	r5, r3
 800b486:	46aa      	mov	sl, r5
 800b488:	46a3      	mov	fp, r4
 800b48a:	f1bb 0f00 	cmp.w	fp, #0
 800b48e:	dc74      	bgt.n	800b57a <__kernel_rem_pio2+0x5ca>
 800b490:	46aa      	mov	sl, r5
 800b492:	46a3      	mov	fp, r4
 800b494:	f1bb 0f01 	cmp.w	fp, #1
 800b498:	f300 808e 	bgt.w	800b5b8 <__kernel_rem_pio2+0x608>
 800b49c:	2700      	movs	r7, #0
 800b49e:	463e      	mov	r6, r7
 800b4a0:	2c01      	cmp	r4, #1
 800b4a2:	f300 80a8 	bgt.w	800b5f6 <__kernel_rem_pio2+0x646>
 800b4a6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b4aa:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b4ae:	9b00      	ldr	r3, [sp, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f040 80aa 	bne.w	800b60a <__kernel_rem_pio2+0x65a>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	9806      	ldr	r0, [sp, #24]
 800b4bc:	e9c0 2300 	strd	r2, r3, [r0]
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b4c8:	463a      	mov	r2, r7
 800b4ca:	4633      	mov	r3, r6
 800b4cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b4d0:	e7cd      	b.n	800b46e <__kernel_rem_pio2+0x4be>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	46a0      	mov	r8, r4
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	ab48      	add	r3, sp, #288	; 0x120
 800b4da:	441d      	add	r5, r3
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	da38      	bge.n	800b554 <__kernel_rem_pio2+0x5a4>
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d03c      	beq.n	800b562 <__kernel_rem_pio2+0x5b2>
 800b4e8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	462b      	mov	r3, r5
 800b4f0:	9d06      	ldr	r5, [sp, #24]
 800b4f2:	2601      	movs	r6, #1
 800b4f4:	e9c5 2300 	strd	r2, r3, [r5]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b4fe:	f7f4 fe2b 	bl	8000158 <__aeabi_dsub>
 800b502:	4684      	mov	ip, r0
 800b504:	460f      	mov	r7, r1
 800b506:	ad48      	add	r5, sp, #288	; 0x120
 800b508:	42b4      	cmp	r4, r6
 800b50a:	da2c      	bge.n	800b566 <__kernel_rem_pio2+0x5b6>
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	b10b      	cbz	r3, 800b514 <__kernel_rem_pio2+0x564>
 800b510:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b514:	4662      	mov	r2, ip
 800b516:	463b      	mov	r3, r7
 800b518:	9906      	ldr	r1, [sp, #24]
 800b51a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b51e:	e7a6      	b.n	800b46e <__kernel_rem_pio2+0x4be>
 800b520:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b522:	ab48      	add	r3, sp, #288	; 0x120
 800b524:	4637      	mov	r7, r6
 800b526:	441d      	add	r5, r3
 800b528:	2c00      	cmp	r4, #0
 800b52a:	da09      	bge.n	800b540 <__kernel_rem_pio2+0x590>
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	b10b      	cbz	r3, 800b534 <__kernel_rem_pio2+0x584>
 800b530:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b534:	4632      	mov	r2, r6
 800b536:	463b      	mov	r3, r7
 800b538:	9906      	ldr	r1, [sp, #24]
 800b53a:	e9c1 2300 	strd	r2, r3, [r1]
 800b53e:	e796      	b.n	800b46e <__kernel_rem_pio2+0x4be>
 800b540:	4630      	mov	r0, r6
 800b542:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b546:	4639      	mov	r1, r7
 800b548:	f7f4 fe08 	bl	800015c <__adddf3>
 800b54c:	3c01      	subs	r4, #1
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	e7e9      	b.n	800b528 <__kernel_rem_pio2+0x578>
 800b554:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b558:	f7f4 fe00 	bl	800015c <__adddf3>
 800b55c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b560:	e7bc      	b.n	800b4dc <__kernel_rem_pio2+0x52c>
 800b562:	460d      	mov	r5, r1
 800b564:	e7c2      	b.n	800b4ec <__kernel_rem_pio2+0x53c>
 800b566:	4660      	mov	r0, ip
 800b568:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f4 fdf5 	bl	800015c <__adddf3>
 800b572:	3601      	adds	r6, #1
 800b574:	4684      	mov	ip, r0
 800b576:	460f      	mov	r7, r1
 800b578:	e7c6      	b.n	800b508 <__kernel_rem_pio2+0x558>
 800b57a:	e9da 6700 	ldrd	r6, r7, [sl]
 800b57e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b582:	4632      	mov	r2, r6
 800b584:	463b      	mov	r3, r7
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	f7f4 fde7 	bl	800015c <__adddf3>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f4 fddd 	bl	8000158 <__aeabi_dsub>
 800b59e:	4632      	mov	r2, r6
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	f7f4 fddb 	bl	800015c <__adddf3>
 800b5a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5aa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b5ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5b2:	e9ca 2300 	strd	r2, r3, [sl]
 800b5b6:	e768      	b.n	800b48a <__kernel_rem_pio2+0x4da>
 800b5b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5bc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	464b      	mov	r3, r9
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f4 fdc8 	bl	800015c <__adddf3>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f4 fdbe 	bl	8000158 <__aeabi_dsub>
 800b5dc:	4642      	mov	r2, r8
 800b5de:	464b      	mov	r3, r9
 800b5e0:	f7f4 fdbc 	bl	800015c <__adddf3>
 800b5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b5ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5f0:	e9ca 2300 	strd	r2, r3, [sl]
 800b5f4:	e74e      	b.n	800b494 <__kernel_rem_pio2+0x4e4>
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	f7f4 fdad 	bl	800015c <__adddf3>
 800b602:	3c01      	subs	r4, #1
 800b604:	4607      	mov	r7, r0
 800b606:	460e      	mov	r6, r1
 800b608:	e74a      	b.n	800b4a0 <__kernel_rem_pio2+0x4f0>
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b610:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b614:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b618:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b61c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b620:	601d      	str	r5, [r3, #0]
 800b622:	615e      	str	r6, [r3, #20]
 800b624:	e723      	b.n	800b46e <__kernel_rem_pio2+0x4be>
 800b626:	bf00      	nop
 800b628:	41700000 	.word	0x41700000
 800b62c:	3e700000 	.word	0x3e700000

0800b630 <scalbn>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	4616      	mov	r6, r2
 800b634:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	460b      	mov	r3, r1
 800b63e:	b992      	cbnz	r2, 800b666 <scalbn+0x36>
 800b640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b644:	4303      	orrs	r3, r0
 800b646:	d03c      	beq.n	800b6c2 <scalbn+0x92>
 800b648:	4b31      	ldr	r3, [pc, #196]	; (800b710 <scalbn+0xe0>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	f7f4 ff3c 	bl	80004c8 <__aeabi_dmul>
 800b650:	4b30      	ldr	r3, [pc, #192]	; (800b714 <scalbn+0xe4>)
 800b652:	4604      	mov	r4, r0
 800b654:	429e      	cmp	r6, r3
 800b656:	460d      	mov	r5, r1
 800b658:	da0f      	bge.n	800b67a <scalbn+0x4a>
 800b65a:	a329      	add	r3, pc, #164	; (adr r3, 800b700 <scalbn+0xd0>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 ff32 	bl	80004c8 <__aeabi_dmul>
 800b664:	e006      	b.n	800b674 <scalbn+0x44>
 800b666:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b66a:	42ba      	cmp	r2, r7
 800b66c:	d109      	bne.n	800b682 <scalbn+0x52>
 800b66e:	4602      	mov	r2, r0
 800b670:	f7f4 fd74 	bl	800015c <__adddf3>
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	e023      	b.n	800b6c2 <scalbn+0x92>
 800b67a:	460b      	mov	r3, r1
 800b67c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b680:	3a36      	subs	r2, #54	; 0x36
 800b682:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b686:	428e      	cmp	r6, r1
 800b688:	dd0e      	ble.n	800b6a8 <scalbn+0x78>
 800b68a:	a31f      	add	r3, pc, #124	; (adr r3, 800b708 <scalbn+0xd8>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b694:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b698:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b69c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b6a0:	481d      	ldr	r0, [pc, #116]	; (800b718 <scalbn+0xe8>)
 800b6a2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b6a6:	e7db      	b.n	800b660 <scalbn+0x30>
 800b6a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b6ac:	4432      	add	r2, r6
 800b6ae:	428a      	cmp	r2, r1
 800b6b0:	dceb      	bgt.n	800b68a <scalbn+0x5a>
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	dd08      	ble.n	800b6c8 <scalbn+0x98>
 800b6b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b6cc:	da0c      	bge.n	800b6e8 <scalbn+0xb8>
 800b6ce:	a30c      	add	r3, pc, #48	; (adr r3, 800b700 <scalbn+0xd0>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b6d8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b6dc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b6e0:	480e      	ldr	r0, [pc, #56]	; (800b71c <scalbn+0xec>)
 800b6e2:	f041 011f 	orr.w	r1, r1, #31
 800b6e6:	e7bb      	b.n	800b660 <scalbn+0x30>
 800b6e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6ec:	3236      	adds	r2, #54	; 0x36
 800b6ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4b08      	ldr	r3, [pc, #32]	; (800b720 <scalbn+0xf0>)
 800b6fe:	e7af      	b.n	800b660 <scalbn+0x30>
 800b700:	c2f8f359 	.word	0xc2f8f359
 800b704:	01a56e1f 	.word	0x01a56e1f
 800b708:	8800759c 	.word	0x8800759c
 800b70c:	7e37e43c 	.word	0x7e37e43c
 800b710:	43500000 	.word	0x43500000
 800b714:	ffff3cb0 	.word	0xffff3cb0
 800b718:	8800759c 	.word	0x8800759c
 800b71c:	c2f8f359 	.word	0xc2f8f359
 800b720:	3c900000 	.word	0x3c900000
 800b724:	00000000 	.word	0x00000000

0800b728 <floor>:
 800b728:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b730:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b734:	2e13      	cmp	r6, #19
 800b736:	460b      	mov	r3, r1
 800b738:	4607      	mov	r7, r0
 800b73a:	460c      	mov	r4, r1
 800b73c:	4605      	mov	r5, r0
 800b73e:	dc32      	bgt.n	800b7a6 <floor+0x7e>
 800b740:	2e00      	cmp	r6, #0
 800b742:	da14      	bge.n	800b76e <floor+0x46>
 800b744:	a334      	add	r3, pc, #208	; (adr r3, 800b818 <floor+0xf0>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd07 	bl	800015c <__adddf3>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	f7f5 f949 	bl	80009e8 <__aeabi_dcmpgt>
 800b756:	b138      	cbz	r0, 800b768 <floor+0x40>
 800b758:	2c00      	cmp	r4, #0
 800b75a:	da56      	bge.n	800b80a <floor+0xe2>
 800b75c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b760:	4325      	orrs	r5, r4
 800b762:	d055      	beq.n	800b810 <floor+0xe8>
 800b764:	2500      	movs	r5, #0
 800b766:	4c2e      	ldr	r4, [pc, #184]	; (800b820 <floor+0xf8>)
 800b768:	4623      	mov	r3, r4
 800b76a:	462f      	mov	r7, r5
 800b76c:	e025      	b.n	800b7ba <floor+0x92>
 800b76e:	4a2d      	ldr	r2, [pc, #180]	; (800b824 <floor+0xfc>)
 800b770:	fa42 f806 	asr.w	r8, r2, r6
 800b774:	ea01 0208 	and.w	r2, r1, r8
 800b778:	4302      	orrs	r2, r0
 800b77a:	d01e      	beq.n	800b7ba <floor+0x92>
 800b77c:	a326      	add	r3, pc, #152	; (adr r3, 800b818 <floor+0xf0>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 fceb 	bl	800015c <__adddf3>
 800b786:	2200      	movs	r2, #0
 800b788:	2300      	movs	r3, #0
 800b78a:	f7f5 f92d 	bl	80009e8 <__aeabi_dcmpgt>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d0ea      	beq.n	800b768 <floor+0x40>
 800b792:	2c00      	cmp	r4, #0
 800b794:	bfbe      	ittt	lt
 800b796:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b79a:	4133      	asrlt	r3, r6
 800b79c:	18e4      	addlt	r4, r4, r3
 800b79e:	2500      	movs	r5, #0
 800b7a0:	ea24 0408 	bic.w	r4, r4, r8
 800b7a4:	e7e0      	b.n	800b768 <floor+0x40>
 800b7a6:	2e33      	cmp	r6, #51	; 0x33
 800b7a8:	dd0b      	ble.n	800b7c2 <floor+0x9a>
 800b7aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b7ae:	d104      	bne.n	800b7ba <floor+0x92>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	f7f4 fcd3 	bl	800015c <__adddf3>
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	4619      	mov	r1, r3
 800b7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c2:	f04f 38ff 	mov.w	r8, #4294967295
 800b7c6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b7ca:	fa28 f802 	lsr.w	r8, r8, r2
 800b7ce:	ea10 0f08 	tst.w	r0, r8
 800b7d2:	d0f2      	beq.n	800b7ba <floor+0x92>
 800b7d4:	a310      	add	r3, pc, #64	; (adr r3, 800b818 <floor+0xf0>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	f7f4 fcbf 	bl	800015c <__adddf3>
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f7f5 f901 	bl	80009e8 <__aeabi_dcmpgt>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d0be      	beq.n	800b768 <floor+0x40>
 800b7ea:	2c00      	cmp	r4, #0
 800b7ec:	da0a      	bge.n	800b804 <floor+0xdc>
 800b7ee:	2e14      	cmp	r6, #20
 800b7f0:	d101      	bne.n	800b7f6 <floor+0xce>
 800b7f2:	3401      	adds	r4, #1
 800b7f4:	e006      	b.n	800b804 <floor+0xdc>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b7fc:	40b3      	lsls	r3, r6
 800b7fe:	441d      	add	r5, r3
 800b800:	42af      	cmp	r7, r5
 800b802:	d8f6      	bhi.n	800b7f2 <floor+0xca>
 800b804:	ea25 0508 	bic.w	r5, r5, r8
 800b808:	e7ae      	b.n	800b768 <floor+0x40>
 800b80a:	2500      	movs	r5, #0
 800b80c:	462c      	mov	r4, r5
 800b80e:	e7ab      	b.n	800b768 <floor+0x40>
 800b810:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b814:	e7a8      	b.n	800b768 <floor+0x40>
 800b816:	bf00      	nop
 800b818:	8800759c 	.word	0x8800759c
 800b81c:	7e37e43c 	.word	0x7e37e43c
 800b820:	bff00000 	.word	0xbff00000
 800b824:	000fffff 	.word	0x000fffff

0800b828 <_init>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr

0800b834 <_fini>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr
