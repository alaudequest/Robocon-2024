
NodeSwerve_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080075c0  080075c0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c0  080075c0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  20000064  0800762c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  0800762c  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015921  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a02  00000000  00000000  000359f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  0003a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa37  00000000  00000000  0003b54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016131  00000000  00000000  00055f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009441a  00000000  00000000  0006c0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052a0  00000000  00000000  001004cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0010576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080074bc 	.word	0x080074bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080074bc 	.word	0x080074bc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <brd_GetCurrentAngleDC>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;



float brd_GetCurrentAngleDC(){return encoder_GetPulse(&brdParam.encDC, MODE_ANGLE);}
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	2102      	movs	r1, #2
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <brd_GetCurrentAngleDC+0x14>)
 8000f88:	f000 fad8 	bl	800153c <encoder_GetPulse>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000dc 	.word	0x200000dc

08000f98 <brd_Init>:
float brd_GetCurrentSpeedBLDC(){return encoder_GetSpeed(&brdParam.encBLDC);}
int brd_GetCurrentCountBLDC(){return (int)encoder_GetPulse(&brdParam.encBLDC, MODE_X4);}

void brd_Init()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af04      	add	r7, sp, #16
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f9e:	213c      	movs	r1, #60	; 0x3c
 8000fa0:	484f      	ldr	r0, [pc, #316]	; (80010e0 <brd_Init+0x148>)
 8000fa2:	f003 fb37 	bl	8004614 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fa6:	213c      	movs	r1, #60	; 0x3c
 8000fa8:	484e      	ldr	r0, [pc, #312]	; (80010e4 <brd_Init+0x14c>)
 8000faa:	f003 fb33 	bl	8004614 <HAL_TIM_Encoder_Start>
	encoder_Init(&brdParam.encDC, &htim3, DCEncoderPerRound*DCGearRatio, 0.002);
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <brd_Init+0x150>)
 8000fb0:	f640 52cf 	movw	r2, #3535	; 0xdcf
 8000fb4:	494a      	ldr	r1, [pc, #296]	; (80010e0 <brd_Init+0x148>)
 8000fb6:	484d      	ldr	r0, [pc, #308]	; (80010ec <brd_Init+0x154>)
 8000fb8:	f000 fa18 	bl	80013ec <encoder_Init>
	encoder_Init(&brdParam.encBLDC, &htim4, _BLDCEncoderPerRound*_BLDCGearRatio, 0.02);
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <brd_Init+0x158>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc2:	4948      	ldr	r1, [pc, #288]	; (80010e4 <brd_Init+0x14c>)
 8000fc4:	484b      	ldr	r0, [pc, #300]	; (80010f4 <brd_Init+0x15c>)
 8000fc6:	f000 fa11 	bl	80013ec <encoder_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fca:	2104      	movs	r1, #4
 8000fcc:	484a      	ldr	r0, [pc, #296]	; (80010f8 <brd_Init+0x160>)
 8000fce:	f003 f9dd 	bl	800438c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	4848      	ldr	r0, [pc, #288]	; (80010f8 <brd_Init+0x160>)
 8000fd6:	f003 f9d9 	bl	800438c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fda:	210c      	movs	r1, #12
 8000fdc:	4846      	ldr	r0, [pc, #280]	; (80010f8 <brd_Init+0x160>)
 8000fde:	f003 f9d5 	bl	800438c <HAL_TIM_PWM_Start>
	MotorBLDC_Init(&brdParam.mbldc, &htim2, TIM_CHANNEL_2,
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <brd_Init+0x164>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	2310      	movs	r3, #16
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <brd_Init+0x164>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4941      	ldr	r1, [pc, #260]	; (80010f8 <brd_Init+0x160>)
 8000ff4:	4842      	ldr	r0, [pc, #264]	; (8001100 <brd_Init+0x168>)
 8000ff6:	f000 fc9a 	bl	800192e <MotorBLDC_Init>
			BLDC_BRAKE_GPIO_Port,
			BLDC_BRAKE_Pin,
			BLDC_DIR_GPIO_Port,
			BLDC_DIR_Pin);
	MotorDC_Init(&brdParam.mdc, &htim2, MOTOR_PWM_INVERSE,
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2308      	movs	r3, #8
 8001000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001004:	493c      	ldr	r1, [pc, #240]	; (80010f8 <brd_Init+0x160>)
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <brd_Init+0x16c>)
 8001008:	f000 fb1f 	bl	800164a <MotorDC_Init>
			TIM_CHANNEL_3,
			TIM_CHANNEL_4);
	brdParam.pidBLDC_Speed.kP = 0.1;
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <brd_Init+0x170>)
 800100e:	4a3f      	ldr	r2, [pc, #252]	; (800110c <brd_Init+0x174>)
 8001010:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	brdParam.pidBLDC_Speed.kI = 20;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <brd_Init+0x170>)
 8001016:	4a3e      	ldr	r2, [pc, #248]	; (8001110 <brd_Init+0x178>)
 8001018:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	brdParam.pidBLDC_Speed.kD = 0;
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <brd_Init+0x170>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	brdParam.pidBLDC_Speed.alpha = 0;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <brd_Init+0x170>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	brdParam.pidBLDC_Speed.deltaT = 0.02;
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <brd_Init+0x170>)
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <brd_Init+0x158>)
 8001034:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	brdParam.pidBLDC_Speed.u_AboveLimit = 1000;
 8001038:	4b33      	ldr	r3, [pc, #204]	; (8001108 <brd_Init+0x170>)
 800103a:	4a36      	ldr	r2, [pc, #216]	; (8001114 <brd_Init+0x17c>)
 800103c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	brdParam.pidBLDC_Speed.u_BelowLimit = -1000;
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <brd_Init+0x170>)
 8001042:	4a35      	ldr	r2, [pc, #212]	; (8001118 <brd_Init+0x180>)
 8001044:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	brdParam.pidBLDC_Speed.kB = 1/0.02;
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <brd_Init+0x170>)
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <brd_Init+0x184>)
 800104c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	brdParam.pidDC_Angle.kP = 3.0;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <brd_Init+0x170>)
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <brd_Init+0x188>)
 8001054:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	brdParam.pidDC_Angle.kI = 0;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <brd_Init+0x170>)
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	brdParam.pidDC_Angle.kD = 0.04;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <brd_Init+0x170>)
 8001064:	4a2f      	ldr	r2, [pc, #188]	; (8001124 <brd_Init+0x18c>)
 8001066:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	brdParam.pidDC_Angle.alpha = 0.8;
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <brd_Init+0x170>)
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <brd_Init+0x190>)
 800106e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	brdParam.pidDC_Angle.deltaT = 0.002;
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <brd_Init+0x170>)
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <brd_Init+0x150>)
 8001076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	brdParam.pidDC_Angle.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <brd_Init+0x170>)
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <brd_Init+0x17c>)
 800107e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	brdParam.pidDC_Angle.u_BelowLimit = DC_SUM_BELOW_LIMIT;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <brd_Init+0x170>)
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <brd_Init+0x180>)
 8001086:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	brdParam.pidDC_Angle.kB = 1/0.002;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <brd_Init+0x170>)
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <brd_Init+0x194>)
 800108e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	brdParam.pidDC_Speed.kP = 1.0;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <brd_Init+0x170>)
 8001094:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001098:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	brdParam.pidDC_Speed.kI = 200.0;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <brd_Init+0x170>)
 800109e:	4a24      	ldr	r2, [pc, #144]	; (8001130 <brd_Init+0x198>)
 80010a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	brdParam.pidDC_Speed.kD = 0;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <brd_Init+0x170>)
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	brdParam.pidDC_Speed.alpha = 0;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <brd_Init+0x170>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	brdParam.pidDC_Speed.deltaT = 0.002;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <brd_Init+0x170>)
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <brd_Init+0x150>)
 80010bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <brd_Init+0x170>)
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <brd_Init+0x17c>)
 80010c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	brdParam.pidDC_Speed.u_BelowLimit = DC_SUM_BELOW_LIMIT;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <brd_Init+0x170>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <brd_Init+0x180>)
 80010cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	brdParam.pidDC_Speed.kB = 1/0.002;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <brd_Init+0x170>)
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <brd_Init+0x194>)
 80010d4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200004fc 	.word	0x200004fc
 80010e4:	20000544 	.word	0x20000544
 80010e8:	3b03126f 	.word	0x3b03126f
 80010ec:	200000dc 	.word	0x200000dc
 80010f0:	3ca3d70a 	.word	0x3ca3d70a
 80010f4:	200000b0 	.word	0x200000b0
 80010f8:	200004b4 	.word	0x200004b4
 80010fc:	40010800 	.word	0x40010800
 8001100:	2000009c 	.word	0x2000009c
 8001104:	2000008c 	.word	0x2000008c
 8001108:	20000080 	.word	0x20000080
 800110c:	3dcccccd 	.word	0x3dcccccd
 8001110:	41a00000 	.word	0x41a00000
 8001114:	447a0000 	.word	0x447a0000
 8001118:	c47a0000 	.word	0xc47a0000
 800111c:	42480000 	.word	0x42480000
 8001120:	40400000 	.word	0x40400000
 8001124:	3d23d70a 	.word	0x3d23d70a
 8001128:	3f4ccccd 	.word	0x3f4ccccd
 800112c:	43fa0000 	.word	0x43fa0000
 8001130:	43480000 	.word	0x43480000

08001134 <brd_SetPID>:




void brd_SetPID(PID_Param pid,PID_type type)
{
 8001134:	b084      	sub	sp, #16
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
 800113a:	f107 0c08 	add.w	ip, r7, #8
 800113e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch(type){
 8001142:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001146:	2b03      	cmp	r3, #3
 8001148:	d018      	beq.n	800117c <brd_SetPID+0x48>
 800114a:	2b03      	cmp	r3, #3
 800114c:	dc20      	bgt.n	8001190 <brd_SetPID+0x5c>
 800114e:	2b01      	cmp	r3, #1
 8001150:	d002      	beq.n	8001158 <brd_SetPID+0x24>
 8001152:	2b02      	cmp	r3, #2
 8001154:	d009      	beq.n	800116a <brd_SetPID+0x36>
		break;
	case PID_BLDC_SPEED:
		brdParam.pidBLDC_Speed = pid;
		break;
	}
}
 8001156:	e01b      	b.n	8001190 <brd_SetPID+0x5c>
		brdParam.pidDC_Speed = pid;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <brd_SetPID+0x68>)
 800115a:	33cc      	adds	r3, #204	; 0xcc
 800115c:	f107 0108 	add.w	r1, r7, #8
 8001160:	2244      	movs	r2, #68	; 0x44
 8001162:	4618      	mov	r0, r3
 8001164:	f006 f948 	bl	80073f8 <memcpy>
		break;
 8001168:	e012      	b.n	8001190 <brd_SetPID+0x5c>
		brdParam.pidDC_Angle = pid;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <brd_SetPID+0x68>)
 800116c:	3388      	adds	r3, #136	; 0x88
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	2244      	movs	r2, #68	; 0x44
 8001174:	4618      	mov	r0, r3
 8001176:	f006 f93f 	bl	80073f8 <memcpy>
		break;
 800117a:	e009      	b.n	8001190 <brd_SetPID+0x5c>
		brdParam.pidBLDC_Speed = pid;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <brd_SetPID+0x68>)
 800117e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001182:	f107 0108 	add.w	r1, r7, #8
 8001186:	2244      	movs	r2, #68	; 0x44
 8001188:	4618      	mov	r0, r3
 800118a:	f006 f935 	bl	80073f8 <memcpy>
		break;
 800118e:	bf00      	nop
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr
 800119c:	20000080 	.word	0x20000080

080011a0 <brd_GetPID>:



PID_Param brd_GetPID(PID_type type)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	switch(type){
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d018      	beq.n	80011e4 <brd_GetPID+0x44>
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	dc20      	bgt.n	80011f8 <brd_GetPID+0x58>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d002      	beq.n	80011c0 <brd_GetPID+0x20>
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d009      	beq.n	80011d2 <brd_GetPID+0x32>
 80011be:	e01b      	b.n	80011f8 <brd_GetPID+0x58>
	case PID_DC_SPEED:
		return brdParam.pidDC_Speed;
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <brd_GetPID+0x70>)
 80011c4:	4610      	mov	r0, r2
 80011c6:	33cc      	adds	r3, #204	; 0xcc
 80011c8:	2244      	movs	r2, #68	; 0x44
 80011ca:	4619      	mov	r1, r3
 80011cc:	f006 f914 	bl	80073f8 <memcpy>
 80011d0:	e01a      	b.n	8001208 <brd_GetPID+0x68>
		break;
	case PID_DC_ANGLE:
		return brdParam.pidDC_Angle;
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <brd_GetPID+0x70>)
 80011d6:	4610      	mov	r0, r2
 80011d8:	3388      	adds	r3, #136	; 0x88
 80011da:	2244      	movs	r2, #68	; 0x44
 80011dc:	4619      	mov	r1, r3
 80011de:	f006 f90b 	bl	80073f8 <memcpy>
 80011e2:	e011      	b.n	8001208 <brd_GetPID+0x68>
		break;
	case PID_BLDC_SPEED:
		return brdParam.pidBLDC_Speed;
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <brd_GetPID+0x70>)
 80011e8:	4610      	mov	r0, r2
 80011ea:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80011ee:	2244      	movs	r2, #68	; 0x44
 80011f0:	4619      	mov	r1, r3
 80011f2:	f006 f901 	bl	80073f8 <memcpy>
 80011f6:	e007      	b.n	8001208 <brd_GetPID+0x68>
		break;
	}
	return brdParam.pidDC_Speed;
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <brd_GetPID+0x70>)
 80011fc:	4610      	mov	r0, r2
 80011fe:	33cc      	adds	r3, #204	; 0xcc
 8001200:	2244      	movs	r2, #68	; 0x44
 8001202:	4619      	mov	r1, r3
 8001204:	f006 f8f8 	bl	80073f8 <memcpy>
}
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000080 	.word	0x20000080

08001214 <brd_ResetState>:

void brd_ResetState()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	brd_SetTargetAngleDC(0);
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	f000 f832 	bl	8001284 <brd_SetTargetAngleDC>
	brdParam.pidDC_Speed.u_AboveLimit = 0;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <brd_ResetState+0x4c>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	brdParam.pidDC_Speed.u_BelowLimit= 0;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <brd_ResetState+0x4c>)
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	encoder_ResetCount(&brdParam.encDC);
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <brd_ResetState+0x50>)
 8001236:	f000 f9ef 	bl	8001618 <encoder_ResetCount>
	osDelay(1000);
 800123a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123e:	f004 f8ab 	bl	8005398 <osDelay>
	brdParam.pidDC_Speed.uI = 0;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <brd_ResetState+0x4c>)
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//	brdParam.pidDC_Speed.u_AboveLimit = 100;
//	brdParam.pidDC_Speed.u_BelowLimit= -100;
//	brdParam.pidDC_Speed.uI_AboveLimit = DC_INTERGRAL_ABOVE_LIMIT;
//	brdParam.pidDC_Speed.uI_BelowLimit = DC_INTERGRAL_BELOW_LIMIT;
	brdParam.pidDC_Speed.u_AboveLimit = DC_SUM_ABOVE_LIMIT;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <brd_ResetState+0x4c>)
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <brd_ResetState+0x54>)
 8001250:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	brdParam.pidDC_Speed.u_BelowLimit= DC_SUM_BELOW_LIMIT;
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <brd_ResetState+0x4c>)
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <brd_ResetState+0x58>)
 8001258:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000080 	.word	0x20000080
 8001264:	200000dc 	.word	0x200000dc
 8001268:	447a0000 	.word	0x447a0000
 800126c:	c47a0000 	.word	0xc47a0000

08001270 <brd_GetTargetAngleDC>:
	encoder_ResetCount(&brdParam.encDC);

}


float brd_GetTargetAngleDC(){return brdParam.targetAngleDC;}
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <brd_GetTargetAngleDC+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000080 	.word	0x20000080

08001284 <brd_SetTargetAngleDC>:
void brd_SetTargetAngleDC(float angle){brdParam.targetAngleDC = angle;}
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <brd_SetTargetAngleDC+0x18>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000080 	.word	0x20000080

080012a0 <brd_GetObjMotorDC>:

MotorDC brd_GetObjMotorDC(){return brdParam.mdc;}
 80012a0:	b490      	push	{r4, r7}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <brd_GetObjMotorDC+0x20>)
 80012ac:	4614      	mov	r4, r2
 80012ae:	330c      	adds	r3, #12
 80012b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc90      	pop	{r4, r7}
 80012be:	4770      	bx	lr
 80012c0:	20000080 	.word	0x20000080

080012c4 <brd_GetObjMotorBLDC>:
void brd_SetObjMotorDC(MotorDC mdc){brdParam.mdc = mdc;}

MotorBLDC brd_GetObjMotorBLDC(){return brdParam.mbldc;}
 80012c4:	b4b0      	push	{r4, r5, r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <brd_GetObjMotorBLDC+0x24>)
 80012d0:	4615      	mov	r5, r2
 80012d2:	f103 041c 	add.w	r4, r3, #28
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	602b      	str	r3, [r5, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bcb0      	pop	{r4, r5, r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000080 	.word	0x20000080

080012ec <brd_SetSpeedBLDC>:
void brd_SetObjMotorBLDC(MotorBLDC mbldc){brdParam.mbldc = mbldc;}

void brd_SetSpeedBLDC(float speed){brdParam.targetSpeedBLDC = speed;}
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <brd_SetSpeedBLDC+0x18>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6053      	str	r3, [r2, #4]
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000080 	.word	0x20000080

08001308 <brd_GetSpeedBLDC>:
float brd_GetSpeedBLDC(){return brdParam.targetSpeedBLDC;}
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <brd_GetSpeedBLDC+0x10>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000080 	.word	0x20000080

0800131c <brd_SetObjEncDC>:

void brd_SetObjEncDC(Encoder_t encDC){brdParam.encDC = encDC;}
 800131c:	b084      	sub	sp, #16
 800131e:	b4b0      	push	{r4, r5, r7}
 8001320:	af00      	add	r7, sp, #0
 8001322:	f107 040c 	add.w	r4, r7, #12
 8001326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <brd_SetObjEncDC+0x34>)
 800132c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001330:	f107 050c 	add.w	r5, r7, #12
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bcb0      	pop	{r4, r5, r7}
 800134a:	b004      	add	sp, #16
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000080 	.word	0x20000080

08001354 <brd_GetObjEncDC>:
Encoder_t brd_GetObjEncDC(){return brdParam.encDC;}
 8001354:	b4b0      	push	{r4, r5, r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <brd_GetObjEncDC+0x2c>)
 8001360:	4615      	mov	r5, r2
 8001362:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001372:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bcb0      	pop	{r4, r5, r7}
 800137e:	4770      	bx	lr
 8001380:	20000080 	.word	0x20000080

08001384 <brd_SetObjEncBLDC>:

void brd_SetObjEncBLDC(Encoder_t encBLDC){brdParam.encBLDC = encBLDC;}
 8001384:	b084      	sub	sp, #16
 8001386:	b4b0      	push	{r4, r5, r7}
 8001388:	af00      	add	r7, sp, #0
 800138a:	f107 040c 	add.w	r4, r7, #12
 800138e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <brd_SetObjEncBLDC+0x34>)
 8001394:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001398:	f107 050c 	add.w	r5, r7, #12
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bcb0      	pop	{r4, r5, r7}
 80013b2:	b004      	add	sp, #16
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000080 	.word	0x20000080

080013bc <brd_GetObjEncBLDC>:
Encoder_t brd_GetObjEncBLDC(){return brdParam.encBLDC;}
 80013bc:	b4b0      	push	{r4, r5, r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <brd_GetObjEncBLDC+0x2c>)
 80013c8:	4615      	mov	r5, r2
 80013ca:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bcb0      	pop	{r4, r5, r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000080 	.word	0x20000080

080013ec <encoder_Init>:
#include "Encoder.h"
#include "stdbool.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 8001402:	88fa      	ldrh	r2, [r7, #6]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <encoder_GetSpeed>:



float encoder_GetSpeed(Encoder_t *enc)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	b21a      	sxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	441a      	add	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
	enc->deltaXung = enc->count_X4 - enc->count_Pre;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	1ad2      	subs	r2, r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	615a      	str	r2, [r3, #20]
	enc->vel_Real = ((enc->count_X4 - enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb52 	bl	8000b00 <__aeabi_i2f>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fc53 	bl	8000d10 <__aeabi_fdiv>
 800146a:	4603      	mov	r3, r0
 800146c:	461c      	mov	r4, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb3f 	bl	8000af8 <__aeabi_ui2f>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fc46 	bl	8000d10 <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <encoder_GetSpeed+0x120>)
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fb8d 	bl	8000ba8 <__aeabi_fmul>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffbc 	bl	8000418 <__aeabi_f2d>
 80014a0:	a321      	add	r3, pc, #132	; (adr r3, 8001528 <encoder_GetSpeed+0x110>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f80f 	bl	80004c8 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4614      	mov	r4, r2
 80014b0:	461d      	mov	r5, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ffae 	bl	8000418 <__aeabi_f2d>
 80014bc:	a31c      	add	r3, pc, #112	; (adr r3, 8001530 <encoder_GetSpeed+0x118>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f801 	bl	80004c8 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7fe fe45 	bl	800015c <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4614      	mov	r4, r2
 80014d8:	461d      	mov	r5, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ff9a 	bl	8000418 <__aeabi_f2d>
 80014e4:	a312      	add	r3, pc, #72	; (adr r3, 8001530 <encoder_GetSpeed+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7fe ffed 	bl	80004c8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7fe fe31 	bl	800015c <__adddf3>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff f9f3 	bl	80008ec <__aeabi_d2f>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	621a      	str	r2, [r3, #32]
	enc->vel_Pre = enc->vel_Real;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	61da      	str	r2, [r3, #28]
	enc->count_Pre = enc->count_X4;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
	return enc->vel_Real;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}
 8001528:	ced91687 	.word	0xced91687
 800152c:	3feb53f7 	.word	0x3feb53f7
 8001530:	532617c2 	.word	0x532617c2
 8001534:	3fb2a305 	.word	0x3fb2a305
 8001538:	42700000 	.word	0x42700000

0800153c <encoder_GetPulse>:

float encoder_GetPulse(Encoder_t *enc, EncoderCountMode count_Mode)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
	enc->count_X4 += (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	441a      	add	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
	if (count_Mode == MODE_X4) return enc->count_X4;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <encoder_GetPulse+0x3e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fac5 	bl	8000b00 <__aeabi_i2f>
 8001576:	4603      	mov	r3, r0
 8001578:	e046      	b.n	8001608 <encoder_GetPulse+0xcc>
	else if (count_Mode == MODE_X1) return (float)enc->count_X4/4;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10c      	bne.n	800159a <encoder_GetPulse+0x5e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fabb 	bl	8000b00 <__aeabi_i2f>
 800158a:	4603      	mov	r3, r0
 800158c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fbbd 	bl	8000d10 <__aeabi_fdiv>
 8001596:	4603      	mov	r3, r0
 8001598:	e036      	b.n	8001608 <encoder_GetPulse+0xcc>
	else if (count_Mode == MODE_ANGLE) {
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d131      	bne.n	8001604 <encoder_GetPulse+0xc8>
		enc->Degree = (float)((float)enc->count_X4*360.0/((float)enc->count_PerRevol*4.0));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff faab 	bl	8000b00 <__aeabi_i2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff33 	bl	8000418 <__aeabi_f2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <encoder_GetPulse+0xd4>)
 80015b8:	f7fe ff86 	bl	80004c8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fa95 	bl	8000af8 <__aeabi_ui2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff21 	bl	8000418 <__aeabi_f2d>
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <encoder_GetPulse+0xd8>)
 80015dc:	f7fe ff74 	bl	80004c8 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7ff f898 	bl	800071c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff f97a 	bl	80008ec <__aeabi_d2f>
 80015f8:	4602      	mov	r2, r0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
		return enc->Degree;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	e001      	b.n	8001608 <encoder_GetPulse+0xcc>
	}
	return 0;
 8001604:	f04f 0300 	mov.w	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	40768000 	.word	0x40768000
 8001614:	40100000 	.word	0x40100000

08001618 <encoder_ResetCount>:
void encoder_ResetCount(Encoder_t *enc)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
	enc->vel_Real = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	889b      	ldrh	r3, [r3, #4]
 800168a:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <MotorDC_Drive+0x2c>
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	f000 8097 	beq.w	80017d4 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 80016a6:	e13d      	b.n	8001924 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <MotorDC_Drive+0x40>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	e018      	b.n	80016ee <MotorDC_Drive+0x72>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d105      	bne.n	80016d0 <MotorDC_Drive+0x54>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38
 80016ce:	e00e      	b.n	80016ee <MotorDC_Drive+0x72>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d105      	bne.n	80016e4 <MotorDC_Drive+0x68>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80016e2:	e004      	b.n	80016ee <MotorDC_Drive+0x72>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <MotorDC_Drive+0x86>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001700:	e018      	b.n	8001734 <MotorDC_Drive+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d105      	bne.n	8001716 <MotorDC_Drive+0x9a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2300      	movs	r3, #0
 8001712:	6393      	str	r3, [r2, #56]	; 0x38
 8001714:	e00e      	b.n	8001734 <MotorDC_Drive+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d105      	bne.n	800172a <MotorDC_Drive+0xae>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2300      	movs	r3, #0
 8001726:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001728:	e004      	b.n	8001734 <MotorDC_Drive+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	da23      	bge.n	8001782 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <MotorDC_Drive+0xd2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800174c:	e0e7      	b.n	800191e <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d105      	bne.n	8001762 <MotorDC_Drive+0xe6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38
 8001760:	e037      	b.n	80017d2 <MotorDC_Drive+0x156>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b08      	cmp	r3, #8
 8001768:	d105      	bne.n	8001776 <MotorDC_Drive+0xfa>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001774:	e02d      	b.n	80017d2 <MotorDC_Drive+0x156>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001780:	e0cd      	b.n	800191e <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f340 80ca 	ble.w	800191e <MotorDC_Drive+0x2a2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <MotorDC_Drive+0x122>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800179c:	e0bf      	b.n	800191e <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d105      	bne.n	80017b2 <MotorDC_Drive+0x136>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80017b0:	e0b5      	b.n	800191e <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d105      	bne.n	80017c6 <MotorDC_Drive+0x14a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80017c4:	e0ab      	b.n	800191e <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80017d0:	e0a5      	b.n	800191e <MotorDC_Drive+0x2a2>
 80017d2:	e0a4      	b.n	800191e <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <MotorDC_Drive+0x16c>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	89fa      	ldrh	r2, [r7, #14]
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	e018      	b.n	800181a <MotorDC_Drive+0x19e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d105      	bne.n	80017fc <MotorDC_Drive+0x180>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	6393      	str	r3, [r2, #56]	; 0x38
 80017fa:	e00e      	b.n	800181a <MotorDC_Drive+0x19e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d105      	bne.n	8001810 <MotorDC_Drive+0x194>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800180e:	e004      	b.n	800181a <MotorDC_Drive+0x19e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <MotorDC_Drive+0x1b2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	89fa      	ldrh	r2, [r7, #14]
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e018      	b.n	8001860 <MotorDC_Drive+0x1e4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d105      	bne.n	8001842 <MotorDC_Drive+0x1c6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	6393      	str	r3, [r2, #56]	; 0x38
 8001840:	e00e      	b.n	8001860 <MotorDC_Drive+0x1e4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d105      	bne.n	8001856 <MotorDC_Drive+0x1da>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001854:	e004      	b.n	8001860 <MotorDC_Drive+0x1e4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da2b      	bge.n	80018be <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d107      	bne.n	800187e <MotorDC_Drive+0x202>
 800186e:	89f9      	ldrh	r1, [r7, #14]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	1a8a      	subs	r2, r1, r2
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800187c:	e051      	b.n	8001922 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d107      	bne.n	8001896 <MotorDC_Drive+0x21a>
 8001886:	89f9      	ldrh	r1, [r7, #14]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1acb      	subs	r3, r1, r3
 8001892:	6393      	str	r3, [r2, #56]	; 0x38
 8001894:	e042      	b.n	800191c <MotorDC_Drive+0x2a0>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d107      	bne.n	80018ae <MotorDC_Drive+0x232>
 800189e:	89f9      	ldrh	r1, [r7, #14]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1acb      	subs	r3, r1, r3
 80018aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018ac:	e036      	b.n	800191c <MotorDC_Drive+0x2a0>
 80018ae:	89f9      	ldrh	r1, [r7, #14]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1acb      	subs	r3, r1, r3
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80018bc:	e031      	b.n	8001922 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd2e      	ble.n	8001922 <MotorDC_Drive+0x2a6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <MotorDC_Drive+0x260>
 80018cc:	89f9      	ldrh	r1, [r7, #14]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	1a8a      	subs	r2, r1, r2
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80018da:	e022      	b.n	8001922 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <MotorDC_Drive+0x278>
 80018e4:	89f9      	ldrh	r1, [r7, #14]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80018f2:	e016      	b.n	8001922 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d107      	bne.n	800190c <MotorDC_Drive+0x290>
 80018fc:	89f9      	ldrh	r1, [r7, #14]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1acb      	subs	r3, r1, r3
 8001908:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800190a:	e00a      	b.n	8001922 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 800190c:	89f9      	ldrh	r1, [r7, #14]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1acb      	subs	r3, r1, r3
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800191a:	e002      	b.n	8001922 <MotorDC_Drive+0x2a6>
 800191c:	e001      	b.n	8001922 <MotorDC_Drive+0x2a6>
		break;
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <MotorDC_Drive+0x2a8>
		break;
 8001922:	bf00      	nop
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <MotorBLDC_Init>:
void MotorBLDC_Init(MotorBLDC *bldcMotor, TIM_HandleTypeDef *htim, uint32_t channel,
		GPIO_TypeDef *brakePort, uint16_t brakePin,
		GPIO_TypeDef *dirPort, uint16_t dirPin)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
	bldcMotor->Channel = channel;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
	bldcMotor->timBLDC = htim;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	611a      	str	r2, [r3, #16]
	bldcMotor->brakePin = brakePin;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8b3a      	ldrh	r2, [r7, #24]
 800194c:	809a      	strh	r2, [r3, #4]
	bldcMotor->brakePort = brakePort;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	609a      	str	r2, [r3, #8]
	bldcMotor->dirPort = dirPort;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	60da      	str	r2, [r3, #12]
	bldcMotor->dirPin = dirPin;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8c3a      	ldrh	r2, [r7, #32]
 800195e:	80da      	strh	r2, [r3, #6]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <MotorBLDC_Drive>:
{
	HAL_GPIO_WritePin(bldcMotor->brakePort, bldcMotor->brakePin, brake);
}

void MotorBLDC_Drive(MotorBLDC *bldcMotor, int32_t speedInput)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC, bldcMotor->Channel, 0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <MotorBLDC_Drive+0x1e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
 8001986:	e018      	b.n	80019ba <MotorBLDC_Drive+0x50>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d105      	bne.n	800199c <MotorBLDC_Drive+0x32>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
 800199a:	e00e      	b.n	80019ba <MotorBLDC_Drive+0x50>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d105      	bne.n	80019b0 <MotorBLDC_Drive+0x46>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019ae:	e004      	b.n	80019ba <MotorBLDC_Drive+0x50>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
	if (!speedInput) return;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d03f      	beq.n	8001a40 <MotorBLDC_Drive+0xd6>
	uint32_t pwm = abs(speedInput);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bfb8      	it	lt
 80019c6:	425b      	neglt	r3, r3
 80019c8:	60fb      	str	r3, [r7, #12]
	if (speedInput < 0)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da08      	bge.n	80019e2 <MotorBLDC_Drive+0x78>
		HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_REVERSE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68d8      	ldr	r0, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	88db      	ldrh	r3, [r3, #6]
 80019d8:	2201      	movs	r2, #1
 80019da:	4619      	mov	r1, r3
 80019dc:	f001 ff97 	bl	800390e <HAL_GPIO_WritePin>
 80019e0:	e00a      	b.n	80019f8 <MotorBLDC_Drive+0x8e>
	else if (speedInput > 0) HAL_GPIO_WritePin(bldcMotor->dirPort, bldcMotor->dirPin, DIR_FORWARD);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dd07      	ble.n	80019f8 <MotorBLDC_Drive+0x8e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68d8      	ldr	r0, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	88db      	ldrh	r3, [r3, #6]
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	f001 ff8b 	bl	800390e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(bldcMotor->timBLDC, bldcMotor->Channel, pwm);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <MotorBLDC_Drive+0xa2>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0a:	e01a      	b.n	8001a42 <MotorBLDC_Drive+0xd8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d105      	bne.n	8001a20 <MotorBLDC_Drive+0xb6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a1e:	e010      	b.n	8001a42 <MotorBLDC_Drive+0xd8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d105      	bne.n	8001a34 <MotorBLDC_Drive+0xca>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a32:	e006      	b.n	8001a42 <MotorBLDC_Drive+0xd8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	e000      	b.n	8001a42 <MotorBLDC_Drive+0xd8>
	if (!speedInput) return;
 8001a40:	bf00      	nop
}
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <PID_Cal>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Cal(PID_Param *pid,float Target_set,float CurrVal_set)
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
//-----------------------Input-------------------------//
	e =Target_set - CurrVal_set;
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7fe ff9c 	bl	8000994 <__aeabi_fsub>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]

//	if((e>-1.5)&&(e<1.5))e = 0;
	if(!kI) kB = 0;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa2f 	bl	8000ed0 <__aeabi_fcmpeq>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <PID_Cal+0x3a>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
 8001a80:	e00a      	b.n	8001a98 <PID_Cal+0x50>
	else kB = 1/deltaT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a8c:	f7ff f940 	bl	8000d10 <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	61da      	str	r2, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7ff f880 	bl	8000ba8 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	611a      	str	r2, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	699c      	ldr	r4, [r3, #24]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff f872 	bl	8000ba8 <__aeabi_fmul>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461e      	mov	r6, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	69dd      	ldr	r5, [r3, #28]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7fe ff5c 	bl	8000994 <__aeabi_fsub>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f7ff f861 	bl	8000ba8 <__aeabi_fmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4630      	mov	r0, r6
 8001aec:	f7fe ff54 	bl	8000998 <__addsf3>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f7ff f854 	bl	8000ba8 <__aeabi_fmul>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7fe ff47 	bl	8000998 <__addsf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	619a      	str	r2, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a1c      	ldr	r4, [r3, #32]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7fe ff37 	bl	8000994 <__aeabi_fsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff f83c 	bl	8000ba8 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f7ff f8e8 	bl	8000d10 <__aeabi_fdiv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b52:	f7fe ff1f 	bl	8000994 <__aeabi_fsub>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f7ff f821 	bl	8000ba8 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461c      	mov	r4, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f7ff f817 	bl	8000ba8 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7fe ff0a 	bl	8000998 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f7fe fef6 	bl	8000998 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7fe feee 	bl	8000998 <__addsf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f7ff f99c 	bl	8000f0c <__aeabi_fcmpge>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <PID_Cal+0x19c>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
 8001be2:	e013      	b.n	8001c0c <PID_Cal+0x1c4>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff f982 	bl	8000ef8 <__aeabi_fcmple>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <PID_Cal+0x1bc>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
 8001c02:	e003      	b.n	8001c0c <PID_Cal+0x1c4>
	else uHat = u;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c18 <PID_DC_CalSpeed>:
float TocDoBLDC;
float uHatTruocDo;


void PID_DC_CalSpeed(float Target_set)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b0b2      	sub	sp, #200	; 0xc8
 8001c1c:	af0e      	add	r7, sp, #56	; 0x38
 8001c1e:	6078      	str	r0, [r7, #4]
	MotorDC mdc = brd_GetObjMotorDC();
 8001c20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fb3b 	bl	80012a0 <brd_GetObjMotorDC>
	Encoder_t encDC = brd_GetObjEncDC();
 8001c2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fb90 	bl	8001354 <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_SPEED);
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fab0 	bl	80011a0 <brd_GetPID>
	if(dcEnablePID){
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <PID_DC_CalSpeed+0xb8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d039      	beq.n	8001cbc <PID_DC_CalSpeed+0xa4>
		float result = PID_Cal(&pid, Target_set, encoder_GetSpeed(&encDC));
 8001c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbe3 	bl	8001418 <encoder_GetSpeed>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fef4 	bl	8001a48 <PID_Cal>
 8001c60:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		brd_SetPID(pid, PID_DC_SPEED);
 8001c64:	2301      	movs	r3, #1
 8001c66:	930d      	str	r3, [sp, #52]	; 0x34
 8001c68:	466d      	mov	r5, sp
 8001c6a:	f107 041c 	add.w	r4, r7, #28
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	602b      	str	r3, [r5, #0]
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c84:	f7ff fa56 	bl	8001134 <brd_SetPID>
		brd_SetObjEncDC(encDC);
 8001c88:	466d      	mov	r5, sp
 8001c8a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca0:	f7ff fb3c 	bl	800131c <brd_SetObjEncDC>
		MotorDC_Drive(&mdc, (int32_t)result);
 8001ca4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ca8:	f7ff f944 	bl	8000f34 <__aeabi_f2iz>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fce1 	bl	800167c <MotorDC_Drive>
	}else{
		MotorDC_Drive(&mdc, 0);
	}
}
 8001cba:	e005      	b.n	8001cc8 <PID_DC_CalSpeed+0xb0>
		MotorDC_Drive(&mdc, 0);
 8001cbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fcda 	bl	800167c <MotorDC_Drive>
}
 8001cc8:	bf00      	nop
 8001cca:	3790      	adds	r7, #144	; 0x90
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <PID_DC_CalPos>:

void PID_DC_CalPos(float Target_set)
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b0ae      	sub	sp, #184	; 0xb8
 8001cd8:	af0e      	add	r7, sp, #56	; 0x38
 8001cda:	6078      	str	r0, [r7, #4]
	Encoder_t encDC = brd_GetObjEncDC();
 8001cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb37 	bl	8001354 <brd_GetObjEncDC>
	PID_Param pid = brd_GetPID(PID_DC_ANGLE);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2102      	movs	r1, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fa57 	bl	80011a0 <brd_GetPID>
	float result = PID_Cal(&pid, Target_set, encoder_GetPulse(&encDC, MODE_ANGLE));
 8001cf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fc1f 	bl	800153c <encoder_GetPulse>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fe9e 	bl	8001a48 <PID_Cal>
 8001d0c:	67f8      	str	r0, [r7, #124]	; 0x7c
	brd_SetPID(pid, PID_DC_ANGLE);
 8001d0e:	2302      	movs	r3, #2
 8001d10:	930d      	str	r3, [sp, #52]	; 0x34
 8001d12:	466d      	mov	r5, sp
 8001d14:	f107 041c 	add.w	r4, r7, #28
 8001d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	602b      	str	r3, [r5, #0]
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2e:	f7ff fa01 	bl	8001134 <brd_SetPID>
	brd_SetObjEncDC(encDC);
 8001d32:	466d      	mov	r5, sp
 8001d34:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d4a:	f7ff fae7 	bl	800131c <brd_SetObjEncDC>
	PID_DC_CalSpeed(result);
 8001d4e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d50:	f7ff ff62 	bl	8001c18 <PID_DC_CalSpeed>
}
 8001d54:	bf00      	nop
 8001d56:	3780      	adds	r7, #128	; 0x80
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bdb0      	pop	{r4, r5, r7, pc}

08001d5c <PID_BLDC_CalSpeed>:

void PID_BLDC_CalSpeed(float Target_set)
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b0b2      	sub	sp, #200	; 0xc8
 8001d60:	af0e      	add	r7, sp, #56	; 0x38
 8001d62:	6078      	str	r0, [r7, #4]
	MotorBLDC mbldc = brd_GetObjMotorBLDC();
 8001d64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff faab 	bl	80012c4 <brd_GetObjMotorBLDC>
	Encoder_t encBLDC = brd_GetObjEncBLDC();
 8001d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fb22 	bl	80013bc <brd_GetObjEncBLDC>
	PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa0e 	bl	80011a0 <brd_GetPID>
	if(!bldcEnablePID){
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <PID_BLDC_CalSpeed+0x10c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <PID_BLDC_CalSpeed+0x44>
		MotorBLDC_Drive(&mbldc, 0);
 8001d92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fde6 	bl	800196a <MotorBLDC_Drive>
		uHatTruocDo = pid.uHat;
		MotorBLDC_Drive(&mbldc, (int32_t)result);
		brd_SetObjEncBLDC(encBLDC);
		brd_SetPID(pid, PID_BLDC_SPEED);
	}
}
 8001d9e:	e05f      	b.n	8001e60 <PID_BLDC_CalSpeed+0x104>
		TocDoBLDC = encoder_GetSpeed(&encBLDC);
 8001da0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fb37 	bl	8001418 <encoder_GetSpeed>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <PID_BLDC_CalSpeed+0x110>)
 8001dae:	6013      	str	r3, [r2, #0]
		float result = PID_Cal(&pid, Target_set, encBLDC.deltaXung);
 8001db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fea4 	bl	8000b00 <__aeabi_i2f>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe41 	bl	8001a48 <PID_Cal>
 8001dc6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if ((pid.e>-SaiSoChoPhep)&&(pid.e<SaiSoChoPhep))
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <PID_BLDC_CalSpeed+0x114>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7ff f8a2 	bl	8000f20 <__aeabi_fcmpgt>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <PID_BLDC_CalSpeed+0xa8>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <PID_BLDC_CalSpeed+0x114>)
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f87a 	bl	8000ee4 <__aeabi_fcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <PID_BLDC_CalSpeed+0xa8>
			pid.uHat = uHatTruocDo;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <PID_BLDC_CalSpeed+0x118>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
			result=uHatTruocDo;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <PID_BLDC_CalSpeed+0x118>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		uHatTruocDo = pid.uHat;
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <PID_BLDC_CalSpeed+0x118>)
 8001e08:	6013      	str	r3, [r2, #0]
		MotorBLDC_Drive(&mbldc, (int32_t)result);
 8001e0a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001e0e:	f7ff f891 	bl	8000f34 <__aeabi_f2iz>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fda5 	bl	800196a <MotorBLDC_Drive>
		brd_SetObjEncBLDC(encBLDC);
 8001e20:	466d      	mov	r5, sp
 8001e22:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e38:	f7ff faa4 	bl	8001384 <brd_SetObjEncBLDC>
		brd_SetPID(pid, PID_BLDC_SPEED);
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	930d      	str	r3, [sp, #52]	; 0x34
 8001e40:	466d      	mov	r5, sp
 8001e42:	f107 0418 	add.w	r4, r7, #24
 8001e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5c:	f7ff f96a 	bl	8001134 <brd_SetPID>
}
 8001e60:	bf00      	nop
 8001e62:	3790      	adds	r7, #144	; 0x90
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	200001d4 	.word	0x200001d4
 8001e6c:	200001dc 	.word	0x200001dc
 8001e70:	200001d8 	.word	0x200001d8
 8001e74:	200001e0 	.word	0x200001e0

08001e78 <PID_BLDC_BreakProtection>:
{
	bldcEnablePID = Mode;
	dcEnablePID = Mode;
}
void PID_BLDC_BreakProtection(bool Mode)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b0a6      	sub	sp, #152	; 0x98
 8001e7c:	af0e      	add	r7, sp, #56	; 0x38
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	if(Mode) {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d029      	beq.n	8001edc <PID_BLDC_BreakProtection+0x64>
		bldcEnablePID = false;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <PID_BLDC_BreakProtection+0x70>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
		MotorBLDC mbldc = brd_GetObjMotorBLDC();
 8001e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fa16 	bl	80012c4 <brd_GetObjMotorBLDC>
		PID_Param pid = brd_GetPID(PID_BLDC_SPEED);
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f97e 	bl	80011a0 <brd_GetPID>
		pid.uI = 0;
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
		brd_SetPID(pid, PID_BLDC_SPEED);
 8001eaa:	2303      	movs	r3, #3
 8001eac:	930d      	str	r3, [sp, #52]	; 0x34
 8001eae:	466d      	mov	r5, sp
 8001eb0:	f107 0418 	add.w	r4, r7, #24
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	602b      	str	r3, [r5, #0]
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eca:	f7ff f933 	bl	8001134 <brd_SetPID>
		MotorBLDC_Drive(&mbldc, 0);
 8001ece:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fd48 	bl	800196a <MotorBLDC_Drive>
 8001eda:	e002      	b.n	8001ee2 <PID_BLDC_BreakProtection+0x6a>
		return;
	}else bldcEnablePID = true;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <PID_BLDC_BreakProtection+0x70>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
}
 8001ee2:	3760      	adds	r7, #96	; 0x60
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee8:	200001d4 	.word	0x200001d4

08001eec <sethome_Begin>:
#include "PID_SwerveModule.h"
#include "cmsis_os.h"
SetHomeEvent homeEvent = 0;
float speed = 0;

void sethome_Begin() {
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	homeEvent = SET_HOME_BEGIN;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <sethome_Begin+0x14>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200001e4 	.word	0x200001e4

08001f04 <homeBeginHandle>:

void homeBeginHandle() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8001f08:	2120      	movs	r1, #32
 8001f0a:	480e      	ldr	r0, [pc, #56]	; (8001f44 <homeBeginHandle+0x40>)
 8001f0c:	f001 fce8 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <homeBeginHandle+0x2e>
		HAL_Delay(1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 ff44 	bl	8002da4 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <homeBeginHandle+0x40>)
 8001f20:	f001 fcde 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <homeBeginHandle+0x3a>
			homeEvent = SET_HOME_COMPLETE;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <homeBeginHandle+0x44>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	701a      	strb	r2, [r3, #0]
		}
	} else {
		speed = TUNE_COARSE_SPEED;
		homeEvent = SET_HOME_TUNE_COARSE;
	}
}
 8001f30:	e005      	b.n	8001f3e <homeBeginHandle+0x3a>
		speed = TUNE_COARSE_SPEED;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <homeBeginHandle+0x48>)
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <homeBeginHandle+0x4c>)
 8001f36:	601a      	str	r2, [r3, #0]
		homeEvent = SET_HOME_TUNE_COARSE;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <homeBeginHandle+0x44>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40010800 	.word	0x40010800
 8001f48:	200001e4 	.word	0x200001e4
 8001f4c:	200001e8 	.word	0x200001e8
 8001f50:	41a00000 	.word	0x41a00000

08001f54 <tuneCoarseHandle>:

void tuneCoarseHandle() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if (brd_GetCurrentAngleDC() > TUNE_COARSE_ABOVE_DEGREE && speed > 0) {
 8001f58:	f7ff f812 	bl	8000f80 <brd_GetCurrentAngleDC>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <tuneCoarseHandle+0xa0>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffdd 	bl	8000f20 <__aeabi_fcmpgt>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <tuneCoarseHandle+0x3a>
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe ffd3 	bl	8000f20 <__aeabi_fcmpgt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <tuneCoarseHandle+0x3a>
		speed *= -1;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e019      	b.n	8001fc2 <tuneCoarseHandle+0x6e>
	} else if (brd_GetCurrentAngleDC() < TUNE_COARSE_BELOW_DEGREE && speed < 0) {
 8001f8e:	f7fe fff7 	bl	8000f80 <brd_GetCurrentAngleDC>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4919      	ldr	r1, [pc, #100]	; (8001ffc <tuneCoarseHandle+0xa8>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe ffa4 	bl	8000ee4 <__aeabi_fcmplt>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00f      	beq.n	8001fc2 <tuneCoarseHandle+0x6e>
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe ff9a 	bl	8000ee4 <__aeabi_fcmplt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <tuneCoarseHandle+0x6e>
		speed *= -1;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001fc0:	6013      	str	r3, [r2, #0]
	}
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <tuneCoarseHandle+0xac>)
 8001fc6:	f001 fc8b 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <tuneCoarseHandle+0x9c>
		osDelay(1);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f003 f9e1 	bl	8005398 <osDelay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <tuneCoarseHandle+0xac>)
 8001fda:	f001 fc81 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <tuneCoarseHandle+0x9c>
			speed = TUNE_FINE_SPEED;
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <tuneCoarseHandle+0xa4>)
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <tuneCoarseHandle+0xb0>)
 8001fe8:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_COARSE_SENSOR_DETECT;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <tuneCoarseHandle+0xb4>)
 8001fec:	2203      	movs	r2, #3
 8001fee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	43340000 	.word	0x43340000
 8001ff8:	200001e8 	.word	0x200001e8
 8001ffc:	c3340000 	.word	0xc3340000
 8002000:	40010800 	.word	0x40010800
 8002004:	40a00000 	.word	0x40a00000
 8002008:	200001e4 	.word	0x200001e4

0800200c <tuneFineHandle>:
void tuneFineHandle() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if (brd_GetCurrentAngleDC() > TUNE_FINE_ABOVE_DEGREE && speed > 0) {
 8002010:	f7fe ffb6 	bl	8000f80 <brd_GetCurrentAngleDC>
 8002014:	4603      	mov	r3, r0
 8002016:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe ff80 	bl	8000f20 <__aeabi_fcmpgt>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d010      	beq.n	8002048 <tuneFineHandle+0x3c>
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <tuneFineHandle+0xa4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ff76 	bl	8000f20 <__aeabi_fcmpgt>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <tuneFineHandle+0x3c>
		speed *= -1;
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <tuneFineHandle+0xa4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <tuneFineHandle+0xa4>)
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e019      	b.n	800207c <tuneFineHandle+0x70>
	} else if (brd_GetCurrentAngleDC() < TUNE_FINE_BELOW_DEGREE && speed < 0) {
 8002048:	f7fe ff9a 	bl	8000f80 <brd_GetCurrentAngleDC>
 800204c:	4603      	mov	r3, r0
 800204e:	4919      	ldr	r1, [pc, #100]	; (80020b4 <tuneFineHandle+0xa8>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe ff47 	bl	8000ee4 <__aeabi_fcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00f      	beq.n	800207c <tuneFineHandle+0x70>
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <tuneFineHandle+0xa4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ff3d 	bl	8000ee4 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <tuneFineHandle+0x70>
		speed *= -1;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <tuneFineHandle+0xa4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <tuneFineHandle+0xa4>)
 800207a:	6013      	str	r3, [r2, #0]
	}
	if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 800207c:	2120      	movs	r1, #32
 800207e:	480e      	ldr	r0, [pc, #56]	; (80020b8 <tuneFineHandle+0xac>)
 8002080:	f001 fc2e 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d110      	bne.n	80020ac <tuneFineHandle+0xa0>
		HAL_Delay(10);
 800208a:	200a      	movs	r0, #10
 800208c:	f000 fe8a 	bl	8002da4 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Sensor_Home_GPIO_Port, Sensor_Home_Pin)) {
 8002090:	2120      	movs	r1, #32
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <tuneFineHandle+0xac>)
 8002094:	f001 fc24 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <tuneFineHandle+0xa0>
			speed = 0;
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <tuneFineHandle+0xa4>)
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
			homeEvent = SET_HOME_TUNE_FINE_SENSOR_DETECT;
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <tuneFineHandle+0xb0>)
 80020a8:	2205      	movs	r2, #5
 80020aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200001e8 	.word	0x200001e8
 80020b4:	bf800000 	.word	0xbf800000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	200001e4 	.word	0x200001e4

080020c0 <sethome_IsComplete>:

bool sethome_IsComplete()
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	if (homeEvent == SET_HOME_COMPLETE) return 1;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <sethome_IsComplete+0x1c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b07      	cmp	r3, #7
 80020ca:	d101      	bne.n	80020d0 <sethome_IsComplete+0x10>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <sethome_IsComplete+0x12>
	return 0;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200001e4 	.word	0x200001e4

080020e0 <sethome_Procedure>:

void sethome_Procedure(void (*pSetHomeCompleteCallback)())
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	switch (homeEvent) {
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <sethome_Procedure+0x70>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d82a      	bhi.n	8002148 <sethome_Procedure+0x68>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <sethome_Procedure+0x18>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002115 	.word	0x08002115
 80020fc:	0800211b 	.word	0x0800211b
 8002100:	08002121 	.word	0x08002121
 8002104:	0800212d 	.word	0x0800212d
 8002108:	08002133 	.word	0x08002133
 800210c:	0800213f 	.word	0x0800213f
 8002110:	08002147 	.word	0x08002147
		case SET_HOME_BEGIN:
			homeBeginHandle();
 8002114:	f7ff fef6 	bl	8001f04 <homeBeginHandle>
		break;
 8002118:	e016      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_TUNE_COARSE:
			tuneCoarseHandle();
 800211a:	f7ff ff1b 	bl	8001f54 <tuneCoarseHandle>
		break;
 800211e:	e013      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_TUNE_COARSE_SENSOR_DETECT:
			brd_ResetState();
 8002120:	f7ff f878 	bl	8001214 <brd_ResetState>
			homeEvent = SET_HOME_TUNE_FINE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <sethome_Procedure+0x70>)
 8002126:	2204      	movs	r2, #4
 8002128:	701a      	strb	r2, [r3, #0]
		break;
 800212a:	e00d      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_TUNE_FINE:
			tuneFineHandle();
 800212c:	f7ff ff6e 	bl	800200c <tuneFineHandle>
		break;
 8002130:	e00a      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_TUNE_FINE_SENSOR_DETECT:
			brd_ResetState();
 8002132:	f7ff f86f 	bl	8001214 <brd_ResetState>
			homeEvent = SET_HOME_STEADY;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <sethome_Procedure+0x70>)
 8002138:	2206      	movs	r2, #6
 800213a:	701a      	strb	r2, [r3, #0]
		break;
 800213c:	e004      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_STEADY:
			homeEvent = SET_HOME_COMPLETE;
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <sethome_Procedure+0x70>)
 8002140:	2207      	movs	r2, #7
 8002142:	701a      	strb	r2, [r3, #0]
		break;
 8002144:	e000      	b.n	8002148 <sethome_Procedure+0x68>
		case SET_HOME_COMPLETE:
			break;
 8002146:	bf00      	nop
	}

}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200001e4 	.word	0x200001e4

08002154 <sethome_GetSpeed>:

float sethome_GetSpeed() {
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	return speed;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <sethome_GetSpeed+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	200001e8 	.word	0x200001e8

08002168 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <vApplicationGetIdleTaskMemory+0x28>)
 800218c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	200001ec 	.word	0x200001ec
 80021a8:	2000028c 	.word	0x2000028c

080021ac <HAL_CAN_ErrorCallback>:
		while (1);
	}
	HAL_FLASH_Lock();
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	while (1);
 80021b4:	e7fe      	b.n	80021b4 <HAL_CAN_ErrorCallback+0x8>

080021b6 <HAL_CAN_RxFifo0FullCallback>:
}

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	__NOP();
 80021be:	bf00      	nop
//	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b0a0      	sub	sp, #128	; 0x80
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d2:	f000 fdb5 	bl	8002d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d6:	f000 f899 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021da:	f000 fa47 	bl	800266c <MX_GPIO_Init>
  MX_CAN_Init();
 80021de:	f000 f8db 	bl	8002398 <MX_CAN_Init>
  MX_TIM3_Init();
 80021e2:	f000 f99b 	bl	800251c <MX_TIM3_Init>
  MX_TIM4_Init();
 80021e6:	f000 f9ed 	bl	80025c4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80021ea:	f000 f90b 	bl	8002404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	__HAL_DBGMCU_FREEZE_TIM2();
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <main+0x10c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <main+0x10c>)
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	6053      	str	r3, [r2, #4]
	brd_Init();
 80021fa:	f7fe fecd 	bl	8000f98 <brd_Init>
	qPID = xQueueCreate(2, sizeof(float));
 80021fe:	2200      	movs	r2, #0
 8002200:	2104      	movs	r1, #4
 8002202:	2002      	movs	r0, #2
 8002204:	f003 fa93 	bl	800572e <xQueueGenericCreate>
 8002208:	4603      	mov	r3, r0
 800220a:	4a34      	ldr	r2, [pc, #208]	; (80022dc <main+0x110>)
 800220c:	6013      	str	r3, [r2, #0]
	qHome = xQueueCreate(1, sizeof(bool));
 800220e:	2200      	movs	r2, #0
 8002210:	2101      	movs	r1, #1
 8002212:	2001      	movs	r0, #1
 8002214:	f003 fa8b 	bl	800572e <xQueueGenericCreate>
 8002218:	4603      	mov	r3, r0
 800221a:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <main+0x114>)
 800221c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of qCAN */
  osMessageQDef(qCAN, 5, uint16_t);
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <main+0x118>)
 8002220:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  qCANHandle = osMessageCreate(osMessageQ(qCAN), NULL);
 800222a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f003 f8c5 	bl	80053c0 <osMessageCreate>
 8002236:	4603      	mov	r3, r0
 8002238:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <main+0x11c>)
 800223a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <main+0x120>)
 800223e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002242:	461d      	mov	r5, r3
 8002244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800224c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f852 	bl	8005300 <osThreadCreate>
 800225c:	4603      	mov	r3, r0
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <main+0x124>)
 8002260:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalcPID */
  osThreadStaticDef(TaskCalcPID, StartTaskPID, osPriorityNormal, 0, 128, TaskCalcPIDBuffer, &TaskCalcPIDControlBlock);
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <main+0x128>)
 8002264:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002268:	461d      	mov	r5, r3
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalcPIDHandle = osThreadCreate(osThread(TaskCalcPID), NULL);
 8002276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f003 f83f 	bl	8005300 <osThreadCreate>
 8002282:	4603      	mov	r3, r0
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <main+0x12c>)
 8002286:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskHandleCAN */
  osThreadStaticDef(TaskHandleCAN, StartCANbus, osPriorityAboveNormal, 0, 128, TaskHandleCANBuffer, &TaskHandleCANControlBlock);
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <main+0x130>)
 800228a:	f107 041c 	add.w	r4, r7, #28
 800228e:	461d      	mov	r5, r3
 8002290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskHandleCANHandle = osThreadCreate(osThread(TaskHandleCAN), NULL);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f82c 	bl	8005300 <osThreadCreate>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <main+0x134>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskPIDSpeed */
  osThreadDef(TaskPIDSpeed, StartTaskPIDSpeed, osPriorityHigh, 0, 128);
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <main+0x138>)
 80022b0:	463c      	mov	r4, r7
 80022b2:	461d      	mov	r5, r3
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPIDSpeedHandle = osThreadCreate(osThread(TaskPIDSpeed), NULL);
 80022c0:	463b      	mov	r3, r7
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f81b 	bl	8005300 <osThreadCreate>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <main+0x13c>)
 80022ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022d0:	f003 f80f 	bl	80052f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80022d4:	e7fe      	b.n	80022d4 <main+0x108>
 80022d6:	bf00      	nop
 80022d8:	e0042000 	.word	0xe0042000
 80022dc:	20000ae0 	.word	0x20000ae0
 80022e0:	20000ae4 	.word	0x20000ae4
 80022e4:	080074d4 	.word	0x080074d4
 80022e8:	20000adc 	.word	0x20000adc
 80022ec:	080074f0 	.word	0x080074f0
 80022f0:	2000058c 	.word	0x2000058c
 80022f4:	08007518 	.word	0x08007518
 80022f8:	20000590 	.word	0x20000590
 80022fc:	08007544 	.word	0x08007544
 8002300:	20000834 	.word	0x20000834
 8002304:	08007570 	.word	0x08007570
 8002308:	20000ad8 	.word	0x20000ad8

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0318 	add.w	r3, r7, #24
 8002316:	2228      	movs	r2, #40	; 0x28
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f004 ffe8 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800233c:	2301      	movs	r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002340:	2302      	movs	r3, #2
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800234a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	4618      	mov	r0, r3
 8002356:	f001 faf3 	bl	8003940 <HAL_RCC_OscConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002360:	f000 fab8 	bl	80028d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002364:	230f      	movs	r3, #15
 8002366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002368:	2302      	movs	r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2102      	movs	r1, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fd60 	bl	8003e44 <HAL_RCC_ClockConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800238a:	f000 faa3 	bl	80028d4 <Error_Handler>
  }
}
 800238e:	bf00      	nop
 8002390:	3740      	adds	r7, #64	; 0x40
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_CAN_Init+0x64>)
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <MX_CAN_Init+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <MX_CAN_Init+0x64>)
 80023a4:	2209      	movs	r2, #9
 80023a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_CAN_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <MX_CAN_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_CAN_Init+0x64>)
 80023b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_CAN_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_CAN_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_CAN_Init+0x64>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_CAN_Init+0x64>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_CAN_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_CAN_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_CAN_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_CAN_Init+0x64>)
 80023e8:	f000 fd00 	bl	8002dec <HAL_CAN_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80023f2:	f000 fa6f 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000048c 	.word	0x2000048c
 8002400:	40006400 	.word	0x40006400

08002404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	f107 0320 	add.w	r3, r7, #32
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	615a      	str	r2, [r3, #20]
 8002432:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <MX_TIM2_Init+0x114>)
 8002436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800243a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <MX_TIM2_Init+0x114>)
 800243e:	2206      	movs	r2, #6
 8002440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b35      	ldr	r3, [pc, #212]	; (8002518 <MX_TIM2_Init+0x114>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002448:	4b33      	ldr	r3, [pc, #204]	; (8002518 <MX_TIM2_Init+0x114>)
 800244a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800244e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <MX_TIM2_Init+0x114>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <MX_TIM2_Init+0x114>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800245c:	482e      	ldr	r0, [pc, #184]	; (8002518 <MX_TIM2_Init+0x114>)
 800245e:	f001 fe9b 	bl	8004198 <HAL_TIM_Base_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002468:	f000 fa34 	bl	80028d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	4619      	mov	r1, r3
 8002478:	4827      	ldr	r0, [pc, #156]	; (8002518 <MX_TIM2_Init+0x114>)
 800247a:	f002 fb23 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002484:	f000 fa26 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002488:	4823      	ldr	r0, [pc, #140]	; (8002518 <MX_TIM2_Init+0x114>)
 800248a:	f001 ff27 	bl	80042dc <HAL_TIM_PWM_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002494:	f000 fa1e 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	4619      	mov	r1, r3
 80024a6:	481c      	ldr	r0, [pc, #112]	; (8002518 <MX_TIM2_Init+0x114>)
 80024a8:	f002 fe9c 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024b2:	f000 fa0f 	bl	80028d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b6:	2360      	movs	r3, #96	; 0x60
 80024b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2204      	movs	r2, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4812      	ldr	r0, [pc, #72]	; (8002518 <MX_TIM2_Init+0x114>)
 80024ce:	f002 fa37 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80024d8:	f000 f9fc 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2208      	movs	r2, #8
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_TIM2_Init+0x114>)
 80024e4:	f002 fa2c 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80024ee:	f000 f9f1 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	220c      	movs	r2, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_TIM2_Init+0x114>)
 80024fa:	f002 fa21 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002504:	f000 f9e6 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <MX_TIM2_Init+0x114>)
 800250a:	f000 fb0d 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 800250e:	bf00      	nop
 8002510:	3738      	adds	r7, #56	; 0x38
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200004b4 	.word	0x200004b4

0800251c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fee0 	bl	80072f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <MX_TIM3_Init+0xa0>)
 800253a:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <MX_TIM3_Init+0xa4>)
 800253c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <MX_TIM3_Init+0xa0>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <MX_TIM3_Init+0xa0>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <MX_TIM3_Init+0xa0>)
 800254c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_TIM3_Init+0xa0>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_TIM3_Init+0xa0>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800255e:	2303      	movs	r3, #3
 8002560:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002576:	2301      	movs	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_TIM3_Init+0xa0>)
 800258a:	f001 ffa1 	bl	80044d0 <HAL_TIM_Encoder_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002594:	f000 f99e 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_TIM3_Init+0xa0>)
 80025a6:	f002 fe1d 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80025b0:	f000 f990 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200004fc 	.word	0x200004fc
 80025c0:	40000400 	.word	0x40000400

080025c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 fe8c 	bl	80072f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <MX_TIM4_Init+0xa0>)
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <MX_TIM4_Init+0xa4>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <MX_TIM4_Init+0xa0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_TIM4_Init+0xa0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <MX_TIM4_Init+0xa0>)
 80025f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_TIM4_Init+0xa0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_TIM4_Init+0xa0>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002606:	2303      	movs	r3, #3
 8002608:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800260e:	2301      	movs	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800261e:	2301      	movs	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4619      	mov	r1, r3
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <MX_TIM4_Init+0xa0>)
 8002632:	f001 ff4d 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800263c:	f000 f94a 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_TIM4_Init+0xa0>)
 800264e:	f002 fdc9 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002658:	f000 f93c 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	3730      	adds	r7, #48	; 0x30
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000544 	.word	0x20000544
 8002668:	40000800 	.word	0x40000800

0800266c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <MX_GPIO_Init+0xc8>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <MX_GPIO_Init+0xc8>)
 8002686:	f043 0320 	orr.w	r3, r3, #32
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <MX_GPIO_Init+0xc8>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <MX_GPIO_Init+0xc8>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <MX_GPIO_Init+0xc8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MX_GPIO_Init+0xc8>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_GPIO_Init+0xc8>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <MX_GPIO_Init+0xc8>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_GPIO_Init+0xc8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLDC_DIR_Pin|BLDC_BRAKE_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2111      	movs	r1, #17
 80026cc:	481a      	ldr	r0, [pc, #104]	; (8002738 <MX_GPIO_Init+0xcc>)
 80026ce:	f001 f91e 	bl	800390e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2108      	movs	r1, #8
 80026d6:	4819      	ldr	r0, [pc, #100]	; (800273c <MX_GPIO_Init+0xd0>)
 80026d8:	f001 f919 	bl	800390e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLDC_DIR_Pin BLDC_BRAKE_Pin */
  GPIO_InitStruct.Pin = BLDC_DIR_Pin|BLDC_BRAKE_Pin;
 80026dc:	2311      	movs	r3, #17
 80026de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	4619      	mov	r1, r3
 80026f2:	4811      	ldr	r0, [pc, #68]	; (8002738 <MX_GPIO_Init+0xcc>)
 80026f4:	f000 ff70 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Home_Pin */
  GPIO_InitStruct.Pin = Sensor_Home_Pin;
 80026f8:	2320      	movs	r3, #32
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor_Home_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	480b      	ldr	r0, [pc, #44]	; (8002738 <MX_GPIO_Init+0xcc>)
 800270c:	f000 ff64 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UserLED_Pin */
  GPIO_InitStruct.Pin = UserLED_Pin;
 8002710:	2308      	movs	r3, #8
 8002712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2302      	movs	r3, #2
 800271e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserLED_GPIO_Port, &GPIO_InitStruct);
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4619      	mov	r1, r3
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_GPIO_Init+0xd0>)
 8002728:	f000 ff56 	bl	80035d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272c:	bf00      	nop
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00

08002740 <SethomeHandle>:

/* USER CODE BEGIN 4 */

void SethomeHandle() {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	if (xQueueReceive(qHome, (void*) &IsSetHome, 1 / portTICK_PERIOD_MS) == pdTRUE) {
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <SethomeHandle+0x2c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <SethomeHandle+0x30>)
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f949 	bl	80059e4 <xQueueReceive>
 8002752:	4603      	mov	r3, r0
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <SethomeHandle+0x28>
		brd_SetTargetAngleDC(0);
 8002758:	f04f 0000 	mov.w	r0, #0
 800275c:	f7fe fd92 	bl	8001284 <brd_SetTargetAngleDC>
		brd_SetSpeedBLDC(0);
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f7fe fdc2 	bl	80012ec <brd_SetSpeedBLDC>
	}
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000ae4 	.word	0x20000ae4
 8002770:	20000ae8 	.word	0x20000ae8

08002774 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	SET_HOME_DEFAULT_TASK:
	sethome_Begin();
 800277c:	f7ff fbb6 	bl	8001eec <sethome_Begin>
	while (!sethome_IsComplete()) {
 8002780:	e010      	b.n	80027a4 <StartDefaultTask+0x30>
		sethome_Procedure();
 8002782:	f7ff fcad 	bl	80020e0 <sethome_Procedure>
		float speed = sethome_GetSpeed();
 8002786:	f7ff fce5 	bl	8002154 <sethome_GetSpeed>
 800278a:	4603      	mov	r3, r0
 800278c:	60fb      	str	r3, [r7, #12]
		xQueueSend(qPID, (const void* )&speed, 10/portTICK_PERIOD_MS);
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <StartDefaultTask+0x64>)
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f107 010c 	add.w	r1, r7, #12
 8002796:	2300      	movs	r3, #0
 8002798:	220a      	movs	r2, #10
 800279a:	f003 f825 	bl	80057e8 <xQueueGenericSend>
		osDelay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f002 fdfa 	bl	8005398 <osDelay>
	while (!sethome_IsComplete()) {
 80027a4:	f7ff fc8c 	bl	80020c0 <sethome_IsComplete>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e6      	bne.n	8002782 <StartDefaultTask+0xe>
	}
//	SetHomeCompleteCallback();
	IsSetHome = 0;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <StartDefaultTask+0x68>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */

	for (;;) {
		SethomeHandle();
 80027ba:	f7ff ffc1 	bl	8002740 <SethomeHandle>
		if (IsSetHome) {
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <StartDefaultTask+0x68>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <StartDefaultTask+0x5a>
			osDelay(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f002 fde6 	bl	8005398 <osDelay>
			goto SET_HOME_DEFAULT_TASK;
 80027cc:	e7d6      	b.n	800277c <StartDefaultTask+0x8>
		}
		osDelay(1);
 80027ce:	2001      	movs	r0, #1
 80027d0:	f002 fde2 	bl	8005398 <osDelay>
		SethomeHandle();
 80027d4:	e7f1      	b.n	80027ba <StartDefaultTask+0x46>
 80027d6:	bf00      	nop
 80027d8:	20000ae0 	.word	0x20000ae0
 80027dc:	20000ae8 	.word	0x20000ae8

080027e0 <StartTaskPID>:
 * @retval None
 */
float test1;
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
	SET_HOME_PID_TASK: float TargetValue = 0;
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
	while (!sethome_IsComplete()) {
 80027ee:	e00e      	b.n	800280e <StartTaskPID+0x2e>
		xQueueReceive(qPID, &TargetValue, 0);
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <StartTaskPID+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f107 010c 	add.w	r1, r7, #12
 80027f8:	2200      	movs	r2, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 f8f2 	bl	80059e4 <xQueueReceive>
		PID_DC_CalSpeed((float) TargetValue);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fa08 	bl	8001c18 <PID_DC_CalSpeed>
		osDelay(2);
 8002808:	2002      	movs	r0, #2
 800280a:	f002 fdc5 	bl	8005398 <osDelay>
	while (!sethome_IsComplete()) {
 800280e:	f7ff fc57 	bl	80020c0 <sethome_IsComplete>
 8002812:	4603      	mov	r3, r0
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e8      	bne.n	80027f0 <StartTaskPID+0x10>
	}
	/* Infinite loop */
	for (;;) {
		if (IsSetHome) {
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <StartTaskPID+0x68>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <StartTaskPID+0x4e>
			osDelay(1);
 8002826:	2001      	movs	r0, #1
 8002828:	f002 fdb6 	bl	8005398 <osDelay>
			goto SET_HOME_PID_TASK;
 800282c:	e7dc      	b.n	80027e8 <StartTaskPID+0x8>
		}
//		PID_DC_CalPos(test1);
		PID_DC_CalPos(brd_GetTargetAngleDC());
 800282e:	f7fe fd1f 	bl	8001270 <brd_GetTargetAngleDC>
 8002832:	4603      	mov	r3, r0
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa4d 	bl	8001cd4 <PID_DC_CalPos>

		osDelay(2);
 800283a:	2002      	movs	r0, #2
 800283c:	f002 fdac 	bl	8005398 <osDelay>
		if (IsSetHome) {
 8002840:	e7ed      	b.n	800281e <StartTaskPID+0x3e>
 8002842:	bf00      	nop
 8002844:	20000ae0 	.word	0x20000ae0
 8002848:	20000ae8 	.word	0x20000ae8

0800284c <StartCANbus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCANbus */
void StartCANbus(void const * argument)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANbus */
//	CAN_Init();
//	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
 8002854:	e7fe      	b.n	8002854 <StartCANbus+0x8>
	...

08002858 <StartTaskPIDSpeed>:
* @retval None
*/
/* USER CODE END Header_StartTaskPIDSpeed */
float test;
void StartTaskPIDSpeed(void const * argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPIDSpeed */
	SET_HOME_PID_SPEED:
	PID_BLDC_BreakProtection(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff fb09 	bl	8001e78 <PID_BLDC_BreakProtection>
	osDelay(1000);
 8002866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286a:	f002 fd95 	bl	8005398 <osDelay>
	PID_BLDC_BreakProtection(0);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff fb02 	bl	8001e78 <PID_BLDC_BreakProtection>
	while(!sethome_IsComplete()){
 8002874:	e002      	b.n	800287c <StartTaskPIDSpeed+0x24>
		osDelay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f002 fd8e 	bl	8005398 <osDelay>
	while(!sethome_IsComplete()){
 800287c:	f7ff fc20 	bl	80020c0 <sethome_IsComplete>
 8002880:	4603      	mov	r3, r0
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f4      	bne.n	8002876 <StartTaskPIDSpeed+0x1e>
	}

  /* Infinite loop */
  for(;;)
  {
	if (IsSetHome) {
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <StartTaskPIDSpeed+0x54>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d000      	beq.n	8002896 <StartTaskPIDSpeed+0x3e>
		goto SET_HOME_PID_SPEED;
 8002894:	e7e4      	b.n	8002860 <StartTaskPIDSpeed+0x8>
	}
//	PID_BLDC_CalSpeed(test);
	PID_BLDC_CalSpeed(brd_GetSpeedBLDC());
 8002896:	f7fe fd37 	bl	8001308 <brd_GetSpeedBLDC>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa5d 	bl	8001d5c <PID_BLDC_CalSpeed>
    osDelay(20);
 80028a2:	2014      	movs	r0, #20
 80028a4:	f002 fd78 	bl	8005398 <osDelay>
	if (IsSetHome) {
 80028a8:	e7f0      	b.n	800288c <StartTaskPIDSpeed+0x34>
 80028aa:	bf00      	nop
 80028ac:	20000ae8 	.word	0x20000ae8

080028b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028c2:	f000 fa53 	bl	8002d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028dc:	e7fe      	b.n	80028dc <Error_Handler+0x8>
	...

080028e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_MspInit+0x68>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_MspInit+0x68>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6193      	str	r3, [r2, #24]
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_MspInit+0x68>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_MspInit+0x68>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_MspInit+0x68>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_MspInit+0x68>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	210f      	movs	r1, #15
 800291a:	f06f 0001 	mvn.w	r0, #1
 800291e:	f000 fe30 	bl	8003582 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_MspInit+0x6c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <HAL_MspInit+0x6c>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000

08002950 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_CAN_MspInit+0xbc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d149      	bne.n	8002a04 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 8002976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800297a:	61d3      	str	r3, [r2, #28]
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6193      	str	r3, [r2, #24]
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_CAN_MspInit+0xc0>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4619      	mov	r1, r3
 80029b4:	4817      	ldr	r0, [pc, #92]	; (8002a14 <HAL_CAN_MspInit+0xc4>)
 80029b6:	f000 fe0f 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	4619      	mov	r1, r3
 80029ce:	4811      	ldr	r0, [pc, #68]	; (8002a14 <HAL_CAN_MspInit+0xc4>)
 80029d0:	f000 fe02 	bl	80035d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2105      	movs	r1, #5
 80029d8:	2013      	movs	r0, #19
 80029da:	f000 fdd2 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80029de:	2013      	movs	r0, #19
 80029e0:	f000 fdeb 	bl	80035ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2105      	movs	r1, #5
 80029e8:	2014      	movs	r0, #20
 80029ea:	f000 fdca 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80029ee:	2014      	movs	r0, #20
 80029f0:	f000 fde3 	bl	80035ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2105      	movs	r1, #5
 80029f8:	2015      	movs	r0, #21
 80029fa:	f000 fdc2 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80029fe:	2015      	movs	r0, #21
 8002a00:	f000 fddb 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a04:	bf00      	nop
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40006400 	.word	0x40006400
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010800 	.word	0x40010800

08002a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d10b      	bne.n	8002a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_TIM_Base_MspInit+0x34>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <HAL_TIM_Base_MspInit+0x34>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	61d3      	str	r3, [r2, #28]
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_TIM_Base_MspInit+0x34>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d124      	bne.n	8002aba <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	61d3      	str	r3, [r2, #28]
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa0:	23c0      	movs	r3, #192	; 0xc0
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481a      	ldr	r0, [pc, #104]	; (8002b1c <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ab4:	f000 fd90 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ab8:	e028      	b.n	8002b0c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d123      	bne.n	8002b0c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6193      	str	r3, [r2, #24]
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002af4:	23c0      	movs	r3, #192	; 0xc0
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 0318 	add.w	r3, r7, #24
 8002b04:	4619      	mov	r1, r3
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002b08:	f000 fd66 	bl	80035d8 <HAL_GPIO_Init>
}
 8002b0c:	bf00      	nop
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010800 	.word	0x40010800
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40010c00 	.word	0x40010c00

08002b28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b46:	d117      	bne.n	8002b78 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_TIM_MspPostInit+0x58>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_TIM_MspPostInit+0x58>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_TIM_MspPostInit+0x58>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b60:	230e      	movs	r3, #14
 8002b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4619      	mov	r1, r3
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <HAL_TIM_MspPostInit+0x5c>)
 8002b74:	f000 fd30 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010800 	.word	0x40010800

08002b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_InitTick+0xd0>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_InitTick+0xd0>)
 8002ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ba8:	6193      	str	r3, [r2, #24]
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_InitTick+0xd0>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fa9b 	bl	80040fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bc6:	f001 fa85 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8002bca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_InitTick+0xd4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9b      	lsrs	r3, r3, #18
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_InitTick+0xd8>)
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <HAL_InitTick+0xdc>)
 8002bde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_InitTick+0xd8>)
 8002be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_InitTick+0xd8>)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_InitTick+0xd8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_InitTick+0xd8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_InitTick+0xd8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <HAL_InitTick+0xd8>)
 8002c02:	f001 fac9 	bl	8004198 <HAL_TIM_Base_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11b      	bne.n	8002c4c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c14:	4812      	ldr	r0, [pc, #72]	; (8002c60 <HAL_InitTick+0xd8>)
 8002c16:	f001 fb0f 	bl	8004238 <HAL_TIM_Base_Start_IT>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c28:	2019      	movs	r0, #25
 8002c2a:	f000 fcc6 	bl	80035ba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d808      	bhi.n	8002c46 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	2019      	movs	r0, #25
 8002c3a:	f000 fca2 	bl	8003582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_InitTick+0xe0>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e002      	b.n	8002c4c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	20000aec 	.word	0x20000aec
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	20000008 	.word	0x20000008

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002c9e:	f000 f9a0 	bl	8002fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000048c 	.word	0x2000048c

08002cac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002cb2:	f000 f996 	bl	8002fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000048c 	.word	0x2000048c

08002cc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <CAN1_RX1_IRQHandler+0x10>)
 8002cc6:	f000 f98c 	bl	8002fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000048c 	.word	0x2000048c

08002cd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM1_UP_IRQHandler+0x10>)
 8002cda:	f001 fd29 	bl	8004730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000aec 	.word	0x20000aec

08002ce8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf4:	f7ff fff8 	bl	8002ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cfa:	490c      	ldr	r1, [pc, #48]	; (8002d2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cfc:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d10:	4c09      	ldr	r4, [pc, #36]	; (8002d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f004 fb45 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d22:	f7ff fa53 	bl	80021cc <main>
  bx lr
 8002d26:	4770      	bx	lr
  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002d30:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 8002d34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002d38:	200019c4 	.word	0x200019c4

08002d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC1_2_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_Init+0x28>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_Init+0x28>)
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f000 fc0b 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d56:	200f      	movs	r0, #15
 8002d58:	f7ff ff16 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5c:	f7ff fdc0 	bl	80028e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_IncTick+0x1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_IncTick+0x20>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <HAL_IncTick+0x20>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	20000b34 	.word	0x20000b34

08002d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_GetTick+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000b34 	.word	0x20000b34

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_Delay+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffe0 	bl	8002d90 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000000c 	.word	0x2000000c

08002dec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0ed      	b.n	8002fda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fda0 	bl	8002950 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7ff ffb6 	bl	8002d90 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e26:	e012      	b.n	8002e4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e28:	f7ff ffb2 	bl	8002d90 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b0a      	cmp	r3, #10
 8002e34:	d90b      	bls.n	8002e4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2205      	movs	r2, #5
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0c5      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0e5      	beq.n	8002e28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0202 	bic.w	r2, r2, #2
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7ff ff90 	bl	8002d90 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e72:	e012      	b.n	8002e9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e74:	f7ff ff8c 	bl	8002d90 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d90b      	bls.n	8002e9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2205      	movs	r2, #5
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e09f      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e5      	bne.n	8002e74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e007      	b.n	8002ed2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7e5b      	ldrb	r3, [r3, #25]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e007      	b.n	8002efc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e9b      	ldrb	r3, [r3, #26]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e007      	b.n	8002f26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0220 	bic.w	r2, r2, #32
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7edb      	ldrb	r3, [r3, #27]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0210 	bic.w	r2, r2, #16
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7f1b      	ldrb	r3, [r3, #28]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d108      	bne.n	8002f6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7f5b      	ldrb	r3, [r3, #29]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0204 	orr.w	r2, r2, #4
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e007      	b.n	8002fa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	; 0x28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d07c      	beq.n	8003122 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d023      	beq.n	800307a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f983 	bl	8003350 <HAL_CAN_TxMailbox0CompleteCallback>
 800304a:	e016      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e00c      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e002      	b.n	800307a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f986 	bl	8003386 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d024      	beq.n	80030ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f962 	bl	8003362 <HAL_CAN_TxMailbox1CompleteCallback>
 800309e:	e016      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	e00c      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e002      	b.n	80030ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f965 	bl	8003398 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d024      	beq.n	8003122 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f941 	bl	8003374 <HAL_CAN_TxMailbox2CompleteCallback>
 80030f2:	e016      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e00c      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	e002      	b.n	8003122 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f944 	bl	80033aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2208      	movs	r2, #8
 8003160:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff f827 	bl	80021b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f91b 	bl	80033bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2210      	movs	r2, #16
 80031a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2208      	movs	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f90a 	bl	80033e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8f2 	bl	80033ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8f3 	bl	80033f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f8eb 	bl	8003404 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d07b      	beq.n	8003330 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d072      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	2b00      	cmp	r3, #0
 800329e:	d043      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03e      	beq.n	8003328 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d02b      	beq.n	800330c <HAL_CAN_IRQHandler+0x32a>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d82e      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032b8:	2b50      	cmp	r3, #80	; 0x50
 80032ba:	d022      	beq.n	8003302 <HAL_CAN_IRQHandler+0x320>
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d82a      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d019      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x316>
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d826      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d010      	beq.n	80032ee <HAL_CAN_IRQHandler+0x30c>
 80032cc:	2b30      	cmp	r3, #48	; 0x30
 80032ce:	d822      	bhi.n	8003316 <HAL_CAN_IRQHandler+0x334>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d002      	beq.n	80032da <HAL_CAN_IRQHandler+0x2f8>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d005      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032d8:	e01d      	b.n	8003316 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032e2:	e019      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032ec:	e014      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f043 0320 	orr.w	r3, r3, #32
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032f6:	e00f      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003300:	e00a      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800330a:	e005      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003314:	e000      	b.n	8003318 <HAL_CAN_IRQHandler+0x336>
            break;
 8003316:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003326:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2204      	movs	r2, #4
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe ff32 	bl	80021ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003348:	bf00      	nop
 800334a:	3728      	adds	r7, #40	; 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
	...

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	60d3      	str	r3, [r2, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4906      	ldr	r1, [pc, #24]	; (80034b0 <__NVIC_EnableIRQ+0x34>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	; (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff4f 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff64 	bl	8003460 <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ffb2 	bl	8003508 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff81 	bl	80034b4 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff57 	bl	800347c <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b08b      	sub	sp, #44	; 0x2c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ea:	e169      	b.n	80038c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035ec:	2201      	movs	r2, #1
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	f040 8158 	bne.w	80038ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4a9a      	ldr	r2, [pc, #616]	; (8003878 <HAL_GPIO_Init+0x2a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d05e      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003614:	4a98      	ldr	r2, [pc, #608]	; (8003878 <HAL_GPIO_Init+0x2a0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d875      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800361a:	4a98      	ldr	r2, [pc, #608]	; (800387c <HAL_GPIO_Init+0x2a4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d058      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003620:	4a96      	ldr	r2, [pc, #600]	; (800387c <HAL_GPIO_Init+0x2a4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d86f      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003626:	4a96      	ldr	r2, [pc, #600]	; (8003880 <HAL_GPIO_Init+0x2a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d052      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 800362c:	4a94      	ldr	r2, [pc, #592]	; (8003880 <HAL_GPIO_Init+0x2a8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d869      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003632:	4a94      	ldr	r2, [pc, #592]	; (8003884 <HAL_GPIO_Init+0x2ac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04c      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003638:	4a92      	ldr	r2, [pc, #584]	; (8003884 <HAL_GPIO_Init+0x2ac>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d863      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800363e:	4a92      	ldr	r2, [pc, #584]	; (8003888 <HAL_GPIO_Init+0x2b0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d046      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
 8003644:	4a90      	ldr	r2, [pc, #576]	; (8003888 <HAL_GPIO_Init+0x2b0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d85d      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 800364a:	2b12      	cmp	r3, #18
 800364c:	d82a      	bhi.n	80036a4 <HAL_GPIO_Init+0xcc>
 800364e:	2b12      	cmp	r3, #18
 8003650:	d859      	bhi.n	8003706 <HAL_GPIO_Init+0x12e>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_GPIO_Init+0x80>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	080036d3 	.word	0x080036d3
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036bf 	.word	0x080036bf
 8003664:	08003701 	.word	0x08003701
 8003668:	08003707 	.word	0x08003707
 800366c:	08003707 	.word	0x08003707
 8003670:	08003707 	.word	0x08003707
 8003674:	08003707 	.word	0x08003707
 8003678:	08003707 	.word	0x08003707
 800367c:	08003707 	.word	0x08003707
 8003680:	08003707 	.word	0x08003707
 8003684:	08003707 	.word	0x08003707
 8003688:	08003707 	.word	0x08003707
 800368c:	08003707 	.word	0x08003707
 8003690:	08003707 	.word	0x08003707
 8003694:	08003707 	.word	0x08003707
 8003698:	08003707 	.word	0x08003707
 800369c:	080036b5 	.word	0x080036b5
 80036a0:	080036c9 	.word	0x080036c9
 80036a4:	4a79      	ldr	r2, [pc, #484]	; (800388c <HAL_GPIO_Init+0x2b4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036aa:	e02c      	b.n	8003706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	623b      	str	r3, [r7, #32]
          break;
 80036b2:	e029      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	3304      	adds	r3, #4
 80036ba:	623b      	str	r3, [r7, #32]
          break;
 80036bc:	e024      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	3308      	adds	r3, #8
 80036c4:	623b      	str	r3, [r7, #32]
          break;
 80036c6:	e01f      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	330c      	adds	r3, #12
 80036ce:	623b      	str	r3, [r7, #32]
          break;
 80036d0:	e01a      	b.n	8003708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036da:	2304      	movs	r3, #4
 80036dc:	623b      	str	r3, [r7, #32]
          break;
 80036de:	e013      	b.n	8003708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e8:	2308      	movs	r3, #8
 80036ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	611a      	str	r2, [r3, #16]
          break;
 80036f2:	e009      	b.n	8003708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f4:	2308      	movs	r3, #8
 80036f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	615a      	str	r2, [r3, #20]
          break;
 80036fe:	e003      	b.n	8003708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
          break;
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x130>
          break;
 8003706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d801      	bhi.n	8003712 <HAL_GPIO_Init+0x13a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_Init+0x13e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2bff      	cmp	r3, #255	; 0xff
 800371c:	d802      	bhi.n	8003724 <HAL_GPIO_Init+0x14c>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	e002      	b.n	800372a <HAL_GPIO_Init+0x152>
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3b08      	subs	r3, #8
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	210f      	movs	r1, #15
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	431a      	orrs	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80b1 	beq.w	80038ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003758:	4b4d      	ldr	r3, [pc, #308]	; (8003890 <HAL_GPIO_Init+0x2b8>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_GPIO_Init+0x2b8>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_GPIO_Init+0x2b8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003770:	4a48      	ldr	r2, [pc, #288]	; (8003894 <HAL_GPIO_Init+0x2bc>)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <HAL_GPIO_Init+0x2c0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_GPIO_Init+0x1ec>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3f      	ldr	r2, [pc, #252]	; (800389c <HAL_GPIO_Init+0x2c4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00d      	beq.n	80037c0 <HAL_GPIO_Init+0x1e8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3e      	ldr	r2, [pc, #248]	; (80038a0 <HAL_GPIO_Init+0x2c8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <HAL_GPIO_Init+0x1e4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a3d      	ldr	r2, [pc, #244]	; (80038a4 <HAL_GPIO_Init+0x2cc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_GPIO_Init+0x1e0>
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <HAL_GPIO_Init+0x1ee>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e004      	b.n	80037c6 <HAL_GPIO_Init+0x1ee>
 80037bc:	2302      	movs	r3, #2
 80037be:	e002      	b.n	80037c6 <HAL_GPIO_Init+0x1ee>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_GPIO_Init+0x1ee>
 80037c4:	2300      	movs	r3, #0
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	f002 0203 	and.w	r2, r2, #3
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	4093      	lsls	r3, r2
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037d6:	492f      	ldr	r1, [pc, #188]	; (8003894 <HAL_GPIO_Init+0x2bc>)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	492c      	ldr	r1, [pc, #176]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]
 80037fc:	e006      	b.n	800380c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	43db      	mvns	r3, r3
 8003806:	4928      	ldr	r1, [pc, #160]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003808:	4013      	ands	r3, r2
 800380a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4922      	ldr	r1, [pc, #136]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
 8003824:	e006      	b.n	8003834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	43db      	mvns	r3, r3
 800382e:	491e      	ldr	r1, [pc, #120]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003830:	4013      	ands	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4918      	ldr	r1, [pc, #96]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	43db      	mvns	r3, r3
 8003856:	4914      	ldr	r1, [pc, #80]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 8003858:	4013      	ands	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d021      	beq.n	80038ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_GPIO_Init+0x2d0>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e021      	b.n	80038ba <HAL_GPIO_Init+0x2e2>
 8003876:	bf00      	nop
 8003878:	10320000 	.word	0x10320000
 800387c:	10310000 	.word	0x10310000
 8003880:	10220000 	.word	0x10220000
 8003884:	10210000 	.word	0x10210000
 8003888:	10120000 	.word	0x10120000
 800388c:	10110000 	.word	0x10110000
 8003890:	40021000 	.word	0x40021000
 8003894:	40010000 	.word	0x40010000
 8003898:	40010800 	.word	0x40010800
 800389c:	40010c00 	.word	0x40010c00
 80038a0:	40011000 	.word	0x40011000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_GPIO_Init+0x304>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	4909      	ldr	r1, [pc, #36]	; (80038dc <HAL_GPIO_Init+0x304>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	3301      	adds	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f47f ae8e 	bne.w	80035ec <HAL_GPIO_Init+0x14>
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	372c      	adds	r7, #44	; 0x2c
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40010400 	.word	0x40010400

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	807b      	strh	r3, [r7, #2]
 800391a:	4613      	mov	r3, r2
 800391c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800391e:	787b      	ldrb	r3, [r7, #1]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800392a:	e003      	b.n	8003934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	041a      	lsls	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
	...

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e272      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8087 	beq.w	8003a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	4b92      	ldr	r3, [pc, #584]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00c      	beq.n	8003986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800396c:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d112      	bne.n	800399e <HAL_RCC_OscConfig+0x5e>
 8003978:	4b8c      	ldr	r3, [pc, #560]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d10b      	bne.n	800399e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003986:	4b89      	ldr	r3, [pc, #548]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d06c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x12c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d168      	bne.n	8003a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e24c      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x76>
 80039a8:	4b80      	ldr	r3, [pc, #512]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7f      	ldr	r2, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e02e      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x98>
 80039be:	4b7b      	ldr	r3, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7a      	ldr	r2, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a77      	ldr	r2, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0xbc>
 80039e2:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a71      	ldr	r2, [pc, #452]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b6f      	ldr	r3, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039fc:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6a      	ldr	r2, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a67      	ldr	r2, [pc, #412]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7ff f9b8 	bl	8002d90 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7ff f9b4 	bl	8002d90 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e200      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe4>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7ff f9a4 	bl	8002d90 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7ff f9a0 	bl	8002d90 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e1ec      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x10c>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7a:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x18c>
 8003a92:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x176>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1c0      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4939      	ldr	r1, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e03a      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7ff f959 	bl	8002d90 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7ff f955 	bl	8002d90 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1a1      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4927      	ldr	r1, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7ff f938 	bl	8002d90 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b24:	f7ff f934 	bl	8002d90 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e180      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d03a      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d019      	beq.n	8003b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5c:	f7ff f918 	bl	8002d90 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7ff f914 	bl	8002d90 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e160      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b82:	2001      	movs	r0, #1
 8003b84:	f000 faea 	bl	800415c <RCC_Delay>
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7ff f8fe 	bl	8002d90 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7ff f8fa 	bl	8002d90 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e146      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	42420000 	.word	0x42420000
 8003bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e9      	bne.n	8003b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a6 	beq.w	8003d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b8b      	ldr	r3, [pc, #556]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a87      	ldr	r2, [pc, #540]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]
 8003bee:	4b85      	ldr	r3, [pc, #532]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b82      	ldr	r3, [pc, #520]	; (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b7f      	ldr	r3, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a7e      	ldr	r2, [pc, #504]	; (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7ff f8bb 	bl	8002d90 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7ff f8b7 	bl	8002d90 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e103      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x312>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	e02d      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x334>
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6213      	str	r3, [r2, #32]
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a66      	ldr	r2, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	6213      	str	r3, [r2, #32]
 8003c72:	e01c      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCC_OscConfig+0x356>
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4a60      	ldr	r2, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	6213      	str	r3, [r2, #32]
 8003c88:	4b5e      	ldr	r3, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6213      	str	r3, [r2, #32]
 8003c94:	e00b      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c96:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6213      	str	r3, [r2, #32]
 8003ca2:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d015      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7ff f86b 	bl	8002d90 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7ff f867 	bl	8002d90 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0b1      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RCC_OscConfig+0x37e>
 8003ce0:	e014      	b.n	8003d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7ff f855 	bl	8002d90 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7ff f851 	bl	8002d90 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e09b      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ee      	bne.n	8003cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d12:	4b3c      	ldr	r3, [pc, #240]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8087 	beq.w	8003e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d061      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d146      	bne.n	8003dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7ff f825 	bl	8002d90 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7ff f821 	bl	8002d90 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e06d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4921      	ldr	r1, [pc, #132]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a19      	ldr	r1, [r3, #32]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	430b      	orrs	r3, r1
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fe fff5 	bl	8002d90 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe fff1 	bl	8002d90 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e03d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x46a>
 8003dc8:	e035      	b.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe ffde 	bl	8002d90 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe ffda 	bl	8002d90 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e026      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x498>
 8003df6:	e01e      	b.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e019      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_OscConfig+0x500>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d0      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d910      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b67      	ldr	r3, [pc, #412]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4965      	ldr	r1, [pc, #404]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d040      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d115      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b41      	ldr	r3, [pc, #260]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e073      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06b      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4936      	ldr	r1, [pc, #216]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fe ff2c 	bl	8002d90 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe ff28 	bl	8002d90 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e053      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d210      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4922      	ldr	r1, [pc, #136]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1cc>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1d0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fdc8 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40022000 	.word	0x40022000
 8004008:	40021000 	.word	0x40021000
 800400c:	08007594 	.word	0x08007594
 8004010:	20000004 	.word	0x20000004
 8004014:	20000008 	.word	0x20000008

08004018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d002      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x30>
 8004042:	2b08      	cmp	r3, #8
 8004044:	d003      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x36>
 8004046:	e027      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800404a:	613b      	str	r3, [r7, #16]
      break;
 800404c:	e027      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	0c9b      	lsrs	r3, r3, #18
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0c5b      	lsrs	r3, r3, #17
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800407a:	fb03 f202 	mul.w	r2, r3, r2
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e004      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	613b      	str	r3, [r7, #16]
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800409a:	613b      	str	r3, [r7, #16]
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	693b      	ldr	r3, [r7, #16]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	007a1200 	.word	0x007a1200
 80040b4:	080075ac 	.word	0x080075ac
 80040b8:	080075bc 	.word	0x080075bc
 80040bc:	003d0900 	.word	0x003d0900

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	20000004 	.word	0x20000004

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d8:	f7ff fff2 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	080075a4 	.word	0x080075a4

080040fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	220f      	movs	r2, #15
 800410a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_RCC_GetClockConfig+0x58>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0203 	and.w	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RCC_GetClockConfig+0x58>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_GetClockConfig+0x58>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_RCC_GetClockConfig+0x58>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetClockConfig+0x5c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0207 	and.w	r2, r3, #7
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40021000 	.word	0x40021000
 8004158:	40022000 	.word	0x40022000

0800415c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <RCC_Delay+0x34>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <RCC_Delay+0x38>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	0a5b      	lsrs	r3, r3, #9
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004178:	bf00      	nop
  }
  while (Delay --);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	60fa      	str	r2, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f9      	bne.n	8004178 <RCC_Delay+0x1c>
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	20000004 	.word	0x20000004
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fe fc2a 	bl	8002a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 fd60 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d001      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e03a      	b.n	80042c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_TIM_Base_Start_IT+0x98>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x58>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d009      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x58>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x58>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d111      	bne.n	80042b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d010      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	e007      	b.n	80042c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800

080042dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f839 	bl	800437a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fcbe 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_TIM_PWM_Start+0x24>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e022      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d109      	bne.n	80043ca <HAL_TIM_PWM_Start+0x3e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e015      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x58>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e008      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e05e      	b.n	80044bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0x82>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	e013      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0x92>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	e00b      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442c:	e003      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 feac 	bl	800519c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <HAL_TIM_PWM_Start+0x138>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_TIM_PWM_Start+0x138>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d009      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <HAL_TIM_PWM_Start+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIM_PWM_Start+0x140>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b06      	cmp	r3, #6
 8004496:	d010      	beq.n	80044ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	e007      	b.n	80044ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e093      	b.n	800460c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fe faa9 	bl	8002a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 fbb9 	bl	8004c9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4313      	orrs	r3, r2
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004570:	f023 030c 	bic.w	r3, r3, #12
 8004574:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	4313      	orrs	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	031b      	lsls	r3, r3, #12
 80045a0:	4313      	orrs	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	4313      	orrs	r3, r2
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800462c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800463c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d110      	bne.n	8004666 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800464a:	7b7b      	ldrb	r3, [r7, #13]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d001      	beq.n	8004654 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e069      	b.n	8004728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	e031      	b.n	80046ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d110      	bne.n	800468e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004672:	7b3b      	ldrb	r3, [r7, #12]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d001      	beq.n	800467c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e055      	b.n	8004728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468c:	e01d      	b.n	80046ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d108      	bne.n	80046a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	7b7b      	ldrb	r3, [r7, #13]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a0:	7b3b      	ldrb	r3, [r7, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e03e      	b.n	8004728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_TIM_Encoder_Start+0xc4>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d008      	beq.n	80046e8 <HAL_TIM_Encoder_Start+0xd4>
 80046d6:	e00f      	b.n	80046f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fd5b 	bl	800519c <TIM_CCxChannelCmd>
      break;
 80046e6:	e016      	b.n	8004716 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2201      	movs	r2, #1
 80046ee:	2104      	movs	r1, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fd53 	bl	800519c <TIM_CCxChannelCmd>
      break;
 80046f6:	e00e      	b.n	8004716 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fd4b 	bl	800519c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	2104      	movs	r1, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd44 	bl	800519c <TIM_CCxChannelCmd>
      break;
 8004714:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d122      	bne.n	800478c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d11b      	bne.n	800478c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0202 	mvn.w	r2, #2
 800475c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa76 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004778:	e005      	b.n	8004786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa69 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fa78 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0204 	mvn.w	r2, #4
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa4c 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa3f 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa4e 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0208 	mvn.w	r2, #8
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa22 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa15 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa24 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b10      	cmp	r3, #16
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0210 	mvn.w	r2, #16
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2208      	movs	r2, #8
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9f8 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9eb 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9fa 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0201 	mvn.w	r2, #1
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd fffe 	bl	80028b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d10e      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d107      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fce9 	bl	80052b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d10e      	bne.n	800490c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d107      	bne.n	800490c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9be 	bl	8004c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b20      	cmp	r3, #32
 8004918:	d10e      	bne.n	8004938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b20      	cmp	r3, #32
 8004926:	d107      	bne.n	8004938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0220 	mvn.w	r2, #32
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fcb4 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800495a:	2302      	movs	r3, #2
 800495c:	e0ae      	b.n	8004abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	f200 809f 	bhi.w	8004aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049a9 	.word	0x080049a9
 8004978:	08004aad 	.word	0x08004aad
 800497c:	08004aad 	.word	0x08004aad
 8004980:	08004aad 	.word	0x08004aad
 8004984:	080049e9 	.word	0x080049e9
 8004988:	08004aad 	.word	0x08004aad
 800498c:	08004aad 	.word	0x08004aad
 8004990:	08004aad 	.word	0x08004aad
 8004994:	08004a2b 	.word	0x08004a2b
 8004998:	08004aad 	.word	0x08004aad
 800499c:	08004aad 	.word	0x08004aad
 80049a0:	08004aad 	.word	0x08004aad
 80049a4:	08004a6b 	.word	0x08004a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f9d6 	bl	8004d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0208 	orr.w	r2, r2, #8
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	619a      	str	r2, [r3, #24]
      break;
 80049e6:	e064      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fa1c 	bl	8004e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]
      break;
 8004a28:	e043      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa65 	bl	8004f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0208 	orr.w	r2, r2, #8
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0204 	bic.w	r2, r2, #4
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	61da      	str	r2, [r3, #28]
      break;
 8004a68:	e023      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 faaf 	bl	8004fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	021a      	lsls	r2, r3, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	61da      	str	r2, [r3, #28]
      break;
 8004aaa:	e002      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0b4      	b.n	8004c4a <HAL_TIM_ConfigClockSource+0x186>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d03e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0xd4>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1e:	f200 8087 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	f000 8086 	beq.w	8004c36 <HAL_TIM_ConfigClockSource+0x172>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d87f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d01a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xa6>
 8004b34:	2b70      	cmp	r3, #112	; 0x70
 8004b36:	d87b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d050      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x11a>
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d877      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d03c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xfa>
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d873      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d058      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x13a>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d86f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d064      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	2b30      	cmp	r3, #48	; 0x30
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d867      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d05a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	e062      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b7a:	f000 faf0 	bl	800515e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e04f      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	f000 fad9 	bl	800515e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fa50 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 faa7 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa6e 	bl	80050cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	; 0x60
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa97 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fa30 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa87 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fa7e 	bl	800512a <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <TIM_Base_SetConfig+0xb8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <TIM_Base_SetConfig+0xbc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <TIM_Base_SetConfig+0xc0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d108      	bne.n	8004cde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <TIM_Base_SetConfig+0xb8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d007      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <TIM_Base_SetConfig+0xbc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <TIM_Base_SetConfig+0xc0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <TIM_Base_SetConfig+0xb8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800

08004d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 0201 	bic.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0302 	bic.w	r3, r3, #2
 8004da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a1c      	ldr	r2, [pc, #112]	; (8004e28 <TIM_OC1_SetConfig+0xc8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10c      	bne.n	8004dd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0308 	bic.w	r3, r3, #8
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <TIM_OC1_SetConfig+0xc8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00

08004e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f023 0210 	bic.w	r2, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0320 	bic.w	r3, r3, #32
 8004e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <TIM_OC2_SetConfig+0xd0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10d      	bne.n	8004ea8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_OC2_SetConfig+0xd0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d113      	bne.n	8004ed8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	40012c00 	.word	0x40012c00

08004f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <TIM_OC3_SetConfig+0xd0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <TIM_OC3_SetConfig+0xd0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40012c00 	.word	0x40012c00

08004fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800501e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <TIM_OC4_SetConfig+0x98>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d109      	bne.n	8005048 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	40012c00 	.word	0x40012c00

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0210 	bic.w	r2, r3, #16
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	031b      	lsls	r3, r3, #12
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	f043 0307 	orr.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	021a      	lsls	r2, r3, #8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	431a      	orrs	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2201      	movs	r2, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e046      	b.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a16      	ldr	r2, [pc, #88]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d009      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a10      	ldr	r2, [pc, #64]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10c      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052d6:	2b84      	cmp	r3, #132	; 0x84
 80052d8:	d005      	beq.n	80052e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	3303      	adds	r3, #3
 80052e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052f6:	f000 ff3b 	bl	8006170 <vTaskStartScheduler>
  
  return osOK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}

08005300 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af04      	add	r7, sp, #16
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <osThreadCreate+0x54>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01c      	beq.n	8005354 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685c      	ldr	r4, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691e      	ldr	r6, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ffc9 	bl	80052c4 <makeFreeRtosPriority>
 8005332:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800533c:	9202      	str	r2, [sp, #8]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	9100      	str	r1, [sp, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	4632      	mov	r2, r6
 8005346:	4629      	mov	r1, r5
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fd3b 	bl	8005dc4 <xTaskCreateStatic>
 800534e:	4603      	mov	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e01c      	b.n	800538e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685c      	ldr	r4, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005360:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ffab 	bl	80052c4 <makeFreeRtosPriority>
 800536e:	4602      	mov	r2, r0
 8005370:	f107 030c 	add.w	r3, r7, #12
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	9200      	str	r2, [sp, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4632      	mov	r2, r6
 800537c:	4629      	mov	r1, r5
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fd7c 	bl	8005e7c <xTaskCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800538e:	68fb      	ldr	r3, [r7, #12]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005398 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <osDelay+0x16>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	e000      	b.n	80053b0 <osDelay+0x18>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fea9 	bl	8006108 <vTaskDelay>
  
  return osOK;
 80053b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d011      	beq.n	80053f6 <osMessageCreate+0x36>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6859      	ldr	r1, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2400      	movs	r4, #0
 80053ec:	9400      	str	r4, [sp, #0]
 80053ee:	f000 f927 	bl	8005640 <xQueueGenericCreateStatic>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e008      	b.n	8005408 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	4619      	mov	r1, r3
 8005402:	f000 f994 	bl	800572e <xQueueGenericCreate>
 8005406:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bd90      	pop	{r4, r7, pc}

08005410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0208 	add.w	r2, r3, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f04f 32ff 	mov.w	r2, #4294967295
 8005428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f103 0208 	add.w	r2, r3, #8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f103 0208 	add.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d103      	bne.n	80054cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e00c      	b.n	80054e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3308      	adds	r3, #8
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e002      	b.n	80054da <vListInsert+0x2e>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d2f6      	bcs.n	80054d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6852      	ldr	r2, [r2, #4]
 800553c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d103      	bne.n	8005550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
	...

08005570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800559a:	f001 fc0f 	bl	8006dbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	441a      	add	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	3b01      	subs	r3, #1
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d114      	bne.n	800561a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3310      	adds	r3, #16
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f81f 	bl	8006640 <xTaskRemoveFromEventList>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d012      	beq.n	800562e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <xQueueGenericReset+0xcc>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	e009      	b.n	800562e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3310      	adds	r3, #16
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fef6 	bl	8005410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fef1 	bl	8005410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800562e:	f001 fbf5 	bl	8006e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005632:	2301      	movs	r3, #1
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <xQueueGenericCreateStatic+0x52>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <xQueueGenericCreateStatic+0x56>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <xQueueGenericCreateStatic+0x58>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	623b      	str	r3, [r7, #32]
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <xQueueGenericCreateStatic+0x7e>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <xQueueGenericCreateStatic+0x82>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <xQueueGenericCreateStatic+0x84>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61fb      	str	r3, [r7, #28]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056de:	2348      	movs	r3, #72	; 0x48
 80056e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b48      	cmp	r3, #72	; 0x48
 80056e6:	d00a      	beq.n	80056fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61bb      	str	r3, [r7, #24]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00d      	beq.n	8005724 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005710:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f843 	bl	80057aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005726:	4618      	mov	r0, r3
 8005728:	3730      	adds	r7, #48	; 0x30
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	; 0x28
 8005732:	af02      	add	r7, sp, #8
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	613b      	str	r3, [r7, #16]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e004      	b.n	800576e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3348      	adds	r3, #72	; 0x48
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fbe4 	bl	8006f40 <pvPortMalloc>
 8005778:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	3348      	adds	r3, #72	; 0x48
 8005784:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800578e:	79fa      	ldrb	r2, [r7, #7]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f805 	bl	80057aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80057a0:	69bb      	ldr	r3, [r7, #24]
	}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e002      	b.n	80057cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057d8:	2101      	movs	r1, #1
 80057da:	69b8      	ldr	r0, [r7, #24]
 80057dc:	f7ff fec8 	bl	8005570 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08e      	sub	sp, #56	; 0x38
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericSend+0x32>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <xQueueGenericSend+0x40>
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueGenericSend+0x44>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueGenericSend+0x46>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xQueueGenericSend+0x60>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d103      	bne.n	8005856 <xQueueGenericSend+0x6e>
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <xQueueGenericSend+0x72>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSend+0x74>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericSend+0x8e>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005876:	f001 f8a7 	bl	80069c8 <xTaskGetSchedulerState>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <xQueueGenericSend+0x9e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <xQueueGenericSend+0xa2>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericSend+0xa4>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058a6:	f001 fa89 	bl	8006dbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <xQueueGenericSend+0xd4>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d129      	bne.n	8005910 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c2:	f000 f96f 	bl	8005ba4 <prvCopyDataToQueue>
 80058c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 feb3 	bl	8006640 <xTaskRemoveFromEventList>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058e0:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <xQueueGenericSend+0x1f8>)
 80058e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	e00a      	b.n	8005908 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058f8:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <xQueueGenericSend+0x1f8>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005908:	f001 fa88 	bl	8006e1c <vPortExitCritical>
				return pdPASS;
 800590c:	2301      	movs	r3, #1
 800590e:	e063      	b.n	80059d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005916:	f001 fa81 	bl	8006e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800591a:	2300      	movs	r3, #0
 800591c:	e05c      	b.n	80059d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	4618      	mov	r0, r3
 800592a:	f000 feeb 	bl	8006704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005932:	f001 fa73 	bl	8006e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005936:	f000 fc85 	bl	8006244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800593a:	f001 fa3f 	bl	8006dbc <vPortEnterCritical>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005944:	b25b      	sxtb	r3, r3
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d103      	bne.n	8005954 <xQueueGenericSend+0x16c>
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595a:	b25b      	sxtb	r3, r3
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d103      	bne.n	800596a <xQueueGenericSend+0x182>
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596a:	f001 fa57 	bl	8006e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800596e:	1d3a      	adds	r2, r7, #4
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f000 feda 	bl	8006730 <xTaskCheckForTimeOut>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d124      	bne.n	80059cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005984:	f000 fa06 	bl	8005d94 <prvIsQueueFull>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	3310      	adds	r3, #16
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fe2e 	bl	80065f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800599c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599e:	f000 f991 	bl	8005cc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059a2:	f000 fc5d 	bl	8006260 <xTaskResumeAll>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f af7c 	bne.w	80058a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <xQueueGenericSend+0x1f8>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	e772      	b.n	80058a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 f97f 	bl	8005cc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059c6:	f000 fc4b 	bl	8006260 <xTaskResumeAll>
 80059ca:	e76c      	b.n	80058a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ce:	f000 f979 	bl	8005cc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d2:	f000 fc45 	bl	8006260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059d6:	2300      	movs	r3, #0
		}
	}
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3738      	adds	r7, #56	; 0x38
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	; 0x30
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <xQueueReceive+0x30>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	623b      	str	r3, [r7, #32]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <xQueueReceive+0x3e>
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x42>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x44>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceive+0x5e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61fb      	str	r3, [r7, #28]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a42:	f000 ffc1 	bl	80069c8 <xTaskGetSchedulerState>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <xQueueReceive+0x6e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueReceive+0x72>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueReceive+0x74>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueReceive+0x8e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61bb      	str	r3, [r7, #24]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a72:	f001 f9a3 	bl	8006dbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01f      	beq.n	8005ac2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a86:	f000 f8f7 	bl	8005c78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00f      	beq.n	8005aba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fdce 	bl	8006640 <xTaskRemoveFromEventList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	; (8005ba0 <xQueueReceive+0x1bc>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aba:	f001 f9af 	bl	8006e1c <vPortExitCritical>
				return pdPASS;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e069      	b.n	8005b96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac8:	f001 f9a8 	bl	8006e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e062      	b.n	8005b96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad6:	f107 0310 	add.w	r3, r7, #16
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fe12 	bl	8006704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ae4:	f001 f99a 	bl	8006e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae8:	f000 fbac 	bl	8006244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aec:	f001 f966 	bl	8006dbc <vPortEnterCritical>
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d103      	bne.n	8005b06 <xQueueReceive+0x122>
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d103      	bne.n	8005b1c <xQueueReceive+0x138>
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b1c:	f001 f97e 	bl	8006e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b20:	1d3a      	adds	r2, r7, #4
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fe01 	bl	8006730 <xTaskCheckForTimeOut>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d123      	bne.n	8005b7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b36:	f000 f917 	bl	8005d68 <prvIsQueueEmpty>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fd55 	bl	80065f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b50:	f000 f8b8 	bl	8005cc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b54:	f000 fb84 	bl	8006260 <xTaskResumeAll>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d189      	bne.n	8005a72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xQueueReceive+0x1bc>)
 8005b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	e780      	b.n	8005a72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b72:	f000 f8a7 	bl	8005cc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b76:	f000 fb73 	bl	8006260 <xTaskResumeAll>
 8005b7a:	e77a      	b.n	8005a72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7e:	f000 f8a1 	bl	8005cc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b82:	f000 fb6d 	bl	8006260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b88:	f000 f8ee 	bl	8005d68 <prvIsQueueEmpty>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f43f af6f 	beq.w	8005a72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d14d      	bne.n	8005c66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff18 	bl	8006a04 <xTaskPriorityDisinherit>
 8005bd4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	e043      	b.n	8005c66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d119      	bne.n	8005c18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6898      	ldr	r0, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	f001 fc02 	bl	80073f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	441a      	add	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d32b      	bcc.n	8005c66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	e026      	b.n	8005c66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68d8      	ldr	r0, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	461a      	mov	r2, r3
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	f001 fbe8 	bl	80073f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	425b      	negs	r3, r3
 8005c32:	441a      	add	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d207      	bcs.n	8005c54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d105      	bne.n	8005c66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c6e:	697b      	ldr	r3, [r7, #20]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d018      	beq.n	8005cbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	441a      	add	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d303      	bcc.n	8005cac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68d9      	ldr	r1, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f001 fb9e 	bl	80073f8 <memcpy>
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ccc:	f001 f876 	bl	8006dbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd8:	e011      	b.n	8005cfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d012      	beq.n	8005d08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fcaa 	bl	8006640 <xTaskRemoveFromEventList>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cf2:	f000 fd7f 	bl	80067f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dce9      	bgt.n	8005cda <prvUnlockQueue+0x16>
 8005d06:	e000      	b.n	8005d0a <prvUnlockQueue+0x46>
					break;
 8005d08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d12:	f001 f883 	bl	8006e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d16:	f001 f851 	bl	8006dbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d22:	e011      	b.n	8005d48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc85 	bl	8006640 <xTaskRemoveFromEventList>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d3c:	f000 fd5a 	bl	80067f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dce9      	bgt.n	8005d24 <prvUnlockQueue+0x60>
 8005d50:	e000      	b.n	8005d54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	22ff      	movs	r2, #255	; 0xff
 8005d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d5c:	f001 f85e 	bl	8006e1c <vPortExitCritical>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d70:	f001 f824 	bl	8006dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 f849 	bl	8006e1c <vPortExitCritical>

	return xReturn;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9c:	f001 f80e 	bl	8006dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d102      	bne.n	8005db2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e001      	b.n	8005db6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 f831 	bl	8006e1c <vPortExitCritical>

	return xReturn;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af04      	add	r7, sp, #16
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	623b      	str	r3, [r7, #32]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xTaskCreateStatic+0x46>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	61fb      	str	r3, [r7, #28]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e0a:	23a0      	movs	r3, #160	; 0xa0
 8005e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2ba0      	cmp	r3, #160	; 0xa0
 8005e12:	d00a      	beq.n	8005e2a <xTaskCreateStatic+0x66>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	61bb      	str	r3, [r7, #24]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01e      	beq.n	8005e6e <xTaskCreateStatic+0xaa>
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	9302      	str	r3, [sp, #8]
 8005e50:	f107 0314 	add.w	r3, r7, #20
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f851 	bl	8005f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e68:	f000 f8e4 	bl	8006034 <prvAddNewTaskToReadyList>
 8005e6c:	e001      	b.n	8005e72 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e72:	697b      	ldr	r3, [r7, #20]
	}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	; 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08c      	sub	sp, #48	; 0x30
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 f855 	bl	8006f40 <pvPortMalloc>
 8005e96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e9e:	20a0      	movs	r0, #160	; 0xa0
 8005ea0:	f001 f84e 	bl	8006f40 <pvPortMalloc>
 8005ea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8005eb2:	e005      	b.n	8005ec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eb4:	6978      	ldr	r0, [r7, #20]
 8005eb6:	f001 f907 	bl	80070c8 <vPortFree>
 8005eba:	e001      	b.n	8005ec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d017      	beq.n	8005ef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f80f 	bl	8005f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eea:	69f8      	ldr	r0, [r7, #28]
 8005eec:	f000 f8a2 	bl	8006034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e002      	b.n	8005efc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005efc:	69bb      	ldr	r3, [r7, #24]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f20:	3b01      	subs	r3, #1
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e012      	b.n	8005f7c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	7819      	ldrb	r1, [r3, #0]
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	3334      	adds	r3, #52	; 0x34
 8005f66:	460a      	mov	r2, r1
 8005f68:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d006      	beq.n	8005f84 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b0f      	cmp	r3, #15
 8005f80:	d9e9      	bls.n	8005f56 <prvInitialiseNewTask+0x4e>
 8005f82:	e000      	b.n	8005f86 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005f84:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2b06      	cmp	r3, #6
 8005f92:	d901      	bls.n	8005f98 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f94:	2306      	movs	r3, #6
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fa4d 	bl	800544e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fa48 	bl	800544e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f1c3 0207 	rsb	r2, r3, #7
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	334c      	adds	r3, #76	; 0x4c
 8005fe8:	224c      	movs	r2, #76	; 0x4c
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f97f 	bl	80072f0 <memset>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <prvInitialiseNewTask+0x120>)
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	; (800602c <prvInitialiseNewTask+0x124>)
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <prvInitialiseNewTask+0x128>)
 8006002:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	69b8      	ldr	r0, [r7, #24]
 800600a:	f000 fde7 	bl	8006bdc <pxPortInitialiseStack>
 800600e:	4602      	mov	r2, r0
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006020:	bf00      	nop
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20001884 	.word	0x20001884
 800602c:	200018ec 	.word	0x200018ec
 8006030:	20001954 	.word	0x20001954

08006034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800603c:	f000 febe 	bl	8006dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006040:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <prvAddNewTaskToReadyList+0xb8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a29      	ldr	r2, [pc, #164]	; (80060ec <prvAddNewTaskToReadyList+0xb8>)
 8006048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <prvAddNewTaskToReadyList+0xbc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006052:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <prvAddNewTaskToReadyList+0xbc>)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006058:	4b24      	ldr	r3, [pc, #144]	; (80060ec <prvAddNewTaskToReadyList+0xb8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d110      	bne.n	8006082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006060:	f000 fbec 	bl	800683c <prvInitialiseTaskLists>
 8006064:	e00d      	b.n	8006082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006066:	4b23      	ldr	r3, [pc, #140]	; (80060f4 <prvAddNewTaskToReadyList+0xc0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <prvAddNewTaskToReadyList+0xbc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	429a      	cmp	r2, r3
 800607a:	d802      	bhi.n	8006082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <prvAddNewTaskToReadyList+0xbc>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006082:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <prvAddNewTaskToReadyList+0xc4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <prvAddNewTaskToReadyList+0xc4>)
 800608a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	2201      	movs	r2, #1
 8006092:	409a      	lsls	r2, r3
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <prvAddNewTaskToReadyList+0xc8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <prvAddNewTaskToReadyList+0xc8>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4a15      	ldr	r2, [pc, #84]	; (8006100 <prvAddNewTaskToReadyList+0xcc>)
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7ff f9d6 	bl	8005466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ba:	f000 feaf 	bl	8006e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <prvAddNewTaskToReadyList+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <prvAddNewTaskToReadyList+0xbc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d207      	bcs.n	80060e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <prvAddNewTaskToReadyList+0xd0>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000c38 	.word	0x20000c38
 80060f0:	20000b38 	.word	0x20000b38
 80060f4:	20000c44 	.word	0x20000c44
 80060f8:	20000c54 	.word	0x20000c54
 80060fc:	20000c40 	.word	0x20000c40
 8006100:	20000b3c 	.word	0x20000b3c
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d017      	beq.n	800614a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <vTaskDelay+0x60>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <vTaskDelay+0x30>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006138:	f000 f884 	bl	8006244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800613c:	2100      	movs	r1, #0
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fce6 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006144:	f000 f88c 	bl	8006260 <xTaskResumeAll>
 8006148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <vTaskDelay+0x64>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000c60 	.word	0x20000c60
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617e:	463a      	mov	r2, r7
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7fb fff8 	bl	800217c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	460a      	mov	r2, r1
 800619e:	4921      	ldr	r1, [pc, #132]	; (8006224 <vTaskStartScheduler+0xb4>)
 80061a0:	4821      	ldr	r0, [pc, #132]	; (8006228 <vTaskStartScheduler+0xb8>)
 80061a2:	f7ff fe0f 	bl	8005dc4 <xTaskCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4a20      	ldr	r2, [pc, #128]	; (800622c <vTaskStartScheduler+0xbc>)
 80061aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ac:	4b1f      	ldr	r3, [pc, #124]	; (800622c <vTaskStartScheduler+0xbc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e001      	b.n	80061be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d11b      	bne.n	80061fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	613b      	str	r3, [r7, #16]
}
 80061d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d8:	4b15      	ldr	r3, [pc, #84]	; (8006230 <vTaskStartScheduler+0xc0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	334c      	adds	r3, #76	; 0x4c
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <vTaskStartScheduler+0xc4>)
 80061e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <vTaskStartScheduler+0xc8>)
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <vTaskStartScheduler+0xcc>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061f0:	4b13      	ldr	r3, [pc, #76]	; (8006240 <vTaskStartScheduler+0xd0>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061f6:	f000 fd6f 	bl	8006cd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061fa:	e00e      	b.n	800621a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d10a      	bne.n	800621a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <vTaskStartScheduler+0xa8>
}
 800621a:	bf00      	nop
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	0800758c 	.word	0x0800758c
 8006228:	0800680d 	.word	0x0800680d
 800622c:	20000c5c 	.word	0x20000c5c
 8006230:	20000b38 	.word	0x20000b38
 8006234:	20000060 	.word	0x20000060
 8006238:	20000c58 	.word	0x20000c58
 800623c:	20000c44 	.word	0x20000c44
 8006240:	20000c3c 	.word	0x20000c3c

08006244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <vTaskSuspendAll+0x18>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a03      	ldr	r2, [pc, #12]	; (800625c <vTaskSuspendAll+0x18>)
 8006250:	6013      	str	r3, [r2, #0]
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000c60 	.word	0x20000c60

08006260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <xTaskResumeAll+0x114>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <xTaskResumeAll+0x2c>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	603b      	str	r3, [r7, #0]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800628c:	f000 fd96 	bl	8006dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006290:	4b38      	ldr	r3, [pc, #224]	; (8006374 <xTaskResumeAll+0x114>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3b01      	subs	r3, #1
 8006296:	4a37      	ldr	r2, [pc, #220]	; (8006374 <xTaskResumeAll+0x114>)
 8006298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <xTaskResumeAll+0x114>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d161      	bne.n	8006366 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062a2:	4b35      	ldr	r3, [pc, #212]	; (8006378 <xTaskResumeAll+0x118>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d05d      	beq.n	8006366 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062aa:	e02e      	b.n	800630a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062ac:	4b33      	ldr	r3, [pc, #204]	; (800637c <xTaskResumeAll+0x11c>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3318      	adds	r3, #24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff f92f 	bl	800551c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff f92a 	bl	800551c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <xTaskResumeAll+0x120>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	4a2a      	ldr	r2, [pc, #168]	; (8006380 <xTaskResumeAll+0x120>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a27      	ldr	r2, [pc, #156]	; (8006384 <xTaskResumeAll+0x124>)
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7ff f8b8 	bl	8005466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4b23      	ldr	r3, [pc, #140]	; (8006388 <xTaskResumeAll+0x128>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006304:	4b21      	ldr	r3, [pc, #132]	; (800638c <xTaskResumeAll+0x12c>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630a:	4b1c      	ldr	r3, [pc, #112]	; (800637c <xTaskResumeAll+0x11c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1cc      	bne.n	80062ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006318:	f000 fb32 	bl	8006980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800631c:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <xTaskResumeAll+0x130>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006328:	f000 f836 	bl	8006398 <xTaskIncrementTick>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006332:	4b16      	ldr	r3, [pc, #88]	; (800638c <xTaskResumeAll+0x12c>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f1      	bne.n	8006328 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <xTaskResumeAll+0x130>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <xTaskResumeAll+0x12c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <xTaskResumeAll+0x134>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006366:	f000 fd59 	bl	8006e1c <vPortExitCritical>

	return xAlreadyYielded;
 800636a:	68bb      	ldr	r3, [r7, #8]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000c60 	.word	0x20000c60
 8006378:	20000c38 	.word	0x20000c38
 800637c:	20000bf8 	.word	0x20000bf8
 8006380:	20000c40 	.word	0x20000c40
 8006384:	20000b3c 	.word	0x20000b3c
 8006388:	20000b38 	.word	0x20000b38
 800638c:	20000c4c 	.word	0x20000c4c
 8006390:	20000c48 	.word	0x20000c48
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <xTaskIncrementTick+0x150>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 808d 	bne.w	80064c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063ac:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <xTaskIncrementTick+0x154>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b4:	4a4d      	ldr	r2, [pc, #308]	; (80064ec <xTaskIncrementTick+0x154>)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d120      	bne.n	8006402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c0:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <xTaskIncrementTick+0x158>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskIncrementTick+0x46>
 80063e0:	4b43      	ldr	r3, [pc, #268]	; (80064f0 <xTaskIncrementTick+0x158>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <xTaskIncrementTick+0x15c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a41      	ldr	r2, [pc, #260]	; (80064f0 <xTaskIncrementTick+0x158>)
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	4a41      	ldr	r2, [pc, #260]	; (80064f4 <xTaskIncrementTick+0x15c>)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b40      	ldr	r3, [pc, #256]	; (80064f8 <xTaskIncrementTick+0x160>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <xTaskIncrementTick+0x160>)
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	f000 fabf 	bl	8006980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006402:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <xTaskIncrementTick+0x164>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d34d      	bcc.n	80064a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640c:	4b38      	ldr	r3, [pc, #224]	; (80064f0 <xTaskIncrementTick+0x158>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <xTaskIncrementTick+0x82>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xTaskIncrementTick+0x84>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <xTaskIncrementTick+0x164>)
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	601a      	str	r2, [r3, #0]
					break;
 8006428:	e03e      	b.n	80064a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800642a:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <xTaskIncrementTick+0x158>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d203      	bcs.n	800644a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <xTaskIncrementTick+0x164>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6013      	str	r3, [r2, #0]
						break;
 8006448:	e02e      	b.n	80064a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3304      	adds	r3, #4
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff f864 	bl	800551c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3318      	adds	r3, #24
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff f85b 	bl	800551c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	2201      	movs	r2, #1
 800646c:	409a      	lsls	r2, r3
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <xTaskIncrementTick+0x168>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4313      	orrs	r3, r2
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <xTaskIncrementTick+0x168>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <xTaskIncrementTick+0x16c>)
 8006486:	441a      	add	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7fe ffe9 	bl	8005466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <xTaskIncrementTick+0x170>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3b4      	bcc.n	800640c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a6:	e7b1      	b.n	800640c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <xTaskIncrementTick+0x170>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4915      	ldr	r1, [pc, #84]	; (8006504 <xTaskIncrementTick+0x16c>)
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d907      	bls.n	80064d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e004      	b.n	80064d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <xTaskIncrementTick+0x174>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a0f      	ldr	r2, [pc, #60]	; (800650c <xTaskIncrementTick+0x174>)
 80064ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <xTaskIncrementTick+0x178>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064dc:	697b      	ldr	r3, [r7, #20]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000c60 	.word	0x20000c60
 80064ec:	20000c3c 	.word	0x20000c3c
 80064f0:	20000bf0 	.word	0x20000bf0
 80064f4:	20000bf4 	.word	0x20000bf4
 80064f8:	20000c50 	.word	0x20000c50
 80064fc:	20000c58 	.word	0x20000c58
 8006500:	20000c40 	.word	0x20000c40
 8006504:	20000b3c 	.word	0x20000b3c
 8006508:	20000b38 	.word	0x20000b38
 800650c:	20000c48 	.word	0x20000c48
 8006510:	20000c4c 	.word	0x20000c4c

08006514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <vTaskSwitchContext+0xcc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <vTaskSwitchContext+0xd0>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006528:	e055      	b.n	80065d6 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800652a:	4b2e      	ldr	r3, [pc, #184]	; (80065e4 <vTaskSwitchContext+0xd0>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <vTaskSwitchContext+0xd4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <vTaskSwitchContext+0xd4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	429a      	cmp	r2, r3
 800653e:	d808      	bhi.n	8006552 <vTaskSwitchContext+0x3e>
 8006540:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <vTaskSwitchContext+0xd4>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <vTaskSwitchContext+0xd4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3334      	adds	r3, #52	; 0x34
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fb fe0b 	bl	8002168 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006552:	4b26      	ldr	r3, [pc, #152]	; (80065ec <vTaskSwitchContext+0xd8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	fab3 f383 	clz	r3, r3
 800655e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	f1c3 031f 	rsb	r3, r3, #31
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	4921      	ldr	r1, [pc, #132]	; (80065f0 <vTaskSwitchContext+0xdc>)
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <vTaskSwitchContext+0x7e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	607b      	str	r3, [r7, #4]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <vTaskSwitchContext+0x7c>
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <vTaskSwitchContext+0xdc>)
 800659e:	4413      	add	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	3308      	adds	r3, #8
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d104      	bne.n	80065c2 <vTaskSwitchContext+0xae>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4a07      	ldr	r2, [pc, #28]	; (80065e8 <vTaskSwitchContext+0xd4>)
 80065ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <vTaskSwitchContext+0xd4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	334c      	adds	r3, #76	; 0x4c
 80065d2:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <vTaskSwitchContext+0xe0>)
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000c60 	.word	0x20000c60
 80065e4:	20000c4c 	.word	0x20000c4c
 80065e8:	20000b38 	.word	0x20000b38
 80065ec:	20000c40 	.word	0x20000c40
 80065f0:	20000b3c 	.word	0x20000b3c
 80065f4:	20000060 	.word	0x20000060

080065f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <vTaskPlaceOnEventList+0x44>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3318      	adds	r3, #24
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fe ff40 	bl	80054ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800662c:	2101      	movs	r1, #1
 800662e:	6838      	ldr	r0, [r7, #0]
 8006630:	f000 fa6e 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000b38 	.word	0x20000b38

08006640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60fb      	str	r3, [r7, #12]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3318      	adds	r3, #24
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe ff53 	bl	800551c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <xTaskRemoveFromEventList+0xac>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11c      	bne.n	80066b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3304      	adds	r3, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe ff4a 	bl	800551c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	2201      	movs	r2, #1
 800668e:	409a      	lsls	r2, r3
 8006690:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <xTaskRemoveFromEventList+0xb0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <xTaskRemoveFromEventList+0xb0>)
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <xTaskRemoveFromEventList+0xb4>)
 80066a8:	441a      	add	r2, r3
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fe fed8 	bl	8005466 <vListInsertEnd>
 80066b6:	e005      	b.n	80066c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4619      	mov	r1, r3
 80066be:	480e      	ldr	r0, [pc, #56]	; (80066f8 <xTaskRemoveFromEventList+0xb8>)
 80066c0:	f7fe fed1 	bl	8005466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <xTaskRemoveFromEventList+0xbc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d905      	bls.n	80066de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <xTaskRemoveFromEventList+0xc0>)
 80066d8:	2201      	movs	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e001      	b.n	80066e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066e2:	697b      	ldr	r3, [r7, #20]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000c60 	.word	0x20000c60
 80066f0:	20000c40 	.word	0x20000c40
 80066f4:	20000b3c 	.word	0x20000b3c
 80066f8:	20000bf8 	.word	0x20000bf8
 80066fc:	20000b38 	.word	0x20000b38
 8006700:	20000c4c 	.word	0x20000c4c

08006704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <vTaskInternalSetTimeOutState+0x24>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <vTaskInternalSetTimeOutState+0x28>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000c50 	.word	0x20000c50
 800672c:	20000c3c 	.word	0x20000c3c

08006730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	613b      	str	r3, [r7, #16]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	60fb      	str	r3, [r7, #12]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006772:	f000 fb23 	bl	8006dbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <xTaskCheckForTimeOut+0xbc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d102      	bne.n	8006796 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e023      	b.n	80067de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <xTaskCheckForTimeOut+0xc0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d007      	beq.n	80067b2 <xTaskCheckForTimeOut+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067ac:	2301      	movs	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e015      	b.n	80067de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d20b      	bcs.n	80067d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff9b 	bl	8006704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e004      	b.n	80067de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067da:	2301      	movs	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067de:	f000 fb1d 	bl	8006e1c <vPortExitCritical>

	return xReturn;
 80067e2:	69fb      	ldr	r3, [r7, #28]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000c3c 	.word	0x20000c3c
 80067f0:	20000c50 	.word	0x20000c50

080067f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <vTaskMissedYield+0x14>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000c4c 	.word	0x20000c4c

0800680c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006814:	f000 f852 	bl	80068bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <prvIdleTask+0x28>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d9f9      	bls.n	8006814 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <prvIdleTask+0x2c>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006830:	e7f0      	b.n	8006814 <prvIdleTask+0x8>
 8006832:	bf00      	nop
 8006834:	20000b3c 	.word	0x20000b3c
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	e00c      	b.n	8006862 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <prvInitialiseTaskLists+0x60>)
 8006854:	4413      	add	r3, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fdda 	bl	8005410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3301      	adds	r3, #1
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d9ef      	bls.n	8006848 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006868:	480d      	ldr	r0, [pc, #52]	; (80068a0 <prvInitialiseTaskLists+0x64>)
 800686a:	f7fe fdd1 	bl	8005410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800686e:	480d      	ldr	r0, [pc, #52]	; (80068a4 <prvInitialiseTaskLists+0x68>)
 8006870:	f7fe fdce 	bl	8005410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006874:	480c      	ldr	r0, [pc, #48]	; (80068a8 <prvInitialiseTaskLists+0x6c>)
 8006876:	f7fe fdcb 	bl	8005410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800687a:	480c      	ldr	r0, [pc, #48]	; (80068ac <prvInitialiseTaskLists+0x70>)
 800687c:	f7fe fdc8 	bl	8005410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006880:	480b      	ldr	r0, [pc, #44]	; (80068b0 <prvInitialiseTaskLists+0x74>)
 8006882:	f7fe fdc5 	bl	8005410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <prvInitialiseTaskLists+0x78>)
 8006888:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <prvInitialiseTaskLists+0x64>)
 800688a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <prvInitialiseTaskLists+0x7c>)
 800688e:	4a05      	ldr	r2, [pc, #20]	; (80068a4 <prvInitialiseTaskLists+0x68>)
 8006890:	601a      	str	r2, [r3, #0]
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000b3c 	.word	0x20000b3c
 80068a0:	20000bc8 	.word	0x20000bc8
 80068a4:	20000bdc 	.word	0x20000bdc
 80068a8:	20000bf8 	.word	0x20000bf8
 80068ac:	20000c0c 	.word	0x20000c0c
 80068b0:	20000c24 	.word	0x20000c24
 80068b4:	20000bf0 	.word	0x20000bf0
 80068b8:	20000bf4 	.word	0x20000bf4

080068bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c2:	e019      	b.n	80068f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068c4:	f000 fa7a 	bl	8006dbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068c8:	4b10      	ldr	r3, [pc, #64]	; (800690c <prvCheckTasksWaitingTermination+0x50>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fe21 	bl	800551c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <prvCheckTasksWaitingTermination+0x54>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3b01      	subs	r3, #1
 80068e0:	4a0b      	ldr	r2, [pc, #44]	; (8006910 <prvCheckTasksWaitingTermination+0x54>)
 80068e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <prvCheckTasksWaitingTermination+0x58>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <prvCheckTasksWaitingTermination+0x58>)
 80068ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ee:	f000 fa95 	bl	8006e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f810 	bl	8006918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <prvCheckTasksWaitingTermination+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e1      	bne.n	80068c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000c0c 	.word	0x20000c0c
 8006910:	20000c38 	.word	0x20000c38
 8006914:	20000c20 	.word	0x20000c20

08006918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	334c      	adds	r3, #76	; 0x4c
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fceb 	bl	8007300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fbc5 	bl	80070c8 <vPortFree>
				vPortFree( pxTCB );
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fbc2 	bl	80070c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006944:	e018      	b.n	8006978 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800694c:	2b01      	cmp	r3, #1
 800694e:	d103      	bne.n	8006958 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fbb9 	bl	80070c8 <vPortFree>
	}
 8006956:	e00f      	b.n	8006978 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800695e:	2b02      	cmp	r3, #2
 8006960:	d00a      	beq.n	8006978 <prvDeleteTCB+0x60>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	60fb      	str	r3, [r7, #12]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <prvDeleteTCB+0x5e>
	}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006986:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <prvResetNextTaskUnblockTime+0x40>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <prvResetNextTaskUnblockTime+0x14>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <prvResetNextTaskUnblockTime+0x16>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvResetNextTaskUnblockTime+0x44>)
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069a2:	e008      	b.n	80069b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <prvResetNextTaskUnblockTime+0x40>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <prvResetNextTaskUnblockTime+0x44>)
 80069b4:	6013      	str	r3, [r2, #0]
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	20000bf0 	.word	0x20000bf0
 80069c4:	20000c58 	.word	0x20000c58

080069c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <xTaskGetSchedulerState+0x34>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069d6:	2301      	movs	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	e008      	b.n	80069ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069dc:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <xTaskGetSchedulerState+0x38>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069e4:	2302      	movs	r3, #2
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	e001      	b.n	80069ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069ee:	687b      	ldr	r3, [r7, #4]
	}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000c44 	.word	0x20000c44
 8006a00:	20000c60 	.word	0x20000c60

08006a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06e      	beq.n	8006af8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a1a:	4b3a      	ldr	r3, [pc, #232]	; (8006b04 <xTaskPriorityDisinherit+0x100>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d00a      	beq.n	8006a3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60fb      	str	r3, [r7, #12]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5c:	1e5a      	subs	r2, r3, #1
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d044      	beq.n	8006af8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d140      	bne.n	8006af8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fd4e 	bl	800551c <uxListRemove>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d115      	bne.n	8006ab2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	491f      	ldr	r1, [pc, #124]	; (8006b08 <xTaskPriorityDisinherit+0x104>)
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTaskPriorityDisinherit+0xae>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <xTaskPriorityDisinherit+0x108>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4013      	ands	r3, r2
 8006aae:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <xTaskPriorityDisinherit+0x108>)
 8006ab0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	f1c3 0207 	rsb	r2, r3, #7
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	2201      	movs	r2, #1
 8006acc:	409a      	lsls	r2, r3
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <xTaskPriorityDisinherit+0x108>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <xTaskPriorityDisinherit+0x108>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <xTaskPriorityDisinherit+0x104>)
 8006ae6:	441a      	add	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fcb9 	bl	8005466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af8:	697b      	ldr	r3, [r7, #20]
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000b38 	.word	0x20000b38
 8006b08:	20000b3c 	.word	0x20000b3c
 8006b0c:	20000c40 	.word	0x20000c40

08006b10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1a:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fcf8 	bl	800551c <uxListRemove>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	2201      	movs	r2, #1
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	43da      	mvns	r2, r3
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4013      	ands	r3, r2
 8006b46:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d10a      	bne.n	8006b68 <prvAddCurrentTaskToDelayedList+0x58>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	481a      	ldr	r0, [pc, #104]	; (8006bcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b62:	f7fe fc80 	bl	8005466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b66:	e026      	b.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b70:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d209      	bcs.n	8006b94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7fe fc8d 	bl	80054ac <vListInsert>
}
 8006b92:	e010      	b.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fe fc83 	bl	80054ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d202      	bcs.n	8006bb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bb0:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6013      	str	r3, [r2, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000c3c 	.word	0x20000c3c
 8006bc4:	20000b38 	.word	0x20000b38
 8006bc8:	20000c40 	.word	0x20000c40
 8006bcc:	20000c24 	.word	0x20000c24
 8006bd0:	20000bf4 	.word	0x20000bf4
 8006bd4:	20000bf0 	.word	0x20000bf0
 8006bd8:	20000c58 	.word	0x20000c58

08006bdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0201 	bic.w	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b04      	subs	r3, #4
 8006c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c0c:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <pxPortInitialiseStack+0x54>)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3b14      	subs	r3, #20
 8006c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b20      	subs	r3, #32
 8006c22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr
 8006c30:	08006c35 	.word	0x08006c35

08006c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <prvTaskExitError+0x54>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d00a      	beq.n	8006c5e <prvTaskExitError+0x2a>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60fb      	str	r3, [r7, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <prvTaskExitError+0x28>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60bb      	str	r3, [r7, #8]
}
 8006c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c72:	bf00      	nop
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0fc      	beq.n	8006c74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000010 	.word	0x20000010
 8006c8c:	00000000 	.word	0x00000000

08006c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <pxCurrentTCBConst2>)
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c9a:	f380 8809 	msr	PSP, r0
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cae:	4770      	bx	lr

08006cb0 <pxCurrentTCBConst2>:
 8006cb0:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006cb8:	4806      	ldr	r0, [pc, #24]	; (8006cd4 <prvPortStartFirstTask+0x1c>)
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f380 8808 	msr	MSP, r0
 8006cc2:	b662      	cpsie	i
 8006cc4:	b661      	cpsie	f
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	df00      	svc	0
 8006cd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed08 	.word	0xe000ed08

08006cd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cde:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <xPortStartScheduler+0xd0>)
 8006ce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	22ff      	movs	r2, #255	; 0xff
 8006cee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <xPortStartScheduler+0xd4>)
 8006d04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d08:	2207      	movs	r2, #7
 8006d0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d0c:	e009      	b.n	8006d22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d0e:	4b28      	ldr	r3, [pc, #160]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d0ef      	beq.n	8006d0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d2e:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1c3 0307 	rsb	r3, r3, #7
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d00a      	beq.n	8006d50 <xPortStartScheduler+0x78>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d50:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d62:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <xPortStartScheduler+0xd8>)
 8006d64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d6e:	4b11      	ldr	r3, [pc, #68]	; (8006db4 <xPortStartScheduler+0xdc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <xPortStartScheduler+0xdc>)
 8006d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d7a:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <xPortStartScheduler+0xdc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <xPortStartScheduler+0xdc>)
 8006d80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d86:	f000 f8b9 	bl	8006efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <xPortStartScheduler+0xe0>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d90:	f7ff ff92 	bl	8006cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d94:	f7ff fbbe 	bl	8006514 <vTaskSwitchContext>
	prvTaskExitError();
 8006d98:	f7ff ff4c 	bl	8006c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	e000e400 	.word	0xe000e400
 8006dac:	20000c64 	.word	0x20000c64
 8006db0:	20000c68 	.word	0x20000c68
 8006db4:	e000ed20 	.word	0xe000ed20
 8006db8:	20000010 	.word	0x20000010

08006dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	607b      	str	r3, [r7, #4]
}
 8006dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <vPortEnterCritical+0x58>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <vPortEnterCritical+0x58>)
 8006dde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <vPortEnterCritical+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d10f      	bne.n	8006e08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <vPortEnterCritical+0x5c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <vPortEnterCritical+0x4c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	603b      	str	r3, [r7, #0]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <vPortEnterCritical+0x4a>
	}
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000010 	.word	0x20000010
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <vPortExitCritical+0x4c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <vPortExitCritical+0x24>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	607b      	str	r3, [r7, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <vPortExitCritical+0x4c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <vPortExitCritical+0x4c>)
 8006e48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <vPortExitCritical+0x4c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d105      	bne.n	8006e5e <vPortExitCritical+0x42>
 8006e52:	2300      	movs	r3, #0
 8006e54:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr
 8006e68:	20000010 	.word	0x20000010
 8006e6c:	00000000 	.word	0x00000000

08006e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e70:	f3ef 8009 	mrs	r0, PSP
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <pxCurrentTCBConst>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e80:	6010      	str	r0, [r2, #0]
 8006e82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e8a:	f380 8811 	msr	BASEPRI, r0
 8006e8e:	f7ff fb41 	bl	8006514 <vTaskSwitchContext>
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f380 8811 	msr	BASEPRI, r0
 8006e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	6808      	ldr	r0, [r1, #0]
 8006ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ea6:	f380 8809 	msr	PSP, r0
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	4770      	bx	lr

08006eb0 <pxCurrentTCBConst>:
 8006eb0:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
}
 8006ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ed2:	f7ff fa61 	bl	8006398 <xTaskIncrementTick>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <SysTick_Handler+0x40>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f383 8811 	msr	BASEPRI, r3
}
 8006eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <vPortSetupTimerInterrupt+0x30>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <vPortSetupTimerInterrupt+0x34>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <vPortSetupTimerInterrupt+0x38>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <vPortSetupTimerInterrupt+0x3c>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <vPortSetupTimerInterrupt+0x40>)
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f1e:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <vPortSetupTimerInterrupt+0x30>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr
 8006f2c:	e000e010 	.word	0xe000e010
 8006f30:	e000e018 	.word	0xe000e018
 8006f34:	20000004 	.word	0x20000004
 8006f38:	10624dd3 	.word	0x10624dd3
 8006f3c:	e000e014 	.word	0xe000e014

08006f40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f4c:	f7ff f97a 	bl	8006244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f50:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <pvPortMalloc+0x174>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f58:	f000 f910 	bl	800717c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f5c:	4b56      	ldr	r3, [pc, #344]	; (80070b8 <pvPortMalloc+0x178>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 808e 	bne.w	8007086 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01d      	beq.n	8006fac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f70:	2208      	movs	r2, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d014      	beq.n	8006fac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	3308      	adds	r3, #8
 8006f8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <pvPortMalloc+0x6c>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	617b      	str	r3, [r7, #20]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d069      	beq.n	8007086 <pvPortMalloc+0x146>
 8006fb2:	4b42      	ldr	r3, [pc, #264]	; (80070bc <pvPortMalloc+0x17c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d864      	bhi.n	8007086 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fbc:	4b40      	ldr	r3, [pc, #256]	; (80070c0 <pvPortMalloc+0x180>)
 8006fbe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fc0:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <pvPortMalloc+0x180>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fc6:	e004      	b.n	8006fd2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d903      	bls.n	8006fe4 <pvPortMalloc+0xa4>
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f1      	bne.n	8006fc8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fe4:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <pvPortMalloc+0x174>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d04b      	beq.n	8007086 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	2308      	movs	r3, #8
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	429a      	cmp	r2, r3
 800700e:	d91f      	bls.n	8007050 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4413      	add	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <pvPortMalloc+0xf8>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	613b      	str	r3, [r7, #16]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800704a:	69b8      	ldr	r0, [r7, #24]
 800704c:	f000 f8f8 	bl	8007240 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007050:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <pvPortMalloc+0x17c>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <pvPortMalloc+0x17c>)
 800705c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800705e:	4b17      	ldr	r3, [pc, #92]	; (80070bc <pvPortMalloc+0x17c>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <pvPortMalloc+0x184>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d203      	bcs.n	8007072 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800706a:	4b14      	ldr	r3, [pc, #80]	; (80070bc <pvPortMalloc+0x17c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <pvPortMalloc+0x184>)
 8007070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <pvPortMalloc+0x178>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	431a      	orrs	r2, r3
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007086:	f7ff f8eb 	bl	8006260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <pvPortMalloc+0x16a>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <pvPortMalloc+0x168>
	return pvReturn;
 80070aa:	69fb      	ldr	r3, [r7, #28]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20001874 	.word	0x20001874
 80070b8:	20001880 	.word	0x20001880
 80070bc:	20001878 	.word	0x20001878
 80070c0:	2000186c 	.word	0x2000186c
 80070c4:	2000187c 	.word	0x2000187c

080070c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d048      	beq.n	800716c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070da:	2308      	movs	r3, #8
 80070dc:	425b      	negs	r3, r3
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4b21      	ldr	r3, [pc, #132]	; (8007174 <vPortFree+0xac>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <vPortFree+0x44>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <vPortFree+0x62>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60bb      	str	r3, [r7, #8]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <vPortFree+0xac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d019      	beq.n	800716c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d115      	bne.n	800716c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <vPortFree+0xac>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007150:	f7ff f878 	bl	8006244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b07      	ldr	r3, [pc, #28]	; (8007178 <vPortFree+0xb0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4413      	add	r3, r2
 800715e:	4a06      	ldr	r2, [pc, #24]	; (8007178 <vPortFree+0xb0>)
 8007160:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007162:	6938      	ldr	r0, [r7, #16]
 8007164:	f000 f86c 	bl	8007240 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007168:	f7ff f87a 	bl	8006260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800716c:	bf00      	nop
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20001880 	.word	0x20001880
 8007178:	20001878 	.word	0x20001878

0800717c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007182:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007186:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <prvHeapInit+0xac>)
 800718a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3307      	adds	r3, #7
 800719a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0307 	bic.w	r3, r3, #7
 80071a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <prvHeapInit+0xac>)
 80071ac:	4413      	add	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <prvHeapInit+0xb0>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071ba:	4b1c      	ldr	r3, [pc, #112]	; (800722c <prvHeapInit+0xb0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071c8:	2208      	movs	r2, #8
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0307 	bic.w	r3, r3, #7
 80071d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <prvHeapInit+0xb4>)
 80071dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <prvHeapInit+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2200      	movs	r2, #0
 80071e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <prvHeapInit+0xb4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	1ad2      	subs	r2, r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071fc:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <prvHeapInit+0xb4>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <prvHeapInit+0xb8>)
 800720a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	4a09      	ldr	r2, [pc, #36]	; (8007238 <prvHeapInit+0xbc>)
 8007212:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <prvHeapInit+0xc0>)
 8007216:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800721a:	601a      	str	r2, [r3, #0]
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000c6c 	.word	0x20000c6c
 800722c:	2000186c 	.word	0x2000186c
 8007230:	20001874 	.word	0x20001874
 8007234:	2000187c 	.word	0x2000187c
 8007238:	20001878 	.word	0x20001878
 800723c:	20001880 	.word	0x20001880

08007240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <prvInsertBlockIntoFreeList+0xa8>)
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e002      	b.n	8007254 <prvInsertBlockIntoFreeList+0x14>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d8f7      	bhi.n	800724e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d108      	bne.n	8007282 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	441a      	add	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	441a      	add	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d118      	bne.n	80072c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <prvInsertBlockIntoFreeList+0xac>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d00d      	beq.n	80072be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	441a      	add	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e008      	b.n	80072d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <prvInsertBlockIntoFreeList+0xac>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e003      	b.n	80072d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d002      	beq.n	80072de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	2000186c 	.word	0x2000186c
 80072ec:	20001874 	.word	0x20001874

080072f0 <memset>:
 80072f0:	4603      	mov	r3, r0
 80072f2:	4402      	add	r2, r0
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	f803 1b01 	strb.w	r1, [r3], #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <_reclaim_reent>:
 8007300:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <_reclaim_reent+0xa8>)
 8007302:	b570      	push	{r4, r5, r6, lr}
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4604      	mov	r4, r0
 8007308:	4283      	cmp	r3, r0
 800730a:	d04b      	beq.n	80073a4 <_reclaim_reent+0xa4>
 800730c:	69c3      	ldr	r3, [r0, #28]
 800730e:	b143      	cbz	r3, 8007322 <_reclaim_reent+0x22>
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d144      	bne.n	80073a0 <_reclaim_reent+0xa0>
 8007316:	69e3      	ldr	r3, [r4, #28]
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	b111      	cbz	r1, 8007322 <_reclaim_reent+0x22>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f879 	bl	8007414 <_free_r>
 8007322:	6961      	ldr	r1, [r4, #20]
 8007324:	b111      	cbz	r1, 800732c <_reclaim_reent+0x2c>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f874 	bl	8007414 <_free_r>
 800732c:	69e1      	ldr	r1, [r4, #28]
 800732e:	b111      	cbz	r1, 8007336 <_reclaim_reent+0x36>
 8007330:	4620      	mov	r0, r4
 8007332:	f000 f86f 	bl	8007414 <_free_r>
 8007336:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007338:	b111      	cbz	r1, 8007340 <_reclaim_reent+0x40>
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f86a 	bl	8007414 <_free_r>
 8007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007342:	b111      	cbz	r1, 800734a <_reclaim_reent+0x4a>
 8007344:	4620      	mov	r0, r4
 8007346:	f000 f865 	bl	8007414 <_free_r>
 800734a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800734c:	b111      	cbz	r1, 8007354 <_reclaim_reent+0x54>
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f860 	bl	8007414 <_free_r>
 8007354:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007356:	b111      	cbz	r1, 800735e <_reclaim_reent+0x5e>
 8007358:	4620      	mov	r0, r4
 800735a:	f000 f85b 	bl	8007414 <_free_r>
 800735e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007360:	b111      	cbz	r1, 8007368 <_reclaim_reent+0x68>
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f856 	bl	8007414 <_free_r>
 8007368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800736a:	b111      	cbz	r1, 8007372 <_reclaim_reent+0x72>
 800736c:	4620      	mov	r0, r4
 800736e:	f000 f851 	bl	8007414 <_free_r>
 8007372:	6a23      	ldr	r3, [r4, #32]
 8007374:	b1b3      	cbz	r3, 80073a4 <_reclaim_reent+0xa4>
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800737c:	4718      	bx	r3
 800737e:	5949      	ldr	r1, [r1, r5]
 8007380:	b941      	cbnz	r1, 8007394 <_reclaim_reent+0x94>
 8007382:	3504      	adds	r5, #4
 8007384:	69e3      	ldr	r3, [r4, #28]
 8007386:	2d80      	cmp	r5, #128	; 0x80
 8007388:	68d9      	ldr	r1, [r3, #12]
 800738a:	d1f8      	bne.n	800737e <_reclaim_reent+0x7e>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 f841 	bl	8007414 <_free_r>
 8007392:	e7c0      	b.n	8007316 <_reclaim_reent+0x16>
 8007394:	680e      	ldr	r6, [r1, #0]
 8007396:	4620      	mov	r0, r4
 8007398:	f000 f83c 	bl	8007414 <_free_r>
 800739c:	4631      	mov	r1, r6
 800739e:	e7ef      	b.n	8007380 <_reclaim_reent+0x80>
 80073a0:	2500      	movs	r5, #0
 80073a2:	e7ef      	b.n	8007384 <_reclaim_reent+0x84>
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	bf00      	nop
 80073a8:	20000060 	.word	0x20000060

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	2600      	movs	r6, #0
 80073b0:	4d0c      	ldr	r5, [pc, #48]	; (80073e4 <__libc_init_array+0x38>)
 80073b2:	4c0d      	ldr	r4, [pc, #52]	; (80073e8 <__libc_init_array+0x3c>)
 80073b4:	1b64      	subs	r4, r4, r5
 80073b6:	10a4      	asrs	r4, r4, #2
 80073b8:	42a6      	cmp	r6, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	f000 f87e 	bl	80074bc <_init>
 80073c0:	2600      	movs	r6, #0
 80073c2:	4d0a      	ldr	r5, [pc, #40]	; (80073ec <__libc_init_array+0x40>)
 80073c4:	4c0a      	ldr	r4, [pc, #40]	; (80073f0 <__libc_init_array+0x44>)
 80073c6:	1b64      	subs	r4, r4, r5
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d4:	4798      	blx	r3
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f855 3b04 	ldr.w	r3, [r5], #4
 80073de:	4798      	blx	r3
 80073e0:	3601      	adds	r6, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	080075c0 	.word	0x080075c0
 80073e8:	080075c0 	.word	0x080075c0
 80073ec:	080075c0 	.word	0x080075c0
 80073f0:	080075c4 	.word	0x080075c4

080073f4 <__retarget_lock_acquire_recursive>:
 80073f4:	4770      	bx	lr

080073f6 <__retarget_lock_release_recursive>:
 80073f6:	4770      	bx	lr

080073f8 <memcpy>:
 80073f8:	440a      	add	r2, r1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007400:	d100      	bne.n	8007404 <memcpy+0xc>
 8007402:	4770      	bx	lr
 8007404:	b510      	push	{r4, lr}
 8007406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740a:	4291      	cmp	r1, r2
 800740c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007410:	d1f9      	bne.n	8007406 <memcpy+0xe>
 8007412:	bd10      	pop	{r4, pc}

08007414 <_free_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4605      	mov	r5, r0
 8007418:	2900      	cmp	r1, #0
 800741a:	d040      	beq.n	800749e <_free_r+0x8a>
 800741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007420:	1f0c      	subs	r4, r1, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfb8      	it	lt
 8007426:	18e4      	addlt	r4, r4, r3
 8007428:	f000 f83c 	bl	80074a4 <__malloc_lock>
 800742c:	4a1c      	ldr	r2, [pc, #112]	; (80074a0 <_free_r+0x8c>)
 800742e:	6813      	ldr	r3, [r2, #0]
 8007430:	b933      	cbnz	r3, 8007440 <_free_r+0x2c>
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	6014      	str	r4, [r2, #0]
 8007436:	4628      	mov	r0, r5
 8007438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800743c:	f000 b838 	b.w	80074b0 <__malloc_unlock>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d908      	bls.n	8007456 <_free_r+0x42>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf01      	itttt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	1809      	addeq	r1, r1, r0
 8007452:	6021      	streq	r1, [r4, #0]
 8007454:	e7ed      	b.n	8007432 <_free_r+0x1e>
 8007456:	461a      	mov	r2, r3
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	b10b      	cbz	r3, 8007460 <_free_r+0x4c>
 800745c:	42a3      	cmp	r3, r4
 800745e:	d9fa      	bls.n	8007456 <_free_r+0x42>
 8007460:	6811      	ldr	r1, [r2, #0]
 8007462:	1850      	adds	r0, r2, r1
 8007464:	42a0      	cmp	r0, r4
 8007466:	d10b      	bne.n	8007480 <_free_r+0x6c>
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	4401      	add	r1, r0
 800746c:	1850      	adds	r0, r2, r1
 800746e:	4283      	cmp	r3, r0
 8007470:	6011      	str	r1, [r2, #0]
 8007472:	d1e0      	bne.n	8007436 <_free_r+0x22>
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4408      	add	r0, r1
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	6053      	str	r3, [r2, #4]
 800747e:	e7da      	b.n	8007436 <_free_r+0x22>
 8007480:	d902      	bls.n	8007488 <_free_r+0x74>
 8007482:	230c      	movs	r3, #12
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	e7d6      	b.n	8007436 <_free_r+0x22>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	1821      	adds	r1, r4, r0
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1809      	addeq	r1, r1, r0
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6054      	str	r4, [r2, #4]
 800749c:	e7cb      	b.n	8007436 <_free_r+0x22>
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200019c0 	.word	0x200019c0

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_lock+0x8>)
 80074a6:	f7ff bfa5 	b.w	80073f4 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	200019bc 	.word	0x200019bc

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f7ff bfa0 	b.w	80073f6 <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	200019bc 	.word	0x200019bc

080074bc <_init>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr

080074c8 <_fini>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr
