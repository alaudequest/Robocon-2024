
PID_BLDC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001fb4  08001fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd8  08001fd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd8  08001fd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd8  08001fd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fdc  08001fdc  00011fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001fec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001fec  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000078c3  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001543  00000000  00000000  0002793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  00028e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072b  00000000  00000000  000297c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165e4  00000000  00000000  00029ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099fc  00000000  00000000  000404d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084117  00000000  00000000  00049ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002644  00000000  00000000  000cdfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d0630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f9c 	.word	0x08001f9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f9c 	.word	0x08001f9c

0800014c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Count;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7)Count++;
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b80      	cmp	r3, #128	; 0x80
 800015a:	d104      	bne.n	8000166 <HAL_GPIO_EXTI_Callback+0x1a>
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <HAL_GPIO_EXTI_Callback+0x24>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	3301      	adds	r3, #1
 8000162:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_GPIO_EXTI_Callback+0x24>)
 8000164:	6013      	str	r3, [r2, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	20000070 	.word	0x20000070

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fa0c 	bl	8000594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f818 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f8d2 	bl	8000328 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000184:	f000 f85a 	bl	800023c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000188:	2104      	movs	r1, #4
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <main+0x30>)
 800018c:	f001 f9ac 	bl	80014e8 <HAL_TIM_PWM_Start>
  Target = 1300;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <main+0x34>)
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <main+0x38>)
 8000194:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  calSpeed();
//	  PID(realSpeed);
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <main+0x30>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800019e:	639a      	str	r2, [r3, #56]	; 0x38
 80001a0:	e7f9      	b.n	8000196 <main+0x22>
 80001a2:	bf00      	nop
 80001a4:	20000028 	.word	0x20000028
 80001a8:	20000074 	.word	0x20000074
 80001ac:	44a28000 	.word	0x44a28000

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fec0 	bl	8001f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e4:	2302      	movs	r3, #2
 80001e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fcef 	bl	8000bdc <HAL_RCC_OscConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000204:	f000 f8e4 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	230f      	movs	r3, #15
 800020a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020c:	2302      	movs	r3, #2
 800020e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2102      	movs	r1, #2
 8000222:	4618      	mov	r0, r3
 8000224:	f000 ff5c 	bl	80010e0 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022e:	f000 f8cf 	bl	80003d0 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08e      	sub	sp, #56	; 0x38
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000250:	f107 0320 	add.w	r3, r7, #32
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
 8000268:	615a      	str	r2, [r3, #20]
 800026a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <MX_TIM2_Init+0xe8>)
 800026e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000276:	2247      	movs	r2, #71	; 0x47
 8000278:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <MX_TIM2_Init+0xe8>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <MX_TIM2_Init+0xe8>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028e:	4b25      	ldr	r3, [pc, #148]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000294:	4823      	ldr	r0, [pc, #140]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000296:	f001 f87f 	bl	8001398 <HAL_TIM_Base_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002a0:	f000 f896 	bl	80003d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ae:	4619      	mov	r1, r3
 80002b0:	481c      	ldr	r0, [pc, #112]	; (8000324 <MX_TIM2_Init+0xe8>)
 80002b2:	f001 fa7d 	bl	80017b0 <HAL_TIM_ConfigClockSource>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80002bc:	f000 f888 	bl	80003d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002c0:	4818      	ldr	r0, [pc, #96]	; (8000324 <MX_TIM2_Init+0xe8>)
 80002c2:	f001 f8b8 	bl	8001436 <HAL_TIM_PWM_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80002cc:	f000 f880 	bl	80003d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d4:	2300      	movs	r3, #0
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d8:	f107 0320 	add.w	r3, r7, #32
 80002dc:	4619      	mov	r1, r3
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <MX_TIM2_Init+0xe8>)
 80002e0:	f001 fdd2 	bl	8001e88 <HAL_TIMEx_MasterConfigSynchronization>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80002ea:	f000 f871 	bl	80003d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002ee:	2360      	movs	r3, #96	; 0x60
 80002f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2204      	movs	r2, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000306:	f001 f991 	bl	800162c <HAL_TIM_PWM_ConfigChannel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000310:	f000 f85e 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <MX_TIM2_Init+0xe8>)
 8000316:	f000 f8af 	bl	8000478 <HAL_TIM_MspPostInit>

}
 800031a:	bf00      	nop
 800031c:	3738      	adds	r7, #56	; 0x38
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000028 	.word	0x20000028

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b21      	ldr	r3, [pc, #132]	; (80003c4 <MX_GPIO_Init+0x9c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a20      	ldr	r2, [pc, #128]	; (80003c4 <MX_GPIO_Init+0x9c>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_GPIO_Init+0x9c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_GPIO_Init+0x9c>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <MX_GPIO_Init+0x9c>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_GPIO_Init+0x9c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIr_GPIO_Port, DIr_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	4815      	ldr	r0, [pc, #84]	; (80003c8 <MX_GPIO_Init+0xa0>)
 8000372:	f000 fc03 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIr_Pin */
  GPIO_InitStruct.Pin = DIr_Pin;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIr_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <MX_GPIO_Init+0xa0>)
 800038e:	f000 fa71 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000392:	23c0      	movs	r3, #192	; 0xc0
 8000394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <MX_GPIO_Init+0xa4>)
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4619      	mov	r1, r3
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <MX_GPIO_Init+0xa0>)
 80003a6:	f000 fa65 	bl	8000874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	2017      	movs	r0, #23
 80003b0:	f000 fa29 	bl	8000806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003b4:	2017      	movs	r0, #23
 80003b6:	f000 fa42 	bl	800083e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	10110000 	.word	0x10110000

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>
	...

080003dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000450:	d10b      	bne.n	800046a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_TIM_Base_MspInit+0x34>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_TIM_Base_MspInit+0x34>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_TIM_Base_MspInit+0x34>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000496:	d117      	bne.n	80004c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <HAL_TIM_MspPostInit+0x58>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <HAL_TIM_MspPostInit+0x58>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_TIM_MspPostInit+0x58>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b0:	2302      	movs	r3, #2
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2302      	movs	r3, #2
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <HAL_TIM_MspPostInit+0x5c>)
 80004c4:	f000 f9d6 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f87f 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800052a:	2040      	movs	r0, #64	; 0x40
 800052c:	f000 fb3e 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000530:	2080      	movs	r0, #128	; 0x80
 8000532:	f000 fb3b 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}

0800053a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
	...

08000548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000548:	f7ff fff7 	bl	800053a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800054e:	490c      	ldr	r1, [pc, #48]	; (8000580 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000564:	4c09      	ldr	r4, [pc, #36]	; (800058c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000572:	f001 fcef 	bl	8001f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff fdfd 	bl	8000174 <main>
  bx lr
 800057a:	4770      	bx	lr
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000584:	08001fe0 	.word	0x08001fe0
  ldr r2, =_sbss
 8000588:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800058c:	2000007c 	.word	0x2000007c

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x28>)
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f923 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f808 	bl	80005c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f7ff ff14 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40022000 	.word	0x40022000

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x54>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x58>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f93b 	bl	800085a <HAL_SYSTICK_Config>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00e      	b.n	800060c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d80a      	bhi.n	800060a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	2200      	movs	r2, #0
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295
 80005fc:	f000 f903 	bl	8000806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <HAL_InitTick+0x5c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000000 	.word	0x20000000
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x1c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x20>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x20>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000008 	.word	0x20000008
 8000640:	20000078 	.word	0x20000078

08000644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <HAL_GetTick+0x10>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000078 	.word	0x20000078

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <__NVIC_EnableIRQ+0x34>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	db0a      	blt.n	800071e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	490c      	ldr	r1, [pc, #48]	; (8000740 <__NVIC_SetPriority+0x4c>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071c:	e00a      	b.n	8000734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4908      	ldr	r1, [pc, #32]	; (8000744 <__NVIC_SetPriority+0x50>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	3b04      	subs	r3, #4
 800072c:	0112      	lsls	r2, r2, #4
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	440b      	add	r3, r1
 8000732:	761a      	strb	r2, [r3, #24]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b480      	push	{r7}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	f1c3 0307 	rsb	r3, r3, #7
 8000762:	2b04      	cmp	r3, #4
 8000764:	bf28      	it	cs
 8000766:	2304      	movcs	r3, #4
 8000768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3304      	adds	r3, #4
 800076e:	2b06      	cmp	r3, #6
 8000770:	d902      	bls.n	8000778 <NVIC_EncodePriority+0x30>
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3b03      	subs	r3, #3
 8000776:	e000      	b.n	800077a <NVIC_EncodePriority+0x32>
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 32ff 	mov.w	r2, #4294967295
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43da      	mvns	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	401a      	ands	r2, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000790:	f04f 31ff 	mov.w	r1, #4294967295
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43d9      	mvns	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	4313      	orrs	r3, r2
         );
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3724      	adds	r7, #36	; 0x24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007bc:	d301      	bcc.n	80007c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007be:	2301      	movs	r3, #1
 80007c0:	e00f      	b.n	80007e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <SysTick_Config+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ca:	210f      	movs	r1, #15
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f7ff ff90 	bl	80006f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SysTick_Config+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <SysTick_Config+0x40>)
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff2d 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff42 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ff90 	bl	8000748 <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff5f 	bl	80006f4 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff35 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffa2 	bl	80007ac <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e169      	b.n	8000b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000888:	2201      	movs	r2, #1
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f040 8158 	bne.w	8000b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a9a      	ldr	r2, [pc, #616]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d05e      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008b0:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d875      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008b6:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d058      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008bc:	4a96      	ldr	r2, [pc, #600]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d86f      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008c2:	4a96      	ldr	r2, [pc, #600]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d052      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008c8:	4a94      	ldr	r2, [pc, #592]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d869      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ce:	4a94      	ldr	r2, [pc, #592]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d04c      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008d4:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d863      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008da:	4a92      	ldr	r2, [pc, #584]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d046      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008e0:	4a90      	ldr	r2, [pc, #576]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d85d      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d82a      	bhi.n	8000940 <HAL_GPIO_Init+0xcc>
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d859      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <HAL_GPIO_Init+0x80>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	08000949 	.word	0x08000949
 80008fc:	0800095b 	.word	0x0800095b
 8000900:	0800099d 	.word	0x0800099d
 8000904:	080009a3 	.word	0x080009a3
 8000908:	080009a3 	.word	0x080009a3
 800090c:	080009a3 	.word	0x080009a3
 8000910:	080009a3 	.word	0x080009a3
 8000914:	080009a3 	.word	0x080009a3
 8000918:	080009a3 	.word	0x080009a3
 800091c:	080009a3 	.word	0x080009a3
 8000920:	080009a3 	.word	0x080009a3
 8000924:	080009a3 	.word	0x080009a3
 8000928:	080009a3 	.word	0x080009a3
 800092c:	080009a3 	.word	0x080009a3
 8000930:	080009a3 	.word	0x080009a3
 8000934:	080009a3 	.word	0x080009a3
 8000938:	08000951 	.word	0x08000951
 800093c:	08000965 	.word	0x08000965
 8000940:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <HAL_GPIO_Init+0x2b4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e029      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e024      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	3308      	adds	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e01f      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e01a      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000976:	2304      	movs	r3, #4
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e013      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	611a      	str	r2, [r3, #16]
          break;
 800098e:	e009      	b.n	80009a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	615a      	str	r2, [r3, #20]
          break;
 800099a:	e003      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e000      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          break;
 80009a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d801      	bhi.n	80009ae <HAL_GPIO_Init+0x13a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	e001      	b.n	80009b2 <HAL_GPIO_Init+0x13e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d802      	bhi.n	80009c0 <HAL_GPIO_Init+0x14c>
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x152>
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	3b08      	subs	r3, #8
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	210f      	movs	r1, #15
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	401a      	ands	r2, r3
 80009d8:	6a39      	ldr	r1, [r7, #32]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	431a      	orrs	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80b1 	beq.w	8000b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	3302      	adds	r3, #2
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_GPIO_Init+0x2c0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d013      	beq.n	8000a60 <HAL_GPIO_Init+0x1ec>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <HAL_GPIO_Init+0x2c4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00d      	beq.n	8000a5c <HAL_GPIO_Init+0x1e8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <HAL_GPIO_Init+0x2c8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0x1e4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <HAL_GPIO_Init+0x2cc>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d101      	bne.n	8000a54 <HAL_GPIO_Init+0x1e0>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a60:	2300      	movs	r3, #0
 8000a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a72:	492f      	ldr	r1, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	492c      	ldr	r1, [pc, #176]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4928      	ldr	r1, [pc, #160]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	4922      	ldr	r1, [pc, #136]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60cb      	str	r3, [r1, #12]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4918      	ldr	r1, [pc, #96]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d021      	beq.n	8000b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]
 8000b10:	e021      	b.n	8000b56 <HAL_GPIO_Init+0x2e2>
 8000b12:	bf00      	nop
 8000b14:	10320000 	.word	0x10320000
 8000b18:	10310000 	.word	0x10310000
 8000b1c:	10220000 	.word	0x10220000
 8000b20:	10210000 	.word	0x10210000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f ae8e 	bne.w	8000888 <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	372c      	adds	r7, #44	; 0x2c
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	611a      	str	r2, [r3, #16]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fabe 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e272      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8087 	beq.w	8000d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bfc:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d00c      	beq.n	8000c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c08:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d112      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
 8000c14:	4b8c      	ldr	r3, [pc, #560]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c20:	d10b      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d06c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x12c>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d168      	bne.n	8000d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e24c      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x76>
 8000c44:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a7f      	ldr	r2, [pc, #508]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e02e      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4b7b      	ldr	r3, [pc, #492]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a7a      	ldr	r2, [pc, #488]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a77      	ldr	r2, [pc, #476]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01d      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0xbc>
 8000c7e:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a71      	ldr	r2, [pc, #452]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4b6f      	ldr	r3, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a6e      	ldr	r2, [pc, #440]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c98:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a6a      	ldr	r2, [pc, #424]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d013      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcc4 	bl	8000644 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fcc0 	bl	8000644 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e200      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0xe4>
 8000cde:	e014      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fcb0 	bl	8000644 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fcac 	bl	8000644 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e1ec      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x10c>
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d063      	beq.n	8000dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d11c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d116      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3a:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d001      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e1c0      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4939      	ldr	r1, [pc, #228]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	e03a      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d020      	beq.n	8000db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d76:	f7ff fc65 	bl	8000644 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fc61 	bl	8000644 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e1a1      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4927      	ldr	r1, [pc, #156]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc44 	bl	8000644 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc40 	bl	8000644 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e180      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d03a      	beq.n	8000e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d019      	beq.n	8000e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fc24 	bl	8000644 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc20 	bl	8000644 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e160      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fa9c 	bl	800135c <RCC_Delay>
 8000e24:	e01c      	b.n	8000e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fc0a 	bl	8000644 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e32:	e00f      	b.n	8000e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc06 	bl	8000644 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d908      	bls.n	8000e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e146      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	42420000 	.word	0x42420000
 8000e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e9      	bne.n	8000e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a6 	beq.w	8000fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b8b      	ldr	r3, [pc, #556]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10d      	bne.n	8000e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a87      	ldr	r2, [pc, #540]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e96:	2301      	movs	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9a:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d118      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	; (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a7e      	ldr	r2, [pc, #504]	; (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fbc7 	bl	8000644 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eba:	f7ff fbc3 	bl	8000644 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b64      	cmp	r3, #100	; 0x64
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e103      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	4b75      	ldr	r3, [pc, #468]	; (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	e02d      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x334>
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	e01c      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x356>
 8000f18:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a60      	ldr	r2, [pc, #384]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4a5d      	ldr	r2, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6213      	str	r3, [r2, #32]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a5a      	ldr	r2, [pc, #360]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6213      	str	r3, [r2, #32]
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a57      	ldr	r2, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fb77 	bl	8000644 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	e00a      	b.n	8000f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb73 	bl	8000644 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0b1      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ee      	beq.n	8000f5a <HAL_RCC_OscConfig+0x37e>
 8000f7c:	e014      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb61 	bl	8000644 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb5d 	bl	8000644 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e09b      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ee      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fae:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8087 	beq.w	80010d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d061      	beq.n	8001094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d146      	bne.n	8001066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb31 	bl	8000644 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fb2d 	bl	8000644 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e06d      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f0      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d108      	bne.n	8001020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4921      	ldr	r1, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a19      	ldr	r1, [r3, #32]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	430b      	orrs	r3, r1
 8001032:	491b      	ldr	r1, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fb01 	bl	8000644 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fafd 	bl	8000644 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e03d      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x46a>
 8001064:	e035      	b.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff faea 	bl	8000644 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff fae6 	bl	8000644 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e026      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x498>
 8001092:	e01e      	b.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e019      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x500>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0d0      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d910      	bls.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0207 	bic.w	r2, r3, #7
 800110a:	4965      	ldr	r1, [pc, #404]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800115e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d040      	beq.n	8001200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d115      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e073      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06b      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4936      	ldr	r1, [pc, #216]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fa38 	bl	8000644 <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	f7ff fa34 	bl	8000644 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e053      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 020c 	and.w	r2, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d1eb      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d210      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4922      	ldr	r1, [pc, #136]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f821 	bl	80012b4 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1cc>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1d0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f996 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08001fb4 	.word	0x08001fb4
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x30>
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_GetSysClockFreq+0x36>
 80012e2:	e027      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 80012e6:	613b      	str	r3, [r7, #16]
      break;
 80012e8:	e027      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	0c5b      	lsrs	r3, r3, #17
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001316:	fb03 f202 	mul.w	r2, r3, r2
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e004      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	613b      	str	r3, [r7, #16]
      break;
 8001332:	e002      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001336:	613b      	str	r3, [r7, #16]
      break;
 8001338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133a:	693b      	ldr	r3, [r7, #16]
}
 800133c:	4618      	mov	r0, r3
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	007a1200 	.word	0x007a1200
 8001350:	08001fc4 	.word	0x08001fc4
 8001354:	08001fd4 	.word	0x08001fd4
 8001358:	003d0900 	.word	0x003d0900

0800135c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <RCC_Delay+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <RCC_Delay+0x38>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001378:	bf00      	nop
  }
  while (Delay --);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	60fa      	str	r2, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <RCC_Delay+0x1c>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000000 	.word	0x20000000
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e041      	b.n	800142e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f83e 	bl	8000440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	f000 fab2 	bl	8001940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e041      	b.n	80014cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f839 	bl	80014d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f000 fa63 	bl	8001940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_TIM_PWM_Start+0x24>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	e022      	b.n	8001552 <HAL_TIM_PWM_Start+0x6a>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d109      	bne.n	8001526 <HAL_TIM_PWM_Start+0x3e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	e015      	b.n	8001552 <HAL_TIM_PWM_Start+0x6a>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d109      	bne.n	8001540 <HAL_TIM_PWM_Start+0x58>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e008      	b.n	8001552 <HAL_TIM_PWM_Start+0x6a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e05e      	b.n	8001618 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d104      	bne.n	800156a <HAL_TIM_PWM_Start+0x82>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001568:	e013      	b.n	8001592 <HAL_TIM_PWM_Start+0xaa>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d104      	bne.n	800157a <HAL_TIM_PWM_Start+0x92>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001578:	e00b      	b.n	8001592 <HAL_TIM_PWM_Start+0xaa>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b08      	cmp	r3, #8
 800157e:	d104      	bne.n	800158a <HAL_TIM_PWM_Start+0xa2>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001588:	e003      	b.n	8001592 <HAL_TIM_PWM_Start+0xaa>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc50 	bl	8001e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_TIM_PWM_Start+0x138>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d107      	bne.n	80015ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_TIM_PWM_Start+0x138>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00e      	beq.n	80015e2 <HAL_TIM_PWM_Start+0xfa>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d009      	beq.n	80015e2 <HAL_TIM_PWM_Start+0xfa>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_TIM_PWM_Start+0x13c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d004      	beq.n	80015e2 <HAL_TIM_PWM_Start+0xfa>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_TIM_PWM_Start+0x140>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d111      	bne.n	8001606 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d010      	beq.n	8001616 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001604:	e007      	b.n	8001616 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40012c00 	.word	0x40012c00
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800

0800162c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001646:	2302      	movs	r3, #2
 8001648:	e0ae      	b.n	80017a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	f200 809f 	bhi.w	8001798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001695 	.word	0x08001695
 8001664:	08001799 	.word	0x08001799
 8001668:	08001799 	.word	0x08001799
 800166c:	08001799 	.word	0x08001799
 8001670:	080016d5 	.word	0x080016d5
 8001674:	08001799 	.word	0x08001799
 8001678:	08001799 	.word	0x08001799
 800167c:	08001799 	.word	0x08001799
 8001680:	08001717 	.word	0x08001717
 8001684:	08001799 	.word	0x08001799
 8001688:	08001799 	.word	0x08001799
 800168c:	08001799 	.word	0x08001799
 8001690:	08001757 	.word	0x08001757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f9b2 	bl	8001a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0204 	bic.w	r2, r2, #4
 80016be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6999      	ldr	r1, [r3, #24]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	619a      	str	r2, [r3, #24]
      break;
 80016d2:	e064      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f9f8 	bl	8001ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6999      	ldr	r1, [r3, #24]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	021a      	lsls	r2, r3, #8
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	619a      	str	r2, [r3, #24]
      break;
 8001714:	e043      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fa41 	bl	8001ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0208 	orr.w	r2, r2, #8
 8001730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0204 	bic.w	r2, r2, #4
 8001740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69d9      	ldr	r1, [r3, #28]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	61da      	str	r2, [r3, #28]
      break;
 8001754:	e023      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fa8b 	bl	8001c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	021a      	lsls	r2, r3, #8
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	61da      	str	r2, [r3, #28]
      break;
 8001796:	e002      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	75fb      	strb	r3, [r7, #23]
      break;
 800179c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_TIM_ConfigClockSource+0x1c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e0b4      	b.n	8001936 <HAL_TIM_ConfigClockSource+0x186>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80017ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001804:	d03e      	beq.n	8001884 <HAL_TIM_ConfigClockSource+0xd4>
 8001806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180a:	f200 8087 	bhi.w	800191c <HAL_TIM_ConfigClockSource+0x16c>
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	f000 8086 	beq.w	8001922 <HAL_TIM_ConfigClockSource+0x172>
 8001816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181a:	d87f      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 800181c:	2b70      	cmp	r3, #112	; 0x70
 800181e:	d01a      	beq.n	8001856 <HAL_TIM_ConfigClockSource+0xa6>
 8001820:	2b70      	cmp	r3, #112	; 0x70
 8001822:	d87b      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 8001824:	2b60      	cmp	r3, #96	; 0x60
 8001826:	d050      	beq.n	80018ca <HAL_TIM_ConfigClockSource+0x11a>
 8001828:	2b60      	cmp	r3, #96	; 0x60
 800182a:	d877      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 800182c:	2b50      	cmp	r3, #80	; 0x50
 800182e:	d03c      	beq.n	80018aa <HAL_TIM_ConfigClockSource+0xfa>
 8001830:	2b50      	cmp	r3, #80	; 0x50
 8001832:	d873      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 8001834:	2b40      	cmp	r3, #64	; 0x40
 8001836:	d058      	beq.n	80018ea <HAL_TIM_ConfigClockSource+0x13a>
 8001838:	2b40      	cmp	r3, #64	; 0x40
 800183a:	d86f      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 800183c:	2b30      	cmp	r3, #48	; 0x30
 800183e:	d064      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x15a>
 8001840:	2b30      	cmp	r3, #48	; 0x30
 8001842:	d86b      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 8001844:	2b20      	cmp	r3, #32
 8001846:	d060      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x15a>
 8001848:	2b20      	cmp	r3, #32
 800184a:	d867      	bhi.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d05c      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x15a>
 8001850:	2b10      	cmp	r3, #16
 8001852:	d05a      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x15a>
 8001854:	e062      	b.n	800191c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001866:	f000 facc 	bl	8001e02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	609a      	str	r2, [r3, #8]
      break;
 8001882:	e04f      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001894:	f000 fab5 	bl	8001e02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a6:	609a      	str	r2, [r3, #8]
      break;
 80018a8:	e03c      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018b6:	461a      	mov	r2, r3
 80018b8:	f000 fa2c 	bl	8001d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2150      	movs	r1, #80	; 0x50
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fa83 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 80018c8:	e02c      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018d6:	461a      	mov	r2, r3
 80018d8:	f000 fa4a 	bl	8001d70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2160      	movs	r1, #96	; 0x60
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fa73 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 80018e8:	e01c      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018f6:	461a      	mov	r2, r3
 80018f8:	f000 fa0c 	bl	8001d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2140      	movs	r1, #64	; 0x40
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fa63 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 8001908:	e00c      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f000 fa5a 	bl	8001dce <TIM_ITRx_SetConfig>
      break;
 800191a:	e003      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      break;
 8001920:	e000      	b.n	8001924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <TIM_Base_SetConfig+0xb8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00b      	beq.n	8001970 <TIM_Base_SetConfig+0x30>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195e:	d007      	beq.n	8001970 <TIM_Base_SetConfig+0x30>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a26      	ldr	r2, [pc, #152]	; (80019fc <TIM_Base_SetConfig+0xbc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d003      	beq.n	8001970 <TIM_Base_SetConfig+0x30>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <TIM_Base_SetConfig+0xc0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d108      	bne.n	8001982 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <TIM_Base_SetConfig+0xb8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00b      	beq.n	80019a2 <TIM_Base_SetConfig+0x62>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d007      	beq.n	80019a2 <TIM_Base_SetConfig+0x62>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <TIM_Base_SetConfig+0xbc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d003      	beq.n	80019a2 <TIM_Base_SetConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <TIM_Base_SetConfig+0xc0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d108      	bne.n	80019b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <TIM_Base_SetConfig+0xb8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d103      	bne.n	80019e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40000800 	.word	0x40000800

08001a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f023 0201 	bic.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f023 0302 	bic.w	r3, r3, #2
 8001a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <TIM_OC1_SetConfig+0xc8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10c      	bne.n	8001a7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f023 0308 	bic.w	r3, r3, #8
 8001a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <TIM_OC1_SetConfig+0xc8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d111      	bne.n	8001aa6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	621a      	str	r2, [r3, #32]
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00

08001ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f023 0210 	bic.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0320 	bic.w	r3, r3, #32
 8001b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <TIM_OC2_SetConfig+0xd0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d10d      	bne.n	8001b4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <TIM_OC2_SetConfig+0xd0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d113      	bne.n	8001b7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	621a      	str	r2, [r3, #32]
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <TIM_OC3_SetConfig+0xd0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10d      	bne.n	8001c1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <TIM_OC3_SetConfig+0xd0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d113      	bne.n	8001c4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	621a      	str	r2, [r3, #32]
}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40012c00 	.word	0x40012c00

08001c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	031b      	lsls	r3, r3, #12
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <TIM_OC4_SetConfig+0x98>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d109      	bne.n	8001cec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	621a      	str	r2, [r3, #32]
}
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012c00 	.word	0x40012c00

08001d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f023 0201 	bic.w	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f023 030a 	bic.w	r3, r3, #10
 8001d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	621a      	str	r2, [r3, #32]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f023 0210 	bic.w	r2, r3, #16
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	031b      	lsls	r3, r3, #12
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001dac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	621a      	str	r2, [r3, #32]
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f043 0307 	orr.w	r3, r3, #7
 8001df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	021a      	lsls	r2, r3, #8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	609a      	str	r2, [r3, #8]
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2201      	movs	r2, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a1a      	ldr	r2, [r3, #32]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	621a      	str	r2, [r3, #32]
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e046      	b.n	8001f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00e      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d009      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d004      	beq.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10c      	bne.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800

08001f44 <memset>:
 8001f44:	4603      	mov	r3, r0
 8001f46:	4402      	add	r2, r0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <__libc_init_array>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2600      	movs	r6, #0
 8001f58:	4d0c      	ldr	r5, [pc, #48]	; (8001f8c <__libc_init_array+0x38>)
 8001f5a:	4c0d      	ldr	r4, [pc, #52]	; (8001f90 <__libc_init_array+0x3c>)
 8001f5c:	1b64      	subs	r4, r4, r5
 8001f5e:	10a4      	asrs	r4, r4, #2
 8001f60:	42a6      	cmp	r6, r4
 8001f62:	d109      	bne.n	8001f78 <__libc_init_array+0x24>
 8001f64:	f000 f81a 	bl	8001f9c <_init>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	4d0a      	ldr	r5, [pc, #40]	; (8001f94 <__libc_init_array+0x40>)
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	; (8001f98 <__libc_init_array+0x44>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d105      	bne.n	8001f82 <__libc_init_array+0x2e>
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7c:	4798      	blx	r3
 8001f7e:	3601      	adds	r6, #1
 8001f80:	e7ee      	b.n	8001f60 <__libc_init_array+0xc>
 8001f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f86:	4798      	blx	r3
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7f2      	b.n	8001f72 <__libc_init_array+0x1e>
 8001f8c:	08001fd8 	.word	0x08001fd8
 8001f90:	08001fd8 	.word	0x08001fd8
 8001f94:	08001fd8 	.word	0x08001fd8
 8001f98:	08001fdc 	.word	0x08001fdc

08001f9c <_init>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr

08001fa8 <_fini>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr
