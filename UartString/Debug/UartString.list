
UartString.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b4  080041b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041bc  080041bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080041c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000230  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000084ae  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001764  00000000  00000000  0002857d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f0  00000000  00000000  00029ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000547  00000000  00000000  0002a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000201e3  00000000  00000000  0002a91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008eed  00000000  00000000  0004ab02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2aca  00000000  00000000  000539ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021f0  00000000  00000000  001164bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001186ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004048 	.word	0x08004048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004048 	.word	0x08004048

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Receive>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uart2_ds[20] = {0};
uint8_t data[20];
int pwm,servo;
void Receive(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	sscanf((char *)data, "%d,%d", &pwm, &servo);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <Receive+0x20>)
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <Receive+0x24>)
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <Receive+0x28>)
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <Receive+0x2c>)
 8000588:	f002 ff22 	bl	80033d0 <siscanf>
	memset(data,0,20);
 800058c:	2214      	movs	r2, #20
 800058e:	2100      	movs	r1, #0
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <Receive+0x2c>)
 8000592:	f002 ff4b 	bl	800342c <memset>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000138 	.word	0x20000138
 80005a0:	20000134 	.word	0x20000134
 80005a4:	08004060 	.word	0x08004060
 80005a8:	20000120 	.word	0x20000120

080005ac <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
	if(huart -> Instance == USART2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_UARTEx_RxEventCallback+0x3c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10e      	bne.n	80005e0 <HAL_UARTEx_RxEventCallback+0x34>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,data, 20);
 80005c2:	2214      	movs	r2, #20
 80005c4:	4909      	ldr	r1, [pc, #36]	; (80005ec <HAL_UARTEx_RxEventCallback+0x40>)
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x44>)
 80005c8:	f001 fe18 	bl	80021fc <HAL_UARTEx_ReceiveToIdle_DMA>
			Receive();
 80005cc:	f7ff ffd6 	bl	800057c <Receive>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x48>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x48>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 0208 	bic.w	r2, r2, #8
 80005de:	601a      	str	r2, [r3, #0]
	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40004400 	.word	0x40004400
 80005ec:	20000120 	.word	0x20000120
 80005f0:	20000078 	.word	0x20000078
 80005f4:	200000c0 	.word	0x200000c0

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fa34 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f810 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8b6 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000608:	f000 f894 	bl	8000734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f868 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,data, 20);
 8000610:	2214      	movs	r2, #20
 8000612:	4902      	ldr	r1, [pc, #8]	; (800061c <main+0x24>)
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <main+0x28>)
 8000616:	f001 fdf1 	bl	80021fc <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x22>
 800061c:	20000120 	.word	0x20000120
 8000620:	20000078 	.word	0x20000078

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fefa 	bl	800342c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xb4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xb4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xb4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemClock_Config+0xb8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <SystemClock_Config+0xb8>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemClock_Config+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f909 	bl	80018ac <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a0:	f000 f882 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fb6c 	bl	8001d9c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ca:	f000 f86d 	bl	80007a8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fd20 	bl	800215c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f841 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000078 	.word	0x20000078
 8000730:	40004400 	.word	0x40004400

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_DMA_Init+0x3c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <MX_DMA_Init+0x3c>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2010      	movs	r0, #16
 800075c:	f000 fad1 	bl	8000d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000760:	2010      	movs	r0, #16
 8000762:	f000 faea 	bl	8000d3a <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_GPIO_Init+0x30>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <MX_GPIO_Init+0x30>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_GPIO_Init+0x30>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a34      	ldr	r2, [pc, #208]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d161      	bne.n	80008ea <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a32      	ldr	r2, [pc, #200]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2b      	ldr	r2, [pc, #172]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086e:	2307      	movs	r3, #7
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4820      	ldr	r0, [pc, #128]	; (80008fc <HAL_UART_MspInit+0xf8>)
 800087a:	f000 fe7b 	bl	8001574 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_UART_MspInit+0xfc>)
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <HAL_UART_MspInit+0x100>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_UART_MspInit+0xfc>)
 8000886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_MspInit+0xfc>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_UART_MspInit+0xfc>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_UART_MspInit+0xfc>)
 800089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008c0:	f000 fa56 	bl	8000d70 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ca:	f7ff ff6d 	bl	80007a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_UART_MspInit+0xfc>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	2026      	movs	r0, #38	; 0x26
 80008e0:	f000 fa0f 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e4:	2026      	movs	r0, #38	; 0x26
 80008e6:	f000 fa28 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	200000c0 	.word	0x200000c0
 8000904:	40026088 	.word	0x40026088

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8da 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA1_Stream5_IRQHandler+0x10>)
 8000962:	f000 fb9d 	bl	80010a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c0 	.word	0x200000c0

08000970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART2_IRQHandler+0x10>)
 8000976:	f001 fc9f 	bl	80022b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000078 	.word	0x20000078

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f002 fd42 	bl	800343c <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20020000 	.word	0x20020000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	2000013c 	.word	0x2000013c
 80009ec:	20000290 	.word	0x20000290

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 fd01 	bl	8003448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fdd7 	bl	80005f8 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a58:	080041c4 	.word	0x080041c4
  ldr r2, =_sbss
 8000a5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a60:	2000028c 	.word	0x2000028c

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f92b 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe8a 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f943 	bl	8000d56 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f90b 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000140 	.word	0x20000140

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000140 	.word	0x20000140

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff29 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff3e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff31 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff feda 	bl	8000b34 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e099      	b.n	8000ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0201 	bic.w	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dac:	e00f      	b.n	8000dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dae:	f7ff fec1 	bl	8000b34 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d908      	bls.n	8000dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e078      	b.n	8000ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e8      	bne.n	8000dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_DMA_Init+0x158>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d107      	bne.n	8000e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4313      	orrs	r3, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f023 0307 	bic.w	r3, r3, #7
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d117      	bne.n	8000e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00e      	beq.n	8000e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 fb01 	bl	800147c <DMA_CheckFifoParam>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2240      	movs	r2, #64	; 0x40
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e016      	b.n	8000ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fab8 	bl	8001410 <DMA_CalcBaseAndBitshift>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	223f      	movs	r2, #63	; 0x3f
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	f010803f 	.word	0xf010803f

08000ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_DMA_Start_IT+0x26>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e040      	b.n	8000f74 <HAL_DMA_Start_IT+0xa8>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d12f      	bne.n	8000f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fa4a 	bl	80013b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f24:	223f      	movs	r2, #63	; 0x3f
 8000f26:	409a      	lsls	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0216 	orr.w	r2, r2, #22
 8000f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e005      	b.n	8000f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f8a:	f7ff fdd3 	bl	8000b34 <HAL_GetTick>
 8000f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e052      	b.n	8001054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0216 	bic.w	r2, r2, #22
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <HAL_DMA_Abort+0x62>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0208 	bic.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ffe:	e013      	b.n	8001028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001000:	f7ff fd98 	bl	8000b34 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b05      	cmp	r3, #5
 800100c:	d90c      	bls.n	8001028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2220      	movs	r2, #32
 8001012:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e015      	b.n	8001054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e4      	bne.n	8001000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103a:	223f      	movs	r2, #63	; 0x3f
 800103c:	409a      	lsls	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d004      	beq.n	800107a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00c      	b.n	8001094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0201 	bic.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010ac:	4b8e      	ldr	r3, [pc, #568]	; (80012e8 <HAL_DMA_IRQHandler+0x248>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a8e      	ldr	r2, [pc, #568]	; (80012ec <HAL_DMA_IRQHandler+0x24c>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0a9b      	lsrs	r3, r3, #10
 80010b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ca:	2208      	movs	r2, #8
 80010cc:	409a      	lsls	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01a      	beq.n	800110c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0204 	bic.w	r2, r2, #4
 80010f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2208      	movs	r2, #8
 80010fa:	409a      	lsls	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	f043 0201 	orr.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	2201      	movs	r2, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d012      	beq.n	8001142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2201      	movs	r2, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	f043 0202 	orr.w	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	2204      	movs	r2, #4
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d012      	beq.n	8001178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00b      	beq.n	8001178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2204      	movs	r2, #4
 8001166:	409a      	lsls	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	f043 0204 	orr.w	r2, r3, #4
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	2210      	movs	r2, #16
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d043      	beq.n	8001210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03c      	beq.n	8001210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2210      	movs	r2, #16
 800119c:	409a      	lsls	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d018      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d108      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d024      	beq.n	8001210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	4798      	blx	r3
 80011ce:	e01f      	b.n	8001210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01b      	beq.n	8001210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4798      	blx	r3
 80011e0:	e016      	b.n	8001210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0208 	bic.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2220      	movs	r2, #32
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 808f 	beq.w	8001340 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8087 	beq.w	8001340 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001236:	2220      	movs	r2, #32
 8001238:	409a      	lsls	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b05      	cmp	r3, #5
 8001248:	d136      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0216 	bic.w	r2, r2, #22
 8001258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <HAL_DMA_IRQHandler+0x1da>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0208 	bic.w	r2, r2, #8
 8001288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128e:	223f      	movs	r2, #63	; 0x3f
 8001290:	409a      	lsls	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d07e      	beq.n	80013ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
        }
        return;
 80012b6:	e079      	b.n	80013ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01d      	beq.n	8001302 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10d      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d031      	beq.n	8001340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
 80012e4:	e02c      	b.n	8001340 <HAL_DMA_IRQHandler+0x2a0>
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000
 80012ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d023      	beq.n	8001340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
 8001300:	e01e      	b.n	8001340 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10f      	bne.n	8001330 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0210 	bic.w	r2, r2, #16
 800131e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001344:	2b00      	cmp	r3, #0
 8001346:	d032      	beq.n	80013ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d022      	beq.n	800139a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2205      	movs	r2, #5
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3301      	adds	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	d307      	bcc.n	8001388 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f2      	bne.n	800136c <HAL_DMA_IRQHandler+0x2cc>
 8001386:	e000      	b.n	800138a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001388:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
 80013aa:	e000      	b.n	80013ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80013ac:	bf00      	nop
    }
  }
}
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b40      	cmp	r3, #64	; 0x40
 80013e0:	d108      	bne.n	80013f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013f2:	e007      	b.n	8001404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	60da      	str	r2, [r3, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3b10      	subs	r3, #16
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <DMA_CalcBaseAndBitshift+0x64>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <DMA_CalcBaseAndBitshift+0x68>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d909      	bls.n	8001452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	1d1a      	adds	r2, r3, #4
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58
 8001450:	e007      	b.n	8001462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	aaaaaaab 	.word	0xaaaaaaab
 8001478:	0800408c 	.word	0x0800408c

0800147c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11f      	bne.n	80014d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d856      	bhi.n	800154a <DMA_CheckFifoParam+0xce>
 800149c:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <DMA_CheckFifoParam+0x28>)
 800149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	080014c7 	.word	0x080014c7
 80014ac:	080014b5 	.word	0x080014b5
 80014b0:	0800154b 	.word	0x0800154b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d046      	beq.n	800154e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c4:	e043      	b.n	800154e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ce:	d140      	bne.n	8001552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d4:	e03d      	b.n	8001552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014de:	d121      	bne.n	8001524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d837      	bhi.n	8001556 <DMA_CheckFifoParam+0xda>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <DMA_CheckFifoParam+0x70>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	08001503 	.word	0x08001503
 80014f4:	080014fd 	.word	0x080014fd
 80014f8:	08001515 	.word	0x08001515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001500:	e030      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d025      	beq.n	800155a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001512:	e022      	b.n	800155a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800151c:	d11f      	bne.n	800155e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001522:	e01c      	b.n	800155e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d903      	bls.n	8001532 <DMA_CheckFifoParam+0xb6>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d003      	beq.n	8001538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001530:	e018      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
      break;
 8001536:	e015      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
      break;
 8001548:	e00b      	b.n	8001562 <DMA_CheckFifoParam+0xe6>
      break;
 800154a:	bf00      	nop
 800154c:	e00a      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 800154e:	bf00      	nop
 8001550:	e008      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001552:	bf00      	nop
 8001554:	e006      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001556:	bf00      	nop
 8001558:	e004      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 800155a:	bf00      	nop
 800155c:	e002      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;   
 800155e:	bf00      	nop
 8001560:	e000      	b.n	8001564 <DMA_CheckFifoParam+0xe8>
      break;
 8001562:	bf00      	nop
    }
  } 
  
  return status; 
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e16b      	b.n	8001868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 815a 	bne.w	8001862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80b4 	beq.w	8001862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_GPIO_Init+0x30c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a5b      	ldr	r2, [pc, #364]	; (8001884 <HAL_GPIO_Init+0x310>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_GPIO_Init+0x314>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d02b      	beq.n	800179a <HAL_GPIO_Init+0x226>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a51      	ldr	r2, [pc, #324]	; (800188c <HAL_GPIO_Init+0x318>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d025      	beq.n	8001796 <HAL_GPIO_Init+0x222>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a50      	ldr	r2, [pc, #320]	; (8001890 <HAL_GPIO_Init+0x31c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_GPIO_Init+0x21e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4f      	ldr	r2, [pc, #316]	; (8001894 <HAL_GPIO_Init+0x320>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x21a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4e      	ldr	r2, [pc, #312]	; (8001898 <HAL_GPIO_Init+0x324>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x216>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4d      	ldr	r2, [pc, #308]	; (800189c <HAL_GPIO_Init+0x328>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x212>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <HAL_GPIO_Init+0x32c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x20a>
 800177a:	2307      	movs	r3, #7
 800177c:	e00e      	b.n	800179c <HAL_GPIO_Init+0x228>
 800177e:	2308      	movs	r3, #8
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001782:	2306      	movs	r3, #6
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x228>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x228>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x228>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x228>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4935      	ldr	r1, [pc, #212]	; (8001884 <HAL_GPIO_Init+0x310>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_GPIO_Init+0x334>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_GPIO_Init+0x334>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_GPIO_Init+0x334>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f ae90 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021800 	.word	0x40021800
 80018a4:	40021c00 	.word	0x40021c00
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e267      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d075      	beq.n	80019b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d00c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b7e      	ldr	r3, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d157      	bne.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e242      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x74>
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a75      	ldr	r2, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x98>
 800192a:	4b70      	ldr	r3, [pc, #448]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6f      	ldr	r2, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6c      	ldr	r2, [pc, #432]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a68      	ldr	r2, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f8e6 	bl	8000b34 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f8e2 	bl	8000b34 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e207      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xc0>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff f8d2 	bl	8000b34 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f8ce 	bl	8000b34 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1f3      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b51      	ldr	r3, [pc, #324]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0xe8>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1c7      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x244>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f887 	bl	8000b34 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff f883 	bl	8000b34 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1a8      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4925      	ldr	r1, [pc, #148]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x244>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f866 	bl	8000b34 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f862 	bl	8000b34 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e187      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d036      	beq.n	8001b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_RCC_OscConfig+0x248>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f846 	bl	8000b34 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f842 	bl	8000b34 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e167      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
 8001aca:	e01b      	b.n	8001b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_OscConfig+0x248>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f82f 	bl	8000b34 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	e00e      	b.n	8001af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff f82b 	bl	8000b34 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d907      	bls.n	8001af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e150      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
 8001aec:	40023800 	.word	0x40023800
 8001af0:	42470000 	.word	0x42470000
 8001af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ea      	bne.n	8001ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8097 	beq.w	8001c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10f      	bne.n	8001b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b7a      	ldr	r3, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b74      	ldr	r3, [pc, #464]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a73      	ldr	r2, [pc, #460]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe ffeb 	bl	8000b34 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe ffe7 	bl	8000b34 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e10c      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
 8001b88:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e01c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x324>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x30c>
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a5e      	ldr	r2, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5b      	ldr	r2, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x324>
 8001bb8:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7fe ffac 	bl	8000b34 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7fe ffa8 	bl	8000b34 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0cb      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0ee      	beq.n	8001be0 <HAL_RCC_OscConfig+0x334>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7fe ff96 	bl	8000b34 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7fe ff92 	bl	8000b34 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0b5      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a38      	ldr	r2, [pc, #224]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a1 	beq.w	8001d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d05c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d141      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff66 	bl	8000b34 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe ff62 	bl	8000b34 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e087      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe ff3b 	bl	8000b34 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7fe ff37 	bl	8000b34 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e05c      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x416>
 8001ce0:	e054      	b.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff24 	bl	8000b34 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe ff20 	bl	8000b34 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e045      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x444>
 8001d0e:	e03d      	b.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e038      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x4ec>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d028      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d121      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d11a      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0cc      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d044      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e067      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fe52 	bl	8000b34 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7fe fe4e 	bl	8000b34 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20c      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fdb2 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08004074 	.word	0x08004074
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f6c:	b090      	sub	sp, #64	; 0x40
 8001f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	f200 80a1 	bhi.w	80020d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x34>
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f9a:	e09b      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_GetSysClockFreq+0x184>)
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fa0:	e09b      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fa6:	e098      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d028      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd4:	fb03 f201 	mul.w	r2, r3, r1
 8001fd8:	2300      	movs	r3, #0
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8001fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fe8:	460a      	mov	r2, r1
 8001fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fee:	4413      	add	r3, r2
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	61fa      	str	r2, [r7, #28]
 8001ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002002:	f7fe f93d 	bl	8000280 <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4613      	mov	r3, r2
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200e:	e053      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	617a      	str	r2, [r7, #20]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002022:	f04f 0b00 	mov.w	fp, #0
 8002026:	4652      	mov	r2, sl
 8002028:	465b      	mov	r3, fp
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002038:	0150      	lsls	r0, r2, #5
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	ebb2 080a 	subs.w	r8, r2, sl
 8002042:	eb63 090b 	sbc.w	r9, r3, fp
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800205a:	ebb2 0408 	subs.w	r4, r2, r8
 800205e:	eb63 0509 	sbc.w	r5, r3, r9
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	00eb      	lsls	r3, r5, #3
 800206c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002070:	00e2      	lsls	r2, r4, #3
 8002072:	4614      	mov	r4, r2
 8002074:	461d      	mov	r5, r3
 8002076:	eb14 030a 	adds.w	r3, r4, sl
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	eb45 030b 	adc.w	r3, r5, fp
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	2200      	movs	r2, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	60fa      	str	r2, [r7, #12]
 80020a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ac:	f7fe f8e8 	bl	8000280 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4613      	mov	r3, r2
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	3301      	adds	r3, #1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetSysClockFreq+0x184>)
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3740      	adds	r7, #64	; 0x40
 80020e0:	46bd      	mov	sp, r7
 80020e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	017d7840 	.word	0x017d7840

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_GetHCLKFreq+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002110:	f7ff fff0 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0a9b      	lsrs	r3, r3, #10
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	08004084 	.word	0x08004084

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002138:	f7ff ffdc 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0b5b      	lsrs	r3, r3, #13
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4903      	ldr	r1, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	08004084 	.word	0x08004084

0800215c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e042      	b.n	80021f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fb3e 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fea1 	bl	8002ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	d14a      	bne.n	80022ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e043      	b.n	80022ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	461a      	mov	r2, r3
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fbf5 	bl	8002a28 <UART_Start_Receive_DMA>
 800223e:	4603      	mov	r3, r0
 8002240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002248:	2b00      	cmp	r3, #0
 800224a:	d12c      	bne.n	80022a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	2b01      	cmp	r3, #1
 8002252:	d125      	bne.n	80022a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	e853 3f00 	ldrex	r3, [r3]
 8002278:	617b      	str	r3, [r7, #20]
   return(result);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228a:	627a      	str	r2, [r7, #36]	; 0x24
 800228c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	61fb      	str	r3, [r7, #28]
   return(result);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e5      	bne.n	800226a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800229e:	e002      	b.n	80022a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80022a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022aa:	e000      	b.n	80022ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3730      	adds	r7, #48	; 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0ba      	sub	sp, #232	; 0xe8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_UART_IRQHandler+0x66>
 800230a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fd27 	bl	8002d6a <UART_Receive_IT>
      return;
 800231c:	e25b      	b.n	80027d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800231e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80de 	beq.w	80024e4 <HAL_UART_IRQHandler+0x22c>
 8002328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80d1 	beq.w	80024e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_UART_IRQHandler+0xae>
 800234e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_UART_IRQHandler+0xd2>
 8002372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f043 0202 	orr.w	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800238a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_UART_IRQHandler+0xf6>
 8002396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f043 0204 	orr.w	r2, r3, #4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_UART_IRQHandler+0x126>
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f043 0208 	orr.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 81f2 	beq.w	80027cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_UART_IRQHandler+0x14e>
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fcb2 	bl	8002d6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_UART_IRQHandler+0x17a>
 800242a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04f      	beq.n	80024d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fbba 	bl	8002bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d141      	bne.n	80024ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800245c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3314      	adds	r3, #20
 800246e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800247e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800248a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1d9      	bne.n	8002446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	4a7e      	ldr	r2, [pc, #504]	; (8002698 <HAL_UART_IRQHandler+0x3e0>)
 80024a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fdd8 	bl	800105c <HAL_DMA_Abort_IT>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024bc:	4610      	mov	r0, r2
 80024be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	e00e      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9a8 	bl	8002818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	e00a      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9a4 	bl	8002818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	e006      	b.n	80024e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f9a0 	bl	8002818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80024de:	e175      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	bf00      	nop
    return;
 80024e2:	e173      	b.n	80027cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 814f 	bne.w	800278c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8148 	beq.w	800278c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8141 	beq.w	800278c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	f040 80b6 	bne.w	800269c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800253c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8145 	beq.w	80027d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800254a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800254e:	429a      	cmp	r2, r3
 8002550:	f080 813e 	bcs.w	80027d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800255a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	f000 8088 	beq.w	800267a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a6:	e841 2300 	strex	r3, r2, [r1]
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1d9      	bne.n	800256a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3314      	adds	r3, #20
 80025bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e1      	bne.n	80025b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800261c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800265c:	65ba      	str	r2, [r7, #88]	; 0x58
 800265e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fc81 	bl	8000f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002688:	b29b      	uxth	r3, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b29b      	uxth	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fd ff8b 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002696:	e09b      	b.n	80027d0 <HAL_UART_IRQHandler+0x518>
 8002698:	08002c73 	.word	0x08002c73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 808e 	beq.w	80027d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8089 	beq.w	80027d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026e6:	647a      	str	r2, [r7, #68]	; 0x44
 80026e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e3      	bne.n	80026c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3314      	adds	r3, #20
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	623b      	str	r3, [r7, #32]
   return(result);
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3314      	adds	r3, #20
 800271a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800271e:	633a      	str	r2, [r7, #48]	; 0x30
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e3      	bne.n	80026fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0310 	bic.w	r3, r3, #16
 8002756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002764:	61fa      	str	r2, [r7, #28]
 8002766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	617b      	str	r3, [r7, #20]
   return(result);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e3      	bne.n	8002740 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800277e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fd ff11 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800278a:	e023      	b.n	80027d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800278c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <HAL_UART_IRQHandler+0x4f4>
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fa78 	bl	8002c9a <UART_Transmit_IT>
    return;
 80027aa:	e014      	b.n	80027d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00e      	beq.n	80027d6 <HAL_UART_IRQHandler+0x51e>
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fab8 	bl	8002d3a <UART_EndTransmit_IT>
    return;
 80027ca:	e004      	b.n	80027d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80027cc:	bf00      	nop
 80027ce:	e002      	b.n	80027d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027d4:	bf00      	nop
  }
}
 80027d6:	37e8      	adds	r7, #232	; 0xe8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b09c      	sub	sp, #112	; 0x70
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d172      	bne.n	800292e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	2200      	movs	r2, #0
 800284c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800285e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002864:	66bb      	str	r3, [r7, #104]	; 0x68
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800286e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	667b      	str	r3, [r7, #100]	; 0x64
 800289a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028a2:	647a      	str	r2, [r7, #68]	; 0x44
 80028a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e5      	bne.n	8002882 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3314      	adds	r3, #20
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	623b      	str	r3, [r7, #32]
   return(result);
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028cc:	663b      	str	r3, [r7, #96]	; 0x60
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028d6:	633a      	str	r2, [r7, #48]	; 0x30
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e5      	bne.n	80028b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	60fb      	str	r3, [r7, #12]
   return(result);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f023 0310 	bic.w	r3, r3, #16
 8002910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800291a:	61fa      	str	r2, [r7, #28]
 800291c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	69b9      	ldr	r1, [r7, #24]
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	617b      	str	r3, [r7, #20]
   return(result);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e5      	bne.n	80028fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002930:	2200      	movs	r2, #0
 8002932:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002940:	4619      	mov	r1, r3
 8002942:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002944:	f7fd fe32 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002948:	e002      	b.n	8002950 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800294a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800294c:	f7ff ff50 	bl	80027f0 <HAL_UART_RxCpltCallback>
}
 8002950:	bf00      	nop
 8002952:	3770      	adds	r7, #112	; 0x70
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	b29b      	uxth	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fd fe14 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002984:	e002      	b.n	800298c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff3c 	bl	8002804 <HAL_UART_RxHalfCpltCallback>
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b80      	cmp	r3, #128	; 0x80
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b21      	cmp	r3, #33	; 0x21
 80029c6:	d108      	bne.n	80029da <UART_DMAError+0x46>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80029d4:	68b8      	ldr	r0, [r7, #8]
 80029d6:	f000 f8c1 	bl	8002b5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b22      	cmp	r3, #34	; 0x22
 80029fa:	d108      	bne.n	8002a0e <UART_DMAError+0x7a>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f000 f8cf 	bl	8002bac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f7ff fefc 	bl	8002818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b098      	sub	sp, #96	; 0x60
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2222      	movs	r2, #34	; 0x22
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <UART_Start_Receive_DMA+0x128>)
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <UART_Start_Receive_DMA+0x12c>)
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <UART_Start_Receive_DMA+0x130>)
 8002a66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	f7fe fa20 	bl	8000ecc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e5      	bne.n	8002aaa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	657b      	str	r3, [r7, #84]	; 0x54
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002afe:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e5      	bne.n	8002ade <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	617b      	str	r3, [r7, #20]
   return(result);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b28:	653b      	str	r3, [r7, #80]	; 0x50
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3314      	adds	r3, #20
 8002b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b32:	627a      	str	r2, [r7, #36]	; 0x24
 8002b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e5      	bne.n	8002b12 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3760      	adds	r7, #96	; 0x60
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	0800282d 	.word	0x0800282d
 8002b54:	08002959 	.word	0x08002959
 8002b58:	08002995 	.word	0x08002995

08002b5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	61ba      	str	r2, [r7, #24]
 8002b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6979      	ldr	r1, [r7, #20]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	613b      	str	r3, [r7, #16]
   return(result);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e5      	bne.n	8002b64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002ba0:	bf00      	nop
 8002ba2:	3724      	adds	r7, #36	; 0x24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b095      	sub	sp, #84	; 0x54
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd4:	643a      	str	r2, [r7, #64]	; 0x40
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e5      	bne.n	8002bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d119      	bne.n	8002c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0310 	bic.w	r3, r3, #16
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	61ba      	str	r2, [r7, #24]
 8002c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	613b      	str	r3, [r7, #16]
   return(result);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c66:	bf00      	nop
 8002c68:	3754      	adds	r7, #84	; 0x54
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fdc3 	bl	8002818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b21      	cmp	r3, #33	; 0x21
 8002cac:	d13e      	bne.n	8002d2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d114      	bne.n	8002ce2 <UART_Transmit_IT+0x48>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d110      	bne.n	8002ce2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	1c9a      	adds	r2, r3, #2
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]
 8002ce0:	e008      	b.n	8002cf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6211      	str	r1, [r2, #32]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fd3e 	bl	80027dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08c      	sub	sp, #48	; 0x30
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b22      	cmp	r3, #34	; 0x22
 8002d7c:	f040 80ae 	bne.w	8002edc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d117      	bne.n	8002dba <UART_Receive_IT+0x50>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
 8002db8:	e026      	b.n	8002e08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d007      	beq.n	8002dde <UART_Receive_IT+0x74>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <UART_Receive_IT+0x82>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e008      	b.n	8002dfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4619      	mov	r1, r3
 8002e16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d15d      	bne.n	8002ed8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0220 	bic.w	r2, r2, #32
 8002e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d135      	bne.n	8002ece <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	613b      	str	r3, [r7, #16]
   return(result);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f023 0310 	bic.w	r3, r3, #16
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	623a      	str	r2, [r7, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d10a      	bne.n	8002ec0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fb70 	bl	80005ac <HAL_UARTEx_RxEventCallback>
 8002ecc:	e002      	b.n	8002ed4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fc8e 	bl	80027f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e002      	b.n	8002ede <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3730      	adds	r7, #48	; 0x30
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b0c0      	sub	sp, #256	; 0x100
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	ea40 0301 	orr.w	r3, r0, r1
 8002f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f40:	f021 010c 	bic.w	r1, r1, #12
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	ea40 0301 	orr.w	r3, r0, r1
 8002f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8f      	ldr	r3, [pc, #572]	; (80031b4 <UART_SetConfig+0x2cc>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d005      	beq.n	8002f88 <UART_SetConfig+0xa0>
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <UART_SetConfig+0x2d0>)
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d104      	bne.n	8002f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7ff f8d4 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f90:	e003      	b.n	8002f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7ff f8bb 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8002f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	f040 810c 	bne.w	80031c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fca:	4621      	mov	r1, r4
 8002fcc:	eb12 0801 	adds.w	r8, r2, r1
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb43 0901 	adc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	eb49 0303 	adc.w	r3, r9, r3
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003016:	460b      	mov	r3, r1
 8003018:	18db      	adds	r3, r3, r3
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	4613      	mov	r3, r2
 800301e:	eb42 0303 	adc.w	r3, r2, r3
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
 8003024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800302c:	f7fd f928 	bl	8000280 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <UART_SetConfig+0x2d4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011c      	lsls	r4, r3, #4
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800304c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	64b9      	str	r1, [r7, #72]	; 0x48
 8003058:	415b      	adcs	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003060:	4641      	mov	r1, r8
 8003062:	eb12 0a01 	adds.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb43 0b01 	adc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800307c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003080:	4692      	mov	sl, r2
 8003082:	469b      	mov	fp, r3
 8003084:	4643      	mov	r3, r8
 8003086:	eb1a 0303 	adds.w	r3, sl, r3
 800308a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308e:	464b      	mov	r3, r9
 8003090:	eb4b 0303 	adc.w	r3, fp, r3
 8003094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030ac:	460b      	mov	r3, r1
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40
 80030b2:	4613      	mov	r3, r2
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030c2:	f7fd f8dd 	bl	8000280 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <UART_SetConfig+0x2d4>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f0:	441c      	add	r4, r3
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	63b9      	str	r1, [r7, #56]	; 0x38
 800310c:	415b      	adcs	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6339      	str	r1, [r7, #48]	; 0x30
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	464b      	mov	r3, r9
 800314a:	460a      	mov	r2, r1
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003168:	460b      	mov	r3, r1
 800316a:	18db      	adds	r3, r3, r3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	4613      	mov	r3, r2
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800317a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317e:	f7fd f87f 	bl	8000280 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <UART_SetConfig+0x2d4>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <UART_SetConfig+0x2d4>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4422      	add	r2, r4
 80031ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b0:	e106      	b.n	80033c0 <UART_SetConfig+0x4d8>
 80031b2:	bf00      	nop
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	6239      	str	r1, [r7, #32]
 80031da:	415b      	adcs	r3, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e2:	4641      	mov	r1, r8
 80031e4:	1854      	adds	r4, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb43 0501 	adc.w	r5, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	00eb      	lsls	r3, r5, #3
 80031f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fa:	00e2      	lsls	r2, r4, #3
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	4643      	mov	r3, r8
 8003202:	18e3      	adds	r3, r4, r3
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003208:	464b      	mov	r3, r9
 800320a:	eb45 0303 	adc.w	r3, r5, r3
 800320e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322e:	4629      	mov	r1, r5
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003238:	4621      	mov	r1, r4
 800323a:	008a      	lsls	r2, r1, #2
 800323c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003240:	f7fd f81e 	bl	8000280 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <UART_SetConfig+0x4e4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800325c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	61b9      	str	r1, [r7, #24]
 800326c:	415b      	adcs	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	4641      	mov	r1, r8
 8003276:	1851      	adds	r1, r2, r1
 8003278:	6139      	str	r1, [r7, #16]
 800327a:	4649      	mov	r1, r9
 800327c:	414b      	adcs	r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	00cb      	lsls	r3, r1, #3
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003296:	4651      	mov	r1, sl
 8003298:	00ca      	lsls	r2, r1, #3
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	4642      	mov	r2, r8
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a8:	464b      	mov	r3, r9
 80032aa:	460a      	mov	r2, r1
 80032ac:	eb42 0303 	adc.w	r3, r2, r3
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032cc:	4649      	mov	r1, r9
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d6:	4641      	mov	r1, r8
 80032d8:	008a      	lsls	r2, r1, #2
 80032da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b38      	ldr	r3, [pc, #224]	; (80033cc <UART_SetConfig+0x4e4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a33      	ldr	r2, [pc, #204]	; (80033cc <UART_SetConfig+0x4e4>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003308:	441c      	add	r4, r3
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	673b      	str	r3, [r7, #112]	; 0x70
 8003312:	677a      	str	r2, [r7, #116]	; 0x74
 8003314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	415b      	adcs	r3, r3
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003328:	4641      	mov	r1, r8
 800332a:	1851      	adds	r1, r2, r1
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	4649      	mov	r1, r9
 8003330:	414b      	adcs	r3, r1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003340:	4659      	mov	r1, fp
 8003342:	00cb      	lsls	r3, r1, #3
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334a:	4651      	mov	r1, sl
 800334c:	00ca      	lsls	r2, r1, #3
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	4603      	mov	r3, r0
 8003354:	4642      	mov	r2, r8
 8003356:	189b      	adds	r3, r3, r2
 8003358:	66bb      	str	r3, [r7, #104]	; 0x68
 800335a:	464b      	mov	r3, r9
 800335c:	460a      	mov	r2, r1
 800335e:	eb42 0303 	adc.w	r3, r2, r3
 8003362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	663b      	str	r3, [r7, #96]	; 0x60
 800336e:	667a      	str	r2, [r7, #100]	; 0x64
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800337c:	4649      	mov	r1, r9
 800337e:	008b      	lsls	r3, r1, #2
 8003380:	4641      	mov	r1, r8
 8003382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003386:	4641      	mov	r1, r8
 8003388:	008a      	lsls	r2, r1, #2
 800338a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338e:	f7fc ff77 	bl	8000280 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x4e4>)
 8003398:	fba3 1302 	umull	r1, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2164      	movs	r1, #100	; 0x64
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x4e4>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4422      	add	r2, r4
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	bf00      	nop
 80033c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c6:	46bd      	mov	sp, r7
 80033c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <siscanf>:
 80033d0:	b40e      	push	{r1, r2, r3}
 80033d2:	b510      	push	{r4, lr}
 80033d4:	b09f      	sub	sp, #124	; 0x7c
 80033d6:	ac21      	add	r4, sp, #132	; 0x84
 80033d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80033dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80033e0:	9201      	str	r2, [sp, #4]
 80033e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80033e6:	9004      	str	r0, [sp, #16]
 80033e8:	9008      	str	r0, [sp, #32]
 80033ea:	f7fc fef1 	bl	80001d0 <strlen>
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <siscanf+0x50>)
 80033f0:	9005      	str	r0, [sp, #20]
 80033f2:	9009      	str	r0, [sp, #36]	; 0x24
 80033f4:	930d      	str	r3, [sp, #52]	; 0x34
 80033f6:	480b      	ldr	r0, [pc, #44]	; (8003424 <siscanf+0x54>)
 80033f8:	9a01      	ldr	r2, [sp, #4]
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	9403      	str	r4, [sp, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	9311      	str	r3, [sp, #68]	; 0x44
 8003402:	9316      	str	r3, [sp, #88]	; 0x58
 8003404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003408:	f8ad 301e 	strh.w	r3, [sp, #30]
 800340c:	a904      	add	r1, sp, #16
 800340e:	4623      	mov	r3, r4
 8003410:	f000 f992 	bl	8003738 <__ssvfiscanf_r>
 8003414:	b01f      	add	sp, #124	; 0x7c
 8003416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341a:	b003      	add	sp, #12
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	08003429 	.word	0x08003429
 8003424:	20000058 	.word	0x20000058

08003428 <__seofread>:
 8003428:	2000      	movs	r0, #0
 800342a:	4770      	bx	lr

0800342c <memset>:
 800342c:	4402      	add	r2, r0
 800342e:	4603      	mov	r3, r0
 8003430:	4293      	cmp	r3, r2
 8003432:	d100      	bne.n	8003436 <memset+0xa>
 8003434:	4770      	bx	lr
 8003436:	f803 1b01 	strb.w	r1, [r3], #1
 800343a:	e7f9      	b.n	8003430 <memset+0x4>

0800343c <__errno>:
 800343c:	4b01      	ldr	r3, [pc, #4]	; (8003444 <__errno+0x8>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000058 	.word	0x20000058

08003448 <__libc_init_array>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	4d0d      	ldr	r5, [pc, #52]	; (8003480 <__libc_init_array+0x38>)
 800344c:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <__libc_init_array+0x3c>)
 800344e:	1b64      	subs	r4, r4, r5
 8003450:	10a4      	asrs	r4, r4, #2
 8003452:	2600      	movs	r6, #0
 8003454:	42a6      	cmp	r6, r4
 8003456:	d109      	bne.n	800346c <__libc_init_array+0x24>
 8003458:	4d0b      	ldr	r5, [pc, #44]	; (8003488 <__libc_init_array+0x40>)
 800345a:	4c0c      	ldr	r4, [pc, #48]	; (800348c <__libc_init_array+0x44>)
 800345c:	f000 fdf4 	bl	8004048 <_init>
 8003460:	1b64      	subs	r4, r4, r5
 8003462:	10a4      	asrs	r4, r4, #2
 8003464:	2600      	movs	r6, #0
 8003466:	42a6      	cmp	r6, r4
 8003468:	d105      	bne.n	8003476 <__libc_init_array+0x2e>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003470:	4798      	blx	r3
 8003472:	3601      	adds	r6, #1
 8003474:	e7ee      	b.n	8003454 <__libc_init_array+0xc>
 8003476:	f855 3b04 	ldr.w	r3, [r5], #4
 800347a:	4798      	blx	r3
 800347c:	3601      	adds	r6, #1
 800347e:	e7f2      	b.n	8003466 <__libc_init_array+0x1e>
 8003480:	080041bc 	.word	0x080041bc
 8003484:	080041bc 	.word	0x080041bc
 8003488:	080041bc 	.word	0x080041bc
 800348c:	080041c0 	.word	0x080041c0

08003490 <__retarget_lock_acquire_recursive>:
 8003490:	4770      	bx	lr

08003492 <__retarget_lock_release_recursive>:
 8003492:	4770      	bx	lr

08003494 <_free_r>:
 8003494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003496:	2900      	cmp	r1, #0
 8003498:	d044      	beq.n	8003524 <_free_r+0x90>
 800349a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800349e:	9001      	str	r0, [sp, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f1a1 0404 	sub.w	r4, r1, #4
 80034a6:	bfb8      	it	lt
 80034a8:	18e4      	addlt	r4, r4, r3
 80034aa:	f000 f8df 	bl	800366c <__malloc_lock>
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <_free_r+0x94>)
 80034b0:	9801      	ldr	r0, [sp, #4]
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	b933      	cbnz	r3, 80034c4 <_free_r+0x30>
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	6014      	str	r4, [r2, #0]
 80034ba:	b003      	add	sp, #12
 80034bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034c0:	f000 b8da 	b.w	8003678 <__malloc_unlock>
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	d908      	bls.n	80034da <_free_r+0x46>
 80034c8:	6825      	ldr	r5, [r4, #0]
 80034ca:	1961      	adds	r1, r4, r5
 80034cc:	428b      	cmp	r3, r1
 80034ce:	bf01      	itttt	eq
 80034d0:	6819      	ldreq	r1, [r3, #0]
 80034d2:	685b      	ldreq	r3, [r3, #4]
 80034d4:	1949      	addeq	r1, r1, r5
 80034d6:	6021      	streq	r1, [r4, #0]
 80034d8:	e7ed      	b.n	80034b6 <_free_r+0x22>
 80034da:	461a      	mov	r2, r3
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b10b      	cbz	r3, 80034e4 <_free_r+0x50>
 80034e0:	42a3      	cmp	r3, r4
 80034e2:	d9fa      	bls.n	80034da <_free_r+0x46>
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	1855      	adds	r5, r2, r1
 80034e8:	42a5      	cmp	r5, r4
 80034ea:	d10b      	bne.n	8003504 <_free_r+0x70>
 80034ec:	6824      	ldr	r4, [r4, #0]
 80034ee:	4421      	add	r1, r4
 80034f0:	1854      	adds	r4, r2, r1
 80034f2:	42a3      	cmp	r3, r4
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	d1e0      	bne.n	80034ba <_free_r+0x26>
 80034f8:	681c      	ldr	r4, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	6053      	str	r3, [r2, #4]
 80034fe:	440c      	add	r4, r1
 8003500:	6014      	str	r4, [r2, #0]
 8003502:	e7da      	b.n	80034ba <_free_r+0x26>
 8003504:	d902      	bls.n	800350c <_free_r+0x78>
 8003506:	230c      	movs	r3, #12
 8003508:	6003      	str	r3, [r0, #0]
 800350a:	e7d6      	b.n	80034ba <_free_r+0x26>
 800350c:	6825      	ldr	r5, [r4, #0]
 800350e:	1961      	adds	r1, r4, r5
 8003510:	428b      	cmp	r3, r1
 8003512:	bf04      	itt	eq
 8003514:	6819      	ldreq	r1, [r3, #0]
 8003516:	685b      	ldreq	r3, [r3, #4]
 8003518:	6063      	str	r3, [r4, #4]
 800351a:	bf04      	itt	eq
 800351c:	1949      	addeq	r1, r1, r5
 800351e:	6021      	streq	r1, [r4, #0]
 8003520:	6054      	str	r4, [r2, #4]
 8003522:	e7ca      	b.n	80034ba <_free_r+0x26>
 8003524:	b003      	add	sp, #12
 8003526:	bd30      	pop	{r4, r5, pc}
 8003528:	20000284 	.word	0x20000284

0800352c <sbrk_aligned>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4e0e      	ldr	r6, [pc, #56]	; (8003568 <sbrk_aligned+0x3c>)
 8003530:	460c      	mov	r4, r1
 8003532:	6831      	ldr	r1, [r6, #0]
 8003534:	4605      	mov	r5, r0
 8003536:	b911      	cbnz	r1, 800353e <sbrk_aligned+0x12>
 8003538:	f000 fc38 	bl	8003dac <_sbrk_r>
 800353c:	6030      	str	r0, [r6, #0]
 800353e:	4621      	mov	r1, r4
 8003540:	4628      	mov	r0, r5
 8003542:	f000 fc33 	bl	8003dac <_sbrk_r>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d00a      	beq.n	8003560 <sbrk_aligned+0x34>
 800354a:	1cc4      	adds	r4, r0, #3
 800354c:	f024 0403 	bic.w	r4, r4, #3
 8003550:	42a0      	cmp	r0, r4
 8003552:	d007      	beq.n	8003564 <sbrk_aligned+0x38>
 8003554:	1a21      	subs	r1, r4, r0
 8003556:	4628      	mov	r0, r5
 8003558:	f000 fc28 	bl	8003dac <_sbrk_r>
 800355c:	3001      	adds	r0, #1
 800355e:	d101      	bne.n	8003564 <sbrk_aligned+0x38>
 8003560:	f04f 34ff 	mov.w	r4, #4294967295
 8003564:	4620      	mov	r0, r4
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	20000288 	.word	0x20000288

0800356c <_malloc_r>:
 800356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003570:	1ccd      	adds	r5, r1, #3
 8003572:	f025 0503 	bic.w	r5, r5, #3
 8003576:	3508      	adds	r5, #8
 8003578:	2d0c      	cmp	r5, #12
 800357a:	bf38      	it	cc
 800357c:	250c      	movcc	r5, #12
 800357e:	2d00      	cmp	r5, #0
 8003580:	4607      	mov	r7, r0
 8003582:	db01      	blt.n	8003588 <_malloc_r+0x1c>
 8003584:	42a9      	cmp	r1, r5
 8003586:	d905      	bls.n	8003594 <_malloc_r+0x28>
 8003588:	230c      	movs	r3, #12
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	2600      	movs	r6, #0
 800358e:	4630      	mov	r0, r6
 8003590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003668 <_malloc_r+0xfc>
 8003598:	f000 f868 	bl	800366c <__malloc_lock>
 800359c:	f8d8 3000 	ldr.w	r3, [r8]
 80035a0:	461c      	mov	r4, r3
 80035a2:	bb5c      	cbnz	r4, 80035fc <_malloc_r+0x90>
 80035a4:	4629      	mov	r1, r5
 80035a6:	4638      	mov	r0, r7
 80035a8:	f7ff ffc0 	bl	800352c <sbrk_aligned>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	4604      	mov	r4, r0
 80035b0:	d155      	bne.n	800365e <_malloc_r+0xf2>
 80035b2:	f8d8 4000 	ldr.w	r4, [r8]
 80035b6:	4626      	mov	r6, r4
 80035b8:	2e00      	cmp	r6, #0
 80035ba:	d145      	bne.n	8003648 <_malloc_r+0xdc>
 80035bc:	2c00      	cmp	r4, #0
 80035be:	d048      	beq.n	8003652 <_malloc_r+0xe6>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	4631      	mov	r1, r6
 80035c4:	4638      	mov	r0, r7
 80035c6:	eb04 0903 	add.w	r9, r4, r3
 80035ca:	f000 fbef 	bl	8003dac <_sbrk_r>
 80035ce:	4581      	cmp	r9, r0
 80035d0:	d13f      	bne.n	8003652 <_malloc_r+0xe6>
 80035d2:	6821      	ldr	r1, [r4, #0]
 80035d4:	1a6d      	subs	r5, r5, r1
 80035d6:	4629      	mov	r1, r5
 80035d8:	4638      	mov	r0, r7
 80035da:	f7ff ffa7 	bl	800352c <sbrk_aligned>
 80035de:	3001      	adds	r0, #1
 80035e0:	d037      	beq.n	8003652 <_malloc_r+0xe6>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	442b      	add	r3, r5
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	f8d8 3000 	ldr.w	r3, [r8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d038      	beq.n	8003662 <_malloc_r+0xf6>
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	42a2      	cmp	r2, r4
 80035f4:	d12b      	bne.n	800364e <_malloc_r+0xe2>
 80035f6:	2200      	movs	r2, #0
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	e00f      	b.n	800361c <_malloc_r+0xb0>
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	1b52      	subs	r2, r2, r5
 8003600:	d41f      	bmi.n	8003642 <_malloc_r+0xd6>
 8003602:	2a0b      	cmp	r2, #11
 8003604:	d917      	bls.n	8003636 <_malloc_r+0xca>
 8003606:	1961      	adds	r1, r4, r5
 8003608:	42a3      	cmp	r3, r4
 800360a:	6025      	str	r5, [r4, #0]
 800360c:	bf18      	it	ne
 800360e:	6059      	strne	r1, [r3, #4]
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	bf08      	it	eq
 8003614:	f8c8 1000 	streq.w	r1, [r8]
 8003618:	5162      	str	r2, [r4, r5]
 800361a:	604b      	str	r3, [r1, #4]
 800361c:	4638      	mov	r0, r7
 800361e:	f104 060b 	add.w	r6, r4, #11
 8003622:	f000 f829 	bl	8003678 <__malloc_unlock>
 8003626:	f026 0607 	bic.w	r6, r6, #7
 800362a:	1d23      	adds	r3, r4, #4
 800362c:	1af2      	subs	r2, r6, r3
 800362e:	d0ae      	beq.n	800358e <_malloc_r+0x22>
 8003630:	1b9b      	subs	r3, r3, r6
 8003632:	50a3      	str	r3, [r4, r2]
 8003634:	e7ab      	b.n	800358e <_malloc_r+0x22>
 8003636:	42a3      	cmp	r3, r4
 8003638:	6862      	ldr	r2, [r4, #4]
 800363a:	d1dd      	bne.n	80035f8 <_malloc_r+0x8c>
 800363c:	f8c8 2000 	str.w	r2, [r8]
 8003640:	e7ec      	b.n	800361c <_malloc_r+0xb0>
 8003642:	4623      	mov	r3, r4
 8003644:	6864      	ldr	r4, [r4, #4]
 8003646:	e7ac      	b.n	80035a2 <_malloc_r+0x36>
 8003648:	4634      	mov	r4, r6
 800364a:	6876      	ldr	r6, [r6, #4]
 800364c:	e7b4      	b.n	80035b8 <_malloc_r+0x4c>
 800364e:	4613      	mov	r3, r2
 8003650:	e7cc      	b.n	80035ec <_malloc_r+0x80>
 8003652:	230c      	movs	r3, #12
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4638      	mov	r0, r7
 8003658:	f000 f80e 	bl	8003678 <__malloc_unlock>
 800365c:	e797      	b.n	800358e <_malloc_r+0x22>
 800365e:	6025      	str	r5, [r4, #0]
 8003660:	e7dc      	b.n	800361c <_malloc_r+0xb0>
 8003662:	605b      	str	r3, [r3, #4]
 8003664:	deff      	udf	#255	; 0xff
 8003666:	bf00      	nop
 8003668:	20000284 	.word	0x20000284

0800366c <__malloc_lock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_lock+0x8>)
 800366e:	f7ff bf0f 	b.w	8003490 <__retarget_lock_acquire_recursive>
 8003672:	bf00      	nop
 8003674:	20000280 	.word	0x20000280

08003678 <__malloc_unlock>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__malloc_unlock+0x8>)
 800367a:	f7ff bf0a 	b.w	8003492 <__retarget_lock_release_recursive>
 800367e:	bf00      	nop
 8003680:	20000280 	.word	0x20000280

08003684 <_sungetc_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	1c4b      	adds	r3, r1, #1
 8003688:	4614      	mov	r4, r2
 800368a:	d103      	bne.n	8003694 <_sungetc_r+0x10>
 800368c:	f04f 35ff 	mov.w	r5, #4294967295
 8003690:	4628      	mov	r0, r5
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	8993      	ldrh	r3, [r2, #12]
 8003696:	f023 0320 	bic.w	r3, r3, #32
 800369a:	8193      	strh	r3, [r2, #12]
 800369c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800369e:	6852      	ldr	r2, [r2, #4]
 80036a0:	b2cd      	uxtb	r5, r1
 80036a2:	b18b      	cbz	r3, 80036c8 <_sungetc_r+0x44>
 80036a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036a6:	4293      	cmp	r3, r2
 80036a8:	dd08      	ble.n	80036bc <_sungetc_r+0x38>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	6022      	str	r2, [r4, #0]
 80036b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	3301      	adds	r3, #1
 80036b8:	6063      	str	r3, [r4, #4]
 80036ba:	e7e9      	b.n	8003690 <_sungetc_r+0xc>
 80036bc:	4621      	mov	r1, r4
 80036be:	f000 fb3a 	bl	8003d36 <__submore>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d0f1      	beq.n	80036aa <_sungetc_r+0x26>
 80036c6:	e7e1      	b.n	800368c <_sungetc_r+0x8>
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	b151      	cbz	r1, 80036e4 <_sungetc_r+0x60>
 80036ce:	4299      	cmp	r1, r3
 80036d0:	d208      	bcs.n	80036e4 <_sungetc_r+0x60>
 80036d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80036d6:	42a9      	cmp	r1, r5
 80036d8:	d104      	bne.n	80036e4 <_sungetc_r+0x60>
 80036da:	3b01      	subs	r3, #1
 80036dc:	3201      	adds	r2, #1
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	e7d5      	b.n	8003690 <_sungetc_r+0xc>
 80036e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80036e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ec:	6363      	str	r3, [r4, #52]	; 0x34
 80036ee:	2303      	movs	r3, #3
 80036f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80036f2:	4623      	mov	r3, r4
 80036f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	2301      	movs	r3, #1
 80036fc:	e7dc      	b.n	80036b8 <_sungetc_r+0x34>

080036fe <__ssrefill_r>:
 80036fe:	b510      	push	{r4, lr}
 8003700:	460c      	mov	r4, r1
 8003702:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003704:	b169      	cbz	r1, 8003722 <__ssrefill_r+0x24>
 8003706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800370a:	4299      	cmp	r1, r3
 800370c:	d001      	beq.n	8003712 <__ssrefill_r+0x14>
 800370e:	f7ff fec1 	bl	8003494 <_free_r>
 8003712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	2000      	movs	r0, #0
 8003718:	6360      	str	r0, [r4, #52]	; 0x34
 800371a:	b113      	cbz	r3, 8003722 <__ssrefill_r+0x24>
 800371c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	bd10      	pop	{r4, pc}
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	e7f3      	b.n	8003720 <__ssrefill_r+0x22>

08003738 <__ssvfiscanf_r>:
 8003738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800373c:	460c      	mov	r4, r1
 800373e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003742:	2100      	movs	r1, #0
 8003744:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003748:	49a6      	ldr	r1, [pc, #664]	; (80039e4 <__ssvfiscanf_r+0x2ac>)
 800374a:	91a0      	str	r1, [sp, #640]	; 0x280
 800374c:	f10d 0804 	add.w	r8, sp, #4
 8003750:	49a5      	ldr	r1, [pc, #660]	; (80039e8 <__ssvfiscanf_r+0x2b0>)
 8003752:	4fa6      	ldr	r7, [pc, #664]	; (80039ec <__ssvfiscanf_r+0x2b4>)
 8003754:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80039f0 <__ssvfiscanf_r+0x2b8>
 8003758:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800375c:	4606      	mov	r6, r0
 800375e:	91a1      	str	r1, [sp, #644]	; 0x284
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	7813      	ldrb	r3, [r2, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 815a 	beq.w	8003a1e <__ssvfiscanf_r+0x2e6>
 800376a:	5cf9      	ldrb	r1, [r7, r3]
 800376c:	f011 0108 	ands.w	r1, r1, #8
 8003770:	f102 0501 	add.w	r5, r2, #1
 8003774:	d019      	beq.n	80037aa <__ssvfiscanf_r+0x72>
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	dd0f      	ble.n	800379c <__ssvfiscanf_r+0x64>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	5cba      	ldrb	r2, [r7, r2]
 8003782:	0712      	lsls	r2, r2, #28
 8003784:	d401      	bmi.n	800378a <__ssvfiscanf_r+0x52>
 8003786:	462a      	mov	r2, r5
 8003788:	e7eb      	b.n	8003762 <__ssvfiscanf_r+0x2a>
 800378a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800378c:	3201      	adds	r2, #1
 800378e:	9245      	str	r2, [sp, #276]	; 0x114
 8003790:	6862      	ldr	r2, [r4, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	3a01      	subs	r2, #1
 8003796:	6062      	str	r2, [r4, #4]
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	e7ec      	b.n	8003776 <__ssvfiscanf_r+0x3e>
 800379c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800379e:	4621      	mov	r1, r4
 80037a0:	4630      	mov	r0, r6
 80037a2:	4798      	blx	r3
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0e9      	beq.n	800377c <__ssvfiscanf_r+0x44>
 80037a8:	e7ed      	b.n	8003786 <__ssvfiscanf_r+0x4e>
 80037aa:	2b25      	cmp	r3, #37	; 0x25
 80037ac:	d012      	beq.n	80037d4 <__ssvfiscanf_r+0x9c>
 80037ae:	469a      	mov	sl, r3
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f340 8091 	ble.w	80038da <__ssvfiscanf_r+0x1a2>
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	7813      	ldrb	r3, [r2, #0]
 80037bc:	4553      	cmp	r3, sl
 80037be:	f040 812e 	bne.w	8003a1e <__ssvfiscanf_r+0x2e6>
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80037ca:	3201      	adds	r2, #1
 80037cc:	3301      	adds	r3, #1
 80037ce:	6022      	str	r2, [r4, #0]
 80037d0:	9345      	str	r3, [sp, #276]	; 0x114
 80037d2:	e7d8      	b.n	8003786 <__ssvfiscanf_r+0x4e>
 80037d4:	9141      	str	r1, [sp, #260]	; 0x104
 80037d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80037d8:	7853      	ldrb	r3, [r2, #1]
 80037da:	2b2a      	cmp	r3, #42	; 0x2a
 80037dc:	bf02      	ittt	eq
 80037de:	2310      	moveq	r3, #16
 80037e0:	1c95      	addeq	r5, r2, #2
 80037e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80037e4:	220a      	movs	r2, #10
 80037e6:	46aa      	mov	sl, r5
 80037e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80037ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d91c      	bls.n	800382e <__ssvfiscanf_r+0xf6>
 80037f4:	487e      	ldr	r0, [pc, #504]	; (80039f0 <__ssvfiscanf_r+0x2b8>)
 80037f6:	2203      	movs	r2, #3
 80037f8:	f7fc fcf2 	bl	80001e0 <memchr>
 80037fc:	b138      	cbz	r0, 800380e <__ssvfiscanf_r+0xd6>
 80037fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003800:	eba0 0009 	sub.w	r0, r0, r9
 8003804:	2301      	movs	r3, #1
 8003806:	4083      	lsls	r3, r0
 8003808:	4313      	orrs	r3, r2
 800380a:	9341      	str	r3, [sp, #260]	; 0x104
 800380c:	4655      	mov	r5, sl
 800380e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003812:	2b78      	cmp	r3, #120	; 0x78
 8003814:	d806      	bhi.n	8003824 <__ssvfiscanf_r+0xec>
 8003816:	2b57      	cmp	r3, #87	; 0x57
 8003818:	d810      	bhi.n	800383c <__ssvfiscanf_r+0x104>
 800381a:	2b25      	cmp	r3, #37	; 0x25
 800381c:	d0c7      	beq.n	80037ae <__ssvfiscanf_r+0x76>
 800381e:	d857      	bhi.n	80038d0 <__ssvfiscanf_r+0x198>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d065      	beq.n	80038f0 <__ssvfiscanf_r+0x1b8>
 8003824:	2303      	movs	r3, #3
 8003826:	9347      	str	r3, [sp, #284]	; 0x11c
 8003828:	230a      	movs	r3, #10
 800382a:	9342      	str	r3, [sp, #264]	; 0x108
 800382c:	e076      	b.n	800391c <__ssvfiscanf_r+0x1e4>
 800382e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003830:	fb02 1103 	mla	r1, r2, r3, r1
 8003834:	3930      	subs	r1, #48	; 0x30
 8003836:	9143      	str	r1, [sp, #268]	; 0x10c
 8003838:	4655      	mov	r5, sl
 800383a:	e7d4      	b.n	80037e6 <__ssvfiscanf_r+0xae>
 800383c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003840:	2a20      	cmp	r2, #32
 8003842:	d8ef      	bhi.n	8003824 <__ssvfiscanf_r+0xec>
 8003844:	a101      	add	r1, pc, #4	; (adr r1, 800384c <__ssvfiscanf_r+0x114>)
 8003846:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800384a:	bf00      	nop
 800384c:	080038ff 	.word	0x080038ff
 8003850:	08003825 	.word	0x08003825
 8003854:	08003825 	.word	0x08003825
 8003858:	0800395d 	.word	0x0800395d
 800385c:	08003825 	.word	0x08003825
 8003860:	08003825 	.word	0x08003825
 8003864:	08003825 	.word	0x08003825
 8003868:	08003825 	.word	0x08003825
 800386c:	08003825 	.word	0x08003825
 8003870:	08003825 	.word	0x08003825
 8003874:	08003825 	.word	0x08003825
 8003878:	08003973 	.word	0x08003973
 800387c:	08003959 	.word	0x08003959
 8003880:	080038d7 	.word	0x080038d7
 8003884:	080038d7 	.word	0x080038d7
 8003888:	080038d7 	.word	0x080038d7
 800388c:	08003825 	.word	0x08003825
 8003890:	08003915 	.word	0x08003915
 8003894:	08003825 	.word	0x08003825
 8003898:	08003825 	.word	0x08003825
 800389c:	08003825 	.word	0x08003825
 80038a0:	08003825 	.word	0x08003825
 80038a4:	08003983 	.word	0x08003983
 80038a8:	08003951 	.word	0x08003951
 80038ac:	080038f7 	.word	0x080038f7
 80038b0:	08003825 	.word	0x08003825
 80038b4:	08003825 	.word	0x08003825
 80038b8:	0800397f 	.word	0x0800397f
 80038bc:	08003825 	.word	0x08003825
 80038c0:	08003959 	.word	0x08003959
 80038c4:	08003825 	.word	0x08003825
 80038c8:	08003825 	.word	0x08003825
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	3b45      	subs	r3, #69	; 0x45
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d8a6      	bhi.n	8003824 <__ssvfiscanf_r+0xec>
 80038d6:	2305      	movs	r3, #5
 80038d8:	e01f      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 80038da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80038dc:	4621      	mov	r1, r4
 80038de:	4630      	mov	r0, r6
 80038e0:	4798      	blx	r3
 80038e2:	2800      	cmp	r0, #0
 80038e4:	f43f af68 	beq.w	80037b8 <__ssvfiscanf_r+0x80>
 80038e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80038ea:	2800      	cmp	r0, #0
 80038ec:	f040 808d 	bne.w	8003a0a <__ssvfiscanf_r+0x2d2>
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	e08f      	b.n	8003a16 <__ssvfiscanf_r+0x2de>
 80038f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80038f8:	f042 0220 	orr.w	r2, r2, #32
 80038fc:	9241      	str	r2, [sp, #260]	; 0x104
 80038fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	9241      	str	r2, [sp, #260]	; 0x104
 8003906:	2210      	movs	r2, #16
 8003908:	2b6f      	cmp	r3, #111	; 0x6f
 800390a:	9242      	str	r2, [sp, #264]	; 0x108
 800390c:	bf34      	ite	cc
 800390e:	2303      	movcc	r3, #3
 8003910:	2304      	movcs	r3, #4
 8003912:	e002      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 8003914:	2300      	movs	r3, #0
 8003916:	9342      	str	r3, [sp, #264]	; 0x108
 8003918:	2303      	movs	r3, #3
 800391a:	9347      	str	r3, [sp, #284]	; 0x11c
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	dd3d      	ble.n	800399e <__ssvfiscanf_r+0x266>
 8003922:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003924:	0659      	lsls	r1, r3, #25
 8003926:	d404      	bmi.n	8003932 <__ssvfiscanf_r+0x1fa>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	5cba      	ldrb	r2, [r7, r2]
 800392e:	0712      	lsls	r2, r2, #28
 8003930:	d43c      	bmi.n	80039ac <__ssvfiscanf_r+0x274>
 8003932:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003934:	2b02      	cmp	r3, #2
 8003936:	dc4b      	bgt.n	80039d0 <__ssvfiscanf_r+0x298>
 8003938:	466b      	mov	r3, sp
 800393a:	4622      	mov	r2, r4
 800393c:	a941      	add	r1, sp, #260	; 0x104
 800393e:	4630      	mov	r0, r6
 8003940:	f000 f872 	bl	8003a28 <_scanf_chars>
 8003944:	2801      	cmp	r0, #1
 8003946:	d06a      	beq.n	8003a1e <__ssvfiscanf_r+0x2e6>
 8003948:	2802      	cmp	r0, #2
 800394a:	f47f af1c 	bne.w	8003786 <__ssvfiscanf_r+0x4e>
 800394e:	e7cb      	b.n	80038e8 <__ssvfiscanf_r+0x1b0>
 8003950:	2308      	movs	r3, #8
 8003952:	9342      	str	r3, [sp, #264]	; 0x108
 8003954:	2304      	movs	r3, #4
 8003956:	e7e0      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 8003958:	220a      	movs	r2, #10
 800395a:	e7d5      	b.n	8003908 <__ssvfiscanf_r+0x1d0>
 800395c:	4629      	mov	r1, r5
 800395e:	4640      	mov	r0, r8
 8003960:	f000 f9b0 	bl	8003cc4 <__sccl>
 8003964:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396a:	9341      	str	r3, [sp, #260]	; 0x104
 800396c:	4605      	mov	r5, r0
 800396e:	2301      	movs	r3, #1
 8003970:	e7d3      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 8003972:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003978:	9341      	str	r3, [sp, #260]	; 0x104
 800397a:	2300      	movs	r3, #0
 800397c:	e7cd      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 800397e:	2302      	movs	r3, #2
 8003980:	e7cb      	b.n	800391a <__ssvfiscanf_r+0x1e2>
 8003982:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003984:	06c3      	lsls	r3, r0, #27
 8003986:	f53f aefe 	bmi.w	8003786 <__ssvfiscanf_r+0x4e>
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800398e:	1d19      	adds	r1, r3, #4
 8003990:	9100      	str	r1, [sp, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	07c0      	lsls	r0, r0, #31
 8003996:	bf4c      	ite	mi
 8003998:	801a      	strhmi	r2, [r3, #0]
 800399a:	601a      	strpl	r2, [r3, #0]
 800399c:	e6f3      	b.n	8003786 <__ssvfiscanf_r+0x4e>
 800399e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80039a0:	4621      	mov	r1, r4
 80039a2:	4630      	mov	r0, r6
 80039a4:	4798      	blx	r3
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d0bb      	beq.n	8003922 <__ssvfiscanf_r+0x1ea>
 80039aa:	e79d      	b.n	80038e8 <__ssvfiscanf_r+0x1b0>
 80039ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039ae:	3201      	adds	r2, #1
 80039b0:	9245      	str	r2, [sp, #276]	; 0x114
 80039b2:	6862      	ldr	r2, [r4, #4]
 80039b4:	3a01      	subs	r2, #1
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	6062      	str	r2, [r4, #4]
 80039ba:	dd02      	ble.n	80039c2 <__ssvfiscanf_r+0x28a>
 80039bc:	3301      	adds	r3, #1
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	e7b2      	b.n	8003928 <__ssvfiscanf_r+0x1f0>
 80039c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80039c4:	4621      	mov	r1, r4
 80039c6:	4630      	mov	r0, r6
 80039c8:	4798      	blx	r3
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d0ac      	beq.n	8003928 <__ssvfiscanf_r+0x1f0>
 80039ce:	e78b      	b.n	80038e8 <__ssvfiscanf_r+0x1b0>
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	dc0f      	bgt.n	80039f4 <__ssvfiscanf_r+0x2bc>
 80039d4:	466b      	mov	r3, sp
 80039d6:	4622      	mov	r2, r4
 80039d8:	a941      	add	r1, sp, #260	; 0x104
 80039da:	4630      	mov	r0, r6
 80039dc:	f000 f87e 	bl	8003adc <_scanf_i>
 80039e0:	e7b0      	b.n	8003944 <__ssvfiscanf_r+0x20c>
 80039e2:	bf00      	nop
 80039e4:	08003685 	.word	0x08003685
 80039e8:	080036ff 	.word	0x080036ff
 80039ec:	080040b4 	.word	0x080040b4
 80039f0:	08004094 	.word	0x08004094
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <__ssvfiscanf_r+0x2ec>)
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f43f aec5 	beq.w	8003786 <__ssvfiscanf_r+0x4e>
 80039fc:	466b      	mov	r3, sp
 80039fe:	4622      	mov	r2, r4
 8003a00:	a941      	add	r1, sp, #260	; 0x104
 8003a02:	4630      	mov	r0, r6
 8003a04:	f3af 8000 	nop.w
 8003a08:	e79c      	b.n	8003944 <__ssvfiscanf_r+0x20c>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a10:	bf18      	it	ne
 8003a12:	f04f 30ff 	movne.w	r0, #4294967295
 8003a16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a20:	e7f9      	b.n	8003a16 <__ssvfiscanf_r+0x2de>
 8003a22:	bf00      	nop
 8003a24:	00000000 	.word	0x00000000

08003a28 <_scanf_chars>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	688a      	ldr	r2, [r1, #8]
 8003a30:	4680      	mov	r8, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	b932      	cbnz	r2, 8003a44 <_scanf_chars+0x1c>
 8003a36:	698a      	ldr	r2, [r1, #24]
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2201      	moveq	r2, #1
 8003a3e:	f04f 32ff 	movne.w	r2, #4294967295
 8003a42:	608a      	str	r2, [r1, #8]
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003ad8 <_scanf_chars+0xb0>
 8003a4a:	06d1      	lsls	r1, r2, #27
 8003a4c:	bf5f      	itttt	pl
 8003a4e:	681a      	ldrpl	r2, [r3, #0]
 8003a50:	1d11      	addpl	r1, r2, #4
 8003a52:	6019      	strpl	r1, [r3, #0]
 8003a54:	6816      	ldrpl	r6, [r2, #0]
 8003a56:	2700      	movs	r7, #0
 8003a58:	69a0      	ldr	r0, [r4, #24]
 8003a5a:	b188      	cbz	r0, 8003a80 <_scanf_chars+0x58>
 8003a5c:	2801      	cmp	r0, #1
 8003a5e:	d107      	bne.n	8003a70 <_scanf_chars+0x48>
 8003a60:	682a      	ldr	r2, [r5, #0]
 8003a62:	7811      	ldrb	r1, [r2, #0]
 8003a64:	6962      	ldr	r2, [r4, #20]
 8003a66:	5c52      	ldrb	r2, [r2, r1]
 8003a68:	b952      	cbnz	r2, 8003a80 <_scanf_chars+0x58>
 8003a6a:	2f00      	cmp	r7, #0
 8003a6c:	d031      	beq.n	8003ad2 <_scanf_chars+0xaa>
 8003a6e:	e022      	b.n	8003ab6 <_scanf_chars+0x8e>
 8003a70:	2802      	cmp	r0, #2
 8003a72:	d120      	bne.n	8003ab6 <_scanf_chars+0x8e>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003a7c:	071b      	lsls	r3, r3, #28
 8003a7e:	d41a      	bmi.n	8003ab6 <_scanf_chars+0x8e>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	06da      	lsls	r2, r3, #27
 8003a84:	bf5e      	ittt	pl
 8003a86:	682b      	ldrpl	r3, [r5, #0]
 8003a88:	781b      	ldrbpl	r3, [r3, #0]
 8003a8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003a8e:	682a      	ldr	r2, [r5, #0]
 8003a90:	686b      	ldr	r3, [r5, #4]
 8003a92:	3201      	adds	r2, #1
 8003a94:	602a      	str	r2, [r5, #0]
 8003a96:	68a2      	ldr	r2, [r4, #8]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	606b      	str	r3, [r5, #4]
 8003a9e:	3701      	adds	r7, #1
 8003aa0:	60a2      	str	r2, [r4, #8]
 8003aa2:	b142      	cbz	r2, 8003ab6 <_scanf_chars+0x8e>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dcd7      	bgt.n	8003a58 <_scanf_chars+0x30>
 8003aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003aac:	4629      	mov	r1, r5
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4798      	blx	r3
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d0d0      	beq.n	8003a58 <_scanf_chars+0x30>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f013 0310 	ands.w	r3, r3, #16
 8003abc:	d105      	bne.n	8003aca <_scanf_chars+0xa2>
 8003abe:	68e2      	ldr	r2, [r4, #12]
 8003ac0:	3201      	adds	r2, #1
 8003ac2:	60e2      	str	r2, [r4, #12]
 8003ac4:	69a2      	ldr	r2, [r4, #24]
 8003ac6:	b102      	cbz	r2, 8003aca <_scanf_chars+0xa2>
 8003ac8:	7033      	strb	r3, [r6, #0]
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	443b      	add	r3, r7
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad6:	bf00      	nop
 8003ad8:	080040b4 	.word	0x080040b4

08003adc <_scanf_i>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	4698      	mov	r8, r3
 8003ae2:	4b74      	ldr	r3, [pc, #464]	; (8003cb4 <_scanf_i+0x1d8>)
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	4682      	mov	sl, r0
 8003ae8:	4616      	mov	r6, r2
 8003aea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aee:	b087      	sub	sp, #28
 8003af0:	ab03      	add	r3, sp, #12
 8003af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003af6:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <_scanf_i+0x1dc>)
 8003af8:	69a1      	ldr	r1, [r4, #24]
 8003afa:	4a70      	ldr	r2, [pc, #448]	; (8003cbc <_scanf_i+0x1e0>)
 8003afc:	2903      	cmp	r1, #3
 8003afe:	bf18      	it	ne
 8003b00:	461a      	movne	r2, r3
 8003b02:	68a3      	ldr	r3, [r4, #8]
 8003b04:	9201      	str	r2, [sp, #4]
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b0c:	bf88      	it	hi
 8003b0e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b12:	4627      	mov	r7, r4
 8003b14:	bf82      	ittt	hi
 8003b16:	eb03 0905 	addhi.w	r9, r3, r5
 8003b1a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b1e:	60a3      	strhi	r3, [r4, #8]
 8003b20:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003b24:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003b28:	bf98      	it	ls
 8003b2a:	f04f 0900 	movls.w	r9, #0
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	463d      	mov	r5, r7
 8003b32:	f04f 0b00 	mov.w	fp, #0
 8003b36:	6831      	ldr	r1, [r6, #0]
 8003b38:	ab03      	add	r3, sp, #12
 8003b3a:	7809      	ldrb	r1, [r1, #0]
 8003b3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f7fc fb4d 	bl	80001e0 <memchr>
 8003b46:	b328      	cbz	r0, 8003b94 <_scanf_i+0xb8>
 8003b48:	f1bb 0f01 	cmp.w	fp, #1
 8003b4c:	d159      	bne.n	8003c02 <_scanf_i+0x126>
 8003b4e:	6862      	ldr	r2, [r4, #4]
 8003b50:	b92a      	cbnz	r2, 8003b5e <_scanf_i+0x82>
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	2308      	movs	r3, #8
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	6063      	str	r3, [r4, #4]
 8003b5c:	6022      	str	r2, [r4, #0]
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003b64:	6022      	str	r2, [r4, #0]
 8003b66:	68a2      	ldr	r2, [r4, #8]
 8003b68:	1e51      	subs	r1, r2, #1
 8003b6a:	60a1      	str	r1, [r4, #8]
 8003b6c:	b192      	cbz	r2, 8003b94 <_scanf_i+0xb8>
 8003b6e:	6832      	ldr	r2, [r6, #0]
 8003b70:	1c51      	adds	r1, r2, #1
 8003b72:	6031      	str	r1, [r6, #0]
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	f805 2b01 	strb.w	r2, [r5], #1
 8003b7a:	6872      	ldr	r2, [r6, #4]
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	2a00      	cmp	r2, #0
 8003b80:	6072      	str	r2, [r6, #4]
 8003b82:	dc07      	bgt.n	8003b94 <_scanf_i+0xb8>
 8003b84:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	4790      	blx	r2
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f040 8085 	bne.w	8003c9e <_scanf_i+0x1c2>
 8003b94:	f10b 0b01 	add.w	fp, fp, #1
 8003b98:	f1bb 0f03 	cmp.w	fp, #3
 8003b9c:	d1cb      	bne.n	8003b36 <_scanf_i+0x5a>
 8003b9e:	6863      	ldr	r3, [r4, #4]
 8003ba0:	b90b      	cbnz	r3, 8003ba6 <_scanf_i+0xca>
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	6063      	str	r3, [r4, #4]
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	4945      	ldr	r1, [pc, #276]	; (8003cc0 <_scanf_i+0x1e4>)
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	1ac9      	subs	r1, r1, r3
 8003bae:	f000 f889 	bl	8003cc4 <__sccl>
 8003bb2:	f04f 0b00 	mov.w	fp, #0
 8003bb6:	68a3      	ldr	r3, [r4, #8]
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03d      	beq.n	8003c3a <_scanf_i+0x15e>
 8003bbe:	6831      	ldr	r1, [r6, #0]
 8003bc0:	6960      	ldr	r0, [r4, #20]
 8003bc2:	f891 c000 	ldrb.w	ip, [r1]
 8003bc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d035      	beq.n	8003c3a <_scanf_i+0x15e>
 8003bce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003bd2:	d124      	bne.n	8003c1e <_scanf_i+0x142>
 8003bd4:	0510      	lsls	r0, r2, #20
 8003bd6:	d522      	bpl.n	8003c1e <_scanf_i+0x142>
 8003bd8:	f10b 0b01 	add.w	fp, fp, #1
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	d003      	beq.n	8003bea <_scanf_i+0x10e>
 8003be2:	3301      	adds	r3, #1
 8003be4:	f109 39ff 	add.w	r9, r9, #4294967295
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	6873      	ldr	r3, [r6, #4]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	6073      	str	r3, [r6, #4]
 8003bf2:	dd1b      	ble.n	8003c2c <_scanf_i+0x150>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	68a3      	ldr	r3, [r4, #8]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	60a3      	str	r3, [r4, #8]
 8003c00:	e7d9      	b.n	8003bb6 <_scanf_i+0xda>
 8003c02:	f1bb 0f02 	cmp.w	fp, #2
 8003c06:	d1ae      	bne.n	8003b66 <_scanf_i+0x8a>
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003c0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c12:	d1bf      	bne.n	8003b94 <_scanf_i+0xb8>
 8003c14:	2310      	movs	r3, #16
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1c:	e7a2      	b.n	8003b64 <_scanf_i+0x88>
 8003c1e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003c22:	6022      	str	r2, [r4, #0]
 8003c24:	780b      	ldrb	r3, [r1, #0]
 8003c26:	f805 3b01 	strb.w	r3, [r5], #1
 8003c2a:	e7de      	b.n	8003bea <_scanf_i+0x10e>
 8003c2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c30:	4631      	mov	r1, r6
 8003c32:	4650      	mov	r0, sl
 8003c34:	4798      	blx	r3
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d0df      	beq.n	8003bfa <_scanf_i+0x11e>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	05d9      	lsls	r1, r3, #23
 8003c3e:	d50d      	bpl.n	8003c5c <_scanf_i+0x180>
 8003c40:	42bd      	cmp	r5, r7
 8003c42:	d909      	bls.n	8003c58 <_scanf_i+0x17c>
 8003c44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4650      	mov	r0, sl
 8003c50:	4798      	blx	r3
 8003c52:	f105 39ff 	add.w	r9, r5, #4294967295
 8003c56:	464d      	mov	r5, r9
 8003c58:	42bd      	cmp	r5, r7
 8003c5a:	d028      	beq.n	8003cae <_scanf_i+0x1d2>
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	f012 0210 	ands.w	r2, r2, #16
 8003c62:	d113      	bne.n	8003c8c <_scanf_i+0x1b0>
 8003c64:	702a      	strb	r2, [r5, #0]
 8003c66:	6863      	ldr	r3, [r4, #4]
 8003c68:	9e01      	ldr	r6, [sp, #4]
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	47b0      	blx	r6
 8003c70:	f8d8 3000 	ldr.w	r3, [r8]
 8003c74:	6821      	ldr	r1, [r4, #0]
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	f8c8 2000 	str.w	r2, [r8]
 8003c7c:	f011 0f20 	tst.w	r1, #32
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	d00f      	beq.n	8003ca4 <_scanf_i+0x1c8>
 8003c84:	6018      	str	r0, [r3, #0]
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60e3      	str	r3, [r4, #12]
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	1bed      	subs	r5, r5, r7
 8003c90:	445d      	add	r5, fp
 8003c92:	442b      	add	r3, r5
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	2000      	movs	r0, #0
 8003c98:	b007      	add	sp, #28
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	f04f 0b00 	mov.w	fp, #0
 8003ca2:	e7ca      	b.n	8003c3a <_scanf_i+0x15e>
 8003ca4:	07ca      	lsls	r2, r1, #31
 8003ca6:	bf4c      	ite	mi
 8003ca8:	8018      	strhmi	r0, [r3, #0]
 8003caa:	6018      	strpl	r0, [r3, #0]
 8003cac:	e7eb      	b.n	8003c86 <_scanf_i+0x1aa>
 8003cae:	2001      	movs	r0, #1
 8003cb0:	e7f2      	b.n	8003c98 <_scanf_i+0x1bc>
 8003cb2:	bf00      	nop
 8003cb4:	08004068 	.word	0x08004068
 8003cb8:	08004035 	.word	0x08004035
 8003cbc:	08003f4d 	.word	0x08003f4d
 8003cc0:	080040a8 	.word	0x080040a8

08003cc4 <__sccl>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	780b      	ldrb	r3, [r1, #0]
 8003cc8:	4604      	mov	r4, r0
 8003cca:	2b5e      	cmp	r3, #94	; 0x5e
 8003ccc:	bf0b      	itete	eq
 8003cce:	784b      	ldrbeq	r3, [r1, #1]
 8003cd0:	1c4a      	addne	r2, r1, #1
 8003cd2:	1c8a      	addeq	r2, r1, #2
 8003cd4:	2100      	movne	r1, #0
 8003cd6:	bf08      	it	eq
 8003cd8:	2101      	moveq	r1, #1
 8003cda:	3801      	subs	r0, #1
 8003cdc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003ce0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003ce4:	42a8      	cmp	r0, r5
 8003ce6:	d1fb      	bne.n	8003ce0 <__sccl+0x1c>
 8003ce8:	b90b      	cbnz	r3, 8003cee <__sccl+0x2a>
 8003cea:	1e50      	subs	r0, r2, #1
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
 8003cee:	f081 0101 	eor.w	r1, r1, #1
 8003cf2:	54e1      	strb	r1, [r4, r3]
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003cfc:	2d2d      	cmp	r5, #45	; 0x2d
 8003cfe:	d005      	beq.n	8003d0c <__sccl+0x48>
 8003d00:	2d5d      	cmp	r5, #93	; 0x5d
 8003d02:	d016      	beq.n	8003d32 <__sccl+0x6e>
 8003d04:	2d00      	cmp	r5, #0
 8003d06:	d0f1      	beq.n	8003cec <__sccl+0x28>
 8003d08:	462b      	mov	r3, r5
 8003d0a:	e7f2      	b.n	8003cf2 <__sccl+0x2e>
 8003d0c:	7846      	ldrb	r6, [r0, #1]
 8003d0e:	2e5d      	cmp	r6, #93	; 0x5d
 8003d10:	d0fa      	beq.n	8003d08 <__sccl+0x44>
 8003d12:	42b3      	cmp	r3, r6
 8003d14:	dcf8      	bgt.n	8003d08 <__sccl+0x44>
 8003d16:	3002      	adds	r0, #2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	4296      	cmp	r6, r2
 8003d1e:	54a1      	strb	r1, [r4, r2]
 8003d20:	dcfb      	bgt.n	8003d1a <__sccl+0x56>
 8003d22:	1af2      	subs	r2, r6, r3
 8003d24:	3a01      	subs	r2, #1
 8003d26:	1c5d      	adds	r5, r3, #1
 8003d28:	42b3      	cmp	r3, r6
 8003d2a:	bfa8      	it	ge
 8003d2c:	2200      	movge	r2, #0
 8003d2e:	18ab      	adds	r3, r5, r2
 8003d30:	e7e1      	b.n	8003cf6 <__sccl+0x32>
 8003d32:	4610      	mov	r0, r2
 8003d34:	e7da      	b.n	8003cec <__sccl+0x28>

08003d36 <__submore>:
 8003d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d11d      	bne.n	8003d82 <__submore+0x4c>
 8003d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d4a:	f7ff fc0f 	bl	800356c <_malloc_r>
 8003d4e:	b918      	cbnz	r0, 8003d58 <__submore+0x22>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d5e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003d62:	6360      	str	r0, [r4, #52]	; 0x34
 8003d64:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003d68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d6c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003d70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d74:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003d78:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003d7c:	6020      	str	r0, [r4, #0]
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e7e8      	b.n	8003d54 <__submore+0x1e>
 8003d82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003d84:	0077      	lsls	r7, r6, #1
 8003d86:	463a      	mov	r2, r7
 8003d88:	f000 f82e 	bl	8003de8 <_realloc_r>
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d0de      	beq.n	8003d50 <__submore+0x1a>
 8003d92:	eb00 0806 	add.w	r8, r0, r6
 8003d96:	4601      	mov	r1, r0
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f000 f816 	bl	8003dcc <memcpy>
 8003da0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003da4:	f8c4 8000 	str.w	r8, [r4]
 8003da8:	e7e9      	b.n	8003d7e <__submore+0x48>
	...

08003dac <_sbrk_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4d06      	ldr	r5, [pc, #24]	; (8003dc8 <_sbrk_r+0x1c>)
 8003db0:	2300      	movs	r3, #0
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	602b      	str	r3, [r5, #0]
 8003db8:	f7fc fde4 	bl	8000984 <_sbrk>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d102      	bne.n	8003dc6 <_sbrk_r+0x1a>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	b103      	cbz	r3, 8003dc6 <_sbrk_r+0x1a>
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	2000027c 	.word	0x2000027c

08003dcc <memcpy>:
 8003dcc:	440a      	add	r2, r1
 8003dce:	4291      	cmp	r1, r2
 8003dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd4:	d100      	bne.n	8003dd8 <memcpy+0xc>
 8003dd6:	4770      	bx	lr
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de2:	4291      	cmp	r1, r2
 8003de4:	d1f9      	bne.n	8003dda <memcpy+0xe>
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <_realloc_r>:
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dec:	4680      	mov	r8, r0
 8003dee:	4614      	mov	r4, r2
 8003df0:	460e      	mov	r6, r1
 8003df2:	b921      	cbnz	r1, 8003dfe <_realloc_r+0x16>
 8003df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	4611      	mov	r1, r2
 8003dfa:	f7ff bbb7 	b.w	800356c <_malloc_r>
 8003dfe:	b92a      	cbnz	r2, 8003e0c <_realloc_r+0x24>
 8003e00:	f7ff fb48 	bl	8003494 <_free_r>
 8003e04:	4625      	mov	r5, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	f000 f914 	bl	8004038 <_malloc_usable_size_r>
 8003e10:	4284      	cmp	r4, r0
 8003e12:	4607      	mov	r7, r0
 8003e14:	d802      	bhi.n	8003e1c <_realloc_r+0x34>
 8003e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e1a:	d812      	bhi.n	8003e42 <_realloc_r+0x5a>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f7ff fba4 	bl	800356c <_malloc_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0ed      	beq.n	8003e06 <_realloc_r+0x1e>
 8003e2a:	42bc      	cmp	r4, r7
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	4631      	mov	r1, r6
 8003e30:	bf28      	it	cs
 8003e32:	463a      	movcs	r2, r7
 8003e34:	f7ff ffca 	bl	8003dcc <memcpy>
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fb2a 	bl	8003494 <_free_r>
 8003e40:	e7e1      	b.n	8003e06 <_realloc_r+0x1e>
 8003e42:	4635      	mov	r5, r6
 8003e44:	e7df      	b.n	8003e06 <_realloc_r+0x1e>
	...

08003e48 <_strtol_l.constprop.0>:
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4e:	d001      	beq.n	8003e54 <_strtol_l.constprop.0+0xc>
 8003e50:	2b24      	cmp	r3, #36	; 0x24
 8003e52:	d906      	bls.n	8003e62 <_strtol_l.constprop.0+0x1a>
 8003e54:	f7ff faf2 	bl	800343c <__errno>
 8003e58:	2316      	movs	r3, #22
 8003e5a:	6003      	str	r3, [r0, #0]
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003f48 <_strtol_l.constprop.0+0x100>
 8003e66:	460d      	mov	r5, r1
 8003e68:	462e      	mov	r6, r5
 8003e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003e72:	f017 0708 	ands.w	r7, r7, #8
 8003e76:	d1f7      	bne.n	8003e68 <_strtol_l.constprop.0+0x20>
 8003e78:	2c2d      	cmp	r4, #45	; 0x2d
 8003e7a:	d132      	bne.n	8003ee2 <_strtol_l.constprop.0+0x9a>
 8003e7c:	782c      	ldrb	r4, [r5, #0]
 8003e7e:	2701      	movs	r7, #1
 8003e80:	1cb5      	adds	r5, r6, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d05b      	beq.n	8003f3e <_strtol_l.constprop.0+0xf6>
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d109      	bne.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003e8a:	2c30      	cmp	r4, #48	; 0x30
 8003e8c:	d107      	bne.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003e8e:	782c      	ldrb	r4, [r5, #0]
 8003e90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003e94:	2c58      	cmp	r4, #88	; 0x58
 8003e96:	d14d      	bne.n	8003f34 <_strtol_l.constprop.0+0xec>
 8003e98:	786c      	ldrb	r4, [r5, #1]
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	3502      	adds	r5, #2
 8003e9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003ea2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ea6:	f04f 0e00 	mov.w	lr, #0
 8003eaa:	fbb8 f9f3 	udiv	r9, r8, r3
 8003eae:	4676      	mov	r6, lr
 8003eb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8003eb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003eb8:	f1bc 0f09 	cmp.w	ip, #9
 8003ebc:	d816      	bhi.n	8003eec <_strtol_l.constprop.0+0xa4>
 8003ebe:	4664      	mov	r4, ip
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	dd24      	ble.n	8003f0e <_strtol_l.constprop.0+0xc6>
 8003ec4:	f1be 3fff 	cmp.w	lr, #4294967295
 8003ec8:	d008      	beq.n	8003edc <_strtol_l.constprop.0+0x94>
 8003eca:	45b1      	cmp	r9, r6
 8003ecc:	d31c      	bcc.n	8003f08 <_strtol_l.constprop.0+0xc0>
 8003ece:	d101      	bne.n	8003ed4 <_strtol_l.constprop.0+0x8c>
 8003ed0:	45a2      	cmp	sl, r4
 8003ed2:	db19      	blt.n	8003f08 <_strtol_l.constprop.0+0xc0>
 8003ed4:	fb06 4603 	mla	r6, r6, r3, r4
 8003ed8:	f04f 0e01 	mov.w	lr, #1
 8003edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ee0:	e7e8      	b.n	8003eb4 <_strtol_l.constprop.0+0x6c>
 8003ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8003ee4:	bf04      	itt	eq
 8003ee6:	782c      	ldrbeq	r4, [r5, #0]
 8003ee8:	1cb5      	addeq	r5, r6, #2
 8003eea:	e7ca      	b.n	8003e82 <_strtol_l.constprop.0+0x3a>
 8003eec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003ef0:	f1bc 0f19 	cmp.w	ip, #25
 8003ef4:	d801      	bhi.n	8003efa <_strtol_l.constprop.0+0xb2>
 8003ef6:	3c37      	subs	r4, #55	; 0x37
 8003ef8:	e7e2      	b.n	8003ec0 <_strtol_l.constprop.0+0x78>
 8003efa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003efe:	f1bc 0f19 	cmp.w	ip, #25
 8003f02:	d804      	bhi.n	8003f0e <_strtol_l.constprop.0+0xc6>
 8003f04:	3c57      	subs	r4, #87	; 0x57
 8003f06:	e7db      	b.n	8003ec0 <_strtol_l.constprop.0+0x78>
 8003f08:	f04f 3eff 	mov.w	lr, #4294967295
 8003f0c:	e7e6      	b.n	8003edc <_strtol_l.constprop.0+0x94>
 8003f0e:	f1be 3fff 	cmp.w	lr, #4294967295
 8003f12:	d105      	bne.n	8003f20 <_strtol_l.constprop.0+0xd8>
 8003f14:	2322      	movs	r3, #34	; 0x22
 8003f16:	6003      	str	r3, [r0, #0]
 8003f18:	4646      	mov	r6, r8
 8003f1a:	b942      	cbnz	r2, 8003f2e <_strtol_l.constprop.0+0xe6>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	e79e      	b.n	8003e5e <_strtol_l.constprop.0+0x16>
 8003f20:	b107      	cbz	r7, 8003f24 <_strtol_l.constprop.0+0xdc>
 8003f22:	4276      	negs	r6, r6
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d0f9      	beq.n	8003f1c <_strtol_l.constprop.0+0xd4>
 8003f28:	f1be 0f00 	cmp.w	lr, #0
 8003f2c:	d000      	beq.n	8003f30 <_strtol_l.constprop.0+0xe8>
 8003f2e:	1e69      	subs	r1, r5, #1
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	e7f3      	b.n	8003f1c <_strtol_l.constprop.0+0xd4>
 8003f34:	2430      	movs	r4, #48	; 0x30
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1b1      	bne.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	e7af      	b.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f3e:	2c30      	cmp	r4, #48	; 0x30
 8003f40:	d0a5      	beq.n	8003e8e <_strtol_l.constprop.0+0x46>
 8003f42:	230a      	movs	r3, #10
 8003f44:	e7ab      	b.n	8003e9e <_strtol_l.constprop.0+0x56>
 8003f46:	bf00      	nop
 8003f48:	080040b4 	.word	0x080040b4

08003f4c <_strtol_r>:
 8003f4c:	f7ff bf7c 	b.w	8003e48 <_strtol_l.constprop.0>

08003f50 <_strtoul_l.constprop.0>:
 8003f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f54:	4f36      	ldr	r7, [pc, #216]	; (8004030 <_strtoul_l.constprop.0+0xe0>)
 8003f56:	4686      	mov	lr, r0
 8003f58:	460d      	mov	r5, r1
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f60:	5d3e      	ldrb	r6, [r7, r4]
 8003f62:	f016 0608 	ands.w	r6, r6, #8
 8003f66:	d1f8      	bne.n	8003f5a <_strtoul_l.constprop.0+0xa>
 8003f68:	2c2d      	cmp	r4, #45	; 0x2d
 8003f6a:	d130      	bne.n	8003fce <_strtoul_l.constprop.0+0x7e>
 8003f6c:	782c      	ldrb	r4, [r5, #0]
 8003f6e:	2601      	movs	r6, #1
 8003f70:	1c85      	adds	r5, r0, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d057      	beq.n	8004026 <_strtoul_l.constprop.0+0xd6>
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d109      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8003f7a:	2c30      	cmp	r4, #48	; 0x30
 8003f7c:	d107      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8003f7e:	7828      	ldrb	r0, [r5, #0]
 8003f80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003f84:	2858      	cmp	r0, #88	; 0x58
 8003f86:	d149      	bne.n	800401c <_strtoul_l.constprop.0+0xcc>
 8003f88:	786c      	ldrb	r4, [r5, #1]
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	3502      	adds	r5, #2
 8003f8e:	f04f 38ff 	mov.w	r8, #4294967295
 8003f92:	2700      	movs	r7, #0
 8003f94:	fbb8 f8f3 	udiv	r8, r8, r3
 8003f98:	fb03 f908 	mul.w	r9, r3, r8
 8003f9c:	ea6f 0909 	mvn.w	r9, r9
 8003fa0:	4638      	mov	r0, r7
 8003fa2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003fa6:	f1bc 0f09 	cmp.w	ip, #9
 8003faa:	d815      	bhi.n	8003fd8 <_strtoul_l.constprop.0+0x88>
 8003fac:	4664      	mov	r4, ip
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	dd23      	ble.n	8003ffa <_strtoul_l.constprop.0+0xaa>
 8003fb2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003fb6:	d007      	beq.n	8003fc8 <_strtoul_l.constprop.0+0x78>
 8003fb8:	4580      	cmp	r8, r0
 8003fba:	d31b      	bcc.n	8003ff4 <_strtoul_l.constprop.0+0xa4>
 8003fbc:	d101      	bne.n	8003fc2 <_strtoul_l.constprop.0+0x72>
 8003fbe:	45a1      	cmp	r9, r4
 8003fc0:	db18      	blt.n	8003ff4 <_strtoul_l.constprop.0+0xa4>
 8003fc2:	fb00 4003 	mla	r0, r0, r3, r4
 8003fc6:	2701      	movs	r7, #1
 8003fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fcc:	e7e9      	b.n	8003fa2 <_strtoul_l.constprop.0+0x52>
 8003fce:	2c2b      	cmp	r4, #43	; 0x2b
 8003fd0:	bf04      	itt	eq
 8003fd2:	782c      	ldrbeq	r4, [r5, #0]
 8003fd4:	1c85      	addeq	r5, r0, #2
 8003fd6:	e7cc      	b.n	8003f72 <_strtoul_l.constprop.0+0x22>
 8003fd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003fdc:	f1bc 0f19 	cmp.w	ip, #25
 8003fe0:	d801      	bhi.n	8003fe6 <_strtoul_l.constprop.0+0x96>
 8003fe2:	3c37      	subs	r4, #55	; 0x37
 8003fe4:	e7e3      	b.n	8003fae <_strtoul_l.constprop.0+0x5e>
 8003fe6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003fea:	f1bc 0f19 	cmp.w	ip, #25
 8003fee:	d804      	bhi.n	8003ffa <_strtoul_l.constprop.0+0xaa>
 8003ff0:	3c57      	subs	r4, #87	; 0x57
 8003ff2:	e7dc      	b.n	8003fae <_strtoul_l.constprop.0+0x5e>
 8003ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ff8:	e7e6      	b.n	8003fc8 <_strtoul_l.constprop.0+0x78>
 8003ffa:	1c7b      	adds	r3, r7, #1
 8003ffc:	d106      	bne.n	800400c <_strtoul_l.constprop.0+0xbc>
 8003ffe:	2322      	movs	r3, #34	; 0x22
 8004000:	f8ce 3000 	str.w	r3, [lr]
 8004004:	4638      	mov	r0, r7
 8004006:	b932      	cbnz	r2, 8004016 <_strtoul_l.constprop.0+0xc6>
 8004008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800400c:	b106      	cbz	r6, 8004010 <_strtoul_l.constprop.0+0xc0>
 800400e:	4240      	negs	r0, r0
 8004010:	2a00      	cmp	r2, #0
 8004012:	d0f9      	beq.n	8004008 <_strtoul_l.constprop.0+0xb8>
 8004014:	b107      	cbz	r7, 8004018 <_strtoul_l.constprop.0+0xc8>
 8004016:	1e69      	subs	r1, r5, #1
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	e7f5      	b.n	8004008 <_strtoul_l.constprop.0+0xb8>
 800401c:	2430      	movs	r4, #48	; 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1b5      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8004022:	2308      	movs	r3, #8
 8004024:	e7b3      	b.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8004026:	2c30      	cmp	r4, #48	; 0x30
 8004028:	d0a9      	beq.n	8003f7e <_strtoul_l.constprop.0+0x2e>
 800402a:	230a      	movs	r3, #10
 800402c:	e7af      	b.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 800402e:	bf00      	nop
 8004030:	080040b4 	.word	0x080040b4

08004034 <_strtoul_r>:
 8004034:	f7ff bf8c 	b.w	8003f50 <_strtoul_l.constprop.0>

08004038 <_malloc_usable_size_r>:
 8004038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800403c:	1f18      	subs	r0, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfbc      	itt	lt
 8004042:	580b      	ldrlt	r3, [r1, r0]
 8004044:	18c0      	addlt	r0, r0, r3
 8004046:	4770      	bx	lr

08004048 <_init>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr

08004054 <_fini>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr
