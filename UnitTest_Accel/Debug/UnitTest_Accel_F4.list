
UnitTest_Accel_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051cc  080051cc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080051d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000042ac  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000430c  2000430c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010883  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002943  00000000  00000000  00030956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e98  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b2f  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002278f  00000000  00000000  00034c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112bd  00000000  00000000  000573f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0db5  00000000  00000000  000686b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f4c  00000000  00000000  00139468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0013d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005164 	.word	0x08005164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005164 	.word	0x08005164

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b970 	b.w	8000b34 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9e08      	ldr	r6, [sp, #32]
 8000872:	460d      	mov	r5, r1
 8000874:	4604      	mov	r4, r0
 8000876:	460f      	mov	r7, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4694      	mov	ip, r2
 8000880:	d965      	bls.n	800094e <__udivmoddi4+0xe2>
 8000882:	fab2 f382 	clz	r3, r2
 8000886:	b143      	cbz	r3, 800089a <__udivmoddi4+0x2e>
 8000888:	fa02 fc03 	lsl.w	ip, r2, r3
 800088c:	f1c3 0220 	rsb	r2, r3, #32
 8000890:	409f      	lsls	r7, r3
 8000892:	fa20 f202 	lsr.w	r2, r0, r2
 8000896:	4317      	orrs	r7, r2
 8000898:	409c      	lsls	r4, r3
 800089a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800089e:	fa1f f58c 	uxth.w	r5, ip
 80008a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008a6:	0c22      	lsrs	r2, r4, #16
 80008a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b0:	fb01 f005 	mul.w	r0, r1, r5
 80008b4:	4290      	cmp	r0, r2
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x62>
 80008b8:	eb1c 0202 	adds.w	r2, ip, r2
 80008bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80008c0:	f080 811c 	bcs.w	8000afc <__udivmoddi4+0x290>
 80008c4:	4290      	cmp	r0, r2
 80008c6:	f240 8119 	bls.w	8000afc <__udivmoddi4+0x290>
 80008ca:	3902      	subs	r1, #2
 80008cc:	4462      	add	r2, ip
 80008ce:	1a12      	subs	r2, r2, r0
 80008d0:	b2a4      	uxth	r4, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008de:	fb00 f505 	mul.w	r5, r0, r5
 80008e2:	42a5      	cmp	r5, r4
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x90>
 80008e6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ee:	f080 8107 	bcs.w	8000b00 <__udivmoddi4+0x294>
 80008f2:	42a5      	cmp	r5, r4
 80008f4:	f240 8104 	bls.w	8000b00 <__udivmoddi4+0x294>
 80008f8:	4464      	add	r4, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	2100      	movs	r1, #0
 8000904:	b11e      	cbz	r6, 800090e <__udivmoddi4+0xa2>
 8000906:	40dc      	lsrs	r4, r3
 8000908:	2300      	movs	r3, #0
 800090a:	e9c6 4300 	strd	r4, r3, [r6]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0xbc>
 8000916:	2e00      	cmp	r6, #0
 8000918:	f000 80ed 	beq.w	8000af6 <__udivmoddi4+0x28a>
 800091c:	2100      	movs	r1, #0
 800091e:	e9c6 0500 	strd	r0, r5, [r6]
 8000922:	4608      	mov	r0, r1
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	fab3 f183 	clz	r1, r3
 800092c:	2900      	cmp	r1, #0
 800092e:	d149      	bne.n	80009c4 <__udivmoddi4+0x158>
 8000930:	42ab      	cmp	r3, r5
 8000932:	d302      	bcc.n	800093a <__udivmoddi4+0xce>
 8000934:	4282      	cmp	r2, r0
 8000936:	f200 80f8 	bhi.w	8000b2a <__udivmoddi4+0x2be>
 800093a:	1a84      	subs	r4, r0, r2
 800093c:	eb65 0203 	sbc.w	r2, r5, r3
 8000940:	2001      	movs	r0, #1
 8000942:	4617      	mov	r7, r2
 8000944:	2e00      	cmp	r6, #0
 8000946:	d0e2      	beq.n	800090e <__udivmoddi4+0xa2>
 8000948:	e9c6 4700 	strd	r4, r7, [r6]
 800094c:	e7df      	b.n	800090e <__udivmoddi4+0xa2>
 800094e:	b902      	cbnz	r2, 8000952 <__udivmoddi4+0xe6>
 8000950:	deff      	udf	#255	; 0xff
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8090 	bne.w	8000a7c <__udivmoddi4+0x210>
 800095c:	1a8a      	subs	r2, r1, r2
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2101      	movs	r1, #1
 8000968:	fbb2 f5f7 	udiv	r5, r2, r7
 800096c:	fb07 2015 	mls	r0, r7, r5, r2
 8000970:	0c22      	lsrs	r2, r4, #16
 8000972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000976:	fb0e f005 	mul.w	r0, lr, r5
 800097a:	4290      	cmp	r0, r2
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x124>
 800097e:	eb1c 0202 	adds.w	r2, ip, r2
 8000982:	f105 38ff 	add.w	r8, r5, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x122>
 8000988:	4290      	cmp	r0, r2
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2b8>
 800098e:	4645      	mov	r5, r8
 8000990:	1a12      	subs	r2, r2, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb2 f0f7 	udiv	r0, r2, r7
 8000998:	fb07 2210 	mls	r2, r7, r0, r2
 800099c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x14e>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x14c>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2c2>
 80009b8:	4610      	mov	r0, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009c2:	e79f      	b.n	8000904 <__udivmoddi4+0x98>
 80009c4:	f1c1 0720 	rsb	r7, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa05 f401 	lsl.w	r4, r5, r1
 80009d6:	fa20 f307 	lsr.w	r3, r0, r7
 80009da:	40fd      	lsrs	r5, r7
 80009dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e0:	4323      	orrs	r3, r4
 80009e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009e6:	fa1f fe8c 	uxth.w	lr, ip
 80009ea:	fb09 5518 	mls	r5, r9, r8, r5
 80009ee:	0c1c      	lsrs	r4, r3, #16
 80009f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009f4:	fb08 f50e 	mul.w	r5, r8, lr
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b0>
 8000a04:	eb1c 0404 	adds.w	r4, ip, r4
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2b4>
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2b4>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4464      	add	r4, ip
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	b29d      	uxth	r5, r3
 8000a20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a24:	fb09 4413 	mls	r4, r9, r3, r4
 8000a28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1da>
 8000a34:	eb1c 0404 	adds.w	r4, ip, r4
 8000a38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2ac>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2ac>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	4464      	add	r4, ip
 8000a46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	42ac      	cmp	r4, r5
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46ae      	mov	lr, r5
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x29c>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x298>
 8000a5c:	b156      	cbz	r6, 8000a74 <__udivmoddi4+0x208>
 8000a5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a62:	eb64 040e 	sbc.w	r4, r4, lr
 8000a66:	fa04 f707 	lsl.w	r7, r4, r7
 8000a6a:	40ca      	lsrs	r2, r1
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	e9c6 7400 	strd	r7, r4, [r6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	f1c3 0120 	rsb	r1, r3, #32
 8000a80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a84:	fa20 f201 	lsr.w	r2, r0, r1
 8000a88:	fa25 f101 	lsr.w	r1, r5, r1
 8000a8c:	409d      	lsls	r5, r3
 8000a8e:	432a      	orrs	r2, r5
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa0:	0c11      	lsrs	r1, r2, #16
 8000aa2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aa6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aaa:	428d      	cmp	r5, r1
 8000aac:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x258>
 8000ab2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b0>
 8000abc:	428d      	cmp	r5, r1
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b0>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1b49      	subs	r1, r1, r5
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000acc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ad4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad8:	4291      	cmp	r1, r2
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x282>
 8000adc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2a8>
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2a8>
 8000aea:	3d02      	subs	r5, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a52      	subs	r2, r2, r1
 8000af0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0xfc>
 8000af6:	4631      	mov	r1, r6
 8000af8:	4630      	mov	r0, r6
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xa2>
 8000afc:	4639      	mov	r1, r7
 8000afe:	e6e6      	b.n	80008ce <__udivmoddi4+0x62>
 8000b00:	4610      	mov	r0, r2
 8000b02:	e6fb      	b.n	80008fc <__udivmoddi4+0x90>
 8000b04:	4548      	cmp	r0, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f0>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b10:	3b01      	subs	r3, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f0>
 8000b14:	4645      	mov	r5, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x282>
 8000b18:	462b      	mov	r3, r5
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1da>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x258>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b0>
 8000b24:	3d02      	subs	r5, #2
 8000b26:	4462      	add	r2, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x124>
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e70a      	b.n	8000944 <__udivmoddi4+0xd8>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x14e>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <Accel_Cal>:
#include "Accel.h"
#include "stdlib.h"
#define deltaT 0.01

void Accel_Cal(Accel_Param *accel, float target_vel, float target_time)
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b44:	edc7 0a01 	vstr	s1, [r7, #4]
	if(target_vel != accel->target_vel_Pre)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b52:	eeb4 7a67 	vcmp.f32	s14, s15
 8000b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5a:	d021      	beq.n	8000ba0 <Accel_Cal+0x68>
	{
		if(target_vel < accel->target_vel_Pre)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6e:	d503      	bpl.n	8000b78 <Accel_Cal+0x40>
		{
			accel->Flag = 1;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2201      	movs	r2, #1
 8000b74:	741a      	strb	r2, [r3, #16]
 8000b76:	e002      	b.n	8000b7e <Accel_Cal+0x46>
		}
		else
		{
			accel->Flag = 0;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	741a      	strb	r2, [r3, #16]
		}
		accel->accel = (target_vel - accel->vel_controller)/target_time;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b84:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b88:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	edc3 7a00 	vstr	s15, [r3]
		accel->target_vel_Pre = target_vel;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
	}
		accel->vel_controller +=  accel->accel * deltaT;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fda1 	bl	80006ec <__aeabi_f2d>
 8000baa:	4604      	mov	r4, r0
 8000bac:	460d      	mov	r5, r1
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd9a 	bl	80006ec <__aeabi_f2d>
 8000bb8:	a31d      	add	r3, pc, #116	; (adr r3, 8000c30 <Accel_Cal+0xf8>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	f7ff fb07 	bl	80001d0 <__aeabi_dmul>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	4629      	mov	r1, r5
 8000bca:	f7ff fc31 	bl	8000430 <__adddf3>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff fde1 	bl	800079c <__aeabi_d2f>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	605a      	str	r2, [r3, #4]

			if(accel->Flag)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	7c1b      	ldrb	r3, [r3, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00e      	beq.n	8000c06 <Accel_Cal+0xce>
			{
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bee:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfa:	dc00      	bgt.n	8000bfe <Accel_Cal+0xc6>
			}
			else
			{
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
			}
}
 8000bfc:	e011      	b.n	8000c22 <Accel_Cal+0xea>
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	605a      	str	r2, [r3, #4]
}
 8000c04:	e00d      	b.n	8000c22 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c18:	d400      	bmi.n	8000c1c <Accel_Cal+0xe4>
}
 8000c1a:	e002      	b.n	8000c22 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	605a      	str	r2, [r3, #4]
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	47ae147b 	.word	0x47ae147b
 8000c34:	3f847ae1 	.word	0x3f847ae1

08000c38 <DC_Drive_BTS>:
//		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
//	}
//}

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bfb8      	it	lt
 8000c5a:	425b      	neglt	r3, r3
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	619a      	str	r2, [r3, #24]

	if(motor->Mode==0){
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	8a1b      	ldrh	r3, [r3, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 80e9 	bne.w	8000e4a <DC_Drive_BTS+0x212>
		if(Input < 0)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da4d      	bge.n	8000d1a <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d106      	bne.n	8000c94 <DC_Drive_BTS+0x5c>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	89da      	ldrh	r2, [r3, #14]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
 8000c92:	e01e      	b.n	8000cd2 <DC_Drive_BTS+0x9a>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d107      	bne.n	8000cac <DC_Drive_BTS+0x74>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	89d9      	ldrh	r1, [r3, #14]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	6393      	str	r3, [r2, #56]	; 0x38
 8000caa:	e012      	b.n	8000cd2 <DC_Drive_BTS+0x9a>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d107      	bne.n	8000cc4 <DC_Drive_BTS+0x8c>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	89d9      	ldrh	r1, [r3, #14]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000cc2:	e006      	b.n	8000cd2 <DC_Drive_BTS+0x9a>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	89d9      	ldrh	r1, [r3, #14]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d105      	bne.n	8000ce6 <DC_Drive_BTS+0xae>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
		}
	}
}
 8000ce4:	e1d6      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d105      	bne.n	8000cfa <DC_Drive_BTS+0xc2>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6393      	str	r3, [r2, #56]	; 0x38
 8000cf8:	e1cc      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d105      	bne.n	8000d0e <DC_Drive_BTS+0xd6>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d0c:	e1c2      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2300      	movs	r3, #0
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d18:	e1bc      	b.n	8001094 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd4d      	ble.n	8000dbc <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <DC_Drive_BTS+0xfc>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
 8000d32:	e018      	b.n	8000d66 <DC_Drive_BTS+0x12e>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d105      	bne.n	8000d48 <DC_Drive_BTS+0x110>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	6393      	str	r3, [r2, #56]	; 0x38
 8000d46:	e00e      	b.n	8000d66 <DC_Drive_BTS+0x12e>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d105      	bne.n	8000d5c <DC_Drive_BTS+0x124>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d5a:	e004      	b.n	8000d66 <DC_Drive_BTS+0x12e>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <DC_Drive_BTS+0x144>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	89da      	ldrh	r2, [r3, #14]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d7a:	e18b      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d107      	bne.n	8000d94 <DC_Drive_BTS+0x15c>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	89d9      	ldrh	r1, [r3, #14]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38
 8000d92:	e17f      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d107      	bne.n	8000dac <DC_Drive_BTS+0x174>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	89d9      	ldrh	r1, [r3, #14]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000daa:	e173      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	89d9      	ldrh	r1, [r3, #14]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	460b      	mov	r3, r1
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dba:	e16b      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <DC_Drive_BTS+0x198>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dce:	e018      	b.n	8000e02 <DC_Drive_BTS+0x1ca>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d105      	bne.n	8000de4 <DC_Drive_BTS+0x1ac>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	6393      	str	r3, [r2, #56]	; 0x38
 8000de2:	e00e      	b.n	8000e02 <DC_Drive_BTS+0x1ca>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d105      	bne.n	8000df8 <DC_Drive_BTS+0x1c0>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000df6:	e004      	b.n	8000e02 <DC_Drive_BTS+0x1ca>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d105      	bne.n	8000e16 <DC_Drive_BTS+0x1de>
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e14:	e13e      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d105      	bne.n	8000e2a <DC_Drive_BTS+0x1f2>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	6393      	str	r3, [r2, #56]	; 0x38
 8000e28:	e134      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d105      	bne.n	8000e3e <DC_Drive_BTS+0x206>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e3c:	e12a      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2300      	movs	r3, #0
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e48:	e124      	b.n	8001094 <DC_Drive_BTS+0x45c>
		if(Input < 0)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	da64      	bge.n	8000f1a <DC_Drive_BTS+0x2e2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode-motor->Pwm);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10a      	bne.n	8000e6e <DC_Drive_BTS+0x236>
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	8a1b      	ldrh	r3, [r3, #16]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	89db      	ldrh	r3, [r3, #14]
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6c:	e02a      	b.n	8000ec4 <DC_Drive_BTS+0x28c>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d10b      	bne.n	8000e8e <DC_Drive_BTS+0x256>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	8a1b      	ldrh	r3, [r3, #16]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	89db      	ldrh	r3, [r3, #14]
 8000e80:	1ad1      	subs	r1, r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	6393      	str	r3, [r2, #56]	; 0x38
 8000e8c:	e01a      	b.n	8000ec4 <DC_Drive_BTS+0x28c>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d10b      	bne.n	8000eae <DC_Drive_BTS+0x276>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8a1b      	ldrh	r3, [r3, #16]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	89db      	ldrh	r3, [r3, #14]
 8000ea0:	1ad1      	subs	r1, r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000eac:	e00a      	b.n	8000ec4 <DC_Drive_BTS+0x28c>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8a1b      	ldrh	r3, [r3, #16]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	89db      	ldrh	r3, [r3, #14]
 8000eb8:	1ad1      	subs	r1, r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <DC_Drive_BTS+0x2a2>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8a1a      	ldrh	r2, [r3, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ed8:	e0dc      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d107      	bne.n	8000ef2 <DC_Drive_BTS+0x2ba>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8a19      	ldrh	r1, [r3, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	460b      	mov	r3, r1
 8000eee:	6393      	str	r3, [r2, #56]	; 0x38
 8000ef0:	e0d0      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d107      	bne.n	8000f0a <DC_Drive_BTS+0x2d2>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	8a19      	ldrh	r1, [r3, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	460b      	mov	r3, r1
 8000f06:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f08:	e0c4      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8a19      	ldrh	r1, [r3, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	460b      	mov	r3, r1
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f18:	e0bc      	b.n	8001094 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dd64      	ble.n	8000fea <DC_Drive_BTS+0x3b2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d106      	bne.n	8000f36 <DC_Drive_BTS+0x2fe>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8a1a      	ldrh	r2, [r3, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
 8000f34:	e01e      	b.n	8000f74 <DC_Drive_BTS+0x33c>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d107      	bne.n	8000f4e <DC_Drive_BTS+0x316>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8a19      	ldrh	r1, [r3, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	6393      	str	r3, [r2, #56]	; 0x38
 8000f4c:	e012      	b.n	8000f74 <DC_Drive_BTS+0x33c>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d107      	bne.n	8000f66 <DC_Drive_BTS+0x32e>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8a19      	ldrh	r1, [r3, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	460b      	mov	r3, r1
 8000f62:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f64:	e006      	b.n	8000f74 <DC_Drive_BTS+0x33c>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	8a19      	ldrh	r1, [r3, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	460b      	mov	r3, r1
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10a      	bne.n	8000f92 <DC_Drive_BTS+0x35a>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8a1b      	ldrh	r3, [r3, #16]
 8000f80:	461a      	mov	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	89db      	ldrh	r3, [r3, #14]
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f90:	e080      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d10b      	bne.n	8000fb2 <DC_Drive_BTS+0x37a>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	8a1b      	ldrh	r3, [r3, #16]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	89db      	ldrh	r3, [r3, #14]
 8000fa4:	1ad1      	subs	r1, r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	460b      	mov	r3, r1
 8000fae:	6393      	str	r3, [r2, #56]	; 0x38
 8000fb0:	e070      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d10b      	bne.n	8000fd2 <DC_Drive_BTS+0x39a>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8a1b      	ldrh	r3, [r3, #16]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	89db      	ldrh	r3, [r3, #14]
 8000fc4:	1ad1      	subs	r1, r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fd0:	e060      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8a1b      	ldrh	r3, [r3, #16]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	89db      	ldrh	r3, [r3, #14]
 8000fdc:	1ad1      	subs	r1, r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fe8:	e054      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d106      	bne.n	8001000 <DC_Drive_BTS+0x3c8>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	8a1a      	ldrh	r2, [r3, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffe:	e01e      	b.n	800103e <DC_Drive_BTS+0x406>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d107      	bne.n	8001018 <DC_Drive_BTS+0x3e0>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8a19      	ldrh	r1, [r3, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	460b      	mov	r3, r1
 8001014:	6393      	str	r3, [r2, #56]	; 0x38
 8001016:	e012      	b.n	800103e <DC_Drive_BTS+0x406>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d107      	bne.n	8001030 <DC_Drive_BTS+0x3f8>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8a19      	ldrh	r1, [r3, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	460b      	mov	r3, r1
 800102c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800102e:	e006      	b.n	800103e <DC_Drive_BTS+0x406>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8a19      	ldrh	r1, [r3, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <DC_Drive_BTS+0x41c>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8a1a      	ldrh	r2, [r3, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001052:	e01f      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2b04      	cmp	r3, #4
 800105a:	d107      	bne.n	800106c <DC_Drive_BTS+0x434>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8a19      	ldrh	r1, [r3, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	460b      	mov	r3, r1
 8001068:	6393      	str	r3, [r2, #56]	; 0x38
}
 800106a:	e013      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d107      	bne.n	8001084 <DC_Drive_BTS+0x44c>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8a19      	ldrh	r1, [r3, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	460b      	mov	r3, r1
 8001080:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001082:	e007      	b.n	8001094 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8a19      	ldrh	r1, [r3, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	460b      	mov	r3, r1
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001092:	e7ff      	b.n	8001094 <DC_Drive_BTS+0x45c>
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <vApplicationGetIdleTaskMemory+0x2c>)
 80010b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <vApplicationGetIdleTaskMemory+0x30>)
 80010b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000007c 	.word	0x2000007c
 80010d0:	2000011c 	.word	0x2000011c

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fcf9 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f83f 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f000 fa55 	bl	8001590 <MX_GPIO_Init>
  MX_TIM5_Init();
 80010e6:	f000 f9d1 	bl	800148c <MX_TIM5_Init>
  MX_TIM1_Init();
 80010ea:	f000 f8a3 	bl	8001234 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ee:	f000 f94d 	bl	800138c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4815      	ldr	r0, [pc, #84]	; (800114c <main+0x78>)
 80010f6:	f001 fd7b 	bl	8002bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010fa:	2104      	movs	r1, #4
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <main+0x78>)
 80010fe:	f001 fd77 	bl	8002bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <main+0x7c>)
 8001106:	f001 fd73 	bl	8002bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800110a:	2104      	movs	r1, #4
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <main+0x7c>)
 800110e:	f001 fd6f 	bl	8002bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001112:	2108      	movs	r1, #8
 8001114:	480f      	ldr	r0, [pc, #60]	; (8001154 <main+0x80>)
 8001116:	f001 fd6b 	bl	8002bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800111a:	210c      	movs	r1, #12
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <main+0x80>)
 800111e:	f001 fd67 	bl	8002bf0 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AccelTask */
  osThreadDef(AccelTask, StartAccelTask, osPriorityNormal, 0, 128);
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <main+0x84>)
 8001124:	1d3c      	adds	r4, r7, #4
 8001126:	461d      	mov	r5, r3
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelTaskHandle = osThreadCreate(osThread(AccelTask), NULL);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fce0 	bl	8003afe <osThreadCreate>
 800113e:	4603      	mov	r3, r0
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <main+0x88>)
 8001142:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001144:	f002 fcd4 	bl	8003af0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001148:	e7fe      	b.n	8001148 <main+0x74>
 800114a:	bf00      	nop
 800114c:	2000031c 	.word	0x2000031c
 8001150:	20000364 	.word	0x20000364
 8001154:	200003ac 	.word	0x200003ac
 8001158:	08005188 	.word	0x08005188
 800115c:	200003f4 	.word	0x200003f4

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 ff1c 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <SystemClock_Config+0xcc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <SystemClock_Config+0xcc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <SystemClock_Config+0xcc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <SystemClock_Config+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <SystemClock_Config+0xd0>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011d4:	23a8      	movs	r3, #168	; 0xa8
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff33 	bl	8002050 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f0:	f000 fa72 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f001 f994 	bl	8002540 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800121e:	f000 fa5b 	bl	80016d8 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b096      	sub	sp, #88	; 0x58
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fe9d 	bl	8004fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <MX_TIM1_Init+0x150>)
 8001274:	4a44      	ldr	r2, [pc, #272]	; (8001388 <MX_TIM1_Init+0x154>)
 8001276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <MX_TIM1_Init+0x150>)
 800127a:	2253      	movs	r2, #83	; 0x53
 800127c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <MX_TIM1_Init+0x150>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <MX_TIM1_Init+0x150>)
 8001286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <MX_TIM1_Init+0x150>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_TIM1_Init+0x150>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <MX_TIM1_Init+0x150>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800129e:	4839      	ldr	r0, [pc, #228]	; (8001384 <MX_TIM1_Init+0x150>)
 80012a0:	f001 fb8c 	bl	80029bc <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012aa:	f000 fa15 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b8:	4619      	mov	r1, r3
 80012ba:	4832      	ldr	r0, [pc, #200]	; (8001384 <MX_TIM1_Init+0x150>)
 80012bc:	f001 ff12 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c6:	f000 fa07 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ca:	482e      	ldr	r0, [pc, #184]	; (8001384 <MX_TIM1_Init+0x150>)
 80012cc:	f001 fc36 	bl	8002b3c <HAL_TIM_PWM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012d6:	f000 f9ff 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e6:	4619      	mov	r1, r3
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <MX_TIM1_Init+0x150>)
 80012ea:	f002 fb07 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012f4:	f000 f9f0 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <MX_TIM1_Init+0x150>)
 800131e:	f001 fe1f 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001328:	f000 f9d6 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	2204      	movs	r2, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <MX_TIM1_Init+0x150>)
 8001336:	f001 fe13 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001340:	f000 f9ca 	bl	80016d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM1_Init+0x150>)
 8001368:	f002 fb44 	bl	80039f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001372:	f000 f9b1 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM1_Init+0x150>)
 8001378:	f000 fa2c 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 800137c:	bf00      	nop
 800137e:	3758      	adds	r7, #88	; 0x58
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000031c 	.word	0x2000031c
 8001388:	40010000 	.word	0x40010000

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013c6:	2253      	movs	r2, #83	; 0x53
 80013c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <MX_TIM2_Init+0xfc>)
 80013e6:	f001 fae9 	bl	80029bc <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013f0:	f000 f972 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	4619      	mov	r1, r3
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <MX_TIM2_Init+0xfc>)
 8001402:	f001 fe6f 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800140c:	f000 f964 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001410:	481d      	ldr	r0, [pc, #116]	; (8001488 <MX_TIM2_Init+0xfc>)
 8001412:	f001 fb93 	bl	8002b3c <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800141c:	f000 f95c 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4619      	mov	r1, r3
 800142e:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_TIM2_Init+0xfc>)
 8001430:	f002 fa64 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800143a:	f000 f94d 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2360      	movs	r3, #96	; 0x60
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_TIM2_Init+0xfc>)
 8001456:	f001 fd83 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001460:	f000 f93a 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM2_Init+0xfc>)
 800146c:	f001 fd78 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001476:	f000 f92f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM2_Init+0xfc>)
 800147c:	f000 f9aa 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3738      	adds	r7, #56	; 0x38
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000364 	.word	0x20000364

0800148c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <MX_TIM5_Init+0x100>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014c4:	2253      	movs	r2, #83	; 0x53
 80014c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014e2:	4829      	ldr	r0, [pc, #164]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014e4:	f001 fa6a 	bl	80029bc <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80014ee:	f000 f8f3 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001500:	f001 fdf0 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800150a:	f000 f8e5 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001510:	f001 fb14 	bl	8002b3c <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800151a:	f000 f8dd 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4619      	mov	r1, r3
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <MX_TIM5_Init+0xfc>)
 800152e:	f002 f9e5 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001538:	f000 f8ce 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2208      	movs	r2, #8
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001554:	f001 fd04 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800155e:	f000 f8bb 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	220c      	movs	r2, #12
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM5_Init+0xfc>)
 800156a:	f001 fcf9 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8001574:	f000 f8b0 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM5_Init+0xfc>)
 800157a:	f000 f92b 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3738      	adds	r7, #56	; 0x38
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200003ac 	.word	0x200003ac
 800158c:	40000c00 	.word	0x40000c00

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_GPIO_Init+0xac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <MX_GPIO_Init+0xac>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_GPIO_Init+0xac>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_GPIO_Init+0xac>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_GPIO_Init+0xac>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_GPIO_Init+0xac>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_GPIO_Init+0xac>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <MX_GPIO_Init+0xac>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_GPIO_Init+0xac>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_GPIO_Init+0xac>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <MX_GPIO_Init+0xac>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_GPIO_Init+0xac>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Checkpoint_Pin */
  GPIO_InitStruct.Pin = Checkpoint_Pin;
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Checkpoint_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_GPIO_Init+0xb0>)
 800162e:	f000 fb73 	bl	8001d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40021000 	.word	0x40021000

08001644 <StartAccelTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void const * argument)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Accel_Cal(&Accel_DC, Target_PWM, Target_Time);
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <StartAccelTask+0x5c>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <StartAccelTask+0x60>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	ee07 3a10 	vmov	s14, r3
 8001662:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001666:	eef0 0a47 	vmov.f32	s1, s14
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <StartAccelTask+0x64>)
 8001670:	f7ff fa62 	bl	8000b38 <Accel_Cal>
//	DC_Drive_BTS(&DC, &htim5, 1000, Accel_DC.vel_controller, TIM_CHANNEL_3, TIM_CHANNEL_4);
	DC_Drive_BTS(&DC, &htim1, 1000, Accel_DC.vel_controller, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <StartAccelTask+0x64>)
 8001676:	edd3 7a01 	vldr	s15, [r3, #4]
 800167a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167e:	2304      	movs	r3, #4
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	2300      	movs	r3, #0
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	ee17 3a90 	vmov	r3, s15
 800168a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800168e:	4907      	ldr	r1, [pc, #28]	; (80016ac <StartAccelTask+0x68>)
 8001690:	4807      	ldr	r0, [pc, #28]	; (80016b0 <StartAccelTask+0x6c>)
 8001692:	f7ff fad1 	bl	8000c38 <DC_Drive_BTS>
//	DC_Drive_BTS(&DC, &htim2, 1000, Accel_DC.vel_controller, TIM_CHANNEL_1, TIM_CHANNEL_2);
    osDelay(10);
 8001696:	200a      	movs	r0, #10
 8001698:	f002 fa7d 	bl	8003b96 <osDelay>
	Accel_Cal(&Accel_DC, Target_PWM, Target_Time);
 800169c:	e7d6      	b.n	800164c <StartAccelTask+0x8>
 800169e:	bf00      	nop
 80016a0:	200003f8 	.word	0x200003f8
 80016a4:	200003fa 	.word	0x200003fa
 80016a8:	20000418 	.word	0x20000418
 80016ac:	2000031c 	.word	0x2000031c
 80016b0:	200003fc 	.word	0x200003fc

080016b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016c6:	f000 fa25 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40002000 	.word	0x40002000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_MspInit+0x54>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_MspInit+0x54>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x54>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_MspInit+0x54>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_MspInit+0x54>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_MspInit+0x54>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	210f      	movs	r1, #15
 8001726:	f06f 0001 	mvn.w	r0, #1
 800172a:	f000 facb 	bl	8001cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10e      	bne.n	800176c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800176a:	e026      	b.n	80017ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d10e      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
}
 8001792:	e012      	b.n	80017ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_TIM_Base_MspInit+0x94>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10d      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_TIM_Base_MspInit+0x90>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40000c00 	.word	0x40000c00

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <HAL_TIM_MspPostInit+0x138>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d11f      	bne.n	8001836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a44      	ldr	r2, [pc, #272]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b42      	ldr	r3, [pc, #264]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001824:	2301      	movs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4839      	ldr	r0, [pc, #228]	; (8001914 <HAL_TIM_MspPostInit+0x140>)
 8001830:	f000 fa72 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001834:	e065      	b.n	8001902 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d13d      	bne.n	80018bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a2a      	ldr	r2, [pc, #168]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188a:	2301      	movs	r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	481f      	ldr	r0, [pc, #124]	; (8001914 <HAL_TIM_MspPostInit+0x140>)
 8001896:	f000 fa3f 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189a:	2308      	movs	r3, #8
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <HAL_TIM_MspPostInit+0x144>)
 80018b6:	f000 fa2f 	bl	8001d18 <HAL_GPIO_Init>
}
 80018ba:	e022      	b.n	8001902 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM5)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <HAL_TIM_MspPostInit+0x148>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11d      	bne.n	8001902 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_TIM_MspPostInit+0x13c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_TIM_MspPostInit+0x140>)
 80018fe:	f000 fa0b 	bl	8001d18 <HAL_GPIO_Init>
}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40010000 	.word	0x40010000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40000c00 	.word	0x40000c00

08001920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	; 0x38
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_InitTick+0xe4>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_InitTick+0xe4>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_InitTick+0xe4>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800194c:	f107 0210 	add.w	r2, r7, #16
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fffe 	bl	8002958 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001966:	f000 ffe3 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 800196a:	6378      	str	r0, [r7, #52]	; 0x34
 800196c:	e004      	b.n	8001978 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800196e:	f000 ffdf 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <HAL_InitTick+0xe8>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	0c9b      	lsrs	r3, r3, #18
 8001982:	3b01      	subs	r3, #1
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_InitTick+0xec>)
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <HAL_InitTick+0xf0>)
 800198a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_InitTick+0xec>)
 800198e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001992:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_InitTick+0xec>)
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_InitTick+0xec>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_InitTick+0xec>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_InitTick+0xec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <HAL_InitTick+0xec>)
 80019ae:	f001 f805 	bl	80029bc <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11b      	bne.n	80019f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <HAL_InitTick+0xec>)
 80019c2:	f001 f84b 	bl	8002a5c <HAL_TIM_Base_Start_IT>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019d4:	202d      	movs	r0, #45	; 0x2d
 80019d6:	f000 f991 	bl	8001cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d808      	bhi.n	80019f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	202d      	movs	r0, #45	; 0x2d
 80019e6:	f000 f96d 	bl	8001cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_InitTick+0xf4>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e002      	b.n	80019f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3738      	adds	r7, #56	; 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	2000042c 	.word	0x2000042c
 8001a10:	40002000 	.word	0x40002000
 8001a14:	20000004 	.word	0x20000004

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a4a:	f001 f999 	bl	8002d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000042c 	.word	0x2000042c

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a80:	f7ff ffea 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f003 fadd 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff fb11 	bl	80010d4 <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ac0:	080051d4 	.word	0x080051d4
  ldr r2, =_sbss
 8001ac4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ac8:	2000430c 	.word	0x2000430c

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f8d8 	bl	8001cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff ff0e 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fdee 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000474 	.word	0x20000474

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000474 	.word	0x20000474

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff4c 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd6:	f7ff ff61 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f7ff ffb1 	bl	8001c48 <NVIC_EncodePriority>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff80 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff54 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e16b      	b.n	800200c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 815a 	bne.w	8002006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80b4 	beq.w	8002006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a5b      	ldr	r2, [pc, #364]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_GPIO_Init+0x314>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	; (8002034 <HAL_GPIO_Init+0x31c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x324>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x328>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x32c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20a>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_GPIO_Init+0x334>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_GPIO_Init+0x334>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae90 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40021400 	.word	0x40021400
 8002044:	40021800 	.word	0x40021800
 8002048:	40021c00 	.word	0x40021c00
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e267      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d075      	beq.n	800215a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d00c      	beq.n	8002094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b85      	ldr	r3, [pc, #532]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002082:	2b08      	cmp	r3, #8
 8002084:	d112      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002086:	4b82      	ldr	r3, [pc, #520]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d157      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e242      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x74>
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6f      	ldr	r2, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fd18 	bl	8001b3c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fd14 	bl	8001b3c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e207      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xc0>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fd04 	bl	8001b3c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fd00 	bl	8001b3c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1f3      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1c7      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_OscConfig+0x244>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fcb9 	bl	8001b3c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fcb5 	bl	8001b3c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1a8      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x244>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fc98 	bl	8001b3c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fc94 	bl	8001b3c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e187      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x248>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff fc78 	bl	8001b3c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fc74 	bl	8001b3c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e167      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_OscConfig+0x240>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x200>
 800226e:	e01b      	b.n	80022a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x248>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fc61 	bl	8001b3c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	e00e      	b.n	800229c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff fc5d 	bl	8001b3c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d907      	bls.n	800229c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e150      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 8002290:	40023800 	.word	0x40023800
 8002294:	42470000 	.word	0x42470000
 8002298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ea      	bne.n	800227e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8097 	beq.w	80023e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a73      	ldr	r2, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x474>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fc1d 	bl	8001b3c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff fc19 	bl	8001b3c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e10c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x474>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x2ea>
 800232c:	4b64      	ldr	r3, [pc, #400]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a63      	ldr	r2, [pc, #396]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x30c>
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a5e      	ldr	r2, [pc, #376]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	4b5c      	ldr	r3, [pc, #368]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a5b      	ldr	r2, [pc, #364]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x324>
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff fbde 	bl	8001b3c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff fbda 	bl	8001b3c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0cb      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ee      	beq.n	8002384 <HAL_RCC_OscConfig+0x334>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fbc8 	bl	8001b3c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7ff fbc4 	bl	8001b3c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0b5      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a1 	beq.w	8002530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d05c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d141      	bne.n	8002486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fb98 	bl	8001b3c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff fb94 	bl	8001b3c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e087      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	491b      	ldr	r1, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x478>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb6d 	bl	8001b3c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fb69 	bl	8001b3c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e05c      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x416>
 8002484:	e054      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_OscConfig+0x478>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fb56 	bl	8001b3c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff fb52 	bl	8001b3c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e045      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_OscConfig+0x470>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
 80024b2:	e03d      	b.n	8002530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e038      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x4ec>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d028      	beq.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d121      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0cc      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d90c      	bls.n	800257c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800259e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d044      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e067      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4934      	ldr	r1, [pc, #208]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff fa84 	bl	8001b3c <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff fa80 	bl	8001b3c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d20c      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f91a 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	080051ac 	.word	0x080051ac
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b094      	sub	sp, #80	; 0x50
 8002712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	647b      	str	r3, [r7, #68]	; 0x44
 8002718:	2300      	movs	r3, #0
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800271c:	2300      	movs	r3, #0
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00d      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x40>
 8002730:	2b08      	cmp	r3, #8
 8002732:	f200 80e1 	bhi.w	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d003      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e0db      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002744:	e0db      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_GetSysClockFreq+0x208>)
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274a:	e0d8      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800274c:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	099b      	lsrs	r3, r3, #6
 8002768:	2200      	movs	r2, #0
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
 800276c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
 800277a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	6139      	str	r1, [r7, #16]
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b0:	4659      	mov	r1, fp
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4651      	mov	r1, sl
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4651      	mov	r1, sl
 80027c0:	ebb2 0801 	subs.w	r8, r2, r1
 80027c4:	4659      	mov	r1, fp
 80027c6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	eb18 0303 	adds.w	r3, r8, r3
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	462b      	mov	r3, r5
 80027ec:	eb49 0303 	adc.w	r3, r9, r3
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027fe:	4629      	mov	r1, r5
 8002800:	024b      	lsls	r3, r1, #9
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002808:	4621      	mov	r1, r4
 800280a:	024a      	lsls	r2, r1, #9
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281c:	f7fe f80e 	bl	800083c <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	e058      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	4618      	mov	r0, r3
 8002834:	4611      	mov	r1, r2
 8002836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002856:	0150      	lsls	r0, r2, #5
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4641      	mov	r1, r8
 800285e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002862:	4649      	mov	r1, r9
 8002864:	eb63 0b01 	sbc.w	fp, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800287c:	ebb2 040a 	subs.w	r4, r2, sl
 8002880:	eb63 050b 	sbc.w	r5, r3, fp
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	00eb      	lsls	r3, r5, #3
 800288e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002892:	00e2      	lsls	r2, r4, #3
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	4643      	mov	r3, r8
 800289a:	18e3      	adds	r3, r4, r3
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	464b      	mov	r3, r9
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b2:	4629      	mov	r1, r5
 80028b4:	028b      	lsls	r3, r1, #10
 80028b6:	4621      	mov	r1, r4
 80028b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028bc:	4621      	mov	r1, r4
 80028be:	028a      	lsls	r2, r1, #10
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2200      	movs	r2, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	61fa      	str	r2, [r7, #28]
 80028cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d0:	f7fd ffb4 	bl	800083c <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002900:	4618      	mov	r0, r3
 8002902:	3750      	adds	r7, #80	; 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff0 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	080051bc 	.word	0x080051bc

08002958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	220f      	movs	r2, #15
 8002966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCC_GetClockConfig+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40023c00 	.word	0x40023c00

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe feaa 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fc62 	bl	80032c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d001      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04e      	b.n	8002b12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d022      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d01d      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d018      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00e      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0x80>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d111      	bne.n	8002b00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d010      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	e007      	b.n	8002b10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40010400 	.word	0x40010400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40001800 	.word	0x40001800

08002b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f839 	bl	8002bda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fba2 	bl	80032c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_PWM_Start+0x24>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e022      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d109      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x3e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e015      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x58>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07c      	b.n	8002d5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x82>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x92>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c80:	e00b      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c90:	e003      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe04 	bl	80038b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <HAL_TIM_PWM_Start+0x174>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_PWM_Start+0xcc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <HAL_TIM_PWM_Start+0x178>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0xd0>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xd2>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_TIM_PWM_Start+0x174>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_TIM_PWM_Start+0x17c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_TIM_PWM_Start+0x180>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_TIM_PWM_Start+0x184>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_TIM_PWM_Start+0x178>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_TIM_PWM_Start+0x188>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x136>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_TIM_PWM_Start+0x18c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40010400 	.word	0x40010400
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	40001800 	.word	0x40001800

08002d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d020      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa5b 	bl	8003286 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa4d 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fa5e 	bl	800329a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d020      	beq.n	8002e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0204 	mvn.w	r2, #4
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa35 	bl	8003286 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa27 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa38 	bl	800329a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d020      	beq.n	8002e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01b      	beq.n	8002e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0208 	mvn.w	r2, #8
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa0f 	bl	8003286 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa01 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa12 	bl	800329a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0210 	mvn.w	r2, #16
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9e9 	bl	8003286 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9db 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9ec 	bl	800329a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0201 	mvn.w	r2, #1
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fbe4 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00c      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fdce 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9bd 	bl	80032ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0220 	mvn.w	r2, #32
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fda0 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0ae      	b.n	80030dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	f200 809f 	bhi.w	80030cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	080030cd 	.word	0x080030cd
 8002f9c:	080030cd 	.word	0x080030cd
 8002fa0:	080030cd 	.word	0x080030cd
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	080030cd 	.word	0x080030cd
 8002fac:	080030cd 	.word	0x080030cd
 8002fb0:	080030cd 	.word	0x080030cd
 8002fb4:	0800304b 	.word	0x0800304b
 8002fb8:	080030cd 	.word	0x080030cd
 8002fbc:	080030cd 	.word	0x080030cd
 8002fc0:	080030cd 	.word	0x080030cd
 8002fc4:	0800308b 	.word	0x0800308b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa24 	bl	800341c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	619a      	str	r2, [r3, #24]
      break;
 8003006:	e064      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fa74 	bl	80034fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
      break;
 8003048:	e043      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fac9 	bl	80035e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0208 	orr.w	r2, r2, #8
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0204 	bic.w	r2, r2, #4
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
      break;
 8003088:	e023      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fb1d 	bl	80036d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69d9      	ldr	r1, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	021a      	lsls	r2, r3, #8
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	61da      	str	r2, [r3, #28]
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
      break;
 80030d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_ConfigClockSource+0x1c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0b4      	b.n	800326a <HAL_TIM_ConfigClockSource+0x186>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800311e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003138:	d03e      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0xd4>
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313e:	f200 8087 	bhi.w	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003146:	f000 8086 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x172>
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d87f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b70      	cmp	r3, #112	; 0x70
 8003152:	d01a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xa6>
 8003154:	2b70      	cmp	r3, #112	; 0x70
 8003156:	d87b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b60      	cmp	r3, #96	; 0x60
 800315a:	d050      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x11a>
 800315c:	2b60      	cmp	r3, #96	; 0x60
 800315e:	d877      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b50      	cmp	r3, #80	; 0x50
 8003162:	d03c      	beq.n	80031de <HAL_TIM_ConfigClockSource+0xfa>
 8003164:	2b50      	cmp	r3, #80	; 0x50
 8003166:	d873      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d058      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x13a>
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d86f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b30      	cmp	r3, #48	; 0x30
 8003172:	d064      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b30      	cmp	r3, #48	; 0x30
 8003176:	d86b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d060      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d867      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05c      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003184:	2b10      	cmp	r3, #16
 8003186:	d05a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	e062      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319a:	f000 fb69 	bl	8003870 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	609a      	str	r2, [r3, #8]
      break;
 80031b6:	e04f      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	f000 fb52 	bl	8003870 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031da:	609a      	str	r2, [r3, #8]
      break;
 80031dc:	e03c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fac6 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2150      	movs	r1, #80	; 0x50
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fb1f 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 80031fc:	e02c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	461a      	mov	r2, r3
 800320c:	f000 fae5 	bl	80037da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2160      	movs	r1, #96	; 0x60
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fb0f 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 800321c:	e01c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	461a      	mov	r2, r3
 800322c:	f000 faa6 	bl	800377c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2140      	movs	r1, #64	; 0x40
 8003236:	4618      	mov	r0, r3
 8003238:	f000 faff 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 800323c:	e00c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f000 faf6 	bl	800383a <TIM_ITRx_SetConfig>
      break;
 800324e:	e003      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e000      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a46      	ldr	r2, [pc, #280]	; (80033f0 <TIM_Base_SetConfig+0x12c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d00f      	beq.n	8003304 <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a43      	ldr	r2, [pc, #268]	; (80033f4 <TIM_Base_SetConfig+0x130>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <TIM_Base_SetConfig+0x134>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <TIM_Base_SetConfig+0x40>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a41      	ldr	r2, [pc, #260]	; (80033fc <TIM_Base_SetConfig+0x138>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d003      	beq.n	8003304 <TIM_Base_SetConfig+0x40>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a40      	ldr	r2, [pc, #256]	; (8003400 <TIM_Base_SetConfig+0x13c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d108      	bne.n	8003316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <TIM_Base_SetConfig+0x12c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02b      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d027      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a32      	ldr	r2, [pc, #200]	; (80033f4 <TIM_Base_SetConfig+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d023      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <TIM_Base_SetConfig+0x134>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01f      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a30      	ldr	r2, [pc, #192]	; (80033fc <TIM_Base_SetConfig+0x138>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01b      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <TIM_Base_SetConfig+0x13c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d017      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <TIM_Base_SetConfig+0x140>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <TIM_Base_SetConfig+0x144>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00f      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <TIM_Base_SetConfig+0x148>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00b      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <TIM_Base_SetConfig+0x14c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <TIM_Base_SetConfig+0x150>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d003      	beq.n	8003376 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <TIM_Base_SetConfig+0x154>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <TIM_Base_SetConfig+0x12c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_Base_SetConfig+0xf8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <TIM_Base_SetConfig+0x13c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40010400 	.word	0x40010400
 8003404:	40014000 	.word	0x40014000
 8003408:	40014400 	.word	0x40014400
 800340c:	40014800 	.word	0x40014800
 8003410:	40001800 	.word	0x40001800
 8003414:	40001c00 	.word	0x40001c00
 8003418:	40002000 	.word	0x40002000

0800341c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0201 	bic.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 0302 	bic.w	r3, r3, #2
 8003464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <TIM_OC1_SetConfig+0xd8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_OC1_SetConfig+0x64>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <TIM_OC1_SetConfig+0xdc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10c      	bne.n	800349a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0308 	bic.w	r3, r3, #8
 8003486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <TIM_OC1_SetConfig+0xd8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_OC1_SetConfig+0x8e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <TIM_OC1_SetConfig+0xdc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010400 	.word	0x40010400

080034fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 0210 	bic.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0320 	bic.w	r3, r3, #32
 8003546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <TIM_OC2_SetConfig+0xe4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC2_SetConfig+0x68>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <TIM_OC2_SetConfig+0xe8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10d      	bne.n	8003580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800357e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <TIM_OC2_SetConfig+0xe4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC2_SetConfig+0x94>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <TIM_OC2_SetConfig+0xe8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d113      	bne.n	80035b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400

080035e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <TIM_OC3_SetConfig+0xe0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_OC3_SetConfig+0x66>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a20      	ldr	r2, [pc, #128]	; (80036cc <TIM_OC3_SetConfig+0xe4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10d      	bne.n	800366a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <TIM_OC3_SetConfig+0xe0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_OC3_SetConfig+0x92>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a15      	ldr	r2, [pc, #84]	; (80036cc <TIM_OC3_SetConfig+0xe4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d113      	bne.n	80036a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40010400 	.word	0x40010400

080036d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800371a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	031b      	lsls	r3, r3, #12
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <TIM_OC4_SetConfig+0xa4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_OC4_SetConfig+0x68>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a11      	ldr	r2, [pc, #68]	; (8003778 <TIM_OC4_SetConfig+0xa8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d109      	bne.n	800374c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40010400 	.word	0x40010400

0800377c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0201 	bic.w	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 030a 	bic.w	r3, r3, #10
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037da:	b480      	push	{r7}
 80037dc:	b087      	sub	sp, #28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 0210 	bic.w	r2, r3, #16
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	f043 0307 	orr.w	r3, r3, #7
 800385c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	021a      	lsls	r2, r3, #8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e05a      	b.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d01d      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10c      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40010400 	.word	0x40010400
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40001800 	.word	0x40001800

080039f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e03d      	b.n	8003a8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad2:	2b84      	cmp	r3, #132	; 0x84
 8003ad4:	d005      	beq.n	8003ae2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ad6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	3303      	adds	r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003af4:	f000 faf6 	bl	80040e4 <vTaskStartScheduler>
  
  return osOK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	bd80      	pop	{r7, pc}

08003afe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b00:	b089      	sub	sp, #36	; 0x24
 8003b02:	af04      	add	r7, sp, #16
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <osThreadCreate+0x54>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685c      	ldr	r4, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691e      	ldr	r6, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ffc8 	bl	8003ac0 <makeFreeRtosPriority>
 8003b30:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b3a:	9202      	str	r2, [sp, #8]
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	9100      	str	r1, [sp, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4632      	mov	r2, r6
 8003b44:	4629      	mov	r1, r5
 8003b46:	4620      	mov	r0, r4
 8003b48:	f000 f8ed 	bl	8003d26 <xTaskCreateStatic>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e01c      	b.n	8003b8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685c      	ldr	r4, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ffaa 	bl	8003ac0 <makeFreeRtosPriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	9200      	str	r2, [sp, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 f92f 	bl	8003de0 <xTaskCreate>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d001      	beq.n	8003b8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <osDelay+0x16>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	e000      	b.n	8003bae <osDelay+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fa64 	bl	800407c <vTaskDelay>
  
  return osOK;
 8003bb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f103 0208 	add.w	r2, r3, #8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0208 	add.w	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f103 0208 	add.w	r2, r3, #8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d103      	bne.n	8003c80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e00c      	b.n	8003c9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3308      	adds	r3, #8
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <vListInsert+0x2e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d2f6      	bcs.n	8003c88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6852      	ldr	r2, [r2, #4]
 8003cf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08e      	sub	sp, #56	; 0x38
 8003d2a:	af04      	add	r7, sp, #16
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <xTaskCreateStatic+0x46>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d6c:	23a0      	movs	r3, #160	; 0xa0
 8003d6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2ba0      	cmp	r3, #160	; 0xa0
 8003d74:	d00a      	beq.n	8003d8c <xTaskCreateStatic+0x66>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	61bb      	str	r3, [r7, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01e      	beq.n	8003dd2 <xTaskCreateStatic+0xac>
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01b      	beq.n	8003dd2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dac:	2300      	movs	r3, #0
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	9302      	str	r3, [sp, #8]
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f851 	bl	8003e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dcc:	f000 f8ec 	bl	8003fa8 <prvAddNewTaskToReadyList>
 8003dd0:	e001      	b.n	8003dd6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dd6:	697b      	ldr	r3, [r7, #20]
	}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af04      	add	r7, sp, #16
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 feef 	bl	8004bd8 <pvPortMalloc>
 8003dfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e02:	20a0      	movs	r0, #160	; 0xa0
 8003e04:	f000 fee8 	bl	8004bd8 <pvPortMalloc>
 8003e08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
 8003e16:	e005      	b.n	8003e24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f000 ffa9 	bl	8004d70 <vPortFree>
 8003e1e:	e001      	b.n	8003e24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d017      	beq.n	8003e5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9303      	str	r3, [sp, #12]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	9302      	str	r3, [sp, #8]
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f80f 	bl	8003e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e4e:	69f8      	ldr	r0, [r7, #28]
 8003e50:	f000 f8aa 	bl	8003fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e54:	2301      	movs	r3, #1
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e002      	b.n	8003e60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e60:	69bb      	ldr	r3, [r7, #24]
	}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e84:	3b01      	subs	r3, #1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	617b      	str	r3, [r7, #20]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01f      	beq.n	8003efa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e012      	b.n	8003ee6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	7819      	ldrb	r1, [r3, #0]
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3334      	adds	r3, #52	; 0x34
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d9e9      	bls.n	8003ec0 <prvInitialiseNewTask+0x54>
 8003eec:	e000      	b.n	8003ef0 <prvInitialiseNewTask+0x84>
			{
				break;
 8003eee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef8:	e003      	b.n	8003f02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	2b06      	cmp	r3, #6
 8003f06:	d901      	bls.n	8003f0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f08:	2306      	movs	r3, #6
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fe6b 	bl	8003bfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	3318      	adds	r3, #24
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe66 	bl	8003bfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	f1c3 0207 	rsb	r2, r3, #7
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	334c      	adds	r3, #76	; 0x4c
 8003f5c:	224c      	movs	r2, #76	; 0x4c
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 f823 	bl	8004fac <memset>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <prvInitialiseNewTask+0x130>)
 8003f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <prvInitialiseNewTask+0x134>)
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <prvInitialiseNewTask+0x138>)
 8003f76:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	69b8      	ldr	r0, [r7, #24]
 8003f7e:	f000 fc1f 	bl	80047c0 <pxPortInitialiseStack>
 8003f82:	4602      	mov	r2, r0
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f94:	bf00      	nop
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200041cc 	.word	0x200041cc
 8003fa0:	20004234 	.word	0x20004234
 8003fa4:	2000429c 	.word	0x2000429c

08003fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb0:	f000 fd30 	bl	8004a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <prvAddNewTaskToReadyList+0xb8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <prvAddNewTaskToReadyList+0xb8>)
 8003fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <prvAddNewTaskToReadyList+0xbc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fc6:	4a27      	ldr	r2, [pc, #156]	; (8004064 <prvAddNewTaskToReadyList+0xbc>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <prvAddNewTaskToReadyList+0xb8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d110      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fd4:	f000 facc 	bl	8004570 <prvInitialiseTaskLists>
 8003fd8:	e00d      	b.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <prvAddNewTaskToReadyList+0xc0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <prvAddNewTaskToReadyList+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d802      	bhi.n	8003ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <prvAddNewTaskToReadyList+0xbc>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <prvAddNewTaskToReadyList+0xc4>)
 8003ffe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4313      	orrs	r3, r2
 800400e:	4a18      	ldr	r2, [pc, #96]	; (8004070 <prvAddNewTaskToReadyList+0xc8>)
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4a15      	ldr	r2, [pc, #84]	; (8004074 <prvAddNewTaskToReadyList+0xcc>)
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7ff fdf5 	bl	8003c18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800402e:	f000 fd21 	bl	8004a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <prvAddNewTaskToReadyList+0xc0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00e      	beq.n	8004058 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <prvAddNewTaskToReadyList+0xbc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d207      	bcs.n	8004058 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvAddNewTaskToReadyList+0xd0>)
 800404a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000578 	.word	0x20000578
 8004064:	20000478 	.word	0x20000478
 8004068:	20000584 	.word	0x20000584
 800406c:	20000594 	.word	0x20000594
 8004070:	20000580 	.word	0x20000580
 8004074:	2000047c 	.word	0x2000047c
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d017      	beq.n	80040be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <vTaskDelay+0x60>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <vTaskDelay+0x30>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040ac:	f000 f884 	bl	80041b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040b0:	2100      	movs	r1, #0
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fb1e 	bl	80046f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040b8:	f000 f88c 	bl	80041d4 <xTaskResumeAll>
 80040bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <vTaskDelay+0x64>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	200005a0 	.word	0x200005a0
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040f2:	463a      	mov	r2, r7
 80040f4:	1d39      	adds	r1, r7, #4
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc ffd0 	bl	80010a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	9202      	str	r2, [sp, #8]
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	2300      	movs	r3, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2300      	movs	r3, #0
 8004110:	460a      	mov	r2, r1
 8004112:	4921      	ldr	r1, [pc, #132]	; (8004198 <vTaskStartScheduler+0xb4>)
 8004114:	4821      	ldr	r0, [pc, #132]	; (800419c <vTaskStartScheduler+0xb8>)
 8004116:	f7ff fe06 	bl	8003d26 <xTaskCreateStatic>
 800411a:	4603      	mov	r3, r0
 800411c:	4a20      	ldr	r2, [pc, #128]	; (80041a0 <vTaskStartScheduler+0xbc>)
 800411e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <vTaskStartScheduler+0xbc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e001      	b.n	8004132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d11b      	bne.n	8004170 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	613b      	str	r3, [r7, #16]
}
 800414a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <vTaskStartScheduler+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	334c      	adds	r3, #76	; 0x4c
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <vTaskStartScheduler+0xc4>)
 8004154:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <vTaskStartScheduler+0xc8>)
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <vTaskStartScheduler+0xcc>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <vTaskStartScheduler+0xd0>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800416a:	f000 fbb1 	bl	80048d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800416e:	e00e      	b.n	800418e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d10a      	bne.n	800418e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <vTaskStartScheduler+0xa8>
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	080051a4 	.word	0x080051a4
 800419c:	08004541 	.word	0x08004541
 80041a0:	2000059c 	.word	0x2000059c
 80041a4:	20000478 	.word	0x20000478
 80041a8:	2000005c 	.word	0x2000005c
 80041ac:	20000598 	.word	0x20000598
 80041b0:	20000584 	.word	0x20000584
 80041b4:	2000057c 	.word	0x2000057c

080041b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <vTaskSuspendAll+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	4a03      	ldr	r2, [pc, #12]	; (80041d0 <vTaskSuspendAll+0x18>)
 80041c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	200005a0 	.word	0x200005a0

080041d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <xTaskResumeAll+0x114>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <xTaskResumeAll+0x2c>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	603b      	str	r3, [r7, #0]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004200:	f000 fc08 	bl	8004a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004204:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <xTaskResumeAll+0x114>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	4a37      	ldr	r2, [pc, #220]	; (80042e8 <xTaskResumeAll+0x114>)
 800420c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <xTaskResumeAll+0x114>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d161      	bne.n	80042da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004216:	4b35      	ldr	r3, [pc, #212]	; (80042ec <xTaskResumeAll+0x118>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d05d      	beq.n	80042da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800421e:	e02e      	b.n	800427e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <xTaskResumeAll+0x11c>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3318      	adds	r3, #24
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fd50 	bl	8003cd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fd4b 	bl	8003cd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <xTaskResumeAll+0x120>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <xTaskResumeAll+0x120>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <xTaskResumeAll+0x124>)
 800425c:	441a      	add	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff fcd7 	bl	8003c18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <xTaskResumeAll+0x128>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <xTaskResumeAll+0x12c>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <xTaskResumeAll+0x11c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1cc      	bne.n	8004220 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800428c:	f000 fa12 	bl	80046b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xTaskResumeAll+0x130>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800429c:	f000 f836 	bl	800430c <xTaskIncrementTick>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <xTaskResumeAll+0x12c>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f1      	bne.n	800429c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <xTaskResumeAll+0x130>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <xTaskResumeAll+0x12c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <xTaskResumeAll+0x134>)
 80042cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042da:	f000 fbcb 	bl	8004a74 <vPortExitCritical>

	return xAlreadyYielded;
 80042de:	68bb      	ldr	r3, [r7, #8]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	200005a0 	.word	0x200005a0
 80042ec:	20000578 	.word	0x20000578
 80042f0:	20000538 	.word	0x20000538
 80042f4:	20000580 	.word	0x20000580
 80042f8:	2000047c 	.word	0x2000047c
 80042fc:	20000478 	.word	0x20000478
 8004300:	2000058c 	.word	0x2000058c
 8004304:	20000588 	.word	0x20000588
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004316:	4b4e      	ldr	r3, [pc, #312]	; (8004450 <xTaskIncrementTick+0x144>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 808e 	bne.w	800443c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <xTaskIncrementTick+0x148>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <xTaskIncrementTick+0x148>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d120      	bne.n	8004376 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <xTaskIncrementTick+0x14c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <xTaskIncrementTick+0x48>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	603b      	str	r3, [r7, #0]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xTaskIncrementTick+0x46>
 8004354:	4b40      	ldr	r3, [pc, #256]	; (8004458 <xTaskIncrementTick+0x14c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <xTaskIncrementTick+0x150>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <xTaskIncrementTick+0x14c>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4a3e      	ldr	r2, [pc, #248]	; (800445c <xTaskIncrementTick+0x150>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <xTaskIncrementTick+0x154>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <xTaskIncrementTick+0x154>)
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	f000 f99f 	bl	80046b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <xTaskIncrementTick+0x158>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d348      	bcc.n	8004412 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004380:	4b35      	ldr	r3, [pc, #212]	; (8004458 <xTaskIncrementTick+0x14c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <xTaskIncrementTick+0x158>)
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	601a      	str	r2, [r3, #0]
					break;
 8004392:	e03e      	b.n	8004412 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004394:	4b30      	ldr	r3, [pc, #192]	; (8004458 <xTaskIncrementTick+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d203      	bcs.n	80043b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ac:	4a2d      	ldr	r2, [pc, #180]	; (8004464 <xTaskIncrementTick+0x158>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043b2:	e02e      	b.n	8004412 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fc8a 	bl	8003cd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3318      	adds	r3, #24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc81 	bl	8003cd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <xTaskIncrementTick+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <xTaskIncrementTick+0x15c>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <xTaskIncrementTick+0x160>)
 80043f0:	441a      	add	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7ff fc0d 	bl	8003c18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <xTaskIncrementTick+0x164>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	429a      	cmp	r2, r3
 800440a:	d3b9      	bcc.n	8004380 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004410:	e7b6      	b.n	8004380 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <xTaskIncrementTick+0x164>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4914      	ldr	r1, [pc, #80]	; (800446c <xTaskIncrementTick+0x160>)
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d901      	bls.n	800442e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <xTaskIncrementTick+0x168>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e004      	b.n	8004446 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <xTaskIncrementTick+0x16c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <xTaskIncrementTick+0x16c>)
 8004444:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	200005a0 	.word	0x200005a0
 8004454:	2000057c 	.word	0x2000057c
 8004458:	20000530 	.word	0x20000530
 800445c:	20000534 	.word	0x20000534
 8004460:	20000590 	.word	0x20000590
 8004464:	20000598 	.word	0x20000598
 8004468:	20000580 	.word	0x20000580
 800446c:	2000047c 	.word	0x2000047c
 8004470:	20000478 	.word	0x20000478
 8004474:	2000058c 	.word	0x2000058c
 8004478:	20000588 	.word	0x20000588

0800447c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <vTaskSwitchContext+0xac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <vTaskSwitchContext+0xb0>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004490:	e044      	b.n	800451c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <vTaskSwitchContext+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <vTaskSwitchContext+0xb4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f1c3 031f 	rsb	r3, r3, #31
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	4921      	ldr	r1, [pc, #132]	; (8004534 <vTaskSwitchContext+0xb8>)
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <vTaskSwitchContext+0x5a>
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <vTaskSwitchContext+0xb8>)
 80044e4:	4413      	add	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3308      	adds	r3, #8
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d104      	bne.n	8004508 <vTaskSwitchContext+0x8c>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <vTaskSwitchContext+0xbc>)
 8004510:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <vTaskSwitchContext+0xbc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	334c      	adds	r3, #76	; 0x4c
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <vTaskSwitchContext+0xc0>)
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	200005a0 	.word	0x200005a0
 800452c:	2000058c 	.word	0x2000058c
 8004530:	20000580 	.word	0x20000580
 8004534:	2000047c 	.word	0x2000047c
 8004538:	20000478 	.word	0x20000478
 800453c:	2000005c 	.word	0x2000005c

08004540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004548:	f000 f852 	bl	80045f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <prvIdleTask+0x28>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d9f9      	bls.n	8004548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <prvIdleTask+0x2c>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004564:	e7f0      	b.n	8004548 <prvIdleTask+0x8>
 8004566:	bf00      	nop
 8004568:	2000047c 	.word	0x2000047c
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	e00c      	b.n	8004596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <prvInitialiseTaskLists+0x60>)
 8004588:	4413      	add	r3, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fb17 	bl	8003bbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3301      	adds	r3, #1
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b06      	cmp	r3, #6
 800459a:	d9ef      	bls.n	800457c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800459c:	480d      	ldr	r0, [pc, #52]	; (80045d4 <prvInitialiseTaskLists+0x64>)
 800459e:	f7ff fb0e 	bl	8003bbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a2:	480d      	ldr	r0, [pc, #52]	; (80045d8 <prvInitialiseTaskLists+0x68>)
 80045a4:	f7ff fb0b 	bl	8003bbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045a8:	480c      	ldr	r0, [pc, #48]	; (80045dc <prvInitialiseTaskLists+0x6c>)
 80045aa:	f7ff fb08 	bl	8003bbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ae:	480c      	ldr	r0, [pc, #48]	; (80045e0 <prvInitialiseTaskLists+0x70>)
 80045b0:	f7ff fb05 	bl	8003bbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045b4:	480b      	ldr	r0, [pc, #44]	; (80045e4 <prvInitialiseTaskLists+0x74>)
 80045b6:	f7ff fb02 	bl	8003bbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <prvInitialiseTaskLists+0x78>)
 80045bc:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <prvInitialiseTaskLists+0x64>)
 80045be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <prvInitialiseTaskLists+0x7c>)
 80045c2:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <prvInitialiseTaskLists+0x68>)
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000047c 	.word	0x2000047c
 80045d4:	20000508 	.word	0x20000508
 80045d8:	2000051c 	.word	0x2000051c
 80045dc:	20000538 	.word	0x20000538
 80045e0:	2000054c 	.word	0x2000054c
 80045e4:	20000564 	.word	0x20000564
 80045e8:	20000530 	.word	0x20000530
 80045ec:	20000534 	.word	0x20000534

080045f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f6:	e019      	b.n	800462c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045f8:	f000 fa0c 	bl	8004a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <prvCheckTasksWaitingTermination+0x50>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fb62 	bl	8003cd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <prvCheckTasksWaitingTermination+0x54>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3b01      	subs	r3, #1
 8004614:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <prvCheckTasksWaitingTermination+0x54>)
 8004616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <prvCheckTasksWaitingTermination+0x58>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <prvCheckTasksWaitingTermination+0x58>)
 8004620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004622:	f000 fa27 	bl	8004a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f810 	bl	800464c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <prvCheckTasksWaitingTermination+0x58>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e1      	bne.n	80045f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000054c 	.word	0x2000054c
 8004644:	20000578 	.word	0x20000578
 8004648:	20000560 	.word	0x20000560

0800464c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	334c      	adds	r3, #76	; 0x4c
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fcaf 	bl	8004fbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fb7f 	bl	8004d70 <vPortFree>
				vPortFree( pxTCB );
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb7c 	bl	8004d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004678:	e018      	b.n	80046ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004680:	2b01      	cmp	r3, #1
 8004682:	d103      	bne.n	800468c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fb73 	bl	8004d70 <vPortFree>
	}
 800468a:	e00f      	b.n	80046ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004692:	2b02      	cmp	r3, #2
 8004694:	d00a      	beq.n	80046ac <prvDeleteTCB+0x60>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60fb      	str	r3, [r7, #12]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <prvDeleteTCB+0x5e>
	}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <prvResetNextTaskUnblockTime+0x38>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <prvResetNextTaskUnblockTime+0x3c>)
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046cc:	e008      	b.n	80046e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <prvResetNextTaskUnblockTime+0x38>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <prvResetNextTaskUnblockTime+0x3c>)
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000530 	.word	0x20000530
 80046f0:	20000598 	.word	0x20000598

080046f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fae1 	bl	8003cd2 <uxListRemove>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	2201      	movs	r2, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4013      	ands	r3, r2
 800472a:	4a20      	ldr	r2, [pc, #128]	; (80047ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800472c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d10a      	bne.n	800474c <prvAddCurrentTaskToDelayedList+0x58>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004746:	f7ff fa67 	bl	8003c18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800474a:	e026      	b.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d209      	bcs.n	8004778 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fa75 	bl	8003c60 <vListInsert>
}
 8004776:	e010      	b.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7ff fa6b 	bl	8003c60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d202      	bcs.n	800479a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6013      	str	r3, [r2, #0]
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000057c 	.word	0x2000057c
 80047a8:	20000478 	.word	0x20000478
 80047ac:	20000580 	.word	0x20000580
 80047b0:	20000564 	.word	0x20000564
 80047b4:	20000534 	.word	0x20000534
 80047b8:	20000530 	.word	0x20000530
 80047bc:	20000598 	.word	0x20000598

080047c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3b04      	subs	r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3b04      	subs	r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047f0:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <pxPortInitialiseStack+0x64>)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b14      	subs	r3, #20
 80047fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3b04      	subs	r3, #4
 8004806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f06f 0202 	mvn.w	r2, #2
 800480e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b20      	subs	r3, #32
 8004814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	08004829 	.word	0x08004829

08004828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <prvTaskExitError+0x54>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d00a      	beq.n	8004852 <prvTaskExitError+0x2a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	60fb      	str	r3, [r7, #12]
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <prvTaskExitError+0x28>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
}
 8004864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004866:	bf00      	nop
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0fc      	beq.n	8004868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	2000000c 	.word	0x2000000c

08004880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <pxCurrentTCBConst2>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6808      	ldr	r0, [r1, #0]
 8004886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	f380 8809 	msr	PSP, r0
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8811 	msr	BASEPRI, r0
 800489a:	4770      	bx	lr
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst2>:
 80048a0:	20000478 	.word	0x20000478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048a8:	4808      	ldr	r0, [pc, #32]	; (80048cc <prvPortStartFirstTask+0x24>)
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	6800      	ldr	r0, [r0, #0]
 80048ae:	f380 8808 	msr	MSP, r0
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8814 	msr	CONTROL, r0
 80048ba:	b662      	cpsie	i
 80048bc:	b661      	cpsie	f
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	df00      	svc	0
 80048c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ca:	bf00      	nop
 80048cc:	e000ed08 	.word	0xe000ed08

080048d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048d6:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <xPortStartScheduler+0x120>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <xPortStartScheduler+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10a      	bne.n	80048f6 <xPortStartScheduler+0x26>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	613b      	str	r3, [r7, #16]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <xPortStartScheduler+0x120>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <xPortStartScheduler+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10a      	bne.n	8004916 <xPortStartScheduler+0x46>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <xPortStartScheduler+0x12c>)
 8004918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <xPortStartScheduler+0x130>)
 800493c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <xPortStartScheduler+0x134>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004944:	e009      	b.n	800495a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004946:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <xPortStartScheduler+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3b01      	subs	r3, #1
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <xPortStartScheduler+0x134>)
 800494e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d0ef      	beq.n	8004946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004966:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <xPortStartScheduler+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1c3 0307 	rsb	r3, r3, #7
 800496e:	2b04      	cmp	r3, #4
 8004970:	d00a      	beq.n	8004988 <xPortStartScheduler+0xb8>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <xPortStartScheduler+0x134>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <xPortStartScheduler+0x134>)
 8004990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004992:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <xPortStartScheduler+0x134>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <xPortStartScheduler+0x134>)
 800499c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049a6:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <xPortStartScheduler+0x138>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <xPortStartScheduler+0x138>)
 80049ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <xPortStartScheduler+0x138>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <xPortStartScheduler+0x138>)
 80049b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049be:	f000 f8dd 	bl	8004b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <xPortStartScheduler+0x13c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049c8:	f000 f8fc 	bl	8004bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <xPortStartScheduler+0x140>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0f      	ldr	r2, [pc, #60]	; (8004a10 <xPortStartScheduler+0x140>)
 80049d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049d8:	f7ff ff66 	bl	80048a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049dc:	f7ff fd4e 	bl	800447c <vTaskSwitchContext>
	prvTaskExitError();
 80049e0:	f7ff ff22 	bl	8004828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000ed00 	.word	0xe000ed00
 80049f4:	410fc271 	.word	0x410fc271
 80049f8:	410fc270 	.word	0x410fc270
 80049fc:	e000e400 	.word	0xe000e400
 8004a00:	200005a4 	.word	0x200005a4
 8004a04:	200005a8 	.word	0x200005a8
 8004a08:	e000ed20 	.word	0xe000ed20
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	e000ef34 	.word	0xe000ef34

08004a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3301      	adds	r3, #1
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <vPortEnterCritical+0x58>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10f      	bne.n	8004a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortEnterCritical+0x5c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	603b      	str	r3, [r7, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vPortEnterCritical+0x4a>
	}
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <vPortExitCritical+0x50>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <vPortExitCritical+0x24>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	607b      	str	r3, [r7, #4]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <vPortExitCritical+0x50>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <vPortExitCritical+0x50>)
 8004aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <vPortExitCritical+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <vPortExitCritical+0x42>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c
	...

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004af4:	f380 8811 	msr	BASEPRI, r0
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f7ff fcbc 	bl	800447c <vTaskSwitchContext>
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f380 8811 	msr	BASEPRI, r0
 8004b0c:	bc09      	pop	{r0, r3}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b16:	f01e 0f10 	tst.w	lr, #16
 8004b1a:	bf08      	it	eq
 8004b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b20:	f380 8809 	msr	PSP, r0
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst>:
 8004b30:	20000478 	.word	0x20000478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b52:	f7ff fbdb 	bl	800430c <xTaskIncrementTick>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <SysTick_Handler+0x40>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortSetupTimerInterrupt+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortSetupTimerInterrupt+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <vPortSetupTimerInterrupt+0x40>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <vPortSetupTimerInterrupt+0x44>)
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	e000e014 	.word	0xe000e014

08004bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd4 <vPortEnableVFP+0x10>
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bce:	6001      	str	r1, [r0, #0]
 8004bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed88 	.word	0xe000ed88

08004bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004be4:	f7ff fae8 	bl	80041b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004be8:	4b5b      	ldr	r3, [pc, #364]	; (8004d58 <pvPortMalloc+0x180>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bf0:	f000 f920 	bl	8004e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <pvPortMalloc+0x184>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8093 	bne.w	8004d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01d      	beq.n	8004c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c08:	2208      	movs	r2, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	3308      	adds	r3, #8
 8004c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <pvPortMalloc+0x6c>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	617b      	str	r3, [r7, #20]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06e      	beq.n	8004d28 <pvPortMalloc+0x150>
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <pvPortMalloc+0x188>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d869      	bhi.n	8004d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c54:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <pvPortMalloc+0x18c>)
 8004c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <pvPortMalloc+0x18c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c5e:	e004      	b.n	8004c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <pvPortMalloc+0xa4>
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f1      	bne.n	8004c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c7c:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <pvPortMalloc+0x180>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d050      	beq.n	8004d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d91f      	bls.n	8004ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	613b      	str	r3, [r7, #16]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ce2:	69b8      	ldr	r0, [r7, #24]
 8004ce4:	f000 f908 	bl	8004ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <pvPortMalloc+0x188>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <pvPortMalloc+0x188>)
 8004cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <pvPortMalloc+0x188>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <pvPortMalloc+0x190>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d203      	bcs.n	8004d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <pvPortMalloc+0x188>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <pvPortMalloc+0x190>)
 8004d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <pvPortMalloc+0x184>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <pvPortMalloc+0x194>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <pvPortMalloc+0x194>)
 8004d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d28:	f7ff fa54 	bl	80041d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <pvPortMalloc+0x174>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60fb      	str	r3, [r7, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <pvPortMalloc+0x172>
	return pvReturn;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200041b4 	.word	0x200041b4
 8004d5c:	200041c8 	.word	0x200041c8
 8004d60:	200041b8 	.word	0x200041b8
 8004d64:	200041ac 	.word	0x200041ac
 8004d68:	200041bc 	.word	0x200041bc
 8004d6c:	200041c0 	.word	0x200041c0

08004d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04d      	beq.n	8004e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d82:	2308      	movs	r3, #8
 8004d84:	425b      	negs	r3, r3
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <vPortFree+0xb8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <vPortFree+0x44>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <vPortFree+0x62>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <vPortFree+0xb8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <vPortFree+0xb8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	401a      	ands	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004df8:	f7ff f9de 	bl	80041b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <vPortFree+0xbc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <vPortFree+0xbc>)
 8004e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f000 f874 	bl	8004ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <vPortFree+0xc0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a06      	ldr	r2, [pc, #24]	; (8004e30 <vPortFree+0xc0>)
 8004e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e1a:	f7ff f9db 	bl	80041d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200041c8 	.word	0x200041c8
 8004e2c:	200041b8 	.word	0x200041b8
 8004e30:	200041c4 	.word	0x200041c4

08004e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <prvHeapInit+0xac>)
 8004e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3307      	adds	r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <prvHeapInit+0xac>)
 8004e64:	4413      	add	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <prvHeapInit+0xb0>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <prvHeapInit+0xb0>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e80:	2208      	movs	r2, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <prvHeapInit+0xb4>)
 8004e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <prvHeapInit+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <prvHeapInit+0xb4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <prvHeapInit+0xb4>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <prvHeapInit+0xb8>)
 8004ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <prvHeapInit+0xbc>)
 8004eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <prvHeapInit+0xc0>)
 8004ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	200005ac 	.word	0x200005ac
 8004ee4:	200041ac 	.word	0x200041ac
 8004ee8:	200041b4 	.word	0x200041b4
 8004eec:	200041bc 	.word	0x200041bc
 8004ef0:	200041b8 	.word	0x200041b8
 8004ef4:	200041c8 	.word	0x200041c8

08004ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <prvInsertBlockIntoFreeList+0xac>)
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e002      	b.n	8004f0c <prvInsertBlockIntoFreeList+0x14>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d8f7      	bhi.n	8004f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d108      	bne.n	8004f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	441a      	add	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d118      	bne.n	8004f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d00d      	beq.n	8004f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e008      	b.n	8004f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e003      	b.n	8004f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d002      	beq.n	8004f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	200041ac 	.word	0x200041ac
 8004fa8:	200041b4 	.word	0x200041b4

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <_reclaim_reent>:
 8004fbc:	4b29      	ldr	r3, [pc, #164]	; (8005064 <_reclaim_reent+0xa8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	d04b      	beq.n	8005060 <_reclaim_reent+0xa4>
 8004fc8:	69c3      	ldr	r3, [r0, #28]
 8004fca:	b143      	cbz	r3, 8004fde <_reclaim_reent+0x22>
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d144      	bne.n	800505c <_reclaim_reent+0xa0>
 8004fd2:	69e3      	ldr	r3, [r4, #28]
 8004fd4:	6819      	ldr	r1, [r3, #0]
 8004fd6:	b111      	cbz	r1, 8004fde <_reclaim_reent+0x22>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 f86b 	bl	80050b4 <_free_r>
 8004fde:	6961      	ldr	r1, [r4, #20]
 8004fe0:	b111      	cbz	r1, 8004fe8 <_reclaim_reent+0x2c>
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 f866 	bl	80050b4 <_free_r>
 8004fe8:	69e1      	ldr	r1, [r4, #28]
 8004fea:	b111      	cbz	r1, 8004ff2 <_reclaim_reent+0x36>
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 f861 	bl	80050b4 <_free_r>
 8004ff2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ff4:	b111      	cbz	r1, 8004ffc <_reclaim_reent+0x40>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 f85c 	bl	80050b4 <_free_r>
 8004ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffe:	b111      	cbz	r1, 8005006 <_reclaim_reent+0x4a>
 8005000:	4620      	mov	r0, r4
 8005002:	f000 f857 	bl	80050b4 <_free_r>
 8005006:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005008:	b111      	cbz	r1, 8005010 <_reclaim_reent+0x54>
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f852 	bl	80050b4 <_free_r>
 8005010:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005012:	b111      	cbz	r1, 800501a <_reclaim_reent+0x5e>
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f84d 	bl	80050b4 <_free_r>
 800501a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800501c:	b111      	cbz	r1, 8005024 <_reclaim_reent+0x68>
 800501e:	4620      	mov	r0, r4
 8005020:	f000 f848 	bl	80050b4 <_free_r>
 8005024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005026:	b111      	cbz	r1, 800502e <_reclaim_reent+0x72>
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f843 	bl	80050b4 <_free_r>
 800502e:	6a23      	ldr	r3, [r4, #32]
 8005030:	b1b3      	cbz	r3, 8005060 <_reclaim_reent+0xa4>
 8005032:	4620      	mov	r0, r4
 8005034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005038:	4718      	bx	r3
 800503a:	5949      	ldr	r1, [r1, r5]
 800503c:	b941      	cbnz	r1, 8005050 <_reclaim_reent+0x94>
 800503e:	3504      	adds	r5, #4
 8005040:	69e3      	ldr	r3, [r4, #28]
 8005042:	2d80      	cmp	r5, #128	; 0x80
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	d1f8      	bne.n	800503a <_reclaim_reent+0x7e>
 8005048:	4620      	mov	r0, r4
 800504a:	f000 f833 	bl	80050b4 <_free_r>
 800504e:	e7c0      	b.n	8004fd2 <_reclaim_reent+0x16>
 8005050:	680e      	ldr	r6, [r1, #0]
 8005052:	4620      	mov	r0, r4
 8005054:	f000 f82e 	bl	80050b4 <_free_r>
 8005058:	4631      	mov	r1, r6
 800505a:	e7ef      	b.n	800503c <_reclaim_reent+0x80>
 800505c:	2500      	movs	r5, #0
 800505e:	e7ef      	b.n	8005040 <_reclaim_reent+0x84>
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	bf00      	nop
 8005064:	2000005c 	.word	0x2000005c

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 f872 	bl	8005164 <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	080051cc 	.word	0x080051cc
 80050a4:	080051cc 	.word	0x080051cc
 80050a8:	080051cc 	.word	0x080051cc
 80050ac:	080051d0 	.word	0x080051d0

080050b0 <__retarget_lock_acquire_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <__retarget_lock_release_recursive>:
 80050b2:	4770      	bx	lr

080050b4 <_free_r>:
 80050b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d044      	beq.n	8005144 <_free_r+0x90>
 80050ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050be:	9001      	str	r0, [sp, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f1a1 0404 	sub.w	r4, r1, #4
 80050c6:	bfb8      	it	lt
 80050c8:	18e4      	addlt	r4, r4, r3
 80050ca:	f000 f83f 	bl	800514c <__malloc_lock>
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <_free_r+0x94>)
 80050d0:	9801      	ldr	r0, [sp, #4]
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	b933      	cbnz	r3, 80050e4 <_free_r+0x30>
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	6014      	str	r4, [r2, #0]
 80050da:	b003      	add	sp, #12
 80050dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e0:	f000 b83a 	b.w	8005158 <__malloc_unlock>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d908      	bls.n	80050fa <_free_r+0x46>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf01      	itttt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	1949      	addeq	r1, r1, r5
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	e7ed      	b.n	80050d6 <_free_r+0x22>
 80050fa:	461a      	mov	r2, r3
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b10b      	cbz	r3, 8005104 <_free_r+0x50>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d9fa      	bls.n	80050fa <_free_r+0x46>
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	1855      	adds	r5, r2, r1
 8005108:	42a5      	cmp	r5, r4
 800510a:	d10b      	bne.n	8005124 <_free_r+0x70>
 800510c:	6824      	ldr	r4, [r4, #0]
 800510e:	4421      	add	r1, r4
 8005110:	1854      	adds	r4, r2, r1
 8005112:	42a3      	cmp	r3, r4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	d1e0      	bne.n	80050da <_free_r+0x26>
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	440c      	add	r4, r1
 8005120:	6014      	str	r4, [r2, #0]
 8005122:	e7da      	b.n	80050da <_free_r+0x26>
 8005124:	d902      	bls.n	800512c <_free_r+0x78>
 8005126:	230c      	movs	r3, #12
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	e7d6      	b.n	80050da <_free_r+0x26>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf04      	itt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	bf04      	itt	eq
 800513c:	1949      	addeq	r1, r1, r5
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	6054      	str	r4, [r2, #4]
 8005142:	e7ca      	b.n	80050da <_free_r+0x26>
 8005144:	b003      	add	sp, #12
 8005146:	bd30      	pop	{r4, r5, pc}
 8005148:	20004308 	.word	0x20004308

0800514c <__malloc_lock>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__malloc_lock+0x8>)
 800514e:	f7ff bfaf 	b.w	80050b0 <__retarget_lock_acquire_recursive>
 8005152:	bf00      	nop
 8005154:	20004304 	.word	0x20004304

08005158 <__malloc_unlock>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__malloc_unlock+0x8>)
 800515a:	f7ff bfaa 	b.w	80050b2 <__retarget_lock_release_recursive>
 800515e:	bf00      	nop
 8005160:	20004304 	.word	0x20004304

08005164 <_init>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr

08005170 <_fini>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr
