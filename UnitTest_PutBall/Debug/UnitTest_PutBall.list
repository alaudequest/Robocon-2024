
UnitTest_PutBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e44  08004e44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004284  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042e4  200042e4  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001118c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a37  00000000  00000000  0003125f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ed8  00000000  00000000  00033c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b60  00000000  00000000  00034b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000036e2  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011929  00000000  00000000  00038db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0d28  00000000  00000000  0004a6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f70  00000000  00000000  0011b404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0011f374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004db4 	.word	0x08004db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004db4 	.word	0x08004db4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DC_Drive_BTS>:
//		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
//	}
//}

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim4,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	4613      	mov	r3, r2
 80004da:	80fb      	strh	r3, [r7, #6]
	motor->htim4 = htim4;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	88fa      	ldrh	r2, [r7, #6]
 80004e6:	819a      	strh	r2, [r3, #12]
	motor->Pwm = abs(Input);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bfb8      	it	lt
 80004ee:	425b      	neglt	r3, r3
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	815a      	strh	r2, [r3, #10]
	motor->Channel1 = Channel1;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	69ba      	ldr	r2, [r7, #24]
 80004fa:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	69fa      	ldr	r2, [r7, #28]
 8000500:	615a      	str	r2, [r3, #20]

	if(motor->Mode==0){
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	899b      	ldrh	r3, [r3, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	f040 80e9 	bne.w	80006de <DC_Drive_BTS+0x212>
		if(Input < 0)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	da4d      	bge.n	80005ae <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,motor->Pwm);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d106      	bne.n	8000528 <DC_Drive_BTS+0x5c>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	895a      	ldrh	r2, [r3, #10]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
 8000526:	e01e      	b.n	8000566 <DC_Drive_BTS+0x9a>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	691b      	ldr	r3, [r3, #16]
 800052c:	2b04      	cmp	r3, #4
 800052e:	d107      	bne.n	8000540 <DC_Drive_BTS+0x74>
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	8959      	ldrh	r1, [r3, #10]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	460b      	mov	r3, r1
 800053c:	6393      	str	r3, [r2, #56]	; 0x38
 800053e:	e012      	b.n	8000566 <DC_Drive_BTS+0x9a>
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	691b      	ldr	r3, [r3, #16]
 8000544:	2b08      	cmp	r3, #8
 8000546:	d107      	bne.n	8000558 <DC_Drive_BTS+0x8c>
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	8959      	ldrh	r1, [r3, #10]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	460b      	mov	r3, r1
 8000554:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000556:	e006      	b.n	8000566 <DC_Drive_BTS+0x9a>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	8959      	ldrh	r1, [r3, #10]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	460b      	mov	r3, r1
 8000564:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,0);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d105      	bne.n	800057a <DC_Drive_BTS+0xae>
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,1000);
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
		}
	}
}
 8000578:	e1ba      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,0);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	2b04      	cmp	r3, #4
 8000580:	d105      	bne.n	800058e <DC_Drive_BTS+0xc2>
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	6393      	str	r3, [r2, #56]	; 0x38
 800058c:	e1b0      	b.n	80008f0 <DC_Drive_BTS+0x424>
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	2b08      	cmp	r3, #8
 8000594:	d105      	bne.n	80005a2 <DC_Drive_BTS+0xd6>
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005a0:	e1a6      	b.n	80008f0 <DC_Drive_BTS+0x424>
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005ac:	e1a0      	b.n	80008f0 <DC_Drive_BTS+0x424>
		else if(Input > 0)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dd4d      	ble.n	8000650 <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,0);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <DC_Drive_BTS+0xfc>
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
 80005c6:	e018      	b.n	80005fa <DC_Drive_BTS+0x12e>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d105      	bne.n	80005dc <DC_Drive_BTS+0x110>
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	6393      	str	r3, [r2, #56]	; 0x38
 80005da:	e00e      	b.n	80005fa <DC_Drive_BTS+0x12e>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d105      	bne.n	80005f0 <DC_Drive_BTS+0x124>
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005ee:	e004      	b.n	80005fa <DC_Drive_BTS+0x12e>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,motor->Pwm);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d106      	bne.n	8000610 <DC_Drive_BTS+0x144>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	895a      	ldrh	r2, [r3, #10]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800060e:	e16f      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,motor->Pwm);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	2b04      	cmp	r3, #4
 8000616:	d107      	bne.n	8000628 <DC_Drive_BTS+0x15c>
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	8959      	ldrh	r1, [r3, #10]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	460b      	mov	r3, r1
 8000624:	6393      	str	r3, [r2, #56]	; 0x38
 8000626:	e163      	b.n	80008f0 <DC_Drive_BTS+0x424>
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d107      	bne.n	8000640 <DC_Drive_BTS+0x174>
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	8959      	ldrh	r1, [r3, #10]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	460b      	mov	r3, r1
 800063c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800063e:	e157      	b.n	80008f0 <DC_Drive_BTS+0x424>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	8959      	ldrh	r1, [r3, #10]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	460b      	mov	r3, r1
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064e:	e14f      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,0);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d105      	bne.n	8000664 <DC_Drive_BTS+0x198>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
 8000662:	e018      	b.n	8000696 <DC_Drive_BTS+0x1ca>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d105      	bne.n	8000678 <DC_Drive_BTS+0x1ac>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	6393      	str	r3, [r2, #56]	; 0x38
 8000676:	e00e      	b.n	8000696 <DC_Drive_BTS+0x1ca>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d105      	bne.n	800068c <DC_Drive_BTS+0x1c0>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	63d3      	str	r3, [r2, #60]	; 0x3c
 800068a:	e004      	b.n	8000696 <DC_Drive_BTS+0x1ca>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,0);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <DC_Drive_BTS+0x1de>
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006a8:	e122      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,0);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d105      	bne.n	80006be <DC_Drive_BTS+0x1f2>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	6393      	str	r3, [r2, #56]	; 0x38
 80006bc:	e118      	b.n	80008f0 <DC_Drive_BTS+0x424>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d105      	bne.n	80006d2 <DC_Drive_BTS+0x206>
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006d0:	e10e      	b.n	80008f0 <DC_Drive_BTS+0x424>
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006dc:	e108      	b.n	80008f0 <DC_Drive_BTS+0x424>
		if(Input < 0)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	da59      	bge.n	8000798 <DC_Drive_BTS+0x2cc>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,1000-motor->Pwm);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d108      	bne.n	80006fe <DC_Drive_BTS+0x232>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	895b      	ldrh	r3, [r3, #10]
 80006f0:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
 80006fc:	e024      	b.n	8000748 <DC_Drive_BTS+0x27c>
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d109      	bne.n	800071a <DC_Drive_BTS+0x24e>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	895b      	ldrh	r3, [r3, #10]
 800070a:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	460b      	mov	r3, r1
 8000716:	6393      	str	r3, [r2, #56]	; 0x38
 8000718:	e016      	b.n	8000748 <DC_Drive_BTS+0x27c>
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d109      	bne.n	8000736 <DC_Drive_BTS+0x26a>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	895b      	ldrh	r3, [r3, #10]
 8000726:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	460b      	mov	r3, r1
 8000732:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000734:	e008      	b.n	8000748 <DC_Drive_BTS+0x27c>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	895b      	ldrh	r3, [r3, #10]
 800073a:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	460b      	mov	r3, r1
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d106      	bne.n	800075e <DC_Drive_BTS+0x292>
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800075c:	e0c8      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d106      	bne.n	8000774 <DC_Drive_BTS+0x2a8>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000770:	6393      	str	r3, [r2, #56]	; 0x38
 8000772:	e0bd      	b.n	80008f0 <DC_Drive_BTS+0x424>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	2b08      	cmp	r3, #8
 800077a:	d106      	bne.n	800078a <DC_Drive_BTS+0x2be>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000788:	e0b2      	b.n	80008f0 <DC_Drive_BTS+0x424>
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000796:	e0ab      	b.n	80008f0 <DC_Drive_BTS+0x424>
		else if(Input > 0)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	dd59      	ble.n	8000852 <DC_Drive_BTS+0x386>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,1000);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d106      	bne.n	80007b4 <DC_Drive_BTS+0x2e8>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	e01b      	b.n	80007ec <DC_Drive_BTS+0x320>
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d106      	bne.n	80007ca <DC_Drive_BTS+0x2fe>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	6393      	str	r3, [r2, #56]	; 0x38
 80007c8:	e010      	b.n	80007ec <DC_Drive_BTS+0x320>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d106      	bne.n	80007e0 <DC_Drive_BTS+0x314>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e005      	b.n	80007ec <DC_Drive_BTS+0x320>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000-motor->Pwm);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d108      	bne.n	8000806 <DC_Drive_BTS+0x33a>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	895b      	ldrh	r3, [r3, #10]
 80007f8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000804:	e074      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000-motor->Pwm);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d109      	bne.n	8000822 <DC_Drive_BTS+0x356>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	895b      	ldrh	r3, [r3, #10]
 8000812:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	460b      	mov	r3, r1
 800081e:	6393      	str	r3, [r2, #56]	; 0x38
 8000820:	e066      	b.n	80008f0 <DC_Drive_BTS+0x424>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	2b08      	cmp	r3, #8
 8000828:	d109      	bne.n	800083e <DC_Drive_BTS+0x372>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	895b      	ldrh	r3, [r3, #10]
 800082e:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	460b      	mov	r3, r1
 800083a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800083c:	e058      	b.n	80008f0 <DC_Drive_BTS+0x424>
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	895b      	ldrh	r3, [r3, #10]
 8000842:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000850:	e04e      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel1,1000);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <DC_Drive_BTS+0x39c>
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	e01b      	b.n	80008a0 <DC_Drive_BTS+0x3d4>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d106      	bne.n	800087e <DC_Drive_BTS+0x3b2>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	6393      	str	r3, [r2, #56]	; 0x38
 800087c:	e010      	b.n	80008a0 <DC_Drive_BTS+0x3d4>
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	2b08      	cmp	r3, #8
 8000884:	d106      	bne.n	8000894 <DC_Drive_BTS+0x3c8>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000892:	e005      	b.n	80008a0 <DC_Drive_BTS+0x3d4>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d106      	bne.n	80008b6 <DC_Drive_BTS+0x3ea>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008b4:	e01c      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d106      	bne.n	80008cc <DC_Drive_BTS+0x400>
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80008ca:	e011      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d106      	bne.n	80008e2 <DC_Drive_BTS+0x416>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80008e0:	e006      	b.n	80008f0 <DC_Drive_BTS+0x424>
			__HAL_TIM_SET_COMPARE(motor->htim4,motor->Channel2,1000);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ee:	e7ff      	b.n	80008f0 <DC_Drive_BTS+0x424>
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,float deltaT)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	ed87 0a00 	vstr	s0, [r7]
	enc->htim = htim;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <CountRead>:
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
	enc->vel_Pre = enc->vel_Real;
	enc->count_Pre = enc->count_X4;
}

float CountRead(EncoderRead *enc,uint8_t count_mode){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	78fa      	ldrb	r2, [r7, #3]
 800093c:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	b21a      	sxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000956:	441a      	add	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7e1b      	ldrb	r3, [r3, #24]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d106      	bne.n	800097c <CountRead+0x50>
	{
		return enc->count_X4;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	e02f      	b.n	80009dc <CountRead+0xb0>
	}else if (enc->count_Mode == count_ModeX1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7e1b      	ldrb	r3, [r3, #24]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10f      	bne.n	80009a4 <CountRead+0x78>
	{
		enc->count_X1 = enc->count_X4/4;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	da00      	bge.n	800098e <CountRead+0x62>
 800098c:	3303      	adds	r3, #3
 800098e:	109b      	asrs	r3, r3, #2
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	ee07 3a90 	vmov	s15, r3
 800099e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a2:	e01b      	b.n	80009dc <CountRead+0xb0>
	}else if (enc->count_Mode == count_ModeDegree)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7e1b      	ldrb	r3, [r3, #24]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d115      	bne.n	80009d8 <CountRead+0xac>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009b4:	fb03 f202 	mul.w	r2, r3, r2
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return enc->Degree;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009d6:	e001      	b.n	80009dc <CountRead+0xb0>
	}else {
		return 0;
 80009d8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80009ec <CountRead+0xc0>
	}
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	00000000 	.word	0x00000000

080009f0 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d10a      	bne.n	8000a18 <ResetCount+0x28>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
		enc->count_X1 = 0;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
	}
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <vApplicationGetIdleTaskMemory+0x30>)
 8000a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	2000011c 	.word	0x2000011c

08000a58 <SetupStartPos>:
//	SpeedTest = PID_DC_Pos.u;
//	PID_Speed();
//}

void SetupStartPos()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af02      	add	r7, sp, #8
	DC_Drive_BTS(&DC, &htim4, motor_Reserve, PutBall_LowerLowSpeed, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000a5e:	2304      	movs	r3, #4
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	23c8      	movs	r3, #200	; 0xc8
 8000a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a6c:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <SetupStartPos+0x50>)
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <SetupStartPos+0x54>)
 8000a70:	f7ff fd2c 	bl	80004cc <DC_Drive_BTS>
	osDelay(SetHomeManualTime);
 8000a74:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a78:	f002 feaf 	bl	80037da <osDelay>
	DC_Drive_BTS(&DC, &htim4, motor_Reserve, PutBall_StopSpeed, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8a:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <SetupStartPos+0x50>)
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <SetupStartPos+0x54>)
 8000a8e:	f7ff fd1d 	bl	80004cc <DC_Drive_BTS>
	ResetCount(&ENC_DC, 1);
 8000a92:	2101      	movs	r1, #1
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <SetupStartPos+0x58>)
 8000a96:	f7ff ffab 	bl	80009f0 <ResetCount>
	__setStart = Ready;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SetupStartPos+0x5c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000364 	.word	0x20000364
 8000aac:	200003bc 	.word	0x200003bc
 8000ab0:	200003d4 	.word	0x200003d4
 8000ab4:	200003b6 	.word	0x200003b6

08000ab8 <PutBallTask>:

void PutBallTask()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af02      	add	r7, sp, #8
		  CountRead(&ENC_DC, count_ModeX1);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4856      	ldr	r0, [pc, #344]	; (8000c1c <PutBallTask+0x164>)
 8000ac2:	f7ff ff33 	bl	800092c <CountRead>
		  if(!PutBall)
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <PutBallTask+0x168>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	f083 0301 	eor.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d063      	beq.n	8000b9c <PutBallTask+0xe4>
		  {
			  if(__isBall)
 8000ad4:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <PutBallTask+0x16c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 808d 	beq.w	8000bf8 <PutBallTask+0x140>
			  {
				  if(!__NotBall)
 8000ade:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <PutBallTask+0x170>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f083 0301 	eor.w	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02c      	beq.n	8000b46 <PutBallTask+0x8e>
				  {
					  PWM = PutBall_UpperHighSpeed;
 8000aec:	4b4f      	ldr	r3, [pc, #316]	; (8000c2c <PutBallTask+0x174>)
 8000aee:	f64f 6270 	movw	r2, #65136	; 0xfe70
 8000af2:	801a      	strh	r2, [r3, #0]
					  if(CountRead(&ENC_DC, count_ModeX1) < PutBall_AboveLimit)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4849      	ldr	r0, [pc, #292]	; (8000c1c <PutBallTask+0x164>)
 8000af8:	f7ff ff18 	bl	800092c <CountRead>
 8000afc:	eef0 7a40 	vmov.f32	s15, s0
 8000b00:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000c30 <PutBallTask+0x178>
 8000b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0c:	d503      	bpl.n	8000b16 <PutBallTask+0x5e>
					  {
						  PWM = PutBall_UpperLowSpeed;
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <PutBallTask+0x174>)
 8000b10:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8000b14:	801a      	strh	r2, [r3, #0]
					  }
					  if(CountRead(&ENC_DC, count_ModeX1)  < PutBall_DropBall)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <PutBallTask+0x164>)
 8000b1a:	f7ff ff07 	bl	800092c <CountRead>
 8000b1e:	eef0 7a40 	vmov.f32	s15, s0
 8000b22:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000c34 <PutBallTask+0x17c>
 8000b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	d563      	bpl.n	8000bf8 <PutBallTask+0x140>
					  {
						  PWM = PutBall_StopSpeed;
 8000b30:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <PutBallTask+0x174>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	801a      	strh	r2, [r3, #0]
						  PutBall = Dropped;
 8000b36:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <PutBallTask+0x168>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
						  osDelay(DropBallTime);
 8000b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b40:	f002 fe4b 	bl	80037da <osDelay>
 8000b44:	e058      	b.n	8000bf8 <PutBallTask+0x140>
					  }
				  }
				  else
				  {
					  PWM = PutBall_LowerLowSpeed;
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <PutBallTask+0x174>)
 8000b48:	22c8      	movs	r2, #200	; 0xc8
 8000b4a:	801a      	strh	r2, [r3, #0]
					  if(CountRead(&ENC_DC, count_ModeX1) > PutBall_BelowLimit)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4833      	ldr	r0, [pc, #204]	; (8000c1c <PutBallTask+0x164>)
 8000b50:	f7ff feec 	bl	800092c <CountRead>
 8000b54:	eef0 7a40 	vmov.f32	s15, s0
 8000b58:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000c38 <PutBallTask+0x180>
 8000b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b64:	dd48      	ble.n	8000bf8 <PutBallTask+0x140>
					  {
					  		 PutBall = PutBall_StopSpeed;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <PutBallTask+0x168>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
					   	     __isBall = NotBall;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <PutBallTask+0x16c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
					   		 osDelay(10);
 8000b72:	200a      	movs	r0, #10
 8000b74:	f002 fe31 	bl	80037da <osDelay>
					   		 cnt = 0;
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <PutBallTask+0x184>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
					   		 osDelay(ResetEncoderTime);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f002 fe2a 	bl	80037da <osDelay>
					   		 ResetCount(&ENC_DC, 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	4824      	ldr	r0, [pc, #144]	; (8000c1c <PutBallTask+0x164>)
 8000b8a:	f7ff ff31 	bl	80009f0 <ResetCount>
					   		 osDelay(10);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f002 fe23 	bl	80037da <osDelay>
					   		 PWM = PutBall_StopSpeed;
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <PutBallTask+0x174>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	801a      	strh	r2, [r3, #0]
 8000b9a:	e02d      	b.n	8000bf8 <PutBallTask+0x140>
				  }
			  }
		  }
		  else
		  {
			  if(PutBall)
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <PutBallTask+0x168>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d029      	beq.n	8000bf8 <PutBallTask+0x140>
			  {
			  	  PWM = PutBall_LowerLowSpeed;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <PutBallTask+0x174>)
 8000ba6:	22c8      	movs	r2, #200	; 0xc8
 8000ba8:	801a      	strh	r2, [r3, #0]
			  	 if(CountRead(&ENC_DC, count_ModeX1) > PutBall_BelowLimit)
 8000baa:	2100      	movs	r1, #0
 8000bac:	481b      	ldr	r0, [pc, #108]	; (8000c1c <PutBallTask+0x164>)
 8000bae:	f7ff febd 	bl	800092c <CountRead>
 8000bb2:	eef0 7a40 	vmov.f32	s15, s0
 8000bb6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000c38 <PutBallTask+0x180>
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	dd19      	ble.n	8000bf8 <PutBallTask+0x140>
			  	 {
			  		 PutBall = Pending;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <PutBallTask+0x168>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
			  	     __isBall = NotBall;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <PutBallTask+0x16c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
			  		 osDelay(10);
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f002 fe02 	bl	80037da <osDelay>
			  		 cnt = 0;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <PutBallTask+0x184>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
			  		 osDelay(ResetEncoderTime);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f002 fdfb 	bl	80037da <osDelay>
			  		 ResetCount(&ENC_DC, 1);
 8000be4:	2101      	movs	r1, #1
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <PutBallTask+0x164>)
 8000be8:	f7ff ff02 	bl	80009f0 <ResetCount>
			  		 osDelay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f002 fdf4 	bl	80037da <osDelay>
			  		 PWM = PutBall_StopSpeed;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <PutBallTask+0x174>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
			  	 }
			  }
		  }
		  DC_Drive_BTS(&DC, &htim4, motor_Reserve, PWM, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <PutBallTask+0x174>)
 8000bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2304      	movs	r3, #4
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0e:	490c      	ldr	r1, [pc, #48]	; (8000c40 <PutBallTask+0x188>)
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <PutBallTask+0x18c>)
 8000c12:	f7ff fc5b 	bl	80004cc <DC_Drive_BTS>
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200003d4 	.word	0x200003d4
 8000c20:	200003b7 	.word	0x200003b7
 8000c24:	200003b9 	.word	0x200003b9
 8000c28:	200003b8 	.word	0x200003b8
 8000c2c:	200003b4 	.word	0x200003b4
 8000c30:	c7afc800 	.word	0xc7afc800
 8000c34:	c7e09c00 	.word	0xc7e09c00
 8000c38:	c47a0000 	.word	0xc47a0000
 8000c3c:	200003ba 	.word	0x200003ba
 8000c40:	20000364 	.word	0x20000364
 8000c44:	200003bc 	.word	0x200003bc

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fc3b 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f851 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 f98f 	bl	8000f78 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c5a:	f000 f90b 	bl	8000e74 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000c5e:	f000 f8b5 	bl	8000dcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c62:	2100      	movs	r1, #0
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <main+0x90>)
 8000c66:	f001 fcd7 	bl	8002618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <main+0x90>)
 8000c6e:	f001 fcd3 	bl	8002618 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000c72:	213c      	movs	r1, #60	; 0x3c
 8000c74:	4819      	ldr	r0, [pc, #100]	; (8000cdc <main+0x94>)
 8000c76:	f001 fe3d 	bl	80028f4 <HAL_TIM_Encoder_Start_IT>
  EncoderSetting(&ENC_DC, &htim2, 11788, DeltaT);
 8000c7a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000ce0 <main+0x98>
 8000c7e:	f642 620c 	movw	r2, #11788	; 0x2e0c
 8000c82:	4916      	ldr	r1, [pc, #88]	; (8000cdc <main+0x94>)
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <main+0x9c>)
 8000c86:	f7ff fe39 	bl	80008fc <EncoderSetting>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LogicTask */
  osThreadDef(LogicTask, StartLogicTask, osPriorityIdle, 0, 128);
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <main+0xa0>)
 8000c8c:	f107 041c 	add.w	r4, r7, #28
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogicTaskHandle = osThreadCreate(osThread(LogicTask), NULL);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fd4c 	bl	8003742 <osThreadCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <main+0xa4>)
 8000cae:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartSensorTask, osPriorityAboveNormal, 0, 128);
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <main+0xa8>)
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fd3b 	bl	8003742 <osThreadCreate>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <main+0xac>)
 8000cd0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd2:	f002 fd2f 	bl	8003734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0x8e>
 8000cd8:	20000364 	.word	0x20000364
 8000cdc:	2000031c 	.word	0x2000031c
 8000ce0:	3a83126f 	.word	0x3a83126f
 8000ce4:	200003d4 	.word	0x200003d4
 8000ce8:	08004dd8 	.word	0x08004dd8
 8000cec:	200003ac 	.word	0x200003ac
 8000cf0:	08004e00 	.word	0x08004e00
 8000cf4:	200003b0 	.word	0x200003b0

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2230      	movs	r2, #48	; 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 ff78 	bl	8004bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d6c:	23a8      	movs	r3, #168	; 0xa8
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fe7b 	bl	8001a78 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d88:	f000 f9c0 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2302      	movs	r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2105      	movs	r1, #5
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f8dc 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000db6:	f000 f9a9 	bl	800110c <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3750      	adds	r7, #80	; 0x50
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 ff0e 	bl	8004bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000e02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000e3c:	f001 fcb4 	bl	80027a8 <HAL_TIM_Encoder_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f000 f961 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM2_Init+0xa4>)
 8000e58:	f002 fbc4 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e62:	f000 f953 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000031c 	.word	0x2000031c

08000e74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ea6:	4a33      	ldr	r2, [pc, #204]	; (8000f74 <MX_TIM4_Init+0x100>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000eac:	2253      	movs	r2, #83	; 0x53
 8000eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eca:	4829      	ldr	r0, [pc, #164]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ecc:	f001 fa8a 	bl	80023e4 <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ed6:	f000 f919 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ee8:	f001 ff7c 	bl	8002de4 <HAL_TIM_ConfigClockSource>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ef2:	f000 f90b 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000ef8:	f001 fb34 	bl	8002564 <HAL_TIM_PWM_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f02:	f000 f903 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4619      	mov	r1, r3
 8000f14:	4816      	ldr	r0, [pc, #88]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000f16:	f002 fb65 	bl	80035e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f20:	f000 f8f4 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f24:	2360      	movs	r3, #96	; 0x60
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000f3c:	f001 fe90 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f46:	f000 f8e1 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000f52:	f001 fe85 	bl	8002c60 <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000f5c:	f000 f8d6 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM4_Init+0xfc>)
 8000f62:	f000 f995 	bl	8001290 <HAL_TIM_MspPostInit>

}
 8000f66:	bf00      	nop
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000364 	.word	0x20000364
 8000f74:	40000800 	.word	0x40000800

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <MX_GPIO_Init+0xc4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a29      	ldr	r2, [pc, #164]	; (800103c <MX_GPIO_Init+0xc4>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <MX_GPIO_Init+0xc4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_GPIO_Init+0xc4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_GPIO_Init+0xc4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <MX_GPIO_Init+0xc4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_GPIO_Init+0xc4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BJ300_Pin */
  GPIO_InitStruct.Pin = BJ300_Pin;
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BJ300_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_GPIO_Init+0xc8>)
 800102e:	f000 fb6f 	bl	8001710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40021000 	.word	0x40021000

08001044 <StartLogicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLogicTask */
void StartLogicTask(void const * argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(!__setStart)
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <StartLogicTask+0x30>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <StartLogicTask+0x1a>
	{
		SetupStartPos();
 800105a:	f7ff fcfd 	bl	8000a58 <SetupStartPos>
	}
	if(__isBall)
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <StartLogicTask+0x34>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <StartLogicTask+0x26>
	{
		PutBallTask();
 8001066:	f7ff fd27 	bl	8000ab8 <PutBallTask>
	}
    osDelay(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f002 fbb5 	bl	80037da <osDelay>
	if(!__setStart)
 8001070:	e7ec      	b.n	800104c <StartLogicTask+0x8>
 8001072:	bf00      	nop
 8001074:	200003b6 	.word	0x200003b6
 8001078:	200003b9 	.word	0x200003b9

0800107c <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
	 __NotBall = HAL_GPIO_ReadPin(BJ300_GPIO_Port, BJ300_Pin);
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <StartSensorTask+0x5c>)
 8001088:	f000 fcde 	bl	8001a48 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <StartSensorTask+0x60>)
 800109a:	701a      	strb	r2, [r3, #0]
	 if(!__NotBall)
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <StartSensorTask+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d012      	beq.n	80010d0 <StartSensorTask+0x54>
	 {
		 if(cnt < RecognizeBallTime)
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <StartSensorTask+0x64>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010b2:	d205      	bcs.n	80010c0 <StartSensorTask+0x44>
		 {
			 cnt++;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <StartSensorTask+0x64>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <StartSensorTask+0x64>)
 80010be:	801a      	strh	r2, [r3, #0]
		 }
		 if(cnt == RecognizeBallTime)
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <StartSensorTask+0x64>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010c8:	d102      	bne.n	80010d0 <StartSensorTask+0x54>
		 {
			 __isBall = IsBall;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <StartSensorTask+0x68>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
		 }
	 }
    osDelay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f002 fb82 	bl	80037da <osDelay>
	 __NotBall = HAL_GPIO_ReadPin(BJ300_GPIO_Port, BJ300_Pin);
 80010d6:	e7d5      	b.n	8001084 <StartSensorTask+0x8>
 80010d8:	40021000 	.word	0x40021000
 80010dc:	200003b8 	.word	0x200003b8
 80010e0:	200003ba 	.word	0x200003ba
 80010e4:	200003b9 	.word	0x200003b9

080010e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010fa:	f000 fa07 	bl	800150c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40002000 	.word	0x40002000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_MspInit+0x54>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_MspInit+0x54>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x54>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_MspInit+0x54>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_MspInit+0x54>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_MspInit+0x54>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	210f      	movs	r1, #15
 800115a:	f06f 0001 	mvn.w	r0, #1
 800115e:	f000 faad 	bl	80016bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001190:	d152      	bne.n	8001238 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_TIM_Encoder_MspInit+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011f8:	2301      	movs	r3, #1
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4810      	ldr	r0, [pc, #64]	; (8001244 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001204:	f000 fa84 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001208:	2308      	movs	r3, #8
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001224:	f000 fa74 	bl	8001710 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2105      	movs	r1, #5
 800122c:	201c      	movs	r0, #28
 800122e:	f000 fa45 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001232:	201c      	movs	r0, #28
 8001234:	f000 fa5e 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_TIM_Base_MspInit+0x3c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10d      	bne.n	800127a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_TIM_Base_MspInit+0x40>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_TIM_Base_MspInit+0x40>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_TIM_Base_MspInit+0x40>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40000800 	.word	0x40000800
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11e      	bne.n	80012f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_TIM_MspPostInit+0x70>)
 80012ec:	f000 fa10 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020c00 	.word	0x40020c00

08001304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HAL_InitTick+0xe4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_InitTick+0xe4>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_InitTick+0xe4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001330:	f107 0210 	add.w	r2, r7, #16
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f820 	bl	8002380 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134a:	f001 f805 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 800134e:	6378      	str	r0, [r7, #52]	; 0x34
 8001350:	e004      	b.n	800135c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001352:	f001 f801 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8001356:	4603      	mov	r3, r0
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_InitTick+0xe8>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	3b01      	subs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_InitTick+0xec>)
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_InitTick+0xf0>)
 800136e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_InitTick+0xec>)
 8001372:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001376:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_InitTick+0xec>)
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_InitTick+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_InitTick+0xec>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_InitTick+0xec>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001390:	4817      	ldr	r0, [pc, #92]	; (80013f0 <HAL_InitTick+0xec>)
 8001392:	f001 f827 	bl	80023e4 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800139c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11b      	bne.n	80013dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80013a4:	4812      	ldr	r0, [pc, #72]	; (80013f0 <HAL_InitTick+0xec>)
 80013a6:	f001 f86d 	bl	8002484 <HAL_TIM_Base_Start_IT>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80013b8:	202d      	movs	r0, #45	; 0x2d
 80013ba:	f000 f99b 	bl	80016f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d808      	bhi.n	80013d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	202d      	movs	r0, #45	; 0x2d
 80013ca:	f000 f977 	bl	80016bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0xf4>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e002      	b.n	80013dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	20000404 	.word	0x20000404
 80013f4:	40002000 	.word	0x40002000
 80013f8:	20000004 	.word	0x20000004

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM2_IRQHandler+0x10>)
 800142e:	f001 fb0f 	bl	8002a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000031c 	.word	0x2000031c

0800143c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001442:	f001 fb05 	bl	8002a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000404 	.word	0x20000404

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0x12>
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
 800147a:	490e      	ldr	r1, [pc, #56]	; (80014b4 <LoopFillZerobss+0x1a>)
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <LoopFillZerobss+0x1e>)
 800147e:	2300      	movs	r3, #0
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:
 8001482:	58d4      	ldr	r4, [r2, r3]
 8001484:	50c4      	str	r4, [r0, r3]
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:
 8001488:	18c4      	adds	r4, r0, r3
 800148a:	428c      	cmp	r4, r1
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LoopFillZerobss+0x22>)
 8001490:	4c0b      	ldr	r4, [pc, #44]	; (80014c0 <LoopFillZerobss+0x26>)
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:
 800149a:	42a2      	cmp	r2, r4
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>
 800149e:	f7ff ffd7 	bl	8001450 <SystemInit>
 80014a2:	f003 fc09 	bl	8004cb8 <__libc_init_array>
 80014a6:	f7ff fbcf 	bl	8000c48 <main>
 80014aa:	4770      	bx	lr
 80014ac:	20020000 	.word	0x20020000
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000060 	.word	0x20000060
 80014b8:	08004e4c 	.word	0x08004e4c
 80014bc:	20000060 	.word	0x20000060
 80014c0:	200042e4 	.word	0x200042e4

080014c4 <ADC_IRQHandler>:
 80014c4:	e7fe      	b.n	80014c4 <ADC_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f8d8 	bl	80016a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f7ff ff04 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fe0c 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	2000044c 	.word	0x2000044c

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff4c 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ce:	f7ff ff61 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	6978      	ldr	r0, [r7, #20]
 80016da:	f7ff ffb1 	bl	8001640 <NVIC_EncodePriority>
 80016de:	4602      	mov	r2, r0
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff80 	bl	80015ec <__NVIC_SetPriority>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff54 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e16b      	b.n	8001a04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 815a 	bne.w	80019fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	2b02      	cmp	r3, #2
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80b4 	beq.w	80019fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a5f      	ldr	r2, [pc, #380]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_GPIO_Init+0x310>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_GPIO_Init+0x314>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x226>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_GPIO_Init+0x318>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x222>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_GPIO_Init+0x31c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x21e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x320>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x324>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x328>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x32c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x330>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x20a>
 8001916:	2307      	movs	r3, #7
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800191a:	2308      	movs	r3, #8
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001948:	4935      	ldr	r1, [pc, #212]	; (8001a20 <HAL_GPIO_Init+0x310>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_GPIO_Init+0x334>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_GPIO_Init+0x334>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_GPIO_Init+0x334>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae90 	bls.w	800172c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40013c00 	.word	0x40013c00

08001a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e267      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d075      	beq.n	8001b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d00c      	beq.n	8001abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d112      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d05b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x108>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d157      	bne.n	8001b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e242      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x74>
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fd00 	bl	8001534 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fcfc 	bl	8001534 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e207      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xc0>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fcec 	bl	8001534 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fce8 	bl	8001534 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1f3      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0xe8>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c7      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff fca1 	bl	8001534 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fc9d 	bl	8001534 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a8      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fc80 	bl	8001534 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fc7c 	bl	8001534 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e187      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff fc60 	bl	8001534 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fc5c 	bl	8001534 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e167      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x200>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fc49 	bl	8001534 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fc45 	bl	8001534 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d907      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e150      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470000 	.word	0x42470000
 8001cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ea      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8097 	beq.w	8001e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b77      	ldr	r3, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b74      	ldr	r3, [pc, #464]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fc05 	bl	8001534 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff fc01 	bl	8001534 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e10c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2ea>
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a63      	ldr	r2, [pc, #396]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x30c>
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a5b      	ldr	r2, [pc, #364]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fbc6 	bl	8001534 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff fbc2 	bl	8001534 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0cb      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ee      	beq.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fbb0 	bl	8001534 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fbac 	bl	8001534 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0b5      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a1 	beq.w	8001f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d05c      	beq.n	8001edc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d141      	bne.n	8001eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb80 	bl	8001534 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fb7c 	bl	8001534 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e087      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fb55 	bl	8001534 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fb51 	bl	8001534 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e05c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x416>
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb3e 	bl	8001534 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fb3a 	bl	8001534 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e045      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e038      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d028      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d121      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d11a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f24:	4013      	ands	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0cc      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d90c      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	494d      	ldr	r1, [pc, #308]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d044      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d119      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e067      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4934      	ldr	r1, [pc, #208]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff fa6c 	bl	8001534 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff fa68 	bl	8001534 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e04f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d20c      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	490a      	ldr	r1, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f8f8 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00
 8002124:	40023800 	.word	0x40023800
 8002128:	08004e24 	.word	0x08004e24
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b094      	sub	sp, #80	; 0x50
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
 8002140:	2300      	movs	r3, #0
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002144:	2300      	movs	r3, #0
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d00d      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x40>
 8002158:	2b08      	cmp	r3, #8
 800215a:	f200 80e1 	bhi.w	8002320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 8002162:	2b04      	cmp	r3, #4
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x3a>
 8002166:	e0db      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_GetSysClockFreq+0x204>)
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800216c:	e0db      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216e:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_RCC_GetSysClockFreq+0x208>)
 8002170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002172:	e0d8      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	2200      	movs	r2, #0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
 8002194:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
 80021a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021a6:	4622      	mov	r2, r4
 80021a8:	462b      	mov	r3, r5
 80021aa:	f04f 0000 	mov.w	r0, #0
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	0159      	lsls	r1, r3, #5
 80021b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b8:	0150      	lsls	r0, r2, #5
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4621      	mov	r1, r4
 80021c0:	1a51      	subs	r1, r2, r1
 80021c2:	6139      	str	r1, [r7, #16]
 80021c4:	4629      	mov	r1, r5
 80021c6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021d8:	4659      	mov	r1, fp
 80021da:	018b      	lsls	r3, r1, #6
 80021dc:	4651      	mov	r1, sl
 80021de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021e2:	4651      	mov	r1, sl
 80021e4:	018a      	lsls	r2, r1, #6
 80021e6:	4651      	mov	r1, sl
 80021e8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ec:	4659      	mov	r1, fp
 80021ee:	eb63 0901 	sbc.w	r9, r3, r1
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002206:	4690      	mov	r8, r2
 8002208:	4699      	mov	r9, r3
 800220a:	4623      	mov	r3, r4
 800220c:	eb18 0303 	adds.w	r3, r8, r3
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	462b      	mov	r3, r5
 8002214:	eb49 0303 	adc.w	r3, r9, r3
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002226:	4629      	mov	r1, r5
 8002228:	024b      	lsls	r3, r1, #9
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002230:	4621      	mov	r1, r4
 8002232:	024a      	lsls	r2, r1, #9
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	2200      	movs	r2, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
 800223e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002244:	f7fd ffc4 	bl	80001d0 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	e058      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	2200      	movs	r2, #0
 800225a:	4618      	mov	r0, r3
 800225c:	4611      	mov	r1, r2
 800225e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800226c:	4642      	mov	r2, r8
 800226e:	464b      	mov	r3, r9
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	0159      	lsls	r1, r3, #5
 800227a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227e:	0150      	lsls	r0, r2, #5
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4641      	mov	r1, r8
 8002286:	ebb2 0a01 	subs.w	sl, r2, r1
 800228a:	4649      	mov	r1, r9
 800228c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800229c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022a4:	ebb2 040a 	subs.w	r4, r2, sl
 80022a8:	eb63 050b 	sbc.w	r5, r3, fp
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	00eb      	lsls	r3, r5, #3
 80022b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	4643      	mov	r3, r8
 80022c2:	18e3      	adds	r3, r4, r3
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	464b      	mov	r3, r9
 80022c8:	eb45 0303 	adc.w	r3, r5, r3
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022da:	4629      	mov	r1, r5
 80022dc:	028b      	lsls	r3, r1, #10
 80022de:	4621      	mov	r1, r4
 80022e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022e4:	4621      	mov	r1, r4
 80022e6:	028a      	lsls	r2, r1, #10
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ee:	2200      	movs	r2, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	61fa      	str	r2, [r7, #28]
 80022f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f8:	f7fd ff6a 	bl	80001d0 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4613      	mov	r3, r2
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_GetSysClockFreq+0x200>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800231e:	e002      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetSysClockFreq+0x204>)
 8002322:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002328:	4618      	mov	r0, r3
 800232a:	3750      	adds	r7, #80	; 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	08004e34 	.word	0x08004e34

08002380 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	220f      	movs	r2, #15
 800238e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCC_GetClockConfig+0x60>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0207 	and.w	r2, r3, #7
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e041      	b.n	800247a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe ff1e 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f000 fdce 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d001      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e04e      	b.n	800253a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a23      	ldr	r2, [pc, #140]	; (8002548 <HAL_TIM_Base_Start_IT+0xc4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d022      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d01d      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_TIM_Base_Start_IT+0xc8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d018      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <HAL_TIM_Base_Start_IT+0xcc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_TIM_Base_Start_IT+0xd0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00e      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_TIM_Base_Start_IT+0xd4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_TIM_Base_Start_IT+0xd8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x80>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIM_Base_Start_IT+0xdc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d111      	bne.n	8002528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b06      	cmp	r3, #6
 8002514:	d010      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	e007      	b.n	8002538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40010000 	.word	0x40010000
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800
 8002554:	40000c00 	.word	0x40000c00
 8002558:	40010400 	.word	0x40010400
 800255c:	40014000 	.word	0x40014000
 8002560:	40001800 	.word	0x40001800

08002564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fd0e 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_TIM_PWM_Start+0x24>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e022      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d109      	bne.n	8002656 <HAL_TIM_PWM_Start+0x3e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e015      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d109      	bne.n	8002670 <HAL_TIM_PWM_Start+0x58>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e008      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07c      	b.n	8002784 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start+0x82>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002698:	e013      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start+0x92>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	e00b      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_PWM_Start+0xa2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	e003      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 ff64 	bl	8003598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2d      	ldr	r2, [pc, #180]	; (800278c <HAL_TIM_PWM_Start+0x174>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_TIM_PWM_Start+0xcc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <HAL_TIM_PWM_Start+0x178>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_TIM_PWM_Start+0xd0>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_TIM_PWM_Start+0xd2>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_TIM_PWM_Start+0x174>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d01d      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_TIM_PWM_Start+0x17c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d018      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_TIM_PWM_Start+0x180>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1c      	ldr	r2, [pc, #112]	; (800279c <HAL_TIM_PWM_Start+0x184>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00e      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_TIM_PWM_Start+0x178>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d009      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_TIM_PWM_Start+0x188>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_TIM_PWM_Start+0x136>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_TIM_PWM_Start+0x18c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d010      	beq.n	8002782 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	e007      	b.n	8002782 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40010000 	.word	0x40010000
 8002790:	40010400 	.word	0x40010400
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40001800 	.word	0x40001800

080027a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e097      	b.n	80028ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fe fccd 	bl	8001170 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ec:	f023 0307 	bic.w	r3, r3, #7
 80027f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 fbe1 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	4313      	orrs	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002848:	f023 030c 	bic.w	r3, r3, #12
 800284c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	4313      	orrs	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	011a      	lsls	r2, r3, #4
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	031b      	lsls	r3, r3, #12
 8002878:	4313      	orrs	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002886:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4313      	orrs	r3, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002904:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800290c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002914:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800291c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d110      	bne.n	8002946 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d102      	bne.n	8002930 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e089      	b.n	8002a48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	e031      	b.n	80029aa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d110      	bne.n	800296e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002952:	7b3b      	ldrb	r3, [r7, #12]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e075      	b.n	8002a48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800296c:	e01d      	b.n	80029aa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002980:	7b3b      	ldrb	r3, [r7, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e05e      	b.n	8002a48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d010      	beq.n	80029d8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80029b6:	e01f      	b.n	80029f8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2201      	movs	r2, #1
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fde9 	bl	8003598 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0202 	orr.w	r2, r2, #2
 80029d4:	60da      	str	r2, [r3, #12]
      break;
 80029d6:	e02e      	b.n	8002a36 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	2104      	movs	r1, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fdd9 	bl	8003598 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	60da      	str	r2, [r3, #12]
      break;
 80029f6:	e01e      	b.n	8002a36 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2201      	movs	r2, #1
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fdc9 	bl	8003598 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fdc2 	bl	8003598 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0204 	orr.w	r2, r2, #4
 8002a32:	60da      	str	r2, [r3, #12]
      break;
 8002a34:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0202 	mvn.w	r2, #2
 8002a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa77 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fa69 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa7a 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0204 	mvn.w	r2, #4
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa4d 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa3f 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa50 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0208 	mvn.w	r2, #8
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa23 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa15 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa26 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0210 	mvn.w	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9f9 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9eb 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f9fc 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0201 	mvn.w	r2, #1
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fa8a 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fd78 	bl	80036f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f9c1 	bl	8002fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0220 	mvn.w	r2, #32
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fd42 	bl	80036dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0ae      	b.n	8002ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	f200 809f 	bhi.w	8002dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002dcd 	.word	0x08002dcd
 8002c9c:	08002dcd 	.word	0x08002dcd
 8002ca0:	08002dcd 	.word	0x08002dcd
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002dcd 	.word	0x08002dcd
 8002cac:	08002dcd 	.word	0x08002dcd
 8002cb0:	08002dcd 	.word	0x08002dcd
 8002cb4:	08002d4b 	.word	0x08002d4b
 8002cb8:	08002dcd 	.word	0x08002dcd
 8002cbc:	08002dcd 	.word	0x08002dcd
 8002cc0:	08002dcd 	.word	0x08002dcd
 8002cc4:	08002d8b 	.word	0x08002d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa18 	bl	8003104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	619a      	str	r2, [r3, #24]
      break;
 8002d06:	e064      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fa68 	bl	80031e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
      break;
 8002d48:	e043      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fabd 	bl	80032d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0208 	orr.w	r2, r2, #8
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0204 	bic.w	r2, r2, #4
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
      break;
 8002d88:	e023      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fb11 	bl	80033b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69d9      	ldr	r1, [r3, #28]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	021a      	lsls	r2, r3, #8
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_ConfigClockSource+0x1c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0b4      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x186>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e38:	d03e      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3e:	f200 8087 	bhi.w	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	f000 8086 	beq.w	8002f56 <HAL_TIM_ConfigClockSource+0x172>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d87f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b70      	cmp	r3, #112	; 0x70
 8002e52:	d01a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xa6>
 8002e54:	2b70      	cmp	r3, #112	; 0x70
 8002e56:	d87b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b60      	cmp	r3, #96	; 0x60
 8002e5a:	d050      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x11a>
 8002e5c:	2b60      	cmp	r3, #96	; 0x60
 8002e5e:	d877      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b50      	cmp	r3, #80	; 0x50
 8002e62:	d03c      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xfa>
 8002e64:	2b50      	cmp	r3, #80	; 0x50
 8002e66:	d873      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d058      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x13a>
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d86f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b30      	cmp	r3, #48	; 0x30
 8002e72:	d064      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e74:	2b30      	cmp	r3, #48	; 0x30
 8002e76:	d86b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d060      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d867      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05c      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d05a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	e062      	b.n	8002f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6899      	ldr	r1, [r3, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f000 fb5d 	bl	8003558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	609a      	str	r2, [r3, #8]
      break;
 8002eb6:	e04f      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f000 fb46 	bl	8003558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eda:	609a      	str	r2, [r3, #8]
      break;
 8002edc:	e03c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 faba 	bl	8003464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2150      	movs	r1, #80	; 0x50
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fb13 	bl	8003522 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e02c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 fad9 	bl	80034c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2160      	movs	r1, #96	; 0x60
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fb03 	bl	8003522 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e01c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 fa9a 	bl	8003464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 faf3 	bl	8003522 <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 faea 	bl	8003522 <TIM_ITRx_SetConfig>
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d00f      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a3d      	ldr	r2, [pc, #244]	; (80030dc <TIM_Base_SetConfig+0x118>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <TIM_Base_SetConfig+0x120>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0x40>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d02b      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d027      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <TIM_Base_SetConfig+0x118>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d023      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01f      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <TIM_Base_SetConfig+0x120>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01b      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d017      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a28      	ldr	r2, [pc, #160]	; (80030ec <TIM_Base_SetConfig+0x128>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <TIM_Base_SetConfig+0x12c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00f      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <TIM_Base_SetConfig+0x130>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00b      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <TIM_Base_SetConfig+0x134>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a24      	ldr	r2, [pc, #144]	; (80030fc <TIM_Base_SetConfig+0x138>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <TIM_Base_SetConfig+0x13c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0xf8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <TIM_Base_SetConfig+0x124>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	615a      	str	r2, [r3, #20]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40010400 	.word	0x40010400
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	40001800 	.word	0x40001800
 80030fc:	40001c00 	.word	0x40001c00
 8003100:	40002000 	.word	0x40002000

08003104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0201 	bic.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 0302 	bic.w	r3, r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <TIM_OC1_SetConfig+0xd8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC1_SetConfig+0x64>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <TIM_OC1_SetConfig+0xdc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10c      	bne.n	8003182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0308 	bic.w	r3, r3, #8
 800316e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <TIM_OC1_SetConfig+0xd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_OC1_SetConfig+0x8e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <TIM_OC1_SetConfig+0xdc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010400 	.word	0x40010400

080031e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0210 	bic.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0320 	bic.w	r3, r3, #32
 800322e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <TIM_OC2_SetConfig+0xe4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_OC2_SetConfig+0x68>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <TIM_OC2_SetConfig+0xe8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10d      	bne.n	8003268 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <TIM_OC2_SetConfig+0xe4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_OC2_SetConfig+0x94>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a16      	ldr	r2, [pc, #88]	; (80032cc <TIM_OC2_SetConfig+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d113      	bne.n	80032a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40010400 	.word	0x40010400

080032d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <TIM_OC3_SetConfig+0xe0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_OC3_SetConfig+0x66>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <TIM_OC3_SetConfig+0xe4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10d      	bne.n	8003352 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <TIM_OC3_SetConfig+0xe0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_OC3_SetConfig+0x92>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <TIM_OC3_SetConfig+0xe4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400

080033b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	031b      	lsls	r3, r3, #12
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <TIM_OC4_SetConfig+0xa4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC4_SetConfig+0x68>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <TIM_OC4_SetConfig+0xa8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d109      	bne.n	8003434 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40010400 	.word	0x40010400

08003464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 030a 	bic.w	r3, r3, #10
 80034a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b087      	sub	sp, #28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0210 	bic.w	r2, r3, #16
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	f043 0307 	orr.w	r3, r3, #7
 8003544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	431a      	orrs	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	401a      	ands	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e05a      	b.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d01d      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10c      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40010400 	.word	0x40010400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40001800 	.word	0x40001800

080036dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <makeFreeRtosPriority>:
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003716:	2b84      	cmp	r3, #132	; 0x84
 8003718:	d005      	beq.n	8003726 <makeFreeRtosPriority+0x22>
 800371a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	3303      	adds	r3, #3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <osKernelStart>:
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
 8003738:	f000 faf6 	bl	8003d28 <vTaskStartScheduler>
 800373c:	2300      	movs	r3, #0
 800373e:	4618      	mov	r0, r3
 8003740:	bd80      	pop	{r7, pc}

08003742 <osThreadCreate>:
 8003742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003744:	b089      	sub	sp, #36	; 0x24
 8003746:	af04      	add	r7, sp, #16
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <osThreadCreate+0x54>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01c      	beq.n	8003796 <osThreadCreate+0x54>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685c      	ldr	r4, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681d      	ldr	r5, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691e      	ldr	r6, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ffc8 	bl	8003704 <makeFreeRtosPriority>
 8003774:	4601      	mov	r1, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6992      	ldr	r2, [r2, #24]
 800377e:	9202      	str	r2, [sp, #8]
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	9100      	str	r1, [sp, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4632      	mov	r2, r6
 8003788:	4629      	mov	r1, r5
 800378a:	4620      	mov	r0, r4
 800378c:	f000 f8ed 	bl	800396a <xTaskCreateStatic>
 8003790:	4603      	mov	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e01c      	b.n	80037d0 <osThreadCreate+0x8e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685c      	ldr	r4, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681d      	ldr	r5, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	b29e      	uxth	r6, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ffaa 	bl	8003704 <makeFreeRtosPriority>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	9200      	str	r2, [sp, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	4632      	mov	r2, r6
 80037be:	4629      	mov	r1, r5
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f92f 	bl	8003a24 <xTaskCreate>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <osThreadCreate+0x8e>
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <osThreadCreate+0x90>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037da <osDelay>:
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <osDelay+0x16>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	e000      	b.n	80037f2 <osDelay+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa64 	bl	8003cc0 <vTaskDelay>
 80037f8:	2300      	movs	r3, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <vListInitialise>:
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f103 0208 	add.w	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f04f 32ff 	mov.w	r2, #4294967295
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0208 	add.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f103 0208 	add.w	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	611a      	str	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <vListInitialiseItem>:
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <vListInsertEnd>:
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <vListInsert>:
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d103      	bne.n	80038c4 <vListInsert+0x20>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e00c      	b.n	80038de <vListInsert+0x3a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3308      	adds	r3, #8
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e002      	b.n	80038d2 <vListInsert+0x2e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d2f6      	bcs.n	80038cc <vListInsert+0x28>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	611a      	str	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <uxListRemove>:
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6852      	ldr	r2, [r2, #4]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d103      	bne.n	800394a <uxListRemove+0x34>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1e5a      	subs	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <xTaskCreateStatic>:
 800396a:	b580      	push	{r7, lr}
 800396c:	b08e      	sub	sp, #56	; 0x38
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xTaskCreateStatic+0x2a>
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskCreateStatic+0x28>
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <xTaskCreateStatic+0x46>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskCreateStatic+0x44>
 80039b0:	23a0      	movs	r3, #160	; 0xa0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2ba0      	cmp	r3, #160	; 0xa0
 80039b8:	d00a      	beq.n	80039d0 <xTaskCreateStatic+0x66>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskCreateStatic+0x64>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01e      	beq.n	8003a16 <xTaskCreateStatic+0xac>
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01b      	beq.n	8003a16 <xTaskCreateStatic+0xac>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80039f0:	2300      	movs	r3, #0
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f851 	bl	8003ab0 <prvInitialiseNewTask>
 8003a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a10:	f000 f8ec 	bl	8003bec <prvAddNewTaskToReadyList>
 8003a14:	e001      	b.n	8003a1a <xTaskCreateStatic+0xb0>
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3728      	adds	r7, #40	; 0x28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xTaskCreate>:
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af04      	add	r7, sp, #16
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80fb      	strh	r3, [r7, #6]
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fef5 	bl	8004828 <pvPortMalloc>
 8003a3e:	6178      	str	r0, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00e      	beq.n	8003a64 <xTaskCreate+0x40>
 8003a46:	20a0      	movs	r0, #160	; 0xa0
 8003a48:	f000 feee 	bl	8004828 <pvPortMalloc>
 8003a4c:	61f8      	str	r0, [r7, #28]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <xTaskCreate+0x38>
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5a:	e005      	b.n	8003a68 <xTaskCreate+0x44>
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f000 ffaf 	bl	80049c0 <vPortFree>
 8003a62:	e001      	b.n	8003a68 <xTaskCreate+0x44>
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <xTaskCreate+0x7a>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f80f 	bl	8003ab0 <prvInitialiseNewTask>
 8003a92:	69f8      	ldr	r0, [r7, #28]
 8003a94:	f000 f8aa 	bl	8003bec <prvAddNewTaskToReadyList>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e002      	b.n	8003aa4 <xTaskCreate+0x80>
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <prvInitialiseNewTask>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <prvInitialiseNewTask+0x48>
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <prvInitialiseNewTask+0x46>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01f      	beq.n	8003b3e <prvInitialiseNewTask+0x8e>
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e012      	b.n	8003b2a <prvInitialiseNewTask+0x7a>
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	7819      	ldrb	r1, [r3, #0]
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	3334      	adds	r3, #52	; 0x34
 8003b14:	460a      	mov	r2, r1
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <prvInitialiseNewTask+0x82>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3301      	adds	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	d9e9      	bls.n	8003b04 <prvInitialiseNewTask+0x54>
 8003b30:	e000      	b.n	8003b34 <prvInitialiseNewTask+0x84>
 8003b32:	bf00      	nop
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3c:	e003      	b.n	8003b46 <prvInitialiseNewTask+0x96>
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d901      	bls.n	8003b50 <prvInitialiseNewTask+0xa0>
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fe6b 	bl	8003842 <vListInitialiseItem>
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fe66 	bl	8003842 <vListInitialiseItem>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f1c3 0207 	rsb	r2, r3, #7
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	619a      	str	r2, [r3, #24]
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	334c      	adds	r3, #76	; 0x4c
 8003ba0:	224c      	movs	r2, #76	; 0x4c
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f829 	bl	8004bfc <memset>
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <prvInitialiseNewTask+0x130>)
 8003bae:	651a      	str	r2, [r3, #80]	; 0x50
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <prvInitialiseNewTask+0x134>)
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <prvInitialiseNewTask+0x138>)
 8003bba:	659a      	str	r2, [r3, #88]	; 0x58
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	69b8      	ldr	r0, [r7, #24]
 8003bc2:	f000 fc1f 	bl	8004404 <pxPortInitialiseStack>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <prvInitialiseNewTask+0x128>
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	bf00      	nop
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	200041a4 	.word	0x200041a4
 8003be4:	2000420c 	.word	0x2000420c
 8003be8:	20004274 	.word	0x20004274

08003bec <prvAddNewTaskToReadyList>:
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	f000 fd36 	bl	8004664 <vPortEnterCritical>
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <prvAddNewTaskToReadyList+0xb8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <prvAddNewTaskToReadyList+0xb8>)
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <prvAddNewTaskToReadyList+0xbc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <prvAddNewTaskToReadyList+0x32>
 8003c0a:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <prvAddNewTaskToReadyList+0xbc>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <prvAddNewTaskToReadyList+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d110      	bne.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
 8003c18:	f000 facc 	bl	80041b4 <prvInitialiseTaskLists>
 8003c1c:	e00d      	b.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <prvAddNewTaskToReadyList+0xc0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <prvAddNewTaskToReadyList+0xbc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d802      	bhi.n	8003c3a <prvAddNewTaskToReadyList+0x4e>
 8003c34:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <prvAddNewTaskToReadyList+0xbc>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <prvAddNewTaskToReadyList+0xc4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <prvAddNewTaskToReadyList+0xc4>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <prvAddNewTaskToReadyList+0xc8>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <prvAddNewTaskToReadyList+0xcc>)
 8003c64:	441a      	add	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fdf5 	bl	800385c <vListInsertEnd>
 8003c72:	f000 fd27 	bl	80046c4 <vPortExitCritical>
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <prvAddNewTaskToReadyList+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00e      	beq.n	8003c9c <prvAddNewTaskToReadyList+0xb0>
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <prvAddNewTaskToReadyList+0xbc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <prvAddNewTaskToReadyList+0xb0>
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvAddNewTaskToReadyList+0xd0>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000550 	.word	0x20000550
 8003ca8:	20000450 	.word	0x20000450
 8003cac:	2000055c 	.word	0x2000055c
 8003cb0:	2000056c 	.word	0x2000056c
 8003cb4:	20000558 	.word	0x20000558
 8003cb8:	20000454 	.word	0x20000454
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <vTaskDelay>:
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d017      	beq.n	8003d02 <vTaskDelay+0x42>
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <vTaskDelay+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <vTaskDelay+0x30>
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <vTaskDelay+0x2e>
 8003cf0:	f000 f884 	bl	8003dfc <vTaskSuspendAll>
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fb1e 	bl	8004338 <prvAddCurrentTaskToDelayedList>
 8003cfc:	f000 f88c 	bl	8003e18 <xTaskResumeAll>
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <vTaskDelay+0x58>
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <vTaskDelay+0x64>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000578 	.word	0x20000578
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vTaskStartScheduler>:
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	463a      	mov	r2, r7
 8003d38:	1d39      	adds	r1, r7, #4
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fe70 	bl	8000a24 <vApplicationGetIdleTaskMemory>
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	9202      	str	r2, [sp, #8]
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	460a      	mov	r2, r1
 8003d56:	4921      	ldr	r1, [pc, #132]	; (8003ddc <vTaskStartScheduler+0xb4>)
 8003d58:	4821      	ldr	r0, [pc, #132]	; (8003de0 <vTaskStartScheduler+0xb8>)
 8003d5a:	f7ff fe06 	bl	800396a <xTaskCreateStatic>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <vTaskStartScheduler+0xbc>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <vTaskStartScheduler+0xbc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <vTaskStartScheduler+0x4a>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e001      	b.n	8003d76 <vTaskStartScheduler+0x4e>
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d11b      	bne.n	8003db4 <vTaskStartScheduler+0x8c>
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	bf00      	nop
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <vTaskStartScheduler+0xc0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	334c      	adds	r3, #76	; 0x4c
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <vTaskStartScheduler+0xc4>)
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <vTaskStartScheduler+0xc8>)
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <vTaskStartScheduler+0xcc>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <vTaskStartScheduler+0xd0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f000 fbb7 	bl	8004520 <xPortStartScheduler>
 8003db2:	e00e      	b.n	8003dd2 <vTaskStartScheduler+0xaa>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d10a      	bne.n	8003dd2 <vTaskStartScheduler+0xaa>
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <vTaskStartScheduler+0xa8>
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08004e1c 	.word	0x08004e1c
 8003de0:	08004185 	.word	0x08004185
 8003de4:	20000574 	.word	0x20000574
 8003de8:	20000450 	.word	0x20000450
 8003dec:	2000005c 	.word	0x2000005c
 8003df0:	20000570 	.word	0x20000570
 8003df4:	2000055c 	.word	0x2000055c
 8003df8:	20000554 	.word	0x20000554

08003dfc <vTaskSuspendAll>:
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <vTaskSuspendAll+0x18>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <vTaskSuspendAll+0x18>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000578 	.word	0x20000578

08003e18 <xTaskResumeAll>:
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <xTaskResumeAll+0x114>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xTaskResumeAll+0x2c>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xTaskResumeAll+0x2a>
 8003e44:	f000 fc0e 	bl	8004664 <vPortEnterCritical>
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <xTaskResumeAll+0x114>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <xTaskResumeAll+0x114>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <xTaskResumeAll+0x114>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d161      	bne.n	8003f1e <xTaskResumeAll+0x106>
 8003e5a:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <xTaskResumeAll+0x118>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d05d      	beq.n	8003f1e <xTaskResumeAll+0x106>
 8003e62:	e02e      	b.n	8003ec2 <xTaskResumeAll+0xaa>
 8003e64:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <xTaskResumeAll+0x11c>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fd50 	bl	8003916 <uxListRemove>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fd4b 	bl	8003916 <uxListRemove>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	2201      	movs	r2, #1
 8003e86:	409a      	lsls	r2, r3
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <xTaskResumeAll+0x120>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <xTaskResumeAll+0x120>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <xTaskResumeAll+0x124>)
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f7ff fcd7 	bl	800385c <vListInsertEnd>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <xTaskResumeAll+0x128>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <xTaskResumeAll+0xaa>
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <xTaskResumeAll+0x12c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <xTaskResumeAll+0x11c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1cc      	bne.n	8003e64 <xTaskResumeAll+0x4c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <xTaskResumeAll+0xbc>
 8003ed0:	f000 fa12 	bl	80042f8 <prvResetNextTaskUnblockTime>
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <xTaskResumeAll+0x130>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <xTaskResumeAll+0xea>
 8003ee0:	f000 f836 	bl	8003f50 <xTaskIncrementTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <xTaskResumeAll+0xd8>
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <xTaskResumeAll+0x12c>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f1      	bne.n	8003ee0 <xTaskResumeAll+0xc8>
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <xTaskResumeAll+0x130>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <xTaskResumeAll+0x12c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <xTaskResumeAll+0x106>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskResumeAll+0x134>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f000 fbd1 	bl	80046c4 <vPortExitCritical>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000578 	.word	0x20000578
 8003f30:	20000550 	.word	0x20000550
 8003f34:	20000510 	.word	0x20000510
 8003f38:	20000558 	.word	0x20000558
 8003f3c:	20000454 	.word	0x20000454
 8003f40:	20000450 	.word	0x20000450
 8003f44:	20000564 	.word	0x20000564
 8003f48:	20000560 	.word	0x20000560
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <xTaskIncrementTick>:
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <xTaskIncrementTick+0x144>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 808e 	bne.w	8004080 <xTaskIncrementTick+0x130>
 8003f64:	4b4c      	ldr	r3, [pc, #304]	; (8004098 <xTaskIncrementTick+0x148>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	4a4a      	ldr	r2, [pc, #296]	; (8004098 <xTaskIncrementTick+0x148>)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d120      	bne.n	8003fba <xTaskIncrementTick+0x6a>
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <xTaskIncrementTick+0x14c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <xTaskIncrementTick+0x48>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <xTaskIncrementTick+0x46>
 8003f98:	4b40      	ldr	r3, [pc, #256]	; (800409c <xTaskIncrementTick+0x14c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <xTaskIncrementTick+0x150>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3e      	ldr	r2, [pc, #248]	; (800409c <xTaskIncrementTick+0x14c>)
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	; (80040a0 <xTaskIncrementTick+0x150>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <xTaskIncrementTick+0x154>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <xTaskIncrementTick+0x154>)
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	f000 f99f 	bl	80042f8 <prvResetNextTaskUnblockTime>
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d348      	bcc.n	8004056 <xTaskIncrementTick+0x106>
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <xTaskIncrementTick+0x14c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <xTaskIncrementTick+0x88>
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e03e      	b.n	8004056 <xTaskIncrementTick+0x106>
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <xTaskIncrementTick+0x14c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d203      	bcs.n	8003ff8 <xTaskIncrementTick+0xa8>
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <xTaskIncrementTick+0x158>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e02e      	b.n	8004056 <xTaskIncrementTick+0x106>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fc8a 	bl	8003916 <uxListRemove>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <xTaskIncrementTick+0xc4>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3318      	adds	r3, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fc81 	bl	8003916 <uxListRemove>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	4b23      	ldr	r3, [pc, #140]	; (80040ac <xTaskIncrementTick+0x15c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	4a22      	ldr	r2, [pc, #136]	; (80040ac <xTaskIncrementTick+0x15c>)
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <xTaskIncrementTick+0x160>)
 8004034:	441a      	add	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7ff fc0d 	bl	800385c <vListInsertEnd>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <xTaskIncrementTick+0x164>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d3b9      	bcc.n	8003fc4 <xTaskIncrementTick+0x74>
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e7b6      	b.n	8003fc4 <xTaskIncrementTick+0x74>
 8004056:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <xTaskIncrementTick+0x164>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	4914      	ldr	r1, [pc, #80]	; (80040b0 <xTaskIncrementTick+0x160>)
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d901      	bls.n	8004072 <xTaskIncrementTick+0x122>
 800406e:	2301      	movs	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <xTaskIncrementTick+0x168>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <xTaskIncrementTick+0x13a>
 800407a:	2301      	movs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e004      	b.n	800408a <xTaskIncrementTick+0x13a>
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <xTaskIncrementTick+0x16c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <xTaskIncrementTick+0x16c>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000578 	.word	0x20000578
 8004098:	20000554 	.word	0x20000554
 800409c:	20000508 	.word	0x20000508
 80040a0:	2000050c 	.word	0x2000050c
 80040a4:	20000568 	.word	0x20000568
 80040a8:	20000570 	.word	0x20000570
 80040ac:	20000558 	.word	0x20000558
 80040b0:	20000454 	.word	0x20000454
 80040b4:	20000450 	.word	0x20000450
 80040b8:	20000564 	.word	0x20000564
 80040bc:	20000560 	.word	0x20000560

080040c0 <vTaskSwitchContext>:
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <vTaskSwitchContext+0xac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <vTaskSwitchContext+0x16>
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <vTaskSwitchContext+0xb0>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e044      	b.n	8004160 <vTaskSwitchContext+0xa0>
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <vTaskSwitchContext+0xb0>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <vTaskSwitchContext+0xb4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	72fb      	strb	r3, [r7, #11]
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	f1c3 031f 	rsb	r3, r3, #31
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <vTaskSwitchContext+0xb8>)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <vTaskSwitchContext+0x5c>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vTaskSwitchContext+0x5a>
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <vTaskSwitchContext+0xb8>)
 8004128:	4413      	add	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3308      	adds	r3, #8
 800413e:	429a      	cmp	r2, r3
 8004140:	d104      	bne.n	800414c <vTaskSwitchContext+0x8c>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <vTaskSwitchContext+0xbc>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <vTaskSwitchContext+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	334c      	adds	r3, #76	; 0x4c
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <vTaskSwitchContext+0xc0>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000578 	.word	0x20000578
 8004170:	20000564 	.word	0x20000564
 8004174:	20000558 	.word	0x20000558
 8004178:	20000454 	.word	0x20000454
 800417c:	20000450 	.word	0x20000450
 8004180:	2000005c 	.word	0x2000005c

08004184 <prvIdleTask>:
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	f000 f852 	bl	8004234 <prvCheckTasksWaitingTermination>
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <prvIdleTask+0x28>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d9f9      	bls.n	800418c <prvIdleTask+0x8>
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <prvIdleTask+0x2c>)
 800419a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	e7f0      	b.n	800418c <prvIdleTask+0x8>
 80041aa:	bf00      	nop
 80041ac:	20000454 	.word	0x20000454
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <prvInitialiseTaskLists>:
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	e00c      	b.n	80041da <prvInitialiseTaskLists+0x26>
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <prvInitialiseTaskLists+0x60>)
 80041cc:	4413      	add	r3, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fb17 	bl	8003802 <vListInitialise>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b06      	cmp	r3, #6
 80041de:	d9ef      	bls.n	80041c0 <prvInitialiseTaskLists+0xc>
 80041e0:	480d      	ldr	r0, [pc, #52]	; (8004218 <prvInitialiseTaskLists+0x64>)
 80041e2:	f7ff fb0e 	bl	8003802 <vListInitialise>
 80041e6:	480d      	ldr	r0, [pc, #52]	; (800421c <prvInitialiseTaskLists+0x68>)
 80041e8:	f7ff fb0b 	bl	8003802 <vListInitialise>
 80041ec:	480c      	ldr	r0, [pc, #48]	; (8004220 <prvInitialiseTaskLists+0x6c>)
 80041ee:	f7ff fb08 	bl	8003802 <vListInitialise>
 80041f2:	480c      	ldr	r0, [pc, #48]	; (8004224 <prvInitialiseTaskLists+0x70>)
 80041f4:	f7ff fb05 	bl	8003802 <vListInitialise>
 80041f8:	480b      	ldr	r0, [pc, #44]	; (8004228 <prvInitialiseTaskLists+0x74>)
 80041fa:	f7ff fb02 	bl	8003802 <vListInitialise>
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvInitialiseTaskLists+0x78>)
 8004200:	4a05      	ldr	r2, [pc, #20]	; (8004218 <prvInitialiseTaskLists+0x64>)
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvInitialiseTaskLists+0x7c>)
 8004206:	4a05      	ldr	r2, [pc, #20]	; (800421c <prvInitialiseTaskLists+0x68>)
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000454 	.word	0x20000454
 8004218:	200004e0 	.word	0x200004e0
 800421c:	200004f4 	.word	0x200004f4
 8004220:	20000510 	.word	0x20000510
 8004224:	20000524 	.word	0x20000524
 8004228:	2000053c 	.word	0x2000053c
 800422c:	20000508 	.word	0x20000508
 8004230:	2000050c 	.word	0x2000050c

08004234 <prvCheckTasksWaitingTermination>:
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	e019      	b.n	8004270 <prvCheckTasksWaitingTermination+0x3c>
 800423c:	f000 fa12 	bl	8004664 <vPortEnterCritical>
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <prvCheckTasksWaitingTermination+0x50>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb62 	bl	8003916 <uxListRemove>
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <prvCheckTasksWaitingTermination+0x54>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <prvCheckTasksWaitingTermination+0x54>)
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <prvCheckTasksWaitingTermination+0x58>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3b01      	subs	r3, #1
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <prvCheckTasksWaitingTermination+0x58>)
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	f000 fa2d 	bl	80046c4 <vPortExitCritical>
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f810 	bl	8004290 <prvDeleteTCB>
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <prvCheckTasksWaitingTermination+0x58>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e1      	bne.n	800423c <prvCheckTasksWaitingTermination+0x8>
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000524 	.word	0x20000524
 8004288:	20000550 	.word	0x20000550
 800428c:	20000538 	.word	0x20000538

08004290 <prvDeleteTCB>:
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	334c      	adds	r3, #76	; 0x4c
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fcb5 	bl	8004c0c <_reclaim_reent>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d108      	bne.n	80042be <prvDeleteTCB+0x2e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fb85 	bl	80049c0 <vPortFree>
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb82 	bl	80049c0 <vPortFree>
 80042bc:	e018      	b.n	80042f0 <prvDeleteTCB+0x60>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d103      	bne.n	80042d0 <prvDeleteTCB+0x40>
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb79 	bl	80049c0 <vPortFree>
 80042ce:	e00f      	b.n	80042f0 <prvDeleteTCB+0x60>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d00a      	beq.n	80042f0 <prvDeleteTCB+0x60>
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <prvDeleteTCB+0x5e>
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <prvResetNextTaskUnblockTime>:
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <prvResetNextTaskUnblockTime+0x38>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <prvResetNextTaskUnblockTime+0x1a>
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <prvResetNextTaskUnblockTime+0x3c>)
 800430a:	f04f 32ff 	mov.w	r2, #4294967295
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e008      	b.n	8004324 <prvResetNextTaskUnblockTime+0x2c>
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <prvResetNextTaskUnblockTime+0x38>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <prvResetNextTaskUnblockTime+0x3c>)
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000508 	.word	0x20000508
 8004334:	20000570 	.word	0x20000570

08004338 <prvAddCurrentTaskToDelayedList>:
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	4b28      	ldr	r3, [pc, #160]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fae1 	bl	8003916 <uxListRemove>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <prvAddCurrentTaskToDelayedList+0x3a>
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d10a      	bne.n	8004390 <prvAddCurrentTaskToDelayedList+0x58>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <prvAddCurrentTaskToDelayedList+0x58>
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3304      	adds	r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	481a      	ldr	r0, [pc, #104]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800438a:	f7ff fa67 	bl	800385c <vListInsertEnd>
 800438e:	e026      	b.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d209      	bcs.n	80043bc <prvAddCurrentTaskToDelayedList+0x84>
 80043a8:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7ff fa75 	bl	80038a4 <vListInsert>
 80043ba:	e010      	b.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f7ff fa6b 	bl	80038a4 <vListInsert>
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d202      	bcs.n	80043de <prvAddCurrentTaskToDelayedList+0xa6>
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000554 	.word	0x20000554
 80043ec:	20000450 	.word	0x20000450
 80043f0:	20000558 	.word	0x20000558
 80043f4:	2000053c 	.word	0x2000053c
 80043f8:	2000050c 	.word	0x2000050c
 80043fc:	20000508 	.word	0x20000508
 8004400:	20000570 	.word	0x20000570

08004404 <pxPortInitialiseStack>:
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b04      	subs	r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b04      	subs	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <pxPortInitialiseStack+0x64>)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b14      	subs	r3, #20
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b04      	subs	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b20      	subs	r3, #32
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	0800446d 	.word	0x0800446d

0800446c <prvTaskExitError>:
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <prvTaskExitError+0x54>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d00a      	beq.n	8004496 <prvTaskExitError+0x2a>
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <prvTaskExitError+0x28>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0fc      	beq.n	80044ac <prvTaskExitError+0x40>
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	2000000c 	.word	0x2000000c
	...

080044d0 <SVC_Handler>:
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <pxCurrentTCBConst2>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	4770      	bx	lr
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst2>:
 80044f0:	20000450 	.word	0x20000450
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
 80044f8:	4808      	ldr	r0, [pc, #32]	; (800451c <prvPortStartFirstTask+0x24>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8814 	msr	CONTROL, r0
 800450a:	b662      	cpsie	i
 800450c:	b661      	cpsie	f
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	df00      	svc	0
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e000ed08 	.word	0xe000ed08

08004520 <xPortStartScheduler>:
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	4b46      	ldr	r3, [pc, #280]	; (8004640 <xPortStartScheduler+0x120>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a46      	ldr	r2, [pc, #280]	; (8004644 <xPortStartScheduler+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <xPortStartScheduler+0x26>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xPortStartScheduler+0x24>
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <xPortStartScheduler+0x120>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <xPortStartScheduler+0x128>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10a      	bne.n	8004566 <xPortStartScheduler+0x46>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xPortStartScheduler+0x44>
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <xPortStartScheduler+0x12c>)
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <xPortStartScheduler+0x130>)
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <xPortStartScheduler+0x134>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e009      	b.n	80045aa <xPortStartScheduler+0x8a>
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <xPortStartScheduler+0x134>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	70fb      	strb	r3, [r7, #3]
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d0ef      	beq.n	8004596 <xPortStartScheduler+0x76>
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <xPortStartScheduler+0x134>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00a      	beq.n	80045d8 <xPortStartScheduler+0xb8>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xPortStartScheduler+0xb6>
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <xPortStartScheduler+0x134>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <xPortStartScheduler+0x134>)
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <xPortStartScheduler+0x134>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ea:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <xPortStartScheduler+0x134>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <xPortStartScheduler+0x138>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <xPortStartScheduler+0x138>)
 80045fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <xPortStartScheduler+0x138>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <xPortStartScheduler+0x138>)
 8004608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	f000 f8dd 	bl	80047cc <vPortSetupTimerInterrupt>
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <xPortStartScheduler+0x13c>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f000 f8fc 	bl	8004814 <vPortEnableVFP>
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <xPortStartScheduler+0x140>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <xPortStartScheduler+0x140>)
 8004622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	f7ff ff66 	bl	80044f8 <prvPortStartFirstTask>
 800462c:	f7ff fd48 	bl	80040c0 <vTaskSwitchContext>
 8004630:	f7ff ff1c 	bl	800446c <prvTaskExitError>
 8004634:	2300      	movs	r3, #0
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000ed00 	.word	0xe000ed00
 8004644:	410fc271 	.word	0x410fc271
 8004648:	410fc270 	.word	0x410fc270
 800464c:	e000e400 	.word	0xe000e400
 8004650:	2000057c 	.word	0x2000057c
 8004654:	20000580 	.word	0x20000580
 8004658:	e000ed20 	.word	0xe000ed20
 800465c:	2000000c 	.word	0x2000000c
 8004660:	e000ef34 	.word	0xe000ef34

08004664 <vPortEnterCritical>:
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	bf00      	nop
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <vPortEnterCritical+0x58>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <vPortEnterCritical+0x58>)
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <vPortEnterCritical+0x58>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10f      	bne.n	80046b0 <vPortEnterCritical+0x4c>
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortEnterCritical+0x5c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <vPortEnterCritical+0x4c>
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vPortEnterCritical+0x4a>
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <vPortExitCritical>:
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <vPortExitCritical+0x50>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <vPortExitCritical+0x24>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vPortExitCritical+0x22>
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <vPortExitCritical+0x50>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortExitCritical+0x50>)
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <vPortExitCritical+0x42>
 80046fa:	2300      	movs	r3, #0
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c
	...

08004720 <PendSV_Handler>:
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f7ff fcb6 	bl	80040c0 <vTaskSwitchContext>
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f380 8811 	msr	BASEPRI, r0
 800475c:	bc09      	pop	{r0, r3}
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	f01e 0f10 	tst.w	lr, #16
 800476a:	bf08      	it	eq
 800476c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004770:	f380 8809 	msr	PSP, r0
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst>:
 8004780:	20000450 	.word	0x20000450
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <SysTick_Handler>:
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	bf00      	nop
 80047a2:	f7ff fbd5 	bl	8003f50 <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SysTick_Handler+0x2c>
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <SysTick_Handler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <vPortSetupTimerInterrupt+0x40>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <vPortSetupTimerInterrupt+0x44>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010
 8004804:	e000e018 	.word	0xe000e018
 8004808:	20000000 	.word	0x20000000
 800480c:	10624dd3 	.word	0x10624dd3
 8004810:	e000e014 	.word	0xe000e014

08004814 <vPortEnableVFP>:
 8004814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004824 <vPortEnableVFP+0x10>
 8004818:	6801      	ldr	r1, [r0, #0]
 800481a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800481e:	6001      	str	r1, [r0, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000ed88 	.word	0xe000ed88

08004828 <pvPortMalloc>:
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	f7ff fae2 	bl	8003dfc <vTaskSuspendAll>
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <pvPortMalloc+0x180>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <pvPortMalloc+0x1c>
 8004840:	f000 f920 	bl	8004a84 <prvHeapInit>
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <pvPortMalloc+0x184>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8093 	bne.w	8004978 <pvPortMalloc+0x150>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01d      	beq.n	8004894 <pvPortMalloc+0x6c>
 8004858:	2208      	movs	r2, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <pvPortMalloc+0x6c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <pvPortMalloc+0x6c>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x6a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06e      	beq.n	8004978 <pvPortMalloc+0x150>
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <pvPortMalloc+0x188>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d869      	bhi.n	8004978 <pvPortMalloc+0x150>
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <pvPortMalloc+0x18c>)
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <pvPortMalloc+0x18c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	e004      	b.n	80048ba <pvPortMalloc+0x92>
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <pvPortMalloc+0xa4>
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f1      	bne.n	80048b0 <pvPortMalloc+0x88>
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <pvPortMalloc+0x180>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d050      	beq.n	8004978 <pvPortMalloc+0x150>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2208      	movs	r2, #8
 80048dc:	4413      	add	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	2308      	movs	r3, #8
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d91f      	bls.n	8004938 <pvPortMalloc+0x110>
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <pvPortMalloc+0xf8>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <pvPortMalloc+0xf6>
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 f908 	bl	8004b48 <prvInsertBlockIntoFreeList>
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <pvPortMalloc+0x188>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <pvPortMalloc+0x188>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <pvPortMalloc+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <pvPortMalloc+0x190>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <pvPortMalloc+0x132>
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <pvPortMalloc+0x188>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <pvPortMalloc+0x190>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <pvPortMalloc+0x184>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	431a      	orrs	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <pvPortMalloc+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <pvPortMalloc+0x194>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	f7ff fa4e 	bl	8003e18 <xTaskResumeAll>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <pvPortMalloc+0x174>
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0x172>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000418c 	.word	0x2000418c
 80049ac:	200041a0 	.word	0x200041a0
 80049b0:	20004190 	.word	0x20004190
 80049b4:	20004184 	.word	0x20004184
 80049b8:	20004194 	.word	0x20004194
 80049bc:	20004198 	.word	0x20004198

080049c0 <vPortFree>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04d      	beq.n	8004a6e <vPortFree+0xae>
 80049d2:	2308      	movs	r3, #8
 80049d4:	425b      	negs	r3, r3
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <vPortFree+0xb8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <vPortFree+0x44>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortFree+0x42>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vPortFree+0x62>
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vPortFree+0x60>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <vPortFree+0xb8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <vPortFree+0xae>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11a      	bne.n	8004a6e <vPortFree+0xae>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <vPortFree+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	f7ff f9d8 	bl	8003dfc <vTaskSuspendAll>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <vPortFree+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortFree+0xbc>)
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f000 f874 	bl	8004b48 <prvInsertBlockIntoFreeList>
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <vPortFree+0xc0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a06      	ldr	r2, [pc, #24]	; (8004a80 <vPortFree+0xc0>)
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	f7ff f9d5 	bl	8003e18 <xTaskResumeAll>
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200041a0 	.word	0x200041a0
 8004a7c:	20004190 	.word	0x20004190
 8004a80:	2000419c 	.word	0x2000419c

08004a84 <prvHeapInit>:
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <prvHeapInit+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <prvHeapInit+0x34>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <prvHeapInit+0xac>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <prvHeapInit+0xb0>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <prvHeapInit+0xb0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvHeapInit+0xb4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvHeapInit+0xb4>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvHeapInit+0xb8>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <prvHeapInit+0xbc>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvHeapInit+0xc0>)
 8004b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000584 	.word	0x20000584
 8004b34:	20004184 	.word	0x20004184
 8004b38:	2000418c 	.word	0x2000418c
 8004b3c:	20004194 	.word	0x20004194
 8004b40:	20004190 	.word	0x20004190
 8004b44:	200041a0 	.word	0x200041a0

08004b48 <prvInsertBlockIntoFreeList>:
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <prvInsertBlockIntoFreeList+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e002      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x14>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d8f7      	bhi.n	8004b56 <prvInsertBlockIntoFreeList+0xe>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d108      	bne.n	8004b8a <prvInsertBlockIntoFreeList+0x42>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d118      	bne.n	8004bd0 <prvInsertBlockIntoFreeList+0x88>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d00d      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x7e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e003      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d002      	beq.n	8004be6 <prvInsertBlockIntoFreeList+0x9e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20004184 	.word	0x20004184
 8004bf8:	2000418c 	.word	0x2000418c

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <_reclaim_reent>:
 8004c0c:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <_reclaim_reent+0xa8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4283      	cmp	r3, r0
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	d04b      	beq.n	8004cb0 <_reclaim_reent+0xa4>
 8004c18:	69c3      	ldr	r3, [r0, #28]
 8004c1a:	b143      	cbz	r3, 8004c2e <_reclaim_reent+0x22>
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d144      	bne.n	8004cac <_reclaim_reent+0xa0>
 8004c22:	69e3      	ldr	r3, [r4, #28]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	b111      	cbz	r1, 8004c2e <_reclaim_reent+0x22>
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f86b 	bl	8004d04 <_free_r>
 8004c2e:	6961      	ldr	r1, [r4, #20]
 8004c30:	b111      	cbz	r1, 8004c38 <_reclaim_reent+0x2c>
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 f866 	bl	8004d04 <_free_r>
 8004c38:	69e1      	ldr	r1, [r4, #28]
 8004c3a:	b111      	cbz	r1, 8004c42 <_reclaim_reent+0x36>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 f861 	bl	8004d04 <_free_r>
 8004c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c44:	b111      	cbz	r1, 8004c4c <_reclaim_reent+0x40>
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f85c 	bl	8004d04 <_free_r>
 8004c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4e:	b111      	cbz	r1, 8004c56 <_reclaim_reent+0x4a>
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 f857 	bl	8004d04 <_free_r>
 8004c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c58:	b111      	cbz	r1, 8004c60 <_reclaim_reent+0x54>
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 f852 	bl	8004d04 <_free_r>
 8004c60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c62:	b111      	cbz	r1, 8004c6a <_reclaim_reent+0x5e>
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 f84d 	bl	8004d04 <_free_r>
 8004c6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c6c:	b111      	cbz	r1, 8004c74 <_reclaim_reent+0x68>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f848 	bl	8004d04 <_free_r>
 8004c74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c76:	b111      	cbz	r1, 8004c7e <_reclaim_reent+0x72>
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 f843 	bl	8004d04 <_free_r>
 8004c7e:	6a23      	ldr	r3, [r4, #32]
 8004c80:	b1b3      	cbz	r3, 8004cb0 <_reclaim_reent+0xa4>
 8004c82:	4620      	mov	r0, r4
 8004c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c88:	4718      	bx	r3
 8004c8a:	5949      	ldr	r1, [r1, r5]
 8004c8c:	b941      	cbnz	r1, 8004ca0 <_reclaim_reent+0x94>
 8004c8e:	3504      	adds	r5, #4
 8004c90:	69e3      	ldr	r3, [r4, #28]
 8004c92:	2d80      	cmp	r5, #128	; 0x80
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	d1f8      	bne.n	8004c8a <_reclaim_reent+0x7e>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f833 	bl	8004d04 <_free_r>
 8004c9e:	e7c0      	b.n	8004c22 <_reclaim_reent+0x16>
 8004ca0:	680e      	ldr	r6, [r1, #0]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 f82e 	bl	8004d04 <_free_r>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e7ef      	b.n	8004c8c <_reclaim_reent+0x80>
 8004cac:	2500      	movs	r5, #0
 8004cae:	e7ef      	b.n	8004c90 <_reclaim_reent+0x84>
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000005c 	.word	0x2000005c

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 f872 	bl	8004db4 <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08004e44 	.word	0x08004e44
 8004cf4:	08004e44 	.word	0x08004e44
 8004cf8:	08004e44 	.word	0x08004e44
 8004cfc:	08004e48 	.word	0x08004e48

08004d00 <__retarget_lock_acquire_recursive>:
 8004d00:	4770      	bx	lr

08004d02 <__retarget_lock_release_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <_free_r>:
 8004d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d06:	2900      	cmp	r1, #0
 8004d08:	d044      	beq.n	8004d94 <_free_r+0x90>
 8004d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0e:	9001      	str	r0, [sp, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f1a1 0404 	sub.w	r4, r1, #4
 8004d16:	bfb8      	it	lt
 8004d18:	18e4      	addlt	r4, r4, r3
 8004d1a:	f000 f83f 	bl	8004d9c <__malloc_lock>
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <_free_r+0x94>)
 8004d20:	9801      	ldr	r0, [sp, #4]
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	b933      	cbnz	r3, 8004d34 <_free_r+0x30>
 8004d26:	6063      	str	r3, [r4, #4]
 8004d28:	6014      	str	r4, [r2, #0]
 8004d2a:	b003      	add	sp, #12
 8004d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d30:	f000 b83a 	b.w	8004da8 <__malloc_unlock>
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d908      	bls.n	8004d4a <_free_r+0x46>
 8004d38:	6825      	ldr	r5, [r4, #0]
 8004d3a:	1961      	adds	r1, r4, r5
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	bf01      	itttt	eq
 8004d40:	6819      	ldreq	r1, [r3, #0]
 8004d42:	685b      	ldreq	r3, [r3, #4]
 8004d44:	1949      	addeq	r1, r1, r5
 8004d46:	6021      	streq	r1, [r4, #0]
 8004d48:	e7ed      	b.n	8004d26 <_free_r+0x22>
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b10b      	cbz	r3, 8004d54 <_free_r+0x50>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d9fa      	bls.n	8004d4a <_free_r+0x46>
 8004d54:	6811      	ldr	r1, [r2, #0]
 8004d56:	1855      	adds	r5, r2, r1
 8004d58:	42a5      	cmp	r5, r4
 8004d5a:	d10b      	bne.n	8004d74 <_free_r+0x70>
 8004d5c:	6824      	ldr	r4, [r4, #0]
 8004d5e:	4421      	add	r1, r4
 8004d60:	1854      	adds	r4, r2, r1
 8004d62:	42a3      	cmp	r3, r4
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	d1e0      	bne.n	8004d2a <_free_r+0x26>
 8004d68:	681c      	ldr	r4, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	6053      	str	r3, [r2, #4]
 8004d6e:	440c      	add	r4, r1
 8004d70:	6014      	str	r4, [r2, #0]
 8004d72:	e7da      	b.n	8004d2a <_free_r+0x26>
 8004d74:	d902      	bls.n	8004d7c <_free_r+0x78>
 8004d76:	230c      	movs	r3, #12
 8004d78:	6003      	str	r3, [r0, #0]
 8004d7a:	e7d6      	b.n	8004d2a <_free_r+0x26>
 8004d7c:	6825      	ldr	r5, [r4, #0]
 8004d7e:	1961      	adds	r1, r4, r5
 8004d80:	428b      	cmp	r3, r1
 8004d82:	bf04      	itt	eq
 8004d84:	6819      	ldreq	r1, [r3, #0]
 8004d86:	685b      	ldreq	r3, [r3, #4]
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	bf04      	itt	eq
 8004d8c:	1949      	addeq	r1, r1, r5
 8004d8e:	6021      	streq	r1, [r4, #0]
 8004d90:	6054      	str	r4, [r2, #4]
 8004d92:	e7ca      	b.n	8004d2a <_free_r+0x26>
 8004d94:	b003      	add	sp, #12
 8004d96:	bd30      	pop	{r4, r5, pc}
 8004d98:	200042e0 	.word	0x200042e0

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f7ff bfaf 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	200042dc 	.word	0x200042dc

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f7ff bfaa 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	200042dc 	.word	0x200042dc

08004db4 <_init>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_fini>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr
