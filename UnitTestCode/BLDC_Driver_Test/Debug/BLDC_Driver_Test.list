
BLDC_Driver_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd4  08002fd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd4  08002fd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd4  08002fd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002fe8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002fe8  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098eb  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000194b  00000000  00000000  00029963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000846  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c7f  00000000  00000000  0002c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adcb  00000000  00000000  0004322d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c27  00000000  00000000  0004dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cd0  00000000  00000000  000d4c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d78f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f98 	.word	0x08002f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f98 	.word	0x08002f98

0800014c <HAL_GPIO_EXTI_Callback>:

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Sensor_Pin){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b20      	cmp	r3, #32
 800015a:	d105      	bne.n	8000168 <HAL_GPIO_EXTI_Callback+0x1c>
		pwm1 = 0;
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <HAL_GPIO_EXTI_Callback+0x28>)
 800015e:	2200      	movs	r2, #0
 8000160:	801a      	strh	r2, [r3, #0]
		pwm2 = 0;
 8000162:	4b05      	ldr	r3, [pc, #20]	; (8000178 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000164:	2200      	movs	r2, #0
 8000166:	801a      	strh	r2, [r3, #0]
	}
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000156 	.word	0x20000156
 8000178:	20000158 	.word	0x20000158

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fc82 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f8a4 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 fa52 	bl	8000630 <MX_GPIO_Init>
  MX_TIM2_Init();
 800018c:	f000 f91c 	bl	80003c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000190:	f000 f9a6 	bl	80004e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000194:	f000 f9f8 	bl	8000588 <MX_TIM4_Init>
  MX_CAN_Init();
 8000198:	f000 f8e0 	bl	800035c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 800019c:	483c      	ldr	r0, [pc, #240]	; (8000290 <main+0x114>)
 800019e:	f000 fdd0 	bl	8000d42 <HAL_CAN_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001a2:	2104      	movs	r1, #4
 80001a4:	483b      	ldr	r0, [pc, #236]	; (8000294 <main+0x118>)
 80001a6:	f002 f86d 	bl	8002284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001aa:	2108      	movs	r1, #8
 80001ac:	4839      	ldr	r0, [pc, #228]	; (8000294 <main+0x118>)
 80001ae:	f002 f869 	bl	8002284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80001b2:	210c      	movs	r1, #12
 80001b4:	4837      	ldr	r0, [pc, #220]	; (8000294 <main+0x118>)
 80001b6:	f002 f865 	bl	8002284 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80001ba:	213c      	movs	r1, #60	; 0x3c
 80001bc:	4836      	ldr	r0, [pc, #216]	; (8000298 <main+0x11c>)
 80001be:	f002 f9a5 	bl	800250c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001c2:	213c      	movs	r1, #60	; 0x3c
 80001c4:	4835      	ldr	r0, [pc, #212]	; (800029c <main+0x120>)
 80001c6:	f002 f9a1 	bl	800250c <HAL_TIM_Encoder_Start>

  TxHeader.DLC = 8;
 80001ca:	4b35      	ldr	r3, [pc, #212]	; (80002a0 <main+0x124>)
 80001cc:	2208      	movs	r2, #8
 80001ce:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0x00;
 80001d0:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <main+0x124>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80001d6:	4b32      	ldr	r3, [pc, #200]	; (80002a0 <main+0x124>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80001dc:	4b30      	ldr	r3, [pc, #192]	; (80002a0 <main+0x124>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 80001e2:	4b2f      	ldr	r3, [pc, #188]	; (80002a0 <main+0x124>)
 80001e4:	f240 1203 	movw	r2, #259	; 0x103
 80001e8:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80001ea:	4b2d      	ldr	r3, [pc, #180]	; (80002a0 <main+0x124>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]

  txdata[0] = 0x01;
 80001f0:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <main+0x128>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
  txdata[1] = 0x02;
 80001f6:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <main+0x128>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	705a      	strb	r2, [r3, #1]
  txdata[2] = 0x03;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <main+0x128>)
 80001fe:	2203      	movs	r2, #3
 8000200:	709a      	strb	r2, [r3, #2]
  txdata[3] = 0x04;
 8000202:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <main+0x128>)
 8000204:	2204      	movs	r2, #4
 8000206:	70da      	strb	r2, [r3, #3]
  txdata[4] = 0x05;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <main+0x128>)
 800020a:	2205      	movs	r2, #5
 800020c:	711a      	strb	r2, [r3, #4]
  txdata[5] = 0x06;
 800020e:	4b25      	ldr	r3, [pc, #148]	; (80002a4 <main+0x128>)
 8000210:	2206      	movs	r2, #6
 8000212:	715a      	strb	r2, [r3, #5]
  txdata[6] = 0x07;
 8000214:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <main+0x128>)
 8000216:	2207      	movs	r2, #7
 8000218:	719a      	strb	r2, [r3, #6]
  txdata[7] = 0x08;
 800021a:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <main+0x128>)
 800021c:	2208      	movs	r2, #8
 800021e:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ecd1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <main+0x11c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000226:	b2da      	uxtb	r2, r3
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <main+0x12c>)
 800022a:	701a      	strb	r2, [r3, #0]
	  ecd2 = __HAL_TIM_GET_COUNTER(&htim4);
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <main+0x120>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <main+0x130>)
 8000236:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <main+0x134>)
 800023a:	881a      	ldrh	r2, [r3, #0]
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <main+0x118>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm1);
 8000242:	4b1c      	ldr	r3, [pc, #112]	; (80002b4 <main+0x138>)
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x118>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm2);
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x13c>)
 800024e:	881a      	ldrh	r2, [r3, #0]
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <main+0x118>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, dir);
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x140>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	2101      	movs	r1, #1
 800025e:	4818      	ldr	r0, [pc, #96]	; (80002c0 <main+0x144>)
 8000260:	f001 fb40 	bl	80018e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, brake);
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0x148>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	2110      	movs	r1, #16
 800026c:	4814      	ldr	r0, [pc, #80]	; (80002c0 <main+0x144>)
 800026e:	f001 fb39 	bl	80018e4 <HAL_GPIO_WritePin>
	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, TxMailBox) == HAL_OK){
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <main+0x14c>)
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <main+0x128>)
 8000276:	490a      	ldr	r1, [pc, #40]	; (80002a0 <main+0x124>)
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x114>)
 800027a:	f000 fda6 	bl	8000dca <HAL_CAN_AddTxMessage>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1cd      	bne.n	8000220 <main+0xa4>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4810      	ldr	r0, [pc, #64]	; (80002cc <main+0x150>)
 800028a:	f001 fb43 	bl	8001914 <HAL_GPIO_TogglePin>
	  ecd1 = __HAL_TIM_GET_COUNTER(&htim3);
 800028e:	e7c7      	b.n	8000220 <main+0xa4>
 8000290:	20000028 	.word	0x20000028
 8000294:	20000050 	.word	0x20000050
 8000298:	20000098 	.word	0x20000098
 800029c:	200000e0 	.word	0x200000e0
 80002a0:	20000128 	.word	0x20000128
 80002a4:	2000014c 	.word	0x2000014c
 80002a8:	2000015c 	.word	0x2000015c
 80002ac:	2000015d 	.word	0x2000015d
 80002b0:	20000154 	.word	0x20000154
 80002b4:	20000156 	.word	0x20000156
 80002b8:	20000158 	.word	0x20000158
 80002bc:	2000015a 	.word	0x2000015a
 80002c0:	40010800 	.word	0x40010800
 80002c4:	2000015b 	.word	0x2000015b
 80002c8:	20000140 	.word	0x20000140
 80002cc:	40011000 	.word	0x40011000

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	; 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fe2e 	bl	8002f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f001 fb2d 	bl	8001978 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000324:	f000 fa06 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fd9a 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800034e:	f000 f9f1 	bl	8000734 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	; 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_CAN_Init+0x64>)
 8000362:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <MX_CAN_Init+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_CAN_Init+0x64>)
 8000368:	2212      	movs	r2, #18
 800036a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_CAN_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <MX_CAN_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_CAN_Init+0x64>)
 800037a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800037e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_CAN_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_CAN_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_CAN_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_CAN_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_CAN_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_CAN_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_CAN_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_CAN_Init+0x64>)
 80003ac:	f000 fbce 	bl	8000b4c <HAL_CAN_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80003b6:	f000 f9bd 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40006400 	.word	0x40006400

080003c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08e      	sub	sp, #56	; 0x38
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	f107 0320 	add.w	r3, r7, #32
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f8:	4b38      	ldr	r3, [pc, #224]	; (80004dc <MX_TIM2_Init+0x114>)
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000400:	4b36      	ldr	r3, [pc, #216]	; (80004dc <MX_TIM2_Init+0x114>)
 8000402:	2247      	movs	r2, #71	; 0x47
 8000404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <MX_TIM2_Init+0x114>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800040c:	4b33      	ldr	r3, [pc, #204]	; (80004dc <MX_TIM2_Init+0x114>)
 800040e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <MX_TIM2_Init+0x114>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041a:	4b30      	ldr	r3, [pc, #192]	; (80004dc <MX_TIM2_Init+0x114>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000420:	482e      	ldr	r0, [pc, #184]	; (80004dc <MX_TIM2_Init+0x114>)
 8000422:	f001 fe87 	bl	8002134 <HAL_TIM_Base_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800042c:	f000 f982 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043a:	4619      	mov	r1, r3
 800043c:	4827      	ldr	r0, [pc, #156]	; (80004dc <MX_TIM2_Init+0x114>)
 800043e:	f002 f9b5 	bl	80027ac <HAL_TIM_ConfigClockSource>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000448:	f000 f974 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <MX_TIM2_Init+0x114>)
 800044e:	f001 fec0 	bl	80021d2 <HAL_TIM_PWM_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000458:	f000 f96c 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000464:	f107 0320 	add.w	r3, r7, #32
 8000468:	4619      	mov	r1, r3
 800046a:	481c      	ldr	r0, [pc, #112]	; (80004dc <MX_TIM2_Init+0x114>)
 800046c:	f002 fd0a 	bl	8002e84 <HAL_TIMEx_MasterConfigSynchronization>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000476:	f000 f95d 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047a:	2360      	movs	r3, #96	; 0x60
 800047c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2204      	movs	r2, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4812      	ldr	r0, [pc, #72]	; (80004dc <MX_TIM2_Init+0x114>)
 8000492:	f002 f8c9 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800049c:	f000 f94a 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2208      	movs	r2, #8
 80004a4:	4619      	mov	r1, r3
 80004a6:	480d      	ldr	r0, [pc, #52]	; (80004dc <MX_TIM2_Init+0x114>)
 80004a8:	f002 f8be 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80004b2:	f000 f93f 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	220c      	movs	r2, #12
 80004ba:	4619      	mov	r1, r3
 80004bc:	4807      	ldr	r0, [pc, #28]	; (80004dc <MX_TIM2_Init+0x114>)
 80004be:	f002 f8b3 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80004c8:	f000 f934 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <MX_TIM2_Init+0x114>)
 80004ce:	f000 fa45 	bl	800095c <HAL_TIM_MspPostInit>

}
 80004d2:	bf00      	nop
 80004d4:	3738      	adds	r7, #56	; 0x38
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000050 	.word	0x20000050

080004e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2224      	movs	r2, #36	; 0x24
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fd26 	bl	8002f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_TIM3_Init+0xa0>)
 80004fe:	4a21      	ldr	r2, [pc, #132]	; (8000584 <MX_TIM3_Init+0xa4>)
 8000500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MX_TIM3_Init+0xa0>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_TIM3_Init+0xa0>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_TIM3_Init+0xa0>)
 8000510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_TIM3_Init+0xa0>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_TIM3_Init+0xa0>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000522:	2303      	movs	r3, #3
 8000524:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000526:	2302      	movs	r3, #2
 8000528:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000536:	2302      	movs	r3, #2
 8000538:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800053a:	2301      	movs	r3, #1
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4619      	mov	r1, r3
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <MX_TIM3_Init+0xa0>)
 800054e:	f001 ff3b 	bl	80023c8 <HAL_TIM_Encoder_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000558:	f000 f8ec 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_TIM3_Init+0xa0>)
 800056a:	f002 fc8b 	bl	8002e84 <HAL_TIMEx_MasterConfigSynchronization>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000574:	f000 f8de 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	3730      	adds	r7, #48	; 0x30
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000098 	.word	0x20000098
 8000584:	40000400 	.word	0x40000400

08000588 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2224      	movs	r2, #36	; 0x24
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fcd2 	bl	8002f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005a6:	4a21      	ldr	r2, [pc, #132]	; (800062c <MX_TIM4_Init+0xa4>)
 80005a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80005de:	2302      	movs	r3, #2
 80005e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005e2:	2301      	movs	r3, #1
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_TIM4_Init+0xa0>)
 80005f6:	f001 fee7 	bl	80023c8 <HAL_TIM_Encoder_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000600:	f000 f898 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_TIM4_Init+0xa0>)
 8000612:	f002 fc37 	bl	8002e84 <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800061c:	f000 f88a 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3730      	adds	r7, #48	; 0x30
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000e0 	.word	0x200000e0
 800062c:	40000800 	.word	0x40000800

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a36      	ldr	r2, [pc, #216]	; (8000724 <MX_GPIO_Init+0xf4>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_GPIO_Init+0xf4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_GPIO_Init+0xf4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <MX_GPIO_Init+0xf4>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <MX_GPIO_Init+0xf4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <MX_GPIO_Init+0xf4>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_GPIO_Init+0xf4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <MX_GPIO_Init+0xf8>)
 80006ac:	f001 f91a 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|BRAKE_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2111      	movs	r1, #17
 80006b4:	481d      	ldr	r0, [pc, #116]	; (800072c <MX_GPIO_Init+0xfc>)
 80006b6:	f001 f915 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <MX_GPIO_Init+0xf8>)
 80006d4:	f000 ff82 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin BRAKE_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|BRAKE_Pin;
 80006d8:	2311      	movs	r3, #17
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <MX_GPIO_Init+0xfc>)
 80006f0:	f000 ff74 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 80006f4:	2320      	movs	r3, #32
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_GPIO_Init+0x100>)
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_GPIO_Init+0xfc>)
 8000708:	f000 ff68 	bl	80015dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2017      	movs	r0, #23
 8000712:	f000 ff2c 	bl	800156e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000716:	2017      	movs	r0, #23
 8000718:	f000 ff45 	bl	80015a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	40011000 	.word	0x40011000
 800072c:	40010800 	.word	0x40010800
 8000730:	10210000 	.word	0x10210000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_MspInit+0x5c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_MspInit+0x5c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x5c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x5c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_MspInit+0x60>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_MspInit+0x60>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010000 	.word	0x40010000

080007a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <HAL_CAN_MspInit+0x9c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d139      	bne.n	8000838 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ce:	61d3      	str	r3, [r2, #28]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_CAN_MspInit+0xa0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <HAL_CAN_MspInit+0xa4>)
 800080a:	f000 fee7 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_CAN_MspInit+0xa4>)
 8000824:	f000 feda 	bl	80015dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2014      	movs	r0, #20
 800082e:	f000 fe9e 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000832:	2014      	movs	r0, #20
 8000834:	f000 feb7 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40006400 	.word	0x40006400
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800085c:	d10b      	bne.n	8000876 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0x34>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_TIM_Base_MspInit+0x34>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_TIM_Base_MspInit+0x34>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <HAL_TIM_Encoder_MspInit+0xc4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d124      	bne.n	80008ee <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008a4:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EnA2_Pin|EnB2_Pin;
 80008d4:	23c0      	movs	r3, #192	; 0xc0
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4619      	mov	r1, r3
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <HAL_TIM_Encoder_MspInit+0xcc>)
 80008e8:	f000 fe78 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008ec:	e028      	b.n	8000940 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <HAL_TIM_Encoder_MspInit+0xd0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d123      	bne.n	8000940 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	61d3      	str	r3, [r2, #28]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_TIM_Encoder_MspInit+0xc8>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EnB1_Pin|EnA1_Pin;
 8000928:	23c0      	movs	r3, #192	; 0xc0
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_TIM_Encoder_MspInit+0xd4>)
 800093c:	f000 fe4e 	bl	80015dc <HAL_GPIO_Init>
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40000400 	.word	0x40000400
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	40000800 	.word	0x40000800
 8000958:	40010c00 	.word	0x40010c00

0800095c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097a:	d117      	bne.n	80009ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_TIM_MspPostInit+0x58>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <HAL_TIM_MspPostInit+0x58>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_TIM_MspPostInit+0x58>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BLDC_PWM_Pin|DC_PWMR_Pin|DC_PWML_Pin;
 8000994:	230e      	movs	r3, #14
 8000996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <HAL_TIM_MspPostInit+0x5c>)
 80009a8:	f000 fe18 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 f887 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a12:	f000 faa9 	bl	8000f68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000028 	.word	0x20000028

08000a20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor_Pin);
 8000a24:	2020      	movs	r0, #32
 8000a26:	f000 ff8f 	bl	8001948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
	...

08000a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff fff7 	bl	8000a2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a42:	490c      	ldr	r1, [pc, #48]	; (8000a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a58:	4c09      	ldr	r4, [pc, #36]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 fa73 	bl	8002f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fb87 	bl	800017c <main>
  bx lr
 8000a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	20000164 	.word	0x20000164

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 fd5d 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe4c 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fd75 	bl	80015c2 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 fd3d 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000160 	.word	0x20000160

08000b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000160 	.word	0x20000160

08000b4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e0ed      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe1a 	bl	80007a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b80:	f7ff ffda 	bl	8000b38 <HAL_GetTick>
 8000b84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b86:	e012      	b.n	8000bae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b88:	f7ff ffd6 	bl	8000b38 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b0a      	cmp	r3, #10
 8000b94:	d90b      	bls.n	8000bae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e0c5      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0e5      	beq.n	8000b88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0202 	bic.w	r2, r2, #2
 8000bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bcc:	f7ff ffb4 	bl	8000b38 <HAL_GetTick>
 8000bd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bd2:	e012      	b.n	8000bfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bd4:	f7ff ffb0 	bl	8000b38 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d90b      	bls.n	8000bfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e09f      	b.n	8000d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e5      	bne.n	8000bd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e1b      	ldrb	r3, [r3, #24]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d108      	bne.n	8000c22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e5b      	ldrb	r3, [r3, #25]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d108      	bne.n	8000c4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7e9b      	ldrb	r3, [r3, #26]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0220 	orr.w	r2, r2, #32
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e007      	b.n	8000c86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0220 	bic.w	r2, r2, #32
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7edb      	ldrb	r3, [r3, #27]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d108      	bne.n	8000ca0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0210 	bic.w	r2, r2, #16
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0210 	orr.w	r2, r2, #16
 8000cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7f1b      	ldrb	r3, [r3, #28]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d108      	bne.n	8000cca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0208 	orr.w	r2, r2, #8
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e007      	b.n	8000cda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0208 	bic.w	r2, r2, #8
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7f5b      	ldrb	r3, [r3, #29]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d108      	bne.n	8000cf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0204 	orr.w	r2, r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0204 	bic.w	r2, r2, #4
 8000d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	ea42 0103 	orr.w	r1, r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d12e      	bne.n	8000db4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d6e:	f7ff fee3 	bl	8000b38 <HAL_GetTick>
 8000d72:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d74:	e012      	b.n	8000d9c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d76:	f7ff fedf 	bl	8000b38 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	d90b      	bls.n	8000d9c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2205      	movs	r2, #5
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e012      	b.n	8000dc2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1e5      	bne.n	8000d76 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e006      	b.n	8000dc2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
  }
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b089      	sub	sp, #36	; 0x24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000de8:	7ffb      	ldrb	r3, [r7, #31]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d003      	beq.n	8000df6 <HAL_CAN_AddTxMessage+0x2c>
 8000dee:	7ffb      	ldrb	r3, [r7, #31]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f040 80ad 	bne.w	8000f50 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10a      	bne.n	8000e16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d105      	bne.n	8000e16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 8095 	beq.w	8000f40 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	0e1b      	lsrs	r3, r3, #24
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e20:	2201      	movs	r2, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	409a      	lsls	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e3c:	68f9      	ldr	r1, [r7, #12]
 8000e3e:	6809      	ldr	r1, [r1, #0]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3318      	adds	r3, #24
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	440b      	add	r3, r1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e00f      	b.n	8000e6e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3318      	adds	r3, #24
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	440b      	add	r3, r1
 8000e6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3304      	adds	r3, #4
 8000e80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	7d1b      	ldrb	r3, [r3, #20]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d111      	bne.n	8000eae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3318      	adds	r3, #24
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4413      	add	r3, r2
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	6811      	ldr	r1, [r2, #0]
 8000e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3318      	adds	r3, #24
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3304      	adds	r3, #4
 8000eac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	061a      	lsls	r2, r3, #24
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3306      	adds	r3, #6
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3305      	adds	r3, #5
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	3204      	adds	r2, #4
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	ea43 0200 	orr.w	r2, r3, r0
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	440b      	add	r3, r1
 8000ee0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ee4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	061a      	lsls	r2, r3, #24
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4313      	orrs	r3, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	4610      	mov	r0, r2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	6811      	ldr	r1, [r2, #0]
 8000f0c:	ea43 0200 	orr.w	r2, r3, r0
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	440b      	add	r3, r1
 8000f16:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3318      	adds	r3, #24
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	6811      	ldr	r1, [r2, #0]
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3318      	adds	r3, #24
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	440b      	add	r3, r1
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e00e      	b.n	8000f5e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e006      	b.n	8000f5e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
  }
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d07c      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f983 	bl	80012d6 <HAL_CAN_TxMailbox0CompleteCallback>
 8000fd0:	e016      	b.n	8001000 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe4:	e00c      	b.n	8001000 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	e002      	b.n	8001000 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f986 	bl	800130c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	2b00      	cmp	r3, #0
 8001008:	d024      	beq.n	8001054 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001012:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f962 	bl	80012e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001024:	e016      	b.n	8001054 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	e00c      	b.n	8001054 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
 800104c:	e002      	b.n	8001054 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f965 	bl	800131e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d024      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001066:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f941 	bl	80012fa <HAL_CAN_TxMailbox2CompleteCallback>
 8001078:	e016      	b.n	80010a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
 800108c:	e00c      	b.n	80010a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
 80010a0:	e002      	b.n	80010a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f944 	bl	8001330 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00c      	beq.n	80010cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2210      	movs	r2, #16
 80010ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2208      	movs	r2, #8
 80010e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f933 	bl	8001354 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f91b 	bl	8001342 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00c      	beq.n	8001130 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2210      	movs	r2, #16
 800112e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2208      	movs	r2, #8
 800114a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f913 	bl	8001378 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f8fb 	bl	8001366 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00b      	beq.n	8001192 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2210      	movs	r2, #16
 800118a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f8fc 	bl	800138a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2208      	movs	r2, #8
 80011ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f8f4 	bl	800139c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d07b      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d072      	beq.n	80012ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001222:	2b00      	cmp	r3, #0
 8001224:	d043      	beq.n	80012ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03e      	beq.n	80012ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001236:	2b60      	cmp	r3, #96	; 0x60
 8001238:	d02b      	beq.n	8001292 <HAL_CAN_IRQHandler+0x32a>
 800123a:	2b60      	cmp	r3, #96	; 0x60
 800123c:	d82e      	bhi.n	800129c <HAL_CAN_IRQHandler+0x334>
 800123e:	2b50      	cmp	r3, #80	; 0x50
 8001240:	d022      	beq.n	8001288 <HAL_CAN_IRQHandler+0x320>
 8001242:	2b50      	cmp	r3, #80	; 0x50
 8001244:	d82a      	bhi.n	800129c <HAL_CAN_IRQHandler+0x334>
 8001246:	2b40      	cmp	r3, #64	; 0x40
 8001248:	d019      	beq.n	800127e <HAL_CAN_IRQHandler+0x316>
 800124a:	2b40      	cmp	r3, #64	; 0x40
 800124c:	d826      	bhi.n	800129c <HAL_CAN_IRQHandler+0x334>
 800124e:	2b30      	cmp	r3, #48	; 0x30
 8001250:	d010      	beq.n	8001274 <HAL_CAN_IRQHandler+0x30c>
 8001252:	2b30      	cmp	r3, #48	; 0x30
 8001254:	d822      	bhi.n	800129c <HAL_CAN_IRQHandler+0x334>
 8001256:	2b10      	cmp	r3, #16
 8001258:	d002      	beq.n	8001260 <HAL_CAN_IRQHandler+0x2f8>
 800125a:	2b20      	cmp	r3, #32
 800125c:	d005      	beq.n	800126a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800125e:	e01d      	b.n	800129c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001268:	e019      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001272:	e014      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800127c:	e00f      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001286:	e00a      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001290:	e005      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800129a:	e000      	b.n	800129e <HAL_CAN_IRQHandler+0x336>
            break;
 800129c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f870 	bl	80013ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4906      	ldr	r1, [pc, #24]	; (8001458 <__NVIC_EnableIRQ+0x34>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff90 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff2d 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff42 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff90 	bl	80014b0 <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5f 	bl	800145c <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff35 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	; 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e169      	b.n	80018c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f0:	2201      	movs	r2, #1
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8158 	bne.w	80018be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a9a      	ldr	r2, [pc, #616]	; (800187c <HAL_GPIO_Init+0x2a0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05e      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001618:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d875      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800161e:	4a98      	ldr	r2, [pc, #608]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d058      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001624:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d86f      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800162a:	4a96      	ldr	r2, [pc, #600]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d052      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001630:	4a94      	ldr	r2, [pc, #592]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d869      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001636:	4a94      	ldr	r2, [pc, #592]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d04c      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 800163c:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d863      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001642:	4a92      	ldr	r2, [pc, #584]	; (800188c <HAL_GPIO_Init+0x2b0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d046      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001648:	4a90      	ldr	r2, [pc, #576]	; (800188c <HAL_GPIO_Init+0x2b0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d85d      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d82a      	bhi.n	80016a8 <HAL_GPIO_Init+0xcc>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d859      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_GPIO_Init+0x80>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016c3 	.word	0x080016c3
 8001668:	08001705 	.word	0x08001705
 800166c:	0800170b 	.word	0x0800170b
 8001670:	0800170b 	.word	0x0800170b
 8001674:	0800170b 	.word	0x0800170b
 8001678:	0800170b 	.word	0x0800170b
 800167c:	0800170b 	.word	0x0800170b
 8001680:	0800170b 	.word	0x0800170b
 8001684:	0800170b 	.word	0x0800170b
 8001688:	0800170b 	.word	0x0800170b
 800168c:	0800170b 	.word	0x0800170b
 8001690:	0800170b 	.word	0x0800170b
 8001694:	0800170b 	.word	0x0800170b
 8001698:	0800170b 	.word	0x0800170b
 800169c:	0800170b 	.word	0x0800170b
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	4a79      	ldr	r2, [pc, #484]	; (8001890 <HAL_GPIO_Init+0x2b4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e029      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e024      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e01f      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e01a      	b.n	800170c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e013      	b.n	800170c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
          break;
 80016f6:	e009      	b.n	800170c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
          break;
 8001702:	e003      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x130>
          break;
 800170a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d801      	bhi.n	8001716 <HAL_GPIO_Init+0x13a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	e001      	b.n	800171a <HAL_GPIO_Init+0x13e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d802      	bhi.n	8001728 <HAL_GPIO_Init+0x14c>
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x152>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3b08      	subs	r3, #8
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	210f      	movs	r1, #15
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80b1 	beq.w	80018be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001774:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <HAL_GPIO_Init+0x2c0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <HAL_GPIO_Init+0x2c4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00d      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017bc:	2304      	movs	r3, #4
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c8:	2300      	movs	r3, #0
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017da:	492f      	ldr	r1, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	492c      	ldr	r1, [pc, #176]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4928      	ldr	r1, [pc, #160]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	491e      	ldr	r1, [pc, #120]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4918      	ldr	r1, [pc, #96]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4914      	ldr	r1, [pc, #80]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d021      	beq.n	80018b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e021      	b.n	80018be <HAL_GPIO_Init+0x2e2>
 800187a:	bf00      	nop
 800187c:	10320000 	.word	0x10320000
 8001880:	10310000 	.word	0x10310000
 8001884:	10220000 	.word	0x10220000
 8001888:	10210000 	.word	0x10210000
 800188c:	10120000 	.word	0x10120000
 8001890:	10110000 	.word	0x10110000
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000
 800189c:	40010800 	.word	0x40010800
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40011400 	.word	0x40011400
 80018ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f ae8e 	bne.w	80015f0 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	372c      	adds	r7, #44	; 0x2c
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43d9      	mvns	r1, r3
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	400b      	ands	r3, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	611a      	str	r2, [r3, #16]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
	...

08001948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fbf0 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e272      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8087 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d00c      	beq.n	80019be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d112      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
 80019b0:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d10b      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d06c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d168      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e24c      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x76>
 80019e0:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a7f      	ldr	r2, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e02e      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x98>
 80019f6:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b78      	ldr	r3, [pc, #480]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a77      	ldr	r2, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e01d      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0xbc>
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a71      	ldr	r2, [pc, #452]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a34:	4b6b      	ldr	r3, [pc, #428]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6a      	ldr	r2, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f870 	bl	8000b38 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f86c 	bl	8000b38 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e200      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe4>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f85c 	bl	8000b38 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f858 	bl	8000b38 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1ec      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x10c>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d063      	beq.n	8001b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1c0      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4939      	ldr	r1, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f811 	bl	8000b38 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f80d 	bl	8000b38 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1a1      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4927      	ldr	r1, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe fff0 	bl	8000b38 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe ffec 	bl	8000b38 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e180      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03a      	beq.n	8001bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d019      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7fe ffd0 	bl	8000b38 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe ffcc 	bl	8000b38 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e160      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 fa9c 	bl	80020f8 <RCC_Delay>
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe ffb6 	bl	8000b38 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe ffb2 	bl	8000b38 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d908      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e146      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	42420000 	.word	0x42420000
 8001bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e9      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a6 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a87      	ldr	r2, [pc, #540]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7e      	ldr	r2, [pc, #504]	; (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ff73 	bl	8000b38 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe ff6f 	bl	8000b38 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e103      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x4c8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x312>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x334>
 8001c92:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a69      	ldr	r2, [pc, #420]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x356>
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a60      	ldr	r2, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cce:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe ff23 	bl	8000b38 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ff1f 	bl	8000b38 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0b1      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x37e>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ff0d 	bl	8000b38 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe ff09 	bl	8000b38 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e09b      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d061      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d146      	bne.n	8001e02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fedd 	bl	8000b38 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fed9 	bl	8000b38 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e06d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4921      	ldr	r1, [pc, #132]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a19      	ldr	r1, [r3, #32]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	491b      	ldr	r1, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fead 	bl	8000b38 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe fea9 	bl	8000b38 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e03d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46a>
 8001e00:	e035      	b.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe96 	bl	8000b38 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fe92 	bl	8000b38 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e026      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x498>
 8001e2e:	e01e      	b.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e019      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_OscConfig+0x500>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4965      	ldr	r1, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fde4 	bl	8000b38 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fde0 	bl	8000b38 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fd42 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08002fb0 	.word	0x08002fb0
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 800207e:	e027      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e027      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0c5b      	lsrs	r3, r3, #17
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e004      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d2:	613b      	str	r3, [r7, #16]
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	693b      	ldr	r3, [r7, #16]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	08002fc0 	.word	0x08002fc0
 80020f0:	08002fd0 	.word	0x08002fd0
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <RCC_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <RCC_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002114:	bf00      	nop
  }
  while (Delay --);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <RCC_Delay+0x1c>
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000000 	.word	0x20000000
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fb76 	bl	800084c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fbe2 	bl	800293c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e041      	b.n	8002268 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f839 	bl	8002270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f000 fb93 	bl	800293c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
	...

08002284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_TIM_PWM_Start+0x24>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e022      	b.n	80022ee <HAL_TIM_PWM_Start+0x6a>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d109      	bne.n	80022c2 <HAL_TIM_PWM_Start+0x3e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	e015      	b.n	80022ee <HAL_TIM_PWM_Start+0x6a>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d109      	bne.n	80022dc <HAL_TIM_PWM_Start+0x58>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e008      	b.n	80022ee <HAL_TIM_PWM_Start+0x6a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e05e      	b.n	80023b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_PWM_Start+0x82>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002304:	e013      	b.n	800232e <HAL_TIM_PWM_Start+0xaa>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0x92>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002314:	e00b      	b.n	800232e <HAL_TIM_PWM_Start+0xaa>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start+0xa2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002324:	e003      	b.n	800232e <HAL_TIM_PWM_Start+0xaa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fd80 	bl	8002e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_TIM_PWM_Start+0x138>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d107      	bne.n	8002356 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_PWM_Start+0x138>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_TIM_PWM_Start+0xfa>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002368:	d009      	beq.n	800237e <HAL_TIM_PWM_Start+0xfa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <HAL_TIM_PWM_Start+0x13c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_TIM_PWM_Start+0xfa>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_PWM_Start+0x140>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d111      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d010      	beq.n	80023b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a0:	e007      	b.n	80023b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800

080023c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e093      	b.n	8002504 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7fe fa47 	bl	8000884 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240c:	f023 0307 	bic.w	r3, r3, #7
 8002410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 fa8d 	bl	800293c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	4313      	orrs	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002468:	f023 030c 	bic.w	r3, r3, #12
 800246c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4313      	orrs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	011a      	lsls	r2, r3, #4
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	031b      	lsls	r3, r3, #12
 8002498:	4313      	orrs	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4313      	orrs	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002524:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800252c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002534:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e069      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	e031      	b.n	80025c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d110      	bne.n	8002586 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e055      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002584:	e01d      	b.n	80025c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002598:	7b3b      	ldrb	r3, [r7, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e03e      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_TIM_Encoder_Start+0xc4>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d008      	beq.n	80025e0 <HAL_TIM_Encoder_Start+0xd4>
 80025ce:	e00f      	b.n	80025f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fc2f 	bl	8002e3c <TIM_CCxChannelCmd>
      break;
 80025de:	e016      	b.n	800260e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	2104      	movs	r1, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fc27 	bl	8002e3c <TIM_CCxChannelCmd>
      break;
 80025ee:	e00e      	b.n	800260e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fc1f 	bl	8002e3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	2104      	movs	r1, #4
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fc18 	bl	8002e3c <TIM_CCxChannelCmd>
      break;
 800260c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002642:	2302      	movs	r3, #2
 8002644:	e0ae      	b.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f200 809f 	bhi.w	8002794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002691 	.word	0x08002691
 8002660:	08002795 	.word	0x08002795
 8002664:	08002795 	.word	0x08002795
 8002668:	08002795 	.word	0x08002795
 800266c:	080026d1 	.word	0x080026d1
 8002670:	08002795 	.word	0x08002795
 8002674:	08002795 	.word	0x08002795
 8002678:	08002795 	.word	0x08002795
 800267c:	08002713 	.word	0x08002713
 8002680:	08002795 	.word	0x08002795
 8002684:	08002795 	.word	0x08002795
 8002688:	08002795 	.word	0x08002795
 800268c:	08002753 	.word	0x08002753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f9b2 	bl	8002a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6999      	ldr	r1, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	619a      	str	r2, [r3, #24]
      break;
 80026ce:	e064      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9f8 	bl	8002acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6999      	ldr	r1, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	021a      	lsls	r2, r3, #8
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
      break;
 8002710:	e043      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa41 	bl	8002ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0208 	orr.w	r2, r2, #8
 800272c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0204 	bic.w	r2, r2, #4
 800273c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69d9      	ldr	r1, [r3, #28]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
      break;
 8002750:	e023      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa8b 	bl	8002c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69d9      	ldr	r1, [r3, #28]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	61da      	str	r2, [r3, #28]
      break;
 8002792:	e002      	b.n	800279a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
      break;
 8002798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_ConfigClockSource+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0b4      	b.n	8002932 <HAL_TIM_ConfigClockSource+0x186>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002800:	d03e      	beq.n	8002880 <HAL_TIM_ConfigClockSource+0xd4>
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	f200 8087 	bhi.w	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	f000 8086 	beq.w	800291e <HAL_TIM_ConfigClockSource+0x172>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d87f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d01a      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xa6>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d87b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d050      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d877      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d03c      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0xfa>
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d873      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d058      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d86f      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d064      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d86b      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d060      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d867      	bhi.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d05a      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	e062      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	f000 facc 	bl	8002dfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	609a      	str	r2, [r3, #8]
      break;
 800287e:	e04f      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002890:	f000 fab5 	bl	8002dfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a2:	609a      	str	r2, [r3, #8]
      break;
 80028a4:	e03c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 fa2c 	bl	8002d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2150      	movs	r1, #80	; 0x50
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa83 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 80028c4:	e02c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 fa4a 	bl	8002d6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2160      	movs	r1, #96	; 0x60
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa73 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 80028e4:	e01c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 fa0c 	bl	8002d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2140      	movs	r1, #64	; 0x40
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa63 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002904:	e00c      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f000 fa5a 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002916:	e003      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      break;
 800291c:	e000      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800291e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <TIM_Base_SetConfig+0xb8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00b      	beq.n	800296c <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d007      	beq.n	800296c <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <TIM_Base_SetConfig+0xbc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <TIM_Base_SetConfig+0xc0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <TIM_Base_SetConfig+0xb8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00b      	beq.n	800299e <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d007      	beq.n	800299e <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <TIM_Base_SetConfig+0xbc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d003      	beq.n	800299e <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a18      	ldr	r2, [pc, #96]	; (80029fc <TIM_Base_SetConfig+0xc0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d108      	bne.n	80029b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <TIM_Base_SetConfig+0xb8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d103      	bne.n	80029e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	615a      	str	r2, [r3, #20]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800

08002a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0201 	bic.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f023 0302 	bic.w	r3, r3, #2
 8002a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <TIM_OC1_SetConfig+0xc8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d10c      	bne.n	8002a76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0308 	bic.w	r3, r3, #8
 8002a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <TIM_OC1_SetConfig+0xc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	621a      	str	r2, [r3, #32]
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00

08002acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 0210 	bic.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0320 	bic.w	r3, r3, #32
 8002b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <TIM_OC2_SetConfig+0xd0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10d      	bne.n	8002b48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <TIM_OC2_SetConfig+0xd0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d113      	bne.n	8002b78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00

08002ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <TIM_OC3_SetConfig+0xd0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10d      	bne.n	8002c1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <TIM_OC3_SetConfig+0xd0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d113      	bne.n	8002c4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	621a      	str	r2, [r3, #32]
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00

08002c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	031b      	lsls	r3, r3, #12
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0f      	ldr	r2, [pc, #60]	; (8002d0c <TIM_OC4_SetConfig+0x98>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d109      	bne.n	8002ce8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00

08002d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f023 0201 	bic.w	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f023 030a 	bic.w	r3, r3, #10
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0210 	bic.w	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	031b      	lsls	r3, r3, #12
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	621a      	str	r2, [r3, #32]
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f043 0307 	orr.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	609a      	str	r2, [r3, #8]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2201      	movs	r2, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e046      	b.n	8002f2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d009      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10c      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800

08002f40 <memset>:
 8002f40:	4603      	mov	r3, r0
 8002f42:	4402      	add	r2, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <__libc_init_array>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2600      	movs	r6, #0
 8002f54:	4d0c      	ldr	r5, [pc, #48]	; (8002f88 <__libc_init_array+0x38>)
 8002f56:	4c0d      	ldr	r4, [pc, #52]	; (8002f8c <__libc_init_array+0x3c>)
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	42a6      	cmp	r6, r4
 8002f5e:	d109      	bne.n	8002f74 <__libc_init_array+0x24>
 8002f60:	f000 f81a 	bl	8002f98 <_init>
 8002f64:	2600      	movs	r6, #0
 8002f66:	4d0a      	ldr	r5, [pc, #40]	; (8002f90 <__libc_init_array+0x40>)
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <__libc_init_array+0x44>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	42a6      	cmp	r6, r4
 8002f70:	d105      	bne.n	8002f7e <__libc_init_array+0x2e>
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f78:	4798      	blx	r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	e7ee      	b.n	8002f5c <__libc_init_array+0xc>
 8002f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f82:	4798      	blx	r3
 8002f84:	3601      	adds	r6, #1
 8002f86:	e7f2      	b.n	8002f6e <__libc_init_array+0x1e>
 8002f88:	08002fd4 	.word	0x08002fd4
 8002f8c:	08002fd4 	.word	0x08002fd4
 8002f90:	08002fd4 	.word	0x08002fd4
 8002f94:	08002fd8 	.word	0x08002fd8

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
