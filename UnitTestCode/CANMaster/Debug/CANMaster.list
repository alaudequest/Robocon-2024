
CANMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002024  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002168  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002168  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004a52  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000131a  00000000  00000000  00024aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c7  00000000  00000000  00026318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016991  00000000  00000000  000266df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d90  00000000  00000000  0003d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081c43  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001374  00000000  00000000  000c4a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c5db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002118 	.word	0x08002118

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002118 	.word	0x08002118

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t txdata[8];
uint8_t rxdata[8];
uint32_t TxMailBox;
uint8_t flag = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxdata);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000156:	4a09      	ldr	r2, [pc, #36]	; (800017c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000158:	2100      	movs	r1, #0
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 fda5 	bl	8000caa <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 2){
 8000160:	4b06      	ldr	r3, [pc, #24]	; (800017c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000162:	691b      	ldr	r3, [r3, #16]
 8000164:	2b02      	cmp	r3, #2
 8000166:	d102      	bne.n	800016e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		flag = 1;
 8000168:	4b05      	ldr	r3, [pc, #20]	; (8000180 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
	}
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000008c 	.word	0x2000008c
 800017c:	20000068 	.word	0x20000068
 8000180:	20000098 	.word	0x20000098

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b08a      	sub	sp, #40	; 0x28
 8000188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f000 fa31 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018e:	f000 f85d 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000192:	f000 f8d7 	bl	8000344 <MX_GPIO_Init>
  MX_CAN_Init();
 8000196:	f000 f89f 	bl	80002d8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800019a:	2301      	movs	r3, #1
 800019c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800019e:	230a      	movs	r3, #10
 80001a0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103 << 5;
 80001a6:	f242 0360 	movw	r3, #8288	; 0x2060
 80001aa:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80001ac:	2300      	movs	r3, #0
 80001ae:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103 << 5;
 80001b0:	f242 0360 	movw	r3, #8288	; 0x2060
 80001b4:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80001b6:	2300      	movs	r3, #0
 80001b8:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001be:	2301      	movs	r3, #1
 80001c0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80001c6:	463b      	mov	r3, r7
 80001c8:	4619      	mov	r1, r3
 80001ca:	481a      	ldr	r0, [pc, #104]	; (8000234 <main+0xb0>)
 80001cc:	f000 fb91 	bl	80008f2 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80001d0:	4818      	ldr	r0, [pc, #96]	; (8000234 <main+0xb0>)
 80001d2:	f000 fc57 	bl	8000a84 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001d6:	2102      	movs	r1, #2
 80001d8:	4816      	ldr	r0, [pc, #88]	; (8000234 <main+0xb0>)
 80001da:	f000 fe87 	bl	8000eec <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 80001de:	4b16      	ldr	r3, [pc, #88]	; (8000238 <main+0xb4>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <main+0xb4>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80001ea:	4b13      	ldr	r3, [pc, #76]	; (8000238 <main+0xb4>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <main+0xb4>)
 80001f2:	f240 1203 	movw	r2, #259	; 0x103
 80001f6:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <main+0xb4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	751a      	strb	r2, [r3, #20]

  txdata[0] = 0xf1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <main+0xb8>)
 8000200:	22f1      	movs	r2, #241	; 0xf1
 8000202:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, &TxMailBox);
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <main+0xbc>)
 8000206:	4a0d      	ldr	r2, [pc, #52]	; (800023c <main+0xb8>)
 8000208:	490b      	ldr	r1, [pc, #44]	; (8000238 <main+0xb4>)
 800020a:	480a      	ldr	r0, [pc, #40]	; (8000234 <main+0xb0>)
 800020c:	f000 fc7e 	bl	8000b0c <HAL_CAN_AddTxMessage>
	  if(flag == 1){
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0xc0>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b01      	cmp	r3, #1
 8000216:	d107      	bne.n	8000228 <main+0xa4>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	480a      	ldr	r0, [pc, #40]	; (8000248 <main+0xc4>)
 800021e:	f001 fb57 	bl	80018d0 <HAL_GPIO_TogglePin>
		  flag = 0;
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0xc0>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 fa42 	bl	80006b4 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, &TxMailBox);
 8000230:	e7e8      	b.n	8000204 <main+0x80>
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028
 8000238:	20000050 	.word	0x20000050
 800023c:	20000084 	.word	0x20000084
 8000240:	20000094 	.word	0x20000094
 8000244:	20000098 	.word	0x20000098
 8000248:	40011000 	.word	0x40011000

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 ff30 	bl	80020c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fb35 	bl	8001904 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 f8a8 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fda2 	bl	8001e08 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f893 	bl	80003f4 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_CAN_Init+0x64>)
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <MX_CAN_Init+0x68>)
 80002e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_CAN_Init+0x64>)
 80002e4:	2212      	movs	r2, #18
 80002e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_CAN_Init+0x64>)
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ee:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_CAN_Init+0x64>)
 80002fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000302:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <MX_CAN_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_CAN_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_CAN_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_CAN_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_CAN_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_CAN_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_CAN_Init+0x64>)
 800032a:	f000 f9e7 	bl	80006fc <HAL_CAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000334:	f000 f85e 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000028 	.word	0x20000028
 8000340:	40006400 	.word	0x40006400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a23      	ldr	r2, [pc, #140]	; (80003ec <MX_GPIO_Init+0xa8>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <MX_GPIO_Init+0xa8>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <MX_GPIO_Init+0xa8>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <MX_GPIO_Init+0xac>)
 80003c0:	f001 fa6e 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <MX_GPIO_Init+0xac>)
 80003de:	f001 f8db 	bl	8001598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40011000 	.word	0x40011000

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>
	...

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a14      	ldr	r2, [pc, #80]	; (800045c <HAL_MspInit+0x5c>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <HAL_MspInit+0x5c>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_MspInit+0x60>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_MspInit+0x60>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a29      	ldr	r2, [pc, #164]	; (8000524 <HAL_CAN_MspInit+0xc0>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d14b      	bne.n	800051c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a27      	ldr	r2, [pc, #156]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b25      	ldr	r3, [pc, #148]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000498:	613b      	str	r3, [r7, #16]
 800049a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b22      	ldr	r3, [pc, #136]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a21      	ldr	r2, [pc, #132]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <HAL_CAN_MspInit+0xc4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4818      	ldr	r0, [pc, #96]	; (800052c <HAL_CAN_MspInit+0xc8>)
 80004ca:	f001 f865 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <HAL_CAN_MspInit+0xc8>)
 80004e4:	f001 f858 	bl	8001598 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_CAN_MspInit+0xcc>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
 80004ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
 80004f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000504:	627b      	str	r3, [r7, #36]	; 0x24
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <HAL_CAN_MspInit+0xcc>)
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2014      	movs	r0, #20
 8000512:	f001 f80a 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000516:	2014      	movs	r0, #20
 8000518:	f001 f823 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	; 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40006400 	.word	0x40006400
 8000528:	40021000 	.word	0x40021000
 800052c:	40010c00 	.word	0x40010c00
 8000530:	40010000 	.word	0x40010000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057a:	f000 f87f 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800058a:	f000 fcd4 	bl	8000f36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff fff8 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005aa:	490c      	ldr	r1, [pc, #48]	; (80005dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c0:	4c09      	ldr	r4, [pc, #36]	; (80005e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f001 fd7f 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fdd7 	bl	8000184 <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e0:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e8:	200000a0 	.word	0x200000a0

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 ff87 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	200f      	movs	r0, #15
 8000608:	f000 f808 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff fef8 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff9f 	bl	800157e <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 ff67 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <HAL_IncTick+0x20>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000008 	.word	0x20000008
 800069c:	2000009c 	.word	0x2000009c

080006a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	2000009c 	.word	0x2000009c

080006b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff fff0 	bl	80006a0 <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffe0 	bl	80006a0 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e0ed      	b.n	80008ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d102      	bne.n	8000720 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fea2 	bl	8000464 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000730:	f7ff ffb6 	bl	80006a0 <HAL_GetTick>
 8000734:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000736:	e012      	b.n	800075e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000738:	f7ff ffb2 	bl	80006a0 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d90b      	bls.n	800075e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2205      	movs	r2, #5
 8000756:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0c5      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0e5      	beq.n	8000738 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0202 	bic.w	r2, r2, #2
 800077a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800077c:	f7ff ff90 	bl	80006a0 <HAL_GetTick>
 8000780:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000782:	e012      	b.n	80007aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000784:	f7ff ff8c 	bl	80006a0 <HAL_GetTick>
 8000788:	4602      	mov	r2, r0
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	2b0a      	cmp	r3, #10
 8000790:	d90b      	bls.n	80007aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2205      	movs	r2, #5
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e09f      	b.n	80008ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e5      	bne.n	8000784 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7e5b      	ldrb	r3, [r3, #25]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d108      	bne.n	80007fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e007      	b.n	800080c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e9b      	ldrb	r3, [r3, #26]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d108      	bne.n	8000826 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0220 	orr.w	r2, r2, #32
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e007      	b.n	8000836 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 0220 	bic.w	r2, r2, #32
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7edb      	ldrb	r3, [r3, #27]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0210 	bic.w	r2, r2, #16
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e007      	b.n	8000860 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f042 0210 	orr.w	r2, r2, #16
 800085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7f1b      	ldrb	r3, [r3, #28]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0208 	orr.w	r2, r2, #8
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e007      	b.n	800088a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0208 	bic.w	r2, r2, #8
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7f5b      	ldrb	r3, [r3, #29]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d108      	bne.n	80008a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0204 	orr.w	r2, r2, #4
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e007      	b.n	80008b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0204 	bic.w	r2, r2, #4
 80008b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	ea42 0103 	orr.w	r1, r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2201      	movs	r2, #1
 80008e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b087      	sub	sp, #28
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000908:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800090a:	7cfb      	ldrb	r3, [r7, #19]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d003      	beq.n	8000918 <HAL_CAN_ConfigFilter+0x26>
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	2b02      	cmp	r3, #2
 8000914:	f040 80aa 	bne.w	8000a6c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800091e:	f043 0201 	orr.w	r2, r3, #1
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f003 031f 	and.w	r3, r3, #31
 8000930:	2201      	movs	r2, #1
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	43db      	mvns	r3, r3
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d123      	bne.n	800099a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43db      	mvns	r3, r3
 800095c:	401a      	ands	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000974:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3248      	adds	r2, #72	; 0x48
 800097a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800098e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000990:	6979      	ldr	r1, [r7, #20]
 8000992:	3348      	adds	r3, #72	; 0x48
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d122      	bne.n	80009e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3248      	adds	r2, #72	; 0x48
 80009c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009de:	6979      	ldr	r1, [r7, #20]
 80009e0:	3348      	adds	r3, #72	; 0x48
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a02:	e007      	b.n	8000a14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d109      	bne.n	8000a30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a2e:	e007      	b.n	8000a40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d107      	bne.n	8000a58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	431a      	orrs	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a5e:	f023 0201 	bic.w	r2, r3, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e006      	b.n	8000a7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
  }
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	371c      	adds	r7, #28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d12e      	bne.n	8000af6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0201 	bic.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ab0:	f7ff fdf6 	bl	80006a0 <HAL_GetTick>
 8000ab4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ab6:	e012      	b.n	8000ade <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab8:	f7ff fdf2 	bl	80006a0 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b0a      	cmp	r3, #10
 8000ac4:	d90b      	bls.n	8000ade <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e012      	b.n	8000b04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1e5      	bne.n	8000ab8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e006      	b.n	8000b04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
  }
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d003      	beq.n	8000b38 <HAL_CAN_AddTxMessage+0x2c>
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	f040 80ad 	bne.w	8000c92 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10a      	bne.n	8000b58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 8095 	beq.w	8000c82 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	0e1b      	lsrs	r3, r3, #24
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10d      	bne.n	8000b90 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b7e:	68f9      	ldr	r1, [r7, #12]
 8000b80:	6809      	ldr	r1, [r1, #0]
 8000b82:	431a      	orrs	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3318      	adds	r3, #24
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	440b      	add	r3, r1
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e00f      	b.n	8000bb0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ba4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3318      	adds	r3, #24
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	440b      	add	r3, r1
 8000bae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3318      	adds	r3, #24
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	7d1b      	ldrb	r3, [r3, #20]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d111      	bne.n	8000bf0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3304      	adds	r3, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	6811      	ldr	r1, [r2, #0]
 8000be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3318      	adds	r3, #24
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	440b      	add	r3, r1
 8000bec:	3304      	adds	r3, #4
 8000bee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3307      	adds	r3, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	061a      	lsls	r2, r3, #24
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	041b      	lsls	r3, r3, #16
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3305      	adds	r3, #5
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	3204      	adds	r2, #4
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	4610      	mov	r0, r2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	6811      	ldr	r1, [r2, #0]
 8000c18:	ea43 0200 	orr.w	r2, r3, r0
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	440b      	add	r3, r1
 8000c22:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3303      	adds	r3, #3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	061a      	lsls	r2, r3, #24
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3302      	adds	r3, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	4313      	orrs	r3, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	4610      	mov	r0, r2
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	6811      	ldr	r1, [r2, #0]
 8000c4e:	ea43 0200 	orr.w	r2, r3, r0
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	440b      	add	r3, r1
 8000c58:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000c5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3318      	adds	r3, #24
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	4413      	add	r3, r2
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	6811      	ldr	r1, [r2, #0]
 8000c70:	f043 0201 	orr.w	r2, r3, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3318      	adds	r3, #24
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	440b      	add	r3, r1
 8000c7c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e00e      	b.n	8000ca0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e006      	b.n	8000ca0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
  }
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3724      	adds	r7, #36	; 0x24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000caa:	b480      	push	{r7}
 8000cac:	b087      	sub	sp, #28
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d003      	beq.n	8000cce <HAL_CAN_GetRxMessage+0x24>
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	f040 8103 	bne.w	8000ed4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10e      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d116      	bne.n	8000d10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0f7      	b.n	8000ee2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d107      	bne.n	8000d10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e0e8      	b.n	8000ee2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	331b      	adds	r3, #27
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0204 	and.w	r2, r3, #4
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	331b      	adds	r3, #27
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0d5b      	lsrs	r3, r3, #21
 8000d3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	331b      	adds	r3, #27
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	331b      	adds	r3, #27
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4413      	add	r3, r2
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0202 	and.w	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	331b      	adds	r3, #27
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2208      	movs	r2, #8
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	e00b      	b.n	8000dae <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	331b      	adds	r3, #27
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4413      	add	r3, r2
 8000da2:	3304      	adds	r3, #4
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 020f 	and.w	r2, r3, #15
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	331b      	adds	r3, #27
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4413      	add	r3, r2
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	331b      	adds	r3, #27
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4413      	add	r3, r2
 8000de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0a1a      	lsrs	r2, r3, #8
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4413      	add	r3, r2
 8000e18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0c1a      	lsrs	r2, r3, #16
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3302      	adds	r3, #2
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0e1a      	lsrs	r2, r3, #24
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3303      	adds	r3, #3
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	4413      	add	r3, r2
 8000e4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3304      	adds	r3, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	0a1a      	lsrs	r2, r3, #8
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	3305      	adds	r3, #5
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0c1a      	lsrs	r2, r3, #16
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3306      	adds	r3, #6
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0e1a      	lsrs	r2, r3, #24
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3307      	adds	r3, #7
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d108      	bne.n	8000ec0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0220 	orr.w	r2, r2, #32
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	e007      	b.n	8000ed0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e006      	b.n	8000ee2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d002      	beq.n	8000f0a <HAL_CAN_ActivateNotification+0x1e>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d109      	bne.n	8000f1e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6959      	ldr	r1, [r3, #20]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e006      	b.n	8000f2c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
  }
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b08a      	sub	sp, #40	; 0x28
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d07c      	beq.n	8001076 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d023      	beq.n	8000fce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f983 	bl	80012a4 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f9e:	e016      	b.n	8000fce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb2:	e00c      	b.n	8000fce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc6:	e002      	b.n	8000fce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f986 	bl	80012da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d024      	beq.n	8001022 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f962 	bl	80012b6 <HAL_CAN_TxMailbox1CompleteCallback>
 8000ff2:	e016      	b.n	8001022 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
 8001006:	e00c      	b.n	8001022 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
 800101a:	e002      	b.n	8001022 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f965 	bl	80012ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d024      	beq.n	8001076 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f941 	bl	80012c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001046:	e016      	b.n	8001076 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
 800105a:	e00c      	b.n	8001076 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	e002      	b.n	8001076 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f944 	bl	80012fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001090:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2210      	movs	r2, #16
 8001098:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2208      	movs	r2, #8
 80010b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f92a 	bl	8001310 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d009      	beq.n	80010da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f839 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00c      	beq.n	80010fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2210      	movs	r2, #16
 80010fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00b      	beq.n	8001120 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2208      	movs	r2, #8
 8001118:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f90a 	bl	8001334 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f8f2 	bl	8001322 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2210      	movs	r2, #16
 8001158:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8f3 	bl	8001346 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2208      	movs	r2, #8
 800117a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8eb 	bl	8001358 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d07b      	beq.n	8001284 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	2b00      	cmp	r3, #0
 8001194:	d072      	beq.n	800127c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d043      	beq.n	800127c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03e      	beq.n	800127c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001204:	2b60      	cmp	r3, #96	; 0x60
 8001206:	d02b      	beq.n	8001260 <HAL_CAN_IRQHandler+0x32a>
 8001208:	2b60      	cmp	r3, #96	; 0x60
 800120a:	d82e      	bhi.n	800126a <HAL_CAN_IRQHandler+0x334>
 800120c:	2b50      	cmp	r3, #80	; 0x50
 800120e:	d022      	beq.n	8001256 <HAL_CAN_IRQHandler+0x320>
 8001210:	2b50      	cmp	r3, #80	; 0x50
 8001212:	d82a      	bhi.n	800126a <HAL_CAN_IRQHandler+0x334>
 8001214:	2b40      	cmp	r3, #64	; 0x40
 8001216:	d019      	beq.n	800124c <HAL_CAN_IRQHandler+0x316>
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d826      	bhi.n	800126a <HAL_CAN_IRQHandler+0x334>
 800121c:	2b30      	cmp	r3, #48	; 0x30
 800121e:	d010      	beq.n	8001242 <HAL_CAN_IRQHandler+0x30c>
 8001220:	2b30      	cmp	r3, #48	; 0x30
 8001222:	d822      	bhi.n	800126a <HAL_CAN_IRQHandler+0x334>
 8001224:	2b10      	cmp	r3, #16
 8001226:	d002      	beq.n	800122e <HAL_CAN_IRQHandler+0x2f8>
 8001228:	2b20      	cmp	r3, #32
 800122a:	d005      	beq.n	8001238 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800122c:	e01d      	b.n	800126a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001236:	e019      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001240:	e014      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800124a:	e00f      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001254:	e00a      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800125e:	e005      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001268:	e000      	b.n	800126c <HAL_CAN_IRQHandler+0x336>
            break;
 800126a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800127a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2204      	movs	r2, #4
 8001282:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f867 	bl	800136a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff2d 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff42 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff35 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e169      	b.n	8001880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ac:	2201      	movs	r2, #1
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8158 	bne.w	800187a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d05e      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015d4:	4a98      	ldr	r2, [pc, #608]	; (8001838 <HAL_GPIO_Init+0x2a0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d875      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015da:	4a98      	ldr	r2, [pc, #608]	; (800183c <HAL_GPIO_Init+0x2a4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d058      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015e0:	4a96      	ldr	r2, [pc, #600]	; (800183c <HAL_GPIO_Init+0x2a4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d86f      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015e6:	4a96      	ldr	r2, [pc, #600]	; (8001840 <HAL_GPIO_Init+0x2a8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d052      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015ec:	4a94      	ldr	r2, [pc, #592]	; (8001840 <HAL_GPIO_Init+0x2a8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d869      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015f2:	4a94      	ldr	r2, [pc, #592]	; (8001844 <HAL_GPIO_Init+0x2ac>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d04c      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 80015f8:	4a92      	ldr	r2, [pc, #584]	; (8001844 <HAL_GPIO_Init+0x2ac>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d863      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 80015fe:	4a92      	ldr	r2, [pc, #584]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d046      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
 8001604:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d85d      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d82a      	bhi.n	8001664 <HAL_GPIO_Init+0xcc>
 800160e:	2b12      	cmp	r3, #18
 8001610:	d859      	bhi.n	80016c6 <HAL_GPIO_Init+0x12e>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <HAL_GPIO_Init+0x80>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001693 	.word	0x08001693
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800167f 	.word	0x0800167f
 8001624:	080016c1 	.word	0x080016c1
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016c7 	.word	0x080016c7
 800165c:	08001675 	.word	0x08001675
 8001660:	08001689 	.word	0x08001689
 8001664:	4a79      	ldr	r2, [pc, #484]	; (800184c <HAL_GPIO_Init+0x2b4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800166a:	e02c      	b.n	80016c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e029      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e024      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	3308      	adds	r3, #8
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e01f      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	330c      	adds	r3, #12
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e01a      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169a:	2304      	movs	r3, #4
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e013      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a8:	2308      	movs	r3, #8
 80016aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	611a      	str	r2, [r3, #16]
          break;
 80016b2:	e009      	b.n	80016c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	615a      	str	r2, [r3, #20]
          break;
 80016be:	e003      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x130>
          break;
 80016c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2bff      	cmp	r3, #255	; 0xff
 80016cc:	d801      	bhi.n	80016d2 <HAL_GPIO_Init+0x13a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_Init+0x13e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d802      	bhi.n	80016e4 <HAL_GPIO_Init+0x14c>
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x152>
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	3b08      	subs	r3, #8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	210f      	movs	r1, #15
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	6a39      	ldr	r1, [r7, #32]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	431a      	orrs	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80b1 	beq.w	800187a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a40      	ldr	r2, [pc, #256]	; (8001858 <HAL_GPIO_Init+0x2c0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d013      	beq.n	8001784 <HAL_GPIO_Init+0x1ec>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3f      	ldr	r2, [pc, #252]	; (800185c <HAL_GPIO_Init+0x2c4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00d      	beq.n	8001780 <HAL_GPIO_Init+0x1e8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <HAL_GPIO_Init+0x2c8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d007      	beq.n	800177c <HAL_GPIO_Init+0x1e4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3d      	ldr	r2, [pc, #244]	; (8001864 <HAL_GPIO_Init+0x2cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_GPIO_Init+0x1e0>
 8001774:	2303      	movs	r3, #3
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001778:	2304      	movs	r3, #4
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 800177c:	2302      	movs	r3, #2
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x1ee>
 8001784:	2300      	movs	r3, #0
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001796:	492f      	ldr	r1, [pc, #188]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	492c      	ldr	r1, [pc, #176]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4928      	ldr	r1, [pc, #160]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	491e      	ldr	r1, [pc, #120]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4918      	ldr	r1, [pc, #96]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4914      	ldr	r1, [pc, #80]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 8001818:	4013      	ands	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d021      	beq.n	800186c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e021      	b.n	800187a <HAL_GPIO_Init+0x2e2>
 8001836:	bf00      	nop
 8001838:	10320000 	.word	0x10320000
 800183c:	10310000 	.word	0x10310000
 8001840:	10220000 	.word	0x10220000
 8001844:	10210000 	.word	0x10210000
 8001848:	10120000 	.word	0x10120000
 800184c:	10110000 	.word	0x10110000
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	40010800 	.word	0x40010800
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40011000 	.word	0x40011000
 8001864:	40011400 	.word	0x40011400
 8001868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_GPIO_Init+0x304>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <HAL_GPIO_Init+0x304>)
 8001876:	4013      	ands	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae8e 	bne.w	80015ac <HAL_GPIO_Init+0x14>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	; 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43d9      	mvns	r1, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e272      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001930:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x12c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d168      	bne.n	8001a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e24c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x76>
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e02e      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7a      	ldr	r2, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbc>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe fe5e 	bl	80006a0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7fe fe5a 	bl	80006a0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e200      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fe4a 	bl	80006a0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7fe fe46 	bl	80006a0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1ec      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1c0      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fdff 	bl	80006a0 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fdfb 	bl	80006a0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1a1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4927      	ldr	r1, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fdde 	bl	80006a0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fdda 	bl	80006a0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e180      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03a      	beq.n	8001b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe fdbe 	bl	80006a0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7fe fdba 	bl	80006a0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e160      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fa9c 	bl	8002084 <RCC_Delay>
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7fe fda4 	bl	80006a0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fda0 	bl	80006a0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e146      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	42420000 	.word	0x42420000
 8001b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a6 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7fe fd61 	bl	80006a0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7fe fd5d 	bl	80006a0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e103      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x356>
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fd11 	bl	80006a0 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fd0d 	bl	80006a0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0b1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x37e>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fcfb 	bl	80006a0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe fcf7 	bl	80006a0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d061      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d146      	bne.n	8001d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fccb 	bl	80006a0 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7fe fcc7 	bl	80006a0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e06d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe fc9b 	bl	80006a0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe fc97 	bl	80006a0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46a>
 8001d8c:	e035      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fc84 	bl	80006a0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fc80 	bl	80006a0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e026      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x498>
 8001dba:	e01e      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e019      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x500>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d0      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d040      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e073      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fbd2 	bl	80006a0 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fbce 	bl	80006a0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e053      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fb30 	bl	800061c <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08002130 	.word	0x08002130
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200a:	e027      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	e027      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_GetSysClockFreq+0x94>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0c5b      	lsrs	r3, r3, #17
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e004      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetSysClockFreq+0x98>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	693b      	ldr	r3, [r7, #16]
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	007a1200 	.word	0x007a1200
 8002078:	08002140 	.word	0x08002140
 800207c:	08002150 	.word	0x08002150
 8002080:	003d0900 	.word	0x003d0900

08002084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <RCC_Delay+0x34>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <RCC_Delay+0x38>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a5b      	lsrs	r3, r3, #9
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a0:	bf00      	nop
  }
  while (Delay --);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	60fa      	str	r2, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <RCC_Delay+0x1c>
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000000 	.word	0x20000000
 80020bc:	10624dd3 	.word	0x10624dd3

080020c0 <memset>:
 80020c0:	4603      	mov	r3, r0
 80020c2:	4402      	add	r2, r0
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d100      	bne.n	80020ca <memset+0xa>
 80020c8:	4770      	bx	lr
 80020ca:	f803 1b01 	strb.w	r1, [r3], #1
 80020ce:	e7f9      	b.n	80020c4 <memset+0x4>

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2600      	movs	r6, #0
 80020d4:	4d0c      	ldr	r5, [pc, #48]	; (8002108 <__libc_init_array+0x38>)
 80020d6:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d8:	1b64      	subs	r4, r4, r5
 80020da:	10a4      	asrs	r4, r4, #2
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	f000 f81a 	bl	8002118 <_init>
 80020e4:	2600      	movs	r6, #0
 80020e6:	4d0a      	ldr	r5, [pc, #40]	; (8002110 <__libc_init_array+0x40>)
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <__libc_init_array+0x44>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002154 	.word	0x08002154
 800210c:	08002154 	.word	0x08002154
 8002110:	08002154 	.word	0x08002154
 8002114:	08002158 	.word	0x08002158

08002118 <_init>:
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211a:	bf00      	nop
 800211c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211e:	bc08      	pop	{r3}
 8002120:	469e      	mov	lr, r3
 8002122:	4770      	bx	lr

08002124 <_fini>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr
