
LoopBackMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001c98  08001c98  00011c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cbc  08001cbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cbc  08001cbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cbc  08001cbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001cd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001cd0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000048e7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001318  00000000  00000000  0002495f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  00025c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c1  00000000  00000000  000261a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f0a  00000000  00000000  00026561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bd5  00000000  00000000  0003c46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e4b3  00000000  00000000  00042040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000134c  00000000  00000000  000c04f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c1840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c80 	.word	0x08001c80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c80 	.word	0x08001c80

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa08 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f852 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ce 	bl	80002f8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f894 	bl	8000288 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000160:	4821      	ldr	r0, [pc, #132]	; (80001e8 <main+0x9c>)
 8000162:	f000 fb80 	bl	8000866 <HAL_CAN_Start>
//  CAN_FILTER();
//  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);

  TxHeader.DLC = 8;
 8000166:	4b21      	ldr	r3, [pc, #132]	; (80001ec <main+0xa0>)
 8000168:	2208      	movs	r2, #8
 800016a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800016c:	4b1f      	ldr	r3, [pc, #124]	; (80001ec <main+0xa0>)
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000172:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <main+0xa0>)
 8000174:	2200      	movs	r2, #0
 8000176:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x123;
 8000178:	4b1c      	ldr	r3, [pc, #112]	; (80001ec <main+0xa0>)
 800017a:	f240 1223 	movw	r2, #291	; 0x123
 800017e:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0xa0>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000186:	4b19      	ldr	r3, [pc, #100]	; (80001ec <main+0xa0>)
 8000188:	2200      	movs	r2, #0
 800018a:	751a      	strb	r2, [r3, #20]

  txdata[0] = 0x01;
 800018c:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <main+0xa4>)
 800018e:	2201      	movs	r2, #1
 8000190:	701a      	strb	r2, [r3, #0]
  txdata[1] = 0x02;
 8000192:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <main+0xa4>)
 8000194:	2202      	movs	r2, #2
 8000196:	705a      	strb	r2, [r3, #1]
  txdata[2] = 0x03;
 8000198:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <main+0xa4>)
 800019a:	2203      	movs	r2, #3
 800019c:	709a      	strb	r2, [r3, #2]
  txdata[3] = 0x04;
 800019e:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <main+0xa4>)
 80001a0:	2204      	movs	r2, #4
 80001a2:	70da      	strb	r2, [r3, #3]
  txdata[4] = 0x05;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <main+0xa4>)
 80001a6:	2205      	movs	r2, #5
 80001a8:	711a      	strb	r2, [r3, #4]
  txdata[5] = 0x06;
 80001aa:	4b11      	ldr	r3, [pc, #68]	; (80001f0 <main+0xa4>)
 80001ac:	2206      	movs	r2, #6
 80001ae:	715a      	strb	r2, [r3, #5]
  txdata[6] = 0x07;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <main+0xa4>)
 80001b2:	2207      	movs	r2, #7
 80001b4:	719a      	strb	r2, [r3, #6]
  txdata[7] = 0x08;
 80001b6:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <main+0xa4>)
 80001b8:	2208      	movs	r2, #8
 80001ba:	71da      	strb	r2, [r3, #7]

  HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, TxMailBox);
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <main+0xa8>)
 80001be:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <main+0xa4>)
 80001c0:	490a      	ldr	r1, [pc, #40]	; (80001ec <main+0xa0>)
 80001c2:	4809      	ldr	r0, [pc, #36]	; (80001e8 <main+0x9c>)
 80001c4:	f000 fb93 	bl	80008ee <HAL_CAN_AddTxMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, TxMailBox);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <main+0xa8>)
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <main+0xa4>)
 80001cc:	4907      	ldr	r1, [pc, #28]	; (80001ec <main+0xa0>)
 80001ce:	4806      	ldr	r0, [pc, #24]	; (80001e8 <main+0x9c>)
 80001d0:	f000 fb8d 	bl	80008ee <HAL_CAN_AddTxMessage>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d8:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0xac>)
 80001da:	f001 f92d 	bl	8001438 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80001de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e2:	f000 fa21 	bl	8000628 <HAL_Delay>
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, txdata, TxMailBox);
 80001e6:	e7ef      	b.n	80001c8 <main+0x7c>
 80001e8:	20000028 	.word	0x20000028
 80001ec:	20000050 	.word	0x20000050
 80001f0:	20000074 	.word	0x20000074
 80001f4:	20000068 	.word	0x20000068
 80001f8:	40011000 	.word	0x40011000

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fd0c 	bl	8001c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f001 f911 	bl	800146c <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f89e 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fb7e 	bl	8001970 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 f889 	bl	8000390 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_CAN_Init+0x68>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_CAN_Init+0x6c>)
 8000290:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_CAN_Init+0x68>)
 8000294:	2210      	movs	r2, #16
 8000296:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_CAN_Init+0x68>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <MX_CAN_Init+0x68>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_CAN_Init+0x68>)
 80002a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002ac:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_CAN_Init+0x68>)
 80002b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002b4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_CAN_Init+0x68>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_CAN_Init+0x68>)
 80002be:	2200      	movs	r2, #0
 80002c0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <MX_CAN_Init+0x68>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_CAN_Init+0x68>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <MX_CAN_Init+0x68>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_CAN_Init+0x68>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_CAN_Init+0x68>)
 80002dc:	f000 f9c8 	bl	8000670 <HAL_CAN_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002e6:	f000 f853 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40006400 	.word	0x40006400

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a1d      	ldr	r2, [pc, #116]	; (8000388 <MX_GPIO_Init+0x90>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0310 	and.w	r3, r3, #16
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a17      	ldr	r2, [pc, #92]	; (8000388 <MX_GPIO_Init+0x90>)
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0320 	and.w	r3, r3, #32
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <MX_GPIO_Init+0x90>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0304 	and.w	r3, r3, #4
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035a:	480c      	ldr	r0, [pc, #48]	; (800038c <MX_GPIO_Init+0x94>)
 800035c:	f001 f854 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800036a:	2301      	movs	r3, #1
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	4619      	mov	r1, r3
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <MX_GPIO_Init+0x94>)
 800037a:	f000 fec1 	bl	8001100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	40011000 	.word	0x40011000

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <HAL_CAN_MspInit+0x9c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d139      	bne.n	8000494 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 8000422:	69db      	ldr	r3, [r3, #28]
 8000424:	4a1e      	ldr	r2, [pc, #120]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042a:	61d3      	str	r3, [r2, #28]
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a18      	ldr	r2, [pc, #96]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <HAL_CAN_MspInit+0xa0>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <HAL_CAN_MspInit+0xa4>)
 8000466:	f000 fe4b 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800046a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4809      	ldr	r0, [pc, #36]	; (80004a4 <HAL_CAN_MspInit+0xa4>)
 8000480:	f000 fe3e 	bl	8001100 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2100      	movs	r1, #0
 8000488:	2014      	movs	r0, #20
 800048a:	f000 fe02 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800048e:	2014      	movs	r0, #20
 8000490:	f000 fe1b 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40006400 	.word	0x40006400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ee:	f000 f87f 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004fe:	f000 fac5 	bl	8000a8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028

0800050c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000518:	f7ff fff8 	bl	800050c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800051e:	490c      	ldr	r1, [pc, #48]	; (8000550 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000534:	4c09      	ldr	r4, [pc, #36]	; (800055c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000542:	f001 fb79 	bl	8001c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff fe01 	bl	800014c <main>
  bx lr
 800054a:	4770      	bx	lr
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000554:	08001cc4 	.word	0x08001cc4
  ldr r2, =_sbss
 8000558:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800055c:	20000080 	.word	0x20000080

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 fd81 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	200f      	movs	r0, #15
 800057c:	f000 f808 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff0c 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x58>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fd99 	bl	80010e6 <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00e      	b.n	80005dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d80a      	bhi.n	80005da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 fd61 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_InitTick+0x5c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_IncTick+0x1c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x20>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <HAL_IncTick+0x20>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000008 	.word	0x20000008
 8000610:	2000007c 	.word	0x2000007c

08000614 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <HAL_GetTick+0x10>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	2000007c 	.word	0x2000007c

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff fff0 	bl	8000614 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d005      	beq.n	800064e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_Delay+0x44>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064e:	bf00      	nop
 8000650:	f7ff ffe0 	bl	8000614 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	429a      	cmp	r2, r3
 800065e:	d8f7      	bhi.n	8000650 <HAL_Delay+0x28>
  {
  }
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000008 	.word	0x20000008

08000670 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e0ed      	b.n	800085e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff feb6 	bl	8000400 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0201 	orr.w	r2, r2, #1
 80006a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006a4:	f7ff ffb6 	bl	8000614 <HAL_GetTick>
 80006a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006aa:	e012      	b.n	80006d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006ac:	f7ff ffb2 	bl	8000614 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	2b0a      	cmp	r3, #10
 80006b8:	d90b      	bls.n	80006d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2205      	movs	r2, #5
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0c5      	b.n	800085e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0e5      	beq.n	80006ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f022 0202 	bic.w	r2, r2, #2
 80006ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006f0:	f7ff ff90 	bl	8000614 <HAL_GetTick>
 80006f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006f6:	e012      	b.n	800071e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006f8:	f7ff ff8c 	bl	8000614 <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d90b      	bls.n	800071e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2205      	movs	r2, #5
 8000716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e09f      	b.n	800085e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1e5      	bne.n	80006f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7e1b      	ldrb	r3, [r3, #24]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d108      	bne.n	8000746 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e007      	b.n	8000756 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7e5b      	ldrb	r3, [r3, #25]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d108      	bne.n	8000770 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e007      	b.n	8000780 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800077e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7e9b      	ldrb	r3, [r3, #26]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d108      	bne.n	800079a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0220 	orr.w	r2, r2, #32
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e007      	b.n	80007aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0220 	bic.w	r2, r2, #32
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7edb      	ldrb	r3, [r3, #27]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d108      	bne.n	80007c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f022 0210 	bic.w	r2, r2, #16
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e007      	b.n	80007d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0210 	orr.w	r2, r2, #16
 80007d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7f1b      	ldrb	r3, [r3, #28]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d108      	bne.n	80007ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0208 	orr.w	r2, r2, #8
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e007      	b.n	80007fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f022 0208 	bic.w	r2, r2, #8
 80007fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7f5b      	ldrb	r3, [r3, #29]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d108      	bne.n	8000818 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f042 0204 	orr.w	r2, r2, #4
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	e007      	b.n	8000828 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0204 	bic.w	r2, r2, #4
 8000826:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	431a      	orrs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	431a      	orrs	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	ea42 0103 	orr.w	r1, r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	430a      	orrs	r2, r1
 800084c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b01      	cmp	r3, #1
 8000878:	d12e      	bne.n	80008d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f022 0201 	bic.w	r2, r2, #1
 8000890:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000892:	f7ff febf 	bl	8000614 <HAL_GetTick>
 8000896:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000898:	e012      	b.n	80008c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800089a:	f7ff febb 	bl	8000614 <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	d90b      	bls.n	80008c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2205      	movs	r2, #5
 80008b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e012      	b.n	80008e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e5      	bne.n	800089a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	e006      	b.n	80008e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
  }
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b089      	sub	sp, #36	; 0x24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000902:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800090c:	7ffb      	ldrb	r3, [r7, #31]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d003      	beq.n	800091a <HAL_CAN_AddTxMessage+0x2c>
 8000912:	7ffb      	ldrb	r3, [r7, #31]
 8000914:	2b02      	cmp	r3, #2
 8000916:	f040 80ad 	bne.w	8000a74 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10a      	bne.n	800093a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800092a:	2b00      	cmp	r3, #0
 800092c:	d105      	bne.n	800093a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8095 	beq.w	8000a64 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	0e1b      	lsrs	r3, r3, #24
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000944:	2201      	movs	r2, #1
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	409a      	lsls	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000960:	68f9      	ldr	r1, [r7, #12]
 8000962:	6809      	ldr	r1, [r1, #0]
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3318      	adds	r3, #24
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	440b      	add	r3, r1
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e00f      	b.n	8000992 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800097c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000982:	68f9      	ldr	r1, [r7, #12]
 8000984:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000986:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3318      	adds	r3, #24
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	440b      	add	r3, r1
 8000990:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	691a      	ldr	r2, [r3, #16]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3318      	adds	r3, #24
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	440b      	add	r3, r1
 80009a2:	3304      	adds	r3, #4
 80009a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	7d1b      	ldrb	r3, [r3, #20]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d111      	bne.n	80009d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3318      	adds	r3, #24
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	4413      	add	r3, r2
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	6811      	ldr	r1, [r2, #0]
 80009c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3318      	adds	r3, #24
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	440b      	add	r3, r1
 80009ce:	3304      	adds	r3, #4
 80009d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3307      	adds	r3, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	061a      	lsls	r2, r3, #24
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3306      	adds	r3, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	431a      	orrs	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3305      	adds	r3, #5
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	3204      	adds	r2, #4
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	4610      	mov	r0, r2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	6811      	ldr	r1, [r2, #0]
 80009fa:	ea43 0200 	orr.w	r2, r3, r0
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	440b      	add	r3, r1
 8000a04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	061a      	lsls	r2, r3, #24
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3302      	adds	r3, #2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	4313      	orrs	r3, r2
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	6811      	ldr	r1, [r2, #0]
 8000a30:	ea43 0200 	orr.w	r2, r3, r0
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	440b      	add	r3, r1
 8000a3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3318      	adds	r3, #24
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	4413      	add	r3, r2
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	6811      	ldr	r1, [r2, #0]
 8000a52:	f043 0201 	orr.w	r2, r3, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3318      	adds	r3, #24
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	440b      	add	r3, r1
 8000a5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e00e      	b.n	8000a82 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e006      	b.n	8000a82 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
  }
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d07c      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d023      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f983 	bl	8000dfa <HAL_CAN_TxMailbox0CompleteCallback>
 8000af4:	e016      	b.n	8000b24 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	e00c      	b.n	8000b24 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1c:	e002      	b.n	8000b24 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f986 	bl	8000e30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d024      	beq.n	8000b78 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f962 	bl	8000e0c <HAL_CAN_TxMailbox1CompleteCallback>
 8000b48:	e016      	b.n	8000b78 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	e00c      	b.n	8000b78 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b70:	e002      	b.n	8000b78 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f965 	bl	8000e42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d024      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 f941 	bl	8000e1e <HAL_CAN_TxMailbox2CompleteCallback>
 8000b9c:	e016      	b.n	8000bcc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb0:	e00c      	b.n	8000bcc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	e002      	b.n	8000bcc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f944 	bl	8000e54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2210      	movs	r2, #16
 8000bee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00b      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2208      	movs	r2, #8
 8000c0a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f933 	bl	8000e78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f91b 	bl	8000e66 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00c      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2210      	movs	r2, #16
 8000c52:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f913 	bl	8000e9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f8fb 	bl	8000e8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2210      	movs	r2, #16
 8000cae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f8fc 	bl	8000eae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2208      	movs	r2, #8
 8000cd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f8f4 	bl	8000ec0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d07b      	beq.n	8000dda <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d072      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d008      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d043      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d03e      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d5a:	2b60      	cmp	r3, #96	; 0x60
 8000d5c:	d02b      	beq.n	8000db6 <HAL_CAN_IRQHandler+0x32a>
 8000d5e:	2b60      	cmp	r3, #96	; 0x60
 8000d60:	d82e      	bhi.n	8000dc0 <HAL_CAN_IRQHandler+0x334>
 8000d62:	2b50      	cmp	r3, #80	; 0x50
 8000d64:	d022      	beq.n	8000dac <HAL_CAN_IRQHandler+0x320>
 8000d66:	2b50      	cmp	r3, #80	; 0x50
 8000d68:	d82a      	bhi.n	8000dc0 <HAL_CAN_IRQHandler+0x334>
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d019      	beq.n	8000da2 <HAL_CAN_IRQHandler+0x316>
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	d826      	bhi.n	8000dc0 <HAL_CAN_IRQHandler+0x334>
 8000d72:	2b30      	cmp	r3, #48	; 0x30
 8000d74:	d010      	beq.n	8000d98 <HAL_CAN_IRQHandler+0x30c>
 8000d76:	2b30      	cmp	r3, #48	; 0x30
 8000d78:	d822      	bhi.n	8000dc0 <HAL_CAN_IRQHandler+0x334>
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d002      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x2f8>
 8000d7e:	2b20      	cmp	r3, #32
 8000d80:	d005      	beq.n	8000d8e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000d82:	e01d      	b.n	8000dc0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d8c:	e019      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d96:	e014      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000da0:	e00f      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000daa:	e00a      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000db4:	e005      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dbe:	e000      	b.n	8000dc2 <HAL_CAN_IRQHandler+0x336>
            break;
 8000dc0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dd0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f870 	bl	8000ed2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <__NVIC_EnableIRQ+0x34>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff90 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff2d 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff42 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff35 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e169      	b.n	80013e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001114:	2201      	movs	r2, #1
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8158 	bne.w	80013e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a9a      	ldr	r2, [pc, #616]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d05e      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 800113c:	4a98      	ldr	r2, [pc, #608]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d875      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001142:	4a98      	ldr	r2, [pc, #608]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d058      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001148:	4a96      	ldr	r2, [pc, #600]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d86f      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800114e:	4a96      	ldr	r2, [pc, #600]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d052      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001154:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d869      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800115a:	4a94      	ldr	r2, [pc, #592]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d04c      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 8001160:	4a92      	ldr	r2, [pc, #584]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d863      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001166:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d046      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
 800116c:	4a90      	ldr	r2, [pc, #576]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d85d      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d82a      	bhi.n	80011cc <HAL_GPIO_Init+0xcc>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d859      	bhi.n	800122e <HAL_GPIO_Init+0x12e>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <HAL_GPIO_Init+0x80>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011fb 	.word	0x080011fb
 8001184:	080011d5 	.word	0x080011d5
 8001188:	080011e7 	.word	0x080011e7
 800118c:	08001229 	.word	0x08001229
 8001190:	0800122f 	.word	0x0800122f
 8001194:	0800122f 	.word	0x0800122f
 8001198:	0800122f 	.word	0x0800122f
 800119c:	0800122f 	.word	0x0800122f
 80011a0:	0800122f 	.word	0x0800122f
 80011a4:	0800122f 	.word	0x0800122f
 80011a8:	0800122f 	.word	0x0800122f
 80011ac:	0800122f 	.word	0x0800122f
 80011b0:	0800122f 	.word	0x0800122f
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	0800122f 	.word	0x0800122f
 80011bc:	0800122f 	.word	0x0800122f
 80011c0:	0800122f 	.word	0x0800122f
 80011c4:	080011dd 	.word	0x080011dd
 80011c8:	080011f1 	.word	0x080011f1
 80011cc:	4a79      	ldr	r2, [pc, #484]	; (80013b4 <HAL_GPIO_Init+0x2b4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d2:	e02c      	b.n	800122e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e029      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	3304      	adds	r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e024      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	3308      	adds	r3, #8
 80011ec:	623b      	str	r3, [r7, #32]
          break;
 80011ee:	e01f      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	330c      	adds	r3, #12
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e01a      	b.n	8001230 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001202:	2304      	movs	r3, #4
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e013      	b.n	8001230 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	611a      	str	r2, [r3, #16]
          break;
 800121a:	e009      	b.n	8001230 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	615a      	str	r2, [r3, #20]
          break;
 8001226:	e003      	b.n	8001230 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x130>
          break;
 800122e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2bff      	cmp	r3, #255	; 0xff
 8001234:	d801      	bhi.n	800123a <HAL_GPIO_Init+0x13a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e001      	b.n	800123e <HAL_GPIO_Init+0x13e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3304      	adds	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d802      	bhi.n	800124c <HAL_GPIO_Init+0x14c>
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_Init+0x152>
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	3b08      	subs	r3, #8
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	210f      	movs	r1, #15
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	6a39      	ldr	r1, [r7, #32]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	431a      	orrs	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80b1 	beq.w	80013e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_GPIO_Init+0x2b8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <HAL_GPIO_Init+0x2bc>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HAL_GPIO_Init+0x2c0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1ec>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <HAL_GPIO_Init+0x2c4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1e8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <HAL_GPIO_Init+0x2c8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1e4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <HAL_GPIO_Init+0x2cc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1e0>
 80012dc:	2303      	movs	r3, #3
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e0:	2304      	movs	r3, #4
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1ee>
 80012ec:	2300      	movs	r3, #0
 80012ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x2bc>)
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	492c      	ldr	r1, [pc, #176]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4928      	ldr	r1, [pc, #160]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	4922      	ldr	r1, [pc, #136]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	60cb      	str	r3, [r1, #12]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	491e      	ldr	r1, [pc, #120]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4918      	ldr	r1, [pc, #96]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	4914      	ldr	r1, [pc, #80]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001380:	4013      	ands	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d021      	beq.n	80013d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
 800139c:	e021      	b.n	80013e2 <HAL_GPIO_Init+0x2e2>
 800139e:	bf00      	nop
 80013a0:	10320000 	.word	0x10320000
 80013a4:	10310000 	.word	0x10310000
 80013a8:	10220000 	.word	0x10220000
 80013ac:	10210000 	.word	0x10210000
 80013b0:	10120000 	.word	0x10120000
 80013b4:	10110000 	.word	0x10110000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40011000 	.word	0x40011000
 80013cc:	40011400 	.word	0x40011400
 80013d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4909      	ldr	r1, [pc, #36]	; (8001404 <HAL_GPIO_Init+0x304>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f47f ae8e 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43d9      	mvns	r1, r3
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	400b      	ands	r3, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e272      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8087 	beq.w	800159a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b04      	cmp	r3, #4
 8001496:	d00c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d112      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
 80014a4:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d10b      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06c      	beq.n	8001598 <HAL_RCC_OscConfig+0x12c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d168      	bne.n	8001598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e24c      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x76>
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a7f      	ldr	r2, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e02e      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0xbc>
 800150e:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a71      	ldr	r2, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff f864 	bl	8000614 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff f860 	bl	8000614 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e200      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xe4>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff f850 	bl	8000614 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff f84c 	bl	8000614 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1ec      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x10c>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1c0      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4939      	ldr	r1, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f805 	bl	8000614 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff f801 	bl	8000614 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1a1      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7fe ffe4 	bl	8000614 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7fe ffe0 	bl	8000614 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e180      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03a      	beq.n	80016f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d019      	beq.n	80016b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7fe ffc4 	bl	8000614 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7fe ffc0 	bl	8000614 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e160      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fa9c 	bl	8001bec <RCC_Delay>
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7fe ffaa 	bl	8000614 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7fe ffa6 	bl	8000614 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d908      	bls.n	80016e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e146      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	42420000 	.word	0x42420000
 80016e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e9      	bne.n	80016c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a6 	beq.w	800184a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7e      	ldr	r2, [pc, #504]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7fe ff67 	bl	8000614 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7fe ff63 	bl	8000614 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e103      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x312>
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e02d      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x334>
 8001786:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a69      	ldr	r2, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a66      	ldr	r2, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	e01c      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x356>
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a60      	ldr	r2, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7fe ff17 	bl	8000614 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7fe ff13 	bl	8000614 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0b1      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ee      	beq.n	80017ea <HAL_RCC_OscConfig+0x37e>
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7fe ff01 	bl	8000614 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7fe fefd 	bl	8000614 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e09b      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d061      	beq.n	8001924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d146      	bne.n	80018f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe fed1 	bl	8000614 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7fe fecd 	bl	8000614 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e06d      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4921      	ldr	r1, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a19      	ldr	r1, [r3, #32]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	430b      	orrs	r3, r1
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7fe fea1 	bl	8000614 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7fe fe9d 	bl	8000614 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e03d      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46a>
 80018f4:	e035      	b.n	8001962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe fe8a 	bl	8000614 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7fe fe86 	bl	8000614 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e026      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x498>
 8001922:	e01e      	b.n	8001962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e019      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x500>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	429a      	cmp	r2, r3
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0d0      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4965      	ldr	r1, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d040      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e073      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06b      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4936      	ldr	r1, [pc, #216]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7fe fdd8 	bl	8000614 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7fe fdd4 	bl	8000614 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e053      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d210      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1cc>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd36 	bl	8000590 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08001c98 	.word	0x08001c98
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x36>
 8001b72:	e027      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b76:	613b      	str	r3, [r7, #16]
      break;
 8001b78:	e027      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0c5b      	lsrs	r3, r3, #17
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba6:	fb03 f202 	mul.w	r2, r3, r2
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e004      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc6:	613b      	str	r3, [r7, #16]
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	693b      	ldr	r3, [r7, #16]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	007a1200 	.word	0x007a1200
 8001be0:	08001ca8 	.word	0x08001ca8
 8001be4:	08001cb8 	.word	0x08001cb8
 8001be8:	003d0900 	.word	0x003d0900

08001bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <RCC_Delay+0x34>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <RCC_Delay+0x38>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0a5b      	lsrs	r3, r3, #9
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c08:	bf00      	nop
  }
  while (Delay --);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1e5a      	subs	r2, r3, #1
 8001c0e:	60fa      	str	r2, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f9      	bne.n	8001c08 <RCC_Delay+0x1c>
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000000 	.word	0x20000000
 8001c24:	10624dd3 	.word	0x10624dd3

08001c28 <memset>:
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4402      	add	r2, r0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <memset+0xa>
 8001c30:	4770      	bx	lr
 8001c32:	f803 1b01 	strb.w	r1, [r3], #1
 8001c36:	e7f9      	b.n	8001c2c <memset+0x4>

08001c38 <__libc_init_array>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	4d0c      	ldr	r5, [pc, #48]	; (8001c70 <__libc_init_array+0x38>)
 8001c3e:	4c0d      	ldr	r4, [pc, #52]	; (8001c74 <__libc_init_array+0x3c>)
 8001c40:	1b64      	subs	r4, r4, r5
 8001c42:	10a4      	asrs	r4, r4, #2
 8001c44:	42a6      	cmp	r6, r4
 8001c46:	d109      	bne.n	8001c5c <__libc_init_array+0x24>
 8001c48:	f000 f81a 	bl	8001c80 <_init>
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	4d0a      	ldr	r5, [pc, #40]	; (8001c78 <__libc_init_array+0x40>)
 8001c50:	4c0a      	ldr	r4, [pc, #40]	; (8001c7c <__libc_init_array+0x44>)
 8001c52:	1b64      	subs	r4, r4, r5
 8001c54:	10a4      	asrs	r4, r4, #2
 8001c56:	42a6      	cmp	r6, r4
 8001c58:	d105      	bne.n	8001c66 <__libc_init_array+0x2e>
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c60:	4798      	blx	r3
 8001c62:	3601      	adds	r6, #1
 8001c64:	e7ee      	b.n	8001c44 <__libc_init_array+0xc>
 8001c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6a:	4798      	blx	r3
 8001c6c:	3601      	adds	r6, #1
 8001c6e:	e7f2      	b.n	8001c56 <__libc_init_array+0x1e>
 8001c70:	08001cbc 	.word	0x08001cbc
 8001c74:	08001cbc 	.word	0x08001cbc
 8001c78:	08001cbc 	.word	0x08001cbc
 8001c7c:	08001cc0 	.word	0x08001cc0

08001c80 <_init>:
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	bf00      	nop
 8001c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c86:	bc08      	pop	{r3}
 8001c88:	469e      	mov	lr, r3
 8001c8a:	4770      	bx	lr

08001c8c <_fini>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	bf00      	nop
 8001c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c92:	bc08      	pop	{r3}
 8001c94:	469e      	mov	lr, r3
 8001c96:	4770      	bx	lr
