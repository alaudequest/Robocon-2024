
F103_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f28  08001f28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f28  08001f28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f28  08001f28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f2c  08001f2c  00011f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001f3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001f3c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049ea  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000136e  00000000  00000000  00024a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000558  00000000  00000000  00025dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e4  00000000  00000000  00026328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016991  00000000  00000000  0002670c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005e37  00000000  00000000  0003d09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081caf  00000000  00000000  00042ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001420  00000000  00000000  000c4b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c5fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001eec 	.word	0x08001eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001eec 	.word	0x08001eec

0800014c <CAN_FILTER2_CONFIG>:
	canfilter1config.SlaveStartFilterBank = 13;

	HAL_CAN_ConfigFilter(&hcan, &canfilter1config);
}

void CAN_FILTER2_CONFIG(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilter2config;

	canfilter2config.FilterActivation = CAN_FILTER_ENABLE;
 8000152:	2301      	movs	r3, #1
 8000154:	623b      	str	r3, [r7, #32]
	canfilter2config.FilterBank = 2;
 8000156:	2302      	movs	r3, #2
 8000158:	617b      	str	r3, [r7, #20]
	canfilter2config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800015a:	2301      	movs	r3, #1
 800015c:	613b      	str	r3, [r7, #16]
	canfilter2config.FilterIdHigh = 0x7FA << 5;
 800015e:	f64f 7340 	movw	r3, #65344	; 0xff40
 8000162:	603b      	str	r3, [r7, #0]
	canfilter2config.FilterMaskIdHigh = 0x7FA << 5;
 8000164:	f64f 7340 	movw	r3, #65344	; 0xff40
 8000168:	60bb      	str	r3, [r7, #8]
	canfilter2config.FilterIdLow = 0x0000;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
	canfilter2config.FilterMaskIdLow = 0x0000;
 800016e:	2300      	movs	r3, #0
 8000170:	60fb      	str	r3, [r7, #12]
	canfilter2config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000172:	2300      	movs	r3, #0
 8000174:	61bb      	str	r3, [r7, #24]
	canfilter2config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000176:	2301      	movs	r3, #1
 8000178:	61fb      	str	r3, [r7, #28]
	canfilter2config.SlaveStartFilterBank = 13;
 800017a:	230d      	movs	r3, #13
 800017c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilter2config);
 800017e:	463b      	mov	r3, r7
 8000180:	4619      	mov	r1, r3
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <CAN_FILTER2_CONFIG+0x44>)
 8000184:	f000 fb77 	bl	8000876 <HAL_CAN_ConfigFilter>
}
 8000188:	bf00      	nop
 800018a:	3728      	adds	r7, #40	; 0x28
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000028 	.word	0x20000028

08000194 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, float_byte.rxdata) == HAL_OK){
 800019c:	4b12      	ldr	r3, [pc, #72]	; (80001e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800019e:	4a13      	ldr	r2, [pc, #76]	; (80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f000 fc74 	bl	8000a90 <HAL_CAN_GetRxMessage>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d117      	bne.n	80001de <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		if(RxHeader.StdId == 0x202){
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f240 2202 	movw	r2, #514	; 0x202
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d105      	bne.n	80001c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80001c0:	f001 fa70 	bl	80016a4 <HAL_GPIO_TogglePin>
		}else if(RxHeader.StdId == 0x201){
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		}
	}
}
 80001c4:	e00b      	b.n	80001de <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		}else if(RxHeader.StdId == 0x201){
 80001c6:	4b09      	ldr	r3, [pc, #36]	; (80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f240 2201 	movw	r2, #513	; 0x201
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d105      	bne.n	80001de <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d8:	4805      	ldr	r0, [pc, #20]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80001da:	f001 fa4b 	bl	8001674 <HAL_GPIO_WritePin>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000050 	.word	0x20000050
 80001ec:	20000058 	.word	0x20000058
 80001f0:	40011000 	.word	0x40011000

080001f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	__NOP();
 80001fc:	bf00      	nop
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020c:	f000 f9d6 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000210:	f000 f810 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f000 f88a 	bl	800032c <MX_GPIO_Init>
  MX_CAN_Init();
 8000218:	f000 f852 	bl	80002c0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
//  CAN_FILTER0_CONFIG();
//  CAN_FILTER1_CONFIG();
  CAN_FILTER2_CONFIG();
 800021c:	f7ff ff96 	bl	800014c <CAN_FILTER2_CONFIG>
  HAL_CAN_Start(&hcan);
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <main+0x28>)
 8000222:	f000 fbf1 	bl	8000a08 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8000226:	2112      	movs	r1, #18
 8000228:	4801      	ldr	r0, [pc, #4]	; (8000230 <main+0x28>)
 800022a:	f000 fd52 	bl	8000cd2 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022e:	e7fe      	b.n	800022e <main+0x26>
 8000230:	20000028 	.word	0x20000028

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fe26 	bl	8001e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fa2b 	bl	80016d8 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f89c 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fc98 	bl	8001bdc <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f887 	bl	80003c4 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_CAN_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_CAN_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_CAN_Init+0x64>)
 80002cc:	2212      	movs	r2, #18
 80002ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_CAN_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_CAN_Init+0x64>)
 80002de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002e2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_CAN_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_CAN_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_CAN_Init+0x64>)
 8000310:	f000 f9b6 	bl	8000680 <HAL_CAN_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800031a:	f000 f853 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000028 	.word	0x20000028
 8000328:	40006400 	.word	0x40006400

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_GPIO_Init+0x90>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <MX_GPIO_Init+0x90>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_GPIO_Init+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_GPIO_Init+0x90>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a11      	ldr	r2, [pc, #68]	; (80003bc <MX_GPIO_Init+0x90>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_GPIO_Init+0x94>)
 8000390:	f001 f970 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039e:	2301      	movs	r3, #1
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_GPIO_Init+0x94>)
 80003ae:	f000 ffdd 	bl	800136c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b2:	bf00      	nop
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <HAL_CAN_MspInit+0xac>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d141      	bne.n	80004d8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045e:	61d3      	str	r3, [r2, #28]
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <HAL_CAN_MspInit+0xb4>)
 800049a:	f000 ff67 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800049e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a4:	2302      	movs	r3, #2
 80004a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <HAL_CAN_MspInit+0xb4>)
 80004b4:	f000 ff5a 	bl	800136c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2014      	movs	r0, #20
 80004be:	f000 ff1e 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004c2:	2014      	movs	r0, #20
 80004c4:	f000 ff37 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2015      	movs	r0, #21
 80004ce:	f000 ff16 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80004d2:	2015      	movs	r0, #21
 80004d4:	f000 ff2f 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40006400 	.word	0x40006400
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <NMI_Handler+0x4>

080004f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler+0x4>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <MemManage_Handler+0x4>

080004fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <BusFault_Handler+0x4>

08000504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler+0x4>

0800050a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000532:	f000 f889 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000542:	f000 fbeb 	bl	8000d1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <CAN1_RX1_IRQHandler+0x10>)
 8000556:	f000 fbe1 	bl	8000d1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff fff8 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000576:	490c      	ldr	r1, [pc, #48]	; (80005a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800058c:	4c09      	ldr	r4, [pc, #36]	; (80005b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f001 fc83 	bl	8001ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fe33 	bl	8000208 <main>
  bx lr
 80005a2:	4770      	bx	lr
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	08001f30 	.word	0x08001f30
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	20000078 	.word	0x20000078

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_Init+0x28>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_Init+0x28>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 fe8b 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	200f      	movs	r0, #15
 80005d4:	f000 f808 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff fefa 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x54>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x58>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fea3 	bl	8001352 <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e00e      	b.n	8000634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d80a      	bhi.n	8000632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f000 fe6b 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <HAL_InitTick+0x5c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e000      	b.n	8000634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x1c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x20>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000008 	.word	0x20000008
 8000668:	20000074 	.word	0x20000074

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000074 	.word	0x20000074

08000680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e0ed      	b.n	800086e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff fec8 	bl	8000434 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f042 0201 	orr.w	r2, r2, #1
 80006b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006b4:	f7ff ffda 	bl	800066c <HAL_GetTick>
 80006b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ba:	e012      	b.n	80006e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006bc:	f7ff ffd6 	bl	800066c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b0a      	cmp	r3, #10
 80006c8:	d90b      	bls.n	80006e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e0c5      	b.n	800086e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0e5      	beq.n	80006bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f022 0202 	bic.w	r2, r2, #2
 80006fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000700:	f7ff ffb4 	bl	800066c <HAL_GetTick>
 8000704:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000706:	e012      	b.n	800072e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000708:	f7ff ffb0 	bl	800066c <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	2b0a      	cmp	r3, #10
 8000714:	d90b      	bls.n	800072e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2205      	movs	r2, #5
 8000726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e09f      	b.n	800086e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1e5      	bne.n	8000708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e1b      	ldrb	r3, [r3, #24]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7e5b      	ldrb	r3, [r3, #25]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7e9b      	ldrb	r3, [r3, #26]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0220 	orr.w	r2, r2, #32
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0220 	bic.w	r2, r2, #32
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7edb      	ldrb	r3, [r3, #27]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f022 0210 	bic.w	r2, r2, #16
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0210 	orr.w	r2, r2, #16
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7f1b      	ldrb	r3, [r3, #28]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d108      	bne.n	80007fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0208 	orr.w	r2, r2, #8
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e007      	b.n	800080e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f022 0208 	bic.w	r2, r2, #8
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7f5b      	ldrb	r3, [r3, #29]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d108      	bne.n	8000828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 0204 	orr.w	r2, r2, #4
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e007      	b.n	8000838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0204 	bic.w	r2, r2, #4
 8000836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	ea42 0103 	orr.w	r1, r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	430a      	orrs	r2, r1
 800085c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000876:	b480      	push	{r7}
 8000878:	b087      	sub	sp, #28
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800088c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800088e:	7cfb      	ldrb	r3, [r7, #19]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d003      	beq.n	800089c <HAL_CAN_ConfigFilter+0x26>
 8000894:	7cfb      	ldrb	r3, [r7, #19]
 8000896:	2b02      	cmp	r3, #2
 8000898:	f040 80aa 	bne.w	80009f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	2201      	movs	r2, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d123      	bne.n	800091e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	43db      	mvns	r3, r3
 80008e0:	401a      	ands	r2, r3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3248      	adds	r2, #72	; 0x48
 80008fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000912:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000914:	6979      	ldr	r1, [r7, #20]
 8000916:	3348      	adds	r3, #72	; 0x48
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	440b      	add	r3, r1
 800091c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d122      	bne.n	800096c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	431a      	orrs	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000946:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3248      	adds	r2, #72	; 0x48
 800094c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000960:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000962:	6979      	ldr	r1, [r7, #20]
 8000964:	3348      	adds	r3, #72	; 0x48
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	440b      	add	r3, r1
 800096a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d109      	bne.n	8000988 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000986:	e007      	b.n	8000998 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	431a      	orrs	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d109      	bne.n	80009b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009b2:	e007      	b.n	80009c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	431a      	orrs	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d107      	bne.n	80009dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009e2:	f023 0201 	bic.w	r2, r3, #1
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e006      	b.n	80009fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
  }
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d12e      	bne.n	8000a7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a34:	f7ff fe1a 	bl	800066c <HAL_GetTick>
 8000a38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a3a:	e012      	b.n	8000a62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a3c:	f7ff fe16 	bl	800066c <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	d90b      	bls.n	8000a62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2205      	movs	r2, #5
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e012      	b.n	8000a88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e5      	bne.n	8000a3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e006      	b.n	8000a88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
  }
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d003      	beq.n	8000ab4 <HAL_CAN_GetRxMessage+0x24>
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	f040 8103 	bne.w	8000cba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10e      	bne.n	8000ad8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d116      	bne.n	8000af6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e0f7      	b.n	8000cc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d107      	bne.n	8000af6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0e8      	b.n	8000cc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	331b      	adds	r3, #27
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	4413      	add	r3, r2
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0204 	and.w	r2, r3, #4
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10c      	bne.n	8000b2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	331b      	adds	r3, #27
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4413      	add	r3, r2
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0d5b      	lsrs	r3, r3, #21
 8000b24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e00b      	b.n	8000b46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	331b      	adds	r3, #27
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	4413      	add	r3, r2
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	331b      	adds	r3, #27
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	4413      	add	r3, r2
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0202 	and.w	r2, r3, #2
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	331b      	adds	r3, #27
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	4413      	add	r3, r2
 8000b68:	3304      	adds	r3, #4
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2208      	movs	r2, #8
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	e00b      	b.n	8000b94 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	331b      	adds	r3, #27
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	4413      	add	r3, r2
 8000b88:	3304      	adds	r3, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 020f 	and.w	r2, r3, #15
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	331b      	adds	r3, #27
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	331b      	adds	r3, #27
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3304      	adds	r3, #4
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4413      	add	r3, r2
 8000bce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	0a1a      	lsrs	r2, r3, #8
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0c1a      	lsrs	r2, r3, #16
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4413      	add	r3, r2
 8000c18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	0e1a      	lsrs	r2, r3, #24
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3303      	adds	r3, #3
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	4413      	add	r3, r2
 8000c32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0a1a      	lsrs	r2, r3, #8
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3305      	adds	r3, #5
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	4413      	add	r3, r2
 8000c64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0c1a      	lsrs	r2, r3, #16
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	3306      	adds	r3, #6
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0e1a      	lsrs	r2, r3, #24
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3307      	adds	r3, #7
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0220 	orr.w	r2, r2, #32
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	e007      	b.n	8000cb6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0220 	orr.w	r2, r2, #32
 8000cb4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e006      	b.n	8000cc8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
  }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	371c      	adds	r7, #28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d002      	beq.n	8000cf0 <HAL_CAN_ActivateNotification+0x1e>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d109      	bne.n	8000d04 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6959      	ldr	r1, [r3, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e006      	b.n	8000d12 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
  }
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d07c      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d023      	beq.n	8000db4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f983 	bl	800108a <HAL_CAN_TxMailbox0CompleteCallback>
 8000d84:	e016      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
 8000d98:	e00c      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dac:	e002      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f986 	bl	80010c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d024      	beq.n	8000e08 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f962 	bl	800109c <HAL_CAN_TxMailbox1CompleteCallback>
 8000dd8:	e016      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
 8000dec:	e00c      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000e00:	e002      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f965 	bl	80010d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d024      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f941 	bl	80010ae <HAL_CAN_TxMailbox2CompleteCallback>
 8000e2c:	e016      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	e00c      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
 8000e54:	e002      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f944 	bl	80010e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00c      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2208      	movs	r2, #8
 8000e9a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f92a 	bl	80010f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff f96a 	bl	8000194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	f003 0320 	and.w	r3, r3, #32
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2208      	movs	r2, #8
 8000efe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f901 	bl	8001108 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff f968 	bl	80001f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8ea 	bl	800111a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2208      	movs	r2, #8
 8000f60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f8e2 	bl	800112c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d07b      	beq.n	800106a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d072      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d043      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d03e      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000fea:	2b60      	cmp	r3, #96	; 0x60
 8000fec:	d02b      	beq.n	8001046 <HAL_CAN_IRQHandler+0x32a>
 8000fee:	2b60      	cmp	r3, #96	; 0x60
 8000ff0:	d82e      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8000ff2:	2b50      	cmp	r3, #80	; 0x50
 8000ff4:	d022      	beq.n	800103c <HAL_CAN_IRQHandler+0x320>
 8000ff6:	2b50      	cmp	r3, #80	; 0x50
 8000ff8:	d82a      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8000ffa:	2b40      	cmp	r3, #64	; 0x40
 8000ffc:	d019      	beq.n	8001032 <HAL_CAN_IRQHandler+0x316>
 8000ffe:	2b40      	cmp	r3, #64	; 0x40
 8001000:	d826      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8001002:	2b30      	cmp	r3, #48	; 0x30
 8001004:	d010      	beq.n	8001028 <HAL_CAN_IRQHandler+0x30c>
 8001006:	2b30      	cmp	r3, #48	; 0x30
 8001008:	d822      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 800100a:	2b10      	cmp	r3, #16
 800100c:	d002      	beq.n	8001014 <HAL_CAN_IRQHandler+0x2f8>
 800100e:	2b20      	cmp	r3, #32
 8001010:	d005      	beq.n	800101e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001012:	e01d      	b.n	8001050 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800101c:	e019      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001026:	e014      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001030:	e00f      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800103a:	e00a      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001044:	e005      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800104e:	e000      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            break;
 8001050:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001060:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2204      	movs	r2, #4
 8001068:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f85e 	bl	800113e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4906      	ldr	r1, [pc, #24]	; (80011e8 <__NVIC_EnableIRQ+0x34>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff90 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff2d 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff42 	bl	8001198 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff35 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e169      	b.n	8001654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001380:	2201      	movs	r2, #1
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8158 	bne.w	800164e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a9a      	ldr	r2, [pc, #616]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d05e      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013a8:	4a98      	ldr	r2, [pc, #608]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d875      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ae:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d058      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013b4:	4a96      	ldr	r2, [pc, #600]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d86f      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ba:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d052      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013c0:	4a94      	ldr	r2, [pc, #592]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d869      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013c6:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04c      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013cc:	4a92      	ldr	r2, [pc, #584]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d863      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013d2:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d046      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013d8:	4a90      	ldr	r2, [pc, #576]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d85d      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d82a      	bhi.n	8001438 <HAL_GPIO_Init+0xcc>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d859      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <HAL_GPIO_Init+0x80>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001453 	.word	0x08001453
 80013f8:	08001495 	.word	0x08001495
 80013fc:	0800149b 	.word	0x0800149b
 8001400:	0800149b 	.word	0x0800149b
 8001404:	0800149b 	.word	0x0800149b
 8001408:	0800149b 	.word	0x0800149b
 800140c:	0800149b 	.word	0x0800149b
 8001410:	0800149b 	.word	0x0800149b
 8001414:	0800149b 	.word	0x0800149b
 8001418:	0800149b 	.word	0x0800149b
 800141c:	0800149b 	.word	0x0800149b
 8001420:	0800149b 	.word	0x0800149b
 8001424:	0800149b 	.word	0x0800149b
 8001428:	0800149b 	.word	0x0800149b
 800142c:	0800149b 	.word	0x0800149b
 8001430:	08001449 	.word	0x08001449
 8001434:	0800145d 	.word	0x0800145d
 8001438:	4a79      	ldr	r2, [pc, #484]	; (8001620 <HAL_GPIO_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e029      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e024      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01f      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e01a      	b.n	800149c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e013      	b.n	800149c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e009      	b.n	800149c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e003      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x130>
          break;
 800149a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d801      	bhi.n	80014a6 <HAL_GPIO_Init+0x13a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_Init+0x13e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	; 0xff
 80014b0:	d802      	bhi.n	80014b8 <HAL_GPIO_Init+0x14c>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x152>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3b08      	subs	r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	210f      	movs	r1, #15
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_GPIO_Init+0x2c0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e0>
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 800154c:	2304      	movs	r3, #4
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001558:	2300      	movs	r3, #0
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156a:	492f      	ldr	r1, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	492c      	ldr	r1, [pc, #176]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4928      	ldr	r1, [pc, #160]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4922      	ldr	r1, [pc, #136]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	491e      	ldr	r1, [pc, #120]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4918      	ldr	r1, [pc, #96]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4914      	ldr	r1, [pc, #80]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e021      	b.n	800164e <HAL_GPIO_Init+0x2e2>
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400
 800163c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_GPIO_Init+0x304>)
 800164a:	4013      	ands	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae8e 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	; 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43d9      	mvns	r1, r3
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	400b      	ands	r3, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e272      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00c      	beq.n	800171e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d112      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06c      	beq.n	8001804 <HAL_RCC_OscConfig+0x12c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d168      	bne.n	8001804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e24c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x76>
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a77      	ldr	r2, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0xbc>
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a71      	ldr	r2, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7fe ff5a 	bl	800066c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7fe ff56 	bl	800066c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e200      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xe4>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7fe ff46 	bl	800066c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7fe ff42 	bl	800066c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1ec      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10c>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1c0      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7fe fefb 	bl	800066c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7fe fef7 	bl	800066c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1a1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe feda 	bl	800066c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7fe fed6 	bl	800066c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e180      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03a      	beq.n	800195c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7fe feba 	bl	800066c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7fe feb6 	bl	800066c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e160      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fa9c 	bl	8001e58 <RCC_Delay>
 8001920:	e01c      	b.n	800195c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7fe fea0 	bl	800066c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7fe fe9c 	bl	800066c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d908      	bls.n	8001950 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e146      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	42420000 	.word	0x42420000
 800194c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e9      	bne.n	8001930 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a6 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7fe fe5d 	bl	800066c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7fe fe59 	bl	800066c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e103      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x312>
 80019dc:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e02d      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x334>
 80019f2:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a69      	ldr	r2, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x356>
 8001a14:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a60      	ldr	r2, [pc, #384]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a5a      	ldr	r2, [pc, #360]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fe0d 	bl	800066c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7fe fe09 	bl	800066c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0b1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x37e>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fdf7 	bl	800066c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fdf3 	bl	800066c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e09b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8087 	beq.w	8001bce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d061      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d146      	bne.n	8001b62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7fe fdc7 	bl	800066c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7fe fdc3 	bl	800066c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e06d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4921      	ldr	r1, [pc, #132]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a19      	ldr	r1, [r3, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	491b      	ldr	r1, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7fe fd97 	bl	800066c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7fe fd93 	bl	800066c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e03d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46a>
 8001b60:	e035      	b.n	8001bce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe fd80 	bl	800066c <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe fd7c 	bl	800066c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e026      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x498>
 8001b8e:	e01e      	b.n	8001bce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e019      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x500>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0d0      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4965      	ldr	r1, [pc, #404]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	494d      	ldr	r1, [pc, #308]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d040      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e073      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06b      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4936      	ldr	r1, [pc, #216]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7fe fcce 	bl	800066c <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7fe fcca 	bl	800066c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e053      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d210      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4922      	ldr	r1, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e032      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4916      	ldr	r1, [pc, #88]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d6a:	f000 f821 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490a      	ldr	r1, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1cc>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x1d0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fc2c 	bl	80005e8 <HAL_InitTick>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08001f04 	.word	0x08001f04
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dde:	e027      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001de2:	613b      	str	r3, [r7, #16]
      break;
 8001de4:	e027      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0c5b      	lsrs	r3, r3, #17
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e12:	fb03 f202 	mul.w	r2, r3, r2
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e004      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	613b      	str	r3, [r7, #16]
      break;
 8001e2e:	e002      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e32:	613b      	str	r3, [r7, #16]
      break;
 8001e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e36:	693b      	ldr	r3, [r7, #16]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	08001f14 	.word	0x08001f14
 8001e50:	08001f24 	.word	0x08001f24
 8001e54:	003d0900 	.word	0x003d0900

08001e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <RCC_Delay+0x34>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <RCC_Delay+0x38>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0a5b      	lsrs	r3, r3, #9
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e74:	bf00      	nop
  }
  while (Delay --);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	60fa      	str	r2, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f9      	bne.n	8001e74 <RCC_Delay+0x1c>
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <memset>:
 8001e94:	4603      	mov	r3, r0
 8001e96:	4402      	add	r2, r0
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <memset+0xa>
 8001e9c:	4770      	bx	lr
 8001e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001ea2:	e7f9      	b.n	8001e98 <memset+0x4>

08001ea4 <__libc_init_array>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	4d0c      	ldr	r5, [pc, #48]	; (8001edc <__libc_init_array+0x38>)
 8001eaa:	4c0d      	ldr	r4, [pc, #52]	; (8001ee0 <__libc_init_array+0x3c>)
 8001eac:	1b64      	subs	r4, r4, r5
 8001eae:	10a4      	asrs	r4, r4, #2
 8001eb0:	42a6      	cmp	r6, r4
 8001eb2:	d109      	bne.n	8001ec8 <__libc_init_array+0x24>
 8001eb4:	f000 f81a 	bl	8001eec <_init>
 8001eb8:	2600      	movs	r6, #0
 8001eba:	4d0a      	ldr	r5, [pc, #40]	; (8001ee4 <__libc_init_array+0x40>)
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	; (8001ee8 <__libc_init_array+0x44>)
 8001ebe:	1b64      	subs	r4, r4, r5
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	42a6      	cmp	r6, r4
 8001ec4:	d105      	bne.n	8001ed2 <__libc_init_array+0x2e>
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ecc:	4798      	blx	r3
 8001ece:	3601      	adds	r6, #1
 8001ed0:	e7ee      	b.n	8001eb0 <__libc_init_array+0xc>
 8001ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed6:	4798      	blx	r3
 8001ed8:	3601      	adds	r6, #1
 8001eda:	e7f2      	b.n	8001ec2 <__libc_init_array+0x1e>
 8001edc:	08001f28 	.word	0x08001f28
 8001ee0:	08001f28 	.word	0x08001f28
 8001ee4:	08001f28 	.word	0x08001f28
 8001ee8:	08001f2c 	.word	0x08001f2c

08001eec <_init>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	bf00      	nop
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr

08001ef8 <_fini>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	bf00      	nop
 8001efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efe:	bc08      	pop	{r3}
 8001f00:	469e      	mov	lr, r3
 8001f02:	4770      	bx	lr
