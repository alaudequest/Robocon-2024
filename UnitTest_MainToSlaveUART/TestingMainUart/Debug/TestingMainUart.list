
TestingMainUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003798  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003940  08003940  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000120  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d735  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc4  00000000  00000000  0002d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c40  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000099d  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e21  00000000  00000000  00030b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fc91  00000000  00000000  0005197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caab9  00000000  00000000  0006160f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003390  00000000  00000000  0012c0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003908 	.word	0x08003908

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003908 	.word	0x08003908

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ControlDriver>:
void ControlDriver(
uint8_t ID1, uint8_t MODE1, float BLDCSpeed1, float DCPos1,
uint8_t ID2, uint8_t MODE2, float BLDCSpeed2, float DCPos2,
uint8_t ID3, uint8_t MODE3, float BLDCSpeed3, float DCPos3,
uint8_t ID4, uint8_t MODE4, float BLDCSpeed4, float DCPos4)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08f      	sub	sp, #60	; 0x3c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	ed87 0a08 	vstr	s0, [r7, #32]
 80004d2:	edc7 0a07 	vstr	s1, [r7, #28]
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	ed87 1a06 	vstr	s2, [r7, #24]
 80004de:	edc7 1a05 	vstr	s3, [r7, #20]
 80004e2:	ed87 2a04 	vstr	s4, [r7, #16]
 80004e6:	edc7 2a03 	vstr	s5, [r7, #12]
 80004ea:	ed87 3a02 	vstr	s6, [r7, #8]
 80004ee:	edc7 3a01 	vstr	s7, [r7, #4]
 80004f2:	4623      	mov	r3, r4
 80004f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80004f8:	4603      	mov	r3, r0
 80004fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80004fe:	460b      	mov	r3, r1
 8000500:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000504:	4613      	mov	r3, r2
 8000506:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t *pByte = NULL;
 800050a:	2300      	movs	r3, #0
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Begin: Slave 1 */
	pByte = &ID1;
 800050e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[0]=pByte[0];
 8000514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	4b88      	ldr	r3, [pc, #544]	; (800073c <ControlDriver+0x278>)
 800051a:	701a      	strb	r2, [r3, #0]
	pByte = &MODE1;
 800051c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[1]=pByte[0];
 8000522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	4b85      	ldr	r3, [pc, #532]	; (800073c <ControlDriver+0x278>)
 8000528:	705a      	strb	r2, [r3, #1]
	pByte = &BLDCSpeed1;
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 2; i < 6; i++)
 8000530:	2302      	movs	r3, #2
 8000532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000536:	e00e      	b.n	8000556 <ControlDriver+0x92>
	{
		Tx_Buf[i]=pByte[i-2];
 8000538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800053c:	3b02      	subs	r3, #2
 800053e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000540:	441a      	add	r2, r3
 8000542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000546:	7811      	ldrb	r1, [r2, #0]
 8000548:	4a7c      	ldr	r2, [pc, #496]	; (800073c <ControlDriver+0x278>)
 800054a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 2; i < 6; i++)
 800054c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000550:	3301      	adds	r3, #1
 8000552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000556:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800055a:	2b05      	cmp	r3, #5
 800055c:	d9ec      	bls.n	8000538 <ControlDriver+0x74>
	}
	pByte = &DCPos1;
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 6; i < 10; i++)
 8000564:	2306      	movs	r3, #6
 8000566:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800056a:	e00e      	b.n	800058a <ControlDriver+0xc6>
	{
		Tx_Buf[i]=pByte[i-6];
 800056c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000570:	3b06      	subs	r3, #6
 8000572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000574:	441a      	add	r2, r3
 8000576:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800057a:	7811      	ldrb	r1, [r2, #0]
 800057c:	4a6f      	ldr	r2, [pc, #444]	; (800073c <ControlDriver+0x278>)
 800057e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 6; i < 10; i++)
 8000580:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000584:	3301      	adds	r3, #1
 8000586:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800058a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800058e:	2b09      	cmp	r3, #9
 8000590:	d9ec      	bls.n	800056c <ControlDriver+0xa8>
	}
	/* End: Slave 1 */
	/* Begin: Slave 2 */
	pByte = &ID2;
 8000592:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[10]=pByte[0];
 8000598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	4b67      	ldr	r3, [pc, #412]	; (800073c <ControlDriver+0x278>)
 800059e:	729a      	strb	r2, [r3, #10]
	pByte = &MODE2;
 80005a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[11]=pByte[0];
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <ControlDriver+0x278>)
 80005ac:	72da      	strb	r2, [r3, #11]
	pByte = &BLDCSpeed2;
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 12; i < 16; i++)
 80005b4:	230c      	movs	r3, #12
 80005b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80005ba:	e00e      	b.n	80005da <ControlDriver+0x116>
	{
		Tx_Buf[i]=pByte[i-12];
 80005bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005c0:	3b0c      	subs	r3, #12
 80005c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005c4:	441a      	add	r2, r3
 80005c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005ca:	7811      	ldrb	r1, [r2, #0]
 80005cc:	4a5b      	ldr	r2, [pc, #364]	; (800073c <ControlDriver+0x278>)
 80005ce:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 12; i < 16; i++)
 80005d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005d4:	3301      	adds	r3, #1
 80005d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80005da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	d9ec      	bls.n	80005bc <ControlDriver+0xf8>
	}
	pByte = &DCPos2;
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 16; i < 20; i++)
 80005e8:	2310      	movs	r3, #16
 80005ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80005ee:	e00e      	b.n	800060e <ControlDriver+0x14a>
	{
		Tx_Buf[i]=pByte[i-16];
 80005f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80005f4:	3b10      	subs	r3, #16
 80005f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005f8:	441a      	add	r2, r3
 80005fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80005fe:	7811      	ldrb	r1, [r2, #0]
 8000600:	4a4e      	ldr	r2, [pc, #312]	; (800073c <ControlDriver+0x278>)
 8000602:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 16; i < 20; i++)
 8000604:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000608:	3301      	adds	r3, #1
 800060a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800060e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000612:	2b13      	cmp	r3, #19
 8000614:	d9ec      	bls.n	80005f0 <ControlDriver+0x12c>
	}
	/* End: Slave 2 */
	/* Begin: Slave 3 */
	pByte = &ID3;
 8000616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[20]=pByte[0];
 800061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b46      	ldr	r3, [pc, #280]	; (800073c <ControlDriver+0x278>)
 8000622:	751a      	strb	r2, [r3, #20]
	pByte = &MODE3;
 8000624:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[21]=pByte[0];
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b43      	ldr	r3, [pc, #268]	; (800073c <ControlDriver+0x278>)
 8000630:	755a      	strb	r2, [r3, #21]
	pByte = &BLDCSpeed3;
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 22; i < 26; i++)
 8000638:	2316      	movs	r3, #22
 800063a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800063e:	e00e      	b.n	800065e <ControlDriver+0x19a>
	{
		Tx_Buf[i]=pByte[i-22];
 8000640:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000644:	3b16      	subs	r3, #22
 8000646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000648:	441a      	add	r2, r3
 800064a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800064e:	7811      	ldrb	r1, [r2, #0]
 8000650:	4a3a      	ldr	r2, [pc, #232]	; (800073c <ControlDriver+0x278>)
 8000652:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 22; i < 26; i++)
 8000654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000658:	3301      	adds	r3, #1
 800065a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800065e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000662:	2b19      	cmp	r3, #25
 8000664:	d9ec      	bls.n	8000640 <ControlDriver+0x17c>
	}
	pByte = &DCPos3;
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 26; i < 30; i++)
 800066c:	231a      	movs	r3, #26
 800066e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000672:	e00e      	b.n	8000692 <ControlDriver+0x1ce>
	{
		Tx_Buf[i]=pByte[i-26];
 8000674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000678:	3b1a      	subs	r3, #26
 800067a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800067c:	441a      	add	r2, r3
 800067e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000682:	7811      	ldrb	r1, [r2, #0]
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <ControlDriver+0x278>)
 8000686:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 26; i < 30; i++)
 8000688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800068c:	3301      	adds	r3, #1
 800068e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000692:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000696:	2b1d      	cmp	r3, #29
 8000698:	d9ec      	bls.n	8000674 <ControlDriver+0x1b0>
	}
	/* End: Slave 3 */
	/* Begin: Slave 4 */
	pByte = &ID4;
 800069a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[30]=pByte[0];
 80006a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <ControlDriver+0x278>)
 80006a6:	779a      	strb	r2, [r3, #30]
	pByte = &MODE4;
 80006a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	Tx_Buf[31]=pByte[0];
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <ControlDriver+0x278>)
 80006b4:	77da      	strb	r2, [r3, #31]
	pByte = &BLDCSpeed4;
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 32; i < 36; i++)
 80006bc:	2320      	movs	r3, #32
 80006be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80006c2:	e00e      	b.n	80006e2 <ControlDriver+0x21e>
	{
		Tx_Buf[i]=pByte[i-32];
 80006c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006c8:	3b20      	subs	r3, #32
 80006ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006cc:	441a      	add	r2, r3
 80006ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006d2:	7811      	ldrb	r1, [r2, #0]
 80006d4:	4a19      	ldr	r2, [pc, #100]	; (800073c <ControlDriver+0x278>)
 80006d6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 32; i < 36; i++)
 80006d8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006dc:	3301      	adds	r3, #1
 80006de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80006e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006e6:	2b23      	cmp	r3, #35	; 0x23
 80006e8:	d9ec      	bls.n	80006c4 <ControlDriver+0x200>
	}
	pByte = &DCPos4;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint8_t i = 36; i < 40; i++)
 80006ee:	2324      	movs	r3, #36	; 0x24
 80006f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80006f4:	e00e      	b.n	8000714 <ControlDriver+0x250>
	{
		Tx_Buf[i]=pByte[i-36];
 80006f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006fa:	3b24      	subs	r3, #36	; 0x24
 80006fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fe:	441a      	add	r2, r3
 8000700:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000704:	7811      	ldrb	r1, [r2, #0]
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <ControlDriver+0x278>)
 8000708:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 36; i < 40; i++)
 800070a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800070e:	3301      	adds	r3, #1
 8000710:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000714:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000718:	2b27      	cmp	r3, #39	; 0x27
 800071a:	d9ec      	bls.n	80006f6 <ControlDriver+0x232>
	}
	/* End: Slave 4 */
	Tx_Buf[40] = 13;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <ControlDriver+0x278>)
 800071e:	220d      	movs	r2, #13
 8000720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	HAL_UART_Transmit(&huart1, Tx_Buf, 41, HAL_MAX_DELAY);
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	2229      	movs	r2, #41	; 0x29
 800072a:	4904      	ldr	r1, [pc, #16]	; (800073c <ControlDriver+0x278>)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <ControlDriver+0x27c>)
 800072e:	f002 f8f8 	bl	8002922 <HAL_UART_Transmit>
}
 8000732:	bf00      	nop
 8000734:	373c      	adds	r7, #60	; 0x3c
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	bf00      	nop
 800073c:	200000bc 	.word	0x200000bc
 8000740:	20000078 	.word	0x20000078

08000744 <commandTask>:

/* -------------------------Begin: Testing Command----------------------------*/
float BLDCTestingSpeed = 150.23;
float DCTestingPOS = 45.01;
void commandTask(int testCommand)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af04      	add	r7, sp, #16
 800074a:	6078      	str	r0, [r7, #4]
	switch(testCommand)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	2b03      	cmp	r3, #3
 8000752:	f200 80c7 	bhi.w	80008e4 <commandTask+0x1a0>
 8000756:	a201      	add	r2, pc, #4	; (adr r2, 800075c <commandTask+0x18>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	0800076d 	.word	0x0800076d
 8000760:	080007cf 	.word	0x080007cf
 8000764:	0800082d 	.word	0x0800082d
 8000768:	08000887 	.word	0x08000887
//			break;
//		default:
//			ControlDriver(1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0);
//			break;
		case 1:
			ControlDriver(1, 1, -BLDCTestingSpeed, DCTestingPOS, 2, 1, -BLDCTestingSpeed, -DCTestingPOS, 3, 0, 0, 0, 4, 0, 0, 0);
 800076c:	4b6f      	ldr	r3, [pc, #444]	; (800092c <commandTask+0x1e8>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	eeb1 7a67 	vneg.f32	s14, s15
 8000776:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <commandTask+0x1ec>)
 8000778:	edd3 6a00 	vldr	s13, [r3]
 800077c:	4b6b      	ldr	r3, [pc, #428]	; (800092c <commandTask+0x1e8>)
 800077e:	edd3 7a00 	vldr	s15, [r3]
 8000782:	eeb1 6a67 	vneg.f32	s12, s15
 8000786:	4b6a      	ldr	r3, [pc, #424]	; (8000930 <commandTask+0x1ec>)
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	eef1 7a67 	vneg.f32	s15, s15
 8000790:	2300      	movs	r3, #0
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	2304      	movs	r3, #4
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	2300      	movs	r3, #0
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2303      	movs	r3, #3
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	eddf 3a64 	vldr	s7, [pc, #400]	; 8000934 <commandTask+0x1f0>
 80007a4:	ed9f 3a63 	vldr	s6, [pc, #396]	; 8000934 <commandTask+0x1f0>
 80007a8:	eddf 2a62 	vldr	s5, [pc, #392]	; 8000934 <commandTask+0x1f0>
 80007ac:	ed9f 2a61 	vldr	s4, [pc, #388]	; 8000934 <commandTask+0x1f0>
 80007b0:	eef0 1a67 	vmov.f32	s3, s15
 80007b4:	eeb0 1a46 	vmov.f32	s2, s12
 80007b8:	2301      	movs	r3, #1
 80007ba:	2202      	movs	r2, #2
 80007bc:	eef0 0a66 	vmov.f32	s1, s13
 80007c0:	eeb0 0a47 	vmov.f32	s0, s14
 80007c4:	2101      	movs	r1, #1
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fe7c 	bl	80004c4 <ControlDriver>
			break;
 80007cc:	e0a9      	b.n	8000922 <commandTask+0x1de>
		case 2:
			ControlDriver(1, 1, BLDCTestingSpeed, -DCTestingPOS, 2, 1, -BLDCTestingSpeed, DCTestingPOS, 3, 0, 0, 0, 4, 0, 0, 0);
 80007ce:	4b57      	ldr	r3, [pc, #348]	; (800092c <commandTask+0x1e8>)
 80007d0:	ed93 7a00 	vldr	s14, [r3]
 80007d4:	4b56      	ldr	r3, [pc, #344]	; (8000930 <commandTask+0x1ec>)
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	eef1 6a67 	vneg.f32	s13, s15
 80007de:	4b53      	ldr	r3, [pc, #332]	; (800092c <commandTask+0x1e8>)
 80007e0:	edd3 7a00 	vldr	s15, [r3]
 80007e4:	eef1 7a67 	vneg.f32	s15, s15
 80007e8:	4b51      	ldr	r3, [pc, #324]	; (8000930 <commandTask+0x1ec>)
 80007ea:	ed93 6a00 	vldr	s12, [r3]
 80007ee:	2300      	movs	r3, #0
 80007f0:	9303      	str	r3, [sp, #12]
 80007f2:	2304      	movs	r3, #4
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2300      	movs	r3, #0
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2303      	movs	r3, #3
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	eddf 3a4d 	vldr	s7, [pc, #308]	; 8000934 <commandTask+0x1f0>
 8000802:	ed9f 3a4c 	vldr	s6, [pc, #304]	; 8000934 <commandTask+0x1f0>
 8000806:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8000934 <commandTask+0x1f0>
 800080a:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8000934 <commandTask+0x1f0>
 800080e:	eef0 1a46 	vmov.f32	s3, s12
 8000812:	eeb0 1a67 	vmov.f32	s2, s15
 8000816:	2301      	movs	r3, #1
 8000818:	2202      	movs	r2, #2
 800081a:	eef0 0a66 	vmov.f32	s1, s13
 800081e:	eeb0 0a47 	vmov.f32	s0, s14
 8000822:	2101      	movs	r1, #1
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fe4d 	bl	80004c4 <ControlDriver>
			break;
 800082a:	e07a      	b.n	8000922 <commandTask+0x1de>
		case 3:
			ControlDriver(1, 1, BLDCTestingSpeed, DCTestingPOS, 2, 1, BLDCTestingSpeed, -DCTestingPOS, 3, 0, 0, 0, 4, 0, 0, 0);
 800082c:	4b3f      	ldr	r3, [pc, #252]	; (800092c <commandTask+0x1e8>)
 800082e:	ed93 7a00 	vldr	s14, [r3]
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <commandTask+0x1ec>)
 8000834:	edd3 6a00 	vldr	s13, [r3]
 8000838:	4b3c      	ldr	r3, [pc, #240]	; (800092c <commandTask+0x1e8>)
 800083a:	ed93 6a00 	vldr	s12, [r3]
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <commandTask+0x1ec>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	eef1 7a67 	vneg.f32	s15, s15
 8000848:	2300      	movs	r3, #0
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	2304      	movs	r3, #4
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	2300      	movs	r3, #0
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2303      	movs	r3, #3
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	eddf 3a36 	vldr	s7, [pc, #216]	; 8000934 <commandTask+0x1f0>
 800085c:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8000934 <commandTask+0x1f0>
 8000860:	eddf 2a34 	vldr	s5, [pc, #208]	; 8000934 <commandTask+0x1f0>
 8000864:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8000934 <commandTask+0x1f0>
 8000868:	eef0 1a67 	vmov.f32	s3, s15
 800086c:	eeb0 1a46 	vmov.f32	s2, s12
 8000870:	2301      	movs	r3, #1
 8000872:	2202      	movs	r2, #2
 8000874:	eef0 0a66 	vmov.f32	s1, s13
 8000878:	eeb0 0a47 	vmov.f32	s0, s14
 800087c:	2101      	movs	r1, #1
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fe20 	bl	80004c4 <ControlDriver>
			break;
 8000884:	e04d      	b.n	8000922 <commandTask+0x1de>
		case 4:
			ControlDriver(1, 1, -BLDCTestingSpeed, -DCTestingPOS, 2, 1, BLDCTestingSpeed, DCTestingPOS, 3, 0, 0, 0, 4, 0, 0, 0);
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <commandTask+0x1e8>)
 8000888:	edd3 7a00 	vldr	s15, [r3]
 800088c:	eeb1 7a67 	vneg.f32	s14, s15
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <commandTask+0x1ec>)
 8000892:	edd3 7a00 	vldr	s15, [r3]
 8000896:	eef1 7a67 	vneg.f32	s15, s15
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <commandTask+0x1e8>)
 800089c:	edd3 6a00 	vldr	s13, [r3]
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <commandTask+0x1ec>)
 80008a2:	ed93 6a00 	vldr	s12, [r3]
 80008a6:	2300      	movs	r3, #0
 80008a8:	9303      	str	r3, [sp, #12]
 80008aa:	2304      	movs	r3, #4
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2300      	movs	r3, #0
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	2303      	movs	r3, #3
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8000934 <commandTask+0x1f0>
 80008ba:	ed9f 3a1e 	vldr	s6, [pc, #120]	; 8000934 <commandTask+0x1f0>
 80008be:	eddf 2a1d 	vldr	s5, [pc, #116]	; 8000934 <commandTask+0x1f0>
 80008c2:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8000934 <commandTask+0x1f0>
 80008c6:	eef0 1a46 	vmov.f32	s3, s12
 80008ca:	eeb0 1a66 	vmov.f32	s2, s13
 80008ce:	2301      	movs	r3, #1
 80008d0:	2202      	movs	r2, #2
 80008d2:	eef0 0a67 	vmov.f32	s1, s15
 80008d6:	eeb0 0a47 	vmov.f32	s0, s14
 80008da:	2101      	movs	r1, #1
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fdf1 	bl	80004c4 <ControlDriver>
			break;
 80008e2:	e01e      	b.n	8000922 <commandTask+0x1de>
		default:
			ControlDriver(1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0);
 80008e4:	2300      	movs	r3, #0
 80008e6:	9303      	str	r3, [sp, #12]
 80008e8:	2304      	movs	r3, #4
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	2300      	movs	r3, #0
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	2303      	movs	r3, #3
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	eddf 3a0f 	vldr	s7, [pc, #60]	; 8000934 <commandTask+0x1f0>
 80008f8:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8000934 <commandTask+0x1f0>
 80008fc:	eddf 2a0d 	vldr	s5, [pc, #52]	; 8000934 <commandTask+0x1f0>
 8000900:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 8000934 <commandTask+0x1f0>
 8000904:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8000934 <commandTask+0x1f0>
 8000908:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8000934 <commandTask+0x1f0>
 800090c:	2300      	movs	r3, #0
 800090e:	2202      	movs	r2, #2
 8000910:	eddf 0a08 	vldr	s1, [pc, #32]	; 8000934 <commandTask+0x1f0>
 8000914:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000934 <commandTask+0x1f0>
 8000918:	2100      	movs	r1, #0
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff fdd2 	bl	80004c4 <ControlDriver>
			break;
 8000920:	bf00      	nop
	}
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004
 8000934:	00000000 	.word	0x00000000

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fae2 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f82a 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f908 	bl	8000b58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000948:	f000 f8dc 	bl	8000b04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800094c:	f000 f88e 	bl	8000a6c <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  commandTask(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fef7 	bl	8000744 <commandTask>
	  HAL_Delay(5000);
 8000956:	f241 3088 	movw	r0, #5000	; 0x1388
 800095a:	f000 fb15 	bl	8000f88 <HAL_Delay>
	  commandTask(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fef0 	bl	8000744 <commandTask>
	  HAL_Delay(5000);
 8000964:	f241 3088 	movw	r0, #5000	; 0x1388
 8000968:	f000 fb0e 	bl	8000f88 <HAL_Delay>
	  commandTask(3);
 800096c:	2003      	movs	r0, #3
 800096e:	f7ff fee9 	bl	8000744 <commandTask>
	  HAL_Delay(5000);
 8000972:	f241 3088 	movw	r0, #5000	; 0x1388
 8000976:	f000 fb07 	bl	8000f88 <HAL_Delay>
	  commandTask(4);
 800097a:	2004      	movs	r0, #4
 800097c:	f7ff fee2 	bl	8000744 <commandTask>
	  HAL_Delay(5000);
 8000980:	f241 3088 	movw	r0, #5000	; 0x1388
 8000984:	f000 fb00 	bl	8000f88 <HAL_Delay>
	  commandTask(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fedb 	bl	8000744 <commandTask>
	  HAL_Delay(5000);
 800098e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000992:	f000 faf9 	bl	8000f88 <HAL_Delay>
	  commandTask(1);
 8000996:	e7db      	b.n	8000950 <main+0x18>

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	; 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 ff82 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <SystemClock_Config+0xcc>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <SystemClock_Config+0xcc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <SystemClock_Config+0xd0>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <SystemClock_Config+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a0c:	23a8      	movs	r3, #168	; 0xa8
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fde7 	bl	80015f0 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a28:	f000 f8de 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2105      	movs	r1, #5
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f848 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a56:	f000 f8c7 	bl	8000be8 <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3750      	adds	r7, #80	; 0x50
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a92:	22a7      	movs	r2, #167	; 0xa7
 8000a94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000a9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000ab2:	f001 fa67 	bl	8001f84 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000abc:	f000 f894 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000ace:	f001 fc21 	bl	8002314 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f000 f886 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM2_Init+0x94>)
 8000aea:	f001 fe3d 	bl	8002768 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 f878 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000030 	.word	0x20000030

08000b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART1_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f001 fea4 	bl	8002888 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f84f 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000078 	.word	0x20000078
 8000b54:	40011000 	.word	0x40011000

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_GPIO_Init+0x68>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 f9b7 	bl	8000f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010000 	.word	0x40010000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c54:	d10d      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_UART_MspInit+0x94>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d133      	bne.n	8000d0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cfa:	f000 fadd 	bl	80012b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2025      	movs	r0, #37	; 0x25
 8000d04:	f000 fa1c 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d08:	2025      	movs	r0, #37	; 0x25
 8000d0a:	f000 fa35 	bl	8001178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6453      	str	r3, [r2, #68]	; 0x44
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_InitTick+0xd4>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d50:	f107 020c 	add.w	r2, r7, #12
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 f8e0 	bl	8001f20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d60:	f001 f8ca 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8000d64:	4603      	mov	r3, r0
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <HAL_InitTick+0xd8>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0c9b      	lsrs	r3, r3, #18
 8000d74:	3b01      	subs	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_InitTick+0xe0>)
 8000d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_InitTick+0xdc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <HAL_InitTick+0xdc>)
 8000da0:	f001 f8f0 	bl	8001f84 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d11b      	bne.n	8000dea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db2:	4813      	ldr	r0, [pc, #76]	; (8000e00 <HAL_InitTick+0xdc>)
 8000db4:	f001 f936 	bl	8002024 <HAL_TIM_Base_Start_IT>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d111      	bne.n	8000dea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f000 f9d6 	bl	8001178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b0f      	cmp	r3, #15
 8000dd0:	d808      	bhi.n	8000de4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	2019      	movs	r0, #25
 8000dd8:	f000 f9b2 	bl	8001140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0xe4>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e002      	b.n	8000dea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	200000e8 	.word	0x200000e8
 8000e04:	40010000 	.word	0x40010000
 8000e08:	2000000c 	.word	0x2000000c

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6a:	f001 f94b 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000e8 	.word	0x200000e8

08000e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART1_IRQHandler+0x10>)
 8000e7e:	f001 fde3 	bl	8002a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000078 	.word	0x20000078

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f002 fcef 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fd29 	bl	8000938 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ef4:	08003948 	.word	0x08003948
  ldr r2, =_sbss
 8000ef8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000efc:	20000134 	.word	0x20000134

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f8fc 	bl	800112a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f7ff fef6 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe5c 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000130 	.word	0x20000130

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000130 	.word	0x20000130

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000010 	.word	0x20000010

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff4c 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001152:	f7ff ff61 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff ffb1 	bl	80010c4 <NVIC_EncodePriority>
 8001162:	4602      	mov	r2, r0
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff80 	bl	8001070 <__NVIC_SetPriority>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff54 	bl	8001034 <__NVIC_EnableIRQ>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a2:	f7ff fee5 	bl	8000f70 <HAL_GetTick>
 80011a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e052      	b.n	800126c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0216 	bic.w	r2, r2, #22
 80011d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <HAL_DMA_Abort+0x62>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001216:	e013      	b.n	8001240 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001218:	f7ff feaa 	bl	8000f70 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b05      	cmp	r3, #5
 8001224:	d90c      	bls.n	8001240 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2220      	movs	r2, #32
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2203      	movs	r2, #3
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e015      	b.n	800126c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e4      	bne.n	8001218 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	223f      	movs	r2, #63	; 0x3f
 8001254:	409a      	lsls	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d004      	beq.n	8001292 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00c      	b.n	80012ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e16b      	b.n	80015ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 815a 	bne.w	80015a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80b4 	beq.w	80015a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a5f      	ldr	r2, [pc, #380]	; (80015c4 <HAL_GPIO_Init+0x30c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_GPIO_Init+0x30c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <HAL_GPIO_Init+0x310>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x314>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d02b      	beq.n	80014de <HAL_GPIO_Init+0x226>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_GPIO_Init+0x318>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d025      	beq.n	80014da <HAL_GPIO_Init+0x222>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <HAL_GPIO_Init+0x31c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01f      	beq.n	80014d6 <HAL_GPIO_Init+0x21e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x320>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_GPIO_Init+0x324>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x216>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x328>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x212>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x20e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	; (80015e8 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x20a>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00e      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014c2:	2308      	movs	r3, #8
 80014c4:	e00c      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014c6:	2306      	movs	r3, #6
 80014c8:	e00a      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x228>
 80014de:	2300      	movs	r3, #0
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f002 0203 	and.w	r2, r2, #3
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x310>)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a32      	ldr	r2, [pc, #200]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_GPIO_Init+0x334>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <HAL_GPIO_Init+0x334>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_GPIO_Init+0x334>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_GPIO_Init+0x334>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <HAL_GPIO_Init+0x334>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f67f ae90 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40021400 	.word	0x40021400
 80015e4:	40021800 	.word	0x40021800
 80015e8:	40021c00 	.word	0x40021c00
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e267      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b85      	ldr	r3, [pc, #532]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b82      	ldr	r3, [pc, #520]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b7e      	ldr	r3, [pc, #504]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e242      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6f      	ldr	r2, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6c      	ldr	r2, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b69      	ldr	r3, [pc, #420]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a68      	ldr	r2, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc62 	bl	8000f70 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc5e 	bl	8000f70 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e207      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc4e 	bl	8000f70 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc4a 	bl	8000f70 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1f3      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1c7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4937      	ldr	r1, [pc, #220]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_OscConfig+0x244>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fc03 	bl	8000f70 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fbff 	bl	8000f70 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1a8      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4925      	ldr	r1, [pc, #148]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x244>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbe2 	bl	8000f70 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fbde 	bl	8000f70 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e187      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d036      	beq.n	8001848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_RCC_OscConfig+0x248>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbc2 	bl	8000f70 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbbe 	bl	8000f70 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e167      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x240>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
 800180e:	e01b      	b.n	8001848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_OscConfig+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fbab 	bl	8000f70 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e00e      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fba7 	bl	8000f70 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d907      	bls.n	800183c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e150      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ea      	bne.n	800181e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8097 	beq.w	8001984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a7c      	ldr	r2, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b77      	ldr	r3, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b74      	ldr	r3, [pc, #464]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a73      	ldr	r2, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fb67 	bl	8000f70 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fb63 	bl	8000f70 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e10c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x474>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x2ea>
 80018cc:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a63      	ldr	r2, [pc, #396]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x30c>
 80018e2:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a5e      	ldr	r2, [pc, #376]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a54      	ldr	r2, [pc, #336]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff fb28 	bl	8000f70 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fb24 	bl	8000f70 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0cb      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x334>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fb12 	bl	8000f70 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fb0e 	bl	8000f70 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b5      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a1 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d05c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d141      	bne.n	8001a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fae2 	bl	8000f70 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fade 	bl	8000f70 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e087      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fab7 	bl	8000f70 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fab3 	bl	8000f70 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e05c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x416>
 8001a24:	e054      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff faa0 	bl	8000f70 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fa9c 	bl	8000f70 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e045      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
 8001a52:	e03d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e038      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000
 8001a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x4ec>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d028      	beq.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d11a      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f9ce 	bl	8000f70 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f9ca 	bl	8000f70 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f84c 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08003920 	.word	0x08003920
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	2000000c 	.word	0x2000000c

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b094      	sub	sp, #80	; 0x50
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b79      	ldr	r3, [pc, #484]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80e1 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e0db      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ce4:	e0db      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cea:	e0d8      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d063      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d1e:	4622      	mov	r2, r4
 8001d20:	462b      	mov	r3, r5
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4621      	mov	r1, r4
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	6139      	str	r1, [r7, #16]
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d50:	4659      	mov	r1, fp
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4651      	mov	r1, sl
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4651      	mov	r1, sl
 8001d60:	ebb2 0801 	subs.w	r8, r2, r1
 8001d64:	4659      	mov	r1, fp
 8001d66:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4699      	mov	r9, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	eb18 0303 	adds.w	r3, r8, r3
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	eb49 0303 	adc.w	r3, r9, r3
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	024b      	lsls	r3, r1, #9
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da8:	4621      	mov	r1, r4
 8001daa:	024a      	lsls	r2, r1, #9
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dbc:	f7fe fa04 	bl	80001c8 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc8:	e058      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de4:	4642      	mov	r2, r8
 8001de6:	464b      	mov	r3, r9
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0159      	lsls	r1, r3, #5
 8001df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df6:	0150      	lsls	r0, r2, #5
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e02:	4649      	mov	r1, r9
 8001e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e20:	eb63 050b 	sbc.w	r5, r3, fp
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00eb      	lsls	r3, r5, #3
 8001e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e32:	00e2      	lsls	r2, r4, #3
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	18e3      	adds	r3, r4, r3
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	464b      	mov	r3, r9
 8001e40:	eb45 0303 	adc.w	r3, r5, r3
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e52:	4629      	mov	r1, r5
 8001e54:	028b      	lsls	r3, r1, #10
 8001e56:	4621      	mov	r1, r4
 8001e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	028a      	lsls	r2, r1, #10
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e66:	2200      	movs	r2, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	61fa      	str	r2, [r7, #28]
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	f7fe f9aa 	bl	80001c8 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3750      	adds	r7, #80	; 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff0 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08003930 	.word	0x08003930

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffdc 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0b5b      	lsrs	r3, r3, #13
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08003930 	.word	0x08003930

08001f20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_RCC_GetClockConfig+0x5c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_RCC_GetClockConfig+0x60>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	601a      	str	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e041      	b.n	800201a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fe4a 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 fa96 	bl	80024f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d001      	beq.n	800203c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e04e      	b.n	80020da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d022      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d01d      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_TIM_Base_Start_IT+0xc8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x80>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_TIM_Base_Start_IT+0xdc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d111      	bne.n	80020c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d010      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	e007      	b.n	80020d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40014000 	.word	0x40014000
 8002100:	40001800 	.word	0x40001800

08002104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0202 	mvn.w	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9b5 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9a7 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f9b8 	bl	80024ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0204 	mvn.w	r2, #4
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f98b 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f97d 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f98e 	bl	80024ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f961 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f953 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f964 	bl	80024ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b10      	cmp	r3, #16
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2208      	movs	r2, #8
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f937 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f929 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f93a 	bl	80024ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fc9e 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fae0 	bl	8002874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8ff 	bl	80024de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 faaa 	bl	8002860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIM_ConfigClockSource+0x1c>
 800232c:	2302      	movs	r3, #2
 800232e:	e0b4      	b.n	800249a <HAL_TIM_ConfigClockSource+0x186>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d03e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xd4>
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	f200 8087 	bhi.w	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f000 8086 	beq.w	8002486 <HAL_TIM_ConfigClockSource+0x172>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d87f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d01a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xa6>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d87b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d050      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x11a>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d877      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d03c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xfa>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d873      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d058      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x13a>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d86f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d064      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d86b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d060      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d867      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d05a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	e062      	b.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 f9ad 	bl	8002728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	609a      	str	r2, [r3, #8]
      break;
 80023e6:	e04f      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 f996 	bl	8002728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e03c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f90a 	bl	8002634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f963 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 800242c:	e02c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f929 	bl	8002692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2160      	movs	r1, #96	; 0x60
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f953 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 800244c:	e01c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f8ea 	bl	8002634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f943 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 800246c:	e00c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 f93a 	bl	80026f2 <TIM_ITRx_SetConfig>
      break;
 800247e:	e003      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e000      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a40      	ldr	r2, [pc, #256]	; (8002608 <TIM_Base_SetConfig+0x114>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <TIM_Base_SetConfig+0x40>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002512:	d00f      	beq.n	8002534 <TIM_Base_SetConfig+0x40>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3d      	ldr	r2, [pc, #244]	; (800260c <TIM_Base_SetConfig+0x118>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00b      	beq.n	8002534 <TIM_Base_SetConfig+0x40>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <TIM_Base_SetConfig+0x11c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d007      	beq.n	8002534 <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <TIM_Base_SetConfig+0x120>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <TIM_Base_SetConfig+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <TIM_Base_SetConfig+0x124>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <TIM_Base_SetConfig+0x114>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d027      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a2c      	ldr	r2, [pc, #176]	; (800260c <TIM_Base_SetConfig+0x118>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d023      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <TIM_Base_SetConfig+0x11c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <TIM_Base_SetConfig+0x120>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01b      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a29      	ldr	r2, [pc, #164]	; (8002618 <TIM_Base_SetConfig+0x124>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d017      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <TIM_Base_SetConfig+0x128>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <TIM_Base_SetConfig+0x12c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00f      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <TIM_Base_SetConfig+0x130>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a25      	ldr	r2, [pc, #148]	; (8002628 <TIM_Base_SetConfig+0x134>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <TIM_Base_SetConfig+0x138>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0xb2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <TIM_Base_SetConfig+0x13c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <TIM_Base_SetConfig+0x114>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0xf8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <TIM_Base_SetConfig+0x124>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d103      	bne.n	80025f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	615a      	str	r2, [r3, #20]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800
 8002614:	40000c00 	.word	0x40000c00
 8002618:	40010400 	.word	0x40010400
 800261c:	40014000 	.word	0x40014000
 8002620:	40014400 	.word	0x40014400
 8002624:	40014800 	.word	0x40014800
 8002628:	40001800 	.word	0x40001800
 800262c:	40001c00 	.word	0x40001c00
 8002630:	40002000 	.word	0x40002000

08002634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800265e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f023 030a 	bic.w	r3, r3, #10
 8002670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	621a      	str	r2, [r3, #32]
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 0210 	bic.w	r2, r3, #16
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	031b      	lsls	r3, r3, #12
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	f043 0307 	orr.w	r3, r3, #7
 8002714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	021a      	lsls	r2, r3, #8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	431a      	orrs	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800277c:	2302      	movs	r3, #2
 800277e:	e05a      	b.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d01d      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10c      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40010400 	.word	0x40010400
 8002858:	40014000 	.word	0x40014000
 800285c:	40001800 	.word	0x40001800

08002860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e03f      	b.n	800291a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f9e8 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fd7b 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b08a      	sub	sp, #40	; 0x28
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	d17c      	bne.n	8002a3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Transmit+0x2c>
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e075      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_UART_Transmit+0x3e>
 800295c:	2302      	movs	r3, #2
 800295e:	e06e      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2221      	movs	r2, #33	; 0x21
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002976:	f7fe fafb 	bl	8000f70 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d108      	bne.n	80029a4 <HAL_UART_Transmit+0x82>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e003      	b.n	80029ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029b4:	e02a      	b.n	8002a0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 faf9 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e036      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e007      	b.n	80029fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1cf      	bne.n	80029b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	; 0x40
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fac9 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0ba      	sub	sp, #232	; 0xe8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_UART_IRQHandler+0x66>
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fbd3 	bl	8003252 <UART_Receive_IT>
      return;
 8002aac:	e256      	b.n	8002f5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80de 	beq.w	8002c74 <HAL_UART_IRQHandler+0x22c>
 8002ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80d1 	beq.w	8002c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_UART_IRQHandler+0xae>
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xd2>
 8002b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0xf6>
 8002b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d011      	beq.n	8002b6e <HAL_UART_IRQHandler+0x126>
 8002b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 81ed 	beq.w	8002f52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_UART_IRQHandler+0x14e>
 8002b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fb5e 	bl	8003252 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x17a>
 8002bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d04f      	beq.n	8002c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa66 	bl	8003094 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d141      	bne.n	8002c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1d9      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	4a7d      	ldr	r2, [pc, #500]	; (8002e24 <HAL_UART_IRQHandler+0x3dc>)
 8002c30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fb1c 	bl	8001274 <HAL_DMA_Abort_IT>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e00e      	b.n	8002c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f99a 	bl	8002f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e00a      	b.n	8002c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f996 	bl	8002f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e006      	b.n	8002c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f992 	bl	8002f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c6e:	e170      	b.n	8002f52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	bf00      	nop
    return;
 8002c72:	e16e      	b.n	8002f52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 814a 	bne.w	8002f12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8143 	beq.w	8002f12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 813c 	beq.w	8002f12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	f040 80b4 	bne.w	8002e28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8140 	beq.w	8002f56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	f080 8139 	bcs.w	8002f56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	f000 8088 	beq.w	8002e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1d9      	bne.n	8002cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3314      	adds	r3, #20
 8002d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e1      	bne.n	8002d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3314      	adds	r3, #20
 8002d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e3      	bne.n	8002d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	f023 0310 	bic.w	r3, r3, #16
 8002dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dec:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002df4:	e841 2300 	strex	r3, r2, [r1]
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e3      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe f9c5 	bl	8001194 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8c0 	bl	8002fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e20:	e099      	b.n	8002f56 <HAL_UART_IRQHandler+0x50e>
 8002e22:	bf00      	nop
 8002e24:	0800315b 	.word	0x0800315b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 808b 	beq.w	8002f5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8086 	beq.w	8002f5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e72:	647a      	str	r2, [r7, #68]	; 0x44
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e3      	bne.n	8002e4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	623b      	str	r3, [r7, #32]
   return(result);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e3      	bne.n	8002e86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0310 	bic.w	r3, r3, #16
 8002ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ef0:	61fa      	str	r2, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	617b      	str	r3, [r7, #20]
   return(result);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e3      	bne.n	8002ecc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f848 	bl	8002fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f10:	e023      	b.n	8002f5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_UART_IRQHandler+0x4ea>
 8002f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f929 	bl	8003182 <UART_Transmit_IT>
    return;
 8002f30:	e014      	b.n	8002f5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <HAL_UART_IRQHandler+0x514>
 8002f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f969 	bl	8003222 <UART_EndTransmit_IT>
    return;
 8002f50:	e004      	b.n	8002f5c <HAL_UART_IRQHandler+0x514>
    return;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_UART_IRQHandler+0x514>
      return;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_UART_IRQHandler+0x514>
      return;
 8002f5a:	bf00      	nop
  }
}
 8002f5c:	37e8      	adds	r7, #232	; 0xe8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop

08002f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b090      	sub	sp, #64	; 0x40
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc8:	e050      	b.n	800306c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d04c      	beq.n	800306c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd8:	f7fd ffca 	bl	8000f70 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d241      	bcs.n	800306c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	330c      	adds	r3, #12
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003008:	637a      	str	r2, [r7, #52]	; 0x34
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800300e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	613b      	str	r3, [r7, #16]
   return(result);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3314      	adds	r3, #20
 800303a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800303c:	623a      	str	r2, [r7, #32]
 800303e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	69f9      	ldr	r1, [r7, #28]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	61bb      	str	r3, [r7, #24]
   return(result);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e00f      	b.n	800308c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d09f      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3740      	adds	r7, #64	; 0x40
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b095      	sub	sp, #84	; 0x54
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030bc:	643a      	str	r2, [r7, #64]	; 0x40
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	2b01      	cmp	r3, #1
 800310a:	d119      	bne.n	8003140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60bb      	str	r3, [r7, #8]
   return(result);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0310 	bic.w	r3, r3, #16
 8003122:	647b      	str	r3, [r7, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800312c:	61ba      	str	r2, [r7, #24]
 800312e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	613b      	str	r3, [r7, #16]
   return(result);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800314e:	bf00      	nop
 8003150:	3754      	adds	r7, #84	; 0x54
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff09 	bl	8002f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b21      	cmp	r3, #33	; 0x21
 8003194:	d13e      	bne.n	8003214 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	d114      	bne.n	80031ca <UART_Transmit_IT+0x48>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d110      	bne.n	80031ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	1c9a      	adds	r2, r3, #2
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	621a      	str	r2, [r3, #32]
 80031c8:	e008      	b.n	80031dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6211      	str	r1, [r2, #32]
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4619      	mov	r1, r3
 80031ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003238:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe8e 	bl	8002f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08c      	sub	sp, #48	; 0x30
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b22      	cmp	r3, #34	; 0x22
 8003264:	f040 80ab 	bne.w	80033be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d117      	bne.n	80032a2 <UART_Receive_IT+0x50>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d113      	bne.n	80032a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003290:	b29a      	uxth	r2, r3
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
 80032a0:	e026      	b.n	80032f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b4:	d007      	beq.n	80032c6 <UART_Receive_IT+0x74>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <UART_Receive_IT+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e008      	b.n	80032e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003300:	2b00      	cmp	r3, #0
 8003302:	d15a      	bne.n	80033ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0220 	bic.w	r2, r2, #32
 8003312:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	2b01      	cmp	r3, #1
 8003342:	d135      	bne.n	80033b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	613b      	str	r3, [r7, #16]
   return(result);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f023 0310 	bic.w	r3, r3, #16
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	623a      	str	r2, [r7, #32]
 800336c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	69f9      	ldr	r1, [r7, #28]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	61bb      	str	r3, [r7, #24]
   return(result);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d10a      	bne.n	80033a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fdf9 	bl	8002fa0 <HAL_UARTEx_RxEventCallback>
 80033ae:	e002      	b.n	80033b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fde1 	bl	8002f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e002      	b.n	80033c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3730      	adds	r7, #48	; 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	; 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe fd46 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7fe fd2d 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800350c:	f7fc fe5c 	bl	80001c8 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	; 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035a2:	f7fc fe11 	bl	80001c8 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	; 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800365e:	f7fc fdb3 	bl	80001c8 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e106      	b.n	80038a0 <UART_SetConfig+0x4d8>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003720:	f7fc fd52 	bl	80001c8 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	; (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	; 0x78
 800379e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037be:	f7fc fd03 	bl	80001c8 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	; 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	; 0x32
 80037dc:	4a33      	ldr	r2, [pc, #204]	; (80038ac <UART_SetConfig+0x4e4>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
 80037f2:	677a      	str	r2, [r7, #116]	; 0x74
 80037f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	415b      	adcs	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	4641      	mov	r1, r8
 800380a:	1851      	adds	r1, r2, r1
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	4649      	mov	r1, r9
 8003810:	414b      	adcs	r3, r1
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003820:	4659      	mov	r1, fp
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4651      	mov	r1, sl
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4642      	mov	r2, r8
 8003836:	189b      	adds	r3, r3, r2
 8003838:	66bb      	str	r3, [r7, #104]	; 0x68
 800383a:	464b      	mov	r3, r9
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
 800384e:	667a      	str	r2, [r7, #100]	; 0x64
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800386e:	f7fc fcab 	bl	80001c8 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <UART_SetConfig+0x4e4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <UART_SetConfig+0x4e4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4d0d      	ldr	r5, [pc, #52]	; (80038f8 <__libc_init_array+0x38>)
 80038c4:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	2600      	movs	r6, #0
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	4d0b      	ldr	r5, [pc, #44]	; (8003900 <__libc_init_array+0x40>)
 80038d2:	4c0c      	ldr	r4, [pc, #48]	; (8003904 <__libc_init_array+0x44>)
 80038d4:	f000 f818 	bl	8003908 <_init>
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	2600      	movs	r6, #0
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08003940 	.word	0x08003940
 80038fc:	08003940 	.word	0x08003940
 8003900:	08003940 	.word	0x08003940
 8003904:	08003944 	.word	0x08003944

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
