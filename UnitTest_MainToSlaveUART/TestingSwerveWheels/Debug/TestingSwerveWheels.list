
TestingSwerveWheels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007178  08007178  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007178  08007178  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  20000018  08007194  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001474  08007194  00021474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c34  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9e  00000000  00000000  00032cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00035c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddf  00000000  00000000  00036e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198ec  00000000  00000000  00037c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ed2  00000000  00000000  00051503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000926de  00000000  00000000  000683d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b5c  00000000  00000000  000faab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ff610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080070b8 	.word	0x080070b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080070b8 	.word	0x080070b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <BLDC_Drive_RedBoard>:
 */
#include "DriveMotor.h"
#include "stdlib.h"

void BLDC_Drive_RedBoard(MotorDrive *motor,TIM_HandleTypeDef *htim1,int Input,unsigned int Channel1)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
	motor->htim1 = htim1;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	601a      	str	r2, [r3, #0]
	motor->Pwm = abs(Input);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	615a      	str	r2, [r3, #20]
	if (Input<0)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da2f      	bge.n	8000b7a <BLDC_Drive_RedBoard+0x8e>
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4831      	ldr	r0, [pc, #196]	; (8000be4 <BLDC_Drive_RedBoard+0xf8>)
 8000b20:	f002 fc45 	bl	80033ae <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <BLDC_Drive_RedBoard+0x4e>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	89da      	ldrh	r2, [r3, #14]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
	}
}
 8000b38:	e04f      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d107      	bne.n	8000b52 <BLDC_Drive_RedBoard+0x66>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	89d9      	ldrh	r1, [r3, #14]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
 8000b50:	e043      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d107      	bne.n	8000b6a <BLDC_Drive_RedBoard+0x7e>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	89d9      	ldrh	r1, [r3, #14]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	460b      	mov	r3, r1
 8000b66:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b68:	e037      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	89d9      	ldrh	r1, [r3, #14]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	460b      	mov	r3, r1
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b78:	e02f      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4819      	ldr	r0, [pc, #100]	; (8000be4 <BLDC_Drive_RedBoard+0xf8>)
 8000b80:	f002 fc15 	bl	80033ae <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d106      	bne.n	8000b9a <BLDC_Drive_RedBoard+0xae>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	89da      	ldrh	r2, [r3, #14]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b98:	e01f      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d107      	bne.n	8000bb2 <BLDC_Drive_RedBoard+0xc6>
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	89d9      	ldrh	r1, [r3, #14]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	460b      	mov	r3, r1
 8000bae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000bb0:	e013      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d107      	bne.n	8000bca <BLDC_Drive_RedBoard+0xde>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	89d9      	ldrh	r1, [r3, #14]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000bc8:	e007      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	89d9      	ldrh	r1, [r3, #14]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd8:	e7ff      	b.n	8000bda <BLDC_Drive_RedBoard+0xee>
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010800 	.word	0x40010800

08000be8 <DC_Drive_BTS>:

void DC_Drive_BTS(MotorDrive *motor,TIM_HandleTypeDef *htim1,uint16_t Mode,int Input,unsigned int Channel1,unsigned int Channel2)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80fb      	strh	r3, [r7, #6]
	motor->htim1 = htim1;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	601a      	str	r2, [r3, #0]
	motor->Mode = Mode;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	88fa      	ldrh	r2, [r7, #6]
 8000c02:	821a      	strh	r2, [r3, #16]
	motor->Pwm = abs(Input);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	615a      	str	r2, [r3, #20]
	motor->Channel2 = Channel2;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	619a      	str	r2, [r3, #24]

	if(motor->Mode==0){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	8a1b      	ldrh	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 80e9 	bne.w	8000dfa <DC_Drive_BTS+0x212>
		if(Input < 0)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da4d      	bge.n	8000cca <DC_Drive_BTS+0xe2>
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <DC_Drive_BTS+0x5c>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	89da      	ldrh	r2, [r3, #14]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	e01e      	b.n	8000c82 <DC_Drive_BTS+0x9a>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d107      	bne.n	8000c5c <DC_Drive_BTS+0x74>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	89d9      	ldrh	r1, [r3, #14]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	460b      	mov	r3, r1
 8000c58:	6393      	str	r3, [r2, #56]	; 0x38
 8000c5a:	e012      	b.n	8000c82 <DC_Drive_BTS+0x9a>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d107      	bne.n	8000c74 <DC_Drive_BTS+0x8c>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	89d9      	ldrh	r1, [r3, #14]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c72:	e006      	b.n	8000c82 <DC_Drive_BTS+0x9a>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	89d9      	ldrh	r1, [r3, #14]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d105      	bne.n	8000c96 <DC_Drive_BTS+0xae>
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2200      	movs	r2, #0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
		{
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
		}
	}
}
 8000c94:	e1d6      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d105      	bne.n	8000caa <DC_Drive_BTS+0xc2>
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6393      	str	r3, [r2, #56]	; 0x38
 8000ca8:	e1cc      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d105      	bne.n	8000cbe <DC_Drive_BTS+0xd6>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000cbc:	e1c2      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cc8:	e1bc      	b.n	8001044 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dd4d      	ble.n	8000d6c <DC_Drive_BTS+0x184>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <DC_Drive_BTS+0xfc>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	e018      	b.n	8000d16 <DC_Drive_BTS+0x12e>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d105      	bne.n	8000cf8 <DC_Drive_BTS+0x110>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	6393      	str	r3, [r2, #56]	; 0x38
 8000cf6:	e00e      	b.n	8000d16 <DC_Drive_BTS+0x12e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d105      	bne.n	8000d0c <DC_Drive_BTS+0x124>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d0a:	e004      	b.n	8000d16 <DC_Drive_BTS+0x12e>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	2300      	movs	r3, #0
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <DC_Drive_BTS+0x144>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	89da      	ldrh	r2, [r3, #14]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d2a:	e18b      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Pwm);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d107      	bne.n	8000d44 <DC_Drive_BTS+0x15c>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	89d9      	ldrh	r1, [r3, #14]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	6393      	str	r3, [r2, #56]	; 0x38
 8000d42:	e17f      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d107      	bne.n	8000d5c <DC_Drive_BTS+0x174>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	89d9      	ldrh	r1, [r3, #14]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	460b      	mov	r3, r1
 8000d58:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d5a:	e173      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	89d9      	ldrh	r1, [r3, #14]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	460b      	mov	r3, r1
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d6a:	e16b      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,0);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <DC_Drive_BTS+0x198>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	e018      	b.n	8000db2 <DC_Drive_BTS+0x1ca>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d105      	bne.n	8000d94 <DC_Drive_BTS+0x1ac>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38
 8000d92:	e00e      	b.n	8000db2 <DC_Drive_BTS+0x1ca>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d105      	bne.n	8000da8 <DC_Drive_BTS+0x1c0>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000da6:	e004      	b.n	8000db2 <DC_Drive_BTS+0x1ca>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <DC_Drive_BTS+0x1de>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dc4:	e13e      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,0);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d105      	bne.n	8000dda <DC_Drive_BTS+0x1f2>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6393      	str	r3, [r2, #56]	; 0x38
 8000dd8:	e134      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d105      	bne.n	8000dee <DC_Drive_BTS+0x206>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dec:	e12a      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000df8:	e124      	b.n	8001044 <DC_Drive_BTS+0x45c>
		if(Input < 0)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da64      	bge.n	8000eca <DC_Drive_BTS+0x2e2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode-motor->Pwm);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10a      	bne.n	8000e1e <DC_Drive_BTS+0x236>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	8a1b      	ldrh	r3, [r3, #16]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	89db      	ldrh	r3, [r3, #14]
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	e02a      	b.n	8000e74 <DC_Drive_BTS+0x28c>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d10b      	bne.n	8000e3e <DC_Drive_BTS+0x256>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8a1b      	ldrh	r3, [r3, #16]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	89db      	ldrh	r3, [r3, #14]
 8000e30:	1ad1      	subs	r1, r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38
 8000e3c:	e01a      	b.n	8000e74 <DC_Drive_BTS+0x28c>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d10b      	bne.n	8000e5e <DC_Drive_BTS+0x276>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	8a1b      	ldrh	r3, [r3, #16]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	89db      	ldrh	r3, [r3, #14]
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e5c:	e00a      	b.n	8000e74 <DC_Drive_BTS+0x28c>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8a1b      	ldrh	r3, [r3, #16]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	89db      	ldrh	r3, [r3, #14]
 8000e68:	1ad1      	subs	r1, r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	460b      	mov	r3, r1
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <DC_Drive_BTS+0x2a2>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	8a1a      	ldrh	r2, [r3, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e88:	e0dc      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d107      	bne.n	8000ea2 <DC_Drive_BTS+0x2ba>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8a19      	ldrh	r1, [r3, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	6393      	str	r3, [r2, #56]	; 0x38
 8000ea0:	e0d0      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d107      	bne.n	8000eba <DC_Drive_BTS+0x2d2>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8a19      	ldrh	r1, [r3, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000eb8:	e0c4      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8a19      	ldrh	r1, [r3, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec8:	e0bc      	b.n	8001044 <DC_Drive_BTS+0x45c>
		else if(Input > 0)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dd64      	ble.n	8000f9a <DC_Drive_BTS+0x3b2>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <DC_Drive_BTS+0x2fe>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8a1a      	ldrh	r2, [r3, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee4:	e01e      	b.n	8000f24 <DC_Drive_BTS+0x33c>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d107      	bne.n	8000efe <DC_Drive_BTS+0x316>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8a19      	ldrh	r1, [r3, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	6393      	str	r3, [r2, #56]	; 0x38
 8000efc:	e012      	b.n	8000f24 <DC_Drive_BTS+0x33c>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d107      	bne.n	8000f16 <DC_Drive_BTS+0x32e>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8a19      	ldrh	r1, [r3, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	460b      	mov	r3, r1
 8000f12:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f14:	e006      	b.n	8000f24 <DC_Drive_BTS+0x33c>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8a19      	ldrh	r1, [r3, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	460b      	mov	r3, r1
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <DC_Drive_BTS+0x35a>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8a1b      	ldrh	r3, [r3, #16]
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	89db      	ldrh	r3, [r3, #14]
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f40:	e080      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode-motor->Pwm);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d10b      	bne.n	8000f62 <DC_Drive_BTS+0x37a>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8a1b      	ldrh	r3, [r3, #16]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	89db      	ldrh	r3, [r3, #14]
 8000f54:	1ad1      	subs	r1, r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	6393      	str	r3, [r2, #56]	; 0x38
 8000f60:	e070      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d10b      	bne.n	8000f82 <DC_Drive_BTS+0x39a>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8a1b      	ldrh	r3, [r3, #16]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	89db      	ldrh	r3, [r3, #14]
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f80:	e060      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	8a1b      	ldrh	r3, [r3, #16]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	89db      	ldrh	r3, [r3, #14]
 8000f8c:	1ad1      	subs	r1, r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	460b      	mov	r3, r1
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f98:	e054      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Mode);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <DC_Drive_BTS+0x3c8>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8a1a      	ldrh	r2, [r3, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	e01e      	b.n	8000fee <DC_Drive_BTS+0x406>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d107      	bne.n	8000fc8 <DC_Drive_BTS+0x3e0>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8a19      	ldrh	r1, [r3, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	6393      	str	r3, [r2, #56]	; 0x38
 8000fc6:	e012      	b.n	8000fee <DC_Drive_BTS+0x406>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d107      	bne.n	8000fe0 <DC_Drive_BTS+0x3f8>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	8a19      	ldrh	r1, [r3, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fde:	e006      	b.n	8000fee <DC_Drive_BTS+0x406>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8a19      	ldrh	r1, [r3, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	460b      	mov	r3, r1
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <DC_Drive_BTS+0x41c>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8a1a      	ldrh	r2, [r3, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001002:	e01f      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d107      	bne.n	800101c <DC_Drive_BTS+0x434>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8a19      	ldrh	r1, [r3, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	460b      	mov	r3, r1
 8001018:	6393      	str	r3, [r2, #56]	; 0x38
}
 800101a:	e013      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	2b08      	cmp	r3, #8
 8001022:	d107      	bne.n	8001034 <DC_Drive_BTS+0x44c>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	8a19      	ldrh	r1, [r3, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	460b      	mov	r3, r1
 8001030:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001032:	e007      	b.n	8001044 <DC_Drive_BTS+0x45c>
			__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel2,motor->Mode);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8a19      	ldrh	r1, [r3, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	460b      	mov	r3, r1
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001042:	e7ff      	b.n	8001044 <DC_Drive_BTS+0x45c>
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	enc->htim = htim;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800106c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	0000      	movs	r0, r0
 800107c:	0000      	movs	r0, r0
	...

08001080 <SpeedReadOnly>:
void SpeedReadOnly(EncoderRead *enc)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010a0:	441a      	add	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = (enc->count_X4/enc->deltaT)/(enc->count_PerRevol*4)*60;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f99d 	bl	80003f4 <__aeabi_i2d>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80010c0:	f7ff fb2c 	bl	800071c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f98e 	bl	80003f4 <__aeabi_i2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff fb1c 	bl	800071c <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <SpeedReadOnly+0x110>)
 80010f2:	f7ff f9e9 	bl	80004c8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001106:	a31e      	add	r3, pc, #120	; (adr r3, 8001180 <SpeedReadOnly+0x100>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f9dc 	bl	80004c8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800111e:	a31a      	add	r3, pc, #104	; (adr r3, 8001188 <SpeedReadOnly+0x108>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff f9d0 	bl	80004c8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff f814 	bl	800015c <__adddf3>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	461d      	mov	r5, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001142:	a311      	add	r3, pc, #68	; (adr r3, 8001188 <SpeedReadOnly+0x108>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff f9be 	bl	80004c8 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff f802 	bl	800015c <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_X4 = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	ced91687 	.word	0xced91687
 8001184:	3feb53f7 	.word	0x3feb53f7
 8001188:	532617c2 	.word	0x532617c2
 800118c:	3fb2a305 	.word	0x3fb2a305
 8001190:	404e0000 	.word	0x404e0000
 8001194:	00000000 	.word	0x00000000

08001198 <SpeedReadNonReset>:



void SpeedReadNonReset(EncoderRead *enc){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f90e 	bl	80003f4 <__aeabi_i2d>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80011de:	f7ff fa9d 	bl	800071c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4614      	mov	r4, r2
 80011e8:	461d      	mov	r5, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f8ff 	bl	80003f4 <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff fa8d 	bl	800071c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <SpeedReadNonReset+0x118>)
 8001210:	f7ff f95a 	bl	80004c8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001224:	a31e      	add	r3, pc, #120	; (adr r3, 80012a0 <SpeedReadNonReset+0x108>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f94d 	bl	80004c8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4614      	mov	r4, r2
 8001234:	461d      	mov	r5, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800123c:	a31a      	add	r3, pc, #104	; (adr r3, 80012a8 <SpeedReadNonReset+0x110>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f941 	bl	80004c8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7fe ff85 	bl	800015c <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4614      	mov	r4, r2
 8001258:	461d      	mov	r5, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001260:	a311      	add	r3, pc, #68	; (adr r3, 80012a8 <SpeedReadNonReset+0x110>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f92f 	bl	80004c8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ff73 	bl	800015c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bdb0      	pop	{r4, r5, r7, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	ced91687 	.word	0xced91687
 80012a4:	3feb53f7 	.word	0x3feb53f7
 80012a8:	532617c2 	.word	0x532617c2
 80012ac:	3fb2a305 	.word	0x3fb2a305
 80012b0:	404e0000 	.word	0x404e0000

080012b4 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012de:	441a      	add	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <CountRead+0x52>
	{
		return enc->count_X4;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f87a 	bl	80003f4 <__aeabi_i2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	e033      	b.n	800136e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7e1b      	ldrb	r3, [r3, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d110      	bne.n	8001330 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da00      	bge.n	8001318 <CountRead+0x64>
 8001316:	3303      	adds	r3, #3
 8001318:	109b      	asrs	r3, r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f865 	bl	80003f4 <__aeabi_i2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e01e      	b.n	800136e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d116      	bne.n	8001366 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001340:	fb03 f202 	mul.w	r2, r3, r2
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	fb92 f3f3 	sdiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f850 	bl	80003f4 <__aeabi_i2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001364:	e003      	b.n	800136e <CountRead+0xba>
	}else {
		return 0;
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
	}
}
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
	}
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Pid_SetParam>:
#include <PID.h>
#include "stdlib.h"

//-----------------------------------------------Begin: Setting Parameter for PID------------------------------------------//
void Pid_SetParam(PID_Param *pid,double kP,double kI,double kD,double alpha,double deltaT,double uI_AboveLimit,double uI_BelowLimit,double u_AboveLimit,double u_BelowLimit)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	e9c7 2300 	strd	r2, r3, [r7]
//----------------------Term-----------------------//
	pid->kP = kP;
 80013b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b4:	f7ff fb4a 	bl	8000a4c <__aeabi_d2f>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
	pid->kI = kI;
 80013be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c2:	f7ff fb43 	bl	8000a4c <__aeabi_d2f>
 80013c6:	4602      	mov	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
	pid->kD = kD;
 80013cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013d0:	f7ff fb3c 	bl	8000a4c <__aeabi_d2f>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	659a      	str	r2, [r3, #88]	; 0x58
	pid->alpha = alpha;
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//----------------------Sample Time----------------//
	pid->deltaT = deltaT;
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
//----------------------Limit----------------------//
	pid->uI_AboveLimit = uI_AboveLimit;
 80013ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013f2:	f7ff fb03 	bl	80009fc <__aeabi_d2iz>
 80013f6:	4602      	mov	r2, r0
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	651a      	str	r2, [r3, #80]	; 0x50
	pid->uI_BelowLimit = uI_BelowLimit;
 80013fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001400:	f7ff fafc 	bl	80009fc <__aeabi_d2iz>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
	pid->u_AboveLimit = u_AboveLimit;
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001410:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	pid->u_BelowLimit = u_BelowLimit;
 8001414:	68f9      	ldr	r1, [r7, #12]
 8001416:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800141a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,double Target,double CurrVal)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	e9c7 2300 	strd	r2, r3, [r7]
//-----------------------Input-------------------------//
	pid->Target = Target;
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143a:	e9c1 2300 	strd	r2, r3, [r1]
	pid->CurrVal = CurrVal;
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001444:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->e = pid->Target - pid->CurrVal;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001454:	f7fe fe80 	bl	8000158 <__aeabi_dsub>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	e9c1 2304 	strd	r2, r3, [r1, #16]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ffd6 	bl	8000418 <__aeabi_f2d>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001472:	f7ff f829 	bl	80004c8 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffc4 	bl	8000418 <__aeabi_f2d>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001496:	f7ff f817 	bl	80004c8 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014a8:	f7ff f80e 	bl	80004c8 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe fe52 	bl	800015c <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff91 	bl	80003f4 <__aeabi_i2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7ff fa85 	bl	80009e8 <__aeabi_dcmpgt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <Pid_Cal+0xcc>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff83 	bl	80003f4 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e002      	b.n	80014fa <Pid_Cal+0xd2>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80014fa:	68f9      	ldr	r1, [r7, #12]
 80014fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff72 	bl	80003f4 <__aeabi_i2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7ff fa48 	bl	80009ac <__aeabi_dcmplt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <Pid_Cal+0x10a>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ff64 	bl	80003f4 <__aeabi_i2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	e002      	b.n	8001538 <Pid_Cal+0x110>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff68 	bl	8000418 <__aeabi_f2d>
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001558:	f7fe fdfe 	bl	8000158 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe ffb0 	bl	80004c8 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001576:	f7ff f8d1 	bl	800071c <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	493c      	ldr	r1, [pc, #240]	; (8001680 <Pid_Cal+0x258>)
 8001590:	f7fe fde2 	bl	8000158 <__aeabi_dsub>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80015a2:	f7fe ff91 	bl	80004c8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80015ba:	f7fe ff85 	bl	80004c8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fdc9 	bl	800015c <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->uI_Pre = pid->uI;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pid->uD_FilPre = pid->uD_Fil;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001604:	f7fe fdaa 	bl	800015c <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001616:	f7fe fda1 	bl	800015c <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001630:	f7ff f9da 	bl	80009e8 <__aeabi_dcmpgt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <Pid_Cal+0x21a>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001640:	e002      	b.n	8001648 <Pid_Cal+0x220>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800165a:	f7ff f9a7 	bl	80009ac <__aeabi_dcmplt>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <Pid_Cal+0x244>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800166a:	e002      	b.n	8001672 <Pid_Cal+0x24a>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

//	return pid->u;
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	3ff00000 	.word	0x3ff00000

08001684 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <vApplicationGetIdleTaskMemory+0x28>)
 8001694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800169a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20000034 	.word	0x20000034
 80016b0:	20000088 	.word	0x20000088

080016b4 <PIDBLDC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PIDBLDC(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af02      	add	r7, sp, #8
	SpeedReadOnly(&ENC_BLDC);
 80016ba:	4810      	ldr	r0, [pc, #64]	; (80016fc <PIDBLDC+0x48>)
 80016bc:	f7ff fce0 	bl	8001080 <SpeedReadOnly>

	Pid_Cal(&PID_BLDC, SpeedTestBLDC, ENC_BLDC.vel_Real);
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <PIDBLDC+0x4c>)
 80016c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <PIDBLDC+0x48>)
 80016c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016cc:	e9cd 2300 	strd	r2, r3, [sp]
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <PIDBLDC+0x50>)
 80016d6:	f7ff fea7 	bl	8001428 <Pid_Cal>

	BLDC_Drive_RedBoard(&BLDC, &htim2, PID_BLDC.u, TIM_CHANNEL_2);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <PIDBLDC+0x50>)
 80016dc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f98a 	bl	80009fc <__aeabi_d2iz>
 80016e8:	4602      	mov	r2, r0
 80016ea:	2304      	movs	r3, #4
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <PIDBLDC+0x54>)
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <PIDBLDC+0x58>)
 80016f0:	f7ff f9fc 	bl	8000aec <BLDC_Drive_RedBoard>
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200003f8 	.word	0x200003f8
 8001700:	20000688 	.word	0x20000688
 8001704:	200004c0 	.word	0x200004c0
 8001708:	20000288 	.word	0x20000288
 800170c:	20000488 	.word	0x20000488

08001710 <PIDDCSPEED>:

void PIDDCSPEED(void){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_DC);
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <PIDDCSPEED+0x50>)
 8001718:	f7ff fd3e 	bl	8001198 <SpeedReadNonReset>

	Pid_Cal(&PID_DC_SPEED, SpeedTest_DC_Speed, ENC_DC.vel_Real);
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <PIDDCSPEED+0x54>)
 800171e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <PIDDCSPEED+0x50>)
 8001724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001728:	e9cd 2300 	strd	r2, r3, [sp]
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <PIDDCSPEED+0x58>)
 8001732:	f7ff fe79 	bl	8001428 <Pid_Cal>

	DC_Drive_BTS(&DC, &htim2, motor_Reserve, PID_DC_SPEED.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <PIDDCSPEED+0x58>)
 8001738:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff f95c 	bl	80009fc <__aeabi_d2iz>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	2208      	movs	r2, #8
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <PIDDCSPEED+0x5c>)
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <PIDDCSPEED+0x60>)
 8001756:	f7ff fa47 	bl	8000be8 <DC_Drive_BTS>
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000440 	.word	0x20000440
 8001764:	20000690 	.word	0x20000690
 8001768:	20000558 	.word	0x20000558
 800176c:	20000288 	.word	0x20000288
 8001770:	200004a4 	.word	0x200004a4

08001774 <PIDDCPOS>:

void PIDDCPOS(void){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af02      	add	r7, sp, #8
	Pid_Cal(&PID_DC_POS, SpeedTest_DC_POS, CountRead(&ENC_DC, count_ModeDegree));
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <PIDDCPOS+0x3c>)
 800177c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001780:	2102      	movs	r1, #2
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <PIDDCPOS+0x40>)
 8001784:	f7ff fd96 	bl	80012b4 <CountRead>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9cd 2300 	strd	r2, r3, [sp]
 8001790:	4622      	mov	r2, r4
 8001792:	462b      	mov	r3, r5
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <PIDDCPOS+0x44>)
 8001796:	f7ff fe47 	bl	8001428 <Pid_Cal>

	SpeedTest_DC_Speed = PID_DC_POS.u;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <PIDDCPOS+0x44>)
 800179c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80017a0:	4906      	ldr	r1, [pc, #24]	; (80017bc <PIDDCPOS+0x48>)
 80017a2:	e9c1 2300 	strd	r2, r3, [r1]

	PIDDCSPEED();
 80017a6:	f7ff ffb3 	bl	8001710 <PIDDCSPEED>
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bdb0      	pop	{r4, r5, r7, pc}
 80017b0:	20000698 	.word	0x20000698
 80017b4:	20000440 	.word	0x20000440
 80017b8:	200005f0 	.word	0x200005f0
 80017bc:	20000690 	.word	0x20000690

080017c0 <SetAndResetU2parameter>:

void SetAndResetU2parameter(uint8_t command){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	if(!command){
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d122      	bne.n	8001816 <SetAndResetU2parameter+0x56>
		PID_DC_SPEED.uI_AboveLimit=0;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <SetAndResetU2parameter+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	651a      	str	r2, [r3, #80]	; 0x50
		PID_DC_SPEED.uI_BelowLimit=0;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <SetAndResetU2parameter+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
		PID_DC_SPEED.u_AboveLimit=0;
 80017dc:	491c      	ldr	r1, [pc, #112]	; (8001850 <SetAndResetU2parameter+0x90>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		PID_DC_SPEED.u_BelowLimit=0;
 80017ea:	4919      	ldr	r1, [pc, #100]	; (8001850 <SetAndResetU2parameter+0x90>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		ENC_DC.vel_Pre = 0;
 80017f8:	4916      	ldr	r1, [pc, #88]	; (8001854 <SetAndResetU2parameter+0x94>)
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ENC_DC.vel_Real = 0;
 8001806:	4913      	ldr	r1, [pc, #76]	; (8001854 <SetAndResetU2parameter+0x94>)
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9c1 2308 	strd	r2, r3, [r1, #32]
		PID_DC_SPEED.uI_AboveLimit = DCIntegralAboveLimit;
		PID_DC_SPEED.uI_BelowLimit = DCIntegralBelowLimit;
		PID_DC_SPEED.u_AboveLimit = DCSumAboveLimit;
		PID_DC_SPEED.u_BelowLimit = DCSumBelowLimit;
	}
}
 8001814:	e012      	b.n	800183c <SetAndResetU2parameter+0x7c>
		PID_DC_SPEED.uI_AboveLimit = DCIntegralAboveLimit;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <SetAndResetU2parameter+0x90>)
 8001818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
		PID_DC_SPEED.uI_BelowLimit = DCIntegralBelowLimit;
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <SetAndResetU2parameter+0x90>)
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <SetAndResetU2parameter+0x98>)
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
		PID_DC_SPEED.u_AboveLimit = DCSumAboveLimit;
 8001824:	490a      	ldr	r1, [pc, #40]	; (8001850 <SetAndResetU2parameter+0x90>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <SetAndResetU2parameter+0x9c>)
 800182c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		PID_DC_SPEED.u_BelowLimit = DCSumBelowLimit;
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <SetAndResetU2parameter+0x90>)
 8001832:	a305      	add	r3, pc, #20	; (adr r3, 8001848 <SetAndResetU2parameter+0x88>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	00000000 	.word	0x00000000
 800184c:	c08f4000 	.word	0xc08f4000
 8001850:	20000558 	.word	0x20000558
 8001854:	20000440 	.word	0x20000440
 8001858:	fffffc18 	.word	0xfffffc18
 800185c:	408f4000 	.word	0x408f4000

08001860 <HomeFinding>:

void HomeFinding()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin) == AtHome)	// if found home successfully
 8001864:	2120      	movs	r1, #32
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <HomeFinding+0x194>)
 8001868:	f001 fd8a 	bl	8003380 <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d123      	bne.n	80018ba <HomeFinding+0x5a>
	{
		osDelay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f004 fa82 	bl	8005d7c <osDelay>
		if(HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin) == AtHome)
 8001878:	2120      	movs	r1, #32
 800187a:	485e      	ldr	r0, [pc, #376]	; (80019f4 <HomeFinding+0x194>)
 800187c:	f001 fd80 	bl	8003380 <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <HomeFinding+0x5a>
		{
			HomeStatus = 1;
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HomeFinding+0x198>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
			if((RunStatus == IntialState) || (RunStatus == AccurateFindingState))
 800188c:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HomeFinding+0x19c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HomeFinding+0x3c>
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HomeFinding+0x19c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d10e      	bne.n	80018ba <HomeFinding+0x5a>
			{
				SpeedTest_DC_POS = CountRead(&ENC_DC, count_ModeDegree);
 800189c:	2102      	movs	r1, #2
 800189e:	4858      	ldr	r0, [pc, #352]	; (8001a00 <HomeFinding+0x1a0>)
 80018a0:	f7ff fd08 	bl	80012b4 <CountRead>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4956      	ldr	r1, [pc, #344]	; (8001a04 <HomeFinding+0x1a4>)
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]
				RunStatus++;
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HomeFinding+0x19c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b51      	ldr	r3, [pc, #324]	; (80019fc <HomeFinding+0x19c>)
 80018b8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(RunStatus == IntialState)
 80018ba:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HomeFinding+0x19c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d12e      	bne.n	8001920 <HomeFinding+0xc0>
	{
		if(CountRead(&ENC_DC, count_ModeDegree) > FindingDegreeAboveLimit)
 80018c2:	2102      	movs	r1, #2
 80018c4:	484e      	ldr	r0, [pc, #312]	; (8001a00 <HomeFinding+0x1a0>)
 80018c6:	f7ff fcf5 	bl	80012b4 <CountRead>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HomeFinding+0x1a8>)
 80018d0:	f7ff f88a 	bl	80009e8 <__aeabi_dcmpgt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HomeFinding+0x82>
		{
			dir = -1;
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HomeFinding+0x1ac>)
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e00e      	b.n	8001900 <HomeFinding+0xa0>
		}
		else if(CountRead(&ENC_DC, count_ModeDegree) < FindingDegreeBelowLimit)
 80018e2:	2102      	movs	r1, #2
 80018e4:	4846      	ldr	r0, [pc, #280]	; (8001a00 <HomeFinding+0x1a0>)
 80018e6:	f7ff fce5 	bl	80012b4 <CountRead>
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HomeFinding+0x1b0>)
 80018f0:	f7ff f85c 	bl	80009ac <__aeabi_dcmplt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HomeFinding+0xa0>
		{
			dir = 1;
 80018fa:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HomeFinding+0x1ac>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
		}
		SpeedTest_DC_Speed = 30 * dir;
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HomeFinding+0x1ac>)
 8001902:	f993 3000 	ldrsb.w	r3, [r3]
 8001906:	461a      	mov	r2, r3
 8001908:	4613      	mov	r3, r2
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd6f 	bl	80003f4 <__aeabi_i2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	493e      	ldr	r1, [pc, #248]	; (8001a14 <HomeFinding+0x1b4>)
 800191c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if((RunStatus == IntialStopAndResetState) || (RunStatus == AccurateStopAndResetState))
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HomeFinding+0x19c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d003      	beq.n	8001930 <HomeFinding+0xd0>
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HomeFinding+0x19c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d121      	bne.n	8001974 <HomeFinding+0x114>
	{
		osDelay(500);
 8001930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001934:	f004 fa22 	bl	8005d7c <osDelay>
		SetAndResetU2parameter(0);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff41 	bl	80017c0 <SetAndResetU2parameter>
		ResetCount(&ENC_DC, 1);
 800193e:	2101      	movs	r1, #1
 8001940:	482f      	ldr	r0, [pc, #188]	; (8001a00 <HomeFinding+0x1a0>)
 8001942:	f7ff fd19 	bl	8001378 <ResetCount>
		SpeedTest_DC_POS = 0;
 8001946:	492f      	ldr	r1, [pc, #188]	; (8001a04 <HomeFinding+0x1a4>)
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9c1 2300 	strd	r2, r3, [r1]
		osDelay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f004 fa11 	bl	8005d7c <osDelay>
		ResetCount(&ENC_DC, 0);
 800195a:	2100      	movs	r1, #0
 800195c:	4828      	ldr	r0, [pc, #160]	; (8001a00 <HomeFinding+0x1a0>)
 800195e:	f7ff fd0b 	bl	8001378 <ResetCount>
		SetAndResetU2parameter(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ff2c 	bl	80017c0 <SetAndResetU2parameter>
		RunStatus++;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HomeFinding+0x19c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HomeFinding+0x19c>)
 8001972:	701a      	strb	r2, [r3, #0]
	}

	if((RunStatus == AccurateFindingState) && (HAL_GPIO_ReadPin(Home_GPIO_Port, Home_Pin) == NotAtHome))
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HomeFinding+0x19c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d131      	bne.n	80019e0 <HomeFinding+0x180>
 800197c:	2120      	movs	r1, #32
 800197e:	481d      	ldr	r0, [pc, #116]	; (80019f4 <HomeFinding+0x194>)
 8001980:	f001 fcfe 	bl	8003380 <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12a      	bne.n	80019e0 <HomeFinding+0x180>
	{
		if(CountRead(&ENC_DC, count_ModeDegree) > AccurateFindingDegreeAboveLimit)
 800198a:	2102      	movs	r1, #2
 800198c:	481c      	ldr	r0, [pc, #112]	; (8001a00 <HomeFinding+0x1a0>)
 800198e:	f7ff fc91 	bl	80012b4 <CountRead>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HomeFinding+0x1b8>)
 8001998:	f7ff f826 	bl	80009e8 <__aeabi_dcmpgt>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HomeFinding+0x14a>
		{
			dir = -1;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HomeFinding+0x1ac>)
 80019a4:	22ff      	movs	r2, #255	; 0xff
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e00e      	b.n	80019c8 <HomeFinding+0x168>
		}
		else if(CountRead(&ENC_DC, count_ModeDegree) < AccurateFindingDegreeBelowLimit)
 80019aa:	2102      	movs	r1, #2
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <HomeFinding+0x1a0>)
 80019ae:	f7ff fc81 	bl	80012b4 <CountRead>
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HomeFinding+0x1bc>)
 80019b8:	f7fe fff8 	bl	80009ac <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HomeFinding+0x168>
		{
			dir = 1;
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HomeFinding+0x1ac>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
		}
		SpeedTest_DC_Speed = 2 * dir;
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HomeFinding+0x1ac>)
 80019ca:	f993 3000 	ldrsb.w	r3, [r3]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd0f 	bl	80003f4 <__aeabi_i2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HomeFinding+0x1b4>)
 80019dc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(RunStatus == EndState)
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HomeFinding+0x19c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d102      	bne.n	80019ee <HomeFinding+0x18e>
	{
		HomeFound = 1;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HomeFinding+0x1c0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
	}
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40010800 	.word	0x40010800
 80019f8:	200006a8 	.word	0x200006a8
 80019fc:	200006aa 	.word	0x200006aa
 8001a00:	20000440 	.word	0x20000440
 8001a04:	20000698 	.word	0x20000698
 8001a08:	40668000 	.word	0x40668000
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	c0668000 	.word	0xc0668000
 8001a14:	20000690 	.word	0x20000690
 8001a18:	40240000 	.word	0x40240000
 8001a1c:	c0240000 	.word	0xc0240000
 8001a20:	200006a9 	.word	0x200006a9

08001a24 <HAL_UARTEx_RxEventCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	HAL_UART_Receive_IT(&huart1, Rx_Buf, 6);
//}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
	if(huart -> Instance == USART1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_UARTEx_RxEventCallback+0x54>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11a      	bne.n	8001a70 <HAL_UARTEx_RxEventCallback+0x4c>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_Buf, 41);
 8001a3a:	2229      	movs	r2, #41	; 0x29
 8001a3c:	490f      	ldr	r1, [pc, #60]	; (8001a7c <HAL_UARTEx_RxEventCallback+0x58>)
 8001a3e:	4810      	ldr	r0, [pc, #64]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001a40:	f003 fa36 	bl	8004eb0 <HAL_UARTEx_ReceiveToIdle_DMA>
		if (Rx_Buf[40]==13)
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_UARTEx_RxEventCallback+0x58>)
 8001a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a4a:	2b0d      	cmp	r3, #13
 8001a4c:	d108      	bne.n	8001a60 <HAL_UARTEx_RxEventCallback+0x3c>
		{
			DecodeData(Rx_Buf);
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <HAL_UARTEx_RxEventCallback+0x58>)
 8001a50:	f000 f81a 	bl	8001a88 <DecodeData>
			memset(Rx_Buf,0,Size);
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	461a      	mov	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <HAL_UARTEx_RxEventCallback+0x58>)
 8001a5c:	f005 fb00 	bl	8007060 <memset>
		}
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_UARTEx_RxEventCallback+0x60>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_UARTEx_RxEventCallback+0x60>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
	}
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	200006ac 	.word	0x200006ac
 8001a80:	20000360 	.word	0x20000360
 8001a84:	200003a8 	.word	0x200003a8

08001a88 <DecodeData>:
uint8_t *pFloat = NULL;



void DecodeData(uint8_t* dataArr)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if(dataArr[0] == ID)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d134      	bne.n	8001b02 <DecodeData+0x7a>
	{
		pFloat = &Mode;
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <DecodeData+0x1e0>)
 8001a9a:	4a74      	ldr	r2, [pc, #464]	; (8001c6c <DecodeData+0x1e4>)
 8001a9c:	601a      	str	r2, [r3, #0]
		*(pFloat)=dataArr[1];
 8001a9e:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <DecodeData+0x1e0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	7852      	ldrb	r2, [r2, #1]
 8001aa6:	701a      	strb	r2, [r3, #0]
		pFloat = &BLDCSpeed;
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <DecodeData+0x1e0>)
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <DecodeData+0x1e8>)
 8001aac:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 2; i < 6; i++)
 8001aae:	2302      	movs	r3, #2
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e00c      	b.n	8001ace <DecodeData+0x46>
		{
			*(pFloat+i-2)=dataArr[i];
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	441a      	add	r2, r3
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <DecodeData+0x1e0>)
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	3b02      	subs	r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 2; i < 6; i++)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	3301      	adds	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d9ef      	bls.n	8001ab4 <DecodeData+0x2c>
		}
		pFloat = &DCPos;
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <DecodeData+0x1e0>)
 8001ad6:	4a67      	ldr	r2, [pc, #412]	; (8001c74 <DecodeData+0x1ec>)
 8001ad8:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 6; i < 10; i++)
 8001ada:	2306      	movs	r3, #6
 8001adc:	73bb      	strb	r3, [r7, #14]
 8001ade:	e00c      	b.n	8001afa <DecodeData+0x72>
		{
			*(pFloat+i-6)=dataArr[i];
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <DecodeData+0x1e0>)
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	7bbb      	ldrb	r3, [r7, #14]
 8001aec:	3b06      	subs	r3, #6
 8001aee:	440b      	add	r3, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 6; i < 10; i++)
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	3301      	adds	r3, #1
 8001af8:	73bb      	strb	r3, [r7, #14]
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d9ef      	bls.n	8001ae0 <DecodeData+0x58>
		for(uint8_t i = 36; i < 40; i++)
		{
			*(pFloat+i-36)=dataArr[i];
		}
	}
}
 8001b00:	e0ac      	b.n	8001c5c <DecodeData+0x1d4>
	else if(dataArr[10] == ID)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	330a      	adds	r3, #10
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d134      	bne.n	8001b76 <DecodeData+0xee>
		pFloat = &Mode;
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <DecodeData+0x1e0>)
 8001b0e:	4a57      	ldr	r2, [pc, #348]	; (8001c6c <DecodeData+0x1e4>)
 8001b10:	601a      	str	r2, [r3, #0]
		*(pFloat)=dataArr[11];
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <DecodeData+0x1e0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	7ad2      	ldrb	r2, [r2, #11]
 8001b1a:	701a      	strb	r2, [r3, #0]
		pFloat = &BLDCSpeed;
 8001b1c:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <DecodeData+0x1e0>)
 8001b1e:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <DecodeData+0x1e8>)
 8001b20:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 12; i < 16; i++)
 8001b22:	230c      	movs	r3, #12
 8001b24:	737b      	strb	r3, [r7, #13]
 8001b26:	e00c      	b.n	8001b42 <DecodeData+0xba>
			*(pFloat+i-12)=dataArr[i];
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <DecodeData+0x1e0>)
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	7b7b      	ldrb	r3, [r7, #13]
 8001b34:	3b0c      	subs	r3, #12
 8001b36:	440b      	add	r3, r1
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 12; i < 16; i++)
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	737b      	strb	r3, [r7, #13]
 8001b42:	7b7b      	ldrb	r3, [r7, #13]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d9ef      	bls.n	8001b28 <DecodeData+0xa0>
		pFloat = &DCPos;
 8001b48:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <DecodeData+0x1e0>)
 8001b4a:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <DecodeData+0x1ec>)
 8001b4c:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 16; i < 20; i++)
 8001b4e:	2310      	movs	r3, #16
 8001b50:	733b      	strb	r3, [r7, #12]
 8001b52:	e00c      	b.n	8001b6e <DecodeData+0xe6>
			*(pFloat+i-16)=dataArr[i];
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	441a      	add	r2, r3
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <DecodeData+0x1e0>)
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	7b3b      	ldrb	r3, [r7, #12]
 8001b60:	3b10      	subs	r3, #16
 8001b62:	440b      	add	r3, r1
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 16; i < 20; i++)
 8001b68:	7b3b      	ldrb	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	733b      	strb	r3, [r7, #12]
 8001b6e:	7b3b      	ldrb	r3, [r7, #12]
 8001b70:	2b13      	cmp	r3, #19
 8001b72:	d9ef      	bls.n	8001b54 <DecodeData+0xcc>
}
 8001b74:	e072      	b.n	8001c5c <DecodeData+0x1d4>
	}else if(dataArr[20] == ID)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3314      	adds	r3, #20
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d134      	bne.n	8001bea <DecodeData+0x162>
		pFloat = &Mode;
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <DecodeData+0x1e0>)
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <DecodeData+0x1e4>)
 8001b84:	601a      	str	r2, [r3, #0]
		*(pFloat)=dataArr[21];
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <DecodeData+0x1e0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	7d52      	ldrb	r2, [r2, #21]
 8001b8e:	701a      	strb	r2, [r3, #0]
		pFloat = &BLDCSpeed;
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <DecodeData+0x1e0>)
 8001b92:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <DecodeData+0x1e8>)
 8001b94:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 22; i < 26; i++)
 8001b96:	2316      	movs	r3, #22
 8001b98:	72fb      	strb	r3, [r7, #11]
 8001b9a:	e00c      	b.n	8001bb6 <DecodeData+0x12e>
			*(pFloat+i-22)=dataArr[i];
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	441a      	add	r2, r3
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <DecodeData+0x1e0>)
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	3b16      	subs	r3, #22
 8001baa:	440b      	add	r3, r1
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 22; i < 26; i++)
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	72fb      	strb	r3, [r7, #11]
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	2b19      	cmp	r3, #25
 8001bba:	d9ef      	bls.n	8001b9c <DecodeData+0x114>
		pFloat = &DCPos;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <DecodeData+0x1e0>)
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <DecodeData+0x1ec>)
 8001bc0:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 26; i < 30; i++)
 8001bc2:	231a      	movs	r3, #26
 8001bc4:	72bb      	strb	r3, [r7, #10]
 8001bc6:	e00c      	b.n	8001be2 <DecodeData+0x15a>
			*(pFloat+i-26)=dataArr[i];
 8001bc8:	7abb      	ldrb	r3, [r7, #10]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	441a      	add	r2, r3
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <DecodeData+0x1e0>)
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	7abb      	ldrb	r3, [r7, #10]
 8001bd4:	3b1a      	subs	r3, #26
 8001bd6:	440b      	add	r3, r1
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 26; i < 30; i++)
 8001bdc:	7abb      	ldrb	r3, [r7, #10]
 8001bde:	3301      	adds	r3, #1
 8001be0:	72bb      	strb	r3, [r7, #10]
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	2b1d      	cmp	r3, #29
 8001be6:	d9ef      	bls.n	8001bc8 <DecodeData+0x140>
}
 8001be8:	e038      	b.n	8001c5c <DecodeData+0x1d4>
	}else if(dataArr[30] == ID)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	331e      	adds	r3, #30
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d133      	bne.n	8001c5c <DecodeData+0x1d4>
		pFloat = &Mode;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <DecodeData+0x1e0>)
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <DecodeData+0x1e4>)
 8001bf8:	601a      	str	r2, [r3, #0]
		*(pFloat)=dataArr[31];
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <DecodeData+0x1e0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	7fd2      	ldrb	r2, [r2, #31]
 8001c02:	701a      	strb	r2, [r3, #0]
		pFloat = &BLDCSpeed;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <DecodeData+0x1e0>)
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <DecodeData+0x1e8>)
 8001c08:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 32; i < 36; i++)
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	727b      	strb	r3, [r7, #9]
 8001c0e:	e00c      	b.n	8001c2a <DecodeData+0x1a2>
			*(pFloat+i-32)=dataArr[i];
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	441a      	add	r2, r3
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <DecodeData+0x1e0>)
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	7a7b      	ldrb	r3, [r7, #9]
 8001c1c:	3b20      	subs	r3, #32
 8001c1e:	440b      	add	r3, r1
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 32; i < 36; i++)
 8001c24:	7a7b      	ldrb	r3, [r7, #9]
 8001c26:	3301      	adds	r3, #1
 8001c28:	727b      	strb	r3, [r7, #9]
 8001c2a:	7a7b      	ldrb	r3, [r7, #9]
 8001c2c:	2b23      	cmp	r3, #35	; 0x23
 8001c2e:	d9ef      	bls.n	8001c10 <DecodeData+0x188>
		pFloat = &DCPos;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <DecodeData+0x1e0>)
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <DecodeData+0x1ec>)
 8001c34:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 36; i < 40; i++)
 8001c36:	2324      	movs	r3, #36	; 0x24
 8001c38:	723b      	strb	r3, [r7, #8]
 8001c3a:	e00c      	b.n	8001c56 <DecodeData+0x1ce>
			*(pFloat+i-36)=dataArr[i];
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	441a      	add	r2, r3
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <DecodeData+0x1e0>)
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	7a3b      	ldrb	r3, [r7, #8]
 8001c48:	3b24      	subs	r3, #36	; 0x24
 8001c4a:	440b      	add	r3, r1
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 36; i < 40; i++)
 8001c50:	7a3b      	ldrb	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	723b      	strb	r3, [r7, #8]
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	2b27      	cmp	r3, #39	; 0x27
 8001c5a:	d9ef      	bls.n	8001c3c <DecodeData+0x1b4>
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200006d8 	.word	0x200006d8
 8001c6c:	200006d5 	.word	0x200006d5
 8001c70:	200006a0 	.word	0x200006a0
 8001c74:	200006a4 	.word	0x200006a4

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b0a6      	sub	sp, #152	; 0x98
 8001c7c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7e:	f000 fe47 	bl	8002910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c82:	f000 f949 	bl	8001f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c86:	f000 fb09 	bl	800229c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c8a:	f000 fae9 	bl	8002260 <MX_DMA_Init>
  MX_TIM3_Init();
 8001c8e:	f000 fa15 	bl	80020bc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001c92:	f000 f987 	bl	8001fa4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001c96:	f000 fab9 	bl	800220c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001c9a:	f000 fa63 	bl	8002164 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* -------------------Begin: Init PWM CHANNELS------------------------------*/
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	4889      	ldr	r0, [pc, #548]	; (8001ec8 <main+0x250>)
 8001ca2:	f002 f8f9 	bl	8003e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	4887      	ldr	r0, [pc, #540]	; (8001ec8 <main+0x250>)
 8001caa:	f002 f8f5 	bl	8003e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001cae:	210c      	movs	r1, #12
 8001cb0:	4885      	ldr	r0, [pc, #532]	; (8001ec8 <main+0x250>)
 8001cb2:	f002 f8f1 	bl	8003e98 <HAL_TIM_PWM_Start>
  /* -------------------End: Init PWM CHANNELS--------------------------------*/

  /* -------------------Begin: Init Interrupt Encoder's Channels--------------*/
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001cb6:	213c      	movs	r1, #60	; 0x3c
 8001cb8:	4884      	ldr	r0, [pc, #528]	; (8001ecc <main+0x254>)
 8001cba:	f002 fa31 	bl	8004120 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001cbe:	213c      	movs	r1, #60	; 0x3c
 8001cc0:	4883      	ldr	r0, [pc, #524]	; (8001ed0 <main+0x258>)
 8001cc2:	f002 fa2d 	bl	8004120 <HAL_TIM_Encoder_Start_IT>
  /* -------------------End: Init Interrupt Encoder's Channels----------------*/

  /* -------------------Begin: Setting BLDC-----------------------------------*/
  EncoderSetting(&ENC_BLDC, &htim4, BLDCEncoderPerRound*BLDCGearRatio, BLDCDeltaT);
 8001cc6:	a378      	add	r3, pc, #480	; (adr r3, 8001ea8 <main+0x230>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8001cd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cd4:	497e      	ldr	r1, [pc, #504]	; (8001ed0 <main+0x258>)
 8001cd6:	487f      	ldr	r0, [pc, #508]	; (8001ed4 <main+0x25c>)
 8001cd8:	f7ff f9b9 	bl	800104e <EncoderSetting>
  Pid_SetParam(&PID_BLDC, BLDCPropotion, BLDCIntergral, BLDCDerivative, BLDCAlpha, BLDCDeltaT, BLDCIntergralAboveLimit, BLDCIntergralBelowLimit, BLDCSumAboveLimit, BLDCSumBelowLimit);
 8001cdc:	a374      	add	r3, pc, #464	; (adr r3, 8001eb0 <main+0x238>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <main+0x260>)
 8001cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001cf0:	a36f      	add	r3, pc, #444	; (adr r3, 8001eb0 <main+0x238>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <main+0x260>)
 8001d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d04:	a368      	add	r3, pc, #416	; (adr r3, 8001ea8 <main+0x230>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <main+0x264>)
 8001d2c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d30:	a361      	add	r3, pc, #388	; (adr r3, 8001eb8 <main+0x240>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	486a      	ldr	r0, [pc, #424]	; (8001ee0 <main+0x268>)
 8001d38:	f7ff fb34 	bl	80013a4 <Pid_SetParam>
  /* -------------------End: Setting BLDC-----------------------------------*/


  EncoderSetting(&ENC_DC, &htim3, DCEncoderPerRound*DCGearRatio, DCDeltaT);
 8001d3c:	a35a      	add	r3, pc, #360	; (adr r3, 8001ea8 <main+0x230>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	e9cd 2300 	strd	r2, r3, [sp]
 8001d46:	f640 52cf 	movw	r2, #3535	; 0xdcf
 8001d4a:	4960      	ldr	r1, [pc, #384]	; (8001ecc <main+0x254>)
 8001d4c:	4865      	ldr	r0, [pc, #404]	; (8001ee4 <main+0x26c>)
 8001d4e:	f7ff f97e 	bl	800104e <EncoderSetting>
  Pid_SetParam(&PID_DC_SPEED, DCProportion, DCIntegral, DCDerivatite, DCAlpha, DCDeltaT, DCIntegralAboveLimit, DCIntegralBelowLimit, DCSumAboveLimit, DCSumBelowLimit);
 8001d52:	a357      	add	r3, pc, #348	; (adr r3, 8001eb0 <main+0x238>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <main+0x260>)
 8001d62:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001d66:	a352      	add	r3, pc, #328	; (adr r3, 8001eb0 <main+0x238>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <main+0x260>)
 8001d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d7a:	a34b      	add	r3, pc, #300	; (adr r3, 8001ea8 <main+0x230>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d9c:	a348      	add	r3, pc, #288	; (adr r3, 8001ec0 <main+0x248>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	e9cd 2300 	strd	r2, r3, [sp]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <main+0x270>)
 8001dac:	484f      	ldr	r0, [pc, #316]	; (8001eec <main+0x274>)
 8001dae:	f7ff faf9 	bl	80013a4 <Pid_SetParam>
  Pid_SetParam(&PID_DC_POS, DCProportionPOS, DCIntegralPOS, DCDerivatitePOS, DCAlphaPOS, DCDeltaTPOS, DCIntegralAboveLimitPOS, DCIntegralBelowLimitPOS, DCSumAboveLimitPOS, DCSumBelowLimitPOS);
 8001db2:	a33f      	add	r3, pc, #252	; (adr r3, 8001eb0 <main+0x238>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <main+0x260>)
 8001dc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001dc6:	a33a      	add	r3, pc, #232	; (adr r3, 8001eb0 <main+0x238>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <main+0x260>)
 8001dd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001dda:	a333      	add	r3, pc, #204	; (adr r3, 8001ea8 <main+0x230>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9cd 2300 	strd	r2, r3, [sp]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b33      	ldr	r3, [pc, #204]	; (8001edc <main+0x264>)
 8001e0e:	4838      	ldr	r0, [pc, #224]	; (8001ef0 <main+0x278>)
 8001e10:	f7ff fac8 	bl	80013a4 <Pid_SetParam>

//  HAL_UART_Receive_IT(&huart1, Rx_Buf, 6);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_Buf, 41);
 8001e14:	2229      	movs	r2, #41	; 0x29
 8001e16:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <main+0x27c>)
 8001e18:	4837      	ldr	r0, [pc, #220]	; (8001ef8 <main+0x280>)
 8001e1a:	f003 f849 	bl	8004eb0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <main+0x284>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <main+0x284>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0204 	bic.w	r2, r2, #4
 8001e2c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PID_BLDC */
  osThreadDef(PID_BLDC, StartPID_BLDC, osPriorityBelowNormal, 0, 128);
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <main+0x288>)
 8001e30:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001e34:	461d      	mov	r5, r3
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_BLDCHandle = osThreadCreate(osThread(PID_BLDC), NULL);
 8001e42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 ff4b 	bl	8005ce4 <osThreadCreate>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <main+0x28c>)
 8001e52:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_DC */
  osThreadDef(PID_DC, StartPID_DC, osPriorityAboveNormal, 0, 128);
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <main+0x290>)
 8001e56:	f107 0420 	add.w	r4, r7, #32
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_DCHandle = osThreadCreate(osThread(PID_DC), NULL);
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 ff38 	bl	8005ce4 <osThreadCreate>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <main+0x294>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* definition and creation of LogicTask */
  osThreadDef(LogicTask, StartLogicTask, osPriorityNormal, 0, 128);
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <main+0x298>)
 8001e7c:	1d3c      	adds	r4, r7, #4
 8001e7e:	461d      	mov	r5, r3
 8001e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LogicTaskHandle = osThreadCreate(osThread(LogicTask), NULL);
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 ff27 	bl	8005ce4 <osThreadCreate>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <main+0x29c>)
 8001e9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001e9c:	f003 ff1b 	bl	8005cd6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <main+0x228>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001eac:	3f50624d 	.word	0x3f50624d
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	c08f4000 	.word	0xc08f4000
 8001eb8:	9999999a 	.word	0x9999999a
 8001ebc:	3fc99999 	.word	0x3fc99999
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	4072c000 	.word	0x4072c000
 8001ec8:	20000288 	.word	0x20000288
 8001ecc:	200002d0 	.word	0x200002d0
 8001ed0:	20000318 	.word	0x20000318
 8001ed4:	200003f8 	.word	0x200003f8
 8001ed8:	408f4000 	.word	0x408f4000
 8001edc:	40240000 	.word	0x40240000
 8001ee0:	200004c0 	.word	0x200004c0
 8001ee4:	20000440 	.word	0x20000440
 8001ee8:	40140000 	.word	0x40140000
 8001eec:	20000558 	.word	0x20000558
 8001ef0:	200005f0 	.word	0x200005f0
 8001ef4:	200006ac 	.word	0x200006ac
 8001ef8:	20000360 	.word	0x20000360
 8001efc:	200003a8 	.word	0x200003a8
 8001f00:	080070dc 	.word	0x080070dc
 8001f04:	200003ec 	.word	0x200003ec
 8001f08:	08007100 	.word	0x08007100
 8001f0c:	200003f0 	.word	0x200003f0
 8001f10:	08007128 	.word	0x08007128
 8001f14:	200003f4 	.word	0x200003f4

08001f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b090      	sub	sp, #64	; 0x40
 8001f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	2228      	movs	r2, #40	; 0x28
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f89a 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fa5f 	bl	8003424 <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f6c:	f000 fa5e 	bl	800242c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f70:	230f      	movs	r3, #15
 8001f72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	2302      	movs	r3, #2
 8001f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fccc 	bl	8003928 <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f96:	f000 fa49 	bl	800242c <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3740      	adds	r7, #64	; 0x40
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001fde:	2206      	movs	r2, #6
 8001fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffc:	482e      	ldr	r0, [pc, #184]	; (80020b8 <MX_TIM2_Init+0x114>)
 8001ffe:	f001 fe51 	bl	8003ca4 <HAL_TIM_Base_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002008:	f000 fa10 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002016:	4619      	mov	r1, r3
 8002018:	4827      	ldr	r0, [pc, #156]	; (80020b8 <MX_TIM2_Init+0x114>)
 800201a:	f002 faf9 	bl	8004610 <HAL_TIM_ConfigClockSource>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002024:	f000 fa02 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002028:	4823      	ldr	r0, [pc, #140]	; (80020b8 <MX_TIM2_Init+0x114>)
 800202a:	f001 fedd 	bl	8003de8 <HAL_TIM_PWM_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002034:	f000 f9fa 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4619      	mov	r1, r3
 8002046:	481c      	ldr	r0, [pc, #112]	; (80020b8 <MX_TIM2_Init+0x114>)
 8002048:	f002 fe72 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002052:	f000 f9eb 	bl	800242c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002056:	2360      	movs	r3, #96	; 0x60
 8002058:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2204      	movs	r2, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <MX_TIM2_Init+0x114>)
 800206e:	f002 fa0d 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002078:	f000 f9d8 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2208      	movs	r2, #8
 8002080:	4619      	mov	r1, r3
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <MX_TIM2_Init+0x114>)
 8002084:	f002 fa02 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800208e:	f000 f9cd 	bl	800242c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	220c      	movs	r2, #12
 8002096:	4619      	mov	r1, r3
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <MX_TIM2_Init+0x114>)
 800209a:	f002 f9f7 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80020a4:	f000 f9c2 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <MX_TIM2_Init+0x114>)
 80020aa:	f000 fa95 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 80020ae:	bf00      	nop
 80020b0:	3738      	adds	r7, #56	; 0x38
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000288 	.word	0x20000288

080020bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 ffc8 	bl	8007060 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <MX_TIM3_Init+0xa0>)
 80020da:	4a21      	ldr	r2, [pc, #132]	; (8002160 <MX_TIM3_Init+0xa4>)
 80020dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <MX_TIM3_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM3_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <MX_TIM3_Init+0xa0>)
 80020ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_TIM3_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_TIM3_Init+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fe:	2303      	movs	r3, #3
 8002100:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <MX_TIM3_Init+0xa0>)
 800212a:	f001 ff57 	bl	8003fdc <HAL_TIM_Encoder_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002134:	f000 f97a 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_TIM3_Init+0xa0>)
 8002146:	f002 fdf3 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002150:	f000 f96c 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200002d0 	.word	0x200002d0
 8002160:	40000400 	.word	0x40000400

08002164 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f004 ff74 	bl	8007060 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <MX_TIM4_Init+0xa0>)
 8002182:	4a21      	ldr	r2, [pc, #132]	; (8002208 <MX_TIM4_Init+0xa4>)
 8002184:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_TIM4_Init+0xa0>)
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <MX_TIM4_Init+0xa0>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_TIM4_Init+0xa0>)
 8002194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002198:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_TIM4_Init+0xa0>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <MX_TIM4_Init+0xa0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021a6:	2303      	movs	r3, #3
 80021a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ae:	2301      	movs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021be:	2301      	movs	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4619      	mov	r1, r3
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <MX_TIM4_Init+0xa0>)
 80021d2:	f001 ff03 	bl	8003fdc <HAL_TIM_Encoder_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f000 f926 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_TIM4_Init+0xa0>)
 80021ee:	f002 fd9f 	bl	8004d30 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021f8:	f000 f918 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	; 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000318 	.word	0x20000318
 8002208:	40000800 	.word	0x40000800

0800220c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <MX_USART1_UART_Init+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002244:	f002 fde4 	bl	8004e10 <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800224e:	f000 f8ed 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000360 	.word	0x20000360
 800225c:	40013800 	.word	0x40013800

08002260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_DMA_Init+0x38>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <MX_DMA_Init+0x38>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6153      	str	r3, [r2, #20]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_DMA_Init+0x38>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2105      	movs	r1, #5
 8002282:	200f      	movs	r0, #15
 8002284:	f000 fc2b 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002288:	200f      	movs	r0, #15
 800228a:	f000 fc44 	bl	8002b16 <HAL_NVIC_EnableIRQ>

}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000

0800229c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022b6:	f043 0320 	orr.w	r3, r3, #32
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <MX_GPIO_Init+0xb4>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2101      	movs	r1, #1
 80022fc:	4815      	ldr	r0, [pc, #84]	; (8002354 <MX_GPIO_Init+0xb8>)
 80022fe:	f001 f856 	bl	80033ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DirBLDC_Pin */
  GPIO_InitStruct.Pin = DirBLDC_Pin;
 8002302:	2301      	movs	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2302      	movs	r3, #2
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DirBLDC_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4619      	mov	r1, r3
 8002318:	480e      	ldr	r0, [pc, #56]	; (8002354 <MX_GPIO_Init+0xb8>)
 800231a:	f000 fead 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : Home_Pin */
  GPIO_InitStruct.Pin = Home_Pin;
 800231e:	2320      	movs	r3, #32
 8002320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <MX_GPIO_Init+0xbc>)
 8002324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Home_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4619      	mov	r1, r3
 8002330:	4808      	ldr	r0, [pc, #32]	; (8002354 <MX_GPIO_Init+0xb8>)
 8002332:	f000 fea1 	bl	8003078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2105      	movs	r1, #5
 800233a:	2017      	movs	r0, #23
 800233c:	f000 fbcf 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002340:	2017      	movs	r0, #23
 8002342:	f000 fbe8 	bl	8002b16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002346:	bf00      	nop
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40010800 	.word	0x40010800
 8002358:	10110000 	.word	0x10110000

0800235c <StartPID_BLDC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPID_BLDC */
void StartPID_BLDC(void const * argument)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	SpeedReadNonReset(&ENC_BLDC);

	PIDBLDC();
 8002364:	f7ff f9a6 	bl	80016b4 <PIDBLDC>
    osDelay(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f003 fd07 	bl	8005d7c <osDelay>
	PIDBLDC();
 800236e:	e7f9      	b.n	8002364 <StartPID_BLDC+0x8>

08002370 <StartPID_DC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID_DC */
void StartPID_DC(void const * argument)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID_DC */
  /* Infinite loop */
  for(;;)
  {
//	SpeedReadNonReset(&ENC_DC);
	if((HomeStatus) && (RunStatus != 2))
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <StartPID_DC+0x2c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <StartPID_DC+0x1e>
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <StartPID_DC+0x30>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d002      	beq.n	800238e <StartPID_DC+0x1e>
	{
		PIDDCPOS();
 8002388:	f7ff f9f4 	bl	8001774 <PIDDCPOS>
 800238c:	e001      	b.n	8002392 <StartPID_DC+0x22>
	}
	else
	{
		PIDDCSPEED();
 800238e:	f7ff f9bf 	bl	8001710 <PIDDCSPEED>
	}
//	PIDDCPOS();
    osDelay(1);
 8002392:	2001      	movs	r0, #1
 8002394:	f003 fcf2 	bl	8005d7c <osDelay>
	if((HomeStatus) && (RunStatus != 2))
 8002398:	e7ee      	b.n	8002378 <StartPID_DC+0x8>
 800239a:	bf00      	nop
 800239c:	200006a8 	.word	0x200006a8
 80023a0:	200006aa 	.word	0x200006aa

080023a4 <StartLogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogicTask */
void StartLogicTask(void const * argument)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogicTask */
  /* Infinite loop */
  for(;;)
  {
	if(HomeFound == 0)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <StartLogicTask+0x50>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <StartLogicTask+0x16>
	{
		HomeFinding();
 80023b4:	f7ff fa54 	bl	8001860 <HomeFinding>
 80023b8:	e017      	b.n	80023ea <StartLogicTask+0x46>
	}
	else if(HomeFound == 1)
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <StartLogicTask+0x50>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d113      	bne.n	80023ea <StartLogicTask+0x46>
	{
		SpeedTest_DC_POS = DCPos;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <StartLogicTask+0x54>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f826 	bl	8000418 <__aeabi_f2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	490a      	ldr	r1, [pc, #40]	; (80023fc <StartLogicTask+0x58>)
 80023d2:	e9c1 2300 	strd	r2, r3, [r1]
		SpeedTestBLDC = BLDCSpeed;
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <StartLogicTask+0x5c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f81c 	bl	8000418 <__aeabi_f2d>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <StartLogicTask+0x60>)
 80023e6:	e9c1 2300 	strd	r2, r3, [r1]
	}
    osDelay(1);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f003 fcc6 	bl	8005d7c <osDelay>
	if(HomeFound == 0)
 80023f0:	e7dc      	b.n	80023ac <StartLogicTask+0x8>
 80023f2:	bf00      	nop
 80023f4:	200006a9 	.word	0x200006a9
 80023f8:	200006a4 	.word	0x200006a4
 80023fc:	20000698 	.word	0x20000698
 8002400:	200006a0 	.word	0x200006a0
 8002404:	20000688 	.word	0x20000688

08002408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800241a:	f000 fa8f 	bl	800293c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40012c00 	.word	0x40012c00

0800242c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002434:	e7fe      	b.n	8002434 <Error_Handler+0x8>
	...

08002438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_MspInit+0x68>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_MspInit+0x68>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_MspInit+0x68>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_MspInit+0x68>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_MspInit+0x68>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_MspInit+0x68>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	210f      	movs	r1, #15
 8002472:	f06f 0001 	mvn.w	r0, #1
 8002476:	f000 fb32 	bl	8002ade <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_MspInit+0x6c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_MspInit+0x6c>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010000 	.word	0x40010000

080024a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d10b      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_TIM_Base_MspInit+0x34>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_TIM_Base_MspInit+0x34>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_TIM_Base_MspInit+0x34>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12c      	bne.n	800255a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	61d3      	str	r3, [r2, #28]
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002530:	23c0      	movs	r3, #192	; 0xc0
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0318 	add.w	r3, r7, #24
 8002540:	4619      	mov	r1, r3
 8002542:	4822      	ldr	r0, [pc, #136]	; (80025cc <HAL_TIM_Encoder_MspInit+0xec>)
 8002544:	f000 fd98 	bl	8003078 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2105      	movs	r1, #5
 800254c:	201d      	movs	r0, #29
 800254e:	f000 fac6 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002552:	201d      	movs	r0, #29
 8002554:	f000 fadf 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002558:	e030      	b.n	80025bc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12b      	bne.n	80025bc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	61d3      	str	r3, [r2, #28]
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	6193      	str	r3, [r2, #24]
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f107 0318 	add.w	r3, r7, #24
 80025a4:	4619      	mov	r1, r3
 80025a6:	480b      	ldr	r0, [pc, #44]	; (80025d4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80025a8:	f000 fd66 	bl	8003078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2105      	movs	r1, #5
 80025b0:	201e      	movs	r0, #30
 80025b2:	f000 fa94 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025b6:	201e      	movs	r0, #30
 80025b8:	f000 faad 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 80025bc:	bf00      	nop
 80025be:	3728      	adds	r7, #40	; 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010800 	.word	0x40010800
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40010c00 	.word	0x40010c00

080025d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f6:	d117      	bne.n	8002628 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_TIM_MspPostInit+0x58>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <HAL_TIM_MspPostInit+0x58>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_TIM_MspPostInit+0x58>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002610:	230e      	movs	r3, #14
 8002612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2302      	movs	r3, #2
 800261a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	4619      	mov	r1, r3
 8002622:	4804      	ldr	r0, [pc, #16]	; (8002634 <HAL_TIM_MspPostInit+0x5c>)
 8002624:	f000 fd28 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	40010800 	.word	0x40010800

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_UART_MspInit+0xe8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d15f      	bne.n	8002718 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_UART_MspInit+0xec>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <HAL_UART_MspInit+0xec>)
 800265e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_UART_MspInit+0xec>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_UART_MspInit+0xec>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_UART_MspInit+0xec>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_UART_MspInit+0xec>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	4619      	mov	r1, r3
 800269c:	4822      	ldr	r0, [pc, #136]	; (8002728 <HAL_UART_MspInit+0xf0>)
 800269e:	f000 fceb 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4619      	mov	r1, r3
 80026b6:	481c      	ldr	r0, [pc, #112]	; (8002728 <HAL_UART_MspInit+0xf0>)
 80026b8:	f000 fcde 	bl	8003078 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_UART_MspInit+0xf8>)
 80026c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026ec:	480f      	ldr	r0, [pc, #60]	; (800272c <HAL_UART_MspInit+0xf4>)
 80026ee:	f000 fa21 	bl	8002b34 <HAL_DMA_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80026f8:	f7ff fe98 	bl	800242c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_UART_MspInit+0xf4>)
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_UART_MspInit+0xf4>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2105      	movs	r1, #5
 800270c:	2025      	movs	r0, #37	; 0x25
 800270e:	f000 f9e6 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002712:	2025      	movs	r0, #37	; 0x25
 8002714:	f000 f9ff 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002718:	bf00      	nop
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	40010800 	.word	0x40010800
 800272c:	200003a8 	.word	0x200003a8
 8002730:	40020058 	.word	0x40020058

08002734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_InitTick+0xd0>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <HAL_InitTick+0xd0>)
 8002750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_InitTick+0xd0>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002762:	f107 020c 	add.w	r2, r7, #12
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fa4b 	bl	8003c08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002772:	f001 fa35 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8002776:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_InitTick+0xd4>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3b01      	subs	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_InitTick+0xd8>)
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_InitTick+0xdc>)
 800278a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_InitTick+0xd8>)
 800278e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002792:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_InitTick+0xd8>)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_InitTick+0xd8>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_InitTick+0xd8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_InitTick+0xd8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80027ac:	4817      	ldr	r0, [pc, #92]	; (800280c <HAL_InitTick+0xd8>)
 80027ae:	f001 fa79 	bl	8003ca4 <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80027b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11b      	bne.n	80027f8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80027c0:	4812      	ldr	r0, [pc, #72]	; (800280c <HAL_InitTick+0xd8>)
 80027c2:	f001 fabf 	bl	8003d44 <HAL_TIM_Base_Start_IT>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80027cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027d4:	2019      	movs	r0, #25
 80027d6:	f000 f99e 	bl	8002b16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d808      	bhi.n	80027f2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	2019      	movs	r0, #25
 80027e6:	f000 f97a 	bl	8002ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_InitTick+0xe0>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e002      	b.n	80027f8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3730      	adds	r7, #48	; 0x30
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	431bde83 	.word	0x431bde83
 800280c:	200006dc 	.word	0x200006dc
 8002810:	40012c00 	.word	0x40012c00
 8002814:	20000008 	.word	0x20000008

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <DMA1_Channel5_IRQHandler+0x10>)
 800284a:	f000 fae1 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200003a8 	.word	0x200003a8

08002858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Home_Pin);
 800285c:	2020      	movs	r0, #32
 800285e:	f000 fdbf 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <TIM1_UP_IRQHandler+0x10>)
 800286e:	f001 fd05 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200006dc 	.word	0x200006dc

0800287c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <TIM3_IRQHandler+0x10>)
 8002882:	f001 fcfb 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200002d0 	.word	0x200002d0

08002890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <TIM4_IRQHandler+0x10>)
 8002896:	f001 fcf1 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000318 	.word	0x20000318

080028a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <USART1_IRQHandler+0x10>)
 80028aa:	f002 fb5f 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000360 	.word	0x20000360

080028b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c4:	f7ff fff8 	bl	80028b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028ca:	490c      	ldr	r1, [pc, #48]	; (80028fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028e0:	4c09      	ldr	r4, [pc, #36]	; (8002908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ee:	f004 fbbf 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028f2:	f7ff f9c1 	bl	8001c78 <main>
  bx lr
 80028f6:	4770      	bx	lr
  ldr r0, =_sdata
 80028f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002900:	08007180 	.word	0x08007180
  ldr r2, =_sbss
 8002904:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002908:	20001474 	.word	0x20001474

0800290c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800290c:	e7fe      	b.n	800290c <ADC1_2_IRQHandler>
	...

08002910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_Init+0x28>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_Init+0x28>)
 800291a:	f043 0310 	orr.w	r3, r3, #16
 800291e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002920:	2003      	movs	r0, #3
 8002922:	f000 f8d1 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002926:	200f      	movs	r0, #15
 8002928:	f7ff ff04 	bl	8002734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292c:	f7ff fd84 	bl	8002438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x1c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x20>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_IncTick+0x20>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	2000000c 	.word	0x2000000c
 800295c:	20000724 	.word	0x20000724

08002960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_GetTick+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000724 	.word	0x20000724

08002974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002990:	4013      	ands	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800299c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__NVIC_GetPriorityGrouping+0x18>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 0307 	and.w	r3, r3, #7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0b      	blt.n	8002a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4906      	ldr	r1, [pc, #24]	; (8002a0c <__NVIC_EnableIRQ+0x34>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	; (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff4f 	bl	8002974 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff64 	bl	80029bc <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ffb2 	bl	8002a64 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff81 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff57 	bl	80029d8 <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e043      	b.n	8002bd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_DMA_Init+0xa8>)
 8002b52:	4413      	add	r3, r2
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_DMA_Init+0xac>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_DMA_Init+0xb0>)
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	bffdfff8 	.word	0xbffdfff8
 8002be0:	cccccccd 	.word	0xcccccccd
 8002be4:	40020000 	.word	0x40020000

08002be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_DMA_Start_IT+0x20>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e04b      	b.n	8002ca0 <HAL_DMA_Start_IT+0xb8>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d13a      	bne.n	8002c92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f9eb 	bl	800301c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 020e 	orr.w	r2, r2, #14
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e00f      	b.n	8002c80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0204 	bic.w	r2, r2, #4
 8002c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 020a 	orr.w	r2, r2, #10
 8002c7e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d008      	beq.n	8002cd2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e020      	b.n	8002d14 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 020e 	bic.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d005      	beq.n	8002d44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e051      	b.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 020e 	bic.w	r2, r2, #14
 8002d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_DMA_Abort_IT+0xd4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d029      	beq.n	8002dc2 <HAL_DMA_Abort_IT+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_DMA_Abort_IT+0xd8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_Abort_IT+0x9e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_DMA_Abort_IT+0xdc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01a      	beq.n	8002db8 <HAL_DMA_Abort_IT+0x98>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_DMA_Abort_IT+0xe0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x92>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_DMA_Abort_IT+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00a      	beq.n	8002dac <HAL_DMA_Abort_IT+0x8c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_DMA_Abort_IT+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <HAL_DMA_Abort_IT+0x86>
 8002da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002da4:	e00e      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002daa:	e00b      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db0:	e008      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db6:	e005      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dbc:	e002      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_Abort_IT+0xa4>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <HAL_DMA_Abort_IT+0xec>)
 8002dc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
    } 
  }
  return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40020008 	.word	0x40020008
 8002df8:	4002001c 	.word	0x4002001c
 8002dfc:	40020030 	.word	0x40020030
 8002e00:	40020044 	.word	0x40020044
 8002e04:	40020058 	.word	0x40020058
 8002e08:	4002006c 	.word	0x4002006c
 8002e0c:	40020000 	.word	0x40020000

08002e10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d04f      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xc8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0204 	bic.w	r2, r2, #4
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a66      	ldr	r2, [pc, #408]	; (8003000 <HAL_DMA_IRQHandler+0x1f0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d029      	beq.n	8002ebe <HAL_DMA_IRQHandler+0xae>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a65      	ldr	r2, [pc, #404]	; (8003004 <HAL_DMA_IRQHandler+0x1f4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_IRQHandler+0xaa>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a63      	ldr	r2, [pc, #396]	; (8003008 <HAL_DMA_IRQHandler+0x1f8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0xa4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a62      	ldr	r2, [pc, #392]	; (800300c <HAL_DMA_IRQHandler+0x1fc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d012      	beq.n	8002eae <HAL_DMA_IRQHandler+0x9e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a60      	ldr	r2, [pc, #384]	; (8003010 <HAL_DMA_IRQHandler+0x200>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x98>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5f      	ldr	r2, [pc, #380]	; (8003014 <HAL_DMA_IRQHandler+0x204>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x92>
 8002e9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea0:	e00e      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ea6:	e00b      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002ea8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002eac:	e008      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb2:	e005      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb8:	e002      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	e000      	b.n	8002ec0 <HAL_DMA_IRQHandler+0xb0>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	4a55      	ldr	r2, [pc, #340]	; (8003018 <HAL_DMA_IRQHandler+0x208>)
 8002ec2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8094 	beq.w	8002ff6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed6:	e08e      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2202      	movs	r2, #2
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d056      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x186>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d051      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 020a 	bic.w	r2, r2, #10
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a38      	ldr	r2, [pc, #224]	; (8003000 <HAL_DMA_IRQHandler+0x1f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d029      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x166>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a37      	ldr	r2, [pc, #220]	; (8003004 <HAL_DMA_IRQHandler+0x1f4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x162>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_DMA_IRQHandler+0x1f8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01a      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x15c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_DMA_IRQHandler+0x1fc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d012      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x156>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a32      	ldr	r2, [pc, #200]	; (8003010 <HAL_DMA_IRQHandler+0x200>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x150>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_DMA_IRQHandler+0x204>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x14a>
 8002f54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5e:	e00b      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f64:	e008      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6a:	e005      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f70:	e002      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f72:	2320      	movs	r3, #32
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_IRQHandler+0x168>
 8002f76:	2302      	movs	r3, #2
 8002f78:	4a27      	ldr	r2, [pc, #156]	; (8003018 <HAL_DMA_IRQHandler+0x208>)
 8002f7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d034      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f94:	e02f      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x1e8>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d023      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 020e 	bic.w	r2, r2, #14
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
    }
  }
  return;
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
}
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40020008 	.word	0x40020008
 8003004:	4002001c 	.word	0x4002001c
 8003008:	40020030 	.word	0x40020030
 800300c:	40020044 	.word	0x40020044
 8003010:	40020058 	.word	0x40020058
 8003014:	4002006c 	.word	0x4002006c
 8003018:	40020000 	.word	0x40020000

0800301c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b10      	cmp	r3, #16
 8003048:	d108      	bne.n	800305c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800305a:	e007      	b.n	800306c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
	...

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b08b      	sub	sp, #44	; 0x2c
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	e169      	b.n	8003360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800308c:	2201      	movs	r2, #1
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	f040 8158 	bne.w	800335a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a9a      	ldr	r2, [pc, #616]	; (8003318 <HAL_GPIO_Init+0x2a0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d05e      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
 80030b4:	4a98      	ldr	r2, [pc, #608]	; (8003318 <HAL_GPIO_Init+0x2a0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d875      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030ba:	4a98      	ldr	r2, [pc, #608]	; (800331c <HAL_GPIO_Init+0x2a4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d058      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
 80030c0:	4a96      	ldr	r2, [pc, #600]	; (800331c <HAL_GPIO_Init+0x2a4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d86f      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <HAL_GPIO_Init+0x2a8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d052      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
 80030cc:	4a94      	ldr	r2, [pc, #592]	; (8003320 <HAL_GPIO_Init+0x2a8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d869      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030d2:	4a94      	ldr	r2, [pc, #592]	; (8003324 <HAL_GPIO_Init+0x2ac>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04c      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
 80030d8:	4a92      	ldr	r2, [pc, #584]	; (8003324 <HAL_GPIO_Init+0x2ac>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d863      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030de:	4a92      	ldr	r2, [pc, #584]	; (8003328 <HAL_GPIO_Init+0x2b0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d046      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
 80030e4:	4a90      	ldr	r2, [pc, #576]	; (8003328 <HAL_GPIO_Init+0x2b0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d85d      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030ea:	2b12      	cmp	r3, #18
 80030ec:	d82a      	bhi.n	8003144 <HAL_GPIO_Init+0xcc>
 80030ee:	2b12      	cmp	r3, #18
 80030f0:	d859      	bhi.n	80031a6 <HAL_GPIO_Init+0x12e>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_GPIO_Init+0x80>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003173 	.word	0x08003173
 80030fc:	0800314d 	.word	0x0800314d
 8003100:	0800315f 	.word	0x0800315f
 8003104:	080031a1 	.word	0x080031a1
 8003108:	080031a7 	.word	0x080031a7
 800310c:	080031a7 	.word	0x080031a7
 8003110:	080031a7 	.word	0x080031a7
 8003114:	080031a7 	.word	0x080031a7
 8003118:	080031a7 	.word	0x080031a7
 800311c:	080031a7 	.word	0x080031a7
 8003120:	080031a7 	.word	0x080031a7
 8003124:	080031a7 	.word	0x080031a7
 8003128:	080031a7 	.word	0x080031a7
 800312c:	080031a7 	.word	0x080031a7
 8003130:	080031a7 	.word	0x080031a7
 8003134:	080031a7 	.word	0x080031a7
 8003138:	080031a7 	.word	0x080031a7
 800313c:	08003155 	.word	0x08003155
 8003140:	08003169 	.word	0x08003169
 8003144:	4a79      	ldr	r2, [pc, #484]	; (800332c <HAL_GPIO_Init+0x2b4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800314a:	e02c      	b.n	80031a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e029      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	3304      	adds	r3, #4
 800315a:	623b      	str	r3, [r7, #32]
          break;
 800315c:	e024      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	3308      	adds	r3, #8
 8003164:	623b      	str	r3, [r7, #32]
          break;
 8003166:	e01f      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	330c      	adds	r3, #12
 800316e:	623b      	str	r3, [r7, #32]
          break;
 8003170:	e01a      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800317a:	2304      	movs	r3, #4
 800317c:	623b      	str	r3, [r7, #32]
          break;
 800317e:	e013      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003188:	2308      	movs	r3, #8
 800318a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	611a      	str	r2, [r3, #16]
          break;
 8003192:	e009      	b.n	80031a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003194:	2308      	movs	r3, #8
 8003196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	615a      	str	r2, [r3, #20]
          break;
 800319e:	e003      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
          break;
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x130>
          break;
 80031a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d801      	bhi.n	80031b2 <HAL_GPIO_Init+0x13a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	e001      	b.n	80031b6 <HAL_GPIO_Init+0x13e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d802      	bhi.n	80031c4 <HAL_GPIO_Init+0x14c>
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x152>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3b08      	subs	r3, #8
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	210f      	movs	r1, #15
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	431a      	orrs	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80b1 	beq.w	800335a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031f8:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <HAL_GPIO_Init+0x2b8>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <HAL_GPIO_Init+0x2b8>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6193      	str	r3, [r2, #24]
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_GPIO_Init+0x2b8>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003210:	4a48      	ldr	r2, [pc, #288]	; (8003334 <HAL_GPIO_Init+0x2bc>)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3302      	adds	r3, #2
 8003218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a40      	ldr	r2, [pc, #256]	; (8003338 <HAL_GPIO_Init+0x2c0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_GPIO_Init+0x1ec>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3f      	ldr	r2, [pc, #252]	; (800333c <HAL_GPIO_Init+0x2c4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00d      	beq.n	8003260 <HAL_GPIO_Init+0x1e8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3e      	ldr	r2, [pc, #248]	; (8003340 <HAL_GPIO_Init+0x2c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <HAL_GPIO_Init+0x1e4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <HAL_GPIO_Init+0x2cc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_GPIO_Init+0x1e0>
 8003254:	2303      	movs	r3, #3
 8003256:	e006      	b.n	8003266 <HAL_GPIO_Init+0x1ee>
 8003258:	2304      	movs	r3, #4
 800325a:	e004      	b.n	8003266 <HAL_GPIO_Init+0x1ee>
 800325c:	2302      	movs	r3, #2
 800325e:	e002      	b.n	8003266 <HAL_GPIO_Init+0x1ee>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_GPIO_Init+0x1ee>
 8003264:	2300      	movs	r3, #0
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	f002 0203 	and.w	r2, r2, #3
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	4093      	lsls	r3, r2
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003276:	492f      	ldr	r1, [pc, #188]	; (8003334 <HAL_GPIO_Init+0x2bc>)
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	492c      	ldr	r1, [pc, #176]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]
 800329c:	e006      	b.n	80032ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	4928      	ldr	r1, [pc, #160]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032b8:	4b23      	ldr	r3, [pc, #140]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60cb      	str	r3, [r1, #12]
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	491e      	ldr	r1, [pc, #120]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4918      	ldr	r1, [pc, #96]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4914      	ldr	r1, [pc, #80]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d021      	beq.n	800334c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_GPIO_Init+0x2d0>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	e021      	b.n	800335a <HAL_GPIO_Init+0x2e2>
 8003316:	bf00      	nop
 8003318:	10320000 	.word	0x10320000
 800331c:	10310000 	.word	0x10310000
 8003320:	10220000 	.word	0x10220000
 8003324:	10210000 	.word	0x10210000
 8003328:	10120000 	.word	0x10120000
 800332c:	10110000 	.word	0x10110000
 8003330:	40021000 	.word	0x40021000
 8003334:	40010000 	.word	0x40010000
 8003338:	40010800 	.word	0x40010800
 800333c:	40010c00 	.word	0x40010c00
 8003340:	40011000 	.word	0x40011000
 8003344:	40011400 	.word	0x40011400
 8003348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_GPIO_Init+0x304>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	43db      	mvns	r3, r3
 8003354:	4909      	ldr	r1, [pc, #36]	; (800337c <HAL_GPIO_Init+0x304>)
 8003356:	4013      	ands	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	3301      	adds	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f47f ae8e 	bne.w	800308c <HAL_GPIO_Init+0x14>
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	372c      	adds	r7, #44	; 0x2c
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40010400 	.word	0x40010400

08003380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	e001      	b.n	80033a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	807b      	strh	r3, [r7, #2]
 80033ba:	4613      	mov	r3, r2
 80033bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033be:	787b      	ldrb	r3, [r7, #1]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c4:	887a      	ldrh	r2, [r7, #2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ca:	e003      	b.n	80033d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	041a      	lsls	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	611a      	str	r2, [r3, #16]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f806 	bl	8003410 <HAL_GPIO_EXTI_Callback>
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e272      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8087 	beq.w	8003552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003444:	4b92      	ldr	r3, [pc, #584]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003450:	4b8f      	ldr	r3, [pc, #572]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d112      	bne.n	8003482 <HAL_RCC_OscConfig+0x5e>
 800345c:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346a:	4b89      	ldr	r3, [pc, #548]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06c      	beq.n	8003550 <HAL_RCC_OscConfig+0x12c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d168      	bne.n	8003550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e24c      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x76>
 800348c:	4b80      	ldr	r3, [pc, #512]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7f      	ldr	r2, [pc, #508]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e02e      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b78      	ldr	r3, [pc, #480]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0xbc>
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a71      	ldr	r2, [pc, #452]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 80034e0:	4b6b      	ldr	r3, [pc, #428]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6a      	ldr	r2, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7ff fa2e 	bl	8002960 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff fa2a 	bl	8002960 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e200      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xe4>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff fa1a 	bl	8002960 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7ff fa16 	bl	8002960 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1ec      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x10c>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x18c>
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x176>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1c0      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4939      	ldr	r1, [pc, #228]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x270>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7ff f9cf 	bl	8002960 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff f9cb 	bl	8002960 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1a1      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4927      	ldr	r1, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_RCC_OscConfig+0x270>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7ff f9ae 	bl	8002960 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7ff f9aa 	bl	8002960 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e180      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03a      	beq.n	80036a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d019      	beq.n	800366e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7ff f98e 	bl	8002960 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7ff f98a 	bl	8002960 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e160      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003666:	2001      	movs	r0, #1
 8003668:	f000 fafe 	bl	8003c68 <RCC_Delay>
 800366c:	e01c      	b.n	80036a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7ff f974 	bl	8002960 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367a:	e00f      	b.n	800369c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367c:	f7ff f970 	bl	8002960 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d908      	bls.n	800369c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e146      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	42420000 	.word	0x42420000
 8003698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b92      	ldr	r3, [pc, #584]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e9      	bne.n	800367c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a6 	beq.w	8003802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b8b      	ldr	r3, [pc, #556]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4a87      	ldr	r2, [pc, #540]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	61d3      	str	r3, [r2, #28]
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b82      	ldr	r3, [pc, #520]	; (80038ec <HAL_RCC_OscConfig+0x4c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ee:	4b7f      	ldr	r3, [pc, #508]	; (80038ec <HAL_RCC_OscConfig+0x4c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7e      	ldr	r2, [pc, #504]	; (80038ec <HAL_RCC_OscConfig+0x4c8>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7ff f931 	bl	8002960 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7ff f92d 	bl	8002960 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	; 0x64
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e103      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <HAL_RCC_OscConfig+0x4c8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x312>
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	e02d      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x334>
 800373e:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a69      	ldr	r2, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a66      	ldr	r2, [pc, #408]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6213      	str	r3, [r2, #32]
 8003756:	e01c      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b05      	cmp	r3, #5
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0x356>
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a60      	ldr	r2, [pc, #384]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6213      	str	r3, [r2, #32]
 800376c:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 800377a:	4b5b      	ldr	r3, [pc, #364]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a5a      	ldr	r2, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6213      	str	r3, [r2, #32]
 8003786:	4b58      	ldr	r3, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7ff f8e1 	bl	8002960 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7ff f8dd 	bl	8002960 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0b1      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ee      	beq.n	80037a2 <HAL_RCC_OscConfig+0x37e>
 80037c4:	e014      	b.n	80037f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7ff f8cb 	bl	8002960 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7ff f8c7 	bl	8002960 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e09b      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ee      	bne.n	80037ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b3c      	ldr	r3, [pc, #240]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8087 	beq.w	800391a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d061      	beq.n	80038dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d146      	bne.n	80038ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <HAL_RCC_OscConfig+0x4cc>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7ff f89b 	bl	8002960 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7ff f897 	bl	8002960 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e06d      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4921      	ldr	r1, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a19      	ldr	r1, [r3, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	430b      	orrs	r3, r1
 800387a:	491b      	ldr	r1, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7ff f86b 	bl	8002960 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7ff f867 	bl	8002960 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e03d      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x46a>
 80038ac:	e035      	b.n	800391a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7ff f854 	bl	8002960 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7ff f850 	bl	8002960 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e026      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x498>
 80038da:	e01e      	b.n	800391a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e019      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x500>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	429a      	cmp	r2, r3
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0d0      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d910      	bls.n	800396c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4965      	ldr	r1, [pc, #404]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800398e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	494d      	ldr	r1, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d040      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e073      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4936      	ldr	r1, [pc, #216]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fe ffa2 	bl	8002960 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fe ff9e 	bl	8002960 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e053      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d210      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4922      	ldr	r1, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e032      	b.n	8003ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4916      	ldr	r1, [pc, #88]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 f821 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fe2c 	bl	8002734 <HAL_InitTick>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	40021000 	.word	0x40021000
 8003af0:	0800714c 	.word	0x0800714c
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x30>
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x36>
 8003b2a:	e027      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2e:	613b      	str	r3, [r7, #16]
      break;
 8003b30:	e027      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0c9b      	lsrs	r3, r3, #18
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b3c:	5cd3      	ldrb	r3, [r2, r3]
 8003b3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	0c5b      	lsrs	r3, r3, #17
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b5e:	fb03 f202 	mul.w	r2, r3, r2
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e004      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	613b      	str	r3, [r7, #16]
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b7e:	613b      	str	r3, [r7, #16]
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	693b      	ldr	r3, [r7, #16]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	08007164 	.word	0x08007164
 8003b9c:	08007174 	.word	0x08007174
 8003ba0:	003d0900 	.word	0x003d0900

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff2 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	0800715c 	.word	0x0800715c

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be4:	f7ff ffde 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	0adb      	lsrs	r3, r3, #11
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	0800715c 	.word	0x0800715c

08003c08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	220f      	movs	r2, #15
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_GetClockConfig+0x58>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <HAL_RCC_GetClockConfig+0x58>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetClockConfig+0x58>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCC_GetClockConfig+0x58>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40022000 	.word	0x40022000

08003c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <RCC_Delay+0x34>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <RCC_Delay+0x38>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0a5b      	lsrs	r3, r3, #9
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c84:	bf00      	nop
  }
  while (Delay --);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1e5a      	subs	r2, r3, #1
 8003c8a:	60fa      	str	r2, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f9      	bne.n	8003c84 <RCC_Delay+0x1c>
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	20000004 	.word	0x20000004
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e041      	b.n	8003d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fbec 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 fd80 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d001      	beq.n	8003d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e03a      	b.n	8003dd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_TIM_Base_Start_IT+0x98>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x58>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d009      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x58>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x58>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d111      	bne.n	8003dc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d010      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	e007      	b.n	8003dd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800

08003de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e041      	b.n	8003e7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f839 	bl	8003e86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 fcde 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x24>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e022      	b.n	8003f02 <HAL_TIM_PWM_Start+0x6a>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d109      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0x3e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	e015      	b.n	8003f02 <HAL_TIM_PWM_Start+0x6a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start+0x58>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e008      	b.n	8003f02 <HAL_TIM_PWM_Start+0x6a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e05e      	b.n	8003fc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x82>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	e013      	b.n	8003f42 <HAL_TIM_PWM_Start+0xaa>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_PWM_Start+0x92>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	e00b      	b.n	8003f42 <HAL_TIM_PWM_Start+0xaa>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f38:	e003      	b.n	8003f42 <HAL_TIM_PWM_Start+0xaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2201      	movs	r2, #1
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fecc 	bl	8004ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_TIM_PWM_Start+0x138>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_TIM_PWM_Start+0x138>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_TIM_PWM_Start+0xfa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIM_PWM_Start+0xfa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_TIM_PWM_Start+0x13c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_TIM_PWM_Start+0xfa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <HAL_TIM_PWM_Start+0x140>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d111      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d010      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb4:	e007      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800

08003fdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e093      	b.n	8004118 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fe fa6b 	bl	80024e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 fbd9 	bl	80047e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	4313      	orrs	r3, r2
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800407c:	f023 030c 	bic.w	r3, r3, #12
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800408c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4313      	orrs	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	4313      	orrs	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	4313      	orrs	r3, r2
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004130:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004138:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004140:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004148:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004156:	7b7b      	ldrb	r3, [r7, #13]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e089      	b.n	8004274 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004170:	e031      	b.n	80041d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d110      	bne.n	800419a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800417e:	7b3b      	ldrb	r3, [r7, #12]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e075      	b.n	8004274 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004198:	e01d      	b.n	80041d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d108      	bne.n	80041b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a0:	7bbb      	ldrb	r3, [r7, #14]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d105      	bne.n	80041b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a6:	7b7b      	ldrb	r3, [r7, #13]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ac:	7b3b      	ldrb	r3, [r7, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e05e      	b.n	8004274 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d010      	beq.n	8004204 <HAL_TIM_Encoder_Start_IT+0xe4>
 80041e2:	e01f      	b.n	8004224 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fd7b 	bl	8004ce8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0202 	orr.w	r2, r2, #2
 8004200:	60da      	str	r2, [r3, #12]
      break;
 8004202:	e02e      	b.n	8004262 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	2104      	movs	r1, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd6b 	bl	8004ce8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0204 	orr.w	r2, r2, #4
 8004220:	60da      	str	r2, [r3, #12]
      break;
 8004222:	e01e      	b.n	8004262 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fd5b 	bl	8004ce8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	2104      	movs	r1, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fd54 	bl	8004ce8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0202 	orr.w	r2, r2, #2
 800424e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0204 	orr.w	r2, r2, #4
 800425e:	60da      	str	r2, [r3, #12]
      break;
 8004260:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0202 	mvn.w	r2, #2
 80042a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa76 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa69 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa78 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0204 	mvn.w	r2, #4
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa4c 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa3f 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fa4e 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0208 	mvn.w	r2, #8
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa22 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa15 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fa24 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b10      	cmp	r3, #16
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9f8 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9eb 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f9fa 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe f804 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fce9 	bl	8004dfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9be 	bl	80047d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b20      	cmp	r3, #32
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fcb4 	bl	8004dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0ae      	b.n	8004608 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	f200 809f 	bhi.w	80045f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044f5 	.word	0x080044f5
 80044c4:	080045f9 	.word	0x080045f9
 80044c8:	080045f9 	.word	0x080045f9
 80044cc:	080045f9 	.word	0x080045f9
 80044d0:	08004535 	.word	0x08004535
 80044d4:	080045f9 	.word	0x080045f9
 80044d8:	080045f9 	.word	0x080045f9
 80044dc:	080045f9 	.word	0x080045f9
 80044e0:	08004577 	.word	0x08004577
 80044e4:	080045f9 	.word	0x080045f9
 80044e8:	080045f9 	.word	0x080045f9
 80044ec:	080045f9 	.word	0x080045f9
 80044f0:	080045b7 	.word	0x080045b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9d6 	bl	80048ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	619a      	str	r2, [r3, #24]
      break;
 8004532:	e064      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa1c 	bl	8004978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
      break;
 8004574:	e043      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa65 	bl	8004a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0208 	orr.w	r2, r2, #8
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
      break;
 80045b4:	e023      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 faaf 	bl	8004b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69d9      	ldr	r1, [r3, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	61da      	str	r2, [r3, #28]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e0b4      	b.n	8004796 <HAL_TIM_ConfigClockSource+0x186>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004664:	d03e      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466a:	f200 8087 	bhi.w	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004672:	f000 8086 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x172>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d87f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b70      	cmp	r3, #112	; 0x70
 800467e:	d01a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004680:	2b70      	cmp	r3, #112	; 0x70
 8004682:	d87b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d050      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x11a>
 8004688:	2b60      	cmp	r3, #96	; 0x60
 800468a:	d877      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b50      	cmp	r3, #80	; 0x50
 800468e:	d03c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xfa>
 8004690:	2b50      	cmp	r3, #80	; 0x50
 8004692:	d873      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d058      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x13a>
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d86f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b30      	cmp	r3, #48	; 0x30
 800469e:	d064      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b30      	cmp	r3, #48	; 0x30
 80046a2:	d86b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d060      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d867      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05c      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d05a      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	e062      	b.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	f000 faf0 	bl	8004caa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	609a      	str	r2, [r3, #8]
      break;
 80046e2:	e04f      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f4:	f000 fad9 	bl	8004caa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004706:	609a      	str	r2, [r3, #8]
      break;
 8004708:	e03c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fa50 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2150      	movs	r1, #80	; 0x50
 8004722:	4618      	mov	r0, r3
 8004724:	f000 faa7 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 8004728:	e02c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fa6e 	bl	8004c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2160      	movs	r1, #96	; 0x60
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fa97 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 8004748:	e01c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fa30 	bl	8004bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2140      	movs	r1, #64	; 0x40
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa87 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 8004768:	e00c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 fa7e 	bl	8004c76 <TIM_ITRx_SetConfig>
      break;
 800477a:	e003      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e000      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
	...

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <TIM_Base_SetConfig+0xb8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x30>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x30>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <TIM_Base_SetConfig+0xbc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x30>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <TIM_Base_SetConfig+0xc0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <TIM_Base_SetConfig+0xb8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_Base_SetConfig+0x62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d007      	beq.n	800484a <TIM_Base_SetConfig+0x62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_Base_SetConfig+0xbc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_Base_SetConfig+0x62>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <TIM_Base_SetConfig+0xc0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <TIM_Base_SetConfig+0xb8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d103      	bne.n	8004890 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	615a      	str	r2, [r3, #20]
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800

080048ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0201 	bic.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <TIM_OC1_SetConfig+0xc8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10c      	bne.n	8004922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0308 	bic.w	r3, r3, #8
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <TIM_OC1_SetConfig+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d111      	bne.n	800494e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40012c00 	.word	0x40012c00

08004978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <TIM_OC2_SetConfig+0xd0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10d      	bne.n	80049f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <TIM_OC2_SetConfig+0xd0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d113      	bne.n	8004a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00

08004a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <TIM_OC3_SetConfig+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d10d      	bne.n	8004ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <TIM_OC3_SetConfig+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d113      	bne.n	8004af6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00

08004b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	031b      	lsls	r3, r3, #12
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <TIM_OC4_SetConfig+0x98>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d109      	bne.n	8004b94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00

08004bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 030a 	bic.w	r3, r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f043 0307 	orr.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	021a      	lsls	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1a      	ldr	r2, [r3, #32]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e046      	b.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d009      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800

08004dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e042      	b.n	8004ea8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd fbfe 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fe99 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d14a      	bne.n	8004f60 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e043      	b.n	8004f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fbf1 	bl	80056d4 <UART_Start_Receive_DMA>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d12c      	bne.n	8004f5a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d125      	bne.n	8004f54 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f043 0310 	orr.w	r3, r3, #16
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004f40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004f52:	e002      	b.n	8004f5a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f5e:	e000      	b.n	8004f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3730      	adds	r7, #48	; 0x30
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	; 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fd20 	bl	8005a10 <UART_Receive_IT>
      return;
 8004fd0:	e25b      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80de 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80d1 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
 8005002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
 800506e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f043 0208 	orr.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 81f2 	beq.w	8005480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fcab 	bl	8005a10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_UART_IRQHandler+0x17a>
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fbb5 	bl	8005856 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d041      	beq.n	800517e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	4a7e      	ldr	r2, [pc, #504]	; (800534c <HAL_UART_IRQHandler+0x3e0>)
 8005154:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fde0 	bl	8002d20 <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00e      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9a5 	bl	80054c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00a      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9a1 	bl	80054c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e006      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f99d 	bl	80054c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005192:	e175      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	bf00      	nop
    return;
 8005196:	e173      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	f040 814f 	bne.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8148 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8141 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80b6 	beq.w	8005350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8145 	beq.w	8005484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005202:	429a      	cmp	r2, r3
 8005204:	f080 813e 	bcs.w	8005484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800520e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b20      	cmp	r3, #32
 8005218:	f000 8088 	beq.w	800532c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005248:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800524c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1d9      	bne.n	800521c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005290:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800529e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e1      	bne.n	8005268 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3314      	adds	r3, #20
 80052c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fc:	f023 0310 	bic.w	r3, r3, #16
 8005300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800530e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005310:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800531c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e3      	bne.n	80052ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fcbe 	bl	8002ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533a:	b29b      	uxth	r3, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	b29b      	uxth	r3, r3
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fb6e 	bl	8001a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005348:	e09c      	b.n	8005484 <HAL_UART_IRQHandler+0x518>
 800534a:	bf00      	nop
 800534c:	0800591b 	.word	0x0800591b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 808e 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800536c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8089 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800538c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800539a:	647a      	str	r2, [r7, #68]	; 0x44
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	623b      	str	r3, [r7, #32]
   return(result);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053d2:	633a      	str	r2, [r7, #48]	; 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60fb      	str	r3, [r7, #12]
   return(result);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005418:	61fa      	str	r2, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fc faf3 	bl	8001a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543e:	e023      	b.n	8005488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa72 	bl	8005942 <UART_Transmit_IT>
    return;
 800545e:	e014      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fab1 	bl	80059e0 <UART_EndTransmit_IT>
    return;
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005488:	bf00      	nop
  }
}
 800548a:	37e8      	adds	r7, #232	; 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b09c      	sub	sp, #112	; 0x70
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d172      	bne.n	80055da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	2200      	movs	r2, #0
 80054f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800550a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005510:	66bb      	str	r3, [r7, #104]	; 0x68
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800551a:	65ba      	str	r2, [r7, #88]	; 0x58
 800551c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	667b      	str	r3, [r7, #100]	; 0x64
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800554e:	647a      	str	r2, [r7, #68]	; 0x44
 8005550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	623b      	str	r3, [r7, #32]
   return(result);
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005578:	663b      	str	r3, [r7, #96]	; 0x60
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005582:	633a      	str	r2, [r7, #48]	; 0x30
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d119      	bne.n	80055da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0310 	bic.w	r3, r3, #16
 80055bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	617b      	str	r3, [r7, #20]
   return(result);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	2200      	movs	r2, #0
 80055de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d106      	bne.n	80055f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ec:	4619      	mov	r1, r3
 80055ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055f0:	f7fc fa18 	bl	8001a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055f4:	e002      	b.n	80055fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055f8:	f7ff ff53 	bl	80054a2 <HAL_UART_RxCpltCallback>
}
 80055fc:	bf00      	nop
 80055fe:	3770      	adds	r7, #112	; 0x70
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d108      	bne.n	8005632 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	4619      	mov	r1, r3
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7fc f9fa 	bl	8001a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005630:	e002      	b.n	8005638 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff ff3e 	bl	80054b4 <HAL_UART_RxHalfCpltCallback>
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b21      	cmp	r3, #33	; 0x21
 8005672:	d108      	bne.n	8005686 <UART_DMAError+0x46>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f000 f8c1 	bl	8005808 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b22      	cmp	r3, #34	; 0x22
 80056a6:	d108      	bne.n	80056ba <UART_DMAError+0x7a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f000 f8ce 	bl	8005856 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c6:	68b8      	ldr	r0, [r7, #8]
 80056c8:	f7ff fefd 	bl	80054c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b098      	sub	sp, #96	; 0x60
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2222      	movs	r2, #34	; 0x22
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <UART_Start_Receive_DMA+0x128>)
 8005702:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <UART_Start_Receive_DMA+0x12c>)
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <UART_Start_Receive_DMA+0x130>)
 8005712:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	2200      	movs	r2, #0
 800571a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	f7fd fa58 	bl	8002be8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d019      	beq.n	800578a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	65bb      	str	r3, [r7, #88]	; 0x58
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005776:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005778:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800577c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	657b      	str	r3, [r7, #84]	; 0x54
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3314      	adds	r3, #20
 80057a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	617b      	str	r3, [r7, #20]
   return(result);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057de:	627a      	str	r2, [r7, #36]	; 0x24
 80057e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6a39      	ldr	r1, [r7, #32]
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3760      	adds	r7, #96	; 0x60
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	080054d9 	.word	0x080054d9
 8005800:	08005605 	.word	0x08005605
 8005804:	08005641 	.word	0x08005641

08005808 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	61ba      	str	r2, [r7, #24]
 8005832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6979      	ldr	r1, [r7, #20]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	613b      	str	r3, [r7, #16]
   return(result);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800584c:	bf00      	nop
 800584e:	3724      	adds	r7, #36	; 0x24
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005856:	b480      	push	{r7}
 8005858:	b095      	sub	sp, #84	; 0x54
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800587e:	643a      	str	r2, [r7, #64]	; 0x40
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3314      	adds	r3, #20
 80058b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e5      	bne.n	8005892 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d119      	bne.n	8005902 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f023 0310 	bic.w	r3, r3, #16
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ee:	61ba      	str	r2, [r7, #24]
 80058f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005910:	bf00      	nop
 8005912:	3754      	adds	r7, #84	; 0x54
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff fdc6 	bl	80054c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b21      	cmp	r3, #33	; 0x21
 8005954:	d13e      	bne.n	80059d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	d114      	bne.n	800598a <UART_Transmit_IT+0x48>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d110      	bne.n	800598a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800597c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]
 8005988:	e008      	b.n	800599c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6211      	str	r1, [r2, #32]
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10f      	bne.n	80059d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fd45 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b22      	cmp	r3, #34	; 0x22
 8005a22:	f040 80ae 	bne.w	8005b82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2e:	d117      	bne.n	8005a60 <UART_Receive_IT+0x50>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
 8005a5e:	e026      	b.n	8005aae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	d007      	beq.n	8005a84 <UART_Receive_IT+0x74>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <UART_Receive_IT+0x82>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e008      	b.n	8005aa4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d15d      	bne.n	8005b7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0220 	bic.w	r2, r2, #32
 8005ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d135      	bne.n	8005b74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	623a      	str	r2, [r7, #32]
 8005b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d10a      	bne.n	8005b66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb ff59 	bl	8001a24 <HAL_UARTEx_RxEventCallback>
 8005b72:	e002      	b.n	8005b7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fc94 	bl	80054a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e002      	b.n	8005b84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3730      	adds	r7, #48	; 0x30
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bc6:	f023 030c 	bic.w	r3, r3, #12
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <UART_SetConfig+0x114>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bf4:	f7fd fff4 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	e002      	b.n	8005c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7fd ffdc 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8005c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009a      	lsls	r2, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <UART_SetConfig+0x118>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	0119      	lsls	r1, r3, #4
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009a      	lsls	r2, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <UART_SetConfig+0x118>)
 8005c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2064      	movs	r0, #100	; 0x64
 8005c42:	fb00 f303 	mul.w	r3, r0, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <UART_SetConfig+0x118>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	4419      	add	r1, r3
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009a      	lsls	r2, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <UART_SetConfig+0x118>)
 8005c72:	fba3 0302 	umull	r0, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2064      	movs	r0, #100	; 0x64
 8005c7a:	fb00 f303 	mul.w	r3, r0, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	; 0x32
 8005c84:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <UART_SetConfig+0x118>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	440a      	add	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	51eb851f 	.word	0x51eb851f

08005ca8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cba:	2b84      	cmp	r3, #132	; 0x84
 8005cbc:	d005      	beq.n	8005cca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005cbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3303      	adds	r3, #3
 8005cc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cda:	f000 fad1 	bl	8006280 <vTaskStartScheduler>
  
  return osOK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce6:	b089      	sub	sp, #36	; 0x24
 8005ce8:	af04      	add	r7, sp, #16
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d020      	beq.n	8005d38 <osThreadCreate+0x54>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01c      	beq.n	8005d38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685c      	ldr	r4, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691e      	ldr	r6, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff ffc9 	bl	8005ca8 <makeFreeRtosPriority>
 8005d16:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d20:	9202      	str	r2, [sp, #8]
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	9100      	str	r1, [sp, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	4632      	mov	r2, r6
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 f8e8 	bl	8005f02 <xTaskCreateStatic>
 8005d32:	4603      	mov	r3, r0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e01c      	b.n	8005d72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685c      	ldr	r4, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d44:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ffab 	bl	8005ca8 <makeFreeRtosPriority>
 8005d52:	4602      	mov	r2, r0
 8005d54:	f107 030c 	add.w	r3, r7, #12
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	9200      	str	r2, [sp, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4632      	mov	r2, r6
 8005d60:	4629      	mov	r1, r5
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 f929 	bl	8005fba <xTaskCreate>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e000      	b.n	8005d74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <osDelay+0x16>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	e000      	b.n	8005d94 <osDelay+0x18>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fa3f 	bl	8006218 <vTaskDelay>
  
  return osOK;
 8005d9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0208 	add.w	r2, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f103 0208 	add.w	r2, r3, #8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f103 0208 	add.w	r2, r3, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr

08005de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d103      	bne.n	8005e60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e00c      	b.n	8005e7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3308      	adds	r3, #8
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e002      	b.n	8005e6e <vListInsert+0x2e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d2f6      	bcs.n	8005e68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6892      	ldr	r2, [r2, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6852      	ldr	r2, [r2, #4]
 8005ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d103      	bne.n	8005ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b08e      	sub	sp, #56	; 0x38
 8005f06:	af04      	add	r7, sp, #16
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	61fb      	str	r3, [r7, #28]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f48:	2354      	movs	r3, #84	; 0x54
 8005f4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b54      	cmp	r3, #84	; 0x54
 8005f50:	d00a      	beq.n	8005f68 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	61bb      	str	r3, [r7, #24]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01e      	beq.n	8005fac <xTaskCreateStatic+0xaa>
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f86:	2300      	movs	r3, #0
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	9302      	str	r3, [sp, #8]
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f850 	bl	8006044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa6:	f000 f8cd 	bl	8006144 <prvAddNewTaskToReadyList>
 8005faa:	e001      	b.n	8005fb0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb0:	697b      	ldr	r3, [r7, #20]
	}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b08c      	sub	sp, #48	; 0x30
 8005fbe:	af04      	add	r7, sp, #16
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fe6e 	bl	8006cb0 <pvPortMalloc>
 8005fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fdc:	2054      	movs	r0, #84	; 0x54
 8005fde:	f000 fe67 	bl	8006cb0 <pvPortMalloc>
 8005fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff0:	e005      	b.n	8005ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	f000 ff20 	bl	8006e38 <vPortFree>
 8005ff8:	e001      	b.n	8005ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d017      	beq.n	8006034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	2300      	movs	r3, #0
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	9302      	str	r3, [sp, #8]
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f80e 	bl	8006044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006028:	69f8      	ldr	r0, [r7, #28]
 800602a:	f000 f88b 	bl	8006144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e002      	b.n	800603a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800603a:	69bb      	ldr	r3, [r7, #24]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800605c:	3b01      	subs	r3, #1
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	617b      	str	r3, [r7, #20]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e012      	b.n	80060b8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	3334      	adds	r3, #52	; 0x34
 80060a2:	460a      	mov	r2, r1
 80060a4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d006      	beq.n	80060c0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	2b0f      	cmp	r3, #15
 80060bc:	d9e9      	bls.n	8006092 <prvInitialiseNewTask+0x4e>
 80060be:	e000      	b.n	80060c2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80060c0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d901      	bls.n	80060d4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060d0:	2306      	movs	r3, #6
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2200      	movs	r2, #0
 80060e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fe79 	bl	8005de2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	3318      	adds	r3, #24
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fe74 	bl	8005de2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	f1c3 0207 	rsb	r2, r3, #7
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2200      	movs	r2, #0
 8006114:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	69b8      	ldr	r0, [r7, #24]
 8006124:	f000 fc0e 	bl	8006944 <pxPortInitialiseStack>
 8006128:	4602      	mov	r2, r0
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800613a:	bf00      	nop
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800614c:	f000 fcee 	bl	8006b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006150:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a29      	ldr	r2, [pc, #164]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 8006158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800615a:	4b29      	ldr	r3, [pc, #164]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006168:	4b24      	ldr	r3, [pc, #144]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d110      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006170:	f000 fac0 	bl	80066f4 <prvInitialiseTaskLists>
 8006174:	e00d      	b.n	8006192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <prvAddNewTaskToReadyList+0xc0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d802      	bhi.n	8006192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800618c:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 800619a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	409a      	lsls	r2, r3
 80061a4:	4b19      	ldr	r3, [pc, #100]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a15      	ldr	r2, [pc, #84]	; (8006210 <prvAddNewTaskToReadyList+0xcc>)
 80061bc:	441a      	add	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7ff fe18 	bl	8005dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061ca:	f000 fcdf 	bl	8006b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <prvAddNewTaskToReadyList+0xc0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d207      	bcs.n	80061f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvAddNewTaskToReadyList+0xd0>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000828 	.word	0x20000828
 8006200:	20000728 	.word	0x20000728
 8006204:	20000834 	.word	0x20000834
 8006208:	20000844 	.word	0x20000844
 800620c:	20000830 	.word	0x20000830
 8006210:	2000072c 	.word	0x2000072c
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <vTaskDelay+0x60>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <vTaskDelay+0x30>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60bb      	str	r3, [r7, #8]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006248:	f000 f87a 	bl	8006340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800624c:	2100      	movs	r1, #0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fb12 	bl	8006878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006254:	f000 f882 	bl	800635c <xTaskResumeAll>
 8006258:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d107      	bne.n	8006270 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <vTaskDelay+0x64>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000850 	.word	0x20000850
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628e:	463a      	mov	r2, r7
 8006290:	1d39      	adds	r1, r7, #4
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4618      	mov	r0, r3
 8006298:	f7fb f9f4 	bl	8001684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	9202      	str	r2, [sp, #8]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	460a      	mov	r2, r1
 80062ae:	491e      	ldr	r1, [pc, #120]	; (8006328 <vTaskStartScheduler+0xa8>)
 80062b0:	481e      	ldr	r0, [pc, #120]	; (800632c <vTaskStartScheduler+0xac>)
 80062b2:	f7ff fe26 	bl	8005f02 <xTaskCreateStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <vTaskStartScheduler+0xb0>)
 80062ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062bc:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <vTaskStartScheduler+0xb0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e001      	b.n	80062ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d116      	bne.n	8006302 <vTaskStartScheduler+0x82>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e8:	4b12      	ldr	r3, [pc, #72]	; (8006334 <vTaskStartScheduler+0xb4>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <vTaskStartScheduler+0xb8>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <vTaskStartScheduler+0xbc>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062fc:	f000 fba4 	bl	8006a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006300:	e00e      	b.n	8006320 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d10a      	bne.n	8006320 <vTaskStartScheduler+0xa0>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <vTaskStartScheduler+0x9e>
}
 8006320:	bf00      	nop
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	08007144 	.word	0x08007144
 800632c:	080066c5 	.word	0x080066c5
 8006330:	2000084c 	.word	0x2000084c
 8006334:	20000848 	.word	0x20000848
 8006338:	20000834 	.word	0x20000834
 800633c:	2000082c 	.word	0x2000082c

08006340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <vTaskSuspendAll+0x18>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a03      	ldr	r2, [pc, #12]	; (8006358 <vTaskSuspendAll+0x18>)
 800634c:	6013      	str	r3, [r2, #0]
}
 800634e:	bf00      	nop
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000850 	.word	0x20000850

0800635c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <xTaskResumeAll+0x114>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <xTaskResumeAll+0x2c>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006388:	f000 fbd0 	bl	8006b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800638c:	4b38      	ldr	r3, [pc, #224]	; (8006470 <xTaskResumeAll+0x114>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3b01      	subs	r3, #1
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <xTaskResumeAll+0x114>)
 8006394:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <xTaskResumeAll+0x114>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d161      	bne.n	8006462 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639e:	4b35      	ldr	r3, [pc, #212]	; (8006474 <xTaskResumeAll+0x118>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d05d      	beq.n	8006462 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a6:	e02e      	b.n	8006406 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063a8:	4b33      	ldr	r3, [pc, #204]	; (8006478 <xTaskResumeAll+0x11c>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3318      	adds	r3, #24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd7b 	bl	8005eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3304      	adds	r3, #4
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fd76 	bl	8005eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2201      	movs	r2, #1
 80063ca:	409a      	lsls	r2, r3
 80063cc:	4b2b      	ldr	r3, [pc, #172]	; (800647c <xTaskResumeAll+0x120>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <xTaskResumeAll+0x120>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a27      	ldr	r2, [pc, #156]	; (8006480 <xTaskResumeAll+0x124>)
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7ff fd04 	bl	8005dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <xTaskResumeAll+0x128>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006400:	4b21      	ldr	r3, [pc, #132]	; (8006488 <xTaskResumeAll+0x12c>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <xTaskResumeAll+0x11c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cc      	bne.n	80063a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006414:	f000 fa0c 	bl	8006830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <xTaskResumeAll+0x130>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006424:	f000 f836 	bl	8006494 <xTaskIncrementTick>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800642e:	4b16      	ldr	r3, [pc, #88]	; (8006488 <xTaskResumeAll+0x12c>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f1      	bne.n	8006424 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <xTaskResumeAll+0x130>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <xTaskResumeAll+0x12c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <xTaskResumeAll+0x134>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f000 fb93 	bl	8006b8c <vPortExitCritical>

	return xAlreadyYielded;
 8006466:	68bb      	ldr	r3, [r7, #8]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000850 	.word	0x20000850
 8006474:	20000828 	.word	0x20000828
 8006478:	200007e8 	.word	0x200007e8
 800647c:	20000830 	.word	0x20000830
 8006480:	2000072c 	.word	0x2000072c
 8006484:	20000728 	.word	0x20000728
 8006488:	2000083c 	.word	0x2000083c
 800648c:	20000838 	.word	0x20000838
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649e:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <xTaskIncrementTick+0x150>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 808d 	bne.w	80065c2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a8:	4b4f      	ldr	r3, [pc, #316]	; (80065e8 <xTaskIncrementTick+0x154>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b0:	4a4d      	ldr	r2, [pc, #308]	; (80065e8 <xTaskIncrementTick+0x154>)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d120      	bne.n	80064fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064bc:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <xTaskIncrementTick+0x158>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <xTaskIncrementTick+0x48>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xTaskIncrementTick+0x46>
 80064dc:	4b43      	ldr	r3, [pc, #268]	; (80065ec <xTaskIncrementTick+0x158>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b43      	ldr	r3, [pc, #268]	; (80065f0 <xTaskIncrementTick+0x15c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a41      	ldr	r2, [pc, #260]	; (80065ec <xTaskIncrementTick+0x158>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4a41      	ldr	r2, [pc, #260]	; (80065f0 <xTaskIncrementTick+0x15c>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4b40      	ldr	r3, [pc, #256]	; (80065f4 <xTaskIncrementTick+0x160>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a3f      	ldr	r2, [pc, #252]	; (80065f4 <xTaskIncrementTick+0x160>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	f000 f999 	bl	8006830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064fe:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <xTaskIncrementTick+0x164>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d34d      	bcc.n	80065a4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006508:	4b38      	ldr	r3, [pc, #224]	; (80065ec <xTaskIncrementTick+0x158>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <xTaskIncrementTick+0x82>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <xTaskIncrementTick+0x84>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <xTaskIncrementTick+0x164>)
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	601a      	str	r2, [r3, #0]
					break;
 8006524:	e03e      	b.n	80065a4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <xTaskIncrementTick+0x158>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d203      	bcs.n	8006546 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800653e:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <xTaskIncrementTick+0x164>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6013      	str	r3, [r2, #0]
						break;
 8006544:	e02e      	b.n	80065a4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fcb0 	bl	8005eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3318      	adds	r3, #24
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fca7 	bl	8005eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	2201      	movs	r2, #1
 8006568:	409a      	lsls	r2, r3
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <xTaskIncrementTick+0x168>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4313      	orrs	r3, r2
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <xTaskIncrementTick+0x168>)
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <xTaskIncrementTick+0x16c>)
 8006582:	441a      	add	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f7ff fc35 	bl	8005dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <xTaskIncrementTick+0x170>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	429a      	cmp	r2, r3
 800659c:	d3b4      	bcc.n	8006508 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a2:	e7b1      	b.n	8006508 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a4:	4b17      	ldr	r3, [pc, #92]	; (8006604 <xTaskIncrementTick+0x170>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	4915      	ldr	r1, [pc, #84]	; (8006600 <xTaskIncrementTick+0x16c>)
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d907      	bls.n	80065cc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e004      	b.n	80065cc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <xTaskIncrementTick+0x174>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <xTaskIncrementTick+0x174>)
 80065ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065cc:	4b0f      	ldr	r3, [pc, #60]	; (800660c <xTaskIncrementTick+0x178>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000850 	.word	0x20000850
 80065e8:	2000082c 	.word	0x2000082c
 80065ec:	200007e0 	.word	0x200007e0
 80065f0:	200007e4 	.word	0x200007e4
 80065f4:	20000840 	.word	0x20000840
 80065f8:	20000848 	.word	0x20000848
 80065fc:	20000830 	.word	0x20000830
 8006600:	2000072c 	.word	0x2000072c
 8006604:	20000728 	.word	0x20000728
 8006608:	20000838 	.word	0x20000838
 800660c:	2000083c 	.word	0x2000083c

08006610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006616:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <vTaskSwitchContext+0xa0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800661e:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <vTaskSwitchContext+0xa4>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006624:	e03f      	b.n	80066a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006626:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <vTaskSwitchContext+0xa4>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800662c:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <vTaskSwitchContext+0xa8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	fab3 f383 	clz	r3, r3
 8006638:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	f1c3 031f 	rsb	r3, r3, #31
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	491e      	ldr	r1, [pc, #120]	; (80066bc <vTaskSwitchContext+0xac>)
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	607b      	str	r3, [r7, #4]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <vTaskSwitchContext+0x5a>
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4a11      	ldr	r2, [pc, #68]	; (80066bc <vTaskSwitchContext+0xac>)
 8006678:	4413      	add	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3308      	adds	r3, #8
 800668e:	429a      	cmp	r2, r3
 8006690:	d104      	bne.n	800669c <vTaskSwitchContext+0x8c>
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <vTaskSwitchContext+0xb0>)
 80066a4:	6013      	str	r3, [r2, #0]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr
 80066b0:	20000850 	.word	0x20000850
 80066b4:	2000083c 	.word	0x2000083c
 80066b8:	20000830 	.word	0x20000830
 80066bc:	2000072c 	.word	0x2000072c
 80066c0:	20000728 	.word	0x20000728

080066c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066cc:	f000 f852 	bl	8006774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <prvIdleTask+0x28>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d9f9      	bls.n	80066cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <prvIdleTask+0x2c>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066e8:	e7f0      	b.n	80066cc <prvIdleTask+0x8>
 80066ea:	bf00      	nop
 80066ec:	2000072c 	.word	0x2000072c
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e00c      	b.n	800671a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <prvInitialiseTaskLists+0x60>)
 800670c:	4413      	add	r3, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fb48 	bl	8005da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3301      	adds	r3, #1
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d9ef      	bls.n	8006700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006720:	480d      	ldr	r0, [pc, #52]	; (8006758 <prvInitialiseTaskLists+0x64>)
 8006722:	f7ff fb3f 	bl	8005da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006726:	480d      	ldr	r0, [pc, #52]	; (800675c <prvInitialiseTaskLists+0x68>)
 8006728:	f7ff fb3c 	bl	8005da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800672c:	480c      	ldr	r0, [pc, #48]	; (8006760 <prvInitialiseTaskLists+0x6c>)
 800672e:	f7ff fb39 	bl	8005da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006732:	480c      	ldr	r0, [pc, #48]	; (8006764 <prvInitialiseTaskLists+0x70>)
 8006734:	f7ff fb36 	bl	8005da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006738:	480b      	ldr	r0, [pc, #44]	; (8006768 <prvInitialiseTaskLists+0x74>)
 800673a:	f7ff fb33 	bl	8005da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <prvInitialiseTaskLists+0x78>)
 8006740:	4a05      	ldr	r2, [pc, #20]	; (8006758 <prvInitialiseTaskLists+0x64>)
 8006742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <prvInitialiseTaskLists+0x7c>)
 8006746:	4a05      	ldr	r2, [pc, #20]	; (800675c <prvInitialiseTaskLists+0x68>)
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2000072c 	.word	0x2000072c
 8006758:	200007b8 	.word	0x200007b8
 800675c:	200007cc 	.word	0x200007cc
 8006760:	200007e8 	.word	0x200007e8
 8006764:	200007fc 	.word	0x200007fc
 8006768:	20000814 	.word	0x20000814
 800676c:	200007e0 	.word	0x200007e0
 8006770:	200007e4 	.word	0x200007e4

08006774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800677a:	e019      	b.n	80067b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800677c:	f000 f9d6 	bl	8006b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <prvCheckTasksWaitingTermination+0x50>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fb8f 	bl	8005eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <prvCheckTasksWaitingTermination+0x54>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <prvCheckTasksWaitingTermination+0x54>)
 800679a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 80067a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067a6:	f000 f9f1 	bl	8006b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f810 	bl	80067d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e1      	bne.n	800677c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200007fc 	.word	0x200007fc
 80067c8:	20000828 	.word	0x20000828
 80067cc:	20000810 	.word	0x20000810

080067d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d108      	bne.n	80067f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb26 	bl	8006e38 <vPortFree>
				vPortFree( pxTCB );
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb23 	bl	8006e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067f2:	e018      	b.n	8006826 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d103      	bne.n	8006806 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fb1a 	bl	8006e38 <vPortFree>
	}
 8006804:	e00f      	b.n	8006826 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800680c:	2b02      	cmp	r3, #2
 800680e:	d00a      	beq.n	8006826 <prvDeleteTCB+0x56>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <prvDeleteTCB+0x54>
	}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <prvResetNextTaskUnblockTime+0x40>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <prvResetNextTaskUnblockTime+0x14>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <prvResetNextTaskUnblockTime+0x16>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <prvResetNextTaskUnblockTime+0x44>)
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006852:	e008      	b.n	8006866 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvResetNextTaskUnblockTime+0x40>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4a04      	ldr	r2, [pc, #16]	; (8006874 <prvResetNextTaskUnblockTime+0x44>)
 8006864:	6013      	str	r3, [r2, #0]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	200007e0 	.word	0x200007e0
 8006874:	20000848 	.word	0x20000848

08006878 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006882:	4b29      	ldr	r3, [pc, #164]	; (8006928 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006888:	4b28      	ldr	r3, [pc, #160]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3304      	adds	r3, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fb0e 	bl	8005eb0 <uxListRemove>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	2201      	movs	r2, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43da      	mvns	r2, r3
 80068a8:	4b21      	ldr	r3, [pc, #132]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4013      	ands	r3, r2
 80068ae:	4a20      	ldr	r2, [pc, #128]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d10a      	bne.n	80068d0 <prvAddCurrentTaskToDelayedList+0x58>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c0:	4b1a      	ldr	r3, [pc, #104]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	481a      	ldr	r0, [pc, #104]	; (8006934 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068ca:	f7ff fa96 	bl	8005dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068ce:	e026      	b.n	800691e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d209      	bcs.n	80068fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7ff faa3 	bl	8005e40 <vListInsert>
}
 80068fa:	e010      	b.n	800691e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <prvAddCurrentTaskToDelayedList+0xc4>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7ff fa99 	bl	8005e40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d202      	bcs.n	800691e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6013      	str	r3, [r2, #0]
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000082c 	.word	0x2000082c
 800692c:	20000728 	.word	0x20000728
 8006930:	20000830 	.word	0x20000830
 8006934:	20000814 	.word	0x20000814
 8006938:	200007e4 	.word	0x200007e4
 800693c:	200007e0 	.word	0x200007e0
 8006940:	20000848 	.word	0x20000848

08006944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3b04      	subs	r3, #4
 8006954:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800695c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3b04      	subs	r3, #4
 8006962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0201 	bic.w	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3b04      	subs	r3, #4
 8006972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <pxPortInitialiseStack+0x54>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3b14      	subs	r3, #20
 800697e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b20      	subs	r3, #32
 800698a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr
 8006998:	0800699d 	.word	0x0800699d

0800699c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <prvTaskExitError+0x54>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d00a      	beq.n	80069c6 <prvTaskExitError+0x2a>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <prvTaskExitError+0x28>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069da:	bf00      	nop
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0fc      	beq.n	80069dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000010 	.word	0x20000010
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a1e:	4770      	bx	lr

08006a20 <pxCurrentTCBConst2>:
 8006a20:	20000728 	.word	0x20000728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a28:	4806      	ldr	r0, [pc, #24]	; (8006a44 <prvPortStartFirstTask+0x1c>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	b662      	cpsie	i
 8006a34:	b661      	cpsie	f
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	df00      	svc	0
 8006a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a42:	bf00      	nop
 8006a44:	e000ed08 	.word	0xe000ed08

08006a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a4e:	4b32      	ldr	r3, [pc, #200]	; (8006b18 <xPortStartScheduler+0xd0>)
 8006a50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	22ff      	movs	r2, #255	; 0xff
 8006a5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <xPortStartScheduler+0xd4>)
 8006a74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006a78:	2207      	movs	r2, #7
 8006a7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a7c:	e009      	b.n	8006a92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4a26      	ldr	r2, [pc, #152]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006a86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d0ef      	beq.n	8006a7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1c3 0307 	rsb	r3, r3, #7
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00a      	beq.n	8006ac0 <xPortStartScheduler+0x78>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60bb      	str	r3, [r7, #8]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ac0:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006ac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ad2:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <xPortStartScheduler+0xd8>)
 8006ad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <xPortStartScheduler+0xdc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a10      	ldr	r2, [pc, #64]	; (8006b24 <xPortStartScheduler+0xdc>)
 8006ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <xPortStartScheduler+0xdc>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a0d      	ldr	r2, [pc, #52]	; (8006b24 <xPortStartScheduler+0xdc>)
 8006af0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006af4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006af6:	f000 f8b9 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <xPortStartScheduler+0xe0>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b00:	f7ff ff92 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b04:	f7ff fd84 	bl	8006610 <vTaskSwitchContext>
	prvTaskExitError();
 8006b08:	f7ff ff48 	bl	800699c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	e000e400 	.word	0xe000e400
 8006b1c:	20000854 	.word	0x20000854
 8006b20:	20000858 	.word	0x20000858
 8006b24:	e000ed20 	.word	0xe000ed20
 8006b28:	20000010 	.word	0x20000010

08006b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	607b      	str	r3, [r7, #4]
}
 8006b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <vPortEnterCritical+0x58>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <vPortEnterCritical+0x58>)
 8006b4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <vPortEnterCritical+0x58>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d10f      	bne.n	8006b78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <vPortEnterCritical+0x5c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	603b      	str	r3, [r7, #0]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <vPortEnterCritical+0x4a>
	}
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000010 	.word	0x20000010
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <vPortExitCritical+0x4c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <vPortExitCritical+0x24>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	607b      	str	r3, [r7, #4]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bb0:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <vPortExitCritical+0x4c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <vPortExitCritical+0x4c>)
 8006bb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <vPortExitCritical+0x4c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d105      	bne.n	8006bce <vPortExitCritical+0x42>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr
 8006bd8:	20000010 	.word	0x20000010
 8006bdc:	00000000 	.word	0x00000000

08006be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006be0:	f3ef 8009 	mrs	r0, PSP
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <pxCurrentTCBConst>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bf0:	6010      	str	r0, [r2, #0]
 8006bf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006bf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006bfa:	f380 8811 	msr	BASEPRI, r0
 8006bfe:	f7ff fd07 	bl	8006610 <vTaskSwitchContext>
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8811 	msr	BASEPRI, r0
 8006c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	6808      	ldr	r0, [r1, #0]
 8006c12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c16:	f380 8809 	msr	PSP, r0
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	4770      	bx	lr

08006c20 <pxCurrentTCBConst>:
 8006c20:	20000728 	.word	0x20000728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f7ff fc27 	bl	8006494 <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <SysTick_Handler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vPortSetupTimerInterrupt+0x30>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a08      	ldr	r2, [pc, #32]	; (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <vPortSetupTimerInterrupt+0x30>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	e000e010 	.word	0xe000e010
 8006ca0:	e000e018 	.word	0xe000e018
 8006ca4:	20000004 	.word	0x20000004
 8006ca8:	10624dd3 	.word	0x10624dd3
 8006cac:	e000e014 	.word	0xe000e014

08006cb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cbc:	f7ff fb40 	bl	8006340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cc0:	4b58      	ldr	r3, [pc, #352]	; (8006e24 <pvPortMalloc+0x174>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cc8:	f000 f910 	bl	8006eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ccc:	4b56      	ldr	r3, [pc, #344]	; (8006e28 <pvPortMalloc+0x178>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 808e 	bne.w	8006df6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01d      	beq.n	8006d1c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d014      	beq.n	8006d1c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <pvPortMalloc+0x6c>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	617b      	str	r3, [r7, #20]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d069      	beq.n	8006df6 <pvPortMalloc+0x146>
 8006d22:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <pvPortMalloc+0x17c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d864      	bhi.n	8006df6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d2c:	4b40      	ldr	r3, [pc, #256]	; (8006e30 <pvPortMalloc+0x180>)
 8006d2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d30:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <pvPortMalloc+0x180>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d36:	e004      	b.n	8006d42 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d903      	bls.n	8006d54 <pvPortMalloc+0xa4>
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f1      	bne.n	8006d38 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d54:	4b33      	ldr	r3, [pc, #204]	; (8006e24 <pvPortMalloc+0x174>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d04b      	beq.n	8006df6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2208      	movs	r2, #8
 8006d64:	4413      	add	r3, r2
 8006d66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	2308      	movs	r3, #8
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d91f      	bls.n	8006dc0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <pvPortMalloc+0xf8>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	613b      	str	r3, [r7, #16]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dba:	69b8      	ldr	r0, [r7, #24]
 8006dbc:	f000 f8f8 	bl	8006fb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <pvPortMalloc+0x17c>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <pvPortMalloc+0x17c>)
 8006dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <pvPortMalloc+0x17c>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <pvPortMalloc+0x184>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d203      	bcs.n	8006de2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <pvPortMalloc+0x17c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <pvPortMalloc+0x184>)
 8006de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <pvPortMalloc+0x178>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006df6:	f7ff fab1 	bl	800635c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <pvPortMalloc+0x16a>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <pvPortMalloc+0x168>
	return pvReturn;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3728      	adds	r7, #40	; 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20001464 	.word	0x20001464
 8006e28:	20001470 	.word	0x20001470
 8006e2c:	20001468 	.word	0x20001468
 8006e30:	2000145c 	.word	0x2000145c
 8006e34:	2000146c 	.word	0x2000146c

08006e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d048      	beq.n	8006edc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	425b      	negs	r3, r3
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <vPortFree+0xac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <vPortFree+0x44>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <vPortFree+0x62>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	60bb      	str	r3, [r7, #8]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <vPortFree+0xac>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d019      	beq.n	8006edc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d115      	bne.n	8006edc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <vPortFree+0xac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	401a      	ands	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ec0:	f7ff fa3e 	bl	8006340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <vPortFree+0xb0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4413      	add	r3, r2
 8006ece:	4a06      	ldr	r2, [pc, #24]	; (8006ee8 <vPortFree+0xb0>)
 8006ed0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ed2:	6938      	ldr	r0, [r7, #16]
 8006ed4:	f000 f86c 	bl	8006fb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ed8:	f7ff fa40 	bl	800635c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006edc:	bf00      	nop
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20001470 	.word	0x20001470
 8006ee8:	20001468 	.word	0x20001468

08006eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ef2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef8:	4b27      	ldr	r3, [pc, #156]	; (8006f98 <prvHeapInit+0xac>)
 8006efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3307      	adds	r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0307 	bic.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	4a1f      	ldr	r2, [pc, #124]	; (8006f98 <prvHeapInit+0xac>)
 8006f1c:	4413      	add	r3, r2
 8006f1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <prvHeapInit+0xb0>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f2a:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <prvHeapInit+0xb0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f38:	2208      	movs	r2, #8
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0307 	bic.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <prvHeapInit+0xb4>)
 8006f4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <prvHeapInit+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <prvHeapInit+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <prvHeapInit+0xb4>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a0a      	ldr	r2, [pc, #40]	; (8006fa4 <prvHeapInit+0xb8>)
 8006f7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <prvHeapInit+0xbc>)
 8006f82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <prvHeapInit+0xc0>)
 8006f86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f8a:	601a      	str	r2, [r3, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000085c 	.word	0x2000085c
 8006f9c:	2000145c 	.word	0x2000145c
 8006fa0:	20001464 	.word	0x20001464
 8006fa4:	2000146c 	.word	0x2000146c
 8006fa8:	20001468 	.word	0x20001468
 8006fac:	20001470 	.word	0x20001470

08006fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fb8:	4b27      	ldr	r3, [pc, #156]	; (8007058 <prvInsertBlockIntoFreeList+0xa8>)
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e002      	b.n	8006fc4 <prvInsertBlockIntoFreeList+0x14>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d8f7      	bhi.n	8006fbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d108      	bne.n	8006ff2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	441a      	add	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	441a      	add	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d118      	bne.n	8007038 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <prvInsertBlockIntoFreeList+0xac>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d00d      	beq.n	800702e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e008      	b.n	8007040 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <prvInsertBlockIntoFreeList+0xac>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e003      	b.n	8007040 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d002      	beq.n	800704e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	2000145c 	.word	0x2000145c
 800705c:	20001464 	.word	0x20001464

08007060 <memset>:
 8007060:	4603      	mov	r3, r0
 8007062:	4402      	add	r2, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	2600      	movs	r6, #0
 8007074:	4d0c      	ldr	r5, [pc, #48]	; (80070a8 <__libc_init_array+0x38>)
 8007076:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	f000 f81a 	bl	80070b8 <_init>
 8007084:	2600      	movs	r6, #0
 8007086:	4d0a      	ldr	r5, [pc, #40]	; (80070b0 <__libc_init_array+0x40>)
 8007088:	4c0a      	ldr	r4, [pc, #40]	; (80070b4 <__libc_init_array+0x44>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08007178 	.word	0x08007178
 80070ac:	08007178 	.word	0x08007178
 80070b0:	08007178 	.word	0x08007178
 80070b4:	0800717c 	.word	0x0800717c

080070b8 <_init>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr

080070c4 <_fini>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr
