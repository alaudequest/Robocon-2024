
Test_OptimizerV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080038c0  080038c0  000138c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac0  08003ac0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac0  08003ac0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08003b38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003b38  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023c5  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c93  00000000  00000000  000224a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  00023138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000286  00000000  00000000  000234c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160c9  00000000  00000000  00023746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004223  00000000  00000000  0003980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f120  00000000  00000000  0003da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013ec  00000000  00000000  000bcb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000bdf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080038a8 	.word	0x080038a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080038a8 	.word	0x080038a8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_frsub>:
 8000c80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	e002      	b.n	8000c8c <__addsf3>
 8000c86:	bf00      	nop

08000c88 <__aeabi_fsub>:
 8000c88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c8c <__addsf3>:
 8000c8c:	0042      	lsls	r2, r0, #1
 8000c8e:	bf1f      	itttt	ne
 8000c90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c94:	ea92 0f03 	teqne	r2, r3
 8000c98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca0:	d06a      	beq.n	8000d78 <__addsf3+0xec>
 8000ca2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ca6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000caa:	bfc1      	itttt	gt
 8000cac:	18d2      	addgt	r2, r2, r3
 8000cae:	4041      	eorgt	r1, r0
 8000cb0:	4048      	eorgt	r0, r1
 8000cb2:	4041      	eorgt	r1, r0
 8000cb4:	bfb8      	it	lt
 8000cb6:	425b      	neglt	r3, r3
 8000cb8:	2b19      	cmp	r3, #25
 8000cba:	bf88      	it	hi
 8000cbc:	4770      	bxhi	lr
 8000cbe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cca:	bf18      	it	ne
 8000ccc:	4240      	negne	r0, r0
 8000cce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cd2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4249      	negne	r1, r1
 8000cde:	ea92 0f03 	teq	r2, r3
 8000ce2:	d03f      	beq.n	8000d64 <__addsf3+0xd8>
 8000ce4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cec:	eb10 000c 	adds.w	r0, r0, ip
 8000cf0:	f1c3 0320 	rsb	r3, r3, #32
 8000cf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__addsf3+0x78>
 8000cfe:	4249      	negs	r1, r1
 8000d00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d08:	d313      	bcc.n	8000d32 <__addsf3+0xa6>
 8000d0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d0e:	d306      	bcc.n	8000d1e <__addsf3+0x92>
 8000d10:	0840      	lsrs	r0, r0, #1
 8000d12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d16:	f102 0201 	add.w	r2, r2, #1
 8000d1a:	2afe      	cmp	r2, #254	; 0xfe
 8000d1c:	d251      	bcs.n	8000dc2 <__addsf3+0x136>
 8000d1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	ea40 0003 	orr.w	r0, r0, r3
 8000d30:	4770      	bx	lr
 8000d32:	0049      	lsls	r1, r1, #1
 8000d34:	eb40 0000 	adc.w	r0, r0, r0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	bf28      	it	cs
 8000d3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d40:	d2ed      	bcs.n	8000d1e <__addsf3+0x92>
 8000d42:	fab0 fc80 	clz	ip, r0
 8000d46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d52:	bfaa      	itet	ge
 8000d54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d58:	4252      	neglt	r2, r2
 8000d5a:	4318      	orrge	r0, r3
 8000d5c:	bfbc      	itt	lt
 8000d5e:	40d0      	lsrlt	r0, r2
 8000d60:	4318      	orrlt	r0, r3
 8000d62:	4770      	bx	lr
 8000d64:	f092 0f00 	teq	r2, #0
 8000d68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d6c:	bf06      	itte	eq
 8000d6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d72:	3201      	addeq	r2, #1
 8000d74:	3b01      	subne	r3, #1
 8000d76:	e7b5      	b.n	8000ce4 <__addsf3+0x58>
 8000d78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d80:	bf18      	it	ne
 8000d82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d86:	d021      	beq.n	8000dcc <__addsf3+0x140>
 8000d88:	ea92 0f03 	teq	r2, r3
 8000d8c:	d004      	beq.n	8000d98 <__addsf3+0x10c>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	bf08      	it	eq
 8000d94:	4608      	moveq	r0, r1
 8000d96:	4770      	bx	lr
 8000d98:	ea90 0f01 	teq	r0, r1
 8000d9c:	bf1c      	itt	ne
 8000d9e:	2000      	movne	r0, #0
 8000da0:	4770      	bxne	lr
 8000da2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000da6:	d104      	bne.n	8000db2 <__addsf3+0x126>
 8000da8:	0040      	lsls	r0, r0, #1
 8000daa:	bf28      	it	cs
 8000dac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000db6:	bf3c      	itt	cc
 8000db8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bxcc	lr
 8000dbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dca:	4770      	bx	lr
 8000dcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd0:	bf16      	itet	ne
 8000dd2:	4608      	movne	r0, r1
 8000dd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd8:	4601      	movne	r1, r0
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	bf06      	itte	eq
 8000dde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000de2:	ea90 0f01 	teqeq	r0, r1
 8000de6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ui2f>:
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e004      	b.n	8000dfc <__aeabi_i2f+0x8>
 8000df2:	bf00      	nop

08000df4 <__aeabi_i2f>:
 8000df4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df8:	bf48      	it	mi
 8000dfa:	4240      	negmi	r0, r0
 8000dfc:	ea5f 0c00 	movs.w	ip, r0
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e08:	4601      	mov	r1, r0
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	e01c      	b.n	8000e4a <__aeabi_l2f+0x2a>

08000e10 <__aeabi_ul2f>:
 8000e10:	ea50 0201 	orrs.w	r2, r0, r1
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e00a      	b.n	8000e34 <__aeabi_l2f+0x14>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_l2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e2c:	d502      	bpl.n	8000e34 <__aeabi_l2f+0x14>
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	ea5f 0c01 	movs.w	ip, r1
 8000e38:	bf02      	ittt	eq
 8000e3a:	4684      	moveq	ip, r0
 8000e3c:	4601      	moveq	r1, r0
 8000e3e:	2000      	moveq	r0, #0
 8000e40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e44:	bf08      	it	eq
 8000e46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e4e:	fabc f28c 	clz	r2, ip
 8000e52:	3a08      	subs	r2, #8
 8000e54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e58:	db10      	blt.n	8000e7c <__aeabi_l2f+0x5c>
 8000e5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5e:	4463      	add	r3, ip
 8000e60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e64:	f1c2 0220 	rsb	r2, r2, #32
 8000e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e70:	eb43 0002 	adc.w	r0, r3, r2
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f102 0220 	add.w	r2, r2, #32
 8000e80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e84:	f1c2 0220 	rsb	r2, r2, #32
 8000e88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e90:	eb43 0002 	adc.w	r0, r3, r2
 8000e94:	bf08      	it	eq
 8000e96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e9a:	4770      	bx	lr

08000e9c <__gesf2>:
 8000e9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ea0:	e006      	b.n	8000eb0 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__lesf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	e002      	b.n	8000eb0 <__cmpsf2+0x4>
 8000eaa:	bf00      	nop

08000eac <__cmpsf2>:
 8000eac:	f04f 0c01 	mov.w	ip, #1
 8000eb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	bf18      	it	ne
 8000ec2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec6:	d011      	beq.n	8000eec <__cmpsf2+0x40>
 8000ec8:	b001      	add	sp, #4
 8000eca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ece:	bf18      	it	ne
 8000ed0:	ea90 0f01 	teqne	r0, r1
 8000ed4:	bf58      	it	pl
 8000ed6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eda:	bf88      	it	hi
 8000edc:	17c8      	asrhi	r0, r1, #31
 8000ede:	bf38      	it	cc
 8000ee0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee4:	bf18      	it	ne
 8000ee6:	f040 0001 	orrne.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef0:	d102      	bne.n	8000ef8 <__cmpsf2+0x4c>
 8000ef2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef6:	d105      	bne.n	8000f04 <__cmpsf2+0x58>
 8000ef8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000efc:	d1e4      	bne.n	8000ec8 <__cmpsf2+0x1c>
 8000efe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f02:	d0e1      	beq.n	8000ec8 <__cmpsf2+0x1c>
 8000f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__aeabi_cfrcmple>:
 8000f0c:	4684      	mov	ip, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4661      	mov	r1, ip
 8000f12:	e7ff      	b.n	8000f14 <__aeabi_cfcmpeq>

08000f14 <__aeabi_cfcmpeq>:
 8000f14:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f16:	f7ff ffc9 	bl	8000eac <__cmpsf2>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	bf48      	it	mi
 8000f1e:	f110 0f00 	cmnmi.w	r0, #0
 8000f22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f24 <__aeabi_fcmpeq>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff fff4 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2001      	moveq	r0, #1
 8000f30:	2000      	movne	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmplt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffea 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmple>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffe0 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpge>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffd2 	bl	8000f0c <__aeabi_cfrcmple>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpgt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffc8 	bl	8000f0c <__aeabi_cfrcmple>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <SwerveInit>:
	int8_t Y;
}Optimizer;

Optimizer Swerve;

void SwerveInit(Optimizer *Swerve) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	Swerve->Direc 		= 1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	Swerve->CurAngle 	= 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
	Swerve->PreAngle	= 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
	Swerve->CalInput 	= 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
	Swerve->CalX		= 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
	Swerve->CalY		= 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
	Swerve->PreX		= 1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fc4:	619a      	str	r2, [r3, #24]
	Swerve->PreY		= 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
	Swerve->Alpha 		= 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
	Swerve->X			= 1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Swerve->Y			= 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <OptimizerV3>:

void OptimizerV3(Optimizer *Swerve, float Input){
 8000ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	if(Input != Swerve->PreAngle) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f7ff ff8e 	bl	8000f24 <__aeabi_fcmpeq>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d000      	beq.n	8001010 <OptimizerV3+0x20>
			if(Input>=0) Swerve->CurAngle = Input - 180;
			else Swerve->CurAngle = Input + 180;
		}
		Swerve->PreAngle = Input;
	}
}
 800100e:	e20a      	b.n	8001426 <OptimizerV3+0x436>
		Swerve->CalInput = Input*M_PI/180;
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f7ff fab5 	bl	8000580 <__aeabi_f2d>
 8001016:	a3b4      	add	r3, pc, #720	; (adr r3, 80012e8 <OptimizerV3+0x2f8>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fb08 	bl	8000630 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4bb2      	ldr	r3, [pc, #712]	; (80012f8 <OptimizerV3+0x308>)
 800102e:	f7ff fc29 	bl	8000884 <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fdd1 	bl	8000be0 <__aeabi_d2f>
 800103e:	4602      	mov	r2, r0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60da      	str	r2, [r3, #12]
		Swerve->CalX 	= Swerve->X*cos(Swerve->CalInput) - Swerve->Y*sin(Swerve->CalInput);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa86 	bl	800055c <__aeabi_i2d>
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa91 	bl	8000580 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f001 f8bb 	bl	80021e0 <cos>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4620      	mov	r0, r4
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fadd 	bl	8000630 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4690      	mov	r8, r2
 800107c:	4699      	mov	r9, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa69 	bl	800055c <__aeabi_i2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa74 	bl	8000580 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f001 f8e8 	bl	8002274 <sin>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff fac0 	bl	8000630 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4640      	mov	r0, r8
 80010b6:	4649      	mov	r1, r9
 80010b8:	f7ff f902 	bl	80002c0 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd8c 	bl	8000be0 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	611a      	str	r2, [r3, #16]
		Swerve->CalY 	= Swerve->X*sin(Swerve->CalInput) + Swerve->Y*cos(Swerve->CalInput);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa41 	bl	800055c <__aeabi_i2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa4c 	bl	8000580 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f001 f8c0 	bl	8002274 <sin>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fa98 	bl	8000630 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4690      	mov	r8, r2
 8001106:	4699      	mov	r9, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa24 	bl	800055c <__aeabi_i2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa2f 	bl	8000580 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f001 f859 	bl	80021e0 <cos>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fa7b 	bl	8000630 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4640      	mov	r0, r8
 8001140:	4649      	mov	r1, r9
 8001142:	f7ff f8bf 	bl	80002c4 <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd47 	bl	8000be0 <__aeabi_d2f>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
		Swerve->Alpha 	= acos(((Swerve->PreX*Swerve->CalX)+(Swerve->PreY*Swerve->CalY))/(sqrt((Swerve->CalX*Swerve->CalX)+(Swerve->CalY*Swerve->CalY))*sqrt((Swerve->PreX*Swerve->PreX)+(Swerve->PreY*Swerve->PreY))))*(180/M_PI);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f7fe fff4 	bl	8000150 <__aeabi_fmul>
 8001168:	4603      	mov	r3, r0
 800116a:	461c      	mov	r4, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69da      	ldr	r2, [r3, #28]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4619      	mov	r1, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f7fe ffea 	bl	8000150 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fd83 	bl	8000c8c <__addsf3>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9f9 	bl	8000580 <__aeabi_f2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f7fe ffd7 	bl	8000150 <__aeabi_fmul>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461e      	mov	r6, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4610      	mov	r0, r2
 80011b2:	f7fe ffcd 	bl	8000150 <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff fd66 	bl	8000c8c <__addsf3>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9dc 	bl	8000580 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f000 ffe2 	bl	8002198 <sqrt>
 80011d4:	4680      	mov	r8, r0
 80011d6:	4689      	mov	r9, r1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7fe ffb4 	bl	8000150 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461e      	mov	r6, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69da      	ldr	r2, [r3, #28]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7fe ffaa 	bl	8000150 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4630      	mov	r0, r6
 8001202:	f7ff fd43 	bl	8000c8c <__addsf3>
 8001206:	4603      	mov	r3, r0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b9 	bl	8000580 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f000 ffbf 	bl	8002198 <sqrt>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff fa05 	bl	8000630 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fb29 	bl	8000884 <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f000 ff85 	bl	8002148 <acos>
 800123e:	a32c      	add	r3, pc, #176	; (adr r3, 80012f0 <OptimizerV3+0x300>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f4 	bl	8000630 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcc6 	bl	8000be0 <__aeabi_d2f>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	621a      	str	r2, [r3, #32]
		Swerve->PreX 	= Swerve->CalX;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
		Swerve->PreY 	= Swerve->CalY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	61da      	str	r2, [r3, #28]
		if(Swerve->Alpha == 0) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe56 	bl	8000f24 <__aeabi_fcmpeq>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d040      	beq.n	8001300 <OptimizerV3+0x310>
			Swerve->Direc *= 1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f993 2000 	ldrsb.w	r2, [r3]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	701a      	strb	r2, [r3, #0]
			if(Input == Swerve->CurAngle + 360) Swerve->CurAngle = Input - 360;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	491b      	ldr	r1, [pc, #108]	; (80012fc <OptimizerV3+0x30c>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fcfc 	bl	8000c8c <__addsf3>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f7ff fe43 	bl	8000f24 <__aeabi_fcmpeq>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <OptimizerV3+0x2c6>
 80012a4:	4915      	ldr	r1, [pc, #84]	; (80012fc <OptimizerV3+0x30c>)
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fcee 	bl	8000c88 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	e0b4      	b.n	8001420 <OptimizerV3+0x430>
			else if(Input == Swerve->CurAngle - 360) Swerve->CurAngle = Input  + 360;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4910      	ldr	r1, [pc, #64]	; (80012fc <OptimizerV3+0x30c>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fce3 	bl	8000c88 <__aeabi_fsub>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4619      	mov	r1, r3
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f7ff fe2c 	bl	8000f24 <__aeabi_fcmpeq>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a6 	beq.w	8001420 <OptimizerV3+0x430>
 80012d4:	4909      	ldr	r1, [pc, #36]	; (80012fc <OptimizerV3+0x30c>)
 80012d6:	6838      	ldr	r0, [r7, #0]
 80012d8:	f7ff fcd8 	bl	8000c8c <__addsf3>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	e09c      	b.n	8001420 <OptimizerV3+0x430>
 80012e6:	bf00      	nop
 80012e8:	54442d18 	.word	0x54442d18
 80012ec:	400921fb 	.word	0x400921fb
 80012f0:	1a63c1f8 	.word	0x1a63c1f8
 80012f4:	404ca5dc 	.word	0x404ca5dc
 80012f8:	40668000 	.word	0x40668000
 80012fc:	43b40000 	.word	0x43b40000
		else if(Swerve->Alpha == 180) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	494a      	ldr	r1, [pc, #296]	; (8001430 <OptimizerV3+0x440>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe0c 	bl	8000f24 <__aeabi_fcmpeq>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d036      	beq.n	8001380 <OptimizerV3+0x390>
			Swerve->Direc *= -1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	425b      	negs	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	b25a      	sxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	701a      	strb	r2, [r3, #0]
			if(Input == Swerve->CurAngle + 180) Swerve->CurAngle = Input - 180;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4941      	ldr	r1, [pc, #260]	; (8001430 <OptimizerV3+0x440>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcae 	bl	8000c8c <__addsf3>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f7ff fdf5 	bl	8000f24 <__aeabi_fcmpeq>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <OptimizerV3+0x362>
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <OptimizerV3+0x440>)
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff fca0 	bl	8000c88 <__aeabi_fsub>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e066      	b.n	8001420 <OptimizerV3+0x430>
			else if(Input == Swerve->CurAngle - 180) Swerve->CurAngle = Input + 180;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4936      	ldr	r1, [pc, #216]	; (8001430 <OptimizerV3+0x440>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc95 	bl	8000c88 <__aeabi_fsub>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	6838      	ldr	r0, [r7, #0]
 8001364:	f7ff fdde 	bl	8000f24 <__aeabi_fcmpeq>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d058      	beq.n	8001420 <OptimizerV3+0x430>
 800136e:	4930      	ldr	r1, [pc, #192]	; (8001430 <OptimizerV3+0x440>)
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff fc8b 	bl	8000c8c <__addsf3>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	e04f      	b.n	8001420 <OptimizerV3+0x430>
		else if(Swerve->Alpha>0 && Swerve->Alpha<=90){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fdf3 	bl	8000f74 <__aeabi_fcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d011      	beq.n	80013b8 <OptimizerV3+0x3c8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4926      	ldr	r1, [pc, #152]	; (8001434 <OptimizerV3+0x444>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fdd6 	bl	8000f4c <__aeabi_fcmple>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <OptimizerV3+0x3c8>
			Swerve->Direc *= 1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f993 2000 	ldrsb.w	r2, [r3]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	701a      	strb	r2, [r3, #0]
			Swerve->CurAngle = Input;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	e033      	b.n	8001420 <OptimizerV3+0x430>
		else if(Swerve->Alpha>90 && Swerve->Alpha<180) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	491d      	ldr	r1, [pc, #116]	; (8001434 <OptimizerV3+0x444>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fdd8 	bl	8000f74 <__aeabi_fcmpgt>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d02a      	beq.n	8001420 <OptimizerV3+0x430>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4918      	ldr	r1, [pc, #96]	; (8001430 <OptimizerV3+0x440>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdb1 	bl	8000f38 <__aeabi_fcmplt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d021      	beq.n	8001420 <OptimizerV3+0x430>
			Swerve->Direc *= -1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f993 3000 	ldrsb.w	r3, [r3]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	425b      	negs	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	701a      	strb	r2, [r3, #0]
			if(Input>=0) Swerve->CurAngle = Input - 180;
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff fdb4 	bl	8000f60 <__aeabi_fcmpge>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <OptimizerV3+0x420>
 80013fe:	490c      	ldr	r1, [pc, #48]	; (8001430 <OptimizerV3+0x440>)
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f7ff fc41 	bl	8000c88 <__aeabi_fsub>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e007      	b.n	8001420 <OptimizerV3+0x430>
			else Swerve->CurAngle = Input + 180;
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <OptimizerV3+0x440>)
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f7ff fc3a 	bl	8000c8c <__addsf3>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]
		Swerve->PreAngle = Input;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	609a      	str	r2, [r3, #8]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001430:	43340000 	.word	0x43340000
 8001434:	42b40000 	.word	0x42b40000

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143c:	f000 f90a 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001440:	f000 f814 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 f858 	bl	80014f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SwerveInit(&Swerve);
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <main+0x2c>)
 800144a:	f7ff fd9d 	bl	8000f88 <SwerveInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	OptimizerV3(&Swerve, AngleTest);
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <main+0x30>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <main+0x2c>)
 8001456:	f7ff fdcb 	bl	8000ff0 <OptimizerV3>
	HAL_Delay(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f000 f95c 	bl	8001718 <HAL_Delay>
	OptimizerV3(&Swerve, AngleTest);
 8001460:	e7f5      	b.n	800144e <main+0x16>
 8001462:	bf00      	nop
 8001464:	20000090 	.word	0x20000090
 8001468:	2000008c 	.word	0x2000008c

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	2228      	movs	r2, #40	; 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fe32 	bl	80020e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fa37 	bl	8001928 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014c0:	f000 f83c 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2102      	movs	r1, #2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fca4 	bl	8001e2c <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ea:	f000 f827 	bl	800153c <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3740      	adds	r7, #64	; 0x40
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_GPIO_Init+0x40>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <MX_GPIO_Init+0x40>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_GPIO_Init+0x40>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_GPIO_Init+0x40>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <MX_GPIO_Init+0x40>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <MX_GPIO_Init+0x40>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_MspInit+0x5c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x5c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_MspInit+0x60>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_MspInit+0x60>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f875 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff fff7 	bl	80015fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001624:	4c09      	ldr	r4, [pc, #36]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f000 fd65 	bl	8002100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f7ff feff 	bl	8001438 <main>
  bx lr
 800163a:	4770      	bx	lr
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001644:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 8001648:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800164c:	200001f4 	.word	0x200001f4

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x28>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x28>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f92b 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff ff6a 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f935 	bl	800190e <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f90b 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x1c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_IncTick+0x20>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_IncTick+0x20>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000008 	.word	0x20000008
 8001700:	200000b8 	.word	0x200000b8

08001704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_GetTick+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	200000b8 	.word	0x200000b8

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fff0 	bl	8001704 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffe0 	bl	8001704 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f7ff ff90 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff49 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff5e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff90 	bl	8001818 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5f 	bl	80017c4 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb0 	bl	800187c <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e272      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e24c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x76>
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x98>
 80019a6:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xbc>
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fe7e 	bl	8001704 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fe7a 	bl	8001704 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e200      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe4>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fe6a 	bl	8001704 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fe66 	bl	8001704 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1ec      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x10c>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4939      	ldr	r1, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fe1f 	bl	8001704 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fe1b 	bl	8001704 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fdfe 	bl	8001704 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fdfa 	bl	8001704 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e180      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03a      	beq.n	8001bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fdde 	bl	8001704 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fdda 	bl	8001704 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e160      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 fa9c 	bl	80020a8 <RCC_Delay>
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fdc4 	bl	8001704 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fdc0 	bl	8001704 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e146      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	42420000 	.word	0x42420000
 8001b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fd81 	bl	8001704 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fd7d 	bl	8001704 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e103      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x312>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x334>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x356>
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a60      	ldr	r2, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fd31 	bl	8001704 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fd2d 	bl	8001704 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0b1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff fd1b 	bl	8001704 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fd17 	bl	8001704 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e09b      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d061      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d146      	bne.n	8001db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fceb 	bl	8001704 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff fce7 	bl	8001704 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e06d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4921      	ldr	r1, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fcbb 	bl	8001704 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff fcb7 	bl	8001704 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46a>
 8001db0:	e035      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fca4 	bl	8001704 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff fca0 	bl	8001704 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e026      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x498>
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e019      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x500>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e073      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7ff fbf2 	bl	8001704 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff fbee 	bl	8001704 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e053      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fb50 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	080038c0 	.word	0x080038c0
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	e027      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	e027      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200
 800209c:	080038d0 	.word	0x080038d0
 80020a0:	080038e0 	.word	0x080038e0
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <RCC_Delay+0x34>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <RCC_Delay+0x38>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a5b      	lsrs	r3, r3, #9
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c4:	bf00      	nop
  }
  while (Delay --);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	60fa      	str	r2, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <RCC_Delay+0x1c>
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000000 	.word	0x20000000
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <memset>:
 80020e4:	4603      	mov	r3, r0
 80020e6:	4402      	add	r2, r0
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d100      	bne.n	80020ee <memset+0xa>
 80020ec:	4770      	bx	lr
 80020ee:	f803 1b01 	strb.w	r1, [r3], #1
 80020f2:	e7f9      	b.n	80020e8 <memset+0x4>

080020f4 <__errno>:
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <__errno+0x8>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000058 	.word	0x20000058

08002100 <__libc_init_array>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	2600      	movs	r6, #0
 8002104:	4d0c      	ldr	r5, [pc, #48]	; (8002138 <__libc_init_array+0x38>)
 8002106:	4c0d      	ldr	r4, [pc, #52]	; (800213c <__libc_init_array+0x3c>)
 8002108:	1b64      	subs	r4, r4, r5
 800210a:	10a4      	asrs	r4, r4, #2
 800210c:	42a6      	cmp	r6, r4
 800210e:	d109      	bne.n	8002124 <__libc_init_array+0x24>
 8002110:	f001 fbca 	bl	80038a8 <_init>
 8002114:	2600      	movs	r6, #0
 8002116:	4d0a      	ldr	r5, [pc, #40]	; (8002140 <__libc_init_array+0x40>)
 8002118:	4c0a      	ldr	r4, [pc, #40]	; (8002144 <__libc_init_array+0x44>)
 800211a:	1b64      	subs	r4, r4, r5
 800211c:	10a4      	asrs	r4, r4, #2
 800211e:	42a6      	cmp	r6, r4
 8002120:	d105      	bne.n	800212e <__libc_init_array+0x2e>
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	f855 3b04 	ldr.w	r3, [r5], #4
 8002128:	4798      	blx	r3
 800212a:	3601      	adds	r6, #1
 800212c:	e7ee      	b.n	800210c <__libc_init_array+0xc>
 800212e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002132:	4798      	blx	r3
 8002134:	3601      	adds	r6, #1
 8002136:	e7f2      	b.n	800211e <__libc_init_array+0x1e>
 8002138:	08003ac0 	.word	0x08003ac0
 800213c:	08003ac0 	.word	0x08003ac0
 8002140:	08003ac0 	.word	0x08003ac0
 8002144:	08003ac4 	.word	0x08003ac4

08002148 <acos>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	4604      	mov	r4, r0
 800214c:	460d      	mov	r5, r1
 800214e:	f000 fb2f 	bl	80027b0 <__ieee754_acos>
 8002152:	4622      	mov	r2, r4
 8002154:	4606      	mov	r6, r0
 8002156:	460f      	mov	r7, r1
 8002158:	462b      	mov	r3, r5
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe fd01 	bl	8000b64 <__aeabi_dcmpun>
 8002162:	b988      	cbnz	r0, 8002188 <acos+0x40>
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f000 f880 	bl	800226c <fabs>
 800216c:	2200      	movs	r2, #0
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <acos+0x48>)
 8002170:	f7fe fcee 	bl	8000b50 <__aeabi_dcmpgt>
 8002174:	b140      	cbz	r0, 8002188 <acos+0x40>
 8002176:	f7ff ffbd 	bl	80020f4 <__errno>
 800217a:	2321      	movs	r3, #33	; 0x21
 800217c:	6003      	str	r3, [r0, #0]
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <acos+0x4c>)
 8002180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002184:	f000 b8bc 	b.w	8002300 <nan>
 8002188:	4630      	mov	r0, r6
 800218a:	4639      	mov	r1, r7
 800218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218e:	bf00      	nop
 8002190:	3ff00000 	.word	0x3ff00000
 8002194:	080038e2 	.word	0x080038e2

08002198 <sqrt>:
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	4606      	mov	r6, r0
 800219c:	460f      	mov	r7, r1
 800219e:	f000 f8b5 	bl	800230c <__ieee754_sqrt>
 80021a2:	4632      	mov	r2, r6
 80021a4:	4604      	mov	r4, r0
 80021a6:	460d      	mov	r5, r1
 80021a8:	463b      	mov	r3, r7
 80021aa:	4630      	mov	r0, r6
 80021ac:	4639      	mov	r1, r7
 80021ae:	f7fe fcd9 	bl	8000b64 <__aeabi_dcmpun>
 80021b2:	b990      	cbnz	r0, 80021da <sqrt+0x42>
 80021b4:	2200      	movs	r2, #0
 80021b6:	2300      	movs	r3, #0
 80021b8:	4630      	mov	r0, r6
 80021ba:	4639      	mov	r1, r7
 80021bc:	f7fe fcaa 	bl	8000b14 <__aeabi_dcmplt>
 80021c0:	b158      	cbz	r0, 80021da <sqrt+0x42>
 80021c2:	f7ff ff97 	bl	80020f4 <__errno>
 80021c6:	2321      	movs	r3, #33	; 0x21
 80021c8:	2200      	movs	r2, #0
 80021ca:	6003      	str	r3, [r0, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fb57 	bl	8000884 <__aeabi_ddiv>
 80021d6:	4604      	mov	r4, r0
 80021d8:	460d      	mov	r5, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021e0 <cos>:
 80021e0:	b530      	push	{r4, r5, lr}
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <cos+0x84>)
 80021e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80021e8:	4293      	cmp	r3, r2
 80021ea:	b087      	sub	sp, #28
 80021ec:	dc06      	bgt.n	80021fc <cos+0x1c>
 80021ee:	2200      	movs	r2, #0
 80021f0:	2300      	movs	r3, #0
 80021f2:	b007      	add	sp, #28
 80021f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021f8:	f000 b962 	b.w	80024c0 <__kernel_cos>
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <cos+0x88>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	dd05      	ble.n	800220e <cos+0x2e>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	f7fe f85b 	bl	80002c0 <__aeabi_dsub>
 800220a:	b007      	add	sp, #28
 800220c:	bd30      	pop	{r4, r5, pc}
 800220e:	aa02      	add	r2, sp, #8
 8002210:	f000 fd1a 	bl	8002c48 <__ieee754_rem_pio2>
 8002214:	f000 0003 	and.w	r0, r0, #3
 8002218:	2801      	cmp	r0, #1
 800221a:	d009      	beq.n	8002230 <cos+0x50>
 800221c:	2802      	cmp	r0, #2
 800221e:	d011      	beq.n	8002244 <cos+0x64>
 8002220:	b9b8      	cbnz	r0, 8002252 <cos+0x72>
 8002222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800222a:	f000 f949 	bl	80024c0 <__kernel_cos>
 800222e:	e7ec      	b.n	800220a <cos+0x2a>
 8002230:	9000      	str	r0, [sp, #0]
 8002232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800223a:	f000 fa01 	bl	8002640 <__kernel_sin>
 800223e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002242:	e7e2      	b.n	800220a <cos+0x2a>
 8002244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800224c:	f000 f938 	bl	80024c0 <__kernel_cos>
 8002250:	e7f5      	b.n	800223e <cos+0x5e>
 8002252:	2301      	movs	r3, #1
 8002254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800225e:	f000 f9ef 	bl	8002640 <__kernel_sin>
 8002262:	e7d2      	b.n	800220a <cos+0x2a>
 8002264:	3fe921fb 	.word	0x3fe921fb
 8002268:	7fefffff 	.word	0x7fefffff

0800226c <fabs>:
 800226c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002270:	4619      	mov	r1, r3
 8002272:	4770      	bx	lr

08002274 <sin>:
 8002274:	b530      	push	{r4, r5, lr}
 8002276:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <sin+0x84>)
 8002278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800227c:	4293      	cmp	r3, r2
 800227e:	b087      	sub	sp, #28
 8002280:	dc06      	bgt.n	8002290 <sin+0x1c>
 8002282:	2300      	movs	r3, #0
 8002284:	2200      	movs	r2, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	f000 f9d9 	bl	8002640 <__kernel_sin>
 800228e:	e006      	b.n	800229e <sin+0x2a>
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <sin+0x88>)
 8002292:	4293      	cmp	r3, r2
 8002294:	dd05      	ble.n	80022a2 <sin+0x2e>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	f7fe f811 	bl	80002c0 <__aeabi_dsub>
 800229e:	b007      	add	sp, #28
 80022a0:	bd30      	pop	{r4, r5, pc}
 80022a2:	aa02      	add	r2, sp, #8
 80022a4:	f000 fcd0 	bl	8002c48 <__ieee754_rem_pio2>
 80022a8:	f000 0003 	and.w	r0, r0, #3
 80022ac:	2801      	cmp	r0, #1
 80022ae:	d009      	beq.n	80022c4 <sin+0x50>
 80022b0:	2802      	cmp	r0, #2
 80022b2:	d00e      	beq.n	80022d2 <sin+0x5e>
 80022b4:	b9c0      	cbnz	r0, 80022e8 <sin+0x74>
 80022b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022ba:	2301      	movs	r3, #1
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80022c2:	e7e2      	b.n	800228a <sin+0x16>
 80022c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80022c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022cc:	f000 f8f8 	bl	80024c0 <__kernel_cos>
 80022d0:	e7e5      	b.n	800229e <sin+0x2a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80022de:	f000 f9af 	bl	8002640 <__kernel_sin>
 80022e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80022e6:	e7da      	b.n	800229e <sin+0x2a>
 80022e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80022ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022f0:	f000 f8e6 	bl	80024c0 <__kernel_cos>
 80022f4:	e7f5      	b.n	80022e2 <sin+0x6e>
 80022f6:	bf00      	nop
 80022f8:	3fe921fb 	.word	0x3fe921fb
 80022fc:	7fefffff 	.word	0x7fefffff

08002300 <nan>:
 8002300:	2000      	movs	r0, #0
 8002302:	4901      	ldr	r1, [pc, #4]	; (8002308 <nan+0x8>)
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	7ff80000 	.word	0x7ff80000

0800230c <__ieee754_sqrt>:
 800230c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80024b0 <__ieee754_sqrt+0x1a4>
 8002310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002314:	ea3c 0c01 	bics.w	ip, ip, r1
 8002318:	460b      	mov	r3, r1
 800231a:	4606      	mov	r6, r0
 800231c:	460d      	mov	r5, r1
 800231e:	460a      	mov	r2, r1
 8002320:	4604      	mov	r4, r0
 8002322:	d10e      	bne.n	8002342 <__ieee754_sqrt+0x36>
 8002324:	4602      	mov	r2, r0
 8002326:	f7fe f983 	bl	8000630 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4630      	mov	r0, r6
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ffc7 	bl	80002c4 <__adddf3>
 8002336:	4606      	mov	r6, r0
 8002338:	460d      	mov	r5, r1
 800233a:	4630      	mov	r0, r6
 800233c:	4629      	mov	r1, r5
 800233e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002342:	2900      	cmp	r1, #0
 8002344:	dc0d      	bgt.n	8002362 <__ieee754_sqrt+0x56>
 8002346:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800234a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800234e:	d0f4      	beq.n	800233a <__ieee754_sqrt+0x2e>
 8002350:	b139      	cbz	r1, 8002362 <__ieee754_sqrt+0x56>
 8002352:	4602      	mov	r2, r0
 8002354:	f7fd ffb4 	bl	80002c0 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	f7fe fa92 	bl	8000884 <__aeabi_ddiv>
 8002360:	e7e9      	b.n	8002336 <__ieee754_sqrt+0x2a>
 8002362:	1512      	asrs	r2, r2, #20
 8002364:	f000 8089 	beq.w	800247a <__ieee754_sqrt+0x16e>
 8002368:	2500      	movs	r5, #0
 800236a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002376:	07d2      	lsls	r2, r2, #31
 8002378:	bf5c      	itt	pl
 800237a:	005b      	lslpl	r3, r3, #1
 800237c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8002380:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002384:	bf58      	it	pl
 8002386:	0064      	lslpl	r4, r4, #1
 8002388:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800238c:	0062      	lsls	r2, r4, #1
 800238e:	2016      	movs	r0, #22
 8002390:	4629      	mov	r1, r5
 8002392:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8002396:	1076      	asrs	r6, r6, #1
 8002398:	190f      	adds	r7, r1, r4
 800239a:	429f      	cmp	r7, r3
 800239c:	bfde      	ittt	le
 800239e:	1bdb      	suble	r3, r3, r7
 80023a0:	1939      	addle	r1, r7, r4
 80023a2:	192d      	addle	r5, r5, r4
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	3801      	subs	r0, #1
 80023a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80023ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80023b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80023b4:	d1f0      	bne.n	8002398 <__ieee754_sqrt+0x8c>
 80023b6:	4604      	mov	r4, r0
 80023b8:	2720      	movs	r7, #32
 80023ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80023be:	428b      	cmp	r3, r1
 80023c0:	eb0c 0e00 	add.w	lr, ip, r0
 80023c4:	dc02      	bgt.n	80023cc <__ieee754_sqrt+0xc0>
 80023c6:	d113      	bne.n	80023f0 <__ieee754_sqrt+0xe4>
 80023c8:	4596      	cmp	lr, r2
 80023ca:	d811      	bhi.n	80023f0 <__ieee754_sqrt+0xe4>
 80023cc:	f1be 0f00 	cmp.w	lr, #0
 80023d0:	eb0e 000c 	add.w	r0, lr, ip
 80023d4:	da56      	bge.n	8002484 <__ieee754_sqrt+0x178>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	db54      	blt.n	8002484 <__ieee754_sqrt+0x178>
 80023da:	f101 0801 	add.w	r8, r1, #1
 80023de:	1a5b      	subs	r3, r3, r1
 80023e0:	4641      	mov	r1, r8
 80023e2:	4596      	cmp	lr, r2
 80023e4:	bf88      	it	hi
 80023e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80023ea:	eba2 020e 	sub.w	r2, r2, lr
 80023ee:	4464      	add	r4, ip
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	3f01      	subs	r7, #1
 80023f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80023f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80023fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002400:	d1dd      	bne.n	80023be <__ieee754_sqrt+0xb2>
 8002402:	4313      	orrs	r3, r2
 8002404:	d01b      	beq.n	800243e <__ieee754_sqrt+0x132>
 8002406:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80024b4 <__ieee754_sqrt+0x1a8>
 800240a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80024b8 <__ieee754_sqrt+0x1ac>
 800240e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002412:	e9db 2300 	ldrd	r2, r3, [fp]
 8002416:	f7fd ff53 	bl	80002c0 <__aeabi_dsub>
 800241a:	e9da 8900 	ldrd	r8, r9, [sl]
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4640      	mov	r0, r8
 8002424:	4649      	mov	r1, r9
 8002426:	f7fe fb7f 	bl	8000b28 <__aeabi_dcmple>
 800242a:	b140      	cbz	r0, 800243e <__ieee754_sqrt+0x132>
 800242c:	e9da 0100 	ldrd	r0, r1, [sl]
 8002430:	e9db 2300 	ldrd	r2, r3, [fp]
 8002434:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002438:	d126      	bne.n	8002488 <__ieee754_sqrt+0x17c>
 800243a:	463c      	mov	r4, r7
 800243c:	3501      	adds	r5, #1
 800243e:	106b      	asrs	r3, r5, #1
 8002440:	0864      	lsrs	r4, r4, #1
 8002442:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002446:	07ea      	lsls	r2, r5, #31
 8002448:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800244c:	bf48      	it	mi
 800244e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8002452:	4620      	mov	r0, r4
 8002454:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8002458:	e76d      	b.n	8002336 <__ieee754_sqrt+0x2a>
 800245a:	0ae3      	lsrs	r3, r4, #11
 800245c:	3915      	subs	r1, #21
 800245e:	0564      	lsls	r4, r4, #21
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0fa      	beq.n	800245a <__ieee754_sqrt+0x14e>
 8002464:	02d8      	lsls	r0, r3, #11
 8002466:	d50a      	bpl.n	800247e <__ieee754_sqrt+0x172>
 8002468:	f1c2 0020 	rsb	r0, r2, #32
 800246c:	fa24 f000 	lsr.w	r0, r4, r0
 8002470:	1e55      	subs	r5, r2, #1
 8002472:	4094      	lsls	r4, r2
 8002474:	4303      	orrs	r3, r0
 8002476:	1b4a      	subs	r2, r1, r5
 8002478:	e776      	b.n	8002368 <__ieee754_sqrt+0x5c>
 800247a:	4611      	mov	r1, r2
 800247c:	e7f0      	b.n	8002460 <__ieee754_sqrt+0x154>
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	3201      	adds	r2, #1
 8002482:	e7ef      	b.n	8002464 <__ieee754_sqrt+0x158>
 8002484:	4688      	mov	r8, r1
 8002486:	e7aa      	b.n	80023de <__ieee754_sqrt+0xd2>
 8002488:	f7fd ff1c 	bl	80002c4 <__adddf3>
 800248c:	e9da 8900 	ldrd	r8, r9, [sl]
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4640      	mov	r0, r8
 8002496:	4649      	mov	r1, r9
 8002498:	f7fe fb3c 	bl	8000b14 <__aeabi_dcmplt>
 800249c:	b120      	cbz	r0, 80024a8 <__ieee754_sqrt+0x19c>
 800249e:	1ca1      	adds	r1, r4, #2
 80024a0:	bf08      	it	eq
 80024a2:	3501      	addeq	r5, #1
 80024a4:	3402      	adds	r4, #2
 80024a6:	e7ca      	b.n	800243e <__ieee754_sqrt+0x132>
 80024a8:	3401      	adds	r4, #1
 80024aa:	f024 0401 	bic.w	r4, r4, #1
 80024ae:	e7c6      	b.n	800243e <__ieee754_sqrt+0x132>
 80024b0:	7ff00000 	.word	0x7ff00000
 80024b4:	20000060 	.word	0x20000060
 80024b8:	20000068 	.word	0x20000068
 80024bc:	00000000 	.word	0x00000000

080024c0 <__kernel_cos>:
 80024c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80024c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80024cc:	4680      	mov	r8, r0
 80024ce:	460f      	mov	r7, r1
 80024d0:	e9cd 2300 	strd	r2, r3, [sp]
 80024d4:	da04      	bge.n	80024e0 <__kernel_cos+0x20>
 80024d6:	f7fe fb5b 	bl	8000b90 <__aeabi_d2iz>
 80024da:	2800      	cmp	r0, #0
 80024dc:	f000 8086 	beq.w	80025ec <__kernel_cos+0x12c>
 80024e0:	4642      	mov	r2, r8
 80024e2:	463b      	mov	r3, r7
 80024e4:	4640      	mov	r0, r8
 80024e6:	4639      	mov	r1, r7
 80024e8:	f7fe f8a2 	bl	8000630 <__aeabi_dmul>
 80024ec:	2200      	movs	r2, #0
 80024ee:	4b4e      	ldr	r3, [pc, #312]	; (8002628 <__kernel_cos+0x168>)
 80024f0:	4604      	mov	r4, r0
 80024f2:	460d      	mov	r5, r1
 80024f4:	f7fe f89c 	bl	8000630 <__aeabi_dmul>
 80024f8:	a33f      	add	r3, pc, #252	; (adr r3, 80025f8 <__kernel_cos+0x138>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	4682      	mov	sl, r0
 8002500:	468b      	mov	fp, r1
 8002502:	4620      	mov	r0, r4
 8002504:	4629      	mov	r1, r5
 8002506:	f7fe f893 	bl	8000630 <__aeabi_dmul>
 800250a:	a33d      	add	r3, pc, #244	; (adr r3, 8002600 <__kernel_cos+0x140>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fd fed8 	bl	80002c4 <__adddf3>
 8002514:	4622      	mov	r2, r4
 8002516:	462b      	mov	r3, r5
 8002518:	f7fe f88a 	bl	8000630 <__aeabi_dmul>
 800251c:	a33a      	add	r3, pc, #232	; (adr r3, 8002608 <__kernel_cos+0x148>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd fecd 	bl	80002c0 <__aeabi_dsub>
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	f7fe f881 	bl	8000630 <__aeabi_dmul>
 800252e:	a338      	add	r3, pc, #224	; (adr r3, 8002610 <__kernel_cos+0x150>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fd fec6 	bl	80002c4 <__adddf3>
 8002538:	4622      	mov	r2, r4
 800253a:	462b      	mov	r3, r5
 800253c:	f7fe f878 	bl	8000630 <__aeabi_dmul>
 8002540:	a335      	add	r3, pc, #212	; (adr r3, 8002618 <__kernel_cos+0x158>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fd febb 	bl	80002c0 <__aeabi_dsub>
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f7fe f86f 	bl	8000630 <__aeabi_dmul>
 8002552:	a333      	add	r3, pc, #204	; (adr r3, 8002620 <__kernel_cos+0x160>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fd feb4 	bl	80002c4 <__adddf3>
 800255c:	4622      	mov	r2, r4
 800255e:	462b      	mov	r3, r5
 8002560:	f7fe f866 	bl	8000630 <__aeabi_dmul>
 8002564:	4622      	mov	r2, r4
 8002566:	462b      	mov	r3, r5
 8002568:	f7fe f862 	bl	8000630 <__aeabi_dmul>
 800256c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4640      	mov	r0, r8
 8002576:	4639      	mov	r1, r7
 8002578:	f7fe f85a 	bl	8000630 <__aeabi_dmul>
 800257c:	460b      	mov	r3, r1
 800257e:	4602      	mov	r2, r0
 8002580:	4629      	mov	r1, r5
 8002582:	4620      	mov	r0, r4
 8002584:	f7fd fe9c 	bl	80002c0 <__aeabi_dsub>
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <__kernel_cos+0x16c>)
 800258a:	4680      	mov	r8, r0
 800258c:	429e      	cmp	r6, r3
 800258e:	4689      	mov	r9, r1
 8002590:	dc0e      	bgt.n	80025b0 <__kernel_cos+0xf0>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4650      	mov	r0, sl
 8002598:	4659      	mov	r1, fp
 800259a:	f7fd fe91 	bl	80002c0 <__aeabi_dsub>
 800259e:	4602      	mov	r2, r0
 80025a0:	2000      	movs	r0, #0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4922      	ldr	r1, [pc, #136]	; (8002630 <__kernel_cos+0x170>)
 80025a6:	f7fd fe8b 	bl	80002c0 <__aeabi_dsub>
 80025aa:	b003      	add	sp, #12
 80025ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b0:	2400      	movs	r4, #0
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <__kernel_cos+0x174>)
 80025b4:	4622      	mov	r2, r4
 80025b6:	429e      	cmp	r6, r3
 80025b8:	bfcc      	ite	gt
 80025ba:	4d1f      	ldrgt	r5, [pc, #124]	; (8002638 <__kernel_cos+0x178>)
 80025bc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80025c0:	462b      	mov	r3, r5
 80025c2:	2000      	movs	r0, #0
 80025c4:	491a      	ldr	r1, [pc, #104]	; (8002630 <__kernel_cos+0x170>)
 80025c6:	f7fd fe7b 	bl	80002c0 <__aeabi_dsub>
 80025ca:	4622      	mov	r2, r4
 80025cc:	4606      	mov	r6, r0
 80025ce:	460f      	mov	r7, r1
 80025d0:	462b      	mov	r3, r5
 80025d2:	4650      	mov	r0, sl
 80025d4:	4659      	mov	r1, fp
 80025d6:	f7fd fe73 	bl	80002c0 <__aeabi_dsub>
 80025da:	4642      	mov	r2, r8
 80025dc:	464b      	mov	r3, r9
 80025de:	f7fd fe6f 	bl	80002c0 <__aeabi_dsub>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4630      	mov	r0, r6
 80025e8:	4639      	mov	r1, r7
 80025ea:	e7dc      	b.n	80025a6 <__kernel_cos+0xe6>
 80025ec:	2000      	movs	r0, #0
 80025ee:	4910      	ldr	r1, [pc, #64]	; (8002630 <__kernel_cos+0x170>)
 80025f0:	e7db      	b.n	80025aa <__kernel_cos+0xea>
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	be8838d4 	.word	0xbe8838d4
 80025fc:	bda8fae9 	.word	0xbda8fae9
 8002600:	bdb4b1c4 	.word	0xbdb4b1c4
 8002604:	3e21ee9e 	.word	0x3e21ee9e
 8002608:	809c52ad 	.word	0x809c52ad
 800260c:	3e927e4f 	.word	0x3e927e4f
 8002610:	19cb1590 	.word	0x19cb1590
 8002614:	3efa01a0 	.word	0x3efa01a0
 8002618:	16c15177 	.word	0x16c15177
 800261c:	3f56c16c 	.word	0x3f56c16c
 8002620:	5555554c 	.word	0x5555554c
 8002624:	3fa55555 	.word	0x3fa55555
 8002628:	3fe00000 	.word	0x3fe00000
 800262c:	3fd33332 	.word	0x3fd33332
 8002630:	3ff00000 	.word	0x3ff00000
 8002634:	3fe90000 	.word	0x3fe90000
 8002638:	3fd20000 	.word	0x3fd20000
 800263c:	00000000 	.word	0x00000000

08002640 <__kernel_sin>:
 8002640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	e9cd 2300 	strd	r2, r3, [sp]
 800264a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800264e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8002652:	4682      	mov	sl, r0
 8002654:	460c      	mov	r4, r1
 8002656:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002658:	da03      	bge.n	8002662 <__kernel_sin+0x22>
 800265a:	f7fe fa99 	bl	8000b90 <__aeabi_d2iz>
 800265e:	2800      	cmp	r0, #0
 8002660:	d050      	beq.n	8002704 <__kernel_sin+0xc4>
 8002662:	4652      	mov	r2, sl
 8002664:	4623      	mov	r3, r4
 8002666:	4650      	mov	r0, sl
 8002668:	4621      	mov	r1, r4
 800266a:	f7fd ffe1 	bl	8000630 <__aeabi_dmul>
 800266e:	4606      	mov	r6, r0
 8002670:	460f      	mov	r7, r1
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4650      	mov	r0, sl
 8002678:	4621      	mov	r1, r4
 800267a:	f7fd ffd9 	bl	8000630 <__aeabi_dmul>
 800267e:	a33e      	add	r3, pc, #248	; (adr r3, 8002778 <__kernel_sin+0x138>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	4680      	mov	r8, r0
 8002686:	4689      	mov	r9, r1
 8002688:	4630      	mov	r0, r6
 800268a:	4639      	mov	r1, r7
 800268c:	f7fd ffd0 	bl	8000630 <__aeabi_dmul>
 8002690:	a33b      	add	r3, pc, #236	; (adr r3, 8002780 <__kernel_sin+0x140>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd fe13 	bl	80002c0 <__aeabi_dsub>
 800269a:	4632      	mov	r2, r6
 800269c:	463b      	mov	r3, r7
 800269e:	f7fd ffc7 	bl	8000630 <__aeabi_dmul>
 80026a2:	a339      	add	r3, pc, #228	; (adr r3, 8002788 <__kernel_sin+0x148>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd fe0c 	bl	80002c4 <__adddf3>
 80026ac:	4632      	mov	r2, r6
 80026ae:	463b      	mov	r3, r7
 80026b0:	f7fd ffbe 	bl	8000630 <__aeabi_dmul>
 80026b4:	a336      	add	r3, pc, #216	; (adr r3, 8002790 <__kernel_sin+0x150>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd fe01 	bl	80002c0 <__aeabi_dsub>
 80026be:	4632      	mov	r2, r6
 80026c0:	463b      	mov	r3, r7
 80026c2:	f7fd ffb5 	bl	8000630 <__aeabi_dmul>
 80026c6:	a334      	add	r3, pc, #208	; (adr r3, 8002798 <__kernel_sin+0x158>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fd fdfa 	bl	80002c4 <__adddf3>
 80026d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026d4:	b9dd      	cbnz	r5, 800270e <__kernel_sin+0xce>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4630      	mov	r0, r6
 80026dc:	4639      	mov	r1, r7
 80026de:	f7fd ffa7 	bl	8000630 <__aeabi_dmul>
 80026e2:	a32f      	add	r3, pc, #188	; (adr r3, 80027a0 <__kernel_sin+0x160>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd fdea 	bl	80002c0 <__aeabi_dsub>
 80026ec:	4642      	mov	r2, r8
 80026ee:	464b      	mov	r3, r9
 80026f0:	f7fd ff9e 	bl	8000630 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4650      	mov	r0, sl
 80026fa:	4621      	mov	r1, r4
 80026fc:	f7fd fde2 	bl	80002c4 <__adddf3>
 8002700:	4682      	mov	sl, r0
 8002702:	460c      	mov	r4, r1
 8002704:	4650      	mov	r0, sl
 8002706:	4621      	mov	r1, r4
 8002708:	b006      	add	sp, #24
 800270a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800270e:	2200      	movs	r2, #0
 8002710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <__kernel_sin+0x168>)
 8002716:	f7fd ff8b 	bl	8000630 <__aeabi_dmul>
 800271a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800271e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002722:	4640      	mov	r0, r8
 8002724:	4649      	mov	r1, r9
 8002726:	f7fd ff83 	bl	8000630 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002732:	f7fd fdc5 	bl	80002c0 <__aeabi_dsub>
 8002736:	4632      	mov	r2, r6
 8002738:	463b      	mov	r3, r7
 800273a:	f7fd ff79 	bl	8000630 <__aeabi_dmul>
 800273e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002742:	f7fd fdbd 	bl	80002c0 <__aeabi_dsub>
 8002746:	a316      	add	r3, pc, #88	; (adr r3, 80027a0 <__kernel_sin+0x160>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	4606      	mov	r6, r0
 800274e:	460f      	mov	r7, r1
 8002750:	4640      	mov	r0, r8
 8002752:	4649      	mov	r1, r9
 8002754:	f7fd ff6c 	bl	8000630 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4630      	mov	r0, r6
 800275e:	4639      	mov	r1, r7
 8002760:	f7fd fdb0 	bl	80002c4 <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4650      	mov	r0, sl
 800276a:	4621      	mov	r1, r4
 800276c:	f7fd fda8 	bl	80002c0 <__aeabi_dsub>
 8002770:	e7c6      	b.n	8002700 <__kernel_sin+0xc0>
 8002772:	bf00      	nop
 8002774:	f3af 8000 	nop.w
 8002778:	5acfd57c 	.word	0x5acfd57c
 800277c:	3de5d93a 	.word	0x3de5d93a
 8002780:	8a2b9ceb 	.word	0x8a2b9ceb
 8002784:	3e5ae5e6 	.word	0x3e5ae5e6
 8002788:	57b1fe7d 	.word	0x57b1fe7d
 800278c:	3ec71de3 	.word	0x3ec71de3
 8002790:	19c161d5 	.word	0x19c161d5
 8002794:	3f2a01a0 	.word	0x3f2a01a0
 8002798:	1110f8a6 	.word	0x1110f8a6
 800279c:	3f811111 	.word	0x3f811111
 80027a0:	55555549 	.word	0x55555549
 80027a4:	3fc55555 	.word	0x3fc55555
 80027a8:	3fe00000 	.word	0x3fe00000
 80027ac:	00000000 	.word	0x00000000

080027b0 <__ieee754_acos>:
 80027b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	4cb2      	ldr	r4, [pc, #712]	; (8002a80 <__ieee754_acos+0x2d0>)
 80027b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	4607      	mov	r7, r0
 80027be:	460e      	mov	r6, r1
 80027c0:	dd16      	ble.n	80027f0 <__ieee754_acos+0x40>
 80027c2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80027c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80027ca:	4303      	orrs	r3, r0
 80027cc:	d107      	bne.n	80027de <__ieee754_acos+0x2e>
 80027ce:	2900      	cmp	r1, #0
 80027d0:	f300 8202 	bgt.w	8002bd8 <__ieee754_acos+0x428>
 80027d4:	a190      	add	r1, pc, #576	; (adr r1, 8002a18 <__ieee754_acos+0x268>)
 80027d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	f7fd fd6d 	bl	80002c0 <__aeabi_dsub>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	f7fe f84b 	bl	8000884 <__aeabi_ddiv>
 80027ee:	e7f4      	b.n	80027da <__ieee754_acos+0x2a>
 80027f0:	4ca4      	ldr	r4, [pc, #656]	; (8002a84 <__ieee754_acos+0x2d4>)
 80027f2:	42a3      	cmp	r3, r4
 80027f4:	f300 8083 	bgt.w	80028fe <__ieee754_acos+0x14e>
 80027f8:	4aa3      	ldr	r2, [pc, #652]	; (8002a88 <__ieee754_acos+0x2d8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f340 81ef 	ble.w	8002bde <__ieee754_acos+0x42e>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	f7fd ff14 	bl	8000630 <__aeabi_dmul>
 8002808:	a385      	add	r3, pc, #532	; (adr r3, 8002a20 <__ieee754_acos+0x270>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	f7fd ff0d 	bl	8000630 <__aeabi_dmul>
 8002816:	a384      	add	r3, pc, #528	; (adr r3, 8002a28 <__ieee754_acos+0x278>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fd52 	bl	80002c4 <__adddf3>
 8002820:	4622      	mov	r2, r4
 8002822:	462b      	mov	r3, r5
 8002824:	f7fd ff04 	bl	8000630 <__aeabi_dmul>
 8002828:	a381      	add	r3, pc, #516	; (adr r3, 8002a30 <__ieee754_acos+0x280>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd fd47 	bl	80002c0 <__aeabi_dsub>
 8002832:	4622      	mov	r2, r4
 8002834:	462b      	mov	r3, r5
 8002836:	f7fd fefb 	bl	8000630 <__aeabi_dmul>
 800283a:	a37f      	add	r3, pc, #508	; (adr r3, 8002a38 <__ieee754_acos+0x288>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd fd40 	bl	80002c4 <__adddf3>
 8002844:	4622      	mov	r2, r4
 8002846:	462b      	mov	r3, r5
 8002848:	f7fd fef2 	bl	8000630 <__aeabi_dmul>
 800284c:	a37c      	add	r3, pc, #496	; (adr r3, 8002a40 <__ieee754_acos+0x290>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd fd35 	bl	80002c0 <__aeabi_dsub>
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	f7fd fee9 	bl	8000630 <__aeabi_dmul>
 800285e:	a37a      	add	r3, pc, #488	; (adr r3, 8002a48 <__ieee754_acos+0x298>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fd2e 	bl	80002c4 <__adddf3>
 8002868:	4622      	mov	r2, r4
 800286a:	462b      	mov	r3, r5
 800286c:	f7fd fee0 	bl	8000630 <__aeabi_dmul>
 8002870:	a377      	add	r3, pc, #476	; (adr r3, 8002a50 <__ieee754_acos+0x2a0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	4680      	mov	r8, r0
 8002878:	4689      	mov	r9, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f7fd fed7 	bl	8000630 <__aeabi_dmul>
 8002882:	a375      	add	r3, pc, #468	; (adr r3, 8002a58 <__ieee754_acos+0x2a8>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fd1a 	bl	80002c0 <__aeabi_dsub>
 800288c:	4622      	mov	r2, r4
 800288e:	462b      	mov	r3, r5
 8002890:	f7fd fece 	bl	8000630 <__aeabi_dmul>
 8002894:	a372      	add	r3, pc, #456	; (adr r3, 8002a60 <__ieee754_acos+0x2b0>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fd13 	bl	80002c4 <__adddf3>
 800289e:	4622      	mov	r2, r4
 80028a0:	462b      	mov	r3, r5
 80028a2:	f7fd fec5 	bl	8000630 <__aeabi_dmul>
 80028a6:	a370      	add	r3, pc, #448	; (adr r3, 8002a68 <__ieee754_acos+0x2b8>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f7fd fd08 	bl	80002c0 <__aeabi_dsub>
 80028b0:	4622      	mov	r2, r4
 80028b2:	462b      	mov	r3, r5
 80028b4:	f7fd febc 	bl	8000630 <__aeabi_dmul>
 80028b8:	2200      	movs	r2, #0
 80028ba:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <__ieee754_acos+0x2dc>)
 80028bc:	f7fd fd02 	bl	80002c4 <__adddf3>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd ffdc 	bl	8000884 <__aeabi_ddiv>
 80028cc:	463a      	mov	r2, r7
 80028ce:	4633      	mov	r3, r6
 80028d0:	f7fd feae 	bl	8000630 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	a165      	add	r1, pc, #404	; (adr r1, 8002a70 <__ieee754_acos+0x2c0>)
 80028da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028de:	f7fd fcef 	bl	80002c0 <__aeabi_dsub>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4638      	mov	r0, r7
 80028e8:	4631      	mov	r1, r6
 80028ea:	f7fd fce9 	bl	80002c0 <__aeabi_dsub>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	a161      	add	r1, pc, #388	; (adr r1, 8002a78 <__ieee754_acos+0x2c8>)
 80028f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f8:	f7fd fce2 	bl	80002c0 <__aeabi_dsub>
 80028fc:	e76d      	b.n	80027da <__ieee754_acos+0x2a>
 80028fe:	2900      	cmp	r1, #0
 8002900:	f280 80c8 	bge.w	8002a94 <__ieee754_acos+0x2e4>
 8002904:	2200      	movs	r2, #0
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <__ieee754_acos+0x2dc>)
 8002908:	f7fd fcdc 	bl	80002c4 <__adddf3>
 800290c:	2200      	movs	r2, #0
 800290e:	4b60      	ldr	r3, [pc, #384]	; (8002a90 <__ieee754_acos+0x2e0>)
 8002910:	f7fd fe8e 	bl	8000630 <__aeabi_dmul>
 8002914:	a342      	add	r3, pc, #264	; (adr r3, 8002a20 <__ieee754_acos+0x270>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	4604      	mov	r4, r0
 800291c:	460d      	mov	r5, r1
 800291e:	f7fd fe87 	bl	8000630 <__aeabi_dmul>
 8002922:	a341      	add	r3, pc, #260	; (adr r3, 8002a28 <__ieee754_acos+0x278>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fccc 	bl	80002c4 <__adddf3>
 800292c:	4622      	mov	r2, r4
 800292e:	462b      	mov	r3, r5
 8002930:	f7fd fe7e 	bl	8000630 <__aeabi_dmul>
 8002934:	a33e      	add	r3, pc, #248	; (adr r3, 8002a30 <__ieee754_acos+0x280>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fcc1 	bl	80002c0 <__aeabi_dsub>
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	f7fd fe75 	bl	8000630 <__aeabi_dmul>
 8002946:	a33c      	add	r3, pc, #240	; (adr r3, 8002a38 <__ieee754_acos+0x288>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fcba 	bl	80002c4 <__adddf3>
 8002950:	4622      	mov	r2, r4
 8002952:	462b      	mov	r3, r5
 8002954:	f7fd fe6c 	bl	8000630 <__aeabi_dmul>
 8002958:	a339      	add	r3, pc, #228	; (adr r3, 8002a40 <__ieee754_acos+0x290>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fcaf 	bl	80002c0 <__aeabi_dsub>
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	f7fd fe63 	bl	8000630 <__aeabi_dmul>
 800296a:	a337      	add	r3, pc, #220	; (adr r3, 8002a48 <__ieee754_acos+0x298>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fca8 	bl	80002c4 <__adddf3>
 8002974:	4622      	mov	r2, r4
 8002976:	462b      	mov	r3, r5
 8002978:	f7fd fe5a 	bl	8000630 <__aeabi_dmul>
 800297c:	4680      	mov	r8, r0
 800297e:	4689      	mov	r9, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7ff fcc2 	bl	800230c <__ieee754_sqrt>
 8002988:	a331      	add	r3, pc, #196	; (adr r3, 8002a50 <__ieee754_acos+0x2a0>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	4606      	mov	r6, r0
 8002990:	460f      	mov	r7, r1
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fe4b 	bl	8000630 <__aeabi_dmul>
 800299a:	a32f      	add	r3, pc, #188	; (adr r3, 8002a58 <__ieee754_acos+0x2a8>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fc8e 	bl	80002c0 <__aeabi_dsub>
 80029a4:	4622      	mov	r2, r4
 80029a6:	462b      	mov	r3, r5
 80029a8:	f7fd fe42 	bl	8000630 <__aeabi_dmul>
 80029ac:	a32c      	add	r3, pc, #176	; (adr r3, 8002a60 <__ieee754_acos+0x2b0>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fc87 	bl	80002c4 <__adddf3>
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	f7fd fe39 	bl	8000630 <__aeabi_dmul>
 80029be:	a32a      	add	r3, pc, #168	; (adr r3, 8002a68 <__ieee754_acos+0x2b8>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fc7c 	bl	80002c0 <__aeabi_dsub>
 80029c8:	4622      	mov	r2, r4
 80029ca:	462b      	mov	r3, r5
 80029cc:	f7fd fe30 	bl	8000630 <__aeabi_dmul>
 80029d0:	2200      	movs	r2, #0
 80029d2:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <__ieee754_acos+0x2dc>)
 80029d4:	f7fd fc76 	bl	80002c4 <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4640      	mov	r0, r8
 80029de:	4649      	mov	r1, r9
 80029e0:	f7fd ff50 	bl	8000884 <__aeabi_ddiv>
 80029e4:	4632      	mov	r2, r6
 80029e6:	463b      	mov	r3, r7
 80029e8:	f7fd fe22 	bl	8000630 <__aeabi_dmul>
 80029ec:	a320      	add	r3, pc, #128	; (adr r3, 8002a70 <__ieee754_acos+0x2c0>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fc65 	bl	80002c0 <__aeabi_dsub>
 80029f6:	4632      	mov	r2, r6
 80029f8:	463b      	mov	r3, r7
 80029fa:	f7fd fc63 	bl	80002c4 <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	f7fd fc5f 	bl	80002c4 <__adddf3>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	a103      	add	r1, pc, #12	; (adr r1, 8002a18 <__ieee754_acos+0x268>)
 8002a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a10:	e772      	b.n	80028f8 <__ieee754_acos+0x148>
 8002a12:	bf00      	nop
 8002a14:	f3af 8000 	nop.w
 8002a18:	54442d18 	.word	0x54442d18
 8002a1c:	400921fb 	.word	0x400921fb
 8002a20:	0dfdf709 	.word	0x0dfdf709
 8002a24:	3f023de1 	.word	0x3f023de1
 8002a28:	7501b288 	.word	0x7501b288
 8002a2c:	3f49efe0 	.word	0x3f49efe0
 8002a30:	b5688f3b 	.word	0xb5688f3b
 8002a34:	3fa48228 	.word	0x3fa48228
 8002a38:	0e884455 	.word	0x0e884455
 8002a3c:	3fc9c155 	.word	0x3fc9c155
 8002a40:	03eb6f7d 	.word	0x03eb6f7d
 8002a44:	3fd4d612 	.word	0x3fd4d612
 8002a48:	55555555 	.word	0x55555555
 8002a4c:	3fc55555 	.word	0x3fc55555
 8002a50:	b12e9282 	.word	0xb12e9282
 8002a54:	3fb3b8c5 	.word	0x3fb3b8c5
 8002a58:	1b8d0159 	.word	0x1b8d0159
 8002a5c:	3fe6066c 	.word	0x3fe6066c
 8002a60:	9c598ac8 	.word	0x9c598ac8
 8002a64:	40002ae5 	.word	0x40002ae5
 8002a68:	1c8a2d4b 	.word	0x1c8a2d4b
 8002a6c:	40033a27 	.word	0x40033a27
 8002a70:	33145c07 	.word	0x33145c07
 8002a74:	3c91a626 	.word	0x3c91a626
 8002a78:	54442d18 	.word	0x54442d18
 8002a7c:	3ff921fb 	.word	0x3ff921fb
 8002a80:	3fefffff 	.word	0x3fefffff
 8002a84:	3fdfffff 	.word	0x3fdfffff
 8002a88:	3c600000 	.word	0x3c600000
 8002a8c:	3ff00000 	.word	0x3ff00000
 8002a90:	3fe00000 	.word	0x3fe00000
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	2000      	movs	r0, #0
 8002a9a:	4969      	ldr	r1, [pc, #420]	; (8002c40 <__ieee754_acos+0x490>)
 8002a9c:	f7fd fc10 	bl	80002c0 <__aeabi_dsub>
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <__ieee754_acos+0x494>)
 8002aa4:	f7fd fdc4 	bl	8000630 <__aeabi_dmul>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	460d      	mov	r5, r1
 8002aac:	f7ff fc2e 	bl	800230c <__ieee754_sqrt>
 8002ab0:	a34d      	add	r3, pc, #308	; (adr r3, 8002be8 <__ieee754_acos+0x438>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	4689      	mov	r9, r1
 8002ab8:	4680      	mov	r8, r0
 8002aba:	4629      	mov	r1, r5
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7fd fdb7 	bl	8000630 <__aeabi_dmul>
 8002ac2:	a34b      	add	r3, pc, #300	; (adr r3, 8002bf0 <__ieee754_acos+0x440>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fbfc 	bl	80002c4 <__adddf3>
 8002acc:	4622      	mov	r2, r4
 8002ace:	462b      	mov	r3, r5
 8002ad0:	f7fd fdae 	bl	8000630 <__aeabi_dmul>
 8002ad4:	a348      	add	r3, pc, #288	; (adr r3, 8002bf8 <__ieee754_acos+0x448>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fbf1 	bl	80002c0 <__aeabi_dsub>
 8002ade:	4622      	mov	r2, r4
 8002ae0:	462b      	mov	r3, r5
 8002ae2:	f7fd fda5 	bl	8000630 <__aeabi_dmul>
 8002ae6:	a346      	add	r3, pc, #280	; (adr r3, 8002c00 <__ieee754_acos+0x450>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fbea 	bl	80002c4 <__adddf3>
 8002af0:	4622      	mov	r2, r4
 8002af2:	462b      	mov	r3, r5
 8002af4:	f7fd fd9c 	bl	8000630 <__aeabi_dmul>
 8002af8:	a343      	add	r3, pc, #268	; (adr r3, 8002c08 <__ieee754_acos+0x458>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f7fd fbdf 	bl	80002c0 <__aeabi_dsub>
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	f7fd fd93 	bl	8000630 <__aeabi_dmul>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <__ieee754_acos+0x460>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fbd8 	bl	80002c4 <__adddf3>
 8002b14:	4622      	mov	r2, r4
 8002b16:	462b      	mov	r3, r5
 8002b18:	f7fd fd8a 	bl	8000630 <__aeabi_dmul>
 8002b1c:	a33e      	add	r3, pc, #248	; (adr r3, 8002c18 <__ieee754_acos+0x468>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	4682      	mov	sl, r0
 8002b24:	468b      	mov	fp, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fd81 	bl	8000630 <__aeabi_dmul>
 8002b2e:	a33c      	add	r3, pc, #240	; (adr r3, 8002c20 <__ieee754_acos+0x470>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fbc4 	bl	80002c0 <__aeabi_dsub>
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	f7fd fd78 	bl	8000630 <__aeabi_dmul>
 8002b40:	a339      	add	r3, pc, #228	; (adr r3, 8002c28 <__ieee754_acos+0x478>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fbbd 	bl	80002c4 <__adddf3>
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	f7fd fd6f 	bl	8000630 <__aeabi_dmul>
 8002b52:	a337      	add	r3, pc, #220	; (adr r3, 8002c30 <__ieee754_acos+0x480>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fbb2 	bl	80002c0 <__aeabi_dsub>
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	462b      	mov	r3, r5
 8002b60:	f7fd fd66 	bl	8000630 <__aeabi_dmul>
 8002b64:	2200      	movs	r2, #0
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <__ieee754_acos+0x490>)
 8002b68:	f7fd fbac 	bl	80002c4 <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4650      	mov	r0, sl
 8002b72:	4659      	mov	r1, fp
 8002b74:	f7fd fe86 	bl	8000884 <__aeabi_ddiv>
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	f7fd fd58 	bl	8000630 <__aeabi_dmul>
 8002b80:	2600      	movs	r6, #0
 8002b82:	4682      	mov	sl, r0
 8002b84:	468b      	mov	fp, r1
 8002b86:	4632      	mov	r2, r6
 8002b88:	464b      	mov	r3, r9
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	f7fd fd4f 	bl	8000630 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fb91 	bl	80002c0 <__aeabi_dsub>
 8002b9e:	4632      	mov	r2, r6
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	460d      	mov	r5, r1
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	4649      	mov	r1, r9
 8002baa:	f7fd fb8b 	bl	80002c4 <__adddf3>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f7fd fe65 	bl	8000884 <__aeabi_ddiv>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4650      	mov	r0, sl
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	f7fd fb7f 	bl	80002c4 <__adddf3>
 8002bc6:	4632      	mov	r2, r6
 8002bc8:	464b      	mov	r3, r9
 8002bca:	f7fd fb7b 	bl	80002c4 <__adddf3>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	f7fd fb77 	bl	80002c4 <__adddf3>
 8002bd6:	e600      	b.n	80027da <__ieee754_acos+0x2a>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	e5fd      	b.n	80027da <__ieee754_acos+0x2a>
 8002bde:	a116      	add	r1, pc, #88	; (adr r1, 8002c38 <__ieee754_acos+0x488>)
 8002be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002be4:	e5f9      	b.n	80027da <__ieee754_acos+0x2a>
 8002be6:	bf00      	nop
 8002be8:	0dfdf709 	.word	0x0dfdf709
 8002bec:	3f023de1 	.word	0x3f023de1
 8002bf0:	7501b288 	.word	0x7501b288
 8002bf4:	3f49efe0 	.word	0x3f49efe0
 8002bf8:	b5688f3b 	.word	0xb5688f3b
 8002bfc:	3fa48228 	.word	0x3fa48228
 8002c00:	0e884455 	.word	0x0e884455
 8002c04:	3fc9c155 	.word	0x3fc9c155
 8002c08:	03eb6f7d 	.word	0x03eb6f7d
 8002c0c:	3fd4d612 	.word	0x3fd4d612
 8002c10:	55555555 	.word	0x55555555
 8002c14:	3fc55555 	.word	0x3fc55555
 8002c18:	b12e9282 	.word	0xb12e9282
 8002c1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8002c20:	1b8d0159 	.word	0x1b8d0159
 8002c24:	3fe6066c 	.word	0x3fe6066c
 8002c28:	9c598ac8 	.word	0x9c598ac8
 8002c2c:	40002ae5 	.word	0x40002ae5
 8002c30:	1c8a2d4b 	.word	0x1c8a2d4b
 8002c34:	40033a27 	.word	0x40033a27
 8002c38:	54442d18 	.word	0x54442d18
 8002c3c:	3ff921fb 	.word	0x3ff921fb
 8002c40:	3ff00000 	.word	0x3ff00000
 8002c44:	3fe00000 	.word	0x3fe00000

08002c48 <__ieee754_rem_pio2>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	4ac2      	ldr	r2, [pc, #776]	; (8002f58 <__ieee754_rem_pio2+0x310>)
 8002c50:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8002c54:	b08d      	sub	sp, #52	; 0x34
 8002c56:	4592      	cmp	sl, r2
 8002c58:	9104      	str	r1, [sp, #16]
 8002c5a:	dc07      	bgt.n	8002c6c <__ieee754_rem_pio2+0x24>
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e9c4 0100 	strd	r0, r1, [r4]
 8002c64:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002c68:	2500      	movs	r5, #0
 8002c6a:	e024      	b.n	8002cb6 <__ieee754_rem_pio2+0x6e>
 8002c6c:	4abb      	ldr	r2, [pc, #748]	; (8002f5c <__ieee754_rem_pio2+0x314>)
 8002c6e:	4592      	cmp	sl, r2
 8002c70:	dc72      	bgt.n	8002d58 <__ieee754_rem_pio2+0x110>
 8002c72:	9b04      	ldr	r3, [sp, #16]
 8002c74:	4dba      	ldr	r5, [pc, #744]	; (8002f60 <__ieee754_rem_pio2+0x318>)
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	a3a9      	add	r3, pc, #676	; (adr r3, 8002f20 <__ieee754_rem_pio2+0x2d8>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	dd36      	ble.n	8002cee <__ieee754_rem_pio2+0xa6>
 8002c80:	f7fd fb1e 	bl	80002c0 <__aeabi_dsub>
 8002c84:	45aa      	cmp	sl, r5
 8002c86:	4606      	mov	r6, r0
 8002c88:	460f      	mov	r7, r1
 8002c8a:	d018      	beq.n	8002cbe <__ieee754_rem_pio2+0x76>
 8002c8c:	a3a6      	add	r3, pc, #664	; (adr r3, 8002f28 <__ieee754_rem_pio2+0x2e0>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fb15 	bl	80002c0 <__aeabi_dsub>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	f7fd fb0d 	bl	80002c0 <__aeabi_dsub>
 8002ca6:	a3a0      	add	r3, pc, #640	; (adr r3, 8002f28 <__ieee754_rem_pio2+0x2e0>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fb08 	bl	80002c0 <__aeabi_dsub>
 8002cb0:	2501      	movs	r5, #1
 8002cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	b00d      	add	sp, #52	; 0x34
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbe:	a39c      	add	r3, pc, #624	; (adr r3, 8002f30 <__ieee754_rem_pio2+0x2e8>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fafc 	bl	80002c0 <__aeabi_dsub>
 8002cc8:	a39b      	add	r3, pc, #620	; (adr r3, 8002f38 <__ieee754_rem_pio2+0x2f0>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	4606      	mov	r6, r0
 8002cd0:	460f      	mov	r7, r1
 8002cd2:	f7fd faf5 	bl	80002c0 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4630      	mov	r0, r6
 8002cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8002ce0:	4639      	mov	r1, r7
 8002ce2:	f7fd faed 	bl	80002c0 <__aeabi_dsub>
 8002ce6:	a394      	add	r3, pc, #592	; (adr r3, 8002f38 <__ieee754_rem_pio2+0x2f0>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	e7de      	b.n	8002cac <__ieee754_rem_pio2+0x64>
 8002cee:	f7fd fae9 	bl	80002c4 <__adddf3>
 8002cf2:	45aa      	cmp	sl, r5
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	460f      	mov	r7, r1
 8002cf8:	d016      	beq.n	8002d28 <__ieee754_rem_pio2+0xe0>
 8002cfa:	a38b      	add	r3, pc, #556	; (adr r3, 8002f28 <__ieee754_rem_pio2+0x2e0>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fae0 	bl	80002c4 <__adddf3>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4630      	mov	r0, r6
 8002d0a:	e9c4 2300 	strd	r2, r3, [r4]
 8002d0e:	4639      	mov	r1, r7
 8002d10:	f7fd fad6 	bl	80002c0 <__aeabi_dsub>
 8002d14:	a384      	add	r3, pc, #528	; (adr r3, 8002f28 <__ieee754_rem_pio2+0x2e0>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fad3 	bl	80002c4 <__adddf3>
 8002d1e:	f04f 35ff 	mov.w	r5, #4294967295
 8002d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002d26:	e7c6      	b.n	8002cb6 <__ieee754_rem_pio2+0x6e>
 8002d28:	a381      	add	r3, pc, #516	; (adr r3, 8002f30 <__ieee754_rem_pio2+0x2e8>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fac9 	bl	80002c4 <__adddf3>
 8002d32:	a381      	add	r3, pc, #516	; (adr r3, 8002f38 <__ieee754_rem_pio2+0x2f0>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	4606      	mov	r6, r0
 8002d3a:	460f      	mov	r7, r1
 8002d3c:	f7fd fac2 	bl	80002c4 <__adddf3>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4630      	mov	r0, r6
 8002d46:	e9c4 2300 	strd	r2, r3, [r4]
 8002d4a:	4639      	mov	r1, r7
 8002d4c:	f7fd fab8 	bl	80002c0 <__aeabi_dsub>
 8002d50:	a379      	add	r3, pc, #484	; (adr r3, 8002f38 <__ieee754_rem_pio2+0x2f0>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	e7e0      	b.n	8002d1a <__ieee754_rem_pio2+0xd2>
 8002d58:	4a82      	ldr	r2, [pc, #520]	; (8002f64 <__ieee754_rem_pio2+0x31c>)
 8002d5a:	4592      	cmp	sl, r2
 8002d5c:	f300 80d4 	bgt.w	8002f08 <__ieee754_rem_pio2+0x2c0>
 8002d60:	f7ff fa84 	bl	800226c <fabs>
 8002d64:	a376      	add	r3, pc, #472	; (adr r3, 8002f40 <__ieee754_rem_pio2+0x2f8>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	460f      	mov	r7, r1
 8002d6e:	f7fd fc5f 	bl	8000630 <__aeabi_dmul>
 8002d72:	2200      	movs	r2, #0
 8002d74:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <__ieee754_rem_pio2+0x320>)
 8002d76:	f7fd faa5 	bl	80002c4 <__adddf3>
 8002d7a:	f7fd ff09 	bl	8000b90 <__aeabi_d2iz>
 8002d7e:	4605      	mov	r5, r0
 8002d80:	f7fd fbec 	bl	800055c <__aeabi_i2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d8c:	a364      	add	r3, pc, #400	; (adr r3, 8002f20 <__ieee754_rem_pio2+0x2d8>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc4d 	bl	8000630 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	4639      	mov	r1, r7
 8002d9e:	f7fd fa8f 	bl	80002c0 <__aeabi_dsub>
 8002da2:	a361      	add	r3, pc, #388	; (adr r3, 8002f28 <__ieee754_rem_pio2+0x2e0>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	4680      	mov	r8, r0
 8002daa:	4689      	mov	r9, r1
 8002dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002db0:	f7fd fc3e 	bl	8000630 <__aeabi_dmul>
 8002db4:	2d1f      	cmp	r5, #31
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
 8002dba:	dc0e      	bgt.n	8002dda <__ieee754_rem_pio2+0x192>
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <__ieee754_rem_pio2+0x324>)
 8002dbe:	1e6a      	subs	r2, r5, #1
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	4553      	cmp	r3, sl
 8002dc6:	d008      	beq.n	8002dda <__ieee754_rem_pio2+0x192>
 8002dc8:	4632      	mov	r2, r6
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4640      	mov	r0, r8
 8002dce:	4649      	mov	r1, r9
 8002dd0:	f7fd fa76 	bl	80002c0 <__aeabi_dsub>
 8002dd4:	e9c4 0100 	strd	r0, r1, [r4]
 8002dd8:	e012      	b.n	8002e00 <__ieee754_rem_pio2+0x1b8>
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4632      	mov	r2, r6
 8002dde:	4640      	mov	r0, r8
 8002de0:	4649      	mov	r1, r9
 8002de2:	f7fd fa6d 	bl	80002c0 <__aeabi_dsub>
 8002de6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002df0:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	dc1f      	bgt.n	8002e38 <__ieee754_rem_pio2+0x1f0>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	e9c4 2300 	strd	r2, r3, [r4]
 8002e00:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8002e04:	4640      	mov	r0, r8
 8002e06:	4653      	mov	r3, sl
 8002e08:	4649      	mov	r1, r9
 8002e0a:	f7fd fa59 	bl	80002c0 <__aeabi_dsub>
 8002e0e:	4632      	mov	r2, r6
 8002e10:	463b      	mov	r3, r7
 8002e12:	f7fd fa55 	bl	80002c0 <__aeabi_dsub>
 8002e16:	460b      	mov	r3, r1
 8002e18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002e1c:	9904      	ldr	r1, [sp, #16]
 8002e1e:	4602      	mov	r2, r0
 8002e20:	2900      	cmp	r1, #0
 8002e22:	f6bf af48 	bge.w	8002cb6 <__ieee754_rem_pio2+0x6e>
 8002e26:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8002e2a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8002e2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	60e3      	str	r3, [r4, #12]
 8002e34:	426d      	negs	r5, r5
 8002e36:	e73e      	b.n	8002cb6 <__ieee754_rem_pio2+0x6e>
 8002e38:	a33d      	add	r3, pc, #244	; (adr r3, 8002f30 <__ieee754_rem_pio2+0x2e8>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e42:	f7fd fbf5 	bl	8000630 <__aeabi_dmul>
 8002e46:	4606      	mov	r6, r0
 8002e48:	460f      	mov	r7, r1
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fa35 	bl	80002c0 <__aeabi_dsub>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4682      	mov	sl, r0
 8002e5c:	468b      	mov	fp, r1
 8002e5e:	4640      	mov	r0, r8
 8002e60:	4649      	mov	r1, r9
 8002e62:	f7fd fa2d 	bl	80002c0 <__aeabi_dsub>
 8002e66:	4632      	mov	r2, r6
 8002e68:	463b      	mov	r3, r7
 8002e6a:	f7fd fa29 	bl	80002c0 <__aeabi_dsub>
 8002e6e:	a332      	add	r3, pc, #200	; (adr r3, 8002f38 <__ieee754_rem_pio2+0x2f0>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	4606      	mov	r6, r0
 8002e76:	460f      	mov	r7, r1
 8002e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e7c:	f7fd fbd8 	bl	8000630 <__aeabi_dmul>
 8002e80:	4632      	mov	r2, r6
 8002e82:	463b      	mov	r3, r7
 8002e84:	f7fd fa1c 	bl	80002c0 <__aeabi_dsub>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	460f      	mov	r7, r1
 8002e90:	4650      	mov	r0, sl
 8002e92:	4659      	mov	r1, fp
 8002e94:	f7fd fa14 	bl	80002c0 <__aeabi_dsub>
 8002e98:	9a05      	ldr	r2, [sp, #20]
 8002e9a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b31      	cmp	r3, #49	; 0x31
 8002ea2:	dc06      	bgt.n	8002eb2 <__ieee754_rem_pio2+0x26a>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	46d0      	mov	r8, sl
 8002eaa:	46d9      	mov	r9, fp
 8002eac:	e9c4 2300 	strd	r2, r3, [r4]
 8002eb0:	e7a6      	b.n	8002e00 <__ieee754_rem_pio2+0x1b8>
 8002eb2:	a325      	add	r3, pc, #148	; (adr r3, 8002f48 <__ieee754_rem_pio2+0x300>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ebc:	f7fd fbb8 	bl	8000630 <__aeabi_dmul>
 8002ec0:	4606      	mov	r6, r0
 8002ec2:	460f      	mov	r7, r1
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4650      	mov	r0, sl
 8002eca:	4659      	mov	r1, fp
 8002ecc:	f7fd f9f8 	bl	80002c0 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4680      	mov	r8, r0
 8002ed6:	4689      	mov	r9, r1
 8002ed8:	4650      	mov	r0, sl
 8002eda:	4659      	mov	r1, fp
 8002edc:	f7fd f9f0 	bl	80002c0 <__aeabi_dsub>
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	f7fd f9ec 	bl	80002c0 <__aeabi_dsub>
 8002ee8:	a319      	add	r3, pc, #100	; (adr r3, 8002f50 <__ieee754_rem_pio2+0x308>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	4606      	mov	r6, r0
 8002ef0:	460f      	mov	r7, r1
 8002ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ef6:	f7fd fb9b 	bl	8000630 <__aeabi_dmul>
 8002efa:	4632      	mov	r2, r6
 8002efc:	463b      	mov	r3, r7
 8002efe:	f7fd f9df 	bl	80002c0 <__aeabi_dsub>
 8002f02:	4606      	mov	r6, r0
 8002f04:	460f      	mov	r7, r1
 8002f06:	e75f      	b.n	8002dc8 <__ieee754_rem_pio2+0x180>
 8002f08:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <__ieee754_rem_pio2+0x328>)
 8002f0a:	4592      	cmp	sl, r2
 8002f0c:	dd32      	ble.n	8002f74 <__ieee754_rem_pio2+0x32c>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	f7fd f9d5 	bl	80002c0 <__aeabi_dsub>
 8002f16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8002f1e:	e6a3      	b.n	8002c68 <__ieee754_rem_pio2+0x20>
 8002f20:	54400000 	.word	0x54400000
 8002f24:	3ff921fb 	.word	0x3ff921fb
 8002f28:	1a626331 	.word	0x1a626331
 8002f2c:	3dd0b461 	.word	0x3dd0b461
 8002f30:	1a600000 	.word	0x1a600000
 8002f34:	3dd0b461 	.word	0x3dd0b461
 8002f38:	2e037073 	.word	0x2e037073
 8002f3c:	3ba3198a 	.word	0x3ba3198a
 8002f40:	6dc9c883 	.word	0x6dc9c883
 8002f44:	3fe45f30 	.word	0x3fe45f30
 8002f48:	2e000000 	.word	0x2e000000
 8002f4c:	3ba3198a 	.word	0x3ba3198a
 8002f50:	252049c1 	.word	0x252049c1
 8002f54:	397b839a 	.word	0x397b839a
 8002f58:	3fe921fb 	.word	0x3fe921fb
 8002f5c:	4002d97b 	.word	0x4002d97b
 8002f60:	3ff921fb 	.word	0x3ff921fb
 8002f64:	413921fb 	.word	0x413921fb
 8002f68:	3fe00000 	.word	0x3fe00000
 8002f6c:	080038e4 	.word	0x080038e4
 8002f70:	7fefffff 	.word	0x7fefffff
 8002f74:	ea4f 552a 	mov.w	r5, sl, asr #20
 8002f78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002f7c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8002f80:	460f      	mov	r7, r1
 8002f82:	4606      	mov	r6, r0
 8002f84:	f7fd fe04 	bl	8000b90 <__aeabi_d2iz>
 8002f88:	f7fd fae8 	bl	800055c <__aeabi_i2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4630      	mov	r0, r6
 8002f92:	4639      	mov	r1, r7
 8002f94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f98:	f7fd f992 	bl	80002c0 <__aeabi_dsub>
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <__ieee754_rem_pio2+0x3e0>)
 8002fa0:	f7fd fb46 	bl	8000630 <__aeabi_dmul>
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	f7fd fdf2 	bl	8000b90 <__aeabi_d2iz>
 8002fac:	f7fd fad6 	bl	800055c <__aeabi_i2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002fbc:	f7fd f980 	bl	80002c0 <__aeabi_dsub>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <__ieee754_rem_pio2+0x3e0>)
 8002fc4:	f7fd fb34 	bl	8000630 <__aeabi_dmul>
 8002fc8:	f04f 0803 	mov.w	r8, #3
 8002fcc:	2600      	movs	r6, #0
 8002fce:	2700      	movs	r7, #0
 8002fd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002fd4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002fd8:	4632      	mov	r2, r6
 8002fda:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002fde:	463b      	mov	r3, r7
 8002fe0:	46c2      	mov	sl, r8
 8002fe2:	f108 38ff 	add.w	r8, r8, #4294967295
 8002fe6:	f7fd fd8b 	bl	8000b00 <__aeabi_dcmpeq>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d1f4      	bne.n	8002fd8 <__ieee754_rem_pio2+0x390>
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <__ieee754_rem_pio2+0x3e4>)
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	a806      	add	r0, sp, #24
 8002ffc:	4653      	mov	r3, sl
 8002ffe:	f000 f817 	bl	8003030 <__kernel_rem_pio2>
 8003002:	9b04      	ldr	r3, [sp, #16]
 8003004:	4605      	mov	r5, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	f6bf ae55 	bge.w	8002cb6 <__ieee754_rem_pio2+0x6e>
 800300c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003014:	e9c4 2300 	strd	r2, r3, [r4]
 8003018:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800301c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003020:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003024:	e706      	b.n	8002e34 <__ieee754_rem_pio2+0x1ec>
 8003026:	bf00      	nop
 8003028:	41700000 	.word	0x41700000
 800302c:	08003964 	.word	0x08003964

08003030 <__kernel_rem_pio2>:
 8003030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003034:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003038:	9308      	str	r3, [sp, #32]
 800303a:	9106      	str	r1, [sp, #24]
 800303c:	4bb6      	ldr	r3, [pc, #728]	; (8003318 <__kernel_rem_pio2+0x2e8>)
 800303e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003040:	f112 0f14 	cmn.w	r2, #20
 8003044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003048:	bfa8      	it	ge
 800304a:	1ed4      	subge	r4, r2, #3
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	9b08      	ldr	r3, [sp, #32]
 8003050:	bfb8      	it	lt
 8003052:	2400      	movlt	r4, #0
 8003054:	f103 33ff 	add.w	r3, r3, #4294967295
 8003058:	9307      	str	r3, [sp, #28]
 800305a:	bfa4      	itt	ge
 800305c:	2318      	movge	r3, #24
 800305e:	fb94 f4f3 	sdivge	r4, r4, r3
 8003062:	f06f 0317 	mvn.w	r3, #23
 8003066:	fb04 3303 	mla	r3, r4, r3, r3
 800306a:	eb03 0b02 	add.w	fp, r3, r2
 800306e:	9a07      	ldr	r2, [sp, #28]
 8003070:	9b02      	ldr	r3, [sp, #8]
 8003072:	1aa7      	subs	r7, r4, r2
 8003074:	eb03 0802 	add.w	r8, r3, r2
 8003078:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800307a:	2500      	movs	r5, #0
 800307c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003080:	2200      	movs	r2, #0
 8003082:	2300      	movs	r3, #0
 8003084:	9009      	str	r0, [sp, #36]	; 0x24
 8003086:	ae20      	add	r6, sp, #128	; 0x80
 8003088:	4545      	cmp	r5, r8
 800308a:	dd14      	ble.n	80030b6 <__kernel_rem_pio2+0x86>
 800308c:	f04f 0800 	mov.w	r8, #0
 8003090:	9a08      	ldr	r2, [sp, #32]
 8003092:	ab20      	add	r3, sp, #128	; 0x80
 8003094:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003098:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800309c:	9b02      	ldr	r3, [sp, #8]
 800309e:	4598      	cmp	r8, r3
 80030a0:	dc35      	bgt.n	800310e <__kernel_rem_pio2+0xde>
 80030a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	f1a3 0908 	sub.w	r9, r3, #8
 80030aa:	2300      	movs	r3, #0
 80030ac:	462f      	mov	r7, r5
 80030ae:	2600      	movs	r6, #0
 80030b0:	e9cd 2300 	strd	r2, r3, [sp]
 80030b4:	e01f      	b.n	80030f6 <__kernel_rem_pio2+0xc6>
 80030b6:	42ef      	cmn	r7, r5
 80030b8:	d40b      	bmi.n	80030d2 <__kernel_rem_pio2+0xa2>
 80030ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80030be:	e9cd 2300 	strd	r2, r3, [sp]
 80030c2:	f7fd fa4b 	bl	800055c <__aeabi_i2d>
 80030c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80030ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80030ce:	3501      	adds	r5, #1
 80030d0:	e7da      	b.n	8003088 <__kernel_rem_pio2+0x58>
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	e7f8      	b.n	80030ca <__kernel_rem_pio2+0x9a>
 80030d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030dc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80030e0:	f7fd faa6 	bl	8000630 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030ec:	f7fd f8ea 	bl	80002c4 <__adddf3>
 80030f0:	e9cd 0100 	strd	r0, r1, [sp]
 80030f4:	3601      	adds	r6, #1
 80030f6:	9b07      	ldr	r3, [sp, #28]
 80030f8:	3f08      	subs	r7, #8
 80030fa:	429e      	cmp	r6, r3
 80030fc:	ddec      	ble.n	80030d8 <__kernel_rem_pio2+0xa8>
 80030fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003102:	f108 0801 	add.w	r8, r8, #1
 8003106:	e8ea 2302 	strd	r2, r3, [sl], #8
 800310a:	3508      	adds	r5, #8
 800310c:	e7c6      	b.n	800309c <__kernel_rem_pio2+0x6c>
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	aa0c      	add	r2, sp, #48	; 0x30
 8003112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003116:	930b      	str	r3, [sp, #44]	; 0x2c
 8003118:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800311a:	9e02      	ldr	r6, [sp, #8]
 800311c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003120:	930a      	str	r3, [sp, #40]	; 0x28
 8003122:	ab98      	add	r3, sp, #608	; 0x260
 8003124:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003128:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800312c:	ab70      	add	r3, sp, #448	; 0x1c0
 800312e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8003132:	46d0      	mov	r8, sl
 8003134:	46b1      	mov	r9, r6
 8003136:	af0c      	add	r7, sp, #48	; 0x30
 8003138:	9700      	str	r7, [sp, #0]
 800313a:	f1b9 0f00 	cmp.w	r9, #0
 800313e:	f1a8 0808 	sub.w	r8, r8, #8
 8003142:	dc70      	bgt.n	8003226 <__kernel_rem_pio2+0x1f6>
 8003144:	465a      	mov	r2, fp
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f000 fab1 	bl	80036b0 <scalbn>
 800314e:	2200      	movs	r2, #0
 8003150:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	f7fd fa6a 	bl	8000630 <__aeabi_dmul>
 800315c:	f000 fb24 	bl	80037a8 <floor>
 8003160:	2200      	movs	r2, #0
 8003162:	4b6e      	ldr	r3, [pc, #440]	; (800331c <__kernel_rem_pio2+0x2ec>)
 8003164:	f7fd fa64 	bl	8000630 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4620      	mov	r0, r4
 800316e:	4629      	mov	r1, r5
 8003170:	f7fd f8a6 	bl	80002c0 <__aeabi_dsub>
 8003174:	460d      	mov	r5, r1
 8003176:	4604      	mov	r4, r0
 8003178:	f7fd fd0a 	bl	8000b90 <__aeabi_d2iz>
 800317c:	9004      	str	r0, [sp, #16]
 800317e:	f7fd f9ed 	bl	800055c <__aeabi_i2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd f899 	bl	80002c0 <__aeabi_dsub>
 800318e:	f1bb 0f00 	cmp.w	fp, #0
 8003192:	4680      	mov	r8, r0
 8003194:	4689      	mov	r9, r1
 8003196:	dd6f      	ble.n	8003278 <__kernel_rem_pio2+0x248>
 8003198:	1e71      	subs	r1, r6, #1
 800319a:	ab0c      	add	r3, sp, #48	; 0x30
 800319c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031a0:	9c04      	ldr	r4, [sp, #16]
 80031a2:	f1cb 0018 	rsb	r0, fp, #24
 80031a6:	fa43 f200 	asr.w	r2, r3, r0
 80031aa:	4414      	add	r4, r2
 80031ac:	4082      	lsls	r2, r0
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	aa0c      	add	r2, sp, #48	; 0x30
 80031b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80031b6:	f1cb 0217 	rsb	r2, fp, #23
 80031ba:	9404      	str	r4, [sp, #16]
 80031bc:	4113      	asrs	r3, r2
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	9b00      	ldr	r3, [sp, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dd66      	ble.n	8003294 <__kernel_rem_pio2+0x264>
 80031c6:	2200      	movs	r2, #0
 80031c8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80031cc:	4614      	mov	r4, r2
 80031ce:	9b04      	ldr	r3, [sp, #16]
 80031d0:	3301      	adds	r3, #1
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	4296      	cmp	r6, r2
 80031d6:	f300 80ad 	bgt.w	8003334 <__kernel_rem_pio2+0x304>
 80031da:	f1bb 0f00 	cmp.w	fp, #0
 80031de:	dd07      	ble.n	80031f0 <__kernel_rem_pio2+0x1c0>
 80031e0:	f1bb 0f01 	cmp.w	fp, #1
 80031e4:	f000 80b5 	beq.w	8003352 <__kernel_rem_pio2+0x322>
 80031e8:	f1bb 0f02 	cmp.w	fp, #2
 80031ec:	f000 80bb 	beq.w	8003366 <__kernel_rem_pio2+0x336>
 80031f0:	9b00      	ldr	r3, [sp, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d14e      	bne.n	8003294 <__kernel_rem_pio2+0x264>
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	2000      	movs	r0, #0
 80031fc:	4948      	ldr	r1, [pc, #288]	; (8003320 <__kernel_rem_pio2+0x2f0>)
 80031fe:	f7fd f85f 	bl	80002c0 <__aeabi_dsub>
 8003202:	4680      	mov	r8, r0
 8003204:	4689      	mov	r9, r1
 8003206:	2c00      	cmp	r4, #0
 8003208:	d044      	beq.n	8003294 <__kernel_rem_pio2+0x264>
 800320a:	465a      	mov	r2, fp
 800320c:	2000      	movs	r0, #0
 800320e:	4944      	ldr	r1, [pc, #272]	; (8003320 <__kernel_rem_pio2+0x2f0>)
 8003210:	f000 fa4e 	bl	80036b0 <scalbn>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fd f850 	bl	80002c0 <__aeabi_dsub>
 8003220:	4680      	mov	r8, r0
 8003222:	4689      	mov	r9, r1
 8003224:	e036      	b.n	8003294 <__kernel_rem_pio2+0x264>
 8003226:	2200      	movs	r2, #0
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <__kernel_rem_pio2+0x2f4>)
 800322a:	4620      	mov	r0, r4
 800322c:	4629      	mov	r1, r5
 800322e:	f7fd f9ff 	bl	8000630 <__aeabi_dmul>
 8003232:	f7fd fcad 	bl	8000b90 <__aeabi_d2iz>
 8003236:	f7fd f991 	bl	800055c <__aeabi_i2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003242:	2200      	movs	r2, #0
 8003244:	4b38      	ldr	r3, [pc, #224]	; (8003328 <__kernel_rem_pio2+0x2f8>)
 8003246:	f7fd f9f3 	bl	8000630 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	f7fd f835 	bl	80002c0 <__aeabi_dsub>
 8003256:	f7fd fc9b 	bl	8000b90 <__aeabi_d2iz>
 800325a:	9b00      	ldr	r3, [sp, #0]
 800325c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003260:	f843 0b04 	str.w	r0, [r3], #4
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800326a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800326e:	f7fd f829 	bl	80002c4 <__adddf3>
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
 8003276:	e760      	b.n	800313a <__kernel_rem_pio2+0x10a>
 8003278:	d105      	bne.n	8003286 <__kernel_rem_pio2+0x256>
 800327a:	1e73      	subs	r3, r6, #1
 800327c:	aa0c      	add	r2, sp, #48	; 0x30
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	15db      	asrs	r3, r3, #23
 8003284:	e79b      	b.n	80031be <__kernel_rem_pio2+0x18e>
 8003286:	2200      	movs	r2, #0
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <__kernel_rem_pio2+0x2fc>)
 800328a:	f7fd fc57 	bl	8000b3c <__aeabi_dcmpge>
 800328e:	2800      	cmp	r0, #0
 8003290:	d13e      	bne.n	8003310 <__kernel_rem_pio2+0x2e0>
 8003292:	9000      	str	r0, [sp, #0]
 8003294:	2200      	movs	r2, #0
 8003296:	2300      	movs	r3, #0
 8003298:	4640      	mov	r0, r8
 800329a:	4649      	mov	r1, r9
 800329c:	f7fd fc30 	bl	8000b00 <__aeabi_dcmpeq>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	f000 80b2 	beq.w	800340a <__kernel_rem_pio2+0x3da>
 80032a6:	1e74      	subs	r4, r6, #1
 80032a8:	4623      	mov	r3, r4
 80032aa:	2200      	movs	r2, #0
 80032ac:	9902      	ldr	r1, [sp, #8]
 80032ae:	428b      	cmp	r3, r1
 80032b0:	da60      	bge.n	8003374 <__kernel_rem_pio2+0x344>
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d075      	beq.n	80033a2 <__kernel_rem_pio2+0x372>
 80032b6:	ab0c      	add	r3, sp, #48	; 0x30
 80032b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80032bc:	f1ab 0b18 	sub.w	fp, fp, #24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a0 	beq.w	8003406 <__kernel_rem_pio2+0x3d6>
 80032c6:	465a      	mov	r2, fp
 80032c8:	2000      	movs	r0, #0
 80032ca:	4915      	ldr	r1, [pc, #84]	; (8003320 <__kernel_rem_pio2+0x2f0>)
 80032cc:	f000 f9f0 	bl	80036b0 <scalbn>
 80032d0:	46a2      	mov	sl, r4
 80032d2:	4606      	mov	r6, r0
 80032d4:	460f      	mov	r7, r1
 80032d6:	f04f 0800 	mov.w	r8, #0
 80032da:	ab70      	add	r3, sp, #448	; 0x1c0
 80032dc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003324 <__kernel_rem_pio2+0x2f4>
 80032e0:	00e5      	lsls	r5, r4, #3
 80032e2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80032e6:	f1ba 0f00 	cmp.w	sl, #0
 80032ea:	f280 80c4 	bge.w	8003476 <__kernel_rem_pio2+0x446>
 80032ee:	4626      	mov	r6, r4
 80032f0:	2e00      	cmp	r6, #0
 80032f2:	f2c0 80f6 	blt.w	80034e2 <__kernel_rem_pio2+0x4b2>
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <__kernel_rem_pio2+0x300>)
 80032f8:	f04f 0a00 	mov.w	sl, #0
 80032fc:	9307      	str	r3, [sp, #28]
 80032fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8003300:	f04f 0b00 	mov.w	fp, #0
 8003304:	f04f 0800 	mov.w	r8, #0
 8003308:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800330c:	1ba7      	subs	r7, r4, r6
 800330e:	e0dc      	b.n	80034ca <__kernel_rem_pio2+0x49a>
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	e757      	b.n	80031c6 <__kernel_rem_pio2+0x196>
 8003316:	bf00      	nop
 8003318:	08003ab0 	.word	0x08003ab0
 800331c:	40200000 	.word	0x40200000
 8003320:	3ff00000 	.word	0x3ff00000
 8003324:	3e700000 	.word	0x3e700000
 8003328:	41700000 	.word	0x41700000
 800332c:	3fe00000 	.word	0x3fe00000
 8003330:	08003a70 	.word	0x08003a70
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b944      	cbnz	r4, 800334a <__kernel_rem_pio2+0x31a>
 8003338:	b11b      	cbz	r3, 8003342 <__kernel_rem_pio2+0x312>
 800333a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	461c      	mov	r4, r3
 8003344:	3201      	adds	r2, #1
 8003346:	3704      	adds	r7, #4
 8003348:	e744      	b.n	80031d4 <__kernel_rem_pio2+0x1a4>
 800334a:	1acb      	subs	r3, r1, r3
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4623      	mov	r3, r4
 8003350:	e7f7      	b.n	8003342 <__kernel_rem_pio2+0x312>
 8003352:	1e72      	subs	r2, r6, #1
 8003354:	ab0c      	add	r3, sp, #48	; 0x30
 8003356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800335e:	a90c      	add	r1, sp, #48	; 0x30
 8003360:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003364:	e744      	b.n	80031f0 <__kernel_rem_pio2+0x1c0>
 8003366:	1e72      	subs	r2, r6, #1
 8003368:	ab0c      	add	r3, sp, #48	; 0x30
 800336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003372:	e7f4      	b.n	800335e <__kernel_rem_pio2+0x32e>
 8003374:	a90c      	add	r1, sp, #48	; 0x30
 8003376:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800337a:	3b01      	subs	r3, #1
 800337c:	430a      	orrs	r2, r1
 800337e:	e795      	b.n	80032ac <__kernel_rem_pio2+0x27c>
 8003380:	3301      	adds	r3, #1
 8003382:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003386:	2900      	cmp	r1, #0
 8003388:	d0fa      	beq.n	8003380 <__kernel_rem_pio2+0x350>
 800338a:	9a08      	ldr	r2, [sp, #32]
 800338c:	a920      	add	r1, sp, #128	; 0x80
 800338e:	18b2      	adds	r2, r6, r2
 8003390:	f106 0801 	add.w	r8, r6, #1
 8003394:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003398:	18f4      	adds	r4, r6, r3
 800339a:	4544      	cmp	r4, r8
 800339c:	da04      	bge.n	80033a8 <__kernel_rem_pio2+0x378>
 800339e:	4626      	mov	r6, r4
 80033a0:	e6bf      	b.n	8003122 <__kernel_rem_pio2+0xf2>
 80033a2:	2301      	movs	r3, #1
 80033a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033a6:	e7ec      	b.n	8003382 <__kernel_rem_pio2+0x352>
 80033a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033aa:	f04f 0900 	mov.w	r9, #0
 80033ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80033b2:	f7fd f8d3 	bl	800055c <__aeabi_i2d>
 80033b6:	2600      	movs	r6, #0
 80033b8:	2700      	movs	r7, #0
 80033ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033bc:	e9c5 0100 	strd	r0, r1, [r5]
 80033c0:	3b08      	subs	r3, #8
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	9504      	str	r5, [sp, #16]
 80033c6:	9b07      	ldr	r3, [sp, #28]
 80033c8:	4599      	cmp	r9, r3
 80033ca:	dd05      	ble.n	80033d8 <__kernel_rem_pio2+0x3a8>
 80033cc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80033d0:	f108 0801 	add.w	r8, r8, #1
 80033d4:	3508      	adds	r5, #8
 80033d6:	e7e0      	b.n	800339a <__kernel_rem_pio2+0x36a>
 80033d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80033dc:	9900      	ldr	r1, [sp, #0]
 80033de:	f109 0901 	add.w	r9, r9, #1
 80033e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80033e6:	9100      	str	r1, [sp, #0]
 80033e8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80033ec:	f8cd c010 	str.w	ip, [sp, #16]
 80033f0:	f7fd f91e 	bl	8000630 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4630      	mov	r0, r6
 80033fa:	4639      	mov	r1, r7
 80033fc:	f7fc ff62 	bl	80002c4 <__adddf3>
 8003400:	4606      	mov	r6, r0
 8003402:	460f      	mov	r7, r1
 8003404:	e7df      	b.n	80033c6 <__kernel_rem_pio2+0x396>
 8003406:	3c01      	subs	r4, #1
 8003408:	e755      	b.n	80032b6 <__kernel_rem_pio2+0x286>
 800340a:	f1cb 0200 	rsb	r2, fp, #0
 800340e:	4640      	mov	r0, r8
 8003410:	4649      	mov	r1, r9
 8003412:	f000 f94d 	bl	80036b0 <scalbn>
 8003416:	2200      	movs	r2, #0
 8003418:	4ba3      	ldr	r3, [pc, #652]	; (80036a8 <__kernel_rem_pio2+0x678>)
 800341a:	4604      	mov	r4, r0
 800341c:	460d      	mov	r5, r1
 800341e:	f7fd fb8d 	bl	8000b3c <__aeabi_dcmpge>
 8003422:	b1f8      	cbz	r0, 8003464 <__kernel_rem_pio2+0x434>
 8003424:	2200      	movs	r2, #0
 8003426:	4ba1      	ldr	r3, [pc, #644]	; (80036ac <__kernel_rem_pio2+0x67c>)
 8003428:	4620      	mov	r0, r4
 800342a:	4629      	mov	r1, r5
 800342c:	f7fd f900 	bl	8000630 <__aeabi_dmul>
 8003430:	f7fd fbae 	bl	8000b90 <__aeabi_d2iz>
 8003434:	4607      	mov	r7, r0
 8003436:	f7fd f891 	bl	800055c <__aeabi_i2d>
 800343a:	2200      	movs	r2, #0
 800343c:	4b9a      	ldr	r3, [pc, #616]	; (80036a8 <__kernel_rem_pio2+0x678>)
 800343e:	f7fd f8f7 	bl	8000630 <__aeabi_dmul>
 8003442:	460b      	mov	r3, r1
 8003444:	4602      	mov	r2, r0
 8003446:	4629      	mov	r1, r5
 8003448:	4620      	mov	r0, r4
 800344a:	f7fc ff39 	bl	80002c0 <__aeabi_dsub>
 800344e:	f7fd fb9f 	bl	8000b90 <__aeabi_d2iz>
 8003452:	1c74      	adds	r4, r6, #1
 8003454:	ab0c      	add	r3, sp, #48	; 0x30
 8003456:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800345a:	f10b 0b18 	add.w	fp, fp, #24
 800345e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8003462:	e730      	b.n	80032c6 <__kernel_rem_pio2+0x296>
 8003464:	4620      	mov	r0, r4
 8003466:	4629      	mov	r1, r5
 8003468:	f7fd fb92 	bl	8000b90 <__aeabi_d2iz>
 800346c:	ab0c      	add	r3, sp, #48	; 0x30
 800346e:	4634      	mov	r4, r6
 8003470:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003474:	e727      	b.n	80032c6 <__kernel_rem_pio2+0x296>
 8003476:	ab0c      	add	r3, sp, #48	; 0x30
 8003478:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800347c:	f7fd f86e 	bl	800055c <__aeabi_i2d>
 8003480:	4632      	mov	r2, r6
 8003482:	463b      	mov	r3, r7
 8003484:	f7fd f8d4 	bl	8000630 <__aeabi_dmul>
 8003488:	4642      	mov	r2, r8
 800348a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800348e:	464b      	mov	r3, r9
 8003490:	4630      	mov	r0, r6
 8003492:	4639      	mov	r1, r7
 8003494:	f7fd f8cc 	bl	8000630 <__aeabi_dmul>
 8003498:	f10a 3aff 	add.w	sl, sl, #4294967295
 800349c:	4606      	mov	r6, r0
 800349e:	460f      	mov	r7, r1
 80034a0:	e721      	b.n	80032e6 <__kernel_rem_pio2+0x2b6>
 80034a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80034a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80034aa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80034ae:	f8cd c01c 	str.w	ip, [sp, #28]
 80034b2:	f7fd f8bd 	bl	8000630 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4650      	mov	r0, sl
 80034bc:	4659      	mov	r1, fp
 80034be:	f7fc ff01 	bl	80002c4 <__adddf3>
 80034c2:	4682      	mov	sl, r0
 80034c4:	468b      	mov	fp, r1
 80034c6:	f108 0801 	add.w	r8, r8, #1
 80034ca:	9b02      	ldr	r3, [sp, #8]
 80034cc:	4598      	cmp	r8, r3
 80034ce:	dc01      	bgt.n	80034d4 <__kernel_rem_pio2+0x4a4>
 80034d0:	45b8      	cmp	r8, r7
 80034d2:	dde6      	ble.n	80034a2 <__kernel_rem_pio2+0x472>
 80034d4:	ab48      	add	r3, sp, #288	; 0x120
 80034d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80034da:	e9c7 ab00 	strd	sl, fp, [r7]
 80034de:	3e01      	subs	r6, #1
 80034e0:	e706      	b.n	80032f0 <__kernel_rem_pio2+0x2c0>
 80034e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	dc09      	bgt.n	80034fc <__kernel_rem_pio2+0x4cc>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc32      	bgt.n	8003552 <__kernel_rem_pio2+0x522>
 80034ec:	d058      	beq.n	80035a0 <__kernel_rem_pio2+0x570>
 80034ee:	9b04      	ldr	r3, [sp, #16]
 80034f0:	f003 0007 	and.w	r0, r3, #7
 80034f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d1f5      	bne.n	80034ee <__kernel_rem_pio2+0x4be>
 8003502:	ab48      	add	r3, sp, #288	; 0x120
 8003504:	441d      	add	r5, r3
 8003506:	46aa      	mov	sl, r5
 8003508:	46a3      	mov	fp, r4
 800350a:	f1bb 0f00 	cmp.w	fp, #0
 800350e:	dc74      	bgt.n	80035fa <__kernel_rem_pio2+0x5ca>
 8003510:	46aa      	mov	sl, r5
 8003512:	46a3      	mov	fp, r4
 8003514:	f1bb 0f01 	cmp.w	fp, #1
 8003518:	f300 808e 	bgt.w	8003638 <__kernel_rem_pio2+0x608>
 800351c:	2700      	movs	r7, #0
 800351e:	463e      	mov	r6, r7
 8003520:	2c01      	cmp	r4, #1
 8003522:	f300 80a8 	bgt.w	8003676 <__kernel_rem_pio2+0x646>
 8003526:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800352a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800352e:	9b00      	ldr	r3, [sp, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 80aa 	bne.w	800368a <__kernel_rem_pio2+0x65a>
 8003536:	4603      	mov	r3, r0
 8003538:	462a      	mov	r2, r5
 800353a:	9806      	ldr	r0, [sp, #24]
 800353c:	e9c0 2300 	strd	r2, r3, [r0]
 8003540:	4622      	mov	r2, r4
 8003542:	460b      	mov	r3, r1
 8003544:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003548:	463a      	mov	r2, r7
 800354a:	4633      	mov	r3, r6
 800354c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003550:	e7cd      	b.n	80034ee <__kernel_rem_pio2+0x4be>
 8003552:	2000      	movs	r0, #0
 8003554:	46a0      	mov	r8, r4
 8003556:	4601      	mov	r1, r0
 8003558:	ab48      	add	r3, sp, #288	; 0x120
 800355a:	441d      	add	r5, r3
 800355c:	f1b8 0f00 	cmp.w	r8, #0
 8003560:	da38      	bge.n	80035d4 <__kernel_rem_pio2+0x5a4>
 8003562:	9b00      	ldr	r3, [sp, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <__kernel_rem_pio2+0x5b2>
 8003568:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800356c:	4602      	mov	r2, r0
 800356e:	462b      	mov	r3, r5
 8003570:	9d06      	ldr	r5, [sp, #24]
 8003572:	2601      	movs	r6, #1
 8003574:	e9c5 2300 	strd	r2, r3, [r5]
 8003578:	460b      	mov	r3, r1
 800357a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800357e:	f7fc fe9f 	bl	80002c0 <__aeabi_dsub>
 8003582:	4684      	mov	ip, r0
 8003584:	460f      	mov	r7, r1
 8003586:	ad48      	add	r5, sp, #288	; 0x120
 8003588:	42b4      	cmp	r4, r6
 800358a:	da2c      	bge.n	80035e6 <__kernel_rem_pio2+0x5b6>
 800358c:	9b00      	ldr	r3, [sp, #0]
 800358e:	b10b      	cbz	r3, 8003594 <__kernel_rem_pio2+0x564>
 8003590:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003594:	4662      	mov	r2, ip
 8003596:	463b      	mov	r3, r7
 8003598:	9906      	ldr	r1, [sp, #24]
 800359a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800359e:	e7a6      	b.n	80034ee <__kernel_rem_pio2+0x4be>
 80035a0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80035a2:	ab48      	add	r3, sp, #288	; 0x120
 80035a4:	4637      	mov	r7, r6
 80035a6:	441d      	add	r5, r3
 80035a8:	2c00      	cmp	r4, #0
 80035aa:	da09      	bge.n	80035c0 <__kernel_rem_pio2+0x590>
 80035ac:	9b00      	ldr	r3, [sp, #0]
 80035ae:	b10b      	cbz	r3, 80035b4 <__kernel_rem_pio2+0x584>
 80035b0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80035b4:	4632      	mov	r2, r6
 80035b6:	463b      	mov	r3, r7
 80035b8:	9906      	ldr	r1, [sp, #24]
 80035ba:	e9c1 2300 	strd	r2, r3, [r1]
 80035be:	e796      	b.n	80034ee <__kernel_rem_pio2+0x4be>
 80035c0:	4630      	mov	r0, r6
 80035c2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80035c6:	4639      	mov	r1, r7
 80035c8:	f7fc fe7c 	bl	80002c4 <__adddf3>
 80035cc:	3c01      	subs	r4, #1
 80035ce:	4606      	mov	r6, r0
 80035d0:	460f      	mov	r7, r1
 80035d2:	e7e9      	b.n	80035a8 <__kernel_rem_pio2+0x578>
 80035d4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80035d8:	f7fc fe74 	bl	80002c4 <__adddf3>
 80035dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80035e0:	e7bc      	b.n	800355c <__kernel_rem_pio2+0x52c>
 80035e2:	460d      	mov	r5, r1
 80035e4:	e7c2      	b.n	800356c <__kernel_rem_pio2+0x53c>
 80035e6:	4660      	mov	r0, ip
 80035e8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80035ec:	4639      	mov	r1, r7
 80035ee:	f7fc fe69 	bl	80002c4 <__adddf3>
 80035f2:	3601      	adds	r6, #1
 80035f4:	4684      	mov	ip, r0
 80035f6:	460f      	mov	r7, r1
 80035f8:	e7c6      	b.n	8003588 <__kernel_rem_pio2+0x558>
 80035fa:	e9da 6700 	ldrd	r6, r7, [sl]
 80035fe:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003602:	4632      	mov	r2, r6
 8003604:	463b      	mov	r3, r7
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	f7fc fe5b 	bl	80002c4 <__adddf3>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003616:	4640      	mov	r0, r8
 8003618:	4649      	mov	r1, r9
 800361a:	f7fc fe51 	bl	80002c0 <__aeabi_dsub>
 800361e:	4632      	mov	r2, r6
 8003620:	463b      	mov	r3, r7
 8003622:	f7fc fe4f 	bl	80002c4 <__adddf3>
 8003626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800362a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800362e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003632:	e9ca 2300 	strd	r2, r3, [sl]
 8003636:	e768      	b.n	800350a <__kernel_rem_pio2+0x4da>
 8003638:	e9da 8900 	ldrd	r8, r9, [sl]
 800363c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	4630      	mov	r0, r6
 8003646:	4639      	mov	r1, r7
 8003648:	f7fc fe3c 	bl	80002c4 <__adddf3>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003654:	4630      	mov	r0, r6
 8003656:	4639      	mov	r1, r7
 8003658:	f7fc fe32 	bl	80002c0 <__aeabi_dsub>
 800365c:	4642      	mov	r2, r8
 800365e:	464b      	mov	r3, r9
 8003660:	f7fc fe30 	bl	80002c4 <__adddf3>
 8003664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003668:	e86a 0102 	strd	r0, r1, [sl], #-8
 800366c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003670:	e9ca 2300 	strd	r2, r3, [sl]
 8003674:	e74e      	b.n	8003514 <__kernel_rem_pio2+0x4e4>
 8003676:	4638      	mov	r0, r7
 8003678:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800367c:	4631      	mov	r1, r6
 800367e:	f7fc fe21 	bl	80002c4 <__adddf3>
 8003682:	3c01      	subs	r4, #1
 8003684:	4607      	mov	r7, r0
 8003686:	460e      	mov	r6, r1
 8003688:	e74a      	b.n	8003520 <__kernel_rem_pio2+0x4f0>
 800368a:	9b06      	ldr	r3, [sp, #24]
 800368c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003690:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003694:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003698:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800369c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80036a0:	601d      	str	r5, [r3, #0]
 80036a2:	615e      	str	r6, [r3, #20]
 80036a4:	e723      	b.n	80034ee <__kernel_rem_pio2+0x4be>
 80036a6:	bf00      	nop
 80036a8:	41700000 	.word	0x41700000
 80036ac:	3e700000 	.word	0x3e700000

080036b0 <scalbn>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	4616      	mov	r6, r2
 80036b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	460b      	mov	r3, r1
 80036be:	b992      	cbnz	r2, 80036e6 <scalbn+0x36>
 80036c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036c4:	4303      	orrs	r3, r0
 80036c6:	d03c      	beq.n	8003742 <scalbn+0x92>
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <scalbn+0xe0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	f7fc ffb0 	bl	8000630 <__aeabi_dmul>
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <scalbn+0xe4>)
 80036d2:	4604      	mov	r4, r0
 80036d4:	429e      	cmp	r6, r3
 80036d6:	460d      	mov	r5, r1
 80036d8:	da0f      	bge.n	80036fa <scalbn+0x4a>
 80036da:	a329      	add	r3, pc, #164	; (adr r3, 8003780 <scalbn+0xd0>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc ffa6 	bl	8000630 <__aeabi_dmul>
 80036e4:	e006      	b.n	80036f4 <scalbn+0x44>
 80036e6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80036ea:	42ba      	cmp	r2, r7
 80036ec:	d109      	bne.n	8003702 <scalbn+0x52>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f7fc fde8 	bl	80002c4 <__adddf3>
 80036f4:	4604      	mov	r4, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	e023      	b.n	8003742 <scalbn+0x92>
 80036fa:	460b      	mov	r3, r1
 80036fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003700:	3a36      	subs	r2, #54	; 0x36
 8003702:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003706:	428e      	cmp	r6, r1
 8003708:	dd0e      	ble.n	8003728 <scalbn+0x78>
 800370a:	a31f      	add	r3, pc, #124	; (adr r3, 8003788 <scalbn+0xd8>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003714:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003718:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800371c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003720:	481d      	ldr	r0, [pc, #116]	; (8003798 <scalbn+0xe8>)
 8003722:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003726:	e7db      	b.n	80036e0 <scalbn+0x30>
 8003728:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800372c:	4432      	add	r2, r6
 800372e:	428a      	cmp	r2, r1
 8003730:	dceb      	bgt.n	800370a <scalbn+0x5a>
 8003732:	2a00      	cmp	r2, #0
 8003734:	dd08      	ble.n	8003748 <scalbn+0x98>
 8003736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800373a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800373e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003742:	4620      	mov	r0, r4
 8003744:	4629      	mov	r1, r5
 8003746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003748:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800374c:	da0c      	bge.n	8003768 <scalbn+0xb8>
 800374e:	a30c      	add	r3, pc, #48	; (adr r3, 8003780 <scalbn+0xd0>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003758:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800375c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003760:	480e      	ldr	r0, [pc, #56]	; (800379c <scalbn+0xec>)
 8003762:	f041 011f 	orr.w	r1, r1, #31
 8003766:	e7bb      	b.n	80036e0 <scalbn+0x30>
 8003768:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800376c:	3236      	adds	r2, #54	; 0x36
 800376e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003772:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003776:	4620      	mov	r0, r4
 8003778:	4629      	mov	r1, r5
 800377a:	2200      	movs	r2, #0
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <scalbn+0xf0>)
 800377e:	e7af      	b.n	80036e0 <scalbn+0x30>
 8003780:	c2f8f359 	.word	0xc2f8f359
 8003784:	01a56e1f 	.word	0x01a56e1f
 8003788:	8800759c 	.word	0x8800759c
 800378c:	7e37e43c 	.word	0x7e37e43c
 8003790:	43500000 	.word	0x43500000
 8003794:	ffff3cb0 	.word	0xffff3cb0
 8003798:	8800759c 	.word	0x8800759c
 800379c:	c2f8f359 	.word	0xc2f8f359
 80037a0:	3c900000 	.word	0x3c900000
 80037a4:	00000000 	.word	0x00000000

080037a8 <floor>:
 80037a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80037ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80037b4:	2e13      	cmp	r6, #19
 80037b6:	460b      	mov	r3, r1
 80037b8:	4607      	mov	r7, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	4605      	mov	r5, r0
 80037be:	dc32      	bgt.n	8003826 <floor+0x7e>
 80037c0:	2e00      	cmp	r6, #0
 80037c2:	da14      	bge.n	80037ee <floor+0x46>
 80037c4:	a334      	add	r3, pc, #208	; (adr r3, 8003898 <floor+0xf0>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f7fc fd7b 	bl	80002c4 <__adddf3>
 80037ce:	2200      	movs	r2, #0
 80037d0:	2300      	movs	r3, #0
 80037d2:	f7fd f9bd 	bl	8000b50 <__aeabi_dcmpgt>
 80037d6:	b138      	cbz	r0, 80037e8 <floor+0x40>
 80037d8:	2c00      	cmp	r4, #0
 80037da:	da56      	bge.n	800388a <floor+0xe2>
 80037dc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80037e0:	4325      	orrs	r5, r4
 80037e2:	d055      	beq.n	8003890 <floor+0xe8>
 80037e4:	2500      	movs	r5, #0
 80037e6:	4c2e      	ldr	r4, [pc, #184]	; (80038a0 <floor+0xf8>)
 80037e8:	4623      	mov	r3, r4
 80037ea:	462f      	mov	r7, r5
 80037ec:	e025      	b.n	800383a <floor+0x92>
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <floor+0xfc>)
 80037f0:	fa42 f806 	asr.w	r8, r2, r6
 80037f4:	ea01 0208 	and.w	r2, r1, r8
 80037f8:	4302      	orrs	r2, r0
 80037fa:	d01e      	beq.n	800383a <floor+0x92>
 80037fc:	a326      	add	r3, pc, #152	; (adr r3, 8003898 <floor+0xf0>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fd5f 	bl	80002c4 <__adddf3>
 8003806:	2200      	movs	r2, #0
 8003808:	2300      	movs	r3, #0
 800380a:	f7fd f9a1 	bl	8000b50 <__aeabi_dcmpgt>
 800380e:	2800      	cmp	r0, #0
 8003810:	d0ea      	beq.n	80037e8 <floor+0x40>
 8003812:	2c00      	cmp	r4, #0
 8003814:	bfbe      	ittt	lt
 8003816:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800381a:	4133      	asrlt	r3, r6
 800381c:	18e4      	addlt	r4, r4, r3
 800381e:	2500      	movs	r5, #0
 8003820:	ea24 0408 	bic.w	r4, r4, r8
 8003824:	e7e0      	b.n	80037e8 <floor+0x40>
 8003826:	2e33      	cmp	r6, #51	; 0x33
 8003828:	dd0b      	ble.n	8003842 <floor+0x9a>
 800382a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800382e:	d104      	bne.n	800383a <floor+0x92>
 8003830:	4602      	mov	r2, r0
 8003832:	f7fc fd47 	bl	80002c4 <__adddf3>
 8003836:	4607      	mov	r7, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4638      	mov	r0, r7
 800383c:	4619      	mov	r1, r3
 800383e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003842:	f04f 38ff 	mov.w	r8, #4294967295
 8003846:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800384a:	fa28 f802 	lsr.w	r8, r8, r2
 800384e:	ea10 0f08 	tst.w	r0, r8
 8003852:	d0f2      	beq.n	800383a <floor+0x92>
 8003854:	a310      	add	r3, pc, #64	; (adr r3, 8003898 <floor+0xf0>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fd33 	bl	80002c4 <__adddf3>
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	f7fd f975 	bl	8000b50 <__aeabi_dcmpgt>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0be      	beq.n	80037e8 <floor+0x40>
 800386a:	2c00      	cmp	r4, #0
 800386c:	da0a      	bge.n	8003884 <floor+0xdc>
 800386e:	2e14      	cmp	r6, #20
 8003870:	d101      	bne.n	8003876 <floor+0xce>
 8003872:	3401      	adds	r4, #1
 8003874:	e006      	b.n	8003884 <floor+0xdc>
 8003876:	2301      	movs	r3, #1
 8003878:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800387c:	40b3      	lsls	r3, r6
 800387e:	441d      	add	r5, r3
 8003880:	42af      	cmp	r7, r5
 8003882:	d8f6      	bhi.n	8003872 <floor+0xca>
 8003884:	ea25 0508 	bic.w	r5, r5, r8
 8003888:	e7ae      	b.n	80037e8 <floor+0x40>
 800388a:	2500      	movs	r5, #0
 800388c:	462c      	mov	r4, r5
 800388e:	e7ab      	b.n	80037e8 <floor+0x40>
 8003890:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003894:	e7a8      	b.n	80037e8 <floor+0x40>
 8003896:	bf00      	nop
 8003898:	8800759c 	.word	0x8800759c
 800389c:	7e37e43c 	.word	0x7e37e43c
 80038a0:	bff00000 	.word	0xbff00000
 80038a4:	000fffff 	.word	0x000fffff

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
