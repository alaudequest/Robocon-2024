
Main_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08013040  08013040  00023040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137a0  080137a0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080137a0  080137a0  000237a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137a8  080137a8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137a8  080137a8  000237a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137ac  080137ac  000237ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080137b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00005100  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005300  20005300  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002118a  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005342  00000000  00000000  000513fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c48  00000000  00000000  00056740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015af  00000000  00000000  00058388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028cd8  00000000  00000000  00059937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023f5e  00000000  00000000  0008260f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7fac  00000000  00000000  000a656d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008bcc  00000000  00000000  0018e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001970e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013028 	.word	0x08013028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08013028 	.word	0x08013028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <Accel_Cal>:
#include "Accel.h"
#include "stdlib.h"
#define deltaT 0.001

void Accel_Cal(AccelParam_t *accel, float target_vel, float target_time)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f54:	edc7 0a01 	vstr	s1, [r7, #4]
	if(target_vel != accel->target_vel_Pre)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	d021      	beq.n	8000fb0 <Accel_Cal+0x68>
	{
		if(target_vel < accel->target_vel_Pre)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	d503      	bpl.n	8000f88 <Accel_Cal+0x40>
		{
			accel->Flag = 1;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	741a      	strb	r2, [r3, #16]
 8000f86:	e002      	b.n	8000f8e <Accel_Cal+0x46>
		}
		else
		{
			accel->Flag = 0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	741a      	strb	r2, [r3, #16]
		}
		accel->accel = (target_vel - accel->vel_controller)/target_time;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f94:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
		accel->target_vel_Pre = target_vel;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	60da      	str	r2, [r3, #12]
	}
		accel->vel_controller +=  accel->accel * deltaT;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_f2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fac0 	bl	8000548 <__aeabi_f2d>
 8000fc8:	a31d      	add	r3, pc, #116	; (adr r3, 8001040 <Accel_Cal+0xf8>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fb13 	bl	80005f8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff f957 	bl	800028c <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fddf 	bl	8000ba8 <__aeabi_d2f>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	605a      	str	r2, [r3, #4]

			if(accel->Flag)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	7c1b      	ldrb	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00e      	beq.n	8001016 <Accel_Cal+0xce>
			{
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dc00      	bgt.n	800100e <Accel_Cal+0xc6>
			}
			else
			{
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
			}
}
 800100c:	e011      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller < target_vel) accel->vel_controller = target_vel;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	605a      	str	r2, [r3, #4]
}
 8001014:	e00d      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	edd3 7a01 	vldr	s15, [r3, #4]
 800101c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d400      	bmi.n	800102c <Accel_Cal+0xe4>
}
 800102a:	e002      	b.n	8001032 <Accel_Cal+0xea>
				if(accel->vel_controller > target_vel) accel->vel_controller = target_vel;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	605a      	str	r2, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	d2f1a9fc 	.word	0xd2f1a9fc
 8001044:	3f50624d 	.word	0x3f50624d

08001048 <encoder_Init>:
#include "Encoder.h"
#include "stdbool.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	ed87 0a00 	vstr	s0, [r7]
 8001058:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <encoder_ResetCount>:
		return enc->Degree;
	}
	return 0;
}
void encoder_ResetCount(Encoder_t *enc)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
	enc->vel_Real = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
	enc->Distance = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <encoder_GetFloatingDis>:
{
	enc->Radius = R;
}

float encoder_GetFloatingDis(Encoder_t *enc)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	enc->Distance += abs((int16_t)__HAL_TIM_GET_COUNTER(enc->htim));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfb8      	it	lt
 80010c8:	425b      	neglt	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	441a      	add	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
	return enc->Distance;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bfb8      	it	lt
 8001146:	425b      	neglt	r3, r3
 8001148:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <MotorDC_Drive+0x2c>
 8001152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001156:	f000 8097 	beq.w	8001288 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 800115a:	e13d      	b.n	80013d8 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <MotorDC_Drive+0x40>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	e018      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d105      	bne.n	8001184 <MotorDC_Drive+0x54>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	6393      	str	r3, [r2, #56]	; 0x38
 8001182:	e00e      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d105      	bne.n	8001198 <MotorDC_Drive+0x68>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001196:	e004      	b.n	80011a2 <MotorDC_Drive+0x72>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <MotorDC_Drive+0x86>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	e018      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d105      	bne.n	80011ca <MotorDC_Drive+0x9a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	6393      	str	r3, [r2, #56]	; 0x38
 80011c8:	e00e      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d105      	bne.n	80011de <MotorDC_Drive+0xae>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011dc:	e004      	b.n	80011e8 <MotorDC_Drive+0xb8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da23      	bge.n	8001236 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <MotorDC_Drive+0xd2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001200:	e0e7      	b.n	80013d2 <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d105      	bne.n	8001216 <MotorDC_Drive+0xe6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	6393      	str	r3, [r2, #56]	; 0x38
 8001214:	e037      	b.n	8001286 <MotorDC_Drive+0x156>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b08      	cmp	r3, #8
 800121c:	d105      	bne.n	800122a <MotorDC_Drive+0xfa>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001228:	e02d      	b.n	8001286 <MotorDC_Drive+0x156>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001234:	e0cd      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f340 80ca 	ble.w	80013d2 <MotorDC_Drive+0x2a2>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <MotorDC_Drive+0x122>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001250:	e0bf      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d105      	bne.n	8001266 <MotorDC_Drive+0x136>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001264:	e0b5      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d105      	bne.n	800127a <MotorDC_Drive+0x14a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001278:	e0ab      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001284:	e0a5      	b.n	80013d2 <MotorDC_Drive+0x2a2>
 8001286:	e0a4      	b.n	80013d2 <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <MotorDC_Drive+0x16c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	89fa      	ldrh	r2, [r7, #14]
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
 800129a:	e018      	b.n	80012ce <MotorDC_Drive+0x19e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d105      	bne.n	80012b0 <MotorDC_Drive+0x180>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38
 80012ae:	e00e      	b.n	80012ce <MotorDC_Drive+0x19e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d105      	bne.n	80012c4 <MotorDC_Drive+0x194>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012c2:	e004      	b.n	80012ce <MotorDC_Drive+0x19e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <MotorDC_Drive+0x1b2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	89fa      	ldrh	r2, [r7, #14]
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
 80012e0:	e018      	b.n	8001314 <MotorDC_Drive+0x1e4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d105      	bne.n	80012f6 <MotorDC_Drive+0x1c6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	6393      	str	r3, [r2, #56]	; 0x38
 80012f4:	e00e      	b.n	8001314 <MotorDC_Drive+0x1e4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d105      	bne.n	800130a <MotorDC_Drive+0x1da>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001308:	e004      	b.n	8001314 <MotorDC_Drive+0x1e4>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da2b      	bge.n	8001372 <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <MotorDC_Drive+0x202>
 8001322:	89f9      	ldrh	r1, [r7, #14]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	1a8a      	subs	r2, r1, r2
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001330:	e051      	b.n	80013d6 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d107      	bne.n	800134a <MotorDC_Drive+0x21a>
 800133a:	89f9      	ldrh	r1, [r7, #14]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1acb      	subs	r3, r1, r3
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
 8001348:	e042      	b.n	80013d0 <MotorDC_Drive+0x2a0>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d107      	bne.n	8001362 <MotorDC_Drive+0x232>
 8001352:	89f9      	ldrh	r1, [r7, #14]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1acb      	subs	r3, r1, r3
 800135e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001360:	e036      	b.n	80013d0 <MotorDC_Drive+0x2a0>
 8001362:	89f9      	ldrh	r1, [r7, #14]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1acb      	subs	r3, r1, r3
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001370:	e031      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd2e      	ble.n	80013d6 <MotorDC_Drive+0x2a6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <MotorDC_Drive+0x260>
 8001380:	89f9      	ldrh	r1, [r7, #14]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800138e:	e022      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <MotorDC_Drive+0x278>
 8001398:	89f9      	ldrh	r1, [r7, #14]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80013a6:	e016      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d107      	bne.n	80013c0 <MotorDC_Drive+0x290>
 80013b0:	89f9      	ldrh	r1, [r7, #14]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80013be:	e00a      	b.n	80013d6 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80013c0:	89f9      	ldrh	r1, [r7, #14]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1acb      	subs	r3, r1, r3
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80013ce:	e002      	b.n	80013d6 <MotorDC_Drive+0x2a6>
 80013d0:	e001      	b.n	80013d6 <MotorDC_Drive+0x2a6>
		break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <MotorDC_Drive+0x2a8>
		break;
 80013d6:	bf00      	nop
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <startPutBall>:
extern TIM_HandleTypeDef htim5;
PutParam_t putBall;
GetParam_t getBall;

void startPutBall(uint8_t state)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]

	MotorDC_Init(&putBall.mdc, &htim3, MOTOR_PWM_INVERSE, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80013ee:	2304      	movs	r3, #4
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f8:	499c      	ldr	r1, [pc, #624]	; (800166c <startPutBall+0x288>)
 80013fa:	489d      	ldr	r0, [pc, #628]	; (8001670 <startPutBall+0x28c>)
 80013fc:	f7ff fe7e 	bl	80010fc <MotorDC_Init>
	MotorDC_Init(&getBall.mdc, &htim5, MOTOR_PWM_NORMAL, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001400:	2304      	movs	r3, #4
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	499a      	ldr	r1, [pc, #616]	; (8001674 <startPutBall+0x290>)
 800140a:	489b      	ldr	r0, [pc, #620]	; (8001678 <startPutBall+0x294>)
 800140c:	f7ff fe76 	bl	80010fc <MotorDC_Init>
	encoder_Init(&putBall.enc, &htim2, 19200, 0.001);
 8001410:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800167c <startPutBall+0x298>
 8001414:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001418:	4999      	ldr	r1, [pc, #612]	; (8001680 <startPutBall+0x29c>)
 800141a:	489a      	ldr	r0, [pc, #616]	; (8001684 <startPutBall+0x2a0>)
 800141c:	f7ff fe14 	bl	8001048 <encoder_Init>
	if(state == 0)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d133      	bne.n	800148e <startPutBall+0xaa>
	{
		putBall.count = 0;
 8001426:	4b97      	ldr	r3, [pc, #604]	; (8001684 <startPutBall+0x2a0>)
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.StopPutFlag = 0;
 800142c:	4b95      	ldr	r3, [pc, #596]	; (8001684 <startPutBall+0x2a0>)
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if(putBall.accel.vel_controller > -600)
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <startPutBall+0x2a0>)
 8001436:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800143a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001688 <startPutBall+0x2a4>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	dd15      	ble.n	8001474 <startPutBall+0x90>
		{
			Accel_Cal(&putBall.accel, -600, 2.25);
 8001448:	eef0 0a02 	vmov.f32	s1, #2	; 0x40100000  2.250
 800144c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8001688 <startPutBall+0x2a4>
 8001450:	488e      	ldr	r0, [pc, #568]	; (800168c <startPutBall+0x2a8>)
 8001452:	f7ff fd79 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 8001456:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <startPutBall+0x2a0>)
 8001458:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 1a90 	vmov	r1, s15
 8001464:	4882      	ldr	r0, [pc, #520]	; (8001670 <startPutBall+0x28c>)
 8001466:	f7ff fe63 	bl	8001130 <MotorDC_Drive>
			putBall.flag = 0;
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <startPutBall+0x2a0>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001472:	e007      	b.n	8001484 <startPutBall+0xa0>
		}
		else
		{
			MotorDC_Drive(&putBall.mdc, 0);
 8001474:	2100      	movs	r1, #0
 8001476:	487e      	ldr	r0, [pc, #504]	; (8001670 <startPutBall+0x28c>)
 8001478:	f7ff fe5a 	bl	8001130 <MotorDC_Drive>
			putBall.flag = 1;
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <startPutBall+0x2a0>)
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		MotorDC_Drive(&getBall.mdc, -1000);
 8001484:	4982      	ldr	r1, [pc, #520]	; (8001690 <startPutBall+0x2ac>)
 8001486:	487c      	ldr	r0, [pc, #496]	; (8001678 <startPutBall+0x294>)
 8001488:	f7ff fe52 	bl	8001130 <MotorDC_Drive>
		}else{
			MotorDC_Drive(&putBall.mdc, -200);
			MotorDC_Drive(&getBall.mdc, -1000);
		}
	}
}
 800148c:	e0ea      	b.n	8001664 <startPutBall+0x280>
	else if(state == 1)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d140      	bne.n	8001516 <startPutBall+0x132>
		putBall.count = 0;
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <startPutBall+0x2a0>)
 8001496:	2200      	movs	r2, #0
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <startPutBall+0x2a0>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <startPutBall+0x2a0>)
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <startPutBall+0x2b0>)
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin))
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4878      	ldr	r0, [pc, #480]	; (8001698 <startPutBall+0x2b4>)
 80014b8:	f007 ff00 	bl	80092bc <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <startPutBall+0xfc>
			osDelay(5);
 80014c2:	2005      	movs	r0, #5
 80014c4:	f00b f89b 	bl	800c5fe <osDelay>
			if(HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin)){
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	4872      	ldr	r0, [pc, #456]	; (8001698 <startPutBall+0x2b4>)
 80014ce:	f007 fef5 	bl	80092bc <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <startPutBall+0xfc>
				putBall.StopPutFlag = 1;
 80014d8:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <startPutBall+0x2a0>)
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <startPutBall+0x2a0>)
 80014e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <startPutBall+0x11e>
			MotorDC_Drive(&putBall.mdc, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	4860      	ldr	r0, [pc, #384]	; (8001670 <startPutBall+0x28c>)
 80014ee:	f7ff fe1f 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4860      	ldr	r0, [pc, #384]	; (8001678 <startPutBall+0x294>)
 80014f6:	f7ff fe1b 	bl	8001130 <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80014fa:	4862      	ldr	r0, [pc, #392]	; (8001684 <startPutBall+0x2a0>)
 80014fc:	f7ff fdbc 	bl	8001078 <encoder_ResetCount>
}
 8001500:	e0b0      	b.n	8001664 <startPutBall+0x280>
			MotorDC_Drive(&putBall.mdc, 400);
 8001502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001506:	485a      	ldr	r0, [pc, #360]	; (8001670 <startPutBall+0x28c>)
 8001508:	f7ff fe12 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 800150c:	4960      	ldr	r1, [pc, #384]	; (8001690 <startPutBall+0x2ac>)
 800150e:	485a      	ldr	r0, [pc, #360]	; (8001678 <startPutBall+0x294>)
 8001510:	f7ff fe0e 	bl	8001130 <MotorDC_Drive>
}
 8001514:	e0a6      	b.n	8001664 <startPutBall+0x280>
	else if(state == 2)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d160      	bne.n	80015de <startPutBall+0x1fa>
		putBall.StopPutFlag = 0;
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <startPutBall+0x2a0>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		putBall.count += 1;
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <startPutBall+0x2a0>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	3301      	adds	r3, #1
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <startPutBall+0x2a0>)
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
		if(putBall.count >= 1000)
 800152e:	4b55      	ldr	r3, [pc, #340]	; (8001684 <startPutBall+0x2a0>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001536:	db03      	blt.n	8001540 <startPutBall+0x15c>
			putBall.StopPutFlag = 2;
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <startPutBall+0x2a0>)
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag == 2)
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <startPutBall+0x2a0>)
 8001542:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001546:	2b02      	cmp	r3, #2
 8001548:	d126      	bne.n	8001598 <startPutBall+0x1b4>
			putBall.StopPutFlag = 0;
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <startPutBall+0x2a0>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			Accel_Cal(&putBall.accel, 0, 0.75);
 8001552:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8001556:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800169c <startPutBall+0x2b8>
 800155a:	484c      	ldr	r0, [pc, #304]	; (800168c <startPutBall+0x2a8>)
 800155c:	f7ff fcf4 	bl	8000f48 <Accel_Cal>
			Accel_Cal(&getBall.accel, 0, 2);
 8001560:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001564:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800169c <startPutBall+0x2b8>
 8001568:	484d      	ldr	r0, [pc, #308]	; (80016a0 <startPutBall+0x2bc>)
 800156a:	f7ff fced 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <startPutBall+0x2a0>)
 8001570:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 1a90 	vmov	r1, s15
 800157c:	483c      	ldr	r0, [pc, #240]	; (8001670 <startPutBall+0x28c>)
 800157e:	f7ff fdd7 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, getBall.accel.vel_controller);
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <startPutBall+0x2b0>)
 8001584:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	ee17 1a90 	vmov	r1, s15
 8001590:	4839      	ldr	r0, [pc, #228]	; (8001678 <startPutBall+0x294>)
 8001592:	f7ff fdcd 	bl	8001130 <MotorDC_Drive>
}
 8001596:	e065      	b.n	8001664 <startPutBall+0x280>
			Accel_Cal(&putBall.accel, 450, 1);
 8001598:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800159c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80016a4 <startPutBall+0x2c0>
 80015a0:	483a      	ldr	r0, [pc, #232]	; (800168c <startPutBall+0x2a8>)
 80015a2:	f7ff fcd1 	bl	8000f48 <Accel_Cal>
			Accel_Cal(&getBall.accel, -1000, 0.5);
 80015a6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80015aa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80016a8 <startPutBall+0x2c4>
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <startPutBall+0x2bc>)
 80015b0:	f7ff fcca 	bl	8000f48 <Accel_Cal>
			MotorDC_Drive(&putBall.mdc, putBall.accel.vel_controller);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <startPutBall+0x2a0>)
 80015b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 1a90 	vmov	r1, s15
 80015c2:	482b      	ldr	r0, [pc, #172]	; (8001670 <startPutBall+0x28c>)
 80015c4:	f7ff fdb4 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, getBall.accel.vel_controller);
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <startPutBall+0x2b0>)
 80015ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d2:	ee17 1a90 	vmov	r1, s15
 80015d6:	4828      	ldr	r0, [pc, #160]	; (8001678 <startPutBall+0x294>)
 80015d8:	f7ff fdaa 	bl	8001130 <MotorDC_Drive>
}
 80015dc:	e042      	b.n	8001664 <startPutBall+0x280>
	else if(state == 3)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d13f      	bne.n	8001664 <startPutBall+0x280>
		putBall.count = 0;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <startPutBall+0x2a0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <startPutBall+0x2a0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <startPutBall+0x2a0>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <startPutBall+0x2b0>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin))
 8001602:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001606:	4824      	ldr	r0, [pc, #144]	; (8001698 <startPutBall+0x2b4>)
 8001608:	f007 fe58 	bl	80092bc <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00e      	beq.n	8001630 <startPutBall+0x24c>
			osDelay(5);
 8001612:	2005      	movs	r0, #5
 8001614:	f00a fff3 	bl	800c5fe <osDelay>
			if(HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin)){
 8001618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161c:	481e      	ldr	r0, [pc, #120]	; (8001698 <startPutBall+0x2b4>)
 800161e:	f007 fe4d 	bl	80092bc <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <startPutBall+0x24c>
				putBall.StopPutFlag = 1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <startPutBall+0x2a0>)
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <startPutBall+0x2a0>)
 8001632:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <startPutBall+0x26e>
			MotorDC_Drive(&putBall.mdc, 0);
 800163a:	2100      	movs	r1, #0
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <startPutBall+0x28c>)
 800163e:	f7ff fd77 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 8001642:	2100      	movs	r1, #0
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <startPutBall+0x294>)
 8001646:	f7ff fd73 	bl	8001130 <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <startPutBall+0x2a0>)
 800164c:	f7ff fd14 	bl	8001078 <encoder_ResetCount>
}
 8001650:	e008      	b.n	8001664 <startPutBall+0x280>
			MotorDC_Drive(&putBall.mdc, -200);
 8001652:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <startPutBall+0x28c>)
 8001658:	f7ff fd6a 	bl	8001130 <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <startPutBall+0x2ac>)
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <startPutBall+0x294>)
 8001660:	f7ff fd66 	bl	8001130 <MotorDC_Drive>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000978 	.word	0x20000978
 8001670:	2000024c 	.word	0x2000024c
 8001674:	200009c0 	.word	0x200009c0
 8001678:	200002a8 	.word	0x200002a8
 800167c:	3a83126f 	.word	0x3a83126f
 8001680:	20000930 	.word	0x20000930
 8001684:	2000021c 	.word	0x2000021c
 8001688:	c4160000 	.word	0xc4160000
 800168c:	2000025c 	.word	0x2000025c
 8001690:	fffffc18 	.word	0xfffffc18
 8001694:	20000278 	.word	0x20000278
 8001698:	40021000 	.word	0x40021000
 800169c:	00000000 	.word	0x00000000
 80016a0:	200002b8 	.word	0x200002b8
 80016a4:	43e10000 	.word	0x43e10000
 80016a8:	c47a0000 	.word	0xc47a0000

080016ac <PutBall_getFlag>:

uint8_t PutBall_getFlag()
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return putBall.flag;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <PutBall_getFlag+0x14>)
 80016b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	2000021c 	.word	0x2000021c

080016c4 <modulo360>:
 *  Created on: Oct 12, 2023
 *      Author: Admin
 */

#include "AngleOptimizer.h"
float modulo360(float Angle){
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	ed87 0a01 	vstr	s0, [r7, #4]
	int Result = (int)Angle/360.0;
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 0a90 	vmov	r0, s15
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <modulo360+0x78>)
 80016e4:	f7ff f8b2 	bl	800084c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa32 	bl	8000b58 <__aeabi_d2iz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
	return Angle-Result*360.0;
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7fe ff25 	bl	8000548 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7fe ff0e 	bl	8000524 <__aeabi_i2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <modulo360+0x78>)
 800170e:	f7fe ff73 	bl	80005f8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe fdb5 	bl	8000288 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa3f 	bl	8000ba8 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	ee07 3a90 	vmov	s15, r3
}
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	bf00      	nop
 800173c:	40768000 	.word	0x40768000

08001740 <absf>:

float absf(float num)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num>=0)return num;
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	db02      	blt.n	800175e <absf+0x1e>
 8001758:	edd7 7a01 	vldr	s15, [r7, #4]
 800175c:	e003      	b.n	8001766 <absf+0x26>
	else return num*-1;
 800175e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001762:	eef1 7a67 	vneg.f32	s15, s15
}
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	0000      	movs	r0, r0
	...

08001778 <angopt_QuadrantCheckInput>:
	int Result = (int)Angle/180.0;
	return Angle-Result*180.0;
}

int angopt_QuadrantCheckInput(float x, float y)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001782:	edc7 0a00 	vstr	s1, [r7]
	float xT = x,yT = y;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	60bb      	str	r3, [r7, #8]
	if(absf(xT)<0.0001) xT = 0;
 800178e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001792:	f7ff ffd5 	bl	8001740 <absf>
 8001796:	ee10 3a10 	vmov	r3, s0
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fed4 	bl	8000548 <__aeabi_f2d>
 80017a0:	a353      	add	r3, pc, #332	; (adr r3, 80018f0 <angopt_QuadrantCheckInput+0x178>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f999 	bl	8000adc <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <angopt_QuadrantCheckInput+0x3e>
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
	if(absf(yT)<0.0001) yT = 0;
 80017b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017ba:	f7ff ffc1 	bl	8001740 <absf>
 80017be:	ee10 3a10 	vmov	r3, s0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec0 	bl	8000548 <__aeabi_f2d>
 80017c8:	a349      	add	r3, pc, #292	; (adr r3, 80018f0 <angopt_QuadrantCheckInput+0x178>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f985 	bl	8000adc <__aeabi_dcmplt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <angopt_QuadrantCheckInput+0x66>
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]

	if((xT>0)&&(yT>0))return 1;
 80017de:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dd08      	ble.n	80017fe <angopt_QuadrantCheckInput+0x86>
 80017ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	dd01      	ble.n	80017fe <angopt_QuadrantCheckInput+0x86>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e074      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT<0))return 2;
 80017fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	dd08      	ble.n	800181e <angopt_QuadrantCheckInput+0xa6>
 800180c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d501      	bpl.n	800181e <angopt_QuadrantCheckInput+0xa6>
 800181a:	2302      	movs	r3, #2
 800181c:	e064      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT<0))return 3;
 800181e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d508      	bpl.n	800183e <angopt_QuadrantCheckInput+0xc6>
 800182c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d501      	bpl.n	800183e <angopt_QuadrantCheckInput+0xc6>
 800183a:	2303      	movs	r3, #3
 800183c:	e054      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT>0))return 4;
 800183e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d508      	bpl.n	800185e <angopt_QuadrantCheckInput+0xe6>
 800184c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	dd01      	ble.n	800185e <angopt_QuadrantCheckInput+0xe6>
 800185a:	2304      	movs	r3, #4
 800185c:	e044      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT>0))return -1;
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	d109      	bne.n	8001880 <angopt_QuadrantCheckInput+0x108>
 800186c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dd02      	ble.n	8001880 <angopt_QuadrantCheckInput+0x108>
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e033      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT<0))return -2;
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d109      	bne.n	80018a2 <angopt_QuadrantCheckInput+0x12a>
 800188e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189a:	d502      	bpl.n	80018a2 <angopt_QuadrantCheckInput+0x12a>
 800189c:	f06f 0301 	mvn.w	r3, #1
 80018a0:	e022      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT==0))return -3;
 80018a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	dd09      	ble.n	80018c4 <angopt_QuadrantCheckInput+0x14c>
 80018b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d102      	bne.n	80018c4 <angopt_QuadrantCheckInput+0x14c>
 80018be:	f06f 0302 	mvn.w	r3, #2
 80018c2:	e011      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT==0))return -4;
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d509      	bpl.n	80018e6 <angopt_QuadrantCheckInput+0x16e>
 80018d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d102      	bne.n	80018e6 <angopt_QuadrantCheckInput+0x16e>
 80018e0:	f06f 0303 	mvn.w	r3, #3
 80018e4:	e000      	b.n	80018e8 <angopt_QuadrantCheckInput+0x170>

	return 0;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	eb1c432d 	.word	0xeb1c432d
 80018f4:	3f1a36e2 	.word	0x3f1a36e2

080018f8 <angopt_QuadRantCheckOutput>:
//{
//
//}

void angopt_QuadRantCheckOutput(ModuleID ID,float Input)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b09b      	sub	sp, #108	; 0x6c
 80018fc:	af0a      	add	r7, sp, #40	; 0x28
 80018fe:	4603      	mov	r3, r0
 8001900:	ed87 0a00 	vstr	s0, [r7]
 8001904:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fe5c 	bl	80045cc <swer_GetOptAngle>
#define Case1		opt.Case1
#define Case2		opt.Case2
#define Direc 		opt.direct

	float XCurr = cos(Input);
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7fe fe17 	bl	8000548 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b10 	vmov	d0, r2, r3
 8001922:	f00f fa3d 	bl	8010da0 <cos>
 8001926:	ec53 2b10 	vmov	r2, r3, d0
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f93b 	bl	8000ba8 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	63fb      	str	r3, [r7, #60]	; 0x3c
	float YCurr = sin(Input);
 8001936:	6838      	ldr	r0, [r7, #0]
 8001938:	f7fe fe06 	bl	8000548 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	ec43 2b10 	vmov	d0, r2, r3
 8001944:	f00f fa80 	bl	8010e48 <sin>
 8001948:	ec53 2b10 	vmov	r2, r3, d0
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f92a 	bl	8000ba8 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
//	float AngleCheck=modulo360(Input);

	Case2 = angopt_QuadrantCheckInput(XCurr, YCurr);
 8001958:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 800195c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001960:	f7ff ff0a 	bl	8001778 <angopt_QuadrantCheckInput>
 8001964:	4603      	mov	r3, r0
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
//	if (absf(AngleCheck)<0.001) Case2 = -2;
//	else if (absf(AngleCheck-90.0)<0.001) Case2 = -1;
//	else if (absf(AngleCheck-180.0)<0.001) Case2 = -4;
//	else if (absf(AngleCheck-270.0)<0.001) Case2 = -3;

	if (Case1 == 0)Direc = 0;
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <angopt_QuadRantCheckOutput+0x7c>
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	e009      	b.n	8001988 <angopt_QuadRantCheckOutput+0x90>
//		}else if(Case1 == 4){
//			if ((Case2 == 2)||(Case2 == -2)||(Case2 == -3))Direc = -1;
//			else Direc = 1;
//		}
		else {
			if(Case2 == Case1)Direc = 1;
 8001974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	429a      	cmp	r2, r3
 800197a:	d102      	bne.n	8001982 <angopt_QuadRantCheckOutput+0x8a>
 800197c:	2301      	movs	r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e002      	b.n	8001988 <angopt_QuadRantCheckOutput+0x90>
			else Direc = -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	60bb      	str	r3, [r7, #8]
		}
//	}
	swer_SetOptAngle(ID, opt);
 8001988:	79fe      	ldrb	r6, [r7, #7]
 800198a:	466d      	mov	r5, sp
 800198c:	f107 0414 	add.w	r4, r7, #20
 8001990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	602b      	str	r3, [r5, #0]
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a2:	4630      	mov	r0, r6
 80019a4:	f002 fdec 	bl	8004580 <swer_SetOptAngle>
}
 80019a8:	bf00      	nop
 80019aa:	3744      	adds	r7, #68	; 0x44
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b0 <angopt_Cal>:


void angopt_Cal(ModuleID ID,float input)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	ed2d 8b02 	vpush	{d8}
 80019b6:	b099      	sub	sp, #100	; 0x64
 80019b8:	af0a      	add	r7, sp, #40	; 0x28
 80019ba:	4603      	mov	r3, r0
 80019bc:	ed87 0a00 	vstr	s0, [r7]
 80019c0:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fdfe 	bl	80045cc <swer_GetOptAngle>
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	if(input != preAngle){
 80019d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d4:	ed97 7a00 	vldr	s14, [r7]
 80019d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	f000 80c6 	beq.w	8001b70 <angopt_Cal+0x1c0>
		calInput = input;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	61fb      	str	r3, [r7, #28]

		if((currentAngle>=0)&&(calInput<0))calInput+=360;
 80019e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	db0f      	blt.n	8001a16 <angopt_Cal+0x66>
 80019f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d508      	bpl.n	8001a16 <angopt_Cal+0x66>
 8001a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a08:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001b7c <angopt_Cal+0x1cc>
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a10:	edc7 7a07 	vstr	s15, [r7, #28]
 8001a14:	e015      	b.n	8001a42 <angopt_Cal+0x92>
		else if ((currentAngle<0)&&(calInput>0))calInput-=360;
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d50e      	bpl.n	8001a42 <angopt_Cal+0x92>
 8001a24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd07      	ble.n	8001a42 <angopt_Cal+0x92>
 8001a32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a36:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001b7c <angopt_Cal+0x1cc>
 8001a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a3e:	edc7 7a07 	vstr	s15, [r7, #28]

		deltaAngle = calInput - modulo360(currentAngle);
 8001a42:	ed97 8a07 	vldr	s16, [r7, #28]
 8001a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	f7ff fe39 	bl	80016c4 <modulo360>
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
 8001a56:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001a5a:	edc7 7a04 	vstr	s15, [r7, #16]
		if(deltaAngle>180)deltaAngle+=-360;
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001b80 <angopt_Cal+0x1d0>
 8001a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	dd08      	ble.n	8001a82 <angopt_Cal+0xd2>
 8001a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a74:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001b7c <angopt_Cal+0x1cc>
 8001a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a7c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001a80:	e010      	b.n	8001aa4 <angopt_Cal+0xf4>
		else if(deltaAngle<-180)deltaAngle+=360;
 8001a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a86:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001b84 <angopt_Cal+0x1d4>
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	d507      	bpl.n	8001aa4 <angopt_Cal+0xf4>
 8001a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001b7c <angopt_Cal+0x1cc>
 8001a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa0:	edc7 7a04 	vstr	s15, [r7, #16]

		if((deltaAngle<=90)&&(deltaAngle>=-90))deltaAngle = deltaAngle;
 8001aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001b88 <angopt_Cal+0x1d8>
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d80b      	bhi.n	8001ace <angopt_Cal+0x11e>
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001b8c <angopt_Cal+0x1dc>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	db02      	blt.n	8001ace <angopt_Cal+0x11e>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	e034      	b.n	8001b38 <angopt_Cal+0x188>
		else if ((deltaAngle>90)&&(deltaAngle<=180))deltaAngle += -180.0;
 8001ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b88 <angopt_Cal+0x1d8>
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	dd11      	ble.n	8001b04 <angopt_Cal+0x154>
 8001ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001b80 <angopt_Cal+0x1d0>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d808      	bhi.n	8001b04 <angopt_Cal+0x154>
 8001af2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001b80 <angopt_Cal+0x1d0>
 8001afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001afe:	edc7 7a04 	vstr	s15, [r7, #16]
 8001b02:	e019      	b.n	8001b38 <angopt_Cal+0x188>
		else if ((deltaAngle<-90)&&(deltaAngle>=-180))deltaAngle += 180.0;
 8001b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001b8c <angopt_Cal+0x1dc>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d510      	bpl.n	8001b38 <angopt_Cal+0x188>
 8001b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001b84 <angopt_Cal+0x1d4>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	db07      	blt.n	8001b38 <angopt_Cal+0x188>
 8001b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b80 <angopt_Cal+0x1d0>
 8001b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b34:	edc7 7a04 	vstr	s15, [r7, #16]

		preAngle = input;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	61bb      	str	r3, [r7, #24]
		preCal = calInput;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	623b      	str	r3, [r7, #32]
		currentAngle += deltaAngle;
 8001b40:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc7 7a03 	vstr	s15, [r7, #12]
//		if(currentAngle>=1080) currentAngle-=360;
		swer_SetOptAngle(ID, opt);
 8001b50:	79fe      	ldrb	r6, [r7, #7]
 8001b52:	466d      	mov	r5, sp
 8001b54:	f107 0414 	add.w	r4, r7, #20
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f002 fd08 	bl	8004580 <swer_SetOptAngle>
	}
}
 8001b70:	bf00      	nop
 8001b72:	373c      	adds	r7, #60	; 0x3c
 8001b74:	46bd      	mov	sp, r7
 8001b76:	ecbd 8b02 	vpop	{d8}
 8001b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7c:	43b40000 	.word	0x43b40000
 8001b80:	43340000 	.word	0x43340000
 8001b84:	c3340000 	.word	0xc3340000
 8001b88:	42b40000 	.word	0x42b40000
 8001b8c:	c2b40000 	.word	0xc2b40000

08001b90 <invkine_CalWheelVector>:
#include "main.h"
int Count;
extern TIM_HandleTypeDef htim10;
InverseKinematicProcedure InvCalcStep = 0;

void invkine_CalWheelVector(ModuleID ID, float u, float v, float r){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ba0:	ed87 1a00 	vstr	s2, [r7]
 8001ba4:	73fb      	strb	r3, [r7, #15]
	pVectorCalXY pVectXY = swer_GetFuncHandle(ID);
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fd2f 	bl	800460c <swer_GetFuncHandle>
 8001bae:	6178      	str	r0, [r7, #20]
	pVectXY(u,v,r);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	ed97 1a00 	vldr	s2, [r7]
 8001bb6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001bba:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bbe:	4798      	blx	r3
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <invkine_CalOptAngle>:

void invkine_CalOptAngle(ModuleID ID){
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b09d      	sub	sp, #116	; 0x74
 8001bcc:	af0a      	add	r7, sp, #40	; 0x28
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	WheelVector vect = swer_GetWheelVector(ID);
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fcad 	bl	8004534 <swer_GetWheelVector>
 8001bda:	eeb0 7a40 	vmov.f32	s14, s0
 8001bde:	eef0 7a60 	vmov.f32	s15, s1
 8001be2:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001be6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fcea 	bl	80045cc <swer_GetOptAngle>
	angopt.Case1 = angopt_QuadrantCheckInput(vect.wheelVelX,vect.wheelVelY);
 8001bf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bfc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c00:	eef0 0a47 	vmov.f32	s1, s14
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	f7ff fdb6 	bl	8001778 <angopt_QuadrantCheckInput>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
	swer_SetOptAngle(ID, angopt);
 8001c10:	79fe      	ldrb	r6, [r7, #7]
 8001c12:	466d      	mov	r5, sp
 8001c14:	f107 0418 	add.w	r4, r7, #24
 8001c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	602b      	str	r3, [r5, #0]
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f002 fca8 	bl	8004580 <swer_SetOptAngle>

	//------------------------------------------------------------------
	float rawAngle = atan2(vect.wheelVelY,vect.wheelVelX)*180.0/M_PI;
 8001c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc82 	bl	8000548 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b11 	vmov	d1, r2, r3
 8001c4c:	ec45 4b10 	vmov	d0, r4, r5
 8001c50:	f00f f808 	bl	8010c64 <atan2>
 8001c54:	ec51 0b10 	vmov	r0, r1, d0
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <invkine_CalOptAngle+0xd8>)
 8001c5e:	f7fe fccb 	bl	80005f8 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	a30b      	add	r3, pc, #44	; (adr r3, 8001c98 <invkine_CalOptAngle+0xd0>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fdec 	bl	800084c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ff94 	bl	8000ba8 <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
	angopt_Cal(ID, rawAngle);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe90 	bl	80019b0 <angopt_Cal>
	//------------------------------------------------------------------

}
 8001c90:	bf00      	nop
 8001c92:	374c      	adds	r7, #76	; 0x4c
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	54442d18 	.word	0x54442d18
 8001c9c:	400921fb 	.word	0x400921fb
 8001ca0:	40668000 	.word	0x40668000
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <invkine_CalSpeedVectorControl>:

float invkine_CalSpeedVectorControl(ModuleID ID)
{
 8001ca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cac:	b092      	sub	sp, #72	; 0x48
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
	float temp;
	WheelVector vect = swer_GetWheelVector(ID);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fc3c 	bl	8004534 <swer_GetWheelVector>
 8001cbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc0:	eef0 7a60 	vmov.f32	s15, s1
 8001cc4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001cc8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fc79 	bl	80045cc <swer_GetOptAngle>
	angopt_QuadRantCheckOutput(ID,angopt.currentAngle*M_PI/180);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	a33c      	add	r3, pc, #240	; (adr r3, 8001dd4 <invkine_CalSpeedVectorControl+0x12c>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc86 	bl	80005f8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <invkine_CalSpeedVectorControl+0x128>)
 8001cfa:	f7fe fda7 	bl	800084c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff4f 	bl	8000ba8 <__aeabi_d2f>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	ee00 2a10 	vmov	s0, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fdf0 	bl	80018f8 <angopt_QuadRantCheckOutput>
	temp = (float)angopt.direct * (60.0/(ROBOT_WHEEL_RADIUS_METER*2.0*M_PI)) * (sqrt(pow(vect.wheelVelX,2) + pow(vect.wheelVelY,2))) ;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fc0f 	bl	8000548 <__aeabi_f2d>
 8001d2a:	a325      	add	r3, pc, #148	; (adr r3, 8001dc0 <invkine_CalSpeedVectorControl+0x118>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc62 	bl	80005f8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001dc8 <invkine_CalSpeedVectorControl+0x120>
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f00e ff8a 	bl	8010c68 <pow>
 8001d54:	ec59 8b10 	vmov	r8, r9, d0
 8001d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbf4 	bl	8000548 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001dc8 <invkine_CalSpeedVectorControl+0x120>
 8001d68:	ec43 2b10 	vmov	d0, r2, r3
 8001d6c:	f00e ff7c 	bl	8010c68 <pow>
 8001d70:	ec53 2b10 	vmov	r2, r3, d0
 8001d74:	4640      	mov	r0, r8
 8001d76:	4649      	mov	r1, r9
 8001d78:	f7fe fa88 	bl	800028c <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b17 	vmov	d7, r2, r3
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	f00e ffdc 	bl	8010d48 <sqrt>
 8001d90:	ec53 2b10 	vmov	r2, r3, d0
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fc2e 	bl	80005f8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff00 	bl	8000ba8 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
	return temp;
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	ee07 3a90 	vmov	s15, r3
}
 8001db2:	eeb0 0a67 	vmov.f32	s0, s15
 8001db6:	3748      	adds	r7, #72	; 0x48
 8001db8:	46bd      	mov	sp, r7
 8001dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dbe:	bf00      	nop
 8001dc0:	644967bf 	.word	0x644967bf
 8001dc4:	406a869c 	.word	0x406a869c
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40000000 	.word	0x40000000
 8001dd0:	40668000 	.word	0x40668000
 8001dd4:	54442d18 	.word	0x54442d18
 8001dd8:	400921fb 	.word	0x400921fb

08001ddc <invkine_Implementation>:

HAL_StatusTypeDef  invkine_Implementation(ModuleID ID, float u, float v, float r,void (*ptnCpltCallback)(ModuleID,float, float))
{
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	b09d      	sub	sp, #116	; 0x74
 8001de0:	af0a      	add	r7, sp, #40	; 0x28
 8001de2:	4603      	mov	r3, r0
 8001de4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001de8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001dec:	ed87 1a02 	vstr	s2, [r7, #8]
 8001df0:	6079      	str	r1, [r7, #4]
 8001df2:	75fb      	strb	r3, [r7, #23]
//	HAL_TIM_Base_Start(&htim10);
//	__HAL_TIM_SET_COUNTER(&htim10,0);
	static float velocity = 0;

	invkine_CalWheelVector(ID, u, v, r);
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	ed97 1a02 	vldr	s2, [r7, #8]
 8001dfa:	edd7 0a03 	vldr	s1, [r7, #12]
 8001dfe:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fec4 	bl	8001b90 <invkine_CalWheelVector>
	if(u == 0&&v==0&&r==0)__NOP();
 8001e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d10f      	bne.n	8001e36 <invkine_Implementation+0x5a>
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d108      	bne.n	8001e36 <invkine_Implementation+0x5a>
 8001e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d101      	bne.n	8001e36 <invkine_Implementation+0x5a>
 8001e32:	bf00      	nop
 8001e34:	e003      	b.n	8001e3e <invkine_Implementation+0x62>
	else invkine_CalOptAngle(ID);
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fec5 	bl	8001bc8 <invkine_CalOptAngle>

	velocity = invkine_CalSpeedVectorControl(ID);
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <invkine_CalSpeedVectorControl>
 8001e46:	eef0 7a40 	vmov.f32	s15, s0
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <invkine_Implementation+0xf8>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	7dfa      	ldrb	r2, [r7, #23]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fbb7 	bl	80045cc <swer_GetOptAngle>
	if(u == 0&&v==0&&r==0)angopt.currentAngle= angopt.PreCurrAngle;
 8001e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	d10f      	bne.n	8001e8c <invkine_Implementation+0xb0>
 8001e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d108      	bne.n	8001e8c <invkine_Implementation+0xb0>
 8001e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d101      	bne.n	8001e8c <invkine_Implementation+0xb0>
 8001e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8a:	61fb      	str	r3, [r7, #28]
//	Count = __HAL_TIM_GET_COUNTER(&htim10);
//	HAL_TIM_Base_Stop(&htim10);
	ptnCpltCallback(ID,velocity,angopt.currentAngle);
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <invkine_Implementation+0xf8>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e96:	7dfa      	ldrb	r2, [r7, #23]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	eef0 0a47 	vmov.f32	s1, s14
 8001e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4798      	blx	r3
	angopt.PreCurrAngle = angopt.currentAngle;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
	swer_SetOptAngle(ID, angopt);
 8001eaa:	7dfe      	ldrb	r6, [r7, #23]
 8001eac:	466d      	mov	r5, sp
 8001eae:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	602b      	str	r3, [r5, #0]
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f002 fb5b 	bl	8004580 <swer_SetOptAngle>

	return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	374c      	adds	r7, #76	; 0x4c
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	200002d0 	.word	0x200002d0

08001ed8 <slave_SpeedRead>:

#include "Odometry.h"

odo_Param odo;

void slave_SpeedRead(slave_SpeadParam *sp, float count){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	ed87 0a00 	vstr	s0, [r7]
	sp->V = 0.045*2*M_PI*((count-sp->preCount)/DELTA_T)/(PULSE_PER_REV*4);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef0:	ed97 7a00 	vldr	s14, [r7]
 8001ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef8:	ee17 0a90 	vmov	r0, s15
 8001efc:	f7fe fb24 	bl	8000548 <__aeabi_f2d>
 8001f00:	a316      	add	r3, pc, #88	; (adr r3, 8001f5c <slave_SpeedRead+0x84>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fca1 	bl	800084c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	a314      	add	r3, pc, #80	; (adr r3, 8001f64 <slave_SpeedRead+0x8c>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <slave_SpeedRead+0x80>)
 8001f2a:	f7fe fc8f 	bl	800084c <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fe37 	bl	8000ba8 <__aeabi_d2f>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
	sp->preCount = count;
 8001f40:	edd7 7a00 	vldr	s15, [r7]
 8001f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f48:	ee17 2a90 	vmov	r2, s15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40a00000 	.word	0x40a00000
 8001f5c:	9999999a 	.word	0x9999999a
 8001f60:	3fa99999 	.word	0x3fa99999
 8001f64:	845a0bfd 	.word	0x845a0bfd
 8001f68:	3fd21877 	.word	0x3fd21877

08001f6c <odo_SetObj_SpAg>:

slave_SpeadParam odo_getSpeedBLDC_1(Slave_ID ID){return odo.slave[ID];}
void odo_SetObjSpeedBLDC(Slave_ID ID,slave_SpeadParam speed){odo.slave[ID] = speed;}

void odo_SetObj_SpAg(Slave_ID ID,CAN_SpeedBLDC_AngleDC spAg){odo.slave_SpAg[ID] = spAg;}
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	e883 0006 	stmia.w	r3, {r1, r2}
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <odo_SetObj_SpAg+0x34>)
 8001f80:	330a      	adds	r3, #10
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	1d3a      	adds	r2, r7, #4
 8001f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200002d4 	.word	0x200002d4
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <odo_OmegaToZeta>:

void odo_OmegaToZeta(zeta_Param *zeta, float* VxA, float* VyA)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	zeta->uOut 		= - 0.3333*VxA[0] + 0.0000*VyA[0] + 0.0000*VxA[1] - 0.3333*VyA[1] - 0.3333*VxA[2] + 0.0000*VyA[2] ;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fac5 	bl	8000548 <__aeabi_f2d>
 8001fbe:	a3bc      	add	r3, pc, #752	; (adr r3, 80022b0 <odo_OmegaToZeta+0x308>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fb18 	bl	80005f8 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fab7 	bl	8000548 <__aeabi_f2d>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	f7fe fb09 	bl	80005f8 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f94d 	bl	800028c <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa1 	bl	8000548 <__aeabi_f2d>
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f7fe faf3 	bl	80005f8 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe f937 	bl	800028c <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa8b 	bl	8000548 <__aeabi_f2d>
 8002032:	a3a1      	add	r3, pc, #644	; (adr r3, 80022b8 <odo_OmegaToZeta+0x310>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fade 	bl	80005f8 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4620      	mov	r0, r4
 8002042:	4629      	mov	r1, r5
 8002044:	f7fe f920 	bl	8000288 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3308      	adds	r3, #8
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa76 	bl	8000548 <__aeabi_f2d>
 800205c:	a396      	add	r3, pc, #600	; (adr r3, 80022b8 <odo_OmegaToZeta+0x310>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe fac9 	bl	80005f8 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f90b 	bl	8000288 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4614      	mov	r4, r2
 8002078:	461d      	mov	r5, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3308      	adds	r3, #8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa61 	bl	8000548 <__aeabi_f2d>
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f7fe fab3 	bl	80005f8 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f7fe f8f7 	bl	800028c <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fd7f 	bl	8000ba8 <__aeabi_d2f>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]
	zeta->vOut 		= - 0.0000*VxA[0] - 0.3333*VyA[0] + 0.3333*VxA[1] + 0.0000*VyA[1] - 0.0000*VxA[2] - 0.3333*VyA[2] ;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa47 	bl	8000548 <__aeabi_f2d>
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020c2:	f7fe fa99 	bl	80005f8 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4614      	mov	r4, r2
 80020cc:	461d      	mov	r5, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa38 	bl	8000548 <__aeabi_f2d>
 80020d8:	a377      	add	r3, pc, #476	; (adr r3, 80022b8 <odo_OmegaToZeta+0x310>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa8b 	bl	80005f8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f8cd 	bl	8000288 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4614      	mov	r4, r2
 80020f4:	461d      	mov	r5, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3304      	adds	r3, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa23 	bl	8000548 <__aeabi_f2d>
 8002102:	a36d      	add	r3, pc, #436	; (adr r3, 80022b8 <odo_OmegaToZeta+0x310>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fa76 	bl	80005f8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe f8ba 	bl	800028c <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa0e 	bl	8000548 <__aeabi_f2d>
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8a4 	bl	800028c <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3308      	adds	r3, #8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9f8 	bl	8000548 <__aeabi_f2d>
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f7fe fa4a 	bl	80005f8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe f88c 	bl	8000288 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3308      	adds	r3, #8
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	a34c      	add	r3, pc, #304	; (adr r3, 80022b8 <odo_OmegaToZeta+0x310>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa35 	bl	80005f8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe f877 	bl	8000288 <__aeabi_dsub>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fd01 	bl	8000ba8 <__aeabi_d2f>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
	zeta->rOut 	    = - 0.4419*VxA[0] + 1.3258*VyA[0] - 0.0000*VxA[1] + 0.8839*VyA[1] - 0.4419*VxA[2] - 1.3258*VyA[2] ;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	a342      	add	r3, pc, #264	; (adr r3, 80022c0 <odo_OmegaToZeta+0x318>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9bb 	bl	8000548 <__aeabi_f2d>
 80021d2:	a33d      	add	r3, pc, #244	; (adr r3, 80022c8 <odo_OmegaToZeta+0x320>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe fa0e 	bl	80005f8 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe f852 	bl	800028c <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	461d      	mov	r5, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3304      	adds	r3, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f9a6 	bl	8000548 <__aeabi_f2d>
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	f7fe f9f8 	bl	80005f8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f83a 	bl	8000288 <__aeabi_dsub>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f990 	bl	8000548 <__aeabi_f2d>
 8002228:	a329      	add	r3, pc, #164	; (adr r3, 80022d0 <odo_OmegaToZeta+0x328>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f9e3 	bl	80005f8 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f7fe f827 	bl	800028c <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3308      	adds	r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	a321      	add	r3, pc, #132	; (adr r3, 80022d8 <odo_OmegaToZeta+0x330>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f9ce 	bl	80005f8 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f810 	bl	8000288 <__aeabi_dsub>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3308      	adds	r3, #8
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <odo_OmegaToZeta+0x320>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4620      	mov	r0, r4
 800228c:	4629      	mov	r1, r5
 800228e:	f7fd fffb 	bl	8000288 <__aeabi_dsub>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fc85 	bl	8000ba8 <__aeabi_d2f>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	f3af 8000 	nop.w
 80022b0:	85f06f69 	.word	0x85f06f69
 80022b4:	bfd554c9 	.word	0xbfd554c9
 80022b8:	85f06f69 	.word	0x85f06f69
 80022bc:	3fd554c9 	.word	0x3fd554c9
 80022c0:	f0068db9 	.word	0xf0068db9
 80022c4:	bfdc4816 	.word	0xbfdc4816
 80022c8:	0f9096bc 	.word	0x0f9096bc
 80022cc:	3ff5367a 	.word	0x3ff5367a
 80022d0:	a71de69b 	.word	0xa71de69b
 80022d4:	3fec48e8 	.word	0x3fec48e8
 80022d8:	f0068db9 	.word	0xf0068db9
 80022dc:	3fdc4816 	.word	0x3fdc4816

080022e0 <odo_GetRout>:

float odo_GetUout(){return odo.zeta.uOut;}
float odo_GetVout(){return odo.zeta.vOut;}
float odo_GetRout(){return odo.zeta.rOut;}
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <odo_GetRout+0x18>)
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eeb0 0a67 	vmov.f32	s0, s15
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	200002d4 	.word	0x200002d4

080022fc <odo_GetPoseX>:

float odo_GetPoseX(){return odo.pose.poseX;}
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <odo_GetPoseX+0x18>)
 8002302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	200002d4 	.word	0x200002d4

08002318 <odo_GetPoseY>:
float odo_GetPoseY(){return odo.pose.poseY;}
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <odo_GetPoseY+0x18>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	200002d4 	.word	0x200002d4

08002334 <odo_GetPoseTheta>:
float odo_GetPoseTheta(){return odo.pose.poseTheta;}
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <odo_GetPoseTheta+0x18>)
 800233a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	200002d4 	.word	0x200002d4

08002350 <odo_EulerCal>:

void odo_EulerCal()
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	af00      	add	r7, sp, #0
	odo.pose.poseTheta +=  odo.zeta.rOut*DELTA_T;
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <odo_EulerCal+0x1f8>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f8f4 	bl	8000548 <__aeabi_f2d>
 8002360:	4604      	mov	r4, r0
 8002362:	460d      	mov	r5, r1
 8002364:	4b78      	ldr	r3, [pc, #480]	; (8002548 <odo_EulerCal+0x1f8>)
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8ed 	bl	8000548 <__aeabi_f2d>
 800236e:	a372      	add	r3, pc, #456	; (adr r3, 8002538 <odo_EulerCal+0x1e8>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f940 	bl	80005f8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fd ff84 	bl	800028c <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fc0c 	bl	8000ba8 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	4a6d      	ldr	r2, [pc, #436]	; (8002548 <odo_EulerCal+0x1f8>)
 8002394:	6753      	str	r3, [r2, #116]	; 0x74
	odo.pose.poseX 	   += (odo.zeta.uOut*cos(odo.pose.poseTheta) - odo.zeta.vOut*sin(odo.pose.poseTheta))*DELTA_T;
 8002396:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <odo_EulerCal+0x1f8>)
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8d4 	bl	8000548 <__aeabi_f2d>
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <odo_EulerCal+0x1f8>)
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4680      	mov	r8, r0
 80023b0:	4689      	mov	r9, r1
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <odo_EulerCal+0x1f8>)
 80023b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	ec43 2b10 	vmov	d0, r2, r3
 80023c4:	f00e fcec 	bl	8010da0 <cos>
 80023c8:	ec53 2b10 	vmov	r2, r3, d0
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fe f912 	bl	80005f8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4692      	mov	sl, r2
 80023da:	469b      	mov	fp, r3
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <odo_EulerCal+0x1f8>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8b1 	bl	8000548 <__aeabi_f2d>
 80023e6:	4680      	mov	r8, r0
 80023e8:	4689      	mov	r9, r1
 80023ea:	4b57      	ldr	r3, [pc, #348]	; (8002548 <odo_EulerCal+0x1f8>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8aa 	bl	8000548 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	ec43 2b10 	vmov	d0, r2, r3
 80023fc:	f00e fd24 	bl	8010e48 <sin>
 8002400:	ec53 2b10 	vmov	r2, r3, d0
 8002404:	4640      	mov	r0, r8
 8002406:	4649      	mov	r1, r9
 8002408:	f7fe f8f6 	bl	80005f8 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4650      	mov	r0, sl
 8002412:	4659      	mov	r1, fp
 8002414:	f7fd ff38 	bl	8000288 <__aeabi_dsub>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	a345      	add	r3, pc, #276	; (adr r3, 8002538 <odo_EulerCal+0x1e8>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe f8e7 	bl	80005f8 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fd ff2b 	bl	800028c <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbb3 	bl	8000ba8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4a40      	ldr	r2, [pc, #256]	; (8002548 <odo_EulerCal+0x1f8>)
 8002446:	66d3      	str	r3, [r2, #108]	; 0x6c
	odo.pose.poseY 	   += (odo.zeta.uOut*sin(odo.pose.poseTheta) + odo.zeta.vOut*cos(odo.pose.poseTheta))*DELTA_T;
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <odo_EulerCal+0x1f8>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f87b 	bl	8000548 <__aeabi_f2d>
 8002452:	4604      	mov	r4, r0
 8002454:	460d      	mov	r5, r1
 8002456:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <odo_EulerCal+0x1f8>)
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f874 	bl	8000548 <__aeabi_f2d>
 8002460:	4680      	mov	r8, r0
 8002462:	4689      	mov	r9, r1
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <odo_EulerCal+0x1f8>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f86d 	bl	8000548 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	ec43 2b10 	vmov	d0, r2, r3
 8002476:	f00e fce7 	bl	8010e48 <sin>
 800247a:	ec53 2b10 	vmov	r2, r3, d0
 800247e:	4640      	mov	r0, r8
 8002480:	4649      	mov	r1, r9
 8002482:	f7fe f8b9 	bl	80005f8 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4692      	mov	sl, r2
 800248c:	469b      	mov	fp, r3
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <odo_EulerCal+0x1f8>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f858 	bl	8000548 <__aeabi_f2d>
 8002498:	4680      	mov	r8, r0
 800249a:	4689      	mov	r9, r1
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <odo_EulerCal+0x1f8>)
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f851 	bl	8000548 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ec43 2b10 	vmov	d0, r2, r3
 80024ae:	f00e fc77 	bl	8010da0 <cos>
 80024b2:	ec53 2b10 	vmov	r2, r3, d0
 80024b6:	4640      	mov	r0, r8
 80024b8:	4649      	mov	r1, r9
 80024ba:	f7fe f89d 	bl	80005f8 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4650      	mov	r0, sl
 80024c4:	4659      	mov	r1, fp
 80024c6:	f7fd fee1 	bl	800028c <__adddf3>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	a319      	add	r3, pc, #100	; (adr r3, 8002538 <odo_EulerCal+0x1e8>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe f88e 	bl	80005f8 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fd fed2 	bl	800028c <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb5a 	bl	8000ba8 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <odo_EulerCal+0x1f8>)
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
	odo.pose.poseTheta_Deg = odo.pose.poseTheta*180/M_PI;
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <odo_EulerCal+0x1f8>)
 80024fc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002500:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800254c <odo_EulerCal+0x1fc>
 8002504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002508:	ee17 0a90 	vmov	r0, s15
 800250c:	f7fe f81c 	bl	8000548 <__aeabi_f2d>
 8002510:	a30b      	add	r3, pc, #44	; (adr r3, 8002540 <odo_EulerCal+0x1f0>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fe f999 	bl	800084c <__aeabi_ddiv>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fb41 	bl	8000ba8 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <odo_EulerCal+0x1f8>)
 800252a:	6793      	str	r3, [r2, #120]	; 0x78
}
 800252c:	bf00      	nop
 800252e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	9999999a 	.word	0x9999999a
 800253c:	3fa99999 	.word	0x3fa99999
 8002540:	54442d18 	.word	0x54442d18
 8002544:	400921fb 	.word	0x400921fb
 8002548:	200002d4 	.word	0x200002d4
 800254c:	43340000 	.word	0x43340000

08002550 <odo_PosCal>:

void odo_PosCal(){
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
	for (int i = 0;i<=Slave3;i++){
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	e0c1      	b.n	80026e0 <odo_PosCal+0x190>
		slave_SpeedRead(&odo.slave[i], odo.slave_SpAg[i].bldcSpeed);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4a68      	ldr	r2, [pc, #416]	; (8002708 <odo_PosCal+0x1b8>)
 8002568:	441a      	add	r2, r3
 800256a:	4967      	ldr	r1, [pc, #412]	; (8002708 <odo_PosCal+0x1b8>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	330a      	adds	r3, #10
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257e:	eeb0 0a67 	vmov.f32	s0, s15
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fca8 	bl	8001ed8 <slave_SpeedRead>
		odo.slave[i].Vx = odo.slave[i].V * cos( odo.slave_SpAg[i].dcAngle*M_PI/180);
 8002588:	495f      	ldr	r1, [pc, #380]	; (8002708 <odo_PosCal+0x1b8>)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffd5 	bl	8000548 <__aeabi_f2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4a59      	ldr	r2, [pc, #356]	; (8002708 <odo_PosCal+0x1b8>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	330a      	adds	r3, #10
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3308      	adds	r3, #8
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_f2d>
 80025b6:	a352      	add	r3, pc, #328	; (adr r3, 8002700 <odo_PosCal+0x1b0>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fe f81c 	bl	80005f8 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <odo_PosCal+0x1bc>)
 80025ce:	f7fe f93d 	bl	800084c <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	ec43 2b17 	vmov	d7, r2, r3
 80025da:	eeb0 0a47 	vmov.f32	s0, s14
 80025de:	eef0 0a67 	vmov.f32	s1, s15
 80025e2:	f00e fbdd 	bl	8010da0 <cos>
 80025e6:	ec53 2b10 	vmov	r2, r3, d0
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fad5 	bl	8000ba8 <__aeabi_d2f>
 80025fe:	4601      	mov	r1, r0
 8002600:	4841      	ldr	r0, [pc, #260]	; (8002708 <odo_PosCal+0x1b8>)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4403      	add	r3, r0
 800260e:	3304      	adds	r3, #4
 8002610:	6019      	str	r1, [r3, #0]
		odo.slave[i].Vy = odo.slave[i].V * sin( odo.slave_SpAg[i].dcAngle*M_PI/180);
 8002612:	493d      	ldr	r1, [pc, #244]	; (8002708 <odo_PosCal+0x1b8>)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff90 	bl	8000548 <__aeabi_f2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	4a36      	ldr	r2, [pc, #216]	; (8002708 <odo_PosCal+0x1b8>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	330a      	adds	r3, #10
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	3308      	adds	r3, #8
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff84 	bl	8000548 <__aeabi_f2d>
 8002640:	a32f      	add	r3, pc, #188	; (adr r3, 8002700 <odo_PosCal+0x1b0>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd ffd7 	bl	80005f8 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <odo_PosCal+0x1bc>)
 8002658:	f7fe f8f8 	bl	800084c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	ec43 2b17 	vmov	d7, r2, r3
 8002664:	eeb0 0a47 	vmov.f32	s0, s14
 8002668:	eef0 0a67 	vmov.f32	s1, s15
 800266c:	f00e fbec 	bl	8010e48 <sin>
 8002670:	ec53 2b10 	vmov	r2, r3, d0
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fd ffbe 	bl	80005f8 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe fa90 	bl	8000ba8 <__aeabi_d2f>
 8002688:	4601      	mov	r1, r0
 800268a:	481f      	ldr	r0, [pc, #124]	; (8002708 <odo_PosCal+0x1b8>)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4403      	add	r3, r0
 8002698:	3308      	adds	r3, #8
 800269a:	6019      	str	r1, [r3, #0]
		odo.Vx[i] = odo.slave[i].Vx;
 800269c:	491a      	ldr	r1, [pc, #104]	; (8002708 <odo_PosCal+0x1b8>)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3304      	adds	r3, #4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4916      	ldr	r1, [pc, #88]	; (8002708 <odo_PosCal+0x1b8>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	331e      	adds	r3, #30
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3304      	adds	r3, #4
 80026ba:	601a      	str	r2, [r3, #0]
		odo.Vy[i] = odo.slave[i].Vy;
 80026bc:	4912      	ldr	r1, [pc, #72]	; (8002708 <odo_PosCal+0x1b8>)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3308      	adds	r3, #8
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	490e      	ldr	r1, [pc, #56]	; (8002708 <odo_PosCal+0x1b8>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3322      	adds	r3, #34	; 0x22
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	601a      	str	r2, [r3, #0]
	for (int i = 0;i<=Slave3;i++){
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3301      	adds	r3, #1
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f77f af3a 	ble.w	800255c <odo_PosCal+0xc>
	}

	odo_OmegaToZeta(&odo.zeta, odo.Vx, odo.Vy);
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <odo_PosCal+0x1c0>)
 80026ea:	490a      	ldr	r1, [pc, #40]	; (8002714 <odo_PosCal+0x1c4>)
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <odo_PosCal+0x1c8>)
 80026ee:	f7ff fc5b 	bl	8001fa8 <odo_OmegaToZeta>

	odo_EulerCal();
 80026f2:	f7ff fe2d 	bl	8002350 <odo_EulerCal>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdb0      	pop	{r4, r5, r7, pc}
 80026fe:	bf00      	nop
 8002700:	54442d18 	.word	0x54442d18
 8002704:	400921fb 	.word	0x400921fb
 8002708:	200002d4 	.word	0x200002d4
 800270c:	40668000 	.word	0x40668000
 8002710:	2000035c 	.word	0x2000035c
 8002714:	20000350 	.word	0x20000350
 8002718:	2000031c 	.word	0x2000031c

0800271c <odo_GetPose>:

odo_Pose odo_GetPose(){
 800271c:	b490      	push	{r4, r7}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
	return odo.pose;
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <odo_GetPose+0x44>)
 8002724:	f107 0410 	add.w	r4, r7, #16
 8002728:	336c      	adds	r3, #108	; 0x6c
 800272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	6979      	ldr	r1, [r7, #20]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	ee06 0a10 	vmov	s12, r0
 800273c:	ee06 1a90 	vmov	s13, r1
 8002740:	ee07 2a10 	vmov	s14, r2
 8002744:	ee07 3a90 	vmov	s15, r3
}
 8002748:	eeb0 0a46 	vmov.f32	s0, s12
 800274c:	eef0 0a66 	vmov.f32	s1, s13
 8002750:	eeb0 1a47 	vmov.f32	s2, s14
 8002754:	eef0 1a67 	vmov.f32	s3, s15
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bc90      	pop	{r4, r7}
 800275e:	4770      	bx	lr
 8002760:	200002d4 	.word	0x200002d4

08002764 <odo_SetPoseTheta>:
}

zeta_Param odo_GetZeta(){return odo.zeta;}
void odo_SetZeta(zeta_Param zeta){odo.zeta = zeta;}

void odo_SetPoseTheta(float theta){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	ed87 0a01 	vstr	s0, [r7, #4]
	odo.pose.poseTheta = theta;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <odo_SetPoseTheta+0x1c>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200002d4 	.word	0x200002d4

08002784 <PD_SetParameter>:
 *      Author: Admin
 */
#include "PositionControl.h"

void PD_SetParameter(pd_Param *pd, float kp,float kd,float alpha)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002790:	edc7 0a01 	vstr	s1, [r7, #4]
 8002794:	ed87 1a00 	vstr	s2, [r7]
	pd->kP = kp;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
	pd->kD = kd;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
	pd->Alpha = alpha;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <PD_SetSaturate>:

void PD_SetSaturate(pd_Param *pd, float uAbove, float uBelow)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	ed87 0a02 	vstr	s0, [r7, #8]
 80027c2:	edc7 0a01 	vstr	s1, [r7, #4]
	pd->uAbove = uAbove;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
	pd->uBelow = uBelow;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <PD_Cal>:

void PD_Cal(pd_Param *pd, float Target,float Current)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027ec:	edc7 0a01 	vstr	s1, [r7, #4]
	pd->e = Target - Current;
 80027f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80027f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	edc3 7a00 	vstr	s15, [r3]
	pd->uP = pd->kP*pd->e;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	ed93 7a02 	vldr	s14, [r3, #8]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	edc3 7a04 	vstr	s15, [r3, #16]
	pd->uD = pd->kD*(pd->e - pd->pre)/DELTA_T;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	ed93 7a03 	vldr	s14, [r3, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	edd3 6a00 	vldr	s13, [r3]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	edd3 7a01 	vldr	s15, [r3, #4]
 800282a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fe87 	bl	8000548 <__aeabi_f2d>
 800283a:	a32f      	add	r3, pc, #188	; (adr r3, 80028f8 <PD_Cal+0x118>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fe f804 	bl	800084c <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f9ac 	bl	8000ba8 <__aeabi_d2f>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	615a      	str	r2, [r3, #20]
	pd->uDf = (1-pd->Alpha)*pd->uDfpre+(pd->Alpha)*pd->uD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	edd3 7a08 	vldr	s15, [r3, #32]
 800285c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	edd3 7a07 	vldr	s15, [r3, #28]
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edd3 6a08 	vldr	s13, [r3, #32]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	edd3 7a05 	vldr	s15, [r3, #20]
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	edc3 7a06 	vstr	s15, [r3, #24]
	pd->uDfpre = pd->uDf;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	61da      	str	r2, [r3, #28]
	pd->pre = pd->e;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]

	pd->u = pd->uP + pd->uD;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ed93 7a04 	vldr	s14, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(pd->u > pd->uAbove)pd->u = pd->uAbove;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80028ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	dd04      	ble.n	80028ce <PD_Cal+0xee>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
	else if (pd->u < pd->uBelow)pd->u = pd->uBelow;
}
 80028cc:	e00f      	b.n	80028ee <PD_Cal+0x10e>
	else if (pd->u < pd->uBelow)pd->u = pd->uBelow;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d400      	bmi.n	80028e6 <PD_Cal+0x106>
}
 80028e4:	e003      	b.n	80028ee <PD_Cal+0x10e>
	else if (pd->u < pd->uBelow)pd->u = pd->uBelow;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	9999999a 	.word	0x9999999a
 80028fc:	3fa99999 	.word	0x3fa99999

08002900 <trajecPlan_Cal>:

void trajecPlan_Cal(trajec_Param *trajec){
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	trajec->a0 = trajec->P0;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	605a      	str	r2, [r3, #4]
	trajec->a1 = trajec->v0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
	trajec->a2 = (3/(trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) - (2/trajec->tf)*trajec->v0 - (1/trajec->tf)*trajec->vf;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002928:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800292c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edd3 6a08 	vldr	s13, [r3, #32]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edd3 7a07 	vldr	s15, [r3, #28]
 800293c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800294a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800294e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002966:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800296a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edc3 7a03 	vstr	s15, [r3, #12]
	trajec->a3 = (-2/(trajec->tf*trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) + (1/(trajec->tf*trajec->tf))*(trajec->vf + trajec->v0);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80029a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	edd3 6a08 	vldr	s13, [r3, #32]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80029b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80029cc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edc3 7a04 	vstr	s15, [r3, #16]

	if (trajec->t > trajec->tf) trajec->t = trajec->tf;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	dd03      	ble.n	8002a0c <trajecPlan_Cal+0x10c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	601a      	str	r2, [r3, #0]

	trajec->xTrajec = trajec->a0 + trajec->a1*trajec->t + trajec->a2*trajec->t*trajec->t + trajec->a3*trajec->t*trajec->t*trajec->t;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	edc3 7a05 	vstr	s15, [r3, #20]
	trajec->xdottraject = trajec->a1 + 2*trajec->a2*trajec->t + 3* trajec->a3*trajec->t*trajec->t;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a7e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a96:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002a9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edc3 7a06 	vstr	s15, [r3, #24]

	if(trajec->Pf == trajec->P0){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ac8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	d107      	bne.n	8002ae2 <trajecPlan_Cal+0x1e2>
		trajec->xTrajec = trajec->Pf;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	615a      	str	r2, [r3, #20]
		trajec->xdottraject = 0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
	}
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <trajecPlan_SetParam>:

void trajecPlan_SetParam(trajec_Param *trajec,float P0,float Pf,float tf,float v0,float vf)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6178      	str	r0, [r7, #20]
 8002af6:	ed87 0a04 	vstr	s0, [r7, #16]
 8002afa:	edc7 0a03 	vstr	s1, [r7, #12]
 8002afe:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b02:	edc7 1a01 	vstr	s3, [r7, #4]
 8002b06:	ed87 2a00 	vstr	s4, [r7]
	trajec -> t = 0;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
	trajec -> P0 = P0;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	61da      	str	r2, [r3, #28]
	trajec -> Pf = Pf;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
	trajec -> tf = tf;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
	trajec -> v0 = v0;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
	trajec -> vf = vf;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <process_Init>:
			process.pdTheta = Param;
			break;
	}
}

void process_Init(){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002b40:	213c      	movs	r1, #60	; 0x3c
 8002b42:	4828      	ldr	r0, [pc, #160]	; (8002be4 <process_Init+0xa8>)
 8002b44:	f007 fb3e 	bl	800a1c4 <HAL_TIM_Encoder_Start>
	process_ResetIMU();
 8002b48:	f000 f96a 	bl	8002e20 <process_ResetIMU>
	process.trajecX.tf = 0;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <process_Init+0xac>)
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	process.trajecY.tf = 0;
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <process_Init+0xac>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	process.trajecTheta.tf = 0;
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <process_Init+0xac>)
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	PD_SetParameter(&process.pdX, KP_INIT_X, KD_INIT_X, ALPHA_INIT_X);
 8002b6a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002bec <process_Init+0xb0>
 8002b6e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002bec <process_Init+0xb0>
 8002b72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b76:	481c      	ldr	r0, [pc, #112]	; (8002be8 <process_Init+0xac>)
 8002b78:	f7ff fe04 	bl	8002784 <PD_SetParameter>
	PD_SetParameter(&process.pdY, KP_INIT_Y, KD_INIT_Y, ALPHA_INIT_Y);
 8002b7c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8002bec <process_Init+0xb0>
 8002b80:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002bec <process_Init+0xb0>
 8002b84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b88:	4819      	ldr	r0, [pc, #100]	; (8002bf0 <process_Init+0xb4>)
 8002b8a:	f7ff fdfb 	bl	8002784 <PD_SetParameter>
	PD_SetParameter(&process.pdTheta, KP_INIT_THETA, KD_INIT_THETA, ALPHA_INIT_THETA);
 8002b8e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8002bec <process_Init+0xb0>
 8002b92:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002bec <process_Init+0xb0>
 8002b96:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002bf4 <process_Init+0xb8>
 8002b9a:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <process_Init+0xbc>)
 8002b9c:	f7ff fdf2 	bl	8002784 <PD_SetParameter>

	PD_SetSaturate(&process.pdX, LIMIT_ABOVE_INIT_X, LIMIT_BELOW_INIT_X);
 8002ba0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002ba4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ba8:	480f      	ldr	r0, [pc, #60]	; (8002be8 <process_Init+0xac>)
 8002baa:	f7ff fe04 	bl	80027b6 <PD_SetSaturate>
	PD_SetSaturate(&process.pdY, LIMIT_ABOVE_INIT_Y, LIMIT_BELOW_INIT_Y);
 8002bae:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002bb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bb6:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <process_Init+0xb4>)
 8002bb8:	f7ff fdfd 	bl	80027b6 <PD_SetSaturate>
	PD_SetSaturate(&process.pdTheta, LIMIT_ABOVE_INIT_THETA, LIMIT_BELOW_INIT_THETA);
 8002bbc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002bc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <process_Init+0xbc>)
 8002bc6:	f7ff fdf6 	bl	80027b6 <PD_SetSaturate>

	encoder_Init(&FloatingEnc, &htim1, 200, DELTA_T);
 8002bca:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002bfc <process_Init+0xc0>
 8002bce:	22c8      	movs	r2, #200	; 0xc8
 8002bd0:	4904      	ldr	r1, [pc, #16]	; (8002be4 <process_Init+0xa8>)
 8002bd2:	480b      	ldr	r0, [pc, #44]	; (8002c00 <process_Init+0xc4>)
 8002bd4:	f7fe fa38 	bl	8001048 <encoder_Init>
	process_setVal_PutBall(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f000 fe81 	bl	80038e0 <process_setVal_PutBall>

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200008e8 	.word	0x200008e8
 8002be8:	20000368 	.word	0x20000368
 8002bec:	00000000 	.word	0x00000000
 8002bf0:	20000398 	.word	0x20000398
 8002bf4:	3f99999a 	.word	0x3f99999a
 8002bf8:	200003c8 	.word	0x200003c8
 8002bfc:	3d4ccccd 	.word	0x3d4ccccd
 8002c00:	200004cc 	.word	0x200004cc

08002c04 <process_SetFloatingDis>:

void process_SetFloatingDis()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	process.floating_dis = encoder_GetFloatingDis(&FloatingEnc);
 8002c08:	4806      	ldr	r0, [pc, #24]	; (8002c24 <process_SetFloatingDis+0x20>)
 8002c0a:	f7fe fa52 	bl	80010b2 <encoder_GetFloatingDis>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c16:	ee17 2a90 	vmov	r2, s15
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <process_SetFloatingDis+0x24>)
 8002c1c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200004cc 	.word	0x200004cc
 8002c28:	20000368 	.word	0x20000368

08002c2c <process_ResetFloatingDis>:

void process_ResetFloatingDis()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	encoder_ResetCount(&FloatingEnc);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <process_ResetFloatingDis+0x10>)
 8002c32:	f7fe fa21 	bl	8001078 <encoder_ResetCount>
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004cc 	.word	0x200004cc

08002c40 <process_GetCtrSignal>:
float process_GetCtrSignal(Signal_type ID)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	switch (ID) {
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d827      	bhi.n	8002ca0 <process_GetCtrSignal+0x60>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <process_GetCtrSignal+0x18>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c79 	.word	0x08002c79
 8002c60:	08002c81 	.word	0x08002c81
 8002c64:	08002c89 	.word	0x08002c89
 8002c68:	08002c91 	.word	0x08002c91
 8002c6c:	08002c99 	.word	0x08002c99
		case U:
			return process.u;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c72:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002c76:	e016      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		case V:
			return process.v;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c7a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8002c7e:	e012      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		case R:
			return process.r;
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c82:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002c86:	e00e      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		case U_Control:
			return process.uControl;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c8a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002c8e:	e00a      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		case V_Control:
			return process.vControl;
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002c96:	e006      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		case R_Control:
			return process.rControl;
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <process_GetCtrSignal+0x78>)
 8002c9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002c9e:	e002      	b.n	8002ca6 <process_GetCtrSignal+0x66>
			break;
		default:
			break;
 8002ca0:	bf00      	nop
	}
	return 0;
 8002ca2:	f04f 0300 	mov.w	r3, #0
}
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	20000368 	.word	0x20000368

08002cbc <process_SetCtrSignal>:
void process_SetCtrSignal(Signal_type ID,float Sig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	ed87 0a00 	vstr	s0, [r7]
 8002cc8:	71fb      	strb	r3, [r7, #7]
	switch (ID) {
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d828      	bhi.n	8002d22 <process_SetCtrSignal+0x66>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <process_SetCtrSignal+0x1c>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002cf1 	.word	0x08002cf1
 8002cdc:	08002cfb 	.word	0x08002cfb
 8002ce0:	08002d03 	.word	0x08002d03
 8002ce4:	08002d0b 	.word	0x08002d0b
 8002ce8:	08002d13 	.word	0x08002d13
 8002cec:	08002d1b 	.word	0x08002d1b
		case U:
			process.u = Sig;
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
			break;
 8002cf8:	e014      	b.n	8002d24 <process_SetCtrSignal+0x68>
		case V:
			process.v = Sig;
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
		case R:
			process.r = Sig;
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		case U_Control:
			process.uControl = Sig;
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		case V_Control:
			process.vControl = Sig;
 8002d12:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		case R_Control:
			process.rControl = Sig;
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <process_SetCtrSignal+0x74>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		default:
			break;
 8002d22:	bf00      	nop
	}
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	20000368 	.word	0x20000368

08002d34 <process_ChangeState>:

void process_ChangeState(){process.state+=1;}
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <process_ChangeState+0x1c>)
 8002d3a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <process_ChangeState+0x1c>)
 8002d42:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	20000368 	.word	0x20000368

08002d54 <PD_Enable>:

void PD_Enable(PD_Type ID){
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	switch (ID) {
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d010      	beq.n	8002d86 <PD_Enable+0x32>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	dc13      	bgt.n	8002d90 <PD_Enable+0x3c>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <PD_Enable+0x1e>
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <PD_Enable+0x28>
			break;
		case PD_Theta:
			process.stopUsePDTheta = 0;
			break;
		default:
			break;
 8002d70:	e00e      	b.n	8002d90 <PD_Enable+0x3c>
			process.stopUsePDX = 0;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <PD_Enable+0x4c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
			break;
 8002d7a:	e00a      	b.n	8002d92 <PD_Enable+0x3e>
			process.stopUsePDY = 0;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <PD_Enable+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
			break;
 8002d84:	e005      	b.n	8002d92 <PD_Enable+0x3e>
			process.stopUsePDTheta = 0;
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <PD_Enable+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
			break;
 8002d8e:	e000      	b.n	8002d92 <PD_Enable+0x3e>
			break;
 8002d90:	bf00      	nop
	}
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000368 	.word	0x20000368

08002da4 <PD_Disable>:

void PD_Disable(PD_Type ID){
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
	switch (ID) {
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d010      	beq.n	8002dd6 <PD_Disable+0x32>
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	dc13      	bgt.n	8002de0 <PD_Disable+0x3c>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <PD_Disable+0x1e>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <PD_Disable+0x28>
			break;
		case PD_Theta:
			process.stopUsePDTheta = 1;
			break;
		default:
			break;
 8002dc0:	e00e      	b.n	8002de0 <PD_Disable+0x3c>
			process.stopUsePDX = 1;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <PD_Disable+0x4c>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
			break;
 8002dca:	e00a      	b.n	8002de2 <PD_Disable+0x3e>
			process.stopUsePDY = 1;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <PD_Disable+0x4c>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
			break;
 8002dd4:	e005      	b.n	8002de2 <PD_Disable+0x3e>
			process.stopUsePDTheta = 1;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <PD_Disable+0x4c>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
			break;
 8002dde:	e000      	b.n	8002de2 <PD_Disable+0x3e>
			break;
 8002de0:	bf00      	nop
	}
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000368 	.word	0x20000368

08002df4 <process_ReadIMU>:
		process.ssCheck = 0;
		process_ChangeState();
	}
}
void process_ReadIMU()
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_ReadBuff, strlen(tx_ReadBuff), 100);
 8002df8:	4807      	ldr	r0, [pc, #28]	; (8002e18 <process_ReadIMU+0x24>)
 8002dfa:	f7fd fa39 	bl	8000270 <strlen>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	2364      	movs	r3, #100	; 0x64
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <process_ReadIMU+0x24>)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <process_ReadIMU+0x28>)
 8002e08:	f008 f911 	bl	800b02e <HAL_UART_Transmit>
	osDelay(IMU_Wait);
 8002e0c:	2006      	movs	r0, #6
 8002e0e:	f009 fbf6 	bl	800c5fe <osDelay>

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	20000a50 	.word	0x20000a50

08002e20 <process_ResetIMU>:
void process_ResetIMU()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_ResetBuff, strlen(tx_ResetBuff), 100);
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <process_ResetIMU+0x24>)
 8002e26:	f7fd fa23 	bl	8000270 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	2364      	movs	r3, #100	; 0x64
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <process_ResetIMU+0x24>)
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <process_ResetIMU+0x28>)
 8002e34:	f008 f8fb 	bl	800b02e <HAL_UART_Transmit>
	osDelay(IMU_Wait);
 8002e38:	2006      	movs	r0, #6
 8002e3a:	f009 fbe0 	bl	800c5fe <osDelay>
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000
 8002e48:	20000a50 	.word	0x20000a50
 8002e4c:	00000000 	.word	0x00000000

08002e50 <process_SetYaw>:

void process_SetYaw(float currAng){process.yaw = currAng*M_PI/180;}
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fb74 	bl	8000548 <__aeabi_f2d>
 8002e60:	a30f      	add	r3, pc, #60	; (adr r3, 8002ea0 <process_SetYaw+0x50>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbc7 	bl	80005f8 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <process_SetYaw+0x48>)
 8002e78:	f7fd fce8 	bl	800084c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd fe90 	bl	8000ba8 <__aeabi_d2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <process_SetYaw+0x4c>)
 8002e8c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40668000 	.word	0x40668000
 8002e9c:	20000368 	.word	0x20000368
 8002ea0:	54442d18 	.word	0x54442d18
 8002ea4:	400921fb 	.word	0x400921fb

08002ea8 <process_Accel_FloatingEnc>:
}



void process_Accel_FloatingEnc(float Angle,float maxSpeed,float s,float accel)
{
 8002ea8:	b5b0      	push	{r4, r5, r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	ed87 0a03 	vstr	s0, [r7, #12]
 8002eb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002eb6:	ed87 1a01 	vstr	s2, [r7, #4]
 8002eba:	edc7 1a00 	vstr	s3, [r7]

	if ((process.floating_dis < 500)&&(process.chasis_Vector_TargetSpeed < maxSpeed))
 8002ebe:	4bb0      	ldr	r3, [pc, #704]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002ec0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002ec4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec8:	da17      	bge.n	8002efa <process_Accel_FloatingEnc+0x52>
 8002eca:	4bad      	ldr	r3, [pc, #692]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002ecc:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8002ed0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002edc:	dd0d      	ble.n	8002efa <process_Accel_FloatingEnc+0x52>
		{
			process.chasis_Vector_TargetSpeed += accel;
 8002ede:	4ba8      	ldr	r3, [pc, #672]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002ee0:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8002ee4:	edd7 7a00 	vldr	s15, [r7]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	4ba4      	ldr	r3, [pc, #656]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002eee:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
			process.Process_Running = 0;
 8002ef2:	4ba3      	ldr	r3, [pc, #652]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		}

	if ((process.floating_dis > 500)&&(process.floating_dis <(s -500)))process.chasis_Vector_TargetSpeed = maxSpeed;
 8002efa:	4ba1      	ldr	r3, [pc, #644]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002efc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f04:	dd15      	ble.n	8002f32 <process_Accel_FloatingEnc+0x8a>
 8002f06:	4b9e      	ldr	r3, [pc, #632]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f08:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f18:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8003184 <process_Accel_FloatingEnc+0x2dc>
 8002f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	d503      	bpl.n	8002f32 <process_Accel_FloatingEnc+0x8a>
 8002f2a:	4a95      	ldr	r2, [pc, #596]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158

	if (((process.floating_dis > (s-500))&&(process.floating_dis <= (s-400)))) {
 8002f32:	4b93      	ldr	r3, [pc, #588]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f34:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f44:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8003184 <process_Accel_FloatingEnc+0x2dc>
 8002f48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	dd1a      	ble.n	8002f8c <process_Accel_FloatingEnc+0xe4>
 8002f56:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f68:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003188 <process_Accel_FloatingEnc+0x2e0>
 8002f6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d808      	bhi.n	8002f8c <process_Accel_FloatingEnc+0xe4>
		process.chasis_Vector_TargetSpeed = maxSpeed/2;
 8002f7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f86:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f88:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	}

	if (((process.floating_dis > (s-400))&&(process.floating_dis <= (s-300)))) {
 8002f8c:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002f8e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8003188 <process_Accel_FloatingEnc+0x2e0>
 8002fa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	dd1b      	ble.n	8002fe8 <process_Accel_FloatingEnc+0x140>
 8002fb0:	4b73      	ldr	r3, [pc, #460]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002fb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc2:	eddf 6a72 	vldr	s13, [pc, #456]	; 800318c <process_Accel_FloatingEnc+0x2e4>
 8002fc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d809      	bhi.n	8002fe8 <process_Accel_FloatingEnc+0x140>
		process.chasis_Vector_TargetSpeed -= accel ;
 8002fd4:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002fd6:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8002fda:	edd7 7a00 	vldr	s15, [r7]
 8002fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe2:	4b67      	ldr	r3, [pc, #412]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002fe4:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	}

	if (((process.floating_dis > (s-300)))) {
 8002fe8:	4b65      	ldr	r3, [pc, #404]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8002fea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffa:	eddf 6a64 	vldr	s13, [pc, #400]	; 800318c <process_Accel_FloatingEnc+0x2e4>
 8002ffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	dd09      	ble.n	8003020 <process_Accel_FloatingEnc+0x178>
		process.chasis_Vector_TargetSpeed -= accel ;
 800300c:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800300e:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8003012:	edd7 7a00 	vldr	s15, [r7]
 8003016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800301c:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	}

	if ((process.chasis_Vector_TargetSpeed<=0)||(process.floating_dis > s)){
 8003020:	4b57      	ldr	r3, [pc, #348]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003022:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8003026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	d90d      	bls.n	800304c <process_Accel_FloatingEnc+0x1a4>
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003032:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d516      	bpl.n	800307a <process_Accel_FloatingEnc+0x1d2>
		process.chasis_Vector_TargetSpeed = 0;
 800304c:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		process.Process_Running = 1;
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003058:	2201      	movs	r2, #1
 800305a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		PD_Disable(PD_Theta);
 800305e:	2002      	movs	r0, #2
 8003060:	f7ff fea0 	bl	8002da4 <PD_Disable>
		process.r = 0;
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		process.ssCheck = 0;
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		process_ChangeState();
 8003076:	f7ff fe5d 	bl	8002d34 <process_ChangeState>
//		PD_Disable(PD_Theta);
//		process.r = 0;
//		process_ChangeState();
//	}

	if (HAL_GPIO_ReadPin(Sesor_BatThanh_GPIO_Port, Sesor_BatThanh_Pin) == 1)
 800307a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800307e:	4844      	ldr	r0, [pc, #272]	; (8003190 <process_Accel_FloatingEnc+0x2e8>)
 8003080:	f006 f91c 	bl	80092bc <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <process_Accel_FloatingEnc+0x1f4>
		{
			process.ssCheck ++;
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800308c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003090:	3301      	adds	r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003096:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800309a:	e003      	b.n	80030a4 <process_Accel_FloatingEnc+0x1fc>
		}else {
			process.ssCheck = 0;
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		}


	process.u = cos(Angle*M_PI/180)*process.chasis_Vector_TargetSpeed ;
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fd fa4f 	bl	8000548 <__aeabi_f2d>
 80030aa:	a333      	add	r3, pc, #204	; (adr r3, 8003178 <process_Accel_FloatingEnc+0x2d0>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd faa2 	bl	80005f8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <process_Accel_FloatingEnc+0x2ec>)
 80030c2:	f7fd fbc3 	bl	800084c <__aeabi_ddiv>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	ec43 2b17 	vmov	d7, r2, r3
 80030ce:	eeb0 0a47 	vmov.f32	s0, s14
 80030d2:	eef0 0a67 	vmov.f32	s1, s15
 80030d6:	f00d fe63 	bl	8010da0 <cos>
 80030da:	ec55 4b10 	vmov	r4, r5, d0
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 80030e0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa2f 	bl	8000548 <__aeabi_f2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4620      	mov	r0, r4
 80030f0:	4629      	mov	r1, r5
 80030f2:	f7fd fa81 	bl	80005f8 <__aeabi_dmul>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fd53 	bl	8000ba8 <__aeabi_d2f>
 8003102:	4603      	mov	r3, r0
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003106:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	process.v = sin(Angle*M_PI/180)*process.chasis_Vector_TargetSpeed ;
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fd fa1c 	bl	8000548 <__aeabi_f2d>
 8003110:	a319      	add	r3, pc, #100	; (adr r3, 8003178 <process_Accel_FloatingEnc+0x2d0>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa6f 	bl	80005f8 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <process_Accel_FloatingEnc+0x2ec>)
 8003128:	f7fd fb90 	bl	800084c <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	ec43 2b17 	vmov	d7, r2, r3
 8003134:	eeb0 0a47 	vmov.f32	s0, s14
 8003138:	eef0 0a67 	vmov.f32	s1, s15
 800313c:	f00d fe84 	bl	8010e48 <sin>
 8003140:	ec55 4b10 	vmov	r4, r5, d0
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 8003146:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f9fc 	bl	8000548 <__aeabi_f2d>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	f7fd fa4e 	bl	80005f8 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fd20 	bl	8000ba8 <__aeabi_d2f>
 8003168:	4603      	mov	r3, r0
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <process_Accel_FloatingEnc+0x2d8>)
 800316c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bdb0      	pop	{r4, r5, r7, pc}
 8003178:	54442d18 	.word	0x54442d18
 800317c:	400921fb 	.word	0x400921fb
 8003180:	20000368 	.word	0x20000368
 8003184:	43fa0000 	.word	0x43fa0000
 8003188:	43c80000 	.word	0x43c80000
 800318c:	43960000 	.word	0x43960000
 8003190:	40021000 	.word	0x40021000
 8003194:	40668000 	.word	0x40668000

08003198 <process_RunChassis>:


void process_RunChassis()
{
 8003198:	b580      	push	{r7, lr}
 800319a:	ed2d 8b02 	vpush	{d8}
 800319e:	af00      	add	r7, sp, #0
	switch (process.state) {
 80031a0:	4b83      	ldr	r3, [pc, #524]	; (80033b0 <process_RunChassis+0x218>)
 80031a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	f200 80f8 	bhi.w	800339c <process_RunChassis+0x204>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <process_RunChassis+0x1c>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	08003215 	.word	0x08003215
 80031bc:	0800322b 	.word	0x0800322b
 80031c0:	08003231 	.word	0x08003231
 80031c4:	08003283 	.word	0x08003283
 80031c8:	0800339d 	.word	0x0800339d
 80031cc:	08003299 	.word	0x08003299
 80031d0:	0800339d 	.word	0x0800339d
 80031d4:	080032b5 	.word	0x080032b5
 80031d8:	080032cb 	.word	0x080032cb
 80031dc:	080032d1 	.word	0x080032d1
 80031e0:	08003321 	.word	0x08003321
 80031e4:	0800339d 	.word	0x0800339d
 80031e8:	08003337 	.word	0x08003337
 80031ec:	0800339d 	.word	0x0800339d
 80031f0:	08003353 	.word	0x08003353
 80031f4:	08003389 	.word	0x08003389
		case 0:
			process_setVal_PutBall(1);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f000 fb71 	bl	80038e0 <process_setVal_PutBall>
			PD_Disable(PD_X);
 80031fe:	2000      	movs	r0, #0
 8003200:	f7ff fdd0 	bl	8002da4 <PD_Disable>
			PD_Disable(PD_Y);
 8003204:	2001      	movs	r0, #1
 8003206:	f7ff fdcd 	bl	8002da4 <PD_Disable>
			process_ResetFloatingDis();
 800320a:	f7ff fd0f 	bl	8002c2c <process_ResetFloatingDis>
			process_ChangeState();
 800320e:	f7ff fd91 	bl	8002d34 <process_ChangeState>





			break;
 8003212:	e0c8      	b.n	80033a6 <process_RunChassis+0x20e>
		case 1:
			process_Accel_FloatingEnc(-65, 0.8,4730,0.02);
 8003214:	eddf 1a67 	vldr	s3, [pc, #412]	; 80033b4 <process_RunChassis+0x21c>
 8003218:	ed9f 1a67 	vldr	s2, [pc, #412]	; 80033b8 <process_RunChassis+0x220>
 800321c:	eddf 0a67 	vldr	s1, [pc, #412]	; 80033bc <process_RunChassis+0x224>
 8003220:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80033c0 <process_RunChassis+0x228>
 8003224:	f7ff fe40 	bl	8002ea8 <process_Accel_FloatingEnc>

			break;
 8003228:	e0bd      	b.n	80033a6 <process_RunChassis+0x20e>
		case 2:
			process_GetBall();
 800322a:	f000 fba5 	bl	8003978 <process_GetBall>

			break;
 800322e:	e0ba      	b.n	80033a6 <process_RunChassis+0x20e>
		case 3:
			process_setVal_PutBall(0);
 8003230:	2000      	movs	r0, #0
 8003232:	f000 fb55 	bl	80038e0 <process_setVal_PutBall>
			if (PutBall_getFlag()){
 8003236:	f7fe fa39 	bl	80016ac <PutBall_getFlag>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80af 	beq.w	80033a0 <process_RunChassis+0x208>
				process_setVal_PutBall(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f000 fb4c 	bl	80038e0 <process_setVal_PutBall>
				trajecPlan_SetParam(&process.trajecTheta, odo_GetPoseTheta(), -41*M_PI/180, 3, odo_GetRout(), 0);
 8003248:	f7ff f874 	bl	8002334 <odo_GetPoseTheta>
 800324c:	eeb0 8a40 	vmov.f32	s16, s0
 8003250:	f7ff f846 	bl	80022e0 <odo_GetRout>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80033c4 <process_RunChassis+0x22c>
 800325c:	eef0 1a67 	vmov.f32	s3, s15
 8003260:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8003264:	eddf 0a58 	vldr	s1, [pc, #352]	; 80033c8 <process_RunChassis+0x230>
 8003268:	eeb0 0a48 	vmov.f32	s0, s16
 800326c:	4857      	ldr	r0, [pc, #348]	; (80033cc <process_RunChassis+0x234>)
 800326e:	f7ff fc3e 	bl	8002aee <trajecPlan_SetParam>
				PD_Enable(PD_Theta);
 8003272:	2002      	movs	r0, #2
 8003274:	f7ff fd6e 	bl	8002d54 <PD_Enable>
				process_ResetFloatingDis();
 8003278:	f7ff fcd8 	bl	8002c2c <process_ResetFloatingDis>
				process_ChangeState();
 800327c:	f7ff fd5a 	bl	8002d34 <process_ChangeState>
			}

			break;
 8003280:	e08e      	b.n	80033a0 <process_RunChassis+0x208>
		case 4 :
			process_Accel_FloatingEnc(32, 0.8,3000,0.02);
 8003282:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80033b4 <process_RunChassis+0x21c>
 8003286:	ed9f 1a52 	vldr	s2, [pc, #328]	; 80033d0 <process_RunChassis+0x238>
 800328a:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80033bc <process_RunChassis+0x224>
 800328e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80033d4 <process_RunChassis+0x23c>
 8003292:	f7ff fe09 	bl	8002ea8 <process_Accel_FloatingEnc>

			break;
 8003296:	e086      	b.n	80033a6 <process_RunChassis+0x20e>
		case 6:
			PD_Enable(PD_Theta);
 8003298:	2002      	movs	r0, #2
 800329a:	f7ff fd5b 	bl	8002d54 <PD_Enable>
			process_SetCtrSignal(U, 0.033);
 800329e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80033d8 <process_RunChassis+0x240>
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7ff fd0a 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, -0.08);
 80032a8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80033dc <process_RunChassis+0x244>
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff fd05 	bl	8002cbc <process_SetCtrSignal>
			break;
 80032b2:	e078      	b.n	80033a6 <process_RunChassis+0x20e>
		case 8:
			process_Accel_FloatingEnc(-154, 0.8,2200,0.02);
 80032b4:	eddf 1a3f 	vldr	s3, [pc, #252]	; 80033b4 <process_RunChassis+0x21c>
 80032b8:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80033e0 <process_RunChassis+0x248>
 80032bc:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80033bc <process_RunChassis+0x224>
 80032c0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80033e4 <process_RunChassis+0x24c>
 80032c4:	f7ff fdf0 	bl	8002ea8 <process_Accel_FloatingEnc>
			break;
 80032c8:	e06d      	b.n	80033a6 <process_RunChassis+0x20e>
		case 9 :
			process_GetBall2();
 80032ca:	f000 fca1 	bl	8003c10 <process_GetBall2>
			break;
 80032ce:	e06a      	b.n	80033a6 <process_RunChassis+0x20e>
		case 10 :
			process_setVal_PutBall(0);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f000 fb05 	bl	80038e0 <process_setVal_PutBall>
			if (PutBall_getFlag()){
 80032d6:	f7fe f9e9 	bl	80016ac <PutBall_getFlag>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d061      	beq.n	80033a4 <process_RunChassis+0x20c>
				process_setVal_PutBall(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f000 fafd 	bl	80038e0 <process_setVal_PutBall>
				trajecPlan_SetParam(&process.trajecTheta, odo_GetPoseTheta(), -39*M_PI/180, 3, odo_GetRout(), 0);
 80032e6:	f7ff f825 	bl	8002334 <odo_GetPoseTheta>
 80032ea:	eeb0 8a40 	vmov.f32	s16, s0
 80032ee:	f7fe fff7 	bl	80022e0 <odo_GetRout>
 80032f2:	eef0 7a40 	vmov.f32	s15, s0
 80032f6:	ed9f 2a33 	vldr	s4, [pc, #204]	; 80033c4 <process_RunChassis+0x22c>
 80032fa:	eef0 1a67 	vmov.f32	s3, s15
 80032fe:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8003302:	eddf 0a39 	vldr	s1, [pc, #228]	; 80033e8 <process_RunChassis+0x250>
 8003306:	eeb0 0a48 	vmov.f32	s0, s16
 800330a:	4830      	ldr	r0, [pc, #192]	; (80033cc <process_RunChassis+0x234>)
 800330c:	f7ff fbef 	bl	8002aee <trajecPlan_SetParam>
				PD_Enable(PD_Theta);
 8003310:	2002      	movs	r0, #2
 8003312:	f7ff fd1f 	bl	8002d54 <PD_Enable>
				process_ResetFloatingDis();
 8003316:	f7ff fc89 	bl	8002c2c <process_ResetFloatingDis>
				process_ChangeState();
 800331a:	f7ff fd0b 	bl	8002d34 <process_ChangeState>
			}
			break;
 800331e:	e041      	b.n	80033a4 <process_RunChassis+0x20c>
		case 11 :
			process_Accel_FloatingEnc(37, 0.8,2600,0.05);
 8003320:	eddf 1a32 	vldr	s3, [pc, #200]	; 80033ec <process_RunChassis+0x254>
 8003324:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80033f0 <process_RunChassis+0x258>
 8003328:	eddf 0a24 	vldr	s1, [pc, #144]	; 80033bc <process_RunChassis+0x224>
 800332c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80033f4 <process_RunChassis+0x25c>
 8003330:	f7ff fdba 	bl	8002ea8 <process_Accel_FloatingEnc>
			break;
 8003334:	e037      	b.n	80033a6 <process_RunChassis+0x20e>
		case 13:
			PD_Enable(PD_Theta);
 8003336:	2002      	movs	r0, #2
 8003338:	f7ff fd0c 	bl	8002d54 <PD_Enable>
			process_SetCtrSignal(U, 0.033);
 800333c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80033d8 <process_RunChassis+0x240>
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff fcbb 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, -0.08);
 8003346:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80033dc <process_RunChassis+0x244>
 800334a:	2001      	movs	r0, #1
 800334c:	f7ff fcb6 	bl	8002cbc <process_SetCtrSignal>
			break;
 8003350:	e029      	b.n	80033a6 <process_RunChassis+0x20e>
		case 15 :
			trajecPlan_SetParam(&process.trajecTheta, odo_GetPoseTheta(), 0, 3, odo_GetRout(), 0);
 8003352:	f7fe ffef 	bl	8002334 <odo_GetPoseTheta>
 8003356:	eeb0 8a40 	vmov.f32	s16, s0
 800335a:	f7fe ffc1 	bl	80022e0 <odo_GetRout>
 800335e:	eef0 7a40 	vmov.f32	s15, s0
 8003362:	ed9f 2a18 	vldr	s4, [pc, #96]	; 80033c4 <process_RunChassis+0x22c>
 8003366:	eef0 1a67 	vmov.f32	s3, s15
 800336a:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 800336e:	eddf 0a15 	vldr	s1, [pc, #84]	; 80033c4 <process_RunChassis+0x22c>
 8003372:	eeb0 0a48 	vmov.f32	s0, s16
 8003376:	4815      	ldr	r0, [pc, #84]	; (80033cc <process_RunChassis+0x234>)
 8003378:	f7ff fbb9 	bl	8002aee <trajecPlan_SetParam>
			PD_Enable(PD_Theta);
 800337c:	2002      	movs	r0, #2
 800337e:	f7ff fce9 	bl	8002d54 <PD_Enable>
			process_ChangeState();
 8003382:	f7ff fcd7 	bl	8002d34 <process_ChangeState>
			break;
 8003386:	e00e      	b.n	80033a6 <process_RunChassis+0x20e>
		case 16 :
			process_Accel_FloatingEnc(152, 0.7,6700,0.05);
 8003388:	eddf 1a18 	vldr	s3, [pc, #96]	; 80033ec <process_RunChassis+0x254>
 800338c:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80033f8 <process_RunChassis+0x260>
 8003390:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80033fc <process_RunChassis+0x264>
 8003394:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8003400 <process_RunChassis+0x268>
 8003398:	f7ff fd86 	bl	8002ea8 <process_Accel_FloatingEnc>
		default:
			break;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <process_RunChassis+0x20e>
			break;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <process_RunChassis+0x20e>
			break;
 80033a4:	bf00      	nop
	}
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	ecbd 8b02 	vpop	{d8}
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000368 	.word	0x20000368
 80033b4:	3ca3d70a 	.word	0x3ca3d70a
 80033b8:	4593d000 	.word	0x4593d000
 80033bc:	3f4ccccd 	.word	0x3f4ccccd
 80033c0:	c2820000 	.word	0xc2820000
 80033c4:	00000000 	.word	0x00000000
 80033c8:	bf373094 	.word	0xbf373094
 80033cc:	20000458 	.word	0x20000458
 80033d0:	453b8000 	.word	0x453b8000
 80033d4:	42000000 	.word	0x42000000
 80033d8:	3d072b02 	.word	0x3d072b02
 80033dc:	bda3d70a 	.word	0xbda3d70a
 80033e0:	45098000 	.word	0x45098000
 80033e4:	c31a0000 	.word	0xc31a0000
 80033e8:	bf2e40f1 	.word	0xbf2e40f1
 80033ec:	3d4ccccd 	.word	0x3d4ccccd
 80033f0:	45228000 	.word	0x45228000
 80033f4:	42140000 	.word	0x42140000
 80033f8:	45d16000 	.word	0x45d16000
 80033fc:	3f333333 	.word	0x3f333333
 8003400:	43180000 	.word	0x43180000

08003404 <process_RunSSAndActuator>:


void process_RunSSAndActuator(void (*ptnBreakProtectionCallBack)())
{
 8003404:	b580      	push	{r7, lr}
 8003406:	ed2d 8b02 	vpush	{d8}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	switch (process.state) {
 8003410:	4b71      	ldr	r3, [pc, #452]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003412:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003416:	3b05      	subs	r3, #5
 8003418:	2b09      	cmp	r3, #9
 800341a:	f200 80d2 	bhi.w	80035c2 <process_RunSSAndActuator+0x1be>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <process_RunSSAndActuator+0x20>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003453 	.word	0x08003453
 800342c:	080034bb 	.word	0x080034bb
 8003430:	080035c3 	.word	0x080035c3
 8003434:	080035c3 	.word	0x080035c3
 8003438:	080035c3 	.word	0x080035c3
 800343c:	080035c3 	.word	0x080035c3
 8003440:	08003521 	.word	0x08003521
 8003444:	08003527 	.word	0x08003527
 8003448:	0800358d 	.word	0x0800358d
		case 5 :
			process_WallApproach();
 800344c:	f000 fd3e 	bl	8003ecc <process_WallApproach>
			break;
 8003450:	e0bc      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
		case 6 :
			if (HAL_GPIO_ReadPin(SSLua1_GPIO_Port, SSLua1_Pin))
 8003452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003456:	4861      	ldr	r0, [pc, #388]	; (80035dc <process_RunSSAndActuator+0x1d8>)
 8003458:	f005 ff30 	bl	80092bc <HAL_GPIO_ReadPin>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <process_RunSSAndActuator+0x70>
			{
				process.ssCheck ++;
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003464:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003468:	3301      	adds	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 800346e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8003472:	e003      	b.n	800347c <process_RunSSAndActuator+0x78>
			}else {
				process.ssCheck = 0;
 8003474:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			}
			if(process.ssCheck>30){
 800347c:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 800347e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003482:	2b1e      	cmp	r3, #30
 8003484:	f240 809f 	bls.w	80035c6 <process_RunSSAndActuator+0x1c2>
				process_ChangeState();
 8003488:	f7ff fc54 	bl	8002d34 <process_ChangeState>
				PD_Disable(PD_Theta);
 800348c:	2002      	movs	r0, #2
 800348e:	f7ff fc89 	bl	8002da4 <PD_Disable>
				process_SetCtrSignal(R, 0);
 8003492:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 8003496:	2002      	movs	r0, #2
 8003498:	f7ff fc10 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(U, 0.03);
 800349c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80035e4 <process_RunSSAndActuator+0x1e0>
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7ff fc0b 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(V, 0);
 80034a6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7ff fc06 	bl	8002cbc <process_SetCtrSignal>
				process.ssCheck = 0;
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			}

			break;
 80034b8:	e085      	b.n	80035c6 <process_RunSSAndActuator+0x1c2>
		case 7 :
			process_setVal_PutBall(2);
 80034ba:	2002      	movs	r0, #2
 80034bc:	f000 fa10 	bl	80038e0 <process_setVal_PutBall>
			osDelay(2000);
 80034c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034c4:	f009 f89b 	bl	800c5fe <osDelay>
			process_setVal_PutBall(3);
 80034c8:	2003      	movs	r0, #3
 80034ca:	f000 fa09 	bl	80038e0 <process_setVal_PutBall>
			ptnBreakProtectionCallBack();
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4798      	blx	r3
			process_ChangeState();
 80034d2:	f7ff fc2f 	bl	8002d34 <process_ChangeState>
			process_SetCtrSignal(U, 0);
 80034d6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 80034da:	2000      	movs	r0, #0
 80034dc:	f7ff fbee 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 80034e0:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7ff fbe9 	bl	8002cbc <process_SetCtrSignal>
			process_ResetFloatingDis();
 80034ea:	f7ff fb9f 	bl	8002c2c <process_ResetFloatingDis>
			trajecPlan_SetParam(&process.trajecTheta, odo_GetPoseTheta(), 0*M_PI/180, 2, odo_GetRout(), 0);
 80034ee:	f7fe ff21 	bl	8002334 <odo_GetPoseTheta>
 80034f2:	eeb0 8a40 	vmov.f32	s16, s0
 80034f6:	f7fe fef3 	bl	80022e0 <odo_GetRout>
 80034fa:	eef0 7a40 	vmov.f32	s15, s0
 80034fe:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 8003502:	eef0 1a67 	vmov.f32	s3, s15
 8003506:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800350a:	eddf 0a35 	vldr	s1, [pc, #212]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 800350e:	eeb0 0a48 	vmov.f32	s0, s16
 8003512:	4835      	ldr	r0, [pc, #212]	; (80035e8 <process_RunSSAndActuator+0x1e4>)
 8003514:	f7ff faeb 	bl	8002aee <trajecPlan_SetParam>
			PD_Enable(PD_Theta);
 8003518:	2002      	movs	r0, #2
 800351a:	f7ff fc1b 	bl	8002d54 <PD_Enable>
			break;
 800351e:	e055      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
		case 12 :
			process_WallApproach();
 8003520:	f000 fcd4 	bl	8003ecc <process_WallApproach>
			break;
 8003524:	e052      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
		case 13 :
			if (HAL_GPIO_ReadPin(SSLua1_GPIO_Port, SSLua1_Pin))
 8003526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800352a:	482c      	ldr	r0, [pc, #176]	; (80035dc <process_RunSSAndActuator+0x1d8>)
 800352c:	f005 fec6 	bl	80092bc <HAL_GPIO_ReadPin>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <process_RunSSAndActuator+0x144>
			{
				process.ssCheck ++;
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003538:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800353c:	3301      	adds	r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003542:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8003546:	e003      	b.n	8003550 <process_RunSSAndActuator+0x14c>
			}else {
				process.ssCheck = 0;
 8003548:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			}
			if(process.ssCheck>30){
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003552:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003556:	2b1e      	cmp	r3, #30
 8003558:	d937      	bls.n	80035ca <process_RunSSAndActuator+0x1c6>
				process_ChangeState();
 800355a:	f7ff fbeb 	bl	8002d34 <process_ChangeState>
				PD_Disable(PD_Theta);
 800355e:	2002      	movs	r0, #2
 8003560:	f7ff fc20 	bl	8002da4 <PD_Disable>
				process_SetCtrSignal(R, 0);
 8003564:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 8003568:	2002      	movs	r0, #2
 800356a:	f7ff fba7 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(U, 0.03);
 800356e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80035e4 <process_RunSSAndActuator+0x1e0>
 8003572:	2000      	movs	r0, #0
 8003574:	f7ff fba2 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(V, 0);
 8003578:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 800357c:	2001      	movs	r0, #1
 800357e:	f7ff fb9d 	bl	8002cbc <process_SetCtrSignal>
				process.ssCheck = 0;
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <process_RunSSAndActuator+0x1d4>)
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			}

			break;
 800358a:	e01e      	b.n	80035ca <process_RunSSAndActuator+0x1c6>
		case 14 :
			process_setVal_PutBall(2);
 800358c:	2002      	movs	r0, #2
 800358e:	f000 f9a7 	bl	80038e0 <process_setVal_PutBall>
			osDelay(2000);
 8003592:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003596:	f009 f832 	bl	800c5fe <osDelay>
			process_setVal_PutBall(3);
 800359a:	2003      	movs	r0, #3
 800359c:	f000 f9a0 	bl	80038e0 <process_setVal_PutBall>
			ptnBreakProtectionCallBack();
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4798      	blx	r3
			process_ChangeState();
 80035a4:	f7ff fbc6 	bl	8002d34 <process_ChangeState>
			process_SetCtrSignal(U, 0);
 80035a8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7ff fb85 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 80035b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80035e0 <process_RunSSAndActuator+0x1dc>
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7ff fb80 	bl	8002cbc <process_SetCtrSignal>
			process_ResetFloatingDis();
 80035bc:	f7ff fb36 	bl	8002c2c <process_ResetFloatingDis>

			break;
 80035c0:	e004      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
		default:
			break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
			break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <process_RunSSAndActuator+0x1c8>
			break;
 80035ca:	bf00      	nop
	}
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	ecbd 8b02 	vpop	{d8}
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000368 	.word	0x20000368
 80035dc:	40021000 	.word	0x40021000
 80035e0:	00000000 	.word	0x00000000
 80035e4:	3cf5c28f 	.word	0x3cf5c28f
 80035e8:	20000458 	.word	0x20000458
 80035ec:	00000000 	.word	0x00000000

080035f0 <process_Run>:
void process_Run(uint8_t Run){
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	ed2d 8b02 	vpush	{d8}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	71fb      	strb	r3, [r7, #7]
	odo_PosCal();
 8003600:	f7fe ffa6 	bl	8002550 <odo_PosCal>
	if(Run == 1){
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b01      	cmp	r3, #1
 8003608:	f040 8151 	bne.w	80038ae <process_Run+0x2be>
		process.trajecX.t += DELTA_T;
 800360c:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <process_Run+0x2d8>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ff98 	bl	8000548 <__aeabi_f2d>
 8003618:	a3a9      	add	r3, pc, #676	; (adr r3, 80038c0 <process_Run+0x2d0>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fc fe35 	bl	800028c <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f7fd fabd 	bl	8000ba8 <__aeabi_d2f>
 800362e:	4603      	mov	r3, r0
 8003630:	4aa5      	ldr	r2, [pc, #660]	; (80038c8 <process_Run+0x2d8>)
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		process.trajecY.t += DELTA_T;
 8003636:	4ba4      	ldr	r3, [pc, #656]	; (80038c8 <process_Run+0x2d8>)
 8003638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ff83 	bl	8000548 <__aeabi_f2d>
 8003642:	a39f      	add	r3, pc, #636	; (adr r3, 80038c0 <process_Run+0x2d0>)
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fc fe20 	bl	800028c <__adddf3>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f7fd faa8 	bl	8000ba8 <__aeabi_d2f>
 8003658:	4603      	mov	r3, r0
 800365a:	4a9b      	ldr	r2, [pc, #620]	; (80038c8 <process_Run+0x2d8>)
 800365c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		process.trajecTheta.t += DELTA_T;
 8003660:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <process_Run+0x2d8>)
 8003662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff6e 	bl	8000548 <__aeabi_f2d>
 800366c:	a394      	add	r3, pc, #592	; (adr r3, 80038c0 <process_Run+0x2d0>)
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f7fc fe0b 	bl	800028c <__adddf3>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f7fd fa93 	bl	8000ba8 <__aeabi_d2f>
 8003682:	4603      	mov	r3, r0
 8003684:	4a90      	ldr	r2, [pc, #576]	; (80038c8 <process_Run+0x2d8>)
 8003686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

		process_RunChassis();
 800368a:	f7ff fd85 	bl	8003198 <process_RunChassis>

		trajecPlan_Cal(&process.trajecX);
 800368e:	488f      	ldr	r0, [pc, #572]	; (80038cc <process_Run+0x2dc>)
 8003690:	f7ff f936 	bl	8002900 <trajecPlan_Cal>
		trajecPlan_Cal(&process.trajecY);
 8003694:	488e      	ldr	r0, [pc, #568]	; (80038d0 <process_Run+0x2e0>)
 8003696:	f7ff f933 	bl	8002900 <trajecPlan_Cal>
		trajecPlan_Cal(&process.trajecTheta);
 800369a:	488e      	ldr	r0, [pc, #568]	; (80038d4 <process_Run+0x2e4>)
 800369c:	f7ff f930 	bl	8002900 <trajecPlan_Cal>

		if(!process.stopUsePDX)
 80036a0:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <process_Run+0x2d8>)
 80036a2:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <process_Run+0xec>
		{
			PD_Cal(&process.pdX, process.trajecX.xTrajec, odo_GetPoseX());
 80036aa:	4b87      	ldr	r3, [pc, #540]	; (80038c8 <process_Run+0x2d8>)
 80036ac:	ed93 8a29 	vldr	s16, [r3, #164]	; 0xa4
 80036b0:	f7fe fe24 	bl	80022fc <odo_GetPoseX>
 80036b4:	eef0 7a40 	vmov.f32	s15, s0
 80036b8:	eef0 0a67 	vmov.f32	s1, s15
 80036bc:	eeb0 0a48 	vmov.f32	s0, s16
 80036c0:	4881      	ldr	r0, [pc, #516]	; (80038c8 <process_Run+0x2d8>)
 80036c2:	f7ff f88d 	bl	80027e0 <PD_Cal>
			process.u = process.pdX.u + process.trajecX.xdottraject;
 80036c6:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <process_Run+0x2d8>)
 80036c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80036cc:	4b7e      	ldr	r3, [pc, #504]	; (80038c8 <process_Run+0x2d8>)
 80036ce:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	4b7c      	ldr	r3, [pc, #496]	; (80038c8 <process_Run+0x2d8>)
 80036d8:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c

		}
		if(!process.stopUsePDY)
 80036dc:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <process_Run+0x2d8>)
 80036de:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <process_Run+0x128>
		{
			PD_Cal(&process.pdY, process.trajecY.xTrajec, odo_GetPoseY());
 80036e6:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <process_Run+0x2d8>)
 80036e8:	ed93 8a35 	vldr	s16, [r3, #212]	; 0xd4
 80036ec:	f7fe fe14 	bl	8002318 <odo_GetPoseY>
 80036f0:	eef0 7a40 	vmov.f32	s15, s0
 80036f4:	eef0 0a67 	vmov.f32	s1, s15
 80036f8:	eeb0 0a48 	vmov.f32	s0, s16
 80036fc:	4876      	ldr	r0, [pc, #472]	; (80038d8 <process_Run+0x2e8>)
 80036fe:	f7ff f86f 	bl	80027e0 <PD_Cal>
			process.v = process.pdY.u + process.trajecY.xdottraject;
 8003702:	4b71      	ldr	r3, [pc, #452]	; (80038c8 <process_Run+0x2d8>)
 8003704:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003708:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <process_Run+0x2d8>)
 800370a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <process_Run+0x2d8>)
 8003714:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		}
		if(!process.stopUsePDTheta)
 8003718:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <process_Run+0x2d8>)
 800371a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <process_Run+0x172>
		{
			odo_SetPoseTheta(process.yaw);
 8003722:	4b69      	ldr	r3, [pc, #420]	; (80038c8 <process_Run+0x2d8>)
 8003724:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	f7ff f81a 	bl	8002764 <odo_SetPoseTheta>
			PD_Cal(&process.pdTheta, process.trajecTheta.xTrajec, odo_GetPoseTheta());
 8003730:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <process_Run+0x2d8>)
 8003732:	ed93 8a41 	vldr	s16, [r3, #260]	; 0x104
 8003736:	f7fe fdfd 	bl	8002334 <odo_GetPoseTheta>
 800373a:	eef0 7a40 	vmov.f32	s15, s0
 800373e:	eef0 0a67 	vmov.f32	s1, s15
 8003742:	eeb0 0a48 	vmov.f32	s0, s16
 8003746:	4865      	ldr	r0, [pc, #404]	; (80038dc <process_Run+0x2ec>)
 8003748:	f7ff f84a 	bl	80027e0 <PD_Cal>
			process.r = process.pdTheta.u + process.trajecTheta.xdottraject ;
 800374c:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <process_Run+0x2d8>)
 800374e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <process_Run+0x2d8>)
 8003754:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <process_Run+0x2d8>)
 800375e:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
		}

		process.uControl = process.u*cos(-odo_GetPoseTheta()) - process.v*sin(-odo_GetPoseTheta());
 8003762:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <process_Run+0x2d8>)
 8003764:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc feed 	bl	8000548 <__aeabi_f2d>
 800376e:	4604      	mov	r4, r0
 8003770:	460d      	mov	r5, r1
 8003772:	f7fe fddf 	bl	8002334 <odo_GetPoseTheta>
 8003776:	eef0 7a40 	vmov.f32	s15, s0
 800377a:	eef1 7a67 	vneg.f32	s15, s15
 800377e:	ee17 3a90 	vmov	r3, s15
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fee0 	bl	8000548 <__aeabi_f2d>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	ec43 2b10 	vmov	d0, r2, r3
 8003790:	f00d fb06 	bl	8010da0 <cos>
 8003794:	ec53 2b10 	vmov	r2, r3, d0
 8003798:	4620      	mov	r0, r4
 800379a:	4629      	mov	r1, r5
 800379c:	f7fc ff2c 	bl	80005f8 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4690      	mov	r8, r2
 80037a6:	4699      	mov	r9, r3
 80037a8:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <process_Run+0x2d8>)
 80037aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc feca 	bl	8000548 <__aeabi_f2d>
 80037b4:	4604      	mov	r4, r0
 80037b6:	460d      	mov	r5, r1
 80037b8:	f7fe fdbc 	bl	8002334 <odo_GetPoseTheta>
 80037bc:	ee10 3a10 	vmov	r3, s0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc fec1 	bl	8000548 <__aeabi_f2d>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ec43 2b10 	vmov	d0, r2, r3
 80037ce:	f00d fb3b 	bl	8010e48 <sin>
 80037d2:	ec53 2b10 	vmov	r2, r3, d0
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fc ff0d 	bl	80005f8 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4640      	mov	r0, r8
 80037e4:	4649      	mov	r1, r9
 80037e6:	f7fc fd51 	bl	800028c <__adddf3>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f7fd f9d9 	bl	8000ba8 <__aeabi_d2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <process_Run+0x2d8>)
 80037fa:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		process.vControl = process.u*sin(-odo_GetPoseTheta()) + process.v*cos(-odo_GetPoseTheta());
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <process_Run+0x2d8>)
 8003800:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe9f 	bl	8000548 <__aeabi_f2d>
 800380a:	4604      	mov	r4, r0
 800380c:	460d      	mov	r5, r1
 800380e:	f7fe fd91 	bl	8002334 <odo_GetPoseTheta>
 8003812:	eef0 7a40 	vmov.f32	s15, s0
 8003816:	eef1 7a67 	vneg.f32	s15, s15
 800381a:	ee17 3a90 	vmov	r3, s15
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fe92 	bl	8000548 <__aeabi_f2d>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	ec43 2b10 	vmov	d0, r2, r3
 800382c:	f00d fb0c 	bl	8010e48 <sin>
 8003830:	ec53 2b10 	vmov	r2, r3, d0
 8003834:	4620      	mov	r0, r4
 8003836:	4629      	mov	r1, r5
 8003838:	f7fc fede 	bl	80005f8 <__aeabi_dmul>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4690      	mov	r8, r2
 8003842:	4699      	mov	r9, r3
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <process_Run+0x2d8>)
 8003846:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fe7c 	bl	8000548 <__aeabi_f2d>
 8003850:	4604      	mov	r4, r0
 8003852:	460d      	mov	r5, r1
 8003854:	f7fe fd6e 	bl	8002334 <odo_GetPoseTheta>
 8003858:	eef0 7a40 	vmov.f32	s15, s0
 800385c:	eef1 7a67 	vneg.f32	s15, s15
 8003860:	ee17 3a90 	vmov	r3, s15
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe6f 	bl	8000548 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	ec43 2b10 	vmov	d0, r2, r3
 8003872:	f00d fa95 	bl	8010da0 <cos>
 8003876:	ec53 2b10 	vmov	r2, r3, d0
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc febb 	bl	80005f8 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4640      	mov	r0, r8
 8003888:	4649      	mov	r1, r9
 800388a:	f7fc fcff 	bl	800028c <__adddf3>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f987 	bl	8000ba8 <__aeabi_d2f>
 800389a:	4603      	mov	r3, r0
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <process_Run+0x2d8>)
 800389e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		process.rControl = process.r;
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <process_Run+0x2d8>)
 80038a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <process_Run+0x2d8>)
 80038aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
	}
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	ecbd 8b02 	vpop	{d8}
 80038b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038bc:	f3af 8000 	nop.w
 80038c0:	9999999a 	.word	0x9999999a
 80038c4:	3fa99999 	.word	0x3fa99999
 80038c8:	20000368 	.word	0x20000368
 80038cc:	200003f8 	.word	0x200003f8
 80038d0:	20000428 	.word	0x20000428
 80038d4:	20000458 	.word	0x20000458
 80038d8:	20000398 	.word	0x20000398
 80038dc:	200003c8 	.word	0x200003c8

080038e0 <process_setVal_PutBall>:
void process_setVal_PutBall(int Value)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	process.ball = Value;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <process_setVal_PutBall+0x20>)
 80038ee:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000368 	.word	0x20000368

08003904 <GetXtraject>:
	process.uControl = u*cos(-odo_GetPoseTheta()) - v*sin(-odo_GetPoseTheta());
	process.vControl = u*sin(-odo_GetPoseTheta()) + v*cos(-odo_GetPoseTheta());
	process.rControl = r;
}

float GetXtraject(Trajec_Type ID){
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
	if (ID == TrajecX){
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <GetXtraject+0x18>
		return process.trajecX.xTrajec;
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <GetXtraject+0x4c>)
 8003916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800391a:	e010      	b.n	800393e <GetXtraject+0x3a>
	}else if (ID == TrajecY){
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d103      	bne.n	800392a <GetXtraject+0x26>
		return process.trajecY.xTrajec;
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <GetXtraject+0x4c>)
 8003924:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003928:	e009      	b.n	800393e <GetXtraject+0x3a>
	}else if (ID == TrajecTheta){
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d103      	bne.n	8003938 <GetXtraject+0x34>
		return process.trajecTheta.xTrajec;
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <GetXtraject+0x4c>)
 8003932:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003936:	e002      	b.n	800393e <GetXtraject+0x3a>
	}return process.trajecX.xTrajec;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <GetXtraject+0x4c>)
 800393a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
}
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eeb0 0a67 	vmov.f32	s0, s15
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20000368 	.word	0x20000368

08003954 <process_SetBallDis>:

void process_SetBallDis(float dis)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	ed87 0a01 	vstr	s0, [r7, #4]
	process.Ball_dis = dis;
 800395e:	4a05      	ldr	r2, [pc, #20]	; (8003974 <process_SetBallDis+0x20>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000368 	.word	0x20000368

08003978 <process_GetBall>:

void process_GetBall(){
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
	PD_Disable(PD_X);
 800397c:	2000      	movs	r0, #0
 800397e:	f7ff fa11 	bl	8002da4 <PD_Disable>
	PD_Disable(PD_Y);
 8003982:	2001      	movs	r0, #1
 8003984:	f7ff fa0e 	bl	8002da4 <PD_Disable>

	if (process.stateChange==0){
 8003988:	4b9b      	ldr	r3, [pc, #620]	; (8003bf8 <process_GetBall+0x280>)
 800398a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800398e:	2b00      	cmp	r3, #0
 8003990:	d13d      	bne.n	8003a0e <process_GetBall+0x96>
		PD_Enable(PD_Theta);
 8003992:	2002      	movs	r0, #2
 8003994:	f7ff f9de 	bl	8002d54 <PD_Enable>
		process_SetCtrSignal(U, 0.1);
 8003998:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003bfc <process_GetBall+0x284>
 800399c:	2000      	movs	r0, #0
 800399e:	f7ff f98d 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 80039a2:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8003c00 <process_GetBall+0x288>
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7ff f988 	bl	8002cbc <process_SetCtrSignal>
		if (process.state < 6)
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <process_GetBall+0x280>)
 80039ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	dc15      	bgt.n	80039e2 <process_GetBall+0x6a>
		{
			if (process.Ball_dis<0.26)
 80039b6:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <process_GetBall+0x280>)
 80039b8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fdc3 	bl	8000548 <__aeabi_f2d>
 80039c2:	a385      	add	r3, pc, #532	; (adr r3, 8003bd8 <process_GetBall+0x260>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fd f888 	bl	8000adc <__aeabi_dcmplt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <process_GetBall+0x5c>
				process.stateChange = 0;
				process.ssCheck = 0;
				process_ChangeState();
			}
		}
}
 80039d2:	e0fe      	b.n	8003bd2 <process_GetBall+0x25a>
				process.stateChange = 1;
 80039d4:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <process_GetBall+0x280>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process_ResetFloatingDis();
 80039dc:	f7ff f926 	bl	8002c2c <process_ResetFloatingDis>
}
 80039e0:	e0f7      	b.n	8003bd2 <process_GetBall+0x25a>
			if (process.Ball_dis<0.28)
 80039e2:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <process_GetBall+0x280>)
 80039e4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fdad 	bl	8000548 <__aeabi_f2d>
 80039ee:	a37c      	add	r3, pc, #496	; (adr r3, 8003be0 <process_GetBall+0x268>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fd f872 	bl	8000adc <__aeabi_dcmplt>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d100      	bne.n	8003a00 <process_GetBall+0x88>
}
 80039fe:	e0e8      	b.n	8003bd2 <process_GetBall+0x25a>
				process.stateChange = 1;
 8003a00:	4b7d      	ldr	r3, [pc, #500]	; (8003bf8 <process_GetBall+0x280>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process_ResetFloatingDis();
 8003a08:	f7ff f910 	bl	8002c2c <process_ResetFloatingDis>
}
 8003a0c:	e0e1      	b.n	8003bd2 <process_GetBall+0x25a>
	else if (process.stateChange==1){
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <process_GetBall+0x280>)
 8003a10:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <process_GetBall+0xd2>
		process_SetCtrSignal(U, 0.1);
 8003a18:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003bfc <process_GetBall+0x284>
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7ff f94d 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003a22:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003c00 <process_GetBall+0x288>
 8003a26:	2001      	movs	r0, #1
 8003a28:	f7ff f948 	bl	8002cbc <process_SetCtrSignal>
		if (process.floating_dis>140)
 8003a2c:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <process_GetBall+0x280>)
 8003a2e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a32:	2b8c      	cmp	r3, #140	; 0x8c
 8003a34:	f340 80cd 	ble.w	8003bd2 <process_GetBall+0x25a>
			process.stateChange = 2;
 8003a38:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <process_GetBall+0x280>)
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			process.ssCheck = 0;
 8003a40:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <process_GetBall+0x280>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
}
 8003a48:	e0c3      	b.n	8003bd2 <process_GetBall+0x25a>
	else if (process.stateChange==2){
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <process_GetBall+0x280>)
 8003a4c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d133      	bne.n	8003abc <process_GetBall+0x144>
		process_SetCtrSignal(U, 0);
 8003a54:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8003c00 <process_GetBall+0x288>
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7ff f92f 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, -0.05);
 8003a5e:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8003c04 <process_GetBall+0x28c>
 8003a62:	2001      	movs	r0, #1
 8003a64:	f7ff f92a 	bl	8002cbc <process_SetCtrSignal>
		if (process.Ball_dis < 0.22)
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <process_GetBall+0x280>)
 8003a6a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd6a 	bl	8000548 <__aeabi_f2d>
 8003a74:	a35c      	add	r3, pc, #368	; (adr r3, 8003be8 <process_GetBall+0x270>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f7fd f82f 	bl	8000adc <__aeabi_dcmplt>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d100      	bne.n	8003a86 <process_GetBall+0x10e>
}
 8003a84:	e0a5      	b.n	8003bd2 <process_GetBall+0x25a>
			process_SetCtrSignal(U, 0);
 8003a86:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8003c00 <process_GetBall+0x288>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7ff f916 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 8003a90:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8003c00 <process_GetBall+0x288>
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7ff f911 	bl	8002cbc <process_SetCtrSignal>
			PD_Disable(PD_Theta);
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7ff f982 	bl	8002da4 <PD_Disable>
			process_SetCtrSignal(R, 0);
 8003aa0:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8003c00 <process_GetBall+0x288>
 8003aa4:	2002      	movs	r0, #2
 8003aa6:	f7ff f909 	bl	8002cbc <process_SetCtrSignal>
			process.ssCheck = 0;
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <process_GetBall+0x280>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			process.stateChange = 4;
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <process_GetBall+0x280>)
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8003aba:	e08a      	b.n	8003bd2 <process_GetBall+0x25a>
	else if (process.stateChange==3){
 8003abc:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <process_GetBall+0x280>)
 8003abe:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d123      	bne.n	8003b0e <process_GetBall+0x196>
		process_SetCtrSignal(U, 0);
 8003ac6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8003c00 <process_GetBall+0x288>
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7ff f8f6 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003ad0:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003c00 <process_GetBall+0x288>
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7ff f8f1 	bl	8002cbc <process_SetCtrSignal>
		process.ssCheck ++;
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <process_GetBall+0x280>)
 8003adc:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <process_GetBall+0x280>)
 8003ae6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		if (process.ssCheck > 16)
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <process_GetBall+0x280>)
 8003aec:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d96e      	bls.n	8003bd2 <process_GetBall+0x25a>
			process.stateChange = 0;
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <process_GetBall+0x280>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			process.ssCheck = 0;
 8003afc:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <process_GetBall+0x280>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			process.stateChange = 5;
 8003b04:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <process_GetBall+0x280>)
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8003b0c:	e061      	b.n	8003bd2 <process_GetBall+0x25a>
	else if (process.stateChange == 4)
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <process_GetBall+0x280>)
 8003b10:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d12e      	bne.n	8003b76 <process_GetBall+0x1fe>
			process_SetCtrSignal(U, 0);
 8003b18:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8003c00 <process_GetBall+0x288>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f7ff f8cd 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0.05);
 8003b22:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8003c08 <process_GetBall+0x290>
 8003b26:	2001      	movs	r0, #1
 8003b28:	f7ff f8c8 	bl	8002cbc <process_SetCtrSignal>
			if (process.Ball_dis > 0.13)
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <process_GetBall+0x280>)
 8003b2e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc fd08 	bl	8000548 <__aeabi_f2d>
 8003b38:	a32d      	add	r3, pc, #180	; (adr r3, 8003bf0 <process_GetBall+0x278>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d100      	bne.n	8003b4a <process_GetBall+0x1d2>
}
 8003b48:	e043      	b.n	8003bd2 <process_GetBall+0x25a>
				process_SetCtrSignal(U, 0);
 8003b4a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8003c00 <process_GetBall+0x288>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff f8b4 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(V, 0);
 8003b54:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003c00 <process_GetBall+0x288>
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7ff f8af 	bl	8002cbc <process_SetCtrSignal>
				process.stateChange = 5;
 8003b5e:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <process_GetBall+0x280>)
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process.ssCheck = 0;
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <process_GetBall+0x280>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
				PD_Disable(PD_Theta);
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f7ff f918 	bl	8002da4 <PD_Disable>
}
 8003b74:	e02d      	b.n	8003bd2 <process_GetBall+0x25a>
	else if (process.stateChange == 5)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <process_GetBall+0x280>)
 8003b78:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d128      	bne.n	8003bd2 <process_GetBall+0x25a>
			PD_Disable(PD_Theta);
 8003b80:	2002      	movs	r0, #2
 8003b82:	f7ff f90f 	bl	8002da4 <PD_Disable>
			process_SetCtrSignal(R, 0);
 8003b86:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003c00 <process_GetBall+0x288>
 8003b8a:	2002      	movs	r0, #2
 8003b8c:	f7ff f896 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(U, 0);
 8003b90:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003c00 <process_GetBall+0x288>
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7ff f891 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 8003b9a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003c00 <process_GetBall+0x288>
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7ff f88c 	bl	8002cbc <process_SetCtrSignal>
			process.ssCheck ++;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <process_GetBall+0x280>)
 8003ba6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003baa:	3301      	adds	r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <process_GetBall+0x280>)
 8003bb0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			if (process.ssCheck > 18)
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <process_GetBall+0x280>)
 8003bb6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003bba:	2b12      	cmp	r3, #18
 8003bbc:	d909      	bls.n	8003bd2 <process_GetBall+0x25a>
				process.stateChange = 0;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <process_GetBall+0x280>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process.ssCheck = 0;
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <process_GetBall+0x280>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
				process_ChangeState();
 8003bce:	f7ff f8b1 	bl	8002d34 <process_ChangeState>
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	0a3d70a4 	.word	0x0a3d70a4
 8003bdc:	3fd0a3d7 	.word	0x3fd0a3d7
 8003be0:	1eb851ec 	.word	0x1eb851ec
 8003be4:	3fd1eb85 	.word	0x3fd1eb85
 8003be8:	c28f5c29 	.word	0xc28f5c29
 8003bec:	3fcc28f5 	.word	0x3fcc28f5
 8003bf0:	0a3d70a4 	.word	0x0a3d70a4
 8003bf4:	3fc0a3d7 	.word	0x3fc0a3d7
 8003bf8:	20000368 	.word	0x20000368
 8003bfc:	3dcccccd 	.word	0x3dcccccd
 8003c00:	00000000 	.word	0x00000000
 8003c04:	bd4ccccd 	.word	0xbd4ccccd
 8003c08:	3d4ccccd 	.word	0x3d4ccccd
 8003c0c:	00000000 	.word	0x00000000

08003c10 <process_GetBall2>:

void process_GetBall2(){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	PD_Disable(PD_X);
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff f8c5 	bl	8002da4 <PD_Disable>
	PD_Disable(PD_Y);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7ff f8c2 	bl	8002da4 <PD_Disable>

	if (process.stateChange==0){
 8003c20:	4ba5      	ldr	r3, [pc, #660]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c22:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12a      	bne.n	8003c80 <process_GetBall2+0x70>
		PD_Disable(PD_Theta);
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f7ff f8ba 	bl	8002da4 <PD_Disable>
		process_SetCtrSignal(V, 0);
 8003c30:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8003ebc <process_GetBall2+0x2ac>
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7ff f841 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(U, 0);
 8003c3a:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8003ebc <process_GetBall2+0x2ac>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7ff f83c 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003c44:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8003ebc <process_GetBall2+0x2ac>
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7ff f837 	bl	8002cbc <process_SetCtrSignal>
		process.ssCheck ++;
 8003c4e:	4b9a      	ldr	r3, [pc, #616]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c50:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003c54:	3301      	adds	r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	4b97      	ldr	r3, [pc, #604]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c5a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		if (process.ssCheck > 16)
 8003c5e:	4b96      	ldr	r3, [pc, #600]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c60:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d90b      	bls.n	8003c80 <process_GetBall2+0x70>
		{
			process.stateChange = 0;
 8003c68:	4b93      	ldr	r3, [pc, #588]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			process.ssCheck = 0;
 8003c70:	4b91      	ldr	r3, [pc, #580]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			process.stateChange = 1;
 8003c78:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		}
	}
	if (process.stateChange==1){
 8003c80:	4b8d      	ldr	r3, [pc, #564]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003c82:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d122      	bne.n	8003cd0 <process_GetBall2+0xc0>
		PD_Enable(PD_Theta);
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	f7ff f862 	bl	8002d54 <PD_Enable>
		process_SetCtrSignal(U, -0.1);
 8003c90:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8003ec0 <process_GetBall2+0x2b0>
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7ff f811 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003c9a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8003ebc <process_GetBall2+0x2ac>
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7ff f80c 	bl	8002cbc <process_SetCtrSignal>

			if (process.Ball_dis<0.28)
 8003ca4:	4b84      	ldr	r3, [pc, #528]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003ca6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc4c 	bl	8000548 <__aeabi_f2d>
 8003cb0:	a37b      	add	r3, pc, #492	; (adr r3, 8003ea0 <process_GetBall2+0x290>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc ff11 	bl	8000adc <__aeabi_dcmplt>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d100      	bne.n	8003cc2 <process_GetBall2+0xb2>
				process.stateChange = 0;
				process.ssCheck = 0;
				process_ChangeState();
			}
		}
}
 8003cc0:	e0e9      	b.n	8003e96 <process_GetBall2+0x286>
				process.stateChange = 2;
 8003cc2:	4b7d      	ldr	r3, [pc, #500]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process_ResetFloatingDis();
 8003cca:	f7fe ffaf 	bl	8002c2c <process_ResetFloatingDis>
}
 8003cce:	e0e2      	b.n	8003e96 <process_GetBall2+0x286>
	else if (process.stateChange==2){
 8003cd0:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003cd2:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d119      	bne.n	8003d0e <process_GetBall2+0xfe>
		process_SetCtrSignal(U, -0.1);
 8003cda:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8003ec0 <process_GetBall2+0x2b0>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f7fe ffec 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003ce4:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003ebc <process_GetBall2+0x2ac>
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fe ffe7 	bl	8002cbc <process_SetCtrSignal>
		if (process.floating_dis>400)
 8003cee:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003cf0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003cf4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003cf8:	f340 80cd 	ble.w	8003e96 <process_GetBall2+0x286>
			process.stateChange = 3;
 8003cfc:	4b6e      	ldr	r3, [pc, #440]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003cfe:	2203      	movs	r2, #3
 8003d00:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			process.ssCheck = 0;
 8003d04:	4b6c      	ldr	r3, [pc, #432]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
}
 8003d0c:	e0c3      	b.n	8003e96 <process_GetBall2+0x286>
	else if (process.stateChange==3){
 8003d0e:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d10:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d133      	bne.n	8003d80 <process_GetBall2+0x170>
		process_SetCtrSignal(U, 0);
 8003d18:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8003ebc <process_GetBall2+0x2ac>
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fe ffcd 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, -0.05);
 8003d22:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8003ec4 <process_GetBall2+0x2b4>
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fe ffc8 	bl	8002cbc <process_SetCtrSignal>
		if (process.Ball_dis < 0.22)
 8003d2c:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d2e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fc08 	bl	8000548 <__aeabi_f2d>
 8003d38:	a35b      	add	r3, pc, #364	; (adr r3, 8003ea8 <process_GetBall2+0x298>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f7fc fecd 	bl	8000adc <__aeabi_dcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d100      	bne.n	8003d4a <process_GetBall2+0x13a>
}
 8003d48:	e0a5      	b.n	8003e96 <process_GetBall2+0x286>
			process_SetCtrSignal(U, 0);
 8003d4a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003ebc <process_GetBall2+0x2ac>
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fe ffb4 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 8003d54:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8003ebc <process_GetBall2+0x2ac>
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fe ffaf 	bl	8002cbc <process_SetCtrSignal>
			PD_Disable(PD_Theta);
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7ff f820 	bl	8002da4 <PD_Disable>
			process_SetCtrSignal(R, 0);
 8003d64:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003ebc <process_GetBall2+0x2ac>
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f7fe ffa7 	bl	8002cbc <process_SetCtrSignal>
			process.ssCheck = 0;
 8003d6e:	4b52      	ldr	r3, [pc, #328]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			process.stateChange = 5;
 8003d76:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d78:	2205      	movs	r2, #5
 8003d7a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8003d7e:	e08a      	b.n	8003e96 <process_GetBall2+0x286>
	else if (process.stateChange==4){
 8003d80:	4b4d      	ldr	r3, [pc, #308]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003d82:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d123      	bne.n	8003dd2 <process_GetBall2+0x1c2>
		process_SetCtrSignal(U, 0);
 8003d8a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003ebc <process_GetBall2+0x2ac>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fe ff94 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, 0);
 8003d94:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003ebc <process_GetBall2+0x2ac>
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7fe ff8f 	bl	8002cbc <process_SetCtrSignal>
		process.ssCheck ++;
 8003d9e:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003da0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003da4:	3301      	adds	r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003daa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		if (process.ssCheck > 16)
 8003dae:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003db0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d96e      	bls.n	8003e96 <process_GetBall2+0x286>
			process.stateChange = 0;
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			process.ssCheck = 0;
 8003dc0:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			process.stateChange = 6;
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003dca:	2206      	movs	r2, #6
 8003dcc:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8003dd0:	e061      	b.n	8003e96 <process_GetBall2+0x286>
	else if (process.stateChange == 5)
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003dd4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d12e      	bne.n	8003e3a <process_GetBall2+0x22a>
			process_SetCtrSignal(U, 0);
 8003ddc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003ebc <process_GetBall2+0x2ac>
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7fe ff6b 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0.05);
 8003de6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003ec8 <process_GetBall2+0x2b8>
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fe ff66 	bl	8002cbc <process_SetCtrSignal>
			if (process.Ball_dis > 0.13)
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003df2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fba6 	bl	8000548 <__aeabi_f2d>
 8003dfc:	a32c      	add	r3, pc, #176	; (adr r3, 8003eb0 <process_GetBall2+0x2a0>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fe89 	bl	8000b18 <__aeabi_dcmpgt>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d100      	bne.n	8003e0e <process_GetBall2+0x1fe>
}
 8003e0c:	e043      	b.n	8003e96 <process_GetBall2+0x286>
				process_SetCtrSignal(U, 0);
 8003e0e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8003ebc <process_GetBall2+0x2ac>
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7fe ff52 	bl	8002cbc <process_SetCtrSignal>
				process_SetCtrSignal(V, 0);
 8003e18:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003ebc <process_GetBall2+0x2ac>
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fe ff4d 	bl	8002cbc <process_SetCtrSignal>
				process.stateChange = 6;
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e24:	2206      	movs	r2, #6
 8003e26:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process.ssCheck = 0;
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
				PD_Disable(PD_Theta);
 8003e32:	2002      	movs	r0, #2
 8003e34:	f7fe ffb6 	bl	8002da4 <PD_Disable>
}
 8003e38:	e02d      	b.n	8003e96 <process_GetBall2+0x286>
	else if (process.stateChange == 6)
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e3c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d128      	bne.n	8003e96 <process_GetBall2+0x286>
			PD_Disable(PD_Theta);
 8003e44:	2002      	movs	r0, #2
 8003e46:	f7fe ffad 	bl	8002da4 <PD_Disable>
			process_SetCtrSignal(R, 0);
 8003e4a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003ebc <process_GetBall2+0x2ac>
 8003e4e:	2002      	movs	r0, #2
 8003e50:	f7fe ff34 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(U, 0);
 8003e54:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003ebc <process_GetBall2+0x2ac>
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fe ff2f 	bl	8002cbc <process_SetCtrSignal>
			process_SetCtrSignal(V, 0);
 8003e5e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003ebc <process_GetBall2+0x2ac>
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fe ff2a 	bl	8002cbc <process_SetCtrSignal>
			process.ssCheck ++;
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e6a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e74:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			if (process.ssCheck > 18)
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e7a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003e7e:	2b12      	cmp	r3, #18
 8003e80:	d909      	bls.n	8003e96 <process_GetBall2+0x286>
				process.stateChange = 0;
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
				process.ssCheck = 0;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <process_GetBall2+0x2a8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
				process_ChangeState();
 8003e92:	f7fe ff4f 	bl	8002d34 <process_ChangeState>
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	1eb851ec 	.word	0x1eb851ec
 8003ea4:	3fd1eb85 	.word	0x3fd1eb85
 8003ea8:	c28f5c29 	.word	0xc28f5c29
 8003eac:	3fcc28f5 	.word	0x3fcc28f5
 8003eb0:	0a3d70a4 	.word	0x0a3d70a4
 8003eb4:	3fc0a3d7 	.word	0x3fc0a3d7
 8003eb8:	20000368 	.word	0x20000368
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	bdcccccd 	.word	0xbdcccccd
 8003ec4:	bd4ccccd 	.word	0xbd4ccccd
 8003ec8:	3d4ccccd 	.word	0x3d4ccccd

08003ecc <process_WallApproach>:
				process_ChangeState();
			}
		}
}
void process_WallApproach()
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	PD_Enable(PD_Theta);
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7fe ff3f 	bl	8002d54 <PD_Enable>
	process_SetCtrSignal(V, 0);
 8003ed6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003f4c <process_WallApproach+0x80>
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7fe feee 	bl	8002cbc <process_SetCtrSignal>
	process_SetCtrSignal(U, 0.2);
 8003ee0:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003f50 <process_WallApproach+0x84>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fe fee9 	bl	8002cbc <process_SetCtrSignal>
	if (HAL_GPIO_ReadPin(Sesor_BatThanh_GPIO_Port, Sesor_BatThanh_Pin) == 1)
 8003eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eee:	4819      	ldr	r0, [pc, #100]	; (8003f54 <process_WallApproach+0x88>)
 8003ef0:	f005 f9e4 	bl	80092bc <HAL_GPIO_ReadPin>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <process_WallApproach+0x40>
	{
		process.ssCheck ++;
 8003efa:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <process_WallApproach+0x8c>)
 8003efc:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003f00:	3301      	adds	r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <process_WallApproach+0x8c>)
 8003f06:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8003f0a:	e003      	b.n	8003f14 <process_WallApproach+0x48>
	}else {
		process.ssCheck = 0;
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <process_WallApproach+0x8c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	}
	if(process.ssCheck>30){
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <process_WallApproach+0x8c>)
 8003f16:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8003f1a:	2b1e      	cmp	r3, #30
 8003f1c:	d913      	bls.n	8003f46 <process_WallApproach+0x7a>
		osDelay(300);
 8003f1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f22:	f008 fb6c 	bl	800c5fe <osDelay>

		process_SetCtrSignal(U, 0.05);
 8003f26:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003f5c <process_WallApproach+0x90>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7fe fec6 	bl	8002cbc <process_SetCtrSignal>
		process_SetCtrSignal(V, -0.08);
 8003f30:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003f60 <process_WallApproach+0x94>
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7fe fec1 	bl	8002cbc <process_SetCtrSignal>
		process.ssCheck = 0;
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <process_WallApproach+0x8c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		process_ChangeState();
 8003f42:	f7fe fef7 	bl	8002d34 <process_ChangeState>
	}

}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	3e4ccccd 	.word	0x3e4ccccd
 8003f54:	40021000 	.word	0x40021000
 8003f58:	20000368 	.word	0x20000368
 8003f5c:	3d4ccccd 	.word	0x3d4ccccd
 8003f60:	bda3d70a 	.word	0xbda3d70a

08003f64 <swer0_CalVector>:
#define DY3	-0.09428
#define DY1	-0.09428
#define DY2	0.18856

SwerveModuleParam swerParam[MAX_MODULE];
void swer0_CalVector(float u, float v, float r){
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f72:	ed87 1a01 	vstr	s2, [r7, #4]
	__NOP();
 8003f76:	bf00      	nop
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	0000      	movs	r0, r0
	...

08003f88 <swer1_CalVector>:
//	float alpha = (225)*M_PI/180;
//	vct.wheelVelX = cos(alpha)*(u + ROBOT_WIDTH_METER*r) - sin(alpha)*(v + ROBOT_LENGHT_METER*r);
//	vct.wheelVelY = sin(alpha)*(u + ROBOT_WIDTH_METER*r) + cos(alpha)*(v + ROBOT_LENGHT_METER*r);
//	swer_SetWheelVector(MODULE_ID_4, vct);
//}
void swer1_CalVector(float u, float v, float r){
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f94:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f98:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8003f9c:	4b66      	ldr	r3, [pc, #408]	; (8004138 <swer1_CalVector+0x1b0>)
 8003f9e:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY1*r) - sin(alpha)*(v + DX1*r);
 8003fa0:	69f8      	ldr	r0, [r7, #28]
 8003fa2:	f7fc fad1 	bl	8000548 <__aeabi_f2d>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	ec43 2b10 	vmov	d0, r2, r3
 8003fae:	f00c fef7 	bl	8010da0 <cos>
 8003fb2:	ec59 8b10 	vmov	r8, r9, d0
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7fc fac6 	bl	8000548 <__aeabi_f2d>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	460d      	mov	r5, r1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fc fac1 	bl	8000548 <__aeabi_f2d>
 8003fc6:	a358      	add	r3, pc, #352	; (adr r3, 8004128 <swer1_CalVector+0x1a0>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fb14 	bl	80005f8 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7fc f958 	bl	800028c <__adddf3>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	f7fc fb08 	bl	80005f8 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	69f8      	ldr	r0, [r7, #28]
 8003ff2:	f7fc faa9 	bl	8000548 <__aeabi_f2d>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	ec43 2b10 	vmov	d0, r2, r3
 8003ffe:	f00c ff23 	bl	8010e48 <sin>
 8004002:	ec5b ab10 	vmov	sl, fp, d0
 8004006:	68b8      	ldr	r0, [r7, #8]
 8004008:	f7fc fa9e 	bl	8000548 <__aeabi_f2d>
 800400c:	4604      	mov	r4, r0
 800400e:	460d      	mov	r5, r1
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fc fa99 	bl	8000548 <__aeabi_f2d>
 8004016:	a346      	add	r3, pc, #280	; (adr r3, 8004130 <swer1_CalVector+0x1a8>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc faec 	bl	80005f8 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc f930 	bl	800028c <__adddf3>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4650      	mov	r0, sl
 8004032:	4659      	mov	r1, fp
 8004034:	f7fc fae0 	bl	80005f8 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc f922 	bl	8000288 <__aeabi_dsub>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	f7fc fdac 	bl	8000ba8 <__aeabi_d2f>
 8004050:	4603      	mov	r3, r0
 8004052:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY1*r) + cos(alpha)*(v + DX1*r);
 8004054:	69f8      	ldr	r0, [r7, #28]
 8004056:	f7fc fa77 	bl	8000548 <__aeabi_f2d>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	ec43 2b10 	vmov	d0, r2, r3
 8004062:	f00c fef1 	bl	8010e48 <sin>
 8004066:	ec59 8b10 	vmov	r8, r9, d0
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7fc fa6c 	bl	8000548 <__aeabi_f2d>
 8004070:	4604      	mov	r4, r0
 8004072:	460d      	mov	r5, r1
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc fa67 	bl	8000548 <__aeabi_f2d>
 800407a:	a32b      	add	r3, pc, #172	; (adr r3, 8004128 <swer1_CalVector+0x1a0>)
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f7fc faba 	bl	80005f8 <__aeabi_dmul>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc f8fe 	bl	800028c <__adddf3>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	f7fc faae 	bl	80005f8 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4690      	mov	r8, r2
 80040a2:	4699      	mov	r9, r3
 80040a4:	69f8      	ldr	r0, [r7, #28]
 80040a6:	f7fc fa4f 	bl	8000548 <__aeabi_f2d>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	ec43 2b10 	vmov	d0, r2, r3
 80040b2:	f00c fe75 	bl	8010da0 <cos>
 80040b6:	ec5b ab10 	vmov	sl, fp, d0
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7fc fa44 	bl	8000548 <__aeabi_f2d>
 80040c0:	4604      	mov	r4, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc fa3f 	bl	8000548 <__aeabi_f2d>
 80040ca:	a319      	add	r3, pc, #100	; (adr r3, 8004130 <swer1_CalVector+0x1a8>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc fa92 	bl	80005f8 <__aeabi_dmul>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4620      	mov	r0, r4
 80040da:	4629      	mov	r1, r5
 80040dc:	f7fc f8d6 	bl	800028c <__adddf3>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4650      	mov	r0, sl
 80040e6:	4659      	mov	r1, fp
 80040e8:	f7fc fa86 	bl	80005f8 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4640      	mov	r0, r8
 80040f2:	4649      	mov	r1, r9
 80040f4:	f7fc f8ca 	bl	800028c <__adddf3>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f7fc fd52 	bl	8000ba8 <__aeabi_d2f>
 8004104:	4603      	mov	r3, r0
 8004106:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_1, vct);
 8004108:	ed97 7a05 	vldr	s14, [r7, #20]
 800410c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004110:	eeb0 0a47 	vmov.f32	s0, s14
 8004114:	eef0 0a67 	vmov.f32	s1, s15
 8004118:	2001      	movs	r0, #1
 800411a:	f000 f9e7 	bl	80044ec <swer_SetWheelVector>
}
 800411e:	bf00      	nop
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004128:	ecaab8a6 	.word	0xecaab8a6
 800412c:	3fb822bb 	.word	0x3fb822bb
 8004130:	f1800a7c 	.word	0xf1800a7c
 8004134:	bfd21a0c 	.word	0xbfd21a0c
 8004138:	40490fdb 	.word	0x40490fdb
 800413c:	00000000 	.word	0x00000000

08004140 <swer2_CalVector>:

void swer2_CalVector(float u, float v, float r){
 8004140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004144:	b088      	sub	sp, #32
 8004146:	af00      	add	r7, sp, #0
 8004148:	ed87 0a03 	vstr	s0, [r7, #12]
 800414c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004150:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = -90*M_PI/180;
 8004154:	4b60      	ldr	r3, [pc, #384]	; (80042d8 <swer2_CalVector+0x198>)
 8004156:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY2*r) - sin(alpha)*(v + DX2*r);
 8004158:	69f8      	ldr	r0, [r7, #28]
 800415a:	f7fc f9f5 	bl	8000548 <__aeabi_f2d>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	ec43 2b10 	vmov	d0, r2, r3
 8004166:	f00c fe1b 	bl	8010da0 <cos>
 800416a:	ec59 8b10 	vmov	r8, r9, d0
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7fc f9ea 	bl	8000548 <__aeabi_f2d>
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fc f9e5 	bl	8000548 <__aeabi_f2d>
 800417e:	a354      	add	r3, pc, #336	; (adr r3, 80042d0 <swer2_CalVector+0x190>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fc fa38 	bl	80005f8 <__aeabi_dmul>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f87a 	bl	8000288 <__aeabi_dsub>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc fa2c 	bl	80005f8 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	69f8      	ldr	r0, [r7, #28]
 80041aa:	f7fc f9cd 	bl	8000548 <__aeabi_f2d>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	ec43 2b10 	vmov	d0, r2, r3
 80041b6:	f00c fe47 	bl	8010e48 <sin>
 80041ba:	ec59 8b10 	vmov	r8, r9, d0
 80041be:	edd7 7a01 	vldr	s15, [r7, #4]
 80041c2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80042dc <swer2_CalVector+0x19c>
 80041c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d2:	ee17 0a90 	vmov	r0, s15
 80041d6:	f7fc f9b7 	bl	8000548 <__aeabi_f2d>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc fa09 	bl	80005f8 <__aeabi_dmul>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fc f84b 	bl	8000288 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fc fcd5 	bl	8000ba8 <__aeabi_d2f>
 80041fe:	4603      	mov	r3, r0
 8004200:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY2*r) + cos(alpha)*(v + DX2*r);
 8004202:	69f8      	ldr	r0, [r7, #28]
 8004204:	f7fc f9a0 	bl	8000548 <__aeabi_f2d>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	ec43 2b10 	vmov	d0, r2, r3
 8004210:	f00c fe1a 	bl	8010e48 <sin>
 8004214:	ec59 8b10 	vmov	r8, r9, d0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7fc f995 	bl	8000548 <__aeabi_f2d>
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc f990 	bl	8000548 <__aeabi_f2d>
 8004228:	a329      	add	r3, pc, #164	; (adr r3, 80042d0 <swer2_CalVector+0x190>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc f9e3 	bl	80005f8 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f825 	bl	8000288 <__aeabi_dsub>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fc f9d7 	bl	80005f8 <__aeabi_dmul>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4614      	mov	r4, r2
 8004250:	461d      	mov	r5, r3
 8004252:	69f8      	ldr	r0, [r7, #28]
 8004254:	f7fc f978 	bl	8000548 <__aeabi_f2d>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	ec43 2b10 	vmov	d0, r2, r3
 8004260:	f00c fd9e 	bl	8010da0 <cos>
 8004264:	ec59 8b10 	vmov	r8, r9, d0
 8004268:	edd7 7a01 	vldr	s15, [r7, #4]
 800426c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80042dc <swer2_CalVector+0x19c>
 8004270:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004274:	edd7 7a02 	vldr	s15, [r7, #8]
 8004278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427c:	ee17 0a90 	vmov	r0, s15
 8004280:	f7fc f962 	bl	8000548 <__aeabi_f2d>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	f7fc f9b4 	bl	80005f8 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4620      	mov	r0, r4
 8004296:	4629      	mov	r1, r5
 8004298:	f7fb fff8 	bl	800028c <__adddf3>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc fc80 	bl	8000ba8 <__aeabi_d2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_2, vct);
 80042ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80042b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80042b4:	eeb0 0a47 	vmov.f32	s0, s14
 80042b8:	eef0 0a67 	vmov.f32	s1, s15
 80042bc:	2002      	movs	r0, #2
 80042be:	f000 f915 	bl	80044ec <swer_SetWheelVector>
}
 80042c2:	bf00      	nop
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042cc:	f3af 8000 	nop.w
 80042d0:	ecaab8a6 	.word	0xecaab8a6
 80042d4:	3fc822bb 	.word	0x3fc822bb
 80042d8:	bfc90fdb 	.word	0xbfc90fdb
 80042dc:	00000000 	.word	0x00000000

080042e0 <swer3_CalVector>:

void swer3_CalVector(float u, float v, float r){
 80042e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	ed87 0a03 	vstr	s0, [r7, #12]
 80042ec:	edc7 0a02 	vstr	s1, [r7, #8]
 80042f0:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <swer3_CalVector+0x1b0>)
 80042f6:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY3*r) - sin(alpha)*(v + DX3*r);
 80042f8:	69f8      	ldr	r0, [r7, #28]
 80042fa:	f7fc f925 	bl	8000548 <__aeabi_f2d>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	ec43 2b10 	vmov	d0, r2, r3
 8004306:	f00c fd4b 	bl	8010da0 <cos>
 800430a:	ec59 8b10 	vmov	r8, r9, d0
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7fc f91a 	bl	8000548 <__aeabi_f2d>
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc f915 	bl	8000548 <__aeabi_f2d>
 800431e:	a358      	add	r3, pc, #352	; (adr r3, 8004480 <swer3_CalVector+0x1a0>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc f968 	bl	80005f8 <__aeabi_dmul>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4620      	mov	r0, r4
 800432e:	4629      	mov	r1, r5
 8004330:	f7fb ffac 	bl	800028c <__adddf3>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4640      	mov	r0, r8
 800433a:	4649      	mov	r1, r9
 800433c:	f7fc f95c 	bl	80005f8 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4690      	mov	r8, r2
 8004346:	4699      	mov	r9, r3
 8004348:	69f8      	ldr	r0, [r7, #28]
 800434a:	f7fc f8fd 	bl	8000548 <__aeabi_f2d>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	ec43 2b10 	vmov	d0, r2, r3
 8004356:	f00c fd77 	bl	8010e48 <sin>
 800435a:	ec5b ab10 	vmov	sl, fp, d0
 800435e:	68b8      	ldr	r0, [r7, #8]
 8004360:	f7fc f8f2 	bl	8000548 <__aeabi_f2d>
 8004364:	4604      	mov	r4, r0
 8004366:	460d      	mov	r5, r1
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc f8ed 	bl	8000548 <__aeabi_f2d>
 800436e:	a346      	add	r3, pc, #280	; (adr r3, 8004488 <swer3_CalVector+0x1a8>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f940 	bl	80005f8 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	f7fb ff84 	bl	800028c <__adddf3>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4650      	mov	r0, sl
 800438a:	4659      	mov	r1, fp
 800438c:	f7fc f934 	bl	80005f8 <__aeabi_dmul>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4640      	mov	r0, r8
 8004396:	4649      	mov	r1, r9
 8004398:	f7fb ff76 	bl	8000288 <__aeabi_dsub>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fc fc00 	bl	8000ba8 <__aeabi_d2f>
 80043a8:	4603      	mov	r3, r0
 80043aa:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY3*r) + cos(alpha)*(v + DX3*r);
 80043ac:	69f8      	ldr	r0, [r7, #28]
 80043ae:	f7fc f8cb 	bl	8000548 <__aeabi_f2d>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	ec43 2b10 	vmov	d0, r2, r3
 80043ba:	f00c fd45 	bl	8010e48 <sin>
 80043be:	ec59 8b10 	vmov	r8, r9, d0
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7fc f8c0 	bl	8000548 <__aeabi_f2d>
 80043c8:	4604      	mov	r4, r0
 80043ca:	460d      	mov	r5, r1
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fc f8bb 	bl	8000548 <__aeabi_f2d>
 80043d2:	a32b      	add	r3, pc, #172	; (adr r3, 8004480 <swer3_CalVector+0x1a0>)
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fb ff52 	bl	800028c <__adddf3>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4640      	mov	r0, r8
 80043ee:	4649      	mov	r1, r9
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4690      	mov	r8, r2
 80043fa:	4699      	mov	r9, r3
 80043fc:	69f8      	ldr	r0, [r7, #28]
 80043fe:	f7fc f8a3 	bl	8000548 <__aeabi_f2d>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	ec43 2b10 	vmov	d0, r2, r3
 800440a:	f00c fcc9 	bl	8010da0 <cos>
 800440e:	ec5b ab10 	vmov	sl, fp, d0
 8004412:	68b8      	ldr	r0, [r7, #8]
 8004414:	f7fc f898 	bl	8000548 <__aeabi_f2d>
 8004418:	4604      	mov	r4, r0
 800441a:	460d      	mov	r5, r1
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc f893 	bl	8000548 <__aeabi_f2d>
 8004422:	a319      	add	r3, pc, #100	; (adr r3, 8004488 <swer3_CalVector+0x1a8>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f7fc f8e6 	bl	80005f8 <__aeabi_dmul>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4620      	mov	r0, r4
 8004432:	4629      	mov	r1, r5
 8004434:	f7fb ff2a 	bl	800028c <__adddf3>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4650      	mov	r0, sl
 800443e:	4659      	mov	r1, fp
 8004440:	f7fc f8da 	bl	80005f8 <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4640      	mov	r0, r8
 800444a:	4649      	mov	r1, r9
 800444c:	f7fb ff1e 	bl	800028c <__adddf3>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	f7fc fba6 	bl	8000ba8 <__aeabi_d2f>
 800445c:	4603      	mov	r3, r0
 800445e:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_3, vct);
 8004460:	ed97 7a05 	vldr	s14, [r7, #20]
 8004464:	edd7 7a06 	vldr	s15, [r7, #24]
 8004468:	eeb0 0a47 	vmov.f32	s0, s14
 800446c:	eef0 0a67 	vmov.f32	s1, s15
 8004470:	2003      	movs	r0, #3
 8004472:	f000 f83b 	bl	80044ec <swer_SetWheelVector>
}
 8004476:	bf00      	nop
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004480:	ecaab8a6 	.word	0xecaab8a6
 8004484:	3fb822bb 	.word	0x3fb822bb
 8004488:	f1800a7c 	.word	0xf1800a7c
 800448c:	3fd21a0c 	.word	0x3fd21a0c
 8004490:	40490fdb 	.word	0x40490fdb

08004494 <swer_Init>:

void swer_Init(){
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
	swerParam[0].pVctXY = &swer0_CalVector;
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <swer_Init+0x44>)
 800449a:	4a10      	ldr	r2, [pc, #64]	; (80044dc <swer_Init+0x48>)
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
	swerParam[MODULE_ID_1].pVctXY = &swer1_CalVector;
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <swer_Init+0x44>)
 80044a0:	4a0f      	ldr	r2, [pc, #60]	; (80044e0 <swer_Init+0x4c>)
 80044a2:	675a      	str	r2, [r3, #116]	; 0x74
	swerParam[MODULE_ID_2].pVctXY = &swer2_CalVector;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <swer_Init+0x44>)
 80044a6:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <swer_Init+0x50>)
 80044a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	swerParam[MODULE_ID_3].pVctXY = &swer3_CalVector;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <swer_Init+0x44>)
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <swer_Init+0x54>)
 80044b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	swerParam[MODULE_ID_1].angleOpt.direct =
	swerParam[MODULE_ID_2].angleOpt.direct =
	swerParam[MODULE_ID_3].angleOpt.direct = 1;
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <swer_Init+0x44>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <swer_Init+0x44>)
 80044be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	swerParam[MODULE_ID_2].angleOpt.direct =
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <swer_Init+0x44>)
 80044c4:	6793      	str	r3, [r2, #120]	; 0x78
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <swer_Init+0x44>)
 80044c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	swerParam[MODULE_ID_1].angleOpt.direct =
 80044ca:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <swer_Init+0x44>)
 80044cc:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	200004fc 	.word	0x200004fc
 80044dc:	08003f65 	.word	0x08003f65
 80044e0:	08003f89 	.word	0x08003f89
 80044e4:	08004141 	.word	0x08004141
 80044e8:	080042e1 	.word	0x080042e1

080044ec <swer_SetWheelVector>:


void swer_SetWheelVector(ModuleID ID,WheelVector vct){swerParam[ID].vct = vct;}
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	eeb0 7a40 	vmov.f32	s14, s0
 80044f8:	eef0 7a60 	vmov.f32	s15, s1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	ed87 7a01 	vstr	s14, [r7, #4]
 8004502:	edc7 7a02 	vstr	s15, [r7, #8]
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	4909      	ldr	r1, [pc, #36]	; (8004530 <swer_SetWheelVector+0x44>)
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3330      	adds	r3, #48	; 0x30
 8004516:	461a      	mov	r2, r3
 8004518:	1d3b      	adds	r3, r7, #4
 800451a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800451e:	e882 0003 	stmia.w	r2, {r0, r1}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	200004fc 	.word	0x200004fc

08004534 <swer_GetWheelVector>:
WheelVector swer_GetWheelVector(ModuleID ID){return swerParam[ID].vct;}
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	490e      	ldr	r1, [pc, #56]	; (800457c <swer_GetWheelVector+0x48>)
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004558:	e883 0003 	stmia.w	r3, {r0, r1}
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	ee07 2a10 	vmov	s14, r2
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eeb0 0a47 	vmov.f32	s0, s14
 800456c:	eef0 0a67 	vmov.f32	s1, s15
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	200004fc 	.word	0x200004fc

08004580 <swer_SetOptAngle>:
void swer_SetOptAngle(ModuleID ID,Angle_Opt_Param angleOpt){swerParam[ID].angleOpt = angleOpt;}
 8004580:	b084      	sub	sp, #16
 8004582:	b4b0      	push	{r4, r5, r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	4604      	mov	r4, r0
 800458a:	f107 001c 	add.w	r0, r7, #28
 800458e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004592:	4623      	mov	r3, r4
 8004594:	71fb      	strb	r3, [r7, #7]
 8004596:	79fa      	ldrb	r2, [r7, #7]
 8004598:	490b      	ldr	r1, [pc, #44]	; (80045c8 <swer_SetOptAngle+0x48>)
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	461d      	mov	r5, r3
 80045a6:	f107 041c 	add.w	r4, r7, #28
 80045aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bcb0      	pop	{r4, r5, r7}
 80045c2:	b004      	add	sp, #16
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200004fc 	.word	0x200004fc

080045cc <swer_GetOptAngle>:
Angle_Opt_Param swer_GetOptAngle(ModuleID ID){return swerParam[ID].angleOpt;}
 80045cc:	b4b0      	push	{r4, r5, r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	490a      	ldr	r1, [pc, #40]	; (8004608 <swer_GetOptAngle+0x3c>)
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	4604      	mov	r4, r0
 80045ea:	461d      	mov	r5, r3
 80045ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bcb0      	pop	{r4, r5, r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	200004fc 	.word	0x200004fc

0800460c <swer_GetFuncHandle>:
pVectorCalXY swer_GetFuncHandle(ModuleID ID){return *swerParam[ID].pVctXY;}
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
 8004616:	79fa      	ldrb	r2, [r7, #7]
 8004618:	4906      	ldr	r1, [pc, #24]	; (8004634 <swer_GetFuncHandle+0x28>)
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	3338      	adds	r3, #56	; 0x38
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	200004fc 	.word	0x200004fc

08004638 <canctrl_RxHeaderGetModeID>:
#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
uint32_t canctrl_GetEvent(){return canEvent;}
CAN_MODE_ID canctrl_RxHeaderGetModeID(){return rxHeader.StdId & 0x0f;}
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <canctrl_RxHeaderGetModeID+0x1c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000610 	.word	0x20000610

08004658 <canctrl_SetTargetDevice>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f86c 	bl	8004744 <canctrl_SetID>
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <canctrl_GetRxHeader>:
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 8004674:	b4b0      	push	{r4, r5, r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <canctrl_GetRxHeader+0x28>)
 8004680:	461c      	mov	r4, r3
 8004682:	4615      	mov	r5, r2
 8004684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800468c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bcb0      	pop	{r4, r5, r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000610 	.word	0x20000610

080046a0 <canctrl_RTR_SetToData>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <canctrl_RTR_SetToData+0x14>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	200005f8 	.word	0x200005f8

080046b8 <canctrl_RTR_TxRequest>:
void canctrl_RTR_SetToRemote(){txHeader.RTR = CAN_RTR_REMOTE;}

HAL_StatusTypeDef canctrl_RTR_TxRequest(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID, CAN_MODE_ID modeID)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
 80046c4:	4613      	mov	r3, r2
 80046c6:	70bb      	strb	r3, [r7, #2]
	if(!can) return HAL_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <canctrl_RTR_TxRequest+0x1a>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e02d      	b.n	800472e <canctrl_RTR_TxRequest+0x76>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f003 fbc3 	bl	8007e5e <HAL_CAN_GetTxMailboxesFreeLevel>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <canctrl_RTR_TxRequest+0x2a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e025      	b.n	800472e <canctrl_RTR_TxRequest+0x76>
	HAL_StatusTypeDef err = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
	txHeader.DLC = 0;
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 80046ee:	2202      	movs	r2, #2
 80046f0:	60da      	str	r2, [r3, #12]
	txHeader.StdId = modeID;
 80046f2:	78bb      	ldrb	r3, [r7, #2]
 80046f4:	4a10      	ldr	r2, [pc, #64]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 80046f6:	6013      	str	r3, [r2, #0]
	txHeader.IDE = CAN_ID_STD;
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
	if(targetID) canctrl_SetTargetDevice(targetID);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <canctrl_RTR_TxRequest+0x54>
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ffa6 	bl	8004658 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <canctrl_RTR_TxRequest+0x84>)
 800470e:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <canctrl_RTR_TxRequest+0x88>)
 8004710:	4909      	ldr	r1, [pc, #36]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f003 fac8 	bl	8007ca8 <HAL_CAN_AddTxMessage>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
	memset(txData,0,sizeof(txData));
 800471c:	2208      	movs	r2, #8
 800471e:	2100      	movs	r1, #0
 8004720:	4807      	ldr	r0, [pc, #28]	; (8004740 <canctrl_RTR_TxRequest+0x88>)
 8004722:	f00a f946 	bl	800e9b2 <memset>
	txHeader.StdId = 0;
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <canctrl_RTR_TxRequest+0x80>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
	return err;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200005f8 	.word	0x200005f8
 800473c:	200005ec 	.word	0x200005ec
 8004740:	2000062c 	.word	0x2000062c

08004744 <canctrl_SetID>:

HAL_StatusTypeDef canctrl_SetID(uint32_t ID){
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	if(ID > 0x7ff) return HAL_ERROR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d301      	bcc.n	8004758 <canctrl_SetID+0x14>
 8004754:	2301      	movs	r3, #1
 8004756:	e006      	b.n	8004766 <canctrl_SetID+0x22>
	txHeader.StdId |= ID;
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <canctrl_SetID+0x30>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <canctrl_SetID+0x30>)
 8004762:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	200005f8 	.word	0x200005f8

08004778 <canctrl_PutMessage>:


HAL_StatusTypeDef canctrl_PutMessage(void* data,size_t dataSize)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	memset(txData,0,sizeof(txData));
 8004782:	2208      	movs	r2, #8
 8004784:	2100      	movs	r1, #0
 8004786:	4809      	ldr	r0, [pc, #36]	; (80047ac <canctrl_PutMessage+0x34>)
 8004788:	f00a f913 	bl	800e9b2 <memset>
	if(dataSize <= 8) txHeader.DLC = dataSize;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d802      	bhi.n	8004798 <canctrl_PutMessage+0x20>
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <canctrl_PutMessage+0x38>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6113      	str	r3, [r2, #16]
	memcpy(txData,data,sizeof(txData));
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <canctrl_PutMessage+0x34>)
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6810      	ldr	r0, [r2, #0]
 800479e:	6851      	ldr	r1, [r2, #4]
 80047a0:	c303      	stmia	r3!, {r0, r1}
	return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	2000062c 	.word	0x2000062c
 80047b0:	200005f8 	.word	0x200005f8

080047b4 <canctrl_GetMessage>:

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <canctrl_GetMessage+0x2c>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <canctrl_GetMessage+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e005      	b.n	80047d8 <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	4905      	ldr	r1, [pc, #20]	; (80047e4 <canctrl_GetMessage+0x30>)
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f00a f9cc 	bl	800eb6e <memcpy>
	return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000610 	.word	0x20000610
 80047e4:	20000634 	.word	0x20000634

080047e8 <canctrl_Send>:
	} else return HAL_BUSY;
}


HAL_StatusTypeDef canctrl_Send(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]

	if(!txHeader.DLC && !can) return HAL_ERROR;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <canctrl_Send+0x74>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <canctrl_Send+0x1e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <canctrl_Send+0x1e>
 8004802:	2301      	movs	r3, #1
 8004804:	e026      	b.n	8004854 <canctrl_Send+0x6c>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f003 fb29 	bl	8007e5e <HAL_CAN_GetTxMailboxesFreeLevel>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <canctrl_Send+0x2e>
 8004812:	2302      	movs	r3, #2
 8004814:	e01e      	b.n	8004854 <canctrl_Send+0x6c>
	HAL_StatusTypeDef err = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
	txHeader.IDE = CAN_ID_STD;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <canctrl_Send+0x74>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
	canctrl_RTR_SetToData();
 8004820:	f7ff ff3e 	bl	80046a0 <canctrl_RTR_SetToData>
	if(targetID) canctrl_SetTargetDevice(targetID);
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <canctrl_Send+0x4a>
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff13 	bl	8004658 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <canctrl_Send+0x78>)
 8004834:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <canctrl_Send+0x7c>)
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <canctrl_Send+0x74>)
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f003 fa35 	bl	8007ca8 <HAL_CAN_AddTxMessage>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
	txHeader.StdId = 0;
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <canctrl_Send+0x74>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
	memset(txData,0,sizeof(txData));
 8004848:	2208      	movs	r2, #8
 800484a:	2100      	movs	r1, #0
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <canctrl_Send+0x7c>)
 800484e:	f00a f8b0 	bl	800e9b2 <memset>
	return err;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200005f8 	.word	0x200005f8
 8004860:	200005ec 	.word	0x200005ec
 8004864:	2000062c 	.word	0x2000062c

08004868 <canctrl_Receive_2>:
	checkEventFromRxHeader();
	return HAL_OK;
}

CAN_MODE_ID canctrl_Receive_2(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <canctrl_Receive_2+0x24>)
 8004874:	4a06      	ldr	r2, [pc, #24]	; (8004890 <canctrl_Receive_2+0x28>)
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f003 fb25 	bl	8007ec8 <HAL_CAN_GetRxMessage>
	return canctrl_RxHeaderGetModeID();
 800487e:	f7ff fedb 	bl	8004638 <canctrl_RxHeaderGetModeID>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000634 	.word	0x20000634
 8004890:	20000610 	.word	0x20000610

08004894 <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	; 0x38
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	4608      	mov	r0, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	817b      	strh	r3, [r7, #10]
 80048a6:	460b      	mov	r3, r1
 80048a8:	813b      	strh	r3, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 80048b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b8:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 80048ba:	893b      	ldrh	r3, [r7, #8]
 80048bc:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 80048c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048c6:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 80048d4:	230d      	movs	r3, #13
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	4619      	mov	r1, r3
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f003 f8be 	bl	8007a60 <HAL_CAN_ConfigFilter>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3738      	adds	r7, #56	; 0x38
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <canfunc_SetBoolValue>:
	bool bVal = temp - 1;
	return bVal;
}

void canfunc_SetBoolValue(bool bVal, CAN_MODE_ID modeID)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	460a      	mov	r2, r1
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71bb      	strb	r3, [r7, #6]
	if(modeID != CANCTRL_MODE_TEST
 80048fe:	79bb      	ldrb	r3, [r7, #6]
 8004900:	2b0b      	cmp	r3, #11
 8004902:	d008      	beq.n	8004916 <canfunc_SetBoolValue+0x28>
	&& modeID != CANCTRL_MODE_PID_BLDC_BREAKPROTECTION
 8004904:	79bb      	ldrb	r3, [r7, #6]
 8004906:	2b0a      	cmp	r3, #10
 8004908:	d005      	beq.n	8004916 <canfunc_SetBoolValue+0x28>
	&& modeID != CANCTRL_MODE_SET_HOME
 800490a:	79bb      	ldrb	r3, [r7, #6]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d002      	beq.n	8004916 <canfunc_SetBoolValue+0x28>
	&& modeID != CANCTRL_MODE_MOTOR_BLDC_BRAKE
 8004910:	79bb      	ldrb	r3, [r7, #6]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d10e      	bne.n	8004934 <canfunc_SetBoolValue+0x46>
	) return;
	canctrl_SetID(modeID);
 8004916:	79bb      	ldrb	r3, [r7, #6]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff13 	bl	8004744 <canctrl_SetID>
	uint8_t temp = (uint8_t)bVal + 1;
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	3301      	adds	r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	73fb      	strb	r3, [r7, #15]
	canctrl_PutMessage((void*)&temp, 1);
 8004926:	f107 030f 	add.w	r3, r7, #15
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff23 	bl	8004778 <canctrl_PutMessage>
 8004932:	e000      	b.n	8004936 <canfunc_SetBoolValue+0x48>
	) return;
 8004934:	bf00      	nop
}
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <canfunc_MotorPutSpeedAndAngle>:
	if(canctrl_GetMessage(&encBLDC,sizeof(encBLDC))!= HAL_OK) while(1);
	return encBLDC;
}

void canfunc_MotorPutSpeedAndAngle(CAN_SpeedBLDC_AngleDC speedAngle)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	463b      	mov	r3, r7
 8004944:	e883 0003 	stmia.w	r3, {r0, r1}
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
 8004948:	2002      	movs	r0, #2
 800494a:	f7ff fefb 	bl	8004744 <canctrl_SetID>
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
 800494e:	463b      	mov	r3, r7
 8004950:	2108      	movs	r1, #8
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff10 	bl	8004778 <canctrl_PutMessage>
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <canfunc_MotorGetSpeedAndAngle>:

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	2108      	movs	r1, #8
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff ff20 	bl	80047b4 <canctrl_GetMessage>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d000      	beq.n	800497c <canfunc_MotorGetSpeedAndAngle+0x1c>
 800497a:	e7fe      	b.n	800497a <canfunc_MotorGetSpeedAndAngle+0x1a>
	return speedAngle;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004988:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	0000      	movs	r0, r0
	...

08004998 <GamepPadHandle>:
 *  Created on: Oct 24, 2023
 *      Author: Admin
 */
#include"Gamepad.h"

void GamepPadHandle(_GamePad *pad,uint8_t *DataTayGame){
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	pad->Status = 1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]

	pad->XLeft = DataTayGame[1];
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	785a      	ldrb	r2, [r3, #1]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	705a      	strb	r2, [r3, #1]
	pad->YLeft = DataTayGame[2];
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	789a      	ldrb	r2, [r3, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	709a      	strb	r2, [r3, #2]

	pad->XRight = DataTayGame[3];
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	78da      	ldrb	r2, [r3, #3]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	70da      	strb	r2, [r3, #3]
	pad->YRight = DataTayGame[4];
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	791a      	ldrb	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	711a      	strb	r2, [r3, #4]

	pad->Left = (DataTayGame[5] >> 7) & 1;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3305      	adds	r3, #5
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	09db      	lsrs	r3, r3, #7
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	715a      	strb	r2, [r3, #5]
	pad->Up = (DataTayGame[5] >> 6) & 1;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	3305      	adds	r3, #5
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	719a      	strb	r2, [r3, #6]
	pad->Right = (DataTayGame[5] >> 5) & 1;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3305      	adds	r3, #5
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	71da      	strb	r2, [r3, #7]
	pad->Down = (DataTayGame[5] >> 4) & 1;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3305      	adds	r3, #5
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	721a      	strb	r2, [r3, #8]

	pad->Square = (DataTayGame[5] >> 3) & 1;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	3305      	adds	r3, #5
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	08db      	lsrs	r3, r3, #3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	725a      	strb	r2, [r3, #9]
	pad->Triangle = (DataTayGame[5] >> 2) & 1;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	3305      	adds	r3, #5
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	729a      	strb	r2, [r3, #10]
	pad->Circle = (DataTayGame[5] >> 1) & 1;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3305      	adds	r3, #5
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	72da      	strb	r2, [r3, #11]
	pad->Cross = DataTayGame[5] & 1;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3305      	adds	r3, #5
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	731a      	strb	r2, [r3, #12]

	pad->L1 = (DataTayGame[6] >> 7) & 1;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3306      	adds	r3, #6
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	09db      	lsrs	r3, r3, #7
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	735a      	strb	r2, [r3, #13]
	pad->L2 = (DataTayGame[6] >> 6) & 1;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	3306      	adds	r3, #6
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	739a      	strb	r2, [r3, #14]
	pad->R1 = (DataTayGame[6] >> 5) & 1;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	3306      	adds	r3, #6
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	741a      	strb	r2, [r3, #16]
	pad->R2 = (DataTayGame[6] >> 4) & 1;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3306      	adds	r3, #6
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	745a      	strb	r2, [r3, #17]

	pad->Touch = (DataTayGame[6] >> 3) & 1;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	3306      	adds	r3, #6
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	74da      	strb	r2, [r3, #19]
	pad->Charge = (DataTayGame[6] >> 2) & 1;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3306      	adds	r3, #6
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	751a      	strb	r2, [r3, #20]

	pad->L3 = (DataTayGame[6] >> 1) & 1;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3306      	adds	r3, #6
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	73da      	strb	r2, [r3, #15]
	pad->R3 = DataTayGame[6] & 1;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3306      	adds	r3, #6
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	749a      	strb	r2, [r3, #18]

	pad->Battery = DataTayGame[7];
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	79da      	ldrb	r2, [r3, #7]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	755a      	strb	r2, [r3, #21]

	pad->XLeftCtr = ((pad->XLeft-125)/10)*0.3/12;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	3b7d      	subs	r3, #125	; 0x7d
 8004b02:	4a3f      	ldr	r2, [pc, #252]	; (8004c00 <GamepPadHandle+0x268>)
 8004b04:	fb82 1203 	smull	r1, r2, r2, r3
 8004b08:	1092      	asrs	r2, r2, #2
 8004b0a:	17db      	asrs	r3, r3, #31
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fd08 	bl	8000524 <__aeabi_i2d>
 8004b14:	a336      	add	r3, pc, #216	; (adr r3, 8004bf0 <GamepPadHandle+0x258>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fd6d 	bl	80005f8 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <GamepPadHandle+0x26c>)
 8004b2c:	f7fb fe8e 	bl	800084c <__aeabi_ddiv>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7fc f836 	bl	8000ba8 <__aeabi_d2f>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
	pad->YLeftCtr = ((pad->YLeft-125)/10)*0.3/12;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	789b      	ldrb	r3, [r3, #2]
 8004b46:	3b7d      	subs	r3, #125	; 0x7d
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <GamepPadHandle+0x268>)
 8004b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8004b4e:	1092      	asrs	r2, r2, #2
 8004b50:	17db      	asrs	r3, r3, #31
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fce5 	bl	8000524 <__aeabi_i2d>
 8004b5a:	a325      	add	r3, pc, #148	; (adr r3, 8004bf0 <GamepPadHandle+0x258>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fd4a 	bl	80005f8 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <GamepPadHandle+0x26c>)
 8004b72:	f7fb fe6b 	bl	800084c <__aeabi_ddiv>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7fc f813 	bl	8000ba8 <__aeabi_d2f>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	61da      	str	r2, [r3, #28]
	pad->XRightCtr =(((pad->XRight-120)/10)*30/12)*M_PI/180;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	78db      	ldrb	r3, [r3, #3]
 8004b8c:	3b78      	subs	r3, #120	; 0x78
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <GamepPadHandle+0x268>)
 8004b90:	fb82 1203 	smull	r1, r2, r2, r3
 8004b94:	1092      	asrs	r2, r2, #2
 8004b96:	17db      	asrs	r3, r3, #31
 8004b98:	1ad2      	subs	r2, r2, r3
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <GamepPadHandle+0x270>)
 8004ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ba8:	1052      	asrs	r2, r2, #1
 8004baa:	17db      	asrs	r3, r3, #31
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fcb8 	bl	8000524 <__aeabi_i2d>
 8004bb4:	a310      	add	r3, pc, #64	; (adr r3, 8004bf8 <GamepPadHandle+0x260>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fd1d 	bl	80005f8 <__aeabi_dmul>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <GamepPadHandle+0x274>)
 8004bcc:	f7fb fe3e 	bl	800084c <__aeabi_ddiv>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f7fb ffe6 	bl	8000ba8 <__aeabi_d2f>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w
 8004bf0:	33333333 	.word	0x33333333
 8004bf4:	3fd33333 	.word	0x3fd33333
 8004bf8:	54442d18 	.word	0x54442d18
 8004bfc:	400921fb 	.word	0x400921fb
 8004c00:	66666667 	.word	0x66666667
 8004c04:	40280000 	.word	0x40280000
 8004c08:	2aaaaaab 	.word	0x2aaaaaab
 8004c0c:	40668000 	.word	0x40668000

08004c10 <checkNull>:
#include "LogData.h"

char txLogBuffer[150] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <checkNull+0x1c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <checkNull+0x10>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <checkNull+0x12>
	return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	200006d4 	.word	0x200006d4

08004c30 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8004c38:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <log_Init+0x1c>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6013      	str	r3, [r2, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	200006d4 	.word	0x200006d4

08004c50 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <log_TransmitCompleteHandle+0x30>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d109      	bne.n	8004c76 <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 8004c62:	4808      	ldr	r0, [pc, #32]	; (8004c84 <log_TransmitCompleteHandle+0x34>)
 8004c64:	f7fb fb04 	bl	8000270 <strlen>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <log_TransmitCompleteHandle+0x34>)
 8004c70:	f009 fe9f 	bl	800e9b2 <memset>
 8004c74:	e000      	b.n	8004c78 <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 8004c76:	bf00      	nop

}
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	200006d4 	.word	0x200006d4
 8004c84:	2000063c 	.word	0x2000063c

08004c88 <log_SendString>:

void log_SendString(){
 8004c88:	b598      	push	{r3, r4, r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 8004c8c:	f7ff ffc0 	bl	8004c10 <checkNull>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d114      	bne.n	8004cc0 <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8004c96:	480b      	ldr	r0, [pc, #44]	; (8004cc4 <log_SendString+0x3c>)
 8004c98:	f7fb faea 	bl	8000270 <strlen>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <log_SendString+0x3c>)
 8004ca2:	210a      	movs	r1, #10
 8004ca4:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <log_SendString+0x40>)
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <log_SendString+0x3c>)
 8004cac:	f7fb fae0 	bl	8000270 <strlen>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <log_SendString+0x3c>)
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f006 fa4a 	bl	800b152 <HAL_UART_Transmit_IT>
 8004cbe:	e000      	b.n	8004cc2 <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 8004cc0:	bf00      	nop
}
 8004cc2:	bd98      	pop	{r3, r4, r7, pc}
 8004cc4:	2000063c 	.word	0x2000063c
 8004cc8:	200006d4 	.word	0x200006d4

08004ccc <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	f107 0310 	add.w	r3, r7, #16
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f009 ff38 	bl	800eb5e <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8004cee:	4808      	ldr	r0, [pc, #32]	; (8004d10 <log_AddHeaderArgumentToBuffer+0x44>)
 8004cf0:	f7fb fabe 	bl	8000270 <strlen>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4a06      	ldr	r2, [pc, #24]	; (8004d10 <log_AddHeaderArgumentToBuffer+0x44>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f107 020c 	add.w	r2, r7, #12
 8004cfe:	4905      	ldr	r1, [pc, #20]	; (8004d14 <log_AddHeaderArgumentToBuffer+0x48>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f009 fdf3 	bl	800e8ec <siprintf>
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	2000063c 	.word	0x2000063c
 8004d14:	08013040 	.word	0x08013040

08004d18 <log_AddArgumentToBuffer>:

void log_AddArgumentToBuffer(void *data, DataType type){
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
	switch(type){
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d84b      	bhi.n	8004dc2 <log_AddArgumentToBuffer+0xaa>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <log_AddArgumentToBuffer+0x18>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d87 	.word	0x08004d87
 8004d38:	08004d41 	.word	0x08004d41
 8004d3c:	08004da5 	.word	0x08004da5
	case TYPE_FLOAT:
		float *fData = (float*)data;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	613b      	str	r3, [r7, #16]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%.2f,",*fData);
 8004d44:	4821      	ldr	r0, [pc, #132]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d46:	f7fb fa93 	bl	8000270 <strlen>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d4e:	189c      	adds	r4, r3, r2
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb fbf7 	bl	8000548 <__aeabi_f2d>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	491c      	ldr	r1, [pc, #112]	; (8004dd0 <log_AddArgumentToBuffer+0xb8>)
 8004d60:	4620      	mov	r0, r4
 8004d62:	f009 fdc3 	bl	800e8ec <siprintf>
		break;
 8004d66:	e02c      	b.n	8004dc2 <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT8:
		uint8_t *uData = (uint8_t*)data;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60bb      	str	r3, [r7, #8]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%u,",*uData);
 8004d6c:	4817      	ldr	r0, [pc, #92]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d6e:	f7fb fa7f 	bl	8000270 <strlen>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d76:	1898      	adds	r0, r3, r2
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4915      	ldr	r1, [pc, #84]	; (8004dd4 <log_AddArgumentToBuffer+0xbc>)
 8004d80:	f009 fdb4 	bl	800e8ec <siprintf>
		break;
 8004d84:	e01d      	b.n	8004dc2 <log_AddArgumentToBuffer+0xaa>
	case TYPE_INT:
		int *iData = (int*)data;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%d,",*iData);
 8004d8a:	4810      	ldr	r0, [pc, #64]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d8c:	f7fb fa70 	bl	8000270 <strlen>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004d94:	1898      	adds	r0, r3, r2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <log_AddArgumentToBuffer+0xc0>)
 8004d9e:	f009 fda5 	bl	800e8ec <siprintf>
		break;
 8004da2:	e00e      	b.n	8004dc2 <log_AddArgumentToBuffer+0xaa>
	case TYPE_UINT32:
		uint32_t *u32Data = (uint32_t*)data;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
		sprintf(txLogBuffer+strlen(txLogBuffer),"%d,",*u32Data);
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004daa:	f7fb fa61 	bl	8000270 <strlen>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <log_AddArgumentToBuffer+0xb4>)
 8004db2:	1898      	adds	r0, r3, r2
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <log_AddArgumentToBuffer+0xc0>)
 8004dbc:	f009 fd96 	bl	800e8ec <siprintf>
		break;
 8004dc0:	bf00      	nop
	}
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	2000063c 	.word	0x2000063c
 8004dd0:	08013044 	.word	0x08013044
 8004dd4:	0801304c 	.word	0x0801304c
 8004dd8:	08013050 	.word	0x08013050

08004ddc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a06      	ldr	r2, [pc, #24]	; (8004e0c <vApplicationGetIdleTaskMemory+0x30>)
 8004df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	200006d8 	.word	0x200006d8
 8004e0c:	20000778 	.word	0x20000778

08004e10 <nodeHome_SetFlag>:
}


uint32_t nodeSwerveSetHomeComplete = 0;
#define SETHOME_FLAG_GROUP nodeSwerveSetHomeComplete
void nodeHome_SetFlag(CAN_DEVICE_ID e) {
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
	SETFLAG(SETHOME_FLAG_GROUP, e);
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <nodeHome_SetFlag+0x28>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <nodeHome_SetFlag+0x28>)
 8004e28:	6013      	str	r3, [r2, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200013b8 	.word	0x200013b8

08004e3c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*=============================== CAN ===============================*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004e44:	2102      	movs	r1, #2
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f003 f976 	bl	8008138 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO0);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fd0a 	bl	8004868 <canctrl_Receive_2>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	7bf9      	ldrb	r1, [r7, #15]
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	f008 fa94 	bl	800d398 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20001084 	.word	0x20001084
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8004ea0:	2110      	movs	r1, #16
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f003 f948 	bl	8008138 <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO1);
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fcdc 	bl	8004868 <canctrl_Receive_2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	7bf9      	ldrb	r1, [r7, #15]
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	f008 fa66 	bl	800d398 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20001084 	.word	0x20001084
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <CAN_Init>:
void CAN_Init() {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan1);
 8004efa:	480b      	ldr	r0, [pc, #44]	; (8004f28 <CAN_Init+0x34>)
 8004efc:	f002 fe90 	bl	8007c20 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8004f00:	2112      	movs	r1, #18
 8004f02:	4809      	ldr	r0, [pc, #36]	; (8004f28 <CAN_Init+0x34>)
 8004f04:	f003 f8f2 	bl	80080ec <HAL_CAN_ActivateNotification>
	canctrl_Filter_Mask16(&hcan1,
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	2360      	movs	r3, #96	; 0x60
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2320      	movs	r3, #32
 8004f16:	2260      	movs	r2, #96	; 0x60
 8004f18:	2120      	movs	r1, #32
 8004f1a:	4803      	ldr	r0, [pc, #12]	; (8004f28 <CAN_Init+0x34>)
 8004f1c:	f7ff fcba 	bl	8004894 <canctrl_Filter_Mask16>
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			CANCTRL_MODE_SET_HOME << 5,
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			0,
			CAN_RX_FIFO0);
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200008c0 	.word	0x200008c0

08004f2c <setHomeComplete>:

void setHomeComplete()
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0

}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <handleFunctionCAN>:

void handleFunctionCAN(CAN_MODE_ID mode, CAN_DEVICE_ID targetID) {
 8004f3c:	b5b0      	push	{r4, r5, r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	460a      	mov	r2, r1
 8004f46:	73fb      	strb	r3, [r7, #15]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	73bb      	strb	r3, [r7, #14]
	switch (mode) {
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d002      	beq.n	8004f58 <handleFunctionCAN+0x1c>
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d00b      	beq.n	8004f6e <handleFunctionCAN+0x32>
		case CANCTRL_MODE_NODE_REQ_SPEED_ANGLE:
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
//			flagmain_ClearFlag(MEVT_GET_NODE_SPEED_ANGLE);
		break;
		default:
			break;
 8004f56:	e01a      	b.n	8004f8e <handleFunctionCAN+0x52>
			nodeHome_SetFlag(targetID);
 8004f58:	7bbb      	ldrb	r3, [r7, #14]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff58 	bl	8004e10 <nodeHome_SetFlag>
			if(nodeSwerveSetHomeComplete == 30)
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <handleFunctionCAN+0x5c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b1e      	cmp	r3, #30
 8004f66:	d111      	bne.n	8004f8c <handleFunctionCAN+0x50>
				setHomeComplete();
 8004f68:	f7ff ffe0 	bl	8004f2c <setHomeComplete>
		break;
 8004f6c:	e00e      	b.n	8004f8c <handleFunctionCAN+0x50>
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
 8004f6e:	7bbb      	ldrb	r3, [r7, #14]
 8004f70:	1e5c      	subs	r4, r3, #1
 8004f72:	4d0a      	ldr	r5, [pc, #40]	; (8004f9c <handleFunctionCAN+0x60>)
 8004f74:	463b      	mov	r3, r7
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fcf2 	bl	8004960 <canfunc_MotorGetSpeedAndAngle>
 8004f7c:	00e3      	lsls	r3, r4, #3
 8004f7e:	442b      	add	r3, r5
 8004f80:	463a      	mov	r2, r7
 8004f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f86:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8004f8a:	e000      	b.n	8004f8e <handleFunctionCAN+0x52>
		break;
 8004f8c:	bf00      	nop
	}

}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bdb0      	pop	{r4, r5, r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200013b8 	.word	0x200013b8
 8004f9c:	200013bc 	.word	0x200013bc

08004fa0 <Receive>:
int CurrAngle;

char ds[12];
uint8_t uart2_ds[5], ds_ind, ds_cnt, ds_flg;

void Receive(uint8_t *DataArray){
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
      uint8_t *pInt = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
      if(DataArray[4] == 13){
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b0d      	cmp	r3, #13
 8004fb4:	d112      	bne.n	8004fdc <Receive+0x3c>
           pInt = &CurrAngle;
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <Receive+0x54>)
 8004fb8:	60bb      	str	r3, [r7, #8]
           for(uint8_t i = 0; i < 4; i++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e00a      	b.n	8004fd6 <Receive+0x36>
               *(pInt + i) = DataArray[i];
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	440b      	add	r3, r1
 8004fcc:	7812      	ldrb	r2, [r2, #0]
 8004fce:	701a      	strb	r2, [r3, #0]
           for(uint8_t i = 0; i < 4; i++) {
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d9f1      	bls.n	8004fc0 <Receive+0x20>
            }
      }
      	  memset(DataArray,0,5);
 8004fdc:	2205      	movs	r2, #5
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f009 fce6 	bl	800e9b2 <memset>
      	YawHandle = 1;
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <Receive+0x58>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
 }
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200013d8 	.word	0x200013d8
 8004ff8:	200013d4 	.word	0x200013d4

08004ffc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
	if(huart -> Instance == USART1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a0b      	ldr	r2, [pc, #44]	; (800503c <HAL_UARTEx_RxEventCallback+0x40>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10f      	bne.n	8005032 <HAL_UARTEx_RxEventCallback+0x36>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart2_ds, 5);
 8005012:	2205      	movs	r2, #5
 8005014:	490a      	ldr	r1, [pc, #40]	; (8005040 <HAL_UARTEx_RxEventCallback+0x44>)
 8005016:	480b      	ldr	r0, [pc, #44]	; (8005044 <HAL_UARTEx_RxEventCallback+0x48>)
 8005018:	f006 f910 	bl	800b23c <HAL_UARTEx_ReceiveToIdle_DMA>
			Receive(uart2_ds);
 800501c:	4808      	ldr	r0, [pc, #32]	; (8005040 <HAL_UARTEx_RxEventCallback+0x44>)
 800501e:	f7ff ffbf 	bl	8004fa0 <Receive>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_UARTEx_RxEventCallback+0x4c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0208 	bic.w	r2, r2, #8
 8005030:	601a      	str	r2, [r3, #0]
	}
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40011000 	.word	0x40011000
 8005040:	200013dc 	.word	0x200013dc
 8005044:	20000a50 	.word	0x20000a50
 8005048:	20000b1c 	.word	0x20000b1c

0800504c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_UART_RxCpltCallback+0xa8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d145      	bne.n	80050ea <HAL_UART_RxCpltCallback+0x9e>
		gamepadRxIsBusy = 1;
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_UART_RxCpltCallback+0xac>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]
		int ViTriData = -1;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e00a      	b.n	8005086 <HAL_UART_RxCpltCallback+0x3a>
			if (UARTRX3_Buffer[i] == 0xAA) {
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <HAL_UART_RxCpltCallback+0xb0>)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2baa      	cmp	r3, #170	; 0xaa
 800507a:	d101      	bne.n	8005080 <HAL_UART_RxCpltCallback+0x34>
				ViTriData = i;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3301      	adds	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b08      	cmp	r3, #8
 800508a:	ddf1      	ble.n	8005070 <HAL_UART_RxCpltCallback+0x24>
			}
		}
		if (ViTriData != -1) {
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d01e      	beq.n	80050d2 <HAL_UART_RxCpltCallback+0x86>
			int cnt = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8005098:	e013      	b.n	80050c2 <HAL_UART_RxCpltCallback+0x76>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_UART_RxCpltCallback+0xb0>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	7819      	ldrb	r1, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_UART_RxCpltCallback+0xb4>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	460a      	mov	r2, r1
 80050aa:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3301      	adds	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
				if (ViTriData >= 9) {
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	dd01      	ble.n	80050bc <HAL_UART_RxCpltCallback+0x70>
					ViTriData = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	dde8      	ble.n	800509a <HAL_UART_RxCpltCallback+0x4e>
			}

			GamepPadHandle(&GamePad, DataTayGame);
 80050c8:	490d      	ldr	r1, [pc, #52]	; (8005100 <HAL_UART_RxCpltCallback+0xb4>)
 80050ca:	480e      	ldr	r0, [pc, #56]	; (8005104 <HAL_UART_RxCpltCallback+0xb8>)
 80050cc:	f7ff fc64 	bl	8004998 <GamepPadHandle>
 80050d0:	e002      	b.n	80050d8 <HAL_UART_RxCpltCallback+0x8c>

		} else {
			GamePad.Status = 0;
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_UART_RxCpltCallback+0xb8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
		}
		if (!gamepadRxIsBusy)
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <HAL_UART_RxCpltCallback+0xac>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_UART_RxCpltCallback+0x9e>
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 80050e0:	2209      	movs	r2, #9
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <HAL_UART_RxCpltCallback+0xb0>)
 80050e4:	4808      	ldr	r0, [pc, #32]	; (8005108 <HAL_UART_RxCpltCallback+0xbc>)
 80050e6:	f006 f879 	bl	800b1dc <HAL_UART_Receive_IT>

	}
}
 80050ea:	bf00      	nop
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40004800 	.word	0x40004800
 80050f8:	200013b4 	.word	0x200013b4
 80050fc:	20001378 	.word	0x20001378
 8005100:	20001384 	.word	0x20001384
 8005104:	20001390 	.word	0x20001390
 8005108:	20000ad8 	.word	0x20000ad8

0800510c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	while (1);
 8005114:	e7fe      	b.n	8005114 <HAL_CAN_ErrorCallback+0x8>
	...

08005118 <HAL_UART_ErrorCallback>:
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
	memset(UARTRX3_Buffer, 0, sizeof(UARTRX3_Buffer));
 8005136:	2209      	movs	r2, #9
 8005138:	2100      	movs	r1, #0
 800513a:	480a      	ldr	r0, [pc, #40]	; (8005164 <HAL_UART_ErrorCallback+0x4c>)
 800513c:	f009 fc39 	bl	800e9b2 <memset>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8005140:	2209      	movs	r2, #9
 8005142:	4908      	ldr	r1, [pc, #32]	; (8005164 <HAL_UART_ErrorCallback+0x4c>)
 8005144:	4808      	ldr	r0, [pc, #32]	; (8005168 <HAL_UART_ErrorCallback+0x50>)
 8005146:	f006 f849 	bl	800b1dc <HAL_UART_Receive_IT>
	__HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005158:	60da      	str	r2, [r3, #12]
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20001378 	.word	0x20001378
 8005168:	20000ad8 	.word	0x20000ad8

0800516c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fd6b 	bl	8004c50 <log_TransmitCompleteHandle>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <Send_Data>:

void Send_Data(){
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af00      	add	r7, sp, #0

	odo_Pose pose = odo_GetPose();
 8005188:	f7fd fac8 	bl	800271c <odo_GetPose>
 800518c:	eeb0 6a40 	vmov.f32	s12, s0
 8005190:	eef0 6a60 	vmov.f32	s13, s1
 8005194:	eeb0 7a41 	vmov.f32	s14, s2
 8005198:	eef0 7a61 	vmov.f32	s15, s3
 800519c:	ed87 6a04 	vstr	s12, [r7, #16]
 80051a0:	edc7 6a05 	vstr	s13, [r7, #20]
 80051a4:	ed87 7a06 	vstr	s14, [r7, #24]
 80051a8:	edc7 7a07 	vstr	s15, [r7, #28]
	float Xtrajec = GetXtraject(TrajecX);
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7fe fba9 	bl	8003904 <GetXtraject>
 80051b2:	eef0 7a40 	vmov.f32	s15, s0
 80051b6:	edc7 7a03 	vstr	s15, [r7, #12]
	float Ytrajec = GetXtraject(TrajecY);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7fe fba2 	bl	8003904 <GetXtraject>
 80051c0:	eef0 7a40 	vmov.f32	s15, s0
 80051c4:	edc7 7a02 	vstr	s15, [r7, #8]
	float ThetaTrajec = GetXtraject(TrajecTheta);
 80051c8:	2002      	movs	r0, #2
 80051ca:	f7fe fb9b 	bl	8003904 <GetXtraject>
 80051ce:	eef0 7a40 	vmov.f32	s15, s0
 80051d2:	edc7 7a01 	vstr	s15, [r7, #4]

	log_AddArgumentToBuffer((void*)&pose.poseX, TYPE_FLOAT);
 80051d6:	f107 0310 	add.w	r3, r7, #16
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fd9b 	bl	8004d18 <log_AddArgumentToBuffer>
	log_AddArgumentToBuffer((void*)&pose.poseY, TYPE_FLOAT);
 80051e2:	f107 0310 	add.w	r3, r7, #16
 80051e6:	3304      	adds	r3, #4
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fd94 	bl	8004d18 <log_AddArgumentToBuffer>
	log_AddArgumentToBuffer((void*)&pose.poseTheta, TYPE_FLOAT);
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	3308      	adds	r3, #8
 80051f6:	2102      	movs	r1, #2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fd8d 	bl	8004d18 <log_AddArgumentToBuffer>

	log_AddArgumentToBuffer((void*)&Xtrajec, TYPE_FLOAT);
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fd87 	bl	8004d18 <log_AddArgumentToBuffer>
	log_AddArgumentToBuffer((void*)&Ytrajec, TYPE_FLOAT);
 800520a:	f107 0308 	add.w	r3, r7, #8
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fd81 	bl	8004d18 <log_AddArgumentToBuffer>
	log_AddArgumentToBuffer((void*)&ThetaTrajec, TYPE_FLOAT);
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fd7c 	bl	8004d18 <log_AddArgumentToBuffer>


	log_SendString();
 8005220:	f7ff fd32 	bl	8004c88 <log_SendString>
}
 8005224:	bf00      	nop
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <Send_Header>:

void Send_Header(){
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
	log_AddHeaderArgumentToBuffer("PoseX");
 8005230:	480a      	ldr	r0, [pc, #40]	; (800525c <Send_Header+0x30>)
 8005232:	f7ff fd4b 	bl	8004ccc <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseY");
 8005236:	480a      	ldr	r0, [pc, #40]	; (8005260 <Send_Header+0x34>)
 8005238:	f7ff fd48 	bl	8004ccc <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseTheta");
 800523c:	4809      	ldr	r0, [pc, #36]	; (8005264 <Send_Header+0x38>)
 800523e:	f7ff fd45 	bl	8004ccc <log_AddHeaderArgumentToBuffer>

	log_AddHeaderArgumentToBuffer("TrajecPlanX");
 8005242:	4809      	ldr	r0, [pc, #36]	; (8005268 <Send_Header+0x3c>)
 8005244:	f7ff fd42 	bl	8004ccc <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanY");
 8005248:	4808      	ldr	r0, [pc, #32]	; (800526c <Send_Header+0x40>)
 800524a:	f7ff fd3f 	bl	8004ccc <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanTheta");
 800524e:	4808      	ldr	r0, [pc, #32]	; (8005270 <Send_Header+0x44>)
 8005250:	f7ff fd3c 	bl	8004ccc <log_AddHeaderArgumentToBuffer>

	log_SendString();
 8005254:	f7ff fd18 	bl	8004c88 <log_SendString>
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08013054 	.word	0x08013054
 8005260:	0801305c 	.word	0x0801305c
 8005264:	08013064 	.word	0x08013064
 8005268:	08013070 	.word	0x08013070
 800526c:	0801307c 	.word	0x0801307c
 8005270:	08013088 	.word	0x08013088
 8005274:	00000000 	.word	0x00000000

08005278 <readADC>:
float count,adc_val_Fil,sum;
float adc_val = 0;
float distance = 0;
void readADC(){
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800527c:	483c      	ldr	r0, [pc, #240]	; (8005370 <readADC+0xf8>)
 800527e:	f001 fdff 	bl	8006e80 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8005282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005286:	483a      	ldr	r0, [pc, #232]	; (8005370 <readADC+0xf8>)
 8005288:	f001 feff 	bl	800708a <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 800528c:	4838      	ldr	r0, [pc, #224]	; (8005370 <readADC+0xf8>)
 800528e:	f002 f897 	bl	80073c0 <HAL_ADC_GetValue>
 8005292:	ee07 0a90 	vmov	s15, r0
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <readADC+0xfc>)
 800529c:	edc3 7a00 	vstr	s15, [r3]
	count++;
 80052a0:	4b35      	ldr	r3, [pc, #212]	; (8005378 <readADC+0x100>)
 80052a2:	edd3 7a00 	vldr	s15, [r3]
 80052a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052ae:	4b32      	ldr	r3, [pc, #200]	; (8005378 <readADC+0x100>)
 80052b0:	edc3 7a00 	vstr	s15, [r3]
	sum+=adc_val;
 80052b4:	4b31      	ldr	r3, [pc, #196]	; (800537c <readADC+0x104>)
 80052b6:	ed93 7a00 	vldr	s14, [r3]
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <readADC+0xfc>)
 80052bc:	edd3 7a00 	vldr	s15, [r3]
 80052c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c4:	4b2d      	ldr	r3, [pc, #180]	; (800537c <readADC+0x104>)
 80052c6:	edc3 7a00 	vstr	s15, [r3]
	if(count>50)
 80052ca:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <readADC+0x100>)
 80052cc:	edd3 7a00 	vldr	s15, [r3]
 80052d0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005380 <readADC+0x108>
 80052d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	dd11      	ble.n	8005302 <readADC+0x8a>
	{
		adc_val_Fil=sum/50;
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <readADC+0x104>)
 80052e0:	ed93 7a00 	vldr	s14, [r3]
 80052e4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005380 <readADC+0x108>
 80052e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <readADC+0x10c>)
 80052ee:	edc3 7a00 	vstr	s15, [r3]
		sum = 0;
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <readADC+0x104>)
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
		count = 0;
 80052fa:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <readADC+0x100>)
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
	}
	distance = (9.8/3945) * adc_val_Fil - 150 * (9.8/3945) + 0.28;
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <readADC+0x10c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fb f91e 	bl	8000548 <__aeabi_f2d>
 800530c:	a312      	add	r3, pc, #72	; (adr r3, 8005358 <readADC+0xe0>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fb f971 	bl	80005f8 <__aeabi_dmul>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	a310      	add	r3, pc, #64	; (adr r3, 8005360 <readADC+0xe8>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ffb0 	bl	8000288 <__aeabi_dsub>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	a30d      	add	r3, pc, #52	; (adr r3, 8005368 <readADC+0xf0>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ffa9 	bl	800028c <__adddf3>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	f7fb fc31 	bl	8000ba8 <__aeabi_d2f>
 8005346:	4603      	mov	r3, r0
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <readADC+0x110>)
 800534a:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc1);
 800534c:	4808      	ldr	r0, [pc, #32]	; (8005370 <readADC+0xf8>)
 800534e:	f001 fe69 	bl	8007024 <HAL_ADC_Stop>
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	b87677a3 	.word	0xb87677a3
 800535c:	3f6459a7 	.word	0x3f6459a7
 8005360:	8c2ad433 	.word	0x8c2ad433
 8005364:	3fd7d910 	.word	0x3fd7d910
 8005368:	1eb851ec 	.word	0x1eb851ec
 800536c:	3fd1eb85 	.word	0x3fd1eb85
 8005370:	20000878 	.word	0x20000878
 8005374:	200013f0 	.word	0x200013f0
 8005378:	200013e4 	.word	0x200013e4
 800537c:	200013ec 	.word	0x200013ec
 8005380:	42480000 	.word	0x42480000
 8005384:	200013e8 	.word	0x200013e8
 8005388:	200013f4 	.word	0x200013f4

0800538c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b0aa      	sub	sp, #168	; 0xa8
 8005390:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005392:	f001 fcef 	bl	8006d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005396:	f000 f8fb 	bl	8005590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800539a:	f000 fc73 	bl	8005c84 <MX_GPIO_Init>
  MX_DMA_Init();
 800539e:	f000 fc3b 	bl	8005c18 <MX_DMA_Init>
  MX_CAN1_Init();
 80053a2:	f000 f9b1 	bl	8005708 <MX_CAN1_Init>
  MX_TIM2_Init();
 80053a6:	f000 fa3d 	bl	8005824 <MX_TIM2_Init>
  MX_TIM3_Init();
 80053aa:	f000 fa8f 	bl	80058cc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80053ae:	f000 fc09 	bl	8005bc4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80053b2:	f000 f9df 	bl	8005774 <MX_TIM1_Init>
  MX_TIM10_Init();
 80053b6:	f000 fb8d 	bl	8005ad4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80053ba:	f000 fbaf 	bl	8005b1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80053be:	f000 fbd7 	bl	8005b70 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80053c2:	f000 fb05 	bl	80059d0 <MX_TIM5_Init>
  MX_ADC1_Init();
 80053c6:	f000 f94d 	bl	8005664 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  	log_Init(&huart2);
  	log_Init(&huart2);
 80053ca:	4856      	ldr	r0, [pc, #344]	; (8005524 <main+0x198>)
 80053cc:	f7ff fc30 	bl	8004c30 <log_Init>
  	Send_Header();
 80053d0:	f7ff ff2c 	bl	800522c <Send_Header>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 80053d4:	2209      	movs	r2, #9
 80053d6:	4954      	ldr	r1, [pc, #336]	; (8005528 <main+0x19c>)
 80053d8:	4854      	ldr	r0, [pc, #336]	; (800552c <main+0x1a0>)
 80053da:	f005 feff 	bl	800b1dc <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart2_ds, 5);
 80053de:	2205      	movs	r2, #5
 80053e0:	4953      	ldr	r1, [pc, #332]	; (8005530 <main+0x1a4>)
 80053e2:	4854      	ldr	r0, [pc, #336]	; (8005534 <main+0x1a8>)
 80053e4:	f005 ff2a 	bl	800b23c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80053e8:	4b53      	ldr	r3, [pc, #332]	; (8005538 <main+0x1ac>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b52      	ldr	r3, [pc, #328]	; (8005538 <main+0x1ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0208 	bic.w	r2, r2, #8
 80053f6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80053f8:	2100      	movs	r1, #0
 80053fa:	4850      	ldr	r0, [pc, #320]	; (800553c <main+0x1b0>)
 80053fc:	f004 fd74 	bl	8009ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005400:	2104      	movs	r1, #4
 8005402:	484e      	ldr	r0, [pc, #312]	; (800553c <main+0x1b0>)
 8005404:	f004 fd70 	bl	8009ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8005408:	2100      	movs	r1, #0
 800540a:	484d      	ldr	r0, [pc, #308]	; (8005540 <main+0x1b4>)
 800540c:	f004 fd6c 	bl	8009ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8005410:	2104      	movs	r1, #4
 8005412:	484b      	ldr	r0, [pc, #300]	; (8005540 <main+0x1b4>)
 8005414:	f004 fd68 	bl	8009ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8005418:	213c      	movs	r1, #60	; 0x3c
 800541a:	484a      	ldr	r0, [pc, #296]	; (8005544 <main+0x1b8>)
 800541c:	f004 fed2 	bl	800a1c4 <HAL_TIM_Encoder_Start>
	pid.kP = -0.12;
 8005420:	4b49      	ldr	r3, [pc, #292]	; (8005548 <main+0x1bc>)
 8005422:	4a4a      	ldr	r2, [pc, #296]	; (800554c <main+0x1c0>)
 8005424:	60da      	str	r2, [r3, #12]
	pid.kI = 5.32;
 8005426:	4b48      	ldr	r3, [pc, #288]	; (8005548 <main+0x1bc>)
 8005428:	4a49      	ldr	r2, [pc, #292]	; (8005550 <main+0x1c4>)
 800542a:	615a      	str	r2, [r3, #20]
	pid.kD = 20.22;
 800542c:	4b46      	ldr	r3, [pc, #280]	; (8005548 <main+0x1bc>)
 800542e:	4a49      	ldr	r2, [pc, #292]	; (8005554 <main+0x1c8>)
 8005430:	621a      	str	r2, [r3, #32]
	pid.alpha = 5.31;
 8005432:	4b45      	ldr	r3, [pc, #276]	; (8005548 <main+0x1bc>)
 8005434:	4a48      	ldr	r2, [pc, #288]	; (8005558 <main+0x1cc>)
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
	pid.deltaT = 0.001;
 8005438:	4b43      	ldr	r3, [pc, #268]	; (8005548 <main+0x1bc>)
 800543a:	4a48      	ldr	r2, [pc, #288]	; (800555c <main+0x1d0>)
 800543c:	609a      	str	r2, [r3, #8]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 256);
 800543e:	4b48      	ldr	r3, [pc, #288]	; (8005560 <main+0x1d4>)
 8005440:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005444:	461d      	mov	r5, r3
 8005446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800544a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800544e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005452:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005456:	2100      	movs	r1, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f007 f884 	bl	800c566 <osThreadCreate>
 800545e:	4603      	mov	r3, r0
 8005460:	4a40      	ldr	r2, [pc, #256]	; (8005564 <main+0x1d8>)
 8005462:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskInvKine */
  osThreadStaticDef(TaskInvKine, InverseKinematic, osPriorityLow, 0, 256, TaskInvKineBuffer, &TaskInvKineControlBlock);
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <main+0x1dc>)
 8005466:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800546a:	461d      	mov	r5, r3
 800546c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800546e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005470:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskInvKineHandle = osThreadCreate(osThread(TaskInvKine), NULL);
 8005478:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f007 f871 	bl	800c566 <osThreadCreate>
 8005484:	4603      	mov	r3, r0
 8005486:	4a39      	ldr	r2, [pc, #228]	; (800556c <main+0x1e0>)
 8005488:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCAN */
  osThreadStaticDef(TaskCAN, CAN_Bus, osPriorityBelowNormal, 0, 128, TaskCANBuffer, &TaskCANControlBlock);
 800548a:	4b39      	ldr	r3, [pc, #228]	; (8005570 <main+0x1e4>)
 800548c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8005490:	461d      	mov	r5, r3
 8005492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800549a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCANHandle = osThreadCreate(osThread(TaskCAN), NULL);
 800549e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f007 f85e 	bl	800c566 <osThreadCreate>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <main+0x1e8>)
 80054ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskActuator */
  osThreadDef(TaskActuator, Actuator, osPriorityAboveNormal, 0, 128);
 80054b0:	4b31      	ldr	r3, [pc, #196]	; (8005578 <main+0x1ec>)
 80054b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskActuatorHandle = osThreadCreate(osThread(TaskActuator), NULL);
 80054c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f007 f84b 	bl	800c566 <osThreadCreate>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a2a      	ldr	r2, [pc, #168]	; (800557c <main+0x1f0>)
 80054d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskOdometer */
  osThreadDef(TaskOdometer, OdometerHandle, osPriorityHigh, 0, 256);
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <main+0x1f4>)
 80054d8:	f107 041c 	add.w	r4, r7, #28
 80054dc:	461d      	mov	r5, r3
 80054de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskOdometerHandle = osThreadCreate(osThread(TaskOdometer), NULL);
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f007 f838 	bl	800c566 <osThreadCreate>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <main+0x1f8>)
 80054fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSilo */
  osThreadDef(TaskSilo, StartTaskSilo, osPriorityLow, 0, 64);
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <main+0x1fc>)
 80054fe:	463c      	mov	r4, r7
 8005500:	461d      	mov	r5, r3
 8005502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800550a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSiloHandle = osThreadCreate(osThread(TaskSilo), NULL);
 800550e:	463b      	mov	r3, r7
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f007 f827 	bl	800c566 <osThreadCreate>
 8005518:	4603      	mov	r3, r0
 800551a:	4a1c      	ldr	r2, [pc, #112]	; (800558c <main+0x200>)
 800551c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800551e:	f007 f81b 	bl	800c558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8005522:	e7fe      	b.n	8005522 <main+0x196>
 8005524:	20000a94 	.word	0x20000a94
 8005528:	20001378 	.word	0x20001378
 800552c:	20000ad8 	.word	0x20000ad8
 8005530:	200013dc 	.word	0x200013dc
 8005534:	20000a50 	.word	0x20000a50
 8005538:	20000b1c 	.word	0x20000b1c
 800553c:	20000978 	.word	0x20000978
 8005540:	200009c0 	.word	0x200009c0
 8005544:	20000930 	.word	0x20000930
 8005548:	20001334 	.word	0x20001334
 800554c:	bdf5c28f 	.word	0xbdf5c28f
 8005550:	40aa3d71 	.word	0x40aa3d71
 8005554:	41a1c28f 	.word	0x41a1c28f
 8005558:	40a9eb85 	.word	0x40a9eb85
 800555c:	3a83126f 	.word	0x3a83126f
 8005560:	080130a4 	.word	0x080130a4
 8005564:	20000bdc 	.word	0x20000bdc
 8005568:	080130cc 	.word	0x080130cc
 800556c:	20000be0 	.word	0x20000be0
 8005570:	080130f0 	.word	0x080130f0
 8005574:	20001084 	.word	0x20001084
 8005578:	0801311c 	.word	0x0801311c
 800557c:	20001328 	.word	0x20001328
 8005580:	08013148 	.word	0x08013148
 8005584:	2000132c 	.word	0x2000132c
 8005588:	08013170 	.word	0x08013170
 800558c:	20001330 	.word	0x20001330

08005590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b094      	sub	sp, #80	; 0x50
 8005594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005596:	f107 0320 	add.w	r3, r7, #32
 800559a:	2230      	movs	r2, #48	; 0x30
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f009 fa07 	bl	800e9b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055a4:	f107 030c 	add.w	r3, r7, #12
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	4b28      	ldr	r3, [pc, #160]	; (800565c <SystemClock_Config+0xcc>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <SystemClock_Config+0xcc>)
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6413      	str	r3, [r2, #64]	; 0x40
 80055c4:	4b25      	ldr	r3, [pc, #148]	; (800565c <SystemClock_Config+0xcc>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	4b22      	ldr	r3, [pc, #136]	; (8005660 <SystemClock_Config+0xd0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <SystemClock_Config+0xd0>)
 80055da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <SystemClock_Config+0xd0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055f0:	2301      	movs	r3, #1
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80055f4:	2310      	movs	r3, #16
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055f8:	2302      	movs	r3, #2
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005600:	2308      	movs	r3, #8
 8005602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8005604:	23a0      	movs	r3, #160	; 0xa0
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005608:	2302      	movs	r3, #2
 800560a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800560c:	2304      	movs	r3, #4
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005610:	f107 0320 	add.w	r3, r7, #32
 8005614:	4618      	mov	r0, r3
 8005616:	f003 fe83 	bl	8009320 <HAL_RCC_OscConfig>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005620:	f000 fe6a 	bl	80062f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005624:	230f      	movs	r3, #15
 8005626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005628:	2302      	movs	r3, #2
 800562a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800563a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	2105      	movs	r1, #5
 8005642:	4618      	mov	r0, r3
 8005644:	f004 f8e4 	bl	8009810 <HAL_RCC_ClockConfig>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800564e:	f000 fe53 	bl	80062f8 <Error_Handler>
  }
}
 8005652:	bf00      	nop
 8005654:	3750      	adds	r7, #80	; 0x50
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800
 8005660:	40007000 	.word	0x40007000

08005664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800566a:	463b      	mov	r3, r7
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <MX_ADC1_Init+0x98>)
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <MX_ADC1_Init+0x9c>)
 800567a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800567c:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <MX_ADC1_Init+0x98>)
 800567e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <MX_ADC1_Init+0x98>)
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <MX_ADC1_Init+0x98>)
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <MX_ADC1_Init+0x98>)
 8005692:	2201      	movs	r2, #1
 8005694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <MX_ADC1_Init+0x98>)
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <MX_ADC1_Init+0x98>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056a4:	4b15      	ldr	r3, [pc, #84]	; (80056fc <MX_ADC1_Init+0x98>)
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <MX_ADC1_Init+0xa0>)
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <MX_ADC1_Init+0x98>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80056b0:	4b12      	ldr	r3, [pc, #72]	; (80056fc <MX_ADC1_Init+0x98>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <MX_ADC1_Init+0x98>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <MX_ADC1_Init+0x98>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056c4:	480d      	ldr	r0, [pc, #52]	; (80056fc <MX_ADC1_Init+0x98>)
 80056c6:	f001 fb97 	bl	8006df8 <HAL_ADC_Init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80056d0:	f000 fe12 	bl	80062f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80056d4:	230b      	movs	r3, #11
 80056d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80056d8:	2301      	movs	r3, #1
 80056da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056e0:	463b      	mov	r3, r7
 80056e2:	4619      	mov	r1, r3
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <MX_ADC1_Init+0x98>)
 80056e6:	f001 fe97 	bl	8007418 <HAL_ADC_ConfigChannel>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80056f0:	f000 fe02 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000878 	.word	0x20000878
 8005700:	40012000 	.word	0x40012000
 8005704:	0f000001 	.word	0x0f000001

08005708 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <MX_CAN1_Init+0x64>)
 800570e:	4a18      	ldr	r2, [pc, #96]	; (8005770 <MX_CAN1_Init+0x68>)
 8005710:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <MX_CAN1_Init+0x64>)
 8005714:	220a      	movs	r2, #10
 8005716:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <MX_CAN1_Init+0x64>)
 800571a:	2200      	movs	r2, #0
 800571c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <MX_CAN1_Init+0x64>)
 8005720:	2200      	movs	r2, #0
 8005722:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <MX_CAN1_Init+0x64>)
 8005726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800572a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <MX_CAN1_Init+0x64>)
 800572e:	2200      	movs	r2, #0
 8005730:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <MX_CAN1_Init+0x64>)
 8005734:	2200      	movs	r2, #0
 8005736:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <MX_CAN1_Init+0x64>)
 800573a:	2200      	movs	r2, #0
 800573c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <MX_CAN1_Init+0x64>)
 8005740:	2200      	movs	r2, #0
 8005742:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <MX_CAN1_Init+0x64>)
 8005746:	2200      	movs	r2, #0
 8005748:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <MX_CAN1_Init+0x64>)
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <MX_CAN1_Init+0x64>)
 8005752:	2200      	movs	r2, #0
 8005754:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005756:	4805      	ldr	r0, [pc, #20]	; (800576c <MX_CAN1_Init+0x64>)
 8005758:	f002 f886 	bl	8007868 <HAL_CAN_Init>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8005762:	f000 fdc9 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005766:	bf00      	nop
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	200008c0 	.word	0x200008c0
 8005770:	40006400 	.word	0x40006400

08005774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f009 f915 	bl	800e9b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <MX_TIM1_Init+0xa8>)
 8005792:	4a23      	ldr	r2, [pc, #140]	; (8005820 <MX_TIM1_Init+0xac>)
 8005794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005796:	4b21      	ldr	r3, [pc, #132]	; (800581c <MX_TIM1_Init+0xa8>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800579c:	4b1f      	ldr	r3, [pc, #124]	; (800581c <MX_TIM1_Init+0xa8>)
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <MX_TIM1_Init+0xa8>)
 80057a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057aa:	4b1c      	ldr	r3, [pc, #112]	; (800581c <MX_TIM1_Init+0xa8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <MX_TIM1_Init+0xa8>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <MX_TIM1_Init+0xa8>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80057bc:	2301      	movs	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057d4:	2301      	movs	r3, #1
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057d8:	2300      	movs	r3, #0
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4619      	mov	r1, r3
 80057e6:	480d      	ldr	r0, [pc, #52]	; (800581c <MX_TIM1_Init+0xa8>)
 80057e8:	f004 fc46 	bl	800a078 <HAL_TIM_Encoder_Init>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80057f2:	f000 fd81 	bl	80062f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4806      	ldr	r0, [pc, #24]	; (800581c <MX_TIM1_Init+0xa8>)
 8005804:	f005 fb36 	bl	800ae74 <HAL_TIMEx_MasterConfigSynchronization>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800580e:	f000 fd73 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005812:	bf00      	nop
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200008e8 	.word	0x200008e8
 8005820:	40010000 	.word	0x40010000

08005824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800582a:	f107 030c 	add.w	r3, r7, #12
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f009 f8bd 	bl	800e9b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <MX_TIM2_Init+0xa4>)
 8005842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005848:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <MX_TIM2_Init+0xa4>)
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <MX_TIM2_Init+0xa4>)
 8005850:	2200      	movs	r2, #0
 8005852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005854:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <MX_TIM2_Init+0xa4>)
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <MX_TIM2_Init+0xa4>)
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005862:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <MX_TIM2_Init+0xa4>)
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005868:	2303      	movs	r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005884:	2300      	movs	r3, #0
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800588c:	f107 030c 	add.w	r3, r7, #12
 8005890:	4619      	mov	r1, r3
 8005892:	480d      	ldr	r0, [pc, #52]	; (80058c8 <MX_TIM2_Init+0xa4>)
 8005894:	f004 fbf0 	bl	800a078 <HAL_TIM_Encoder_Init>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800589e:	f000 fd2b 	bl	80062f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4806      	ldr	r0, [pc, #24]	; (80058c8 <MX_TIM2_Init+0xa4>)
 80058b0:	f005 fae0 	bl	800ae74 <HAL_TIMEx_MasterConfigSynchronization>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80058ba:	f000 fd1d 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058be:	bf00      	nop
 80058c0:	3730      	adds	r7, #48	; 0x30
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000930 	.word	0x20000930

080058cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	; 0x38
 80058d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058e0:	f107 0320 	add.w	r3, r7, #32
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058ea:	1d3b      	adds	r3, r7, #4
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	611a      	str	r2, [r3, #16]
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <MX_TIM3_Init+0xfc>)
 80058fe:	4a33      	ldr	r2, [pc, #204]	; (80059cc <MX_TIM3_Init+0x100>)
 8005900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005904:	224f      	movs	r2, #79	; 0x4f
 8005906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005908:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <MX_TIM3_Init+0xfc>)
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005916:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005918:	2200      	movs	r2, #0
 800591a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <MX_TIM3_Init+0xfc>)
 800591e:	2200      	movs	r2, #0
 8005920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005922:	4829      	ldr	r0, [pc, #164]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005924:	f004 f9c6 	bl	8009cb4 <HAL_TIM_Base_Init>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800592e:	f000 fce3 	bl	80062f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593c:	4619      	mov	r1, r3
 800593e:	4822      	ldr	r0, [pc, #136]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005940:	f004 fe98 	bl	800a674 <HAL_TIM_ConfigClockSource>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800594a:	f000 fcd5 	bl	80062f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800594e:	481e      	ldr	r0, [pc, #120]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005950:	f004 fa70 	bl	8009e34 <HAL_TIM_PWM_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800595a:	f000 fccd 	bl	80062f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800595e:	2300      	movs	r3, #0
 8005960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005966:	f107 0320 	add.w	r3, r7, #32
 800596a:	4619      	mov	r1, r3
 800596c:	4816      	ldr	r0, [pc, #88]	; (80059c8 <MX_TIM3_Init+0xfc>)
 800596e:	f005 fa81 	bl	800ae74 <HAL_TIMEx_MasterConfigSynchronization>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005978:	f000 fcbe 	bl	80062f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800597c:	2360      	movs	r3, #96	; 0x60
 800597e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	2200      	movs	r2, #0
 8005990:	4619      	mov	r1, r3
 8005992:	480d      	ldr	r0, [pc, #52]	; (80059c8 <MX_TIM3_Init+0xfc>)
 8005994:	f004 fdac 	bl	800a4f0 <HAL_TIM_PWM_ConfigChannel>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800599e:	f000 fcab 	bl	80062f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	2204      	movs	r2, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4807      	ldr	r0, [pc, #28]	; (80059c8 <MX_TIM3_Init+0xfc>)
 80059aa:	f004 fda1 	bl	800a4f0 <HAL_TIM_PWM_ConfigChannel>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80059b4:	f000 fca0 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059b8:	4803      	ldr	r0, [pc, #12]	; (80059c8 <MX_TIM3_Init+0xfc>)
 80059ba:	f000 fe5d 	bl	8006678 <HAL_TIM_MspPostInit>

}
 80059be:	bf00      	nop
 80059c0:	3738      	adds	r7, #56	; 0x38
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000978 	.word	0x20000978
 80059cc:	40000400 	.word	0x40000400

080059d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08e      	sub	sp, #56	; 0x38
 80059d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e4:	f107 0320 	add.w	r3, r7, #32
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	611a      	str	r2, [r3, #16]
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a02:	4a33      	ldr	r2, [pc, #204]	; (8005ad0 <MX_TIM5_Init+0x100>)
 8005a04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8005a06:	4b31      	ldr	r3, [pc, #196]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a08:	224f      	movs	r2, #79	; 0x4f
 8005a0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005a26:	4829      	ldr	r0, [pc, #164]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a28:	f004 f944 	bl	8009cb4 <HAL_TIM_Base_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8005a32:	f000 fc61 	bl	80062f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a40:	4619      	mov	r1, r3
 8005a42:	4822      	ldr	r0, [pc, #136]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a44:	f004 fe16 	bl	800a674 <HAL_TIM_ConfigClockSource>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8005a4e:	f000 fc53 	bl	80062f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005a52:	481e      	ldr	r0, [pc, #120]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a54:	f004 f9ee 	bl	8009e34 <HAL_TIM_PWM_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8005a5e:	f000 fc4b 	bl	80062f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a62:	2300      	movs	r3, #0
 8005a64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a6a:	f107 0320 	add.w	r3, r7, #32
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4816      	ldr	r0, [pc, #88]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a72:	f005 f9ff 	bl	800ae74 <HAL_TIMEx_MasterConfigSynchronization>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8005a7c:	f000 fc3c 	bl	80062f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a80:	2360      	movs	r3, #96	; 0x60
 8005a82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	2200      	movs	r2, #0
 8005a94:	4619      	mov	r1, r3
 8005a96:	480d      	ldr	r0, [pc, #52]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005a98:	f004 fd2a 	bl	800a4f0 <HAL_TIM_PWM_ConfigChannel>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8005aa2:	f000 fc29 	bl	80062f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4807      	ldr	r0, [pc, #28]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005aae:	f004 fd1f 	bl	800a4f0 <HAL_TIM_PWM_ConfigChannel>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8005ab8:	f000 fc1e 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005abc:	4803      	ldr	r0, [pc, #12]	; (8005acc <MX_TIM5_Init+0xfc>)
 8005abe:	f000 fddb 	bl	8006678 <HAL_TIM_MspPostInit>

}
 8005ac2:	bf00      	nop
 8005ac4:	3738      	adds	r7, #56	; 0x38
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200009c0 	.word	0x200009c0
 8005ad0:	40000c00 	.word	0x40000c00

08005ad4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005ada:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <MX_TIM10_Init+0x44>)
 8005adc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 160-1;
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005ae0:	229f      	movs	r2, #159	; 0x9f
 8005ae2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65000;
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005aec:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005af0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005afe:	4805      	ldr	r0, [pc, #20]	; (8005b14 <MX_TIM10_Init+0x40>)
 8005b00:	f004 f8d8 	bl	8009cb4 <HAL_TIM_Base_Init>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005b0a:	f000 fbf5 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000a08 	.word	0x20000a08
 8005b18:	40014400 	.word	0x40014400

08005b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <MX_USART1_UART_Init+0x50>)
 8005b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b42:	220c      	movs	r2, #12
 8005b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b52:	4805      	ldr	r0, [pc, #20]	; (8005b68 <MX_USART1_UART_Init+0x4c>)
 8005b54:	f005 fa1e 	bl	800af94 <HAL_UART_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005b5e:	f000 fbcb 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000a50 	.word	0x20000a50
 8005b6c:	40011000 	.word	0x40011000

08005b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <MX_USART2_UART_Init+0x50>)
 8005b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b96:	220c      	movs	r2, #12
 8005b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ba6:	4805      	ldr	r0, [pc, #20]	; (8005bbc <MX_USART2_UART_Init+0x4c>)
 8005ba8:	f005 f9f4 	bl	800af94 <HAL_UART_Init>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005bb2:	f000 fba1 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000a94 	.word	0x20000a94
 8005bc0:	40004400 	.word	0x40004400

08005bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bca:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <MX_USART3_UART_Init+0x50>)
 8005bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bea:	220c      	movs	r2, #12
 8005bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005bfa:	4805      	ldr	r0, [pc, #20]	; (8005c10 <MX_USART3_UART_Init+0x4c>)
 8005bfc:	f005 f9ca 	bl	800af94 <HAL_UART_Init>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005c06:	f000 fb77 	bl	80062f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000ad8 	.word	0x20000ad8
 8005c14:	40004800 	.word	0x40004800

08005c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c48:	6313      	str	r3, [r2, #48]	; 0x30
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <MX_DMA_Init+0x68>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8005c56:	2200      	movs	r2, #0
 8005c58:	2105      	movs	r1, #5
 8005c5a:	2011      	movs	r0, #17
 8005c5c:	f002 fd66 	bl	800872c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005c60:	2011      	movs	r0, #17
 8005c62:	f002 fd7f 	bl	8008764 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8005c66:	2200      	movs	r2, #0
 8005c68:	2105      	movs	r1, #5
 8005c6a:	203a      	movs	r0, #58	; 0x3a
 8005c6c:	f002 fd5e 	bl	800872c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005c70:	203a      	movs	r0, #58	; 0x3a
 8005c72:	f002 fd77 	bl	8008764 <HAL_NVIC_EnableIRQ>

}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800

08005c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c8a:	f107 0314 	add.w	r3, r7, #20
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	4a3c      	ldr	r2, [pc, #240]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005ca4:	f043 0310 	orr.w	r3, r3, #16
 8005ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	4a35      	ldr	r2, [pc, #212]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cc0:	f043 0304 	orr.w	r3, r3, #4
 8005cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc6:	4b33      	ldr	r3, [pc, #204]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce2:	4b2c      	ldr	r3, [pc, #176]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfe:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <MX_GPIO_Init+0x110>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2160      	movs	r1, #96	; 0x60
 8005d2a:	481b      	ldr	r0, [pc, #108]	; (8005d98 <MX_GPIO_Init+0x114>)
 8005d2c:	f003 fade 	bl	80092ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin, GPIO_PIN_RESET);
 8005d30:	2200      	movs	r2, #0
 8005d32:	21f0      	movs	r1, #240	; 0xf0
 8005d34:	4819      	ldr	r0, [pc, #100]	; (8005d9c <MX_GPIO_Init+0x118>)
 8005d36:	f003 fad9 	bl	80092ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005d3a:	2360      	movs	r3, #96	; 0x60
 8005d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d46:	2300      	movs	r3, #0
 8005d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4811      	ldr	r0, [pc, #68]	; (8005d98 <MX_GPIO_Init+0x114>)
 8005d52:	f003 f917 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC595_CLK_Pin HC595_RCLK_Pin HC595_OE_Pin HC595_DATA_Pin */
  GPIO_InitStruct.Pin = HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin;
 8005d56:	23f0      	movs	r3, #240	; 0xf0
 8005d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d62:	2300      	movs	r3, #0
 8005d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d66:	f107 0314 	add.w	r3, r7, #20
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	480b      	ldr	r0, [pc, #44]	; (8005d9c <MX_GPIO_Init+0x118>)
 8005d6e:	f003 f909 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sesor_BatThanh_Pin SSPutBall_Pin SSBall_Pin SSLua1_Pin
                           SSLua2_Pin */
  GPIO_InitStruct.Pin = Sesor_BatThanh_Pin|SSPutBall_Pin|SSBall_Pin|SSLua1_Pin
 8005d72:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8005d76:	617b      	str	r3, [r7, #20]
                          |SSLua2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d80:	f107 0314 	add.w	r3, r7, #20
 8005d84:	4619      	mov	r1, r3
 8005d86:	4804      	ldr	r0, [pc, #16]	; (8005d98 <MX_GPIO_Init+0x114>)
 8005d88:	f003 f8fc 	bl	8008f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005d8c:	bf00      	nop
 8005d8e:	3728      	adds	r7, #40	; 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40020000 	.word	0x40020000

08005da0 <InvCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t shootFlag;
void InvCpltCallback(ModuleID ID, float speed, float angle) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dac:	edc7 0a01 	vstr	s1, [r7, #4]
 8005db0:	73fb      	strb	r3, [r7, #15]
	CAN_SpeedBLDC_AngleDC speedAngle;
	speedAngle.bldcSpeed = speed;
 8005db2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dba:	ee17 3a90 	vmov	r3, s15
 8005dbe:	613b      	str	r3, [r7, #16]
	speedAngle.dcAngle = angle;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
	canfunc_MotorPutSpeedAndAngle(speedAngle);
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dcc:	f7fe fdb6 	bl	800493c <canfunc_MotorPutSpeedAndAngle>
	while (canctrl_Send(&hcan1, ID) != HAL_OK);
 8005dd0:	bf00      	nop
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4805      	ldr	r0, [pc, #20]	; (8005dec <InvCpltCallback+0x4c>)
 8005dd8:	f7fe fd06 	bl	80047e8 <canctrl_Send>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f7      	bne.n	8005dd2 <InvCpltCallback+0x32>
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200008c0 	.word	0x200008c0

08005df0 <TestBreakProtection>:
	Gun_Actuator.dcAngle = 44.4;
	canfunc_MotorPutSpeedAndAngle(Gun_Actuator);
	canctrl_Send(&hcan1, CANCTRL_DEVICE_ACTUATOR_1);
	enableTestMode = 0;
}
void TestBreakProtection() {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
	for (CAN_DEVICE_ID i = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; i <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3; i++) {
 8005df6:	2301      	movs	r3, #1
 8005df8:	71fb      	strb	r3, [r7, #7]
 8005dfa:	e012      	b.n	8005e22 <TestBreakProtection+0x32>
		canfunc_SetBoolValue(1, CANCTRL_MODE_PID_BLDC_BREAKPROTECTION);
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f7fe fd75 	bl	80048ee <canfunc_SetBoolValue>
		while (canctrl_Send(&hcan1, i) != HAL_OK);
 8005e04:	bf00      	nop
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4818      	ldr	r0, [pc, #96]	; (8005e6c <TestBreakProtection+0x7c>)
 8005e0c:	f7fe fcec 	bl	80047e8 <canctrl_Send>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f7      	bne.n	8005e06 <TestBreakProtection+0x16>
		osDelay(1);
 8005e16:	2001      	movs	r0, #1
 8005e18:	f006 fbf1 	bl	800c5fe <osDelay>
	for (CAN_DEVICE_ID i = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; i <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3; i++) {
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	71fb      	strb	r3, [r7, #7]
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d9e9      	bls.n	8005dfc <TestBreakProtection+0xc>
	}
	osDelay(1000);
 8005e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e2c:	f006 fbe7 	bl	800c5fe <osDelay>
	for (CAN_DEVICE_ID i = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; i <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3; i++) {
 8005e30:	2301      	movs	r3, #1
 8005e32:	71bb      	strb	r3, [r7, #6]
 8005e34:	e012      	b.n	8005e5c <TestBreakProtection+0x6c>
		canfunc_SetBoolValue(0, CANCTRL_MODE_PID_BLDC_BREAKPROTECTION);
 8005e36:	210a      	movs	r1, #10
 8005e38:	2000      	movs	r0, #0
 8005e3a:	f7fe fd58 	bl	80048ee <canfunc_SetBoolValue>
		while (canctrl_Send(&hcan1, i) != HAL_OK);
 8005e3e:	bf00      	nop
 8005e40:	79bb      	ldrb	r3, [r7, #6]
 8005e42:	4619      	mov	r1, r3
 8005e44:	4809      	ldr	r0, [pc, #36]	; (8005e6c <TestBreakProtection+0x7c>)
 8005e46:	f7fe fccf 	bl	80047e8 <canctrl_Send>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f7      	bne.n	8005e40 <TestBreakProtection+0x50>
		osDelay(1);
 8005e50:	2001      	movs	r0, #1
 8005e52:	f006 fbd4 	bl	800c5fe <osDelay>
	for (CAN_DEVICE_ID i = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; i <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3; i++) {
 8005e56:	79bb      	ldrb	r3, [r7, #6]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	71bb      	strb	r3, [r7, #6]
 8005e5c:	79bb      	ldrb	r3, [r7, #6]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d9e9      	bls.n	8005e36 <TestBreakProtection+0x46>
	}
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	200008c0 	.word	0x200008c0

08005e70 <RTR_SpeedAngle>:

//int count;
int NopeCycle = 3300;

float preGyro;
void RTR_SpeedAngle(){
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim10);
//	__HAL_TIM_SET_COUNTER(&htim10,0);
	for (uint8_t i = 0;i < 3;i++){
 8005e76:	2300      	movs	r3, #0
 8005e78:	71fb      	strb	r3, [r7, #7]
 8005e7a:	e027      	b.n	8005ecc <RTR_SpeedAngle+0x5c>
		canctrl_SetID(CANCTRL_MODE_NODE_REQ_SPEED_ANGLE);
 8005e7c:	2003      	movs	r0, #3
 8005e7e:	f7fe fc61 	bl	8004744 <canctrl_SetID>
		bool a = 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	70fb      	strb	r3, [r7, #3]
		canctrl_PutMessage((void*)&a, sizeof(bool));
 8005e86:	1cfb      	adds	r3, r7, #3
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fc74 	bl	8004778 <canctrl_PutMessage>
		targetID = i + 1;
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	3301      	adds	r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <RTR_SpeedAngle+0x6c>)
 8005e98:	701a      	strb	r2, [r3, #0]
		while(canctrl_Send(&hcan1, targetID) != HAL_OK);
 8005e9a:	bf00      	nop
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <RTR_SpeedAngle+0x6c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	480f      	ldr	r0, [pc, #60]	; (8005ee0 <RTR_SpeedAngle+0x70>)
 8005ea4:	f7fe fca0 	bl	80047e8 <canctrl_Send>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f6      	bne.n	8005e9c <RTR_SpeedAngle+0x2c>
		for(uint16_t i = 0; i < NopeCycle; i++) __NOP();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	80bb      	strh	r3, [r7, #4]
 8005eb2:	e003      	b.n	8005ebc <RTR_SpeedAngle+0x4c>
 8005eb4:	bf00      	nop
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	80bb      	strh	r3, [r7, #4]
 8005ebc:	88ba      	ldrh	r2, [r7, #4]
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <RTR_SpeedAngle+0x74>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	dbf6      	blt.n	8005eb4 <RTR_SpeedAngle+0x44>
	for (uint8_t i = 0;i < 3;i++){
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	71fb      	strb	r3, [r7, #7]
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d9d4      	bls.n	8005e7c <RTR_SpeedAngle+0xc>
	}
//	count = __HAL_TIM_GET_COUNTER(&htim10);
//	HAL_TIM_Base_Stop(&htim10);
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	2000000d 	.word	0x2000000d
 8005ee0:	200008c0 	.word	0x200008c0
 8005ee4:	20000010 	.word	0x20000010

08005ee8 <StartDefaultTask>:
 * @retval None
 */
uint8_t useEuler;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	swer_Init();
 8005ef0:	f7fe fad0 	bl	8004494 <swer_Init>

	for (;;) {

		if(xaDay == 0 )
 8005ef4:	4b40      	ldr	r3, [pc, #256]	; (8005ff8 <StartDefaultTask+0x110>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d139      	bne.n	8005f70 <StartDefaultTask+0x88>
		{
			invkine_Implementation(MODULE_ID_3, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8005efc:	4b3f      	ldr	r3, [pc, #252]	; (8005ffc <StartDefaultTask+0x114>)
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <StartDefaultTask+0x118>)
 8005f04:	ed93 7a00 	vldr	s14, [r3]
 8005f08:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <StartDefaultTask+0x11c>)
 8005f0a:	edd3 6a00 	vldr	s13, [r3]
 8005f0e:	493e      	ldr	r1, [pc, #248]	; (8006008 <StartDefaultTask+0x120>)
 8005f10:	eeb0 1a66 	vmov.f32	s2, s13
 8005f14:	eef0 0a47 	vmov.f32	s1, s14
 8005f18:	eeb0 0a67 	vmov.f32	s0, s15
 8005f1c:	2003      	movs	r0, #3
 8005f1e:	f7fb ff5d 	bl	8001ddc <invkine_Implementation>
			invkine_Implementation(MODULE_ID_1, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8005f22:	4b36      	ldr	r3, [pc, #216]	; (8005ffc <StartDefaultTask+0x114>)
 8005f24:	edd3 7a00 	vldr	s15, [r3]
 8005f28:	4b35      	ldr	r3, [pc, #212]	; (8006000 <StartDefaultTask+0x118>)
 8005f2a:	ed93 7a00 	vldr	s14, [r3]
 8005f2e:	4b35      	ldr	r3, [pc, #212]	; (8006004 <StartDefaultTask+0x11c>)
 8005f30:	edd3 6a00 	vldr	s13, [r3]
 8005f34:	4934      	ldr	r1, [pc, #208]	; (8006008 <StartDefaultTask+0x120>)
 8005f36:	eeb0 1a66 	vmov.f32	s2, s13
 8005f3a:	eef0 0a47 	vmov.f32	s1, s14
 8005f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f42:	2001      	movs	r0, #1
 8005f44:	f7fb ff4a 	bl	8001ddc <invkine_Implementation>
			invkine_Implementation(MODULE_ID_2, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8005f48:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <StartDefaultTask+0x114>)
 8005f4a:	edd3 7a00 	vldr	s15, [r3]
 8005f4e:	4b2c      	ldr	r3, [pc, #176]	; (8006000 <StartDefaultTask+0x118>)
 8005f50:	ed93 7a00 	vldr	s14, [r3]
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <StartDefaultTask+0x11c>)
 8005f56:	edd3 6a00 	vldr	s13, [r3]
 8005f5a:	492b      	ldr	r1, [pc, #172]	; (8006008 <StartDefaultTask+0x120>)
 8005f5c:	eeb0 1a66 	vmov.f32	s2, s13
 8005f60:	eef0 0a47 	vmov.f32	s1, s14
 8005f64:	eeb0 0a67 	vmov.f32	s0, s15
 8005f68:	2002      	movs	r0, #2
 8005f6a:	f7fb ff37 	bl	8001ddc <invkine_Implementation>
 8005f6e:	e014      	b.n	8005f9a <StartDefaultTask+0xb2>
		}else {
			 InvCpltCallback(MODULE_ID_3, 0, 0);
 8005f70:	eddf 0a26 	vldr	s1, [pc, #152]	; 800600c <StartDefaultTask+0x124>
 8005f74:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800600c <StartDefaultTask+0x124>
 8005f78:	2003      	movs	r0, #3
 8005f7a:	f7ff ff11 	bl	8005da0 <InvCpltCallback>
			 InvCpltCallback(MODULE_ID_1, 0, 0);
 8005f7e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800600c <StartDefaultTask+0x124>
 8005f82:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800600c <StartDefaultTask+0x124>
 8005f86:	2001      	movs	r0, #1
 8005f88:	f7ff ff0a 	bl	8005da0 <InvCpltCallback>
			 InvCpltCallback(MODULE_ID_2, 0, 0);
 8005f8c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800600c <StartDefaultTask+0x124>
 8005f90:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800600c <StartDefaultTask+0x124>
 8005f94:	2002      	movs	r0, #2
 8005f96:	f7ff ff03 	bl	8005da0 <InvCpltCallback>
		}

		if(((GamePad.Square == 1)&&(GamePad.Right == 1))||stateRun == 50)
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <StartDefaultTask+0x128>)
 8005f9c:	7a5b      	ldrb	r3, [r3, #9]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d103      	bne.n	8005faa <StartDefaultTask+0xc2>
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <StartDefaultTask+0x128>)
 8005fa4:	79db      	ldrb	r3, [r3, #7]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d003      	beq.n	8005fb2 <StartDefaultTask+0xca>
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <StartDefaultTask+0x12c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b32      	cmp	r3, #50	; 0x32
 8005fb0:	d102      	bne.n	8005fb8 <StartDefaultTask+0xd0>
		{
			xaDay = 1;
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <StartDefaultTask+0x110>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
		}
		if (gamepadRxIsBusy) {
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <StartDefaultTask+0x130>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <StartDefaultTask+0xe8>
			gamepadRxIsBusy = 0;
 8005fc0:	4b15      	ldr	r3, [pc, #84]	; (8006018 <StartDefaultTask+0x130>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8005fc6:	2209      	movs	r2, #9
 8005fc8:	4914      	ldr	r1, [pc, #80]	; (800601c <StartDefaultTask+0x134>)
 8005fca:	4815      	ldr	r0, [pc, #84]	; (8006020 <StartDefaultTask+0x138>)
 8005fcc:	f005 f906 	bl	800b1dc <HAL_UART_Receive_IT>
		}
		if ((huart3.Instance->CR1 & USART_CR1_UE) == 0) {
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <StartDefaultTask+0x138>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <StartDefaultTask+0x106>
			__HAL_UART_ENABLE(&huart3);
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <StartDefaultTask+0x138>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <StartDefaultTask+0x138>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fec:	60da      	str	r2, [r3, #12]
		}
		osDelay(50);
 8005fee:	2032      	movs	r0, #50	; 0x32
 8005ff0:	f006 fb05 	bl	800c5fe <osDelay>
		if(xaDay == 0 )
 8005ff4:	e77e      	b.n	8005ef4 <StartDefaultTask+0xc>
 8005ff6:	bf00      	nop
 8005ff8:	20001409 	.word	0x20001409
 8005ffc:	200013fc 	.word	0x200013fc
 8006000:	20001400 	.word	0x20001400
 8006004:	20001404 	.word	0x20001404
 8006008:	08005da1 	.word	0x08005da1
 800600c:	00000000 	.word	0x00000000
 8006010:	20001390 	.word	0x20001390
 8006014:	20001408 	.word	0x20001408
 8006018:	200013b4 	.word	0x200013b4
 800601c:	20001378 	.word	0x20001378
 8006020:	20000ad8 	.word	0x20000ad8

08006024 <InverseKinematic>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
/* USER CODE END Header_InverseKinematic */
void InverseKinematic(void const * argument)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InverseKinematic */
	uint32_t value = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8006030:	f107 020c 	add.w	r2, r7, #12
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	2100      	movs	r1, #0
 800603a:	2000      	movs	r0, #0
 800603c:	f007 f88e 	bl	800d15c <xTaskNotifyWait>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <InverseKinematic+0x26>
			Send_Data();
 8006046:	f7ff f89c 	bl	8005182 <Send_Data>
		}
		osDelay(1);
 800604a:	2001      	movs	r0, #1
 800604c:	f006 fad7 	bl	800c5fe <osDelay>
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8006050:	e7ee      	b.n	8006030 <InverseKinematic+0xc>
	...

08006054 <CAN_Bus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Bus */
void CAN_Bus(void const * argument)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	; 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Bus */
	CAN_Init();
 800605c:	f7fe ff4a 	bl	8004ef4 <CAN_Init>
	osDelay(500);
 8006060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006064:	f006 facb 	bl	800c5fe <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_1, CANCTRL_MODE_SET_HOME);
 8006068:	2201      	movs	r2, #1
 800606a:	2101      	movs	r1, #1
 800606c:	4821      	ldr	r0, [pc, #132]	; (80060f4 <CAN_Bus+0xa0>)
 800606e:	f7fe fb23 	bl	80046b8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f006 fac3 	bl	800c5fe <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_2, CANCTRL_MODE_SET_HOME);
 8006078:	2201      	movs	r2, #1
 800607a:	2102      	movs	r1, #2
 800607c:	481d      	ldr	r0, [pc, #116]	; (80060f4 <CAN_Bus+0xa0>)
 800607e:	f7fe fb1b 	bl	80046b8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8006082:	2001      	movs	r0, #1
 8006084:	f006 fabb 	bl	800c5fe <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_3, CANCTRL_MODE_SET_HOME);
 8006088:	2201      	movs	r2, #1
 800608a:	2103      	movs	r1, #3
 800608c:	4819      	ldr	r0, [pc, #100]	; (80060f4 <CAN_Bus+0xa0>)
 800608e:	f7fe fb13 	bl	80046b8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8006092:	2001      	movs	r0, #1
 8006094:	f006 fab3 	bl	800c5fe <osDelay>
	osDelay(500);
 8006098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800609c:	f006 faaf 	bl	800c5fe <osDelay>
	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80060a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	2100      	movs	r1, #0
 80060aa:	2000      	movs	r0, #0
 80060ac:	f007 f856 	bl	800d15c <xTaskNotifyWait>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f4      	beq.n	80060a0 <CAN_Bus+0x4c>
			CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fada 	bl	8004674 <canctrl_GetRxHeader>
			uint32_t targetID = rxHeader.StdId >> CAN_DEVICE_POS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
			if ((modeID == CANCTRL_MODE_SET_HOME || modeID == CANCTRL_MODE_NODE_REQ_SPEED_ANGLE ) && targetID) {
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d002      	beq.n	80060d2 <CAN_Bus+0x7e>
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d10a      	bne.n	80060e8 <CAN_Bus+0x94>
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <CAN_Bus+0x94>
				handleFunctionCAN(modeID, targetID);
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe ff2a 	bl	8004f3c <handleFunctionCAN>
			}
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80060e8:	2102      	movs	r1, #2
 80060ea:	4802      	ldr	r0, [pc, #8]	; (80060f4 <CAN_Bus+0xa0>)
 80060ec:	f001 fffe 	bl	80080ec <HAL_CAN_ActivateNotification>
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 80060f0:	e7d6      	b.n	80060a0 <CAN_Bus+0x4c>
 80060f2:	bf00      	nop
 80060f4:	200008c0 	.word	0x200008c0

080060f8 <Actuator>:
 * @retval None
 */
uint8_t BallSS,shoot;
/* USER CODE END Header_Actuator */
void Actuator(void const * argument)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Actuator */
	/* Infinite loop */
	for (;;) {
		process_RunSSAndActuator(&TestBreakProtection);
 8006100:	4808      	ldr	r0, [pc, #32]	; (8006124 <Actuator+0x2c>)
 8006102:	f7fd f97f 	bl	8003404 <process_RunSSAndActuator>
		readADC();
 8006106:	f7ff f8b7 	bl	8005278 <readADC>
		BallSS= HAL_GPIO_ReadPin(SSLua1_GPIO_Port, SSLua1_Pin);
 800610a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800610e:	4806      	ldr	r0, [pc, #24]	; (8006128 <Actuator+0x30>)
 8006110:	f003 f8d4 	bl	80092bc <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <Actuator+0x34>)
 800611a:	701a      	strb	r2, [r3, #0]

		osDelay(1);
 800611c:	2001      	movs	r0, #1
 800611e:	f006 fa6e 	bl	800c5fe <osDelay>
		process_RunSSAndActuator(&TestBreakProtection);
 8006122:	e7ed      	b.n	8006100 <Actuator+0x8>
 8006124:	08005df1 	.word	0x08005df1
 8006128:	40021000 	.word	0x40021000
 800612c:	2000140b 	.word	0x2000140b

08006130 <odo_SpeedAngleUpdate>:
 * @brief Function implementing the TaskOdometer thread.
 * @param argument: Not used
 * @retval None
 */
float testX,testY,testTheta;
void odo_SpeedAngleUpdate(){
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
	for (int i = 0;i<3;i++){
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	e00c      	b.n	8006156 <odo_SpeedAngleUpdate+0x26>
		odo_SetObj_SpAg(i,nodeSpeedAngle[i]);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	b2d8      	uxtb	r0, r3
 8006140:	4a09      	ldr	r2, [pc, #36]	; (8006168 <odo_SpeedAngleUpdate+0x38>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	e893 0006 	ldmia.w	r3, {r1, r2}
 800614c:	f7fb ff0e 	bl	8001f6c <odo_SetObj_SpAg>
	for (int i = 0;i<3;i++){
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3301      	adds	r3, #1
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b02      	cmp	r3, #2
 800615a:	ddef      	ble.n	800613c <odo_SpeedAngleUpdate+0xc>
	}
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200013bc 	.word	0x200013bc

0800616c <OdometerHandle>:
/* USER CODE END Header_OdometerHandle */
void OdometerHandle(void const * argument)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OdometerHandle */
	  /* USER CODE BEGIN OdometerHandle */

//		valve_Init();
//		osDelay(1000);
		process_Init();
 8006174:	f7fc fce2 	bl	8002b3c <process_Init>
//		process_ResetIMU();
		/* Infinite loop */
		for (;;) {
			if(!shootFlag){
 8006178:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <OdometerHandle+0x108>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <OdometerHandle+0x18>
				RTR_SpeedAngle();
 8006180:	f7ff fe76 	bl	8005e70 <RTR_SpeedAngle>
			}


			odo_SpeedAngleUpdate();
 8006184:	f7ff ffd4 	bl	8006130 <odo_SpeedAngleUpdate>
			odo_PosCal();
 8006188:	f7fc f9e2 	bl	8002550 <odo_PosCal>

			process_ReadIMU();
 800618c:	f7fc fe32 	bl	8002df4 <process_ReadIMU>
			process_SetYaw(CurrAngle);
 8006190:	4b39      	ldr	r3, [pc, #228]	; (8006278 <OdometerHandle+0x10c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619c:	eeb0 0a67 	vmov.f32	s0, s15
 80061a0:	f7fc fe56 	bl	8002e50 <process_SetYaw>

			process_SetFloatingDis();
 80061a4:	f7fc fd2e 	bl	8002c04 <process_SetFloatingDis>
			process_SetBallDis(distance);
 80061a8:	4b34      	ldr	r3, [pc, #208]	; (800627c <OdometerHandle+0x110>)
 80061aa:	edd3 7a00 	vldr	s15, [r3]
 80061ae:	eeb0 0a67 	vmov.f32	s0, s15
 80061b2:	f7fd fbcf 	bl	8003954 <process_SetBallDis>
			process_Run(Run);
 80061b6:	4b32      	ldr	r3, [pc, #200]	; (8006280 <OdometerHandle+0x114>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fd fa18 	bl	80035f0 <process_Run>

			if(GamePad.Up==1 && GamePad.Triangle==1){
 80061c0:	4b30      	ldr	r3, [pc, #192]	; (8006284 <OdometerHandle+0x118>)
 80061c2:	799b      	ldrb	r3, [r3, #6]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d107      	bne.n	80061d8 <OdometerHandle+0x6c>
 80061c8:	4b2e      	ldr	r3, [pc, #184]	; (8006284 <OdometerHandle+0x118>)
 80061ca:	7a9b      	ldrb	r3, [r3, #10]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d103      	bne.n	80061d8 <OdometerHandle+0x6c>
				Run = 1;
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <OdometerHandle+0x114>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	e00d      	b.n	80061f4 <OdometerHandle+0x88>
			}else if (GamePad.Down == 1 && GamePad.Cross == 1){
 80061d8:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <OdometerHandle+0x118>)
 80061da:	7a1b      	ldrb	r3, [r3, #8]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d109      	bne.n	80061f4 <OdometerHandle+0x88>
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <OdometerHandle+0x118>)
 80061e2:	7b1b      	ldrb	r3, [r3, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d105      	bne.n	80061f4 <OdometerHandle+0x88>
				Run = 0;
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <OdometerHandle+0x114>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
				Gamepad = 1;
 80061ee:	4b26      	ldr	r3, [pc, #152]	; (8006288 <OdometerHandle+0x11c>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
			}

			if(Run == 1){
 80061f4:	4b22      	ldr	r3, [pc, #136]	; (8006280 <OdometerHandle+0x114>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d118      	bne.n	800622e <OdometerHandle+0xc2>
				uControlX = 	process_GetCtrSignal(U_Control);
 80061fc:	2003      	movs	r0, #3
 80061fe:	f7fc fd1f 	bl	8002c40 <process_GetCtrSignal>
 8006202:	eef0 7a40 	vmov.f32	s15, s0
 8006206:	4b21      	ldr	r3, [pc, #132]	; (800628c <OdometerHandle+0x120>)
 8006208:	edc3 7a00 	vstr	s15, [r3]
				uControlY = 	process_GetCtrSignal(V_Control);
 800620c:	2004      	movs	r0, #4
 800620e:	f7fc fd17 	bl	8002c40 <process_GetCtrSignal>
 8006212:	eef0 7a40 	vmov.f32	s15, s0
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <OdometerHandle+0x124>)
 8006218:	edc3 7a00 	vstr	s15, [r3]
				uControlTheta = process_GetCtrSignal(R_Control);
 800621c:	2005      	movs	r0, #5
 800621e:	f7fc fd0f 	bl	8002c40 <process_GetCtrSignal>
 8006222:	eef0 7a40 	vmov.f32	s15, s0
 8006226:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <OdometerHandle+0x128>)
 8006228:	edc3 7a00 	vstr	s15, [r3]
 800622c:	e017      	b.n	800625e <OdometerHandle+0xf2>
			}else if(Run == 0 && Gamepad == 1) {
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <OdometerHandle+0x114>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d113      	bne.n	800625e <OdometerHandle+0xf2>
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <OdometerHandle+0x11c>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10f      	bne.n	800625e <OdometerHandle+0xf2>
				uControlX = 	-GamePad.XLeftCtr;
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <OdometerHandle+0x118>)
 8006240:	edd3 7a06 	vldr	s15, [r3, #24]
 8006244:	eef1 7a67 	vneg.f32	s15, s15
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <OdometerHandle+0x120>)
 800624a:	edc3 7a00 	vstr	s15, [r3]
				uControlY = 	GamePad.YLeftCtr;
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <OdometerHandle+0x118>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <OdometerHandle+0x124>)
 8006254:	6013      	str	r3, [r2, #0]
				uControlTheta = GamePad.XRightCtr;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <OdometerHandle+0x118>)
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <OdometerHandle+0x128>)
 800625c:	6013      	str	r3, [r2, #0]
			}

			xTaskNotify(TaskInvKineHandle,1,eSetValueWithOverwrite);
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <OdometerHandle+0x12c>)
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	2300      	movs	r3, #0
 8006264:	2203      	movs	r2, #3
 8006266:	2101      	movs	r1, #1
 8006268:	f006 ffd8 	bl	800d21c <xTaskGenericNotify>
			osDelay(DELTA_T*1000 - IMU_Wait);
 800626c:	202c      	movs	r0, #44	; 0x2c
 800626e:	f006 f9c6 	bl	800c5fe <osDelay>
			if(!shootFlag){
 8006272:	e781      	b.n	8006178 <OdometerHandle+0xc>
 8006274:	200013f8 	.word	0x200013f8
 8006278:	200013d8 	.word	0x200013d8
 800627c:	200013f4 	.word	0x200013f4
 8006280:	200013f9 	.word	0x200013f9
 8006284:	20001390 	.word	0x20001390
 8006288:	2000140a 	.word	0x2000140a
 800628c:	200013fc 	.word	0x200013fc
 8006290:	20001400 	.word	0x20001400
 8006294:	20001404 	.word	0x20001404
 8006298:	20000be0 	.word	0x20000be0

0800629c <StartTaskSilo>:
* @retval None
*/
uint8_t testSilo,testSS;
/* USER CODE END Header_StartTaskSilo */
void StartTaskSilo(void const * argument)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSilo */
  /* Infinite loop */
  for(;;)
  {
	  testSS = HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin);
 80062a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062a8:	4807      	ldr	r0, [pc, #28]	; (80062c8 <StartTaskSilo+0x2c>)
 80062aa:	f003 f807 	bl	80092bc <HAL_GPIO_ReadPin>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <StartTaskSilo+0x30>)
 80062b4:	701a      	strb	r2, [r3, #0]
//	startPutBall(process_ReturnBallValue());
	  startPutBall(testSilo);
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <StartTaskSilo+0x34>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fb f892 	bl	80013e4 <startPutBall>
    osDelay(1);
 80062c0:	2001      	movs	r0, #1
 80062c2:	f006 f99c 	bl	800c5fe <osDelay>
	  testSS = HAL_GPIO_ReadPin(SSPutBall_GPIO_Port, SSPutBall_Pin);
 80062c6:	e7ed      	b.n	80062a4 <StartTaskSilo+0x8>
 80062c8:	40021000 	.word	0x40021000
 80062cc:	2000140d 	.word	0x2000140d
 80062d0:	2000140c 	.word	0x2000140c

080062d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80062e6:	f000 fd67 	bl	8006db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40002000 	.word	0x40002000

080062f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062fc:	b672      	cpsid	i
}
 80062fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006300:	e7fe      	b.n	8006300 <Error_Handler+0x8>
	...

08006304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_MspInit+0x54>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	4a11      	ldr	r2, [pc, #68]	; (8006358 <HAL_MspInit+0x54>)
 8006314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006318:	6453      	str	r3, [r2, #68]	; 0x44
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <HAL_MspInit+0x54>)
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_MspInit+0x54>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <HAL_MspInit+0x54>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	6413      	str	r3, [r2, #64]	; 0x40
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <HAL_MspInit+0x54>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006342:	2200      	movs	r2, #0
 8006344:	210f      	movs	r1, #15
 8006346:	f06f 0001 	mvn.w	r0, #1
 800634a:	f002 f9ef 	bl	800872c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40023800 	.word	0x40023800

0800635c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <HAL_ADC_MspInit+0x8c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d12f      	bne.n	80063de <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <HAL_ADC_MspInit+0x90>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	4a19      	ldr	r2, [pc, #100]	; (80063ec <HAL_ADC_MspInit+0x90>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638c:	6453      	str	r3, [r2, #68]	; 0x44
 800638e:	4b17      	ldr	r3, [pc, #92]	; (80063ec <HAL_ADC_MspInit+0x90>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_ADC_MspInit+0x90>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_ADC_MspInit+0x90>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_ADC_MspInit+0x90>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80063b6:	2302      	movs	r3, #2
 80063b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063ba:	2303      	movs	r3, #3
 80063bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	4619      	mov	r1, r3
 80063c8:	4809      	ldr	r0, [pc, #36]	; (80063f0 <HAL_ADC_MspInit+0x94>)
 80063ca:	f002 fddb 	bl	8008f84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80063ce:	2200      	movs	r2, #0
 80063d0:	2105      	movs	r1, #5
 80063d2:	2012      	movs	r0, #18
 80063d4:	f002 f9aa 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80063d8:	2012      	movs	r0, #18
 80063da:	f002 f9c3 	bl	8008764 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80063de:	bf00      	nop
 80063e0:	3728      	adds	r7, #40	; 0x28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40012000 	.word	0x40012000
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40020800 	.word	0x40020800

080063f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063fc:	f107 0314 	add.w	r3, r7, #20
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <HAL_CAN_MspInit+0x94>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d134      	bne.n	8006480 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	4b1c      	ldr	r3, [pc, #112]	; (800648c <HAL_CAN_MspInit+0x98>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_CAN_MspInit+0x98>)
 8006420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_CAN_MspInit+0x98>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <HAL_CAN_MspInit+0x98>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a14      	ldr	r2, [pc, #80]	; (800648c <HAL_CAN_MspInit+0x98>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_CAN_MspInit+0x98>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800644e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006454:	2302      	movs	r3, #2
 8006456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645c:	2303      	movs	r3, #3
 800645e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006460:	2309      	movs	r3, #9
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4619      	mov	r1, r3
 800646a:	4809      	ldr	r0, [pc, #36]	; (8006490 <HAL_CAN_MspInit+0x9c>)
 800646c:	f002 fd8a 	bl	8008f84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006470:	2200      	movs	r2, #0
 8006472:	2105      	movs	r1, #5
 8006474:	2014      	movs	r0, #20
 8006476:	f002 f959 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800647a:	2014      	movs	r0, #20
 800647c:	f002 f972 	bl	8008764 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006480:	bf00      	nop
 8006482:	3728      	adds	r7, #40	; 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40006400 	.word	0x40006400
 800648c:	40023800 	.word	0x40023800
 8006490:	40020000 	.word	0x40020000

08006494 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800649c:	f107 031c 	add.w	r3, r7, #28
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	609a      	str	r2, [r3, #8]
 80064a8:	60da      	str	r2, [r3, #12]
 80064aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a46      	ldr	r2, [pc, #280]	; (80065cc <HAL_TIM_Encoder_MspInit+0x138>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d12d      	bne.n	8006512 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	4a44      	ldr	r2, [pc, #272]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	6453      	str	r3, [r2, #68]	; 0x44
 80064c6:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	4a3d      	ldr	r2, [pc, #244]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6313      	str	r3, [r2, #48]	; 0x30
 80064e2:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80064ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f4:	2302      	movs	r3, #2
 80064f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fc:	2300      	movs	r3, #0
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006500:	2301      	movs	r3, #1
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006504:	f107 031c 	add.w	r3, r7, #28
 8006508:	4619      	mov	r1, r3
 800650a:	4832      	ldr	r0, [pc, #200]	; (80065d4 <HAL_TIM_Encoder_MspInit+0x140>)
 800650c:	f002 fd3a 	bl	8008f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006510:	e057      	b.n	80065c2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d152      	bne.n	80065c2 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	4b2b      	ldr	r3, [pc, #172]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	6413      	str	r3, [r2, #64]	; 0x40
 800652c:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	6313      	str	r3, [r2, #48]	; 0x30
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	6313      	str	r3, [r2, #48]	; 0x30
 8006564:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006576:	2302      	movs	r3, #2
 8006578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657a:	2300      	movs	r3, #0
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800657e:	2300      	movs	r3, #0
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006582:	2301      	movs	r3, #1
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006586:	f107 031c 	add.w	r3, r7, #28
 800658a:	4619      	mov	r1, r3
 800658c:	4811      	ldr	r0, [pc, #68]	; (80065d4 <HAL_TIM_Encoder_MspInit+0x140>)
 800658e:	f002 fcf9 	bl	8008f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006592:	2308      	movs	r3, #8
 8006594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006596:	2302      	movs	r3, #2
 8006598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659e:	2300      	movs	r3, #0
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80065a2:	2301      	movs	r3, #1
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065a6:	f107 031c 	add.w	r3, r7, #28
 80065aa:	4619      	mov	r1, r3
 80065ac:	480a      	ldr	r0, [pc, #40]	; (80065d8 <HAL_TIM_Encoder_MspInit+0x144>)
 80065ae:	f002 fce9 	bl	8008f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80065b2:	2200      	movs	r2, #0
 80065b4:	2105      	movs	r1, #5
 80065b6:	201c      	movs	r0, #28
 80065b8:	f002 f8b8 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80065bc:	201c      	movs	r0, #28
 80065be:	f002 f8d1 	bl	8008764 <HAL_NVIC_EnableIRQ>
}
 80065c2:	bf00      	nop
 80065c4:	3730      	adds	r7, #48	; 0x30
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40020000 	.word	0x40020000
 80065d8:	40020400 	.word	0x40020400

080065dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_TIM_Base_MspInit+0x8c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	4a1d      	ldr	r2, [pc, #116]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	6413      	str	r3, [r2, #64]	; 0x40
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800660a:	e026      	b.n	800665a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_TIM_Base_MspInit+0x94>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	4b14      	ldr	r3, [pc, #80]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	4a13      	ldr	r2, [pc, #76]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	6413      	str	r3, [r2, #64]	; 0x40
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	693b      	ldr	r3, [r7, #16]
}
 8006632:	e012      	b.n	800665a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a0e      	ldr	r2, [pc, #56]	; (8006674 <HAL_TIM_Base_MspInit+0x98>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d10d      	bne.n	800665a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664c:	6453      	str	r3, [r2, #68]	; 0x44
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <HAL_TIM_Base_MspInit+0x90>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40000400 	.word	0x40000400
 800666c:	40023800 	.word	0x40023800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40014400 	.word	0x40014400

08006678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006680:	f107 0314 	add.w	r3, r7, #20
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	605a      	str	r2, [r3, #4]
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	60da      	str	r2, [r3, #12]
 800668e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a24      	ldr	r2, [pc, #144]	; (8006728 <HAL_TIM_MspPostInit+0xb0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d11e      	bne.n	80066d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	6313      	str	r3, [r2, #48]	; 0x30
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80066b6:	2330      	movs	r3, #48	; 0x30
 80066b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ba:	2302      	movs	r3, #2
 80066bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066c2:	2300      	movs	r3, #0
 80066c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80066c6:	2302      	movs	r3, #2
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	4619      	mov	r1, r3
 80066d0:	4817      	ldr	r0, [pc, #92]	; (8006730 <HAL_TIM_MspPostInit+0xb8>)
 80066d2:	f002 fc57 	bl	8008f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80066d6:	e022      	b.n	800671e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_TIM_MspPostInit+0xbc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d11d      	bne.n	800671e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	4a10      	ldr	r2, [pc, #64]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	6313      	str	r3, [r2, #48]	; 0x30
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <HAL_TIM_MspPostInit+0xb4>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80066fe:	2303      	movs	r3, #3
 8006700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006702:	2302      	movs	r3, #2
 8006704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800670a:	2300      	movs	r3, #0
 800670c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800670e:	2302      	movs	r3, #2
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	4619      	mov	r1, r3
 8006718:	4807      	ldr	r0, [pc, #28]	; (8006738 <HAL_TIM_MspPostInit+0xc0>)
 800671a:	f002 fc33 	bl	8008f84 <HAL_GPIO_Init>
}
 800671e:	bf00      	nop
 8006720:	3728      	adds	r7, #40	; 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40000400 	.word	0x40000400
 800672c:	40023800 	.word	0x40023800
 8006730:	40020400 	.word	0x40020400
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40020000 	.word	0x40020000

0800673c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08e      	sub	sp, #56	; 0x38
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a85      	ldr	r2, [pc, #532]	; (8006970 <HAL_UART_MspInit+0x234>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d162      	bne.n	8006824 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	4b84      	ldr	r3, [pc, #528]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	4a83      	ldr	r2, [pc, #524]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006768:	f043 0310 	orr.w	r3, r3, #16
 800676c:	6453      	str	r3, [r2, #68]	; 0x44
 800676e:	4b81      	ldr	r3, [pc, #516]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	623b      	str	r3, [r7, #32]
 8006778:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4a7c      	ldr	r2, [pc, #496]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006784:	f043 0302 	orr.w	r3, r3, #2
 8006788:	6313      	str	r3, [r2, #48]	; 0x30
 800678a:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_UART_MspInit+0x238>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006796:	23c0      	movs	r3, #192	; 0xc0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800679a:	2302      	movs	r3, #2
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a2:	2303      	movs	r3, #3
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80067a6:	2307      	movs	r3, #7
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ae:	4619      	mov	r1, r3
 80067b0:	4871      	ldr	r0, [pc, #452]	; (8006978 <HAL_UART_MspInit+0x23c>)
 80067b2:	f002 fbe7 	bl	8008f84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80067b6:	4b71      	ldr	r3, [pc, #452]	; (800697c <HAL_UART_MspInit+0x240>)
 80067b8:	4a71      	ldr	r2, [pc, #452]	; (8006980 <HAL_UART_MspInit+0x244>)
 80067ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80067bc:	4b6f      	ldr	r3, [pc, #444]	; (800697c <HAL_UART_MspInit+0x240>)
 80067be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067c4:	4b6d      	ldr	r3, [pc, #436]	; (800697c <HAL_UART_MspInit+0x240>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067ca:	4b6c      	ldr	r3, [pc, #432]	; (800697c <HAL_UART_MspInit+0x240>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067d0:	4b6a      	ldr	r3, [pc, #424]	; (800697c <HAL_UART_MspInit+0x240>)
 80067d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067d8:	4b68      	ldr	r3, [pc, #416]	; (800697c <HAL_UART_MspInit+0x240>)
 80067da:	2200      	movs	r2, #0
 80067dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_UART_MspInit+0x240>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80067e4:	4b65      	ldr	r3, [pc, #404]	; (800697c <HAL_UART_MspInit+0x240>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067ea:	4b64      	ldr	r3, [pc, #400]	; (800697c <HAL_UART_MspInit+0x240>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067f0:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_UART_MspInit+0x240>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80067f6:	4861      	ldr	r0, [pc, #388]	; (800697c <HAL_UART_MspInit+0x240>)
 80067f8:	f001 ffc2 	bl	8008780 <HAL_DMA_Init>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006802:	f7ff fd79 	bl	80062f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a5c      	ldr	r2, [pc, #368]	; (800697c <HAL_UART_MspInit+0x240>)
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
 800680c:	4a5b      	ldr	r2, [pc, #364]	; (800697c <HAL_UART_MspInit+0x240>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006812:	2200      	movs	r2, #0
 8006814:	2105      	movs	r1, #5
 8006816:	2025      	movs	r0, #37	; 0x25
 8006818:	f001 ff88 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800681c:	2025      	movs	r0, #37	; 0x25
 800681e:	f001 ffa1 	bl	8008764 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006822:	e0a1      	b.n	8006968 <HAL_UART_MspInit+0x22c>
  else if(huart->Instance==USART2)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a56      	ldr	r2, [pc, #344]	; (8006984 <HAL_UART_MspInit+0x248>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d162      	bne.n	80068f4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	4b50      	ldr	r3, [pc, #320]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	4a4f      	ldr	r2, [pc, #316]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683c:	6413      	str	r3, [r2, #64]	; 0x40
 800683e:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	4a48      	ldr	r2, [pc, #288]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006854:	f043 0308 	orr.w	r3, r3, #8
 8006858:	6313      	str	r3, [r2, #48]	; 0x30
 800685a:	4b46      	ldr	r3, [pc, #280]	; (8006974 <HAL_UART_MspInit+0x238>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006866:	2360      	movs	r3, #96	; 0x60
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686a:	2302      	movs	r3, #2
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686e:	2300      	movs	r3, #0
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006876:	2307      	movs	r3, #7
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800687a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800687e:	4619      	mov	r1, r3
 8006880:	4841      	ldr	r0, [pc, #260]	; (8006988 <HAL_UART_MspInit+0x24c>)
 8006882:	f002 fb7f 	bl	8008f84 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006886:	4b41      	ldr	r3, [pc, #260]	; (800698c <HAL_UART_MspInit+0x250>)
 8006888:	4a41      	ldr	r2, [pc, #260]	; (8006990 <HAL_UART_MspInit+0x254>)
 800688a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800688c:	4b3f      	ldr	r3, [pc, #252]	; (800698c <HAL_UART_MspInit+0x250>)
 800688e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006892:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006894:	4b3d      	ldr	r3, [pc, #244]	; (800698c <HAL_UART_MspInit+0x250>)
 8006896:	2240      	movs	r2, #64	; 0x40
 8006898:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800689a:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_UART_MspInit+0x250>)
 800689c:	2200      	movs	r2, #0
 800689e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068a0:	4b3a      	ldr	r3, [pc, #232]	; (800698c <HAL_UART_MspInit+0x250>)
 80068a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068a8:	4b38      	ldr	r3, [pc, #224]	; (800698c <HAL_UART_MspInit+0x250>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068ae:	4b37      	ldr	r3, [pc, #220]	; (800698c <HAL_UART_MspInit+0x250>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80068b4:	4b35      	ldr	r3, [pc, #212]	; (800698c <HAL_UART_MspInit+0x250>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80068ba:	4b34      	ldr	r3, [pc, #208]	; (800698c <HAL_UART_MspInit+0x250>)
 80068bc:	2200      	movs	r2, #0
 80068be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c0:	4b32      	ldr	r3, [pc, #200]	; (800698c <HAL_UART_MspInit+0x250>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80068c6:	4831      	ldr	r0, [pc, #196]	; (800698c <HAL_UART_MspInit+0x250>)
 80068c8:	f001 ff5a 	bl	8008780 <HAL_DMA_Init>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80068d2:	f7ff fd11 	bl	80062f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	; (800698c <HAL_UART_MspInit+0x250>)
 80068da:	635a      	str	r2, [r3, #52]	; 0x34
 80068dc:	4a2b      	ldr	r2, [pc, #172]	; (800698c <HAL_UART_MspInit+0x250>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80068e2:	2200      	movs	r2, #0
 80068e4:	2105      	movs	r1, #5
 80068e6:	2026      	movs	r0, #38	; 0x26
 80068e8:	f001 ff20 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068ec:	2026      	movs	r0, #38	; 0x26
 80068ee:	f001 ff39 	bl	8008764 <HAL_NVIC_EnableIRQ>
}
 80068f2:	e039      	b.n	8006968 <HAL_UART_MspInit+0x22c>
  else if(huart->Instance==USART3)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a26      	ldr	r2, [pc, #152]	; (8006994 <HAL_UART_MspInit+0x258>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d134      	bne.n	8006968 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690c:	6413      	str	r3, [r2, #64]	; 0x40
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	4a14      	ldr	r2, [pc, #80]	; (8006974 <HAL_UART_MspInit+0x238>)
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	6313      	str	r3, [r2, #48]	; 0x30
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_UART_MspInit+0x238>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006936:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	2302      	movs	r3, #2
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006944:	2303      	movs	r3, #3
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006948:	2307      	movs	r3, #7
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800694c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006950:	4619      	mov	r1, r3
 8006952:	4809      	ldr	r0, [pc, #36]	; (8006978 <HAL_UART_MspInit+0x23c>)
 8006954:	f002 fb16 	bl	8008f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006958:	2200      	movs	r2, #0
 800695a:	2105      	movs	r1, #5
 800695c:	2027      	movs	r0, #39	; 0x27
 800695e:	f001 fee5 	bl	800872c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006962:	2027      	movs	r0, #39	; 0x27
 8006964:	f001 fefe 	bl	8008764 <HAL_NVIC_EnableIRQ>
}
 8006968:	bf00      	nop
 800696a:	3738      	adds	r7, #56	; 0x38
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40011000 	.word	0x40011000
 8006974:	40023800 	.word	0x40023800
 8006978:	40020400 	.word	0x40020400
 800697c:	20000b1c 	.word	0x20000b1c
 8006980:	40026440 	.word	0x40026440
 8006984:	40004400 	.word	0x40004400
 8006988:	40020c00 	.word	0x40020c00
 800698c:	20000b7c 	.word	0x20000b7c
 8006990:	400260a0 	.word	0x400260a0
 8006994:	40004800 	.word	0x40004800

08006998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	4b33      	ldr	r3, [pc, #204]	; (8006a7c <HAL_InitTick+0xe4>)
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <HAL_InitTick+0xe4>)
 80069b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b6:	6413      	str	r3, [r2, #64]	; 0x40
 80069b8:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <HAL_InitTick+0xe4>)
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80069c4:	f107 0210 	add.w	r2, r7, #16
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f003 f93e 	bl	8009c50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80069de:	f003 f90f 	bl	8009c00 <HAL_RCC_GetPCLK1Freq>
 80069e2:	6378      	str	r0, [r7, #52]	; 0x34
 80069e4:	e004      	b.n	80069f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80069e6:	f003 f90b 	bl	8009c00 <HAL_RCC_GetPCLK1Freq>
 80069ea:	4603      	mov	r3, r0
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <HAL_InitTick+0xe8>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	0c9b      	lsrs	r3, r3, #18
 80069fa:	3b01      	subs	r3, #1
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <HAL_InitTick+0xec>)
 8006a00:	4a21      	ldr	r2, [pc, #132]	; (8006a88 <HAL_InitTick+0xf0>)
 8006a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <HAL_InitTick+0xec>)
 8006a06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006a0a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <HAL_InitTick+0xec>)
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <HAL_InitTick+0xec>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <HAL_InitTick+0xec>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a1e:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <HAL_InitTick+0xec>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8006a24:	4817      	ldr	r0, [pc, #92]	; (8006a84 <HAL_InitTick+0xec>)
 8006a26:	f003 f945 	bl	8009cb4 <HAL_TIM_Base_Init>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11b      	bne.n	8006a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8006a38:	4812      	ldr	r0, [pc, #72]	; (8006a84 <HAL_InitTick+0xec>)
 8006a3a:	f003 f98b 	bl	8009d54 <HAL_TIM_Base_Start_IT>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006a44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006a4c:	202d      	movs	r0, #45	; 0x2d
 8006a4e:	f001 fe89 	bl	8008764 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b0f      	cmp	r3, #15
 8006a56:	d808      	bhi.n	8006a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8006a58:	2200      	movs	r2, #0
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	202d      	movs	r0, #45	; 0x2d
 8006a5e:	f001 fe65 	bl	800872c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <HAL_InitTick+0xf4>)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	e002      	b.n	8006a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3738      	adds	r7, #56	; 0x38
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	431bde83 	.word	0x431bde83
 8006a84:	20001410 	.word	0x20001410
 8006a88:	40002000 	.word	0x40002000
 8006a8c:	20000018 	.word	0x20000018

08006a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a94:	e7fe      	b.n	8006a94 <NMI_Handler+0x4>

08006a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a96:	b480      	push	{r7}
 8006a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a9a:	e7fe      	b.n	8006a9a <HardFault_Handler+0x4>

08006a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006aa0:	e7fe      	b.n	8006aa0 <MemManage_Handler+0x4>

08006aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006aa6:	e7fe      	b.n	8006aa6 <BusFault_Handler+0x4>

08006aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006aac:	e7fe      	b.n	8006aac <UsageFault_Handler+0x4>

08006aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006ac0:	4802      	ldr	r0, [pc, #8]	; (8006acc <DMA1_Stream6_IRQHandler+0x10>)
 8006ac2:	f001 fff5 	bl	8008ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000b7c 	.word	0x20000b7c

08006ad0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006ad4:	4802      	ldr	r0, [pc, #8]	; (8006ae0 <ADC_IRQHandler+0x10>)
 8006ad6:	f000 fb63 	bl	80071a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000878 	.word	0x20000878

08006ae4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006ae8:	4802      	ldr	r0, [pc, #8]	; (8006af4 <CAN1_RX0_IRQHandler+0x10>)
 8006aea:	f001 fb4c 	bl	8008186 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200008c0 	.word	0x200008c0

08006af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006afc:	4802      	ldr	r0, [pc, #8]	; (8006b08 <TIM2_IRQHandler+0x10>)
 8006afe:	f003 fbef 	bl	800a2e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000930 	.word	0x20000930

08006b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006b10:	4802      	ldr	r0, [pc, #8]	; (8006b1c <USART1_IRQHandler+0x10>)
 8006b12:	f004 fbf9 	bl	800b308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000a50 	.word	0x20000a50

08006b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b24:	4802      	ldr	r0, [pc, #8]	; (8006b30 <USART2_IRQHandler+0x10>)
 8006b26:	f004 fbef 	bl	800b308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006b2a:	bf00      	nop
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000a94 	.word	0x20000a94

08006b34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006b38:	4802      	ldr	r0, [pc, #8]	; (8006b44 <USART3_IRQHandler+0x10>)
 8006b3a:	f004 fbe5 	bl	800b308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006b3e:	bf00      	nop
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000ad8 	.word	0x20000ad8

08006b48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006b4c:	4802      	ldr	r0, [pc, #8]	; (8006b58 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006b4e:	f003 fbc7 	bl	800a2e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20001410 	.word	0x20001410

08006b5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006b60:	4802      	ldr	r0, [pc, #8]	; (8006b6c <DMA2_Stream2_IRQHandler+0x10>)
 8006b62:	f001 ffa5 	bl	8008ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000b1c 	.word	0x20000b1c

08006b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return 1;
 8006b74:	2301      	movs	r3, #1
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <_kill>:

int _kill(int pid, int sig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006b8a:	f007 ffbb 	bl	800eb04 <__errno>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2216      	movs	r2, #22
 8006b92:	601a      	str	r2, [r3, #0]
  return -1;
 8006b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <_exit>:

void _exit (int status)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ffe7 	bl	8006b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006bb2:	e7fe      	b.n	8006bb2 <_exit+0x12>

08006bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e00a      	b.n	8006bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006bc6:	f3af 8000 	nop.w
 8006bca:	4601      	mov	r1, r0
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	60ba      	str	r2, [r7, #8]
 8006bd2:	b2ca      	uxtb	r2, r1
 8006bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	dbf0      	blt.n	8006bc6 <_read+0x12>
  }

  return len;
 8006be4:	687b      	ldr	r3, [r7, #4]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e009      	b.n	8006c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	60ba      	str	r2, [r7, #8]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	3301      	adds	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	dbf1      	blt.n	8006c00 <_write+0x12>
  }
  return len;
 8006c1c:	687b      	ldr	r3, [r7, #4]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <_close>:

int _close(int file)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <_isatty>:

int _isatty(int file)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006c66:	2301      	movs	r3, #1
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <_sbrk+0x5c>)
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <_sbrk+0x60>)
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ca4:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <_sbrk+0x64>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <_sbrk+0x64>)
 8006cae:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <_sbrk+0x68>)
 8006cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cb2:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <_sbrk+0x64>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d207      	bcs.n	8006cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cc0:	f007 ff20 	bl	800eb04 <__errno>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	220c      	movs	r2, #12
 8006cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	e009      	b.n	8006ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <_sbrk+0x64>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cd6:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <_sbrk+0x64>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <_sbrk+0x64>)
 8006ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20020000 	.word	0x20020000
 8006cf0:	00000400 	.word	0x00000400
 8006cf4:	20001458 	.word	0x20001458
 8006cf8:	20005300 	.word	0x20005300

08006cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <SystemInit+0x20>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d06:	4a05      	ldr	r2, [pc, #20]	; (8006d1c <SystemInit+0x20>)
 8006d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d24:	480d      	ldr	r0, [pc, #52]	; (8006d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d26:	490e      	ldr	r1, [pc, #56]	; (8006d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006d28:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d2c:	e002      	b.n	8006d34 <LoopCopyDataInit>

08006d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d32:	3304      	adds	r3, #4

08006d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d38:	d3f9      	bcc.n	8006d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d3a:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006d3c:	4c0b      	ldr	r4, [pc, #44]	; (8006d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d40:	e001      	b.n	8006d46 <LoopFillZerobss>

08006d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d44:	3204      	adds	r2, #4

08006d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d48:	d3fb      	bcc.n	8006d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d4a:	f7ff ffd7 	bl	8006cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d4e:	f007 fedf 	bl	800eb10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d52:	f7fe fb1b 	bl	800538c <main>
  bx  lr    
 8006d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d60:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006d64:	080137b0 	.word	0x080137b0
  ldr r2, =_sbss
 8006d68:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006d6c:	20005300 	.word	0x20005300

08006d70 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d70:	e7fe      	b.n	8006d70 <CAN1_RX1_IRQHandler>
	...

08006d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <HAL_Init+0x40>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <HAL_Init+0x40>)
 8006d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_Init+0x40>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <HAL_Init+0x40>)
 8006d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d90:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <HAL_Init+0x40>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <HAL_Init+0x40>)
 8006d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d9c:	2003      	movs	r0, #3
 8006d9e:	f001 fcba 	bl	8008716 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006da2:	200f      	movs	r0, #15
 8006da4:	f7ff fdf8 	bl	8006998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006da8:	f7ff faac 	bl	8006304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023c00 	.word	0x40023c00

08006db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <HAL_IncTick+0x20>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_IncTick+0x24>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <HAL_IncTick+0x24>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	2000001c 	.word	0x2000001c
 8006ddc:	2000145c 	.word	0x2000145c

08006de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return uwTick;
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <HAL_GetTick+0x14>)
 8006de6:	681b      	ldr	r3, [r3, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000145c 	.word	0x2000145c

08006df8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e033      	b.n	8006e76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff faa0 	bl	800635c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d118      	bne.n	8006e68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e3e:	f023 0302 	bic.w	r3, r3, #2
 8006e42:	f043 0202 	orr.w	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc06 	bl	800765c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
 8006e66:	e001      	b.n	8006e6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_Start+0x1a>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e0b2      	b.n	8007000 <HAL_ADC_Start+0x180>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d018      	beq.n	8006ee2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ec0:	4b52      	ldr	r3, [pc, #328]	; (800700c <HAL_ADC_Start+0x18c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a52      	ldr	r2, [pc, #328]	; (8007010 <HAL_ADC_Start+0x190>)
 8006ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eca:	0c9a      	lsrs	r2, r3, #18
 8006ecc:	4613      	mov	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006ed4:	e002      	b.n	8006edc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f9      	bne.n	8006ed6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d17a      	bne.n	8006fe6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d106      	bne.n	8006f3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	f023 0206 	bic.w	r2, r3, #6
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	645a      	str	r2, [r3, #68]	; 0x44
 8006f3c:	e002      	b.n	8006f44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f4c:	4b31      	ldr	r3, [pc, #196]	; (8007014 <HAL_ADC_Start+0x194>)
 8006f4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d12a      	bne.n	8006fbc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2b      	ldr	r2, [pc, #172]	; (8007018 <HAL_ADC_Start+0x198>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d015      	beq.n	8006f9c <HAL_ADC_Start+0x11c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a29      	ldr	r2, [pc, #164]	; (800701c <HAL_ADC_Start+0x19c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d105      	bne.n	8006f86 <HAL_ADC_Start+0x106>
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_ADC_Start+0x194>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <HAL_ADC_Start+0x1a0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d136      	bne.n	8006ffe <HAL_ADC_Start+0x17e>
 8006f90:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_ADC_Start+0x194>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d130      	bne.n	8006ffe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d129      	bne.n	8006ffe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fb8:	609a      	str	r2, [r3, #8]
 8006fba:	e020      	b.n	8006ffe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_ADC_Start+0x198>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d11b      	bne.n	8006ffe <HAL_ADC_Start+0x17e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d114      	bne.n	8006ffe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fe2:	609a      	str	r2, [r3, #8]
 8006fe4:	e00b      	b.n	8006ffe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f043 0210 	orr.w	r2, r3, #16
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000014 	.word	0x20000014
 8007010:	431bde83 	.word	0x431bde83
 8007014:	40012300 	.word	0x40012300
 8007018:	40012000 	.word	0x40012000
 800701c:	40012100 	.word	0x40012100
 8007020:	40012200 	.word	0x40012200

08007024 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_ADC_Stop+0x16>
 8007036:	2302      	movs	r3, #2
 8007038:	e021      	b.n	800707e <HAL_ADC_Stop+0x5a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f043 0201 	orr.w	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a6:	d113      	bne.n	80070d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b6:	d10b      	bne.n	80070d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e063      	b.n	8007198 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80070d0:	f7ff fe86 	bl	8006de0 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070d6:	e021      	b.n	800711c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d01d      	beq.n	800711c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <HAL_ADC_PollForConversion+0x6c>
 80070e6:	f7ff fe7b 	bl	8006de0 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d212      	bcs.n	800711c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d00b      	beq.n	800711c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	f043 0204 	orr.w	r2, r3, #4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e03d      	b.n	8007198 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b02      	cmp	r3, #2
 8007128:	d1d6      	bne.n	80070d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f06f 0212 	mvn.w	r2, #18
 8007132:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d123      	bne.n	8007196 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11f      	bne.n	8007196 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800716e:	2b00      	cmp	r3, #0
 8007170:	d111      	bne.n	8007196 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d049      	beq.n	800726a <HAL_ADC_IRQHandler+0xca>
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d046      	beq.n	800726a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d12b      	bne.n	800725a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007206:	2b00      	cmp	r3, #0
 8007208:	d127      	bne.n	800725a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007222:	2b00      	cmp	r3, #0
 8007224:	d119      	bne.n	800725a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0220 	bic.w	r2, r2, #32
 8007234:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8bd 	bl	80073da <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0212 	mvn.w	r2, #18
 8007268:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d057      	beq.n	8007330 <HAL_ADC_IRQHandler+0x190>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d054      	beq.n	8007330 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d139      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d12b      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d124      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11d      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d119      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	f043 0201 	orr.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa97 	bl	8007854 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f06f 020c 	mvn.w	r2, #12
 800732e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <HAL_ADC_IRQHandler+0x1d6>
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d014      	beq.n	8007376 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b01      	cmp	r3, #1
 8007358:	d10d      	bne.n	8007376 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f841 	bl	80073ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0201 	mvn.w	r2, #1
 8007374:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007384:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d015      	beq.n	80073b8 <HAL_ADC_IRQHandler+0x218>
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d012      	beq.n	80073b8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	f043 0202 	orr.w	r2, r3, #2
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f06f 0220 	mvn.w	r2, #32
 80073a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f82a 	bl	8007402 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0220 	mvn.w	r2, #32
 80073b6:	601a      	str	r2, [r3, #0]
  }
}
 80073b8:	bf00      	nop
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_ADC_ConfigChannel+0x1c>
 8007430:	2302      	movs	r3, #2
 8007432:	e105      	b.n	8007640 <HAL_ADC_ConfigChannel+0x228>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b09      	cmp	r3, #9
 8007442:	d925      	bls.n	8007490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68d9      	ldr	r1, [r3, #12]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	3b1e      	subs	r3, #30
 800745a:	2207      	movs	r2, #7
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43da      	mvns	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	400a      	ands	r2, r1
 8007468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68d9      	ldr	r1, [r3, #12]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	4618      	mov	r0, r3
 800747c:	4603      	mov	r3, r0
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4403      	add	r3, r0
 8007482:	3b1e      	subs	r3, #30
 8007484:	409a      	lsls	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	e022      	b.n	80074d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6919      	ldr	r1, [r3, #16]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	2207      	movs	r2, #7
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43da      	mvns	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	400a      	ands	r2, r1
 80074b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6919      	ldr	r1, [r3, #16]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4618      	mov	r0, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4403      	add	r3, r0
 80074cc:	409a      	lsls	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b06      	cmp	r3, #6
 80074dc:	d824      	bhi.n	8007528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	3b05      	subs	r3, #5
 80074f0:	221f      	movs	r2, #31
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43da      	mvns	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	400a      	ands	r2, r1
 80074fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	4618      	mov	r0, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	3b05      	subs	r3, #5
 800751a:	fa00 f203 	lsl.w	r2, r0, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	635a      	str	r2, [r3, #52]	; 0x34
 8007526:	e04c      	b.n	80075c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b0c      	cmp	r3, #12
 800752e:	d824      	bhi.n	800757a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	3b23      	subs	r3, #35	; 0x23
 8007542:	221f      	movs	r2, #31
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43da      	mvns	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	400a      	ands	r2, r1
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4618      	mov	r0, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	3b23      	subs	r3, #35	; 0x23
 800756c:	fa00 f203 	lsl.w	r2, r0, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
 8007578:	e023      	b.n	80075c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	3b41      	subs	r3, #65	; 0x41
 800758c:	221f      	movs	r2, #31
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43da      	mvns	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	400a      	ands	r2, r1
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4618      	mov	r0, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	3b41      	subs	r3, #65	; 0x41
 80075b6:	fa00 f203 	lsl.w	r2, r0, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075c2:	4b22      	ldr	r3, [pc, #136]	; (800764c <HAL_ADC_ConfigChannel+0x234>)
 80075c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a21      	ldr	r2, [pc, #132]	; (8007650 <HAL_ADC_ConfigChannel+0x238>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d109      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x1cc>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b12      	cmp	r3, #18
 80075d6:	d105      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <HAL_ADC_ConfigChannel+0x238>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d123      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d003      	beq.n	80075fe <HAL_ADC_ConfigChannel+0x1e6>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b11      	cmp	r3, #17
 80075fc:	d11b      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d111      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <HAL_ADC_ConfigChannel+0x23c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a10      	ldr	r2, [pc, #64]	; (8007658 <HAL_ADC_ConfigChannel+0x240>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	0c9a      	lsrs	r2, r3, #18
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007628:	e002      	b.n	8007630 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f9      	bne.n	800762a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40012300 	.word	0x40012300
 8007650:	40012000 	.word	0x40012000
 8007654:	20000014 	.word	0x20000014
 8007658:	431bde83 	.word	0x431bde83

0800765c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007664:	4b79      	ldr	r3, [pc, #484]	; (800784c <ADC_Init+0x1f0>)
 8007666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	431a      	orrs	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6859      	ldr	r1, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80076b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	4a58      	ldr	r2, [pc, #352]	; (8007850 <ADC_Init+0x1f4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6899      	ldr	r1, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	e00f      	b.n	800775a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0202 	bic.w	r2, r2, #2
 8007768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6899      	ldr	r1, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7e1b      	ldrb	r3, [r3, #24]
 8007774:	005a      	lsls	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01b      	beq.n	80077c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80077a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	3b01      	subs	r3, #1
 80077b4:	035a      	lsls	r2, r3, #13
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e007      	b.n	80077d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	051a      	lsls	r2, r3, #20
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6899      	ldr	r1, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007812:	025a      	lsls	r2, r3, #9
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	029a      	lsls	r2, r3, #10
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012300 	.word	0x40012300
 8007850:	0f000001 	.word	0x0f000001

08007854 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e0ed      	b.n	8007a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fe fdb4 	bl	80063f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800789c:	f7ff faa0 	bl	8006de0 <HAL_GetTick>
 80078a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078a2:	e012      	b.n	80078ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078a4:	f7ff fa9c 	bl	8006de0 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b0a      	cmp	r3, #10
 80078b0:	d90b      	bls.n	80078ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2205      	movs	r2, #5
 80078c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0c5      	b.n	8007a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0e5      	beq.n	80078a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0202 	bic.w	r2, r2, #2
 80078e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078e8:	f7ff fa7a 	bl	8006de0 <HAL_GetTick>
 80078ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80078ee:	e012      	b.n	8007916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078f0:	f7ff fa76 	bl	8006de0 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	d90b      	bls.n	8007916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2205      	movs	r2, #5
 800790e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e09f      	b.n	8007a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7e1b      	ldrb	r3, [r3, #24]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d108      	bne.n	800793e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e007      	b.n	800794e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800794c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7e5b      	ldrb	r3, [r3, #25]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d108      	bne.n	8007968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e007      	b.n	8007978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7e9b      	ldrb	r3, [r3, #26]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d108      	bne.n	8007992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0220 	orr.w	r2, r2, #32
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e007      	b.n	80079a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0220 	bic.w	r2, r2, #32
 80079a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7edb      	ldrb	r3, [r3, #27]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d108      	bne.n	80079bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0210 	bic.w	r2, r2, #16
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e007      	b.n	80079cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0210 	orr.w	r2, r2, #16
 80079ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7f1b      	ldrb	r3, [r3, #28]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d108      	bne.n	80079e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0208 	orr.w	r2, r2, #8
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e007      	b.n	80079f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0208 	bic.w	r2, r2, #8
 80079f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7f5b      	ldrb	r3, [r3, #29]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d108      	bne.n	8007a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0204 	orr.w	r2, r2, #4
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e007      	b.n	8007a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0204 	bic.w	r2, r2, #4
 8007a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	ea42 0103 	orr.w	r1, r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007a78:	7cfb      	ldrb	r3, [r7, #19]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d003      	beq.n	8007a86 <HAL_CAN_ConfigFilter+0x26>
 8007a7e:	7cfb      	ldrb	r3, [r7, #19]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	f040 80be 	bne.w	8007c02 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007a86:	4b65      	ldr	r3, [pc, #404]	; (8007c1c <HAL_CAN_ConfigFilter+0x1bc>)
 8007a88:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a90:	f043 0201 	orr.w	r2, r3, #1
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007aa0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	401a      	ands	r2, r3
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d123      	bne.n	8007b30 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	401a      	ands	r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007b0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	3248      	adds	r2, #72	; 0x48
 8007b10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b26:	6979      	ldr	r1, [r7, #20]
 8007b28:	3348      	adds	r3, #72	; 0x48
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	440b      	add	r3, r1
 8007b2e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d122      	bne.n	8007b7e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007b58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	3248      	adds	r2, #72	; 0x48
 8007b5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b74:	6979      	ldr	r1, [r7, #20]
 8007b76:	3348      	adds	r3, #72	; 0x48
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	440b      	add	r3, r1
 8007b7c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	401a      	ands	r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007b98:	e007      	b.n	8007baa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	401a      	ands	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007bc4:	e007      	b.n	8007bd6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d107      	bne.n	8007bee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bf4:	f023 0201 	bic.w	r2, r3, #1
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e006      	b.n	8007c10 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	40006400 	.word	0x40006400

08007c20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d12e      	bne.n	8007c92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c4c:	f7ff f8c8 	bl	8006de0 <HAL_GetTick>
 8007c50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007c52:	e012      	b.n	8007c7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c54:	f7ff f8c4 	bl	8006de0 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b0a      	cmp	r3, #10
 8007c60:	d90b      	bls.n	8007c7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2205      	movs	r2, #5
 8007c72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e012      	b.n	8007ca0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e006      	b.n	8007ca0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
  }
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b089      	sub	sp, #36	; 0x24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d003      	beq.n	8007cd4 <HAL_CAN_AddTxMessage+0x2c>
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f040 80b8 	bne.w	8007e44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d105      	bne.n	8007cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80a0 	beq.w	8007e34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d907      	bls.n	8007d14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e09e      	b.n	8007e52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007d14:	2201      	movs	r2, #1
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	409a      	lsls	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	6809      	ldr	r1, [r1, #0]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3318      	adds	r3, #24
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	440b      	add	r3, r1
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e00f      	b.n	8007d62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007d56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	440b      	add	r3, r1
 8007d60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	3318      	adds	r3, #24
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	440b      	add	r3, r1
 8007d72:	3304      	adds	r3, #4
 8007d74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	7d1b      	ldrb	r3, [r3, #20]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d111      	bne.n	8007da2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3318      	adds	r3, #24
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	4413      	add	r3, r2
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	6811      	ldr	r1, [r2, #0]
 8007d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	3318      	adds	r3, #24
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	440b      	add	r3, r1
 8007d9e:	3304      	adds	r3, #4
 8007da0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3307      	adds	r3, #7
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	061a      	lsls	r2, r3, #24
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3306      	adds	r3, #6
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3305      	adds	r3, #5
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	3204      	adds	r2, #4
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	6811      	ldr	r1, [r2, #0]
 8007dca:	ea43 0200 	orr.w	r2, r3, r0
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	440b      	add	r3, r1
 8007dd4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007dd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3303      	adds	r3, #3
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	061a      	lsls	r2, r3, #24
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3302      	adds	r3, #2
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3301      	adds	r3, #1
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	4313      	orrs	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	6811      	ldr	r1, [r2, #0]
 8007e00:	ea43 0200 	orr.w	r2, r3, r0
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	440b      	add	r3, r1
 8007e0a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007e0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	3318      	adds	r3, #24
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	4413      	add	r3, r2
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	6811      	ldr	r1, [r2, #0]
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	3318      	adds	r3, #24
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	440b      	add	r3, r1
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e00e      	b.n	8007e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e006      	b.n	8007e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
  }
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3724      	adds	r7, #36	; 0x24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e70:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d002      	beq.n	8007e7e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d11d      	bne.n	8007eba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007eba:	68fb      	ldr	r3, [r7, #12]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007edc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d003      	beq.n	8007eec <HAL_CAN_GetRxMessage+0x24>
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	f040 80f3 	bne.w	80080d2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10e      	bne.n	8007f10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d116      	bne.n	8007f2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0e7      	b.n	80080e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0d8      	b.n	80080e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	331b      	adds	r3, #27
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	4413      	add	r3, r2
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0204 	and.w	r2, r3, #4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10c      	bne.n	8007f66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	331b      	adds	r3, #27
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	4413      	add	r3, r2
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	0d5b      	lsrs	r3, r3, #21
 8007f5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e00b      	b.n	8007f7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	331b      	adds	r3, #27
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	4413      	add	r3, r2
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	331b      	adds	r3, #27
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	4413      	add	r3, r2
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0202 	and.w	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	331b      	adds	r3, #27
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 020f 	and.w	r2, r3, #15
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	331b      	adds	r3, #27
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3304      	adds	r3, #4
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	0a1b      	lsrs	r3, r3, #8
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	331b      	adds	r3, #27
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	0a1a      	lsrs	r2, r3, #8
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	4413      	add	r3, r2
 8008016:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	0c1a      	lsrs	r2, r3, #16
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	3302      	adds	r3, #2
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	0e1a      	lsrs	r2, r3, #24
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	3303      	adds	r3, #3
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	4413      	add	r3, r2
 800804a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	3304      	adds	r3, #4
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	4413      	add	r3, r2
 8008062:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	0a1a      	lsrs	r2, r3, #8
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	3305      	adds	r3, #5
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	4413      	add	r3, r2
 800807c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	0c1a      	lsrs	r2, r3, #16
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	3306      	adds	r3, #6
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	4413      	add	r3, r2
 8008096:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	0e1a      	lsrs	r2, r3, #24
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	3307      	adds	r3, #7
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0220 	orr.w	r2, r2, #32
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e007      	b.n	80080ce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0220 	orr.w	r2, r2, #32
 80080cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e006      	b.n	80080e0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
  }
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d002      	beq.n	800810a <HAL_CAN_ActivateNotification+0x1e>
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d109      	bne.n	800811e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6959      	ldr	r1, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e006      	b.n	800812c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
  }
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008148:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d002      	beq.n	8008156 <HAL_CAN_DeactivateNotification+0x1e>
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d10a      	bne.n	800816c <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6959      	ldr	r1, [r3, #20]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	43da      	mvns	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	400a      	ands	r2, r1
 8008166:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	e006      	b.n	800817a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
  }
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b08a      	sub	sp, #40	; 0x28
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d07c      	beq.n	80082c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d023      	beq.n	800821e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f983 	bl	80084f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80081ee:	e016      	b.n	800821e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	e00c      	b.n	800821e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
 8008216:	e002      	b.n	800821e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f989 	bl	8008530 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d024      	beq.n	8008272 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008230:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f963 	bl	8008508 <HAL_CAN_TxMailbox1CompleteCallback>
 8008242:	e016      	b.n	8008272 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	e00c      	b.n	8008272 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
 800826a:	e002      	b.n	8008272 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f969 	bl	8008544 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d024      	beq.n	80082c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008284:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f943 	bl	800851c <HAL_CAN_TxMailbox2CompleteCallback>
 8008296:	e016      	b.n	80082c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
 80082aa:	e00c      	b.n	80082c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d004      	beq.n	80082c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	e002      	b.n	80082c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f949 	bl	8008558 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2208      	movs	r2, #8
 8008304:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f930 	bl	800856c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0303 	and.w	r3, r3, #3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fc fd89 	bl	8004e3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2210      	movs	r2, #16
 800834c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2208      	movs	r2, #8
 8008368:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f908 	bl	8008580 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fc fd85 	bl	8004e98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f003 0310 	and.w	r3, r3, #16
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d006      	beq.n	80083b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2210      	movs	r2, #16
 80083a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8f2 	bl	8008594 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d006      	beq.n	80083d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2208      	movs	r2, #8
 80083ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8eb 	bl	80085a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d07b      	beq.n	80084d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d072      	beq.n	80084cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	f043 0301 	orr.w	r3, r3, #1
 8008400:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008408:	2b00      	cmp	r3, #0
 800840a:	d008      	beq.n	800841e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	f043 0302 	orr.w	r3, r3, #2
 800841c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	f043 0304 	orr.w	r3, r3, #4
 8008438:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008440:	2b00      	cmp	r3, #0
 8008442:	d043      	beq.n	80084cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03e      	beq.n	80084cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008454:	2b60      	cmp	r3, #96	; 0x60
 8008456:	d02b      	beq.n	80084b0 <HAL_CAN_IRQHandler+0x32a>
 8008458:	2b60      	cmp	r3, #96	; 0x60
 800845a:	d82e      	bhi.n	80084ba <HAL_CAN_IRQHandler+0x334>
 800845c:	2b50      	cmp	r3, #80	; 0x50
 800845e:	d022      	beq.n	80084a6 <HAL_CAN_IRQHandler+0x320>
 8008460:	2b50      	cmp	r3, #80	; 0x50
 8008462:	d82a      	bhi.n	80084ba <HAL_CAN_IRQHandler+0x334>
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d019      	beq.n	800849c <HAL_CAN_IRQHandler+0x316>
 8008468:	2b40      	cmp	r3, #64	; 0x40
 800846a:	d826      	bhi.n	80084ba <HAL_CAN_IRQHandler+0x334>
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d010      	beq.n	8008492 <HAL_CAN_IRQHandler+0x30c>
 8008470:	2b30      	cmp	r3, #48	; 0x30
 8008472:	d822      	bhi.n	80084ba <HAL_CAN_IRQHandler+0x334>
 8008474:	2b10      	cmp	r3, #16
 8008476:	d002      	beq.n	800847e <HAL_CAN_IRQHandler+0x2f8>
 8008478:	2b20      	cmp	r3, #32
 800847a:	d005      	beq.n	8008488 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800847c:	e01d      	b.n	80084ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	f043 0308 	orr.w	r3, r3, #8
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008486:	e019      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	f043 0310 	orr.w	r3, r3, #16
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008490:	e014      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	f043 0320 	orr.w	r3, r3, #32
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800849a:	e00f      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084a4:	e00a      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084ae:	e005      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80084b8:	e000      	b.n	80084bc <HAL_CAN_IRQHandler+0x336>
            break;
 80084ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2204      	movs	r2, #4
 80084d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d008      	beq.n	80084ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fc fe10 	bl	800510c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80084ec:	bf00      	nop
 80084ee:	3728      	adds	r7, #40	; 0x28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <__NVIC_SetPriorityGrouping+0x44>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085d8:	4013      	ands	r3, r2
 80085da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <__NVIC_SetPriorityGrouping+0x44>)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	60d3      	str	r3, [r2, #12]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <__NVIC_GetPriorityGrouping+0x18>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	f003 0307 	and.w	r3, r3, #7
}
 8008612:	4618      	mov	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	e000ed00 	.word	0xe000ed00

08008620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862e:	2b00      	cmp	r3, #0
 8008630:	db0b      	blt.n	800864a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	f003 021f 	and.w	r2, r3, #31
 8008638:	4907      	ldr	r1, [pc, #28]	; (8008658 <__NVIC_EnableIRQ+0x38>)
 800863a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	2001      	movs	r0, #1
 8008642:	fa00 f202 	lsl.w	r2, r0, r2
 8008646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	e000e100 	.word	0xe000e100

0800865c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866c:	2b00      	cmp	r3, #0
 800866e:	db0a      	blt.n	8008686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	490c      	ldr	r1, [pc, #48]	; (80086a8 <__NVIC_SetPriority+0x4c>)
 8008676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800867a:	0112      	lsls	r2, r2, #4
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	440b      	add	r3, r1
 8008680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008684:	e00a      	b.n	800869c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	4908      	ldr	r1, [pc, #32]	; (80086ac <__NVIC_SetPriority+0x50>)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	3b04      	subs	r3, #4
 8008694:	0112      	lsls	r2, r2, #4
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	440b      	add	r3, r1
 800869a:	761a      	strb	r2, [r3, #24]
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	e000e100 	.word	0xe000e100
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f1c3 0307 	rsb	r3, r3, #7
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	bf28      	it	cs
 80086ce:	2304      	movcs	r3, #4
 80086d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3304      	adds	r3, #4
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d902      	bls.n	80086e0 <NVIC_EncodePriority+0x30>
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3b03      	subs	r3, #3
 80086de:	e000      	b.n	80086e2 <NVIC_EncodePriority+0x32>
 80086e0:	2300      	movs	r3, #0
 80086e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43da      	mvns	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	401a      	ands	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086f8:	f04f 31ff 	mov.w	r1, #4294967295
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008702:	43d9      	mvns	r1, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008708:	4313      	orrs	r3, r2
         );
}
 800870a:	4618      	mov	r0, r3
 800870c:	3724      	adds	r7, #36	; 0x24
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff ff4c 	bl	80085bc <__NVIC_SetPriorityGrouping>
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800873e:	f7ff ff61 	bl	8008604 <__NVIC_GetPriorityGrouping>
 8008742:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	6978      	ldr	r0, [r7, #20]
 800874a:	f7ff ffb1 	bl	80086b0 <NVIC_EncodePriority>
 800874e:	4602      	mov	r2, r0
 8008750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff ff80 	bl	800865c <__NVIC_SetPriority>
}
 800875c:	bf00      	nop
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800876e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff ff54 	bl	8008620 <__NVIC_EnableIRQ>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800878c:	f7fe fb28 	bl	8006de0 <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e099      	b.n	80088d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087bc:	e00f      	b.n	80087de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087be:	f7fe fb0f 	bl	8006de0 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d908      	bls.n	80087de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e078      	b.n	80088d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e8      	bne.n	80087be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4b38      	ldr	r3, [pc, #224]	; (80088d8 <HAL_DMA_Init+0x158>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800880a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2b04      	cmp	r3, #4
 8008836:	d107      	bne.n	8008848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4313      	orrs	r3, r2
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b04      	cmp	r3, #4
 8008870:	d117      	bne.n	80088a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb01 	bl	8008e8c <DMA_CheckFifoParam>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800889e:	2301      	movs	r3, #1
 80088a0:	e016      	b.n	80088d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fab8 	bl	8008e20 <DMA_CalcBaseAndBitshift>
 80088b0:	4603      	mov	r3, r0
 80088b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	223f      	movs	r2, #63	; 0x3f
 80088ba:	409a      	lsls	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	f010803f 	.word	0xf010803f

080088dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_DMA_Start_IT+0x26>
 80088fe:	2302      	movs	r3, #2
 8008900:	e040      	b.n	8008984 <HAL_DMA_Start_IT+0xa8>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d12f      	bne.n	8008976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fa4a 	bl	8008dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008934:	223f      	movs	r2, #63	; 0x3f
 8008936:	409a      	lsls	r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0216 	orr.w	r2, r2, #22
 800894a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d007      	beq.n	8008964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0208 	orr.w	r2, r2, #8
 8008962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e005      	b.n	8008982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800897e:	2302      	movs	r3, #2
 8008980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008998:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800899a:	f7fe fa21 	bl	8006de0 <HAL_GetTick>
 800899e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d008      	beq.n	80089be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e052      	b.n	8008a64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0216 	bic.w	r2, r2, #22
 80089cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695a      	ldr	r2, [r3, #20]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <HAL_DMA_Abort+0x62>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0208 	bic.w	r2, r2, #8
 80089fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a0e:	e013      	b.n	8008a38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a10:	f7fe f9e6 	bl	8006de0 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b05      	cmp	r3, #5
 8008a1c:	d90c      	bls.n	8008a38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2203      	movs	r2, #3
 8008a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e015      	b.n	8008a64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e4      	bne.n	8008a10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4a:	223f      	movs	r2, #63	; 0x3f
 8008a4c:	409a      	lsls	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d004      	beq.n	8008a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e00c      	b.n	8008aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2205      	movs	r2, #5
 8008a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008abc:	4b8e      	ldr	r3, [pc, #568]	; (8008cf8 <HAL_DMA_IRQHandler+0x248>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a8e      	ldr	r2, [pc, #568]	; (8008cfc <HAL_DMA_IRQHandler+0x24c>)
 8008ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac6:	0a9b      	lsrs	r3, r3, #10
 8008ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ada:	2208      	movs	r2, #8
 8008adc:	409a      	lsls	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d013      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0204 	bic.w	r2, r2, #4
 8008b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b08:	2208      	movs	r2, #8
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b14:	f043 0201 	orr.w	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b20:	2201      	movs	r2, #1
 8008b22:	409a      	lsls	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d012      	beq.n	8008b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00b      	beq.n	8008b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3e:	2201      	movs	r2, #1
 8008b40:	409a      	lsls	r2, r3
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4a:	f043 0202 	orr.w	r2, r3, #2
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b56:	2204      	movs	r2, #4
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d012      	beq.n	8008b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b74:	2204      	movs	r2, #4
 8008b76:	409a      	lsls	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	f043 0204 	orr.w	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d043      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d03c      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008baa:	2210      	movs	r2, #16
 8008bac:	409a      	lsls	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d018      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d108      	bne.n	8008be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d024      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	e01f      	b.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
 8008bf0:	e016      	b.n	8008c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0208 	bic.w	r2, r2, #8
 8008c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c24:	2220      	movs	r2, #32
 8008c26:	409a      	lsls	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 808f 	beq.w	8008d50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8087 	beq.w	8008d50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c46:	2220      	movs	r2, #32
 8008c48:	409a      	lsls	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d136      	bne.n	8008cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0216 	bic.w	r2, r2, #22
 8008c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <HAL_DMA_IRQHandler+0x1da>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0208 	bic.w	r2, r2, #8
 8008c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	223f      	movs	r2, #63	; 0x3f
 8008ca0:	409a      	lsls	r2, r3
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d07e      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
        }
        return;
 8008cc6:	e079      	b.n	8008dbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01d      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d031      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
 8008cf4:	e02c      	b.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
 8008cf6:	bf00      	nop
 8008cf8:	20000014 	.word	0x20000014
 8008cfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d023      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	e01e      	b.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10f      	bne.n	8008d40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0210 	bic.w	r2, r2, #16
 8008d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d032      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d022      	beq.n	8008daa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2205      	movs	r2, #5
 8008d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d307      	bcc.n	8008d98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f2      	bne.n	8008d7c <HAL_DMA_IRQHandler+0x2cc>
 8008d96:	e000      	b.n	8008d9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
 8008dba:	e000      	b.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8008dbc:	bf00      	nop
    }
  }
}
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2b40      	cmp	r3, #64	; 0x40
 8008df0:	d108      	bne.n	8008e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008e02:	e007      	b.n	8008e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	60da      	str	r2, [r3, #12]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	3b10      	subs	r3, #16
 8008e30:	4a14      	ldr	r2, [pc, #80]	; (8008e84 <DMA_CalcBaseAndBitshift+0x64>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008e3a:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <DMA_CalcBaseAndBitshift+0x68>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d909      	bls.n	8008e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	1d1a      	adds	r2, r3, #4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8008e60:	e007      	b.n	8008e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	aaaaaaab 	.word	0xaaaaaaab
 8008e88:	080131ac 	.word	0x080131ac

08008e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d11f      	bne.n	8008ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d856      	bhi.n	8008f5a <DMA_CheckFifoParam+0xce>
 8008eac:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <DMA_CheckFifoParam+0x28>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ed7 	.word	0x08008ed7
 8008ebc:	08008ec5 	.word	0x08008ec5
 8008ec0:	08008f5b 	.word	0x08008f5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d046      	beq.n	8008f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ed4:	e043      	b.n	8008f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ede:	d140      	bne.n	8008f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ee4:	e03d      	b.n	8008f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eee:	d121      	bne.n	8008f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d837      	bhi.n	8008f66 <DMA_CheckFifoParam+0xda>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <DMA_CheckFifoParam+0x70>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f13 	.word	0x08008f13
 8008f04:	08008f0d 	.word	0x08008f0d
 8008f08:	08008f25 	.word	0x08008f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e030      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d025      	beq.n	8008f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f22:	e022      	b.n	8008f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f2c:	d11f      	bne.n	8008f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008f32:	e01c      	b.n	8008f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d903      	bls.n	8008f42 <DMA_CheckFifoParam+0xb6>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d003      	beq.n	8008f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008f40:	e018      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	73fb      	strb	r3, [r7, #15]
      break;
 8008f46:	e015      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00e      	beq.n	8008f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
      break;
 8008f58:	e00b      	b.n	8008f72 <DMA_CheckFifoParam+0xe6>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e00a      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e008      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f62:	bf00      	nop
 8008f64:	e006      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f66:	bf00      	nop
 8008f68:	e004      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e002      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8008f6e:	bf00      	nop
 8008f70:	e000      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f72:	bf00      	nop
    }
  } 
  
  return status; 
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b089      	sub	sp, #36	; 0x24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e16b      	b.n	8009278 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	f040 815a 	bne.w	8009272 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d005      	beq.n	8008fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d130      	bne.n	8009038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4013      	ands	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800900c:	2201      	movs	r2, #1
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	43db      	mvns	r3, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4013      	ands	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	091b      	lsrs	r3, r3, #4
 8009022:	f003 0201 	and.w	r2, r3, #1
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	fa02 f303 	lsl.w	r3, r2, r3
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	2b03      	cmp	r3, #3
 8009042:	d017      	beq.n	8009074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	2203      	movs	r2, #3
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4013      	ands	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	4313      	orrs	r3, r2
 800906c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d123      	bne.n	80090c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	08da      	lsrs	r2, r3, #3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3208      	adds	r2, #8
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	220f      	movs	r2, #15
 8009098:	fa02 f303 	lsl.w	r3, r2, r3
 800909c:	43db      	mvns	r3, r3
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4013      	ands	r3, r2
 80090a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	08da      	lsrs	r2, r3, #3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3208      	adds	r2, #8
 80090c2:	69b9      	ldr	r1, [r7, #24]
 80090c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	2203      	movs	r2, #3
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	43db      	mvns	r3, r3
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	4013      	ands	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f003 0203 	and.w	r2, r3, #3
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80b4 	beq.w	8009272 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	4b60      	ldr	r3, [pc, #384]	; (8009290 <HAL_GPIO_Init+0x30c>)
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	4a5f      	ldr	r2, [pc, #380]	; (8009290 <HAL_GPIO_Init+0x30c>)
 8009114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009118:	6453      	str	r3, [r2, #68]	; 0x44
 800911a:	4b5d      	ldr	r3, [pc, #372]	; (8009290 <HAL_GPIO_Init+0x30c>)
 800911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009126:	4a5b      	ldr	r2, [pc, #364]	; (8009294 <HAL_GPIO_Init+0x310>)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	3302      	adds	r3, #2
 800912e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	220f      	movs	r2, #15
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	43db      	mvns	r3, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	4013      	ands	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a52      	ldr	r2, [pc, #328]	; (8009298 <HAL_GPIO_Init+0x314>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d02b      	beq.n	80091aa <HAL_GPIO_Init+0x226>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a51      	ldr	r2, [pc, #324]	; (800929c <HAL_GPIO_Init+0x318>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d025      	beq.n	80091a6 <HAL_GPIO_Init+0x222>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a50      	ldr	r2, [pc, #320]	; (80092a0 <HAL_GPIO_Init+0x31c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d01f      	beq.n	80091a2 <HAL_GPIO_Init+0x21e>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a4f      	ldr	r2, [pc, #316]	; (80092a4 <HAL_GPIO_Init+0x320>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d019      	beq.n	800919e <HAL_GPIO_Init+0x21a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a4e      	ldr	r2, [pc, #312]	; (80092a8 <HAL_GPIO_Init+0x324>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d013      	beq.n	800919a <HAL_GPIO_Init+0x216>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a4d      	ldr	r2, [pc, #308]	; (80092ac <HAL_GPIO_Init+0x328>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00d      	beq.n	8009196 <HAL_GPIO_Init+0x212>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a4c      	ldr	r2, [pc, #304]	; (80092b0 <HAL_GPIO_Init+0x32c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <HAL_GPIO_Init+0x20e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a4b      	ldr	r2, [pc, #300]	; (80092b4 <HAL_GPIO_Init+0x330>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d101      	bne.n	800918e <HAL_GPIO_Init+0x20a>
 800918a:	2307      	movs	r3, #7
 800918c:	e00e      	b.n	80091ac <HAL_GPIO_Init+0x228>
 800918e:	2308      	movs	r3, #8
 8009190:	e00c      	b.n	80091ac <HAL_GPIO_Init+0x228>
 8009192:	2306      	movs	r3, #6
 8009194:	e00a      	b.n	80091ac <HAL_GPIO_Init+0x228>
 8009196:	2305      	movs	r3, #5
 8009198:	e008      	b.n	80091ac <HAL_GPIO_Init+0x228>
 800919a:	2304      	movs	r3, #4
 800919c:	e006      	b.n	80091ac <HAL_GPIO_Init+0x228>
 800919e:	2303      	movs	r3, #3
 80091a0:	e004      	b.n	80091ac <HAL_GPIO_Init+0x228>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e002      	b.n	80091ac <HAL_GPIO_Init+0x228>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <HAL_GPIO_Init+0x228>
 80091aa:	2300      	movs	r3, #0
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	f002 0203 	and.w	r2, r2, #3
 80091b2:	0092      	lsls	r2, r2, #2
 80091b4:	4093      	lsls	r3, r2
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091bc:	4935      	ldr	r1, [pc, #212]	; (8009294 <HAL_GPIO_Init+0x310>)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	089b      	lsrs	r3, r3, #2
 80091c2:	3302      	adds	r3, #2
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091ca:	4b3b      	ldr	r3, [pc, #236]	; (80092b8 <HAL_GPIO_Init+0x334>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	43db      	mvns	r3, r3
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	4013      	ands	r3, r2
 80091d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091ee:	4a32      	ldr	r2, [pc, #200]	; (80092b8 <HAL_GPIO_Init+0x334>)
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091f4:	4b30      	ldr	r3, [pc, #192]	; (80092b8 <HAL_GPIO_Init+0x334>)
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	43db      	mvns	r3, r3
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	4013      	ands	r3, r2
 8009202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009218:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <HAL_GPIO_Init+0x334>)
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800921e:	4b26      	ldr	r3, [pc, #152]	; (80092b8 <HAL_GPIO_Init+0x334>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	43db      	mvns	r3, r3
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	4013      	ands	r3, r2
 800922c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009242:	4a1d      	ldr	r2, [pc, #116]	; (80092b8 <HAL_GPIO_Init+0x334>)
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009248:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <HAL_GPIO_Init+0x334>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	43db      	mvns	r3, r3
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	4013      	ands	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800926c:	4a12      	ldr	r2, [pc, #72]	; (80092b8 <HAL_GPIO_Init+0x334>)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	3301      	adds	r3, #1
 8009276:	61fb      	str	r3, [r7, #28]
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b0f      	cmp	r3, #15
 800927c:	f67f ae90 	bls.w	8008fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	3724      	adds	r7, #36	; 0x24
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40023800 	.word	0x40023800
 8009294:	40013800 	.word	0x40013800
 8009298:	40020000 	.word	0x40020000
 800929c:	40020400 	.word	0x40020400
 80092a0:	40020800 	.word	0x40020800
 80092a4:	40020c00 	.word	0x40020c00
 80092a8:	40021000 	.word	0x40021000
 80092ac:	40021400 	.word	0x40021400
 80092b0:	40021800 	.word	0x40021800
 80092b4:	40021c00 	.word	0x40021c00
 80092b8:	40013c00 	.word	0x40013c00

080092bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	887b      	ldrh	r3, [r7, #2]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e001      	b.n	80092de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	807b      	strh	r3, [r7, #2]
 80092f8:	4613      	mov	r3, r2
 80092fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80092fc:	787b      	ldrb	r3, [r7, #1]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009302:	887a      	ldrh	r2, [r7, #2]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009308:	e003      	b.n	8009312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800930a:	887b      	ldrh	r3, [r7, #2]
 800930c:	041a      	lsls	r2, r3, #16
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	619a      	str	r2, [r3, #24]
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
	...

08009320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e267      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d075      	beq.n	800942a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800933e:	4b88      	ldr	r3, [pc, #544]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 030c 	and.w	r3, r3, #12
 8009346:	2b04      	cmp	r3, #4
 8009348:	d00c      	beq.n	8009364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800934a:	4b85      	ldr	r3, [pc, #532]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009352:	2b08      	cmp	r3, #8
 8009354:	d112      	bne.n	800937c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009356:	4b82      	ldr	r3, [pc, #520]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800935e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009362:	d10b      	bne.n	800937c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009364:	4b7e      	ldr	r3, [pc, #504]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d05b      	beq.n	8009428 <HAL_RCC_OscConfig+0x108>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d157      	bne.n	8009428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e242      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009384:	d106      	bne.n	8009394 <HAL_RCC_OscConfig+0x74>
 8009386:	4b76      	ldr	r3, [pc, #472]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a75      	ldr	r2, [pc, #468]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 800938c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	e01d      	b.n	80093d0 <HAL_RCC_OscConfig+0xb0>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800939c:	d10c      	bne.n	80093b8 <HAL_RCC_OscConfig+0x98>
 800939e:	4b70      	ldr	r3, [pc, #448]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a6f      	ldr	r2, [pc, #444]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	4b6d      	ldr	r3, [pc, #436]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a6c      	ldr	r2, [pc, #432]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	e00b      	b.n	80093d0 <HAL_RCC_OscConfig+0xb0>
 80093b8:	4b69      	ldr	r3, [pc, #420]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a68      	ldr	r2, [pc, #416]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	4b66      	ldr	r3, [pc, #408]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a65      	ldr	r2, [pc, #404]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d013      	beq.n	8009400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d8:	f7fd fd02 	bl	8006de0 <HAL_GetTick>
 80093dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093de:	e008      	b.n	80093f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093e0:	f7fd fcfe 	bl	8006de0 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b64      	cmp	r3, #100	; 0x64
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e207      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093f2:	4b5b      	ldr	r3, [pc, #364]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0f0      	beq.n	80093e0 <HAL_RCC_OscConfig+0xc0>
 80093fe:	e014      	b.n	800942a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009400:	f7fd fcee 	bl	8006de0 <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009408:	f7fd fcea 	bl	8006de0 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b64      	cmp	r3, #100	; 0x64
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e1f3      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800941a:	4b51      	ldr	r3, [pc, #324]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0xe8>
 8009426:	e000      	b.n	800942a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d063      	beq.n	80094fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009436:	4b4a      	ldr	r3, [pc, #296]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f003 030c 	and.w	r3, r3, #12
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00b      	beq.n	800945a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009442:	4b47      	ldr	r3, [pc, #284]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800944a:	2b08      	cmp	r3, #8
 800944c:	d11c      	bne.n	8009488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800944e:	4b44      	ldr	r3, [pc, #272]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d116      	bne.n	8009488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800945a:	4b41      	ldr	r3, [pc, #260]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <HAL_RCC_OscConfig+0x152>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d001      	beq.n	8009472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e1c7      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009472:	4b3b      	ldr	r3, [pc, #236]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	4937      	ldr	r1, [pc, #220]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009482:	4313      	orrs	r3, r2
 8009484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009486:	e03a      	b.n	80094fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d020      	beq.n	80094d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009490:	4b34      	ldr	r3, [pc, #208]	; (8009564 <HAL_RCC_OscConfig+0x244>)
 8009492:	2201      	movs	r2, #1
 8009494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009496:	f7fd fca3 	bl	8006de0 <HAL_GetTick>
 800949a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800949c:	e008      	b.n	80094b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800949e:	f7fd fc9f 	bl	8006de0 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d901      	bls.n	80094b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e1a8      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094b0:	4b2b      	ldr	r3, [pc, #172]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f0      	beq.n	800949e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094bc:	4b28      	ldr	r3, [pc, #160]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	4925      	ldr	r1, [pc, #148]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	600b      	str	r3, [r1, #0]
 80094d0:	e015      	b.n	80094fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094d2:	4b24      	ldr	r3, [pc, #144]	; (8009564 <HAL_RCC_OscConfig+0x244>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d8:	f7fd fc82 	bl	8006de0 <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094e0:	f7fd fc7e 	bl	8006de0 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e187      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094f2:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1f0      	bne.n	80094e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d036      	beq.n	8009578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d016      	beq.n	8009540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009512:	4b15      	ldr	r3, [pc, #84]	; (8009568 <HAL_RCC_OscConfig+0x248>)
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009518:	f7fd fc62 	bl	8006de0 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009520:	f7fd fc5e 	bl	8006de0 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e167      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <HAL_RCC_OscConfig+0x240>)
 8009534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0f0      	beq.n	8009520 <HAL_RCC_OscConfig+0x200>
 800953e:	e01b      	b.n	8009578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <HAL_RCC_OscConfig+0x248>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009546:	f7fd fc4b 	bl	8006de0 <HAL_GetTick>
 800954a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800954c:	e00e      	b.n	800956c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800954e:	f7fd fc47 	bl	8006de0 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d907      	bls.n	800956c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e150      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
 8009560:	40023800 	.word	0x40023800
 8009564:	42470000 	.word	0x42470000
 8009568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800956c:	4b88      	ldr	r3, [pc, #544]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800956e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1ea      	bne.n	800954e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8097 	beq.w	80096b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800958a:	4b81      	ldr	r3, [pc, #516]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10f      	bne.n	80095b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009596:	2300      	movs	r3, #0
 8009598:	60bb      	str	r3, [r7, #8]
 800959a:	4b7d      	ldr	r3, [pc, #500]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	4a7c      	ldr	r2, [pc, #496]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80095a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a4:	6413      	str	r3, [r2, #64]	; 0x40
 80095a6:	4b7a      	ldr	r3, [pc, #488]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ae:	60bb      	str	r3, [r7, #8]
 80095b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095b2:	2301      	movs	r3, #1
 80095b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095b6:	4b77      	ldr	r3, [pc, #476]	; (8009794 <HAL_RCC_OscConfig+0x474>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d118      	bne.n	80095f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095c2:	4b74      	ldr	r3, [pc, #464]	; (8009794 <HAL_RCC_OscConfig+0x474>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a73      	ldr	r2, [pc, #460]	; (8009794 <HAL_RCC_OscConfig+0x474>)
 80095c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095ce:	f7fd fc07 	bl	8006de0 <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095d6:	f7fd fc03 	bl	8006de0 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e10c      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095e8:	4b6a      	ldr	r3, [pc, #424]	; (8009794 <HAL_RCC_OscConfig+0x474>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d106      	bne.n	800960a <HAL_RCC_OscConfig+0x2ea>
 80095fc:	4b64      	ldr	r3, [pc, #400]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80095fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009600:	4a63      	ldr	r2, [pc, #396]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	6713      	str	r3, [r2, #112]	; 0x70
 8009608:	e01c      	b.n	8009644 <HAL_RCC_OscConfig+0x324>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	2b05      	cmp	r3, #5
 8009610:	d10c      	bne.n	800962c <HAL_RCC_OscConfig+0x30c>
 8009612:	4b5f      	ldr	r3, [pc, #380]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	4a5e      	ldr	r2, [pc, #376]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009618:	f043 0304 	orr.w	r3, r3, #4
 800961c:	6713      	str	r3, [r2, #112]	; 0x70
 800961e:	4b5c      	ldr	r3, [pc, #368]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	4a5b      	ldr	r2, [pc, #364]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009624:	f043 0301 	orr.w	r3, r3, #1
 8009628:	6713      	str	r3, [r2, #112]	; 0x70
 800962a:	e00b      	b.n	8009644 <HAL_RCC_OscConfig+0x324>
 800962c:	4b58      	ldr	r3, [pc, #352]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800962e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009630:	4a57      	ldr	r2, [pc, #348]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	6713      	str	r3, [r2, #112]	; 0x70
 8009638:	4b55      	ldr	r3, [pc, #340]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800963a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963c:	4a54      	ldr	r2, [pc, #336]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800963e:	f023 0304 	bic.w	r3, r3, #4
 8009642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d015      	beq.n	8009678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964c:	f7fd fbc8 	bl	8006de0 <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009652:	e00a      	b.n	800966a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009654:	f7fd fbc4 	bl	8006de0 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009662:	4293      	cmp	r3, r2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e0cb      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800966a:	4b49      	ldr	r3, [pc, #292]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800966c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0ee      	beq.n	8009654 <HAL_RCC_OscConfig+0x334>
 8009676:	e014      	b.n	80096a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009678:	f7fd fbb2 	bl	8006de0 <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800967e:	e00a      	b.n	8009696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009680:	f7fd fbae 	bl	8006de0 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	f241 3288 	movw	r2, #5000	; 0x1388
 800968e:	4293      	cmp	r3, r2
 8009690:	d901      	bls.n	8009696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e0b5      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009696:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1ee      	bne.n	8009680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d105      	bne.n	80096b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096a8:	4b39      	ldr	r3, [pc, #228]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	4a38      	ldr	r2, [pc, #224]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80096ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 80a1 	beq.w	8009800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096be:	4b34      	ldr	r3, [pc, #208]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 030c 	and.w	r3, r3, #12
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d05c      	beq.n	8009784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d141      	bne.n	8009756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096d2:	4b31      	ldr	r3, [pc, #196]	; (8009798 <HAL_RCC_OscConfig+0x478>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096d8:	f7fd fb82 	bl	8006de0 <HAL_GetTick>
 80096dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096de:	e008      	b.n	80096f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096e0:	f7fd fb7e 	bl	8006de0 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d901      	bls.n	80096f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e087      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096f2:	4b27      	ldr	r3, [pc, #156]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1f0      	bne.n	80096e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69da      	ldr	r2, [r3, #28]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	085b      	lsrs	r3, r3, #1
 8009716:	3b01      	subs	r3, #1
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	061b      	lsls	r3, r3, #24
 8009722:	491b      	ldr	r1, [pc, #108]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009724:	4313      	orrs	r3, r2
 8009726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009728:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <HAL_RCC_OscConfig+0x478>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800972e:	f7fd fb57 	bl	8006de0 <HAL_GetTick>
 8009732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009734:	e008      	b.n	8009748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009736:	f7fd fb53 	bl	8006de0 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e05c      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009748:	4b11      	ldr	r3, [pc, #68]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0f0      	beq.n	8009736 <HAL_RCC_OscConfig+0x416>
 8009754:	e054      	b.n	8009800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009756:	4b10      	ldr	r3, [pc, #64]	; (8009798 <HAL_RCC_OscConfig+0x478>)
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800975c:	f7fd fb40 	bl	8006de0 <HAL_GetTick>
 8009760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009762:	e008      	b.n	8009776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009764:	f7fd fb3c 	bl	8006de0 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e045      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009776:	4b06      	ldr	r3, [pc, #24]	; (8009790 <HAL_RCC_OscConfig+0x470>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f0      	bne.n	8009764 <HAL_RCC_OscConfig+0x444>
 8009782:	e03d      	b.n	8009800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d107      	bne.n	800979c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e038      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
 8009790:	40023800 	.word	0x40023800
 8009794:	40007000 	.word	0x40007000
 8009798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800979c:	4b1b      	ldr	r3, [pc, #108]	; (800980c <HAL_RCC_OscConfig+0x4ec>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d028      	beq.n	80097fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d121      	bne.n	80097fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d11a      	bne.n	80097fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80097cc:	4013      	ands	r3, r2
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d111      	bne.n	80097fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e2:	085b      	lsrs	r3, r3, #1
 80097e4:	3b01      	subs	r3, #1
 80097e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d107      	bne.n	80097fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d001      	beq.n	8009800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40023800 	.word	0x40023800

08009810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e0cc      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009824:	4b68      	ldr	r3, [pc, #416]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d90c      	bls.n	800984c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009832:	4b65      	ldr	r3, [pc, #404]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800983a:	4b63      	ldr	r3, [pc, #396]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d001      	beq.n	800984c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0b8      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d020      	beq.n	800989a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009864:	4b59      	ldr	r3, [pc, #356]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	4a58      	ldr	r2, [pc, #352]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 800986a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800986e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800987c:	4b53      	ldr	r3, [pc, #332]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	4a52      	ldr	r2, [pc, #328]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009888:	4b50      	ldr	r3, [pc, #320]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	494d      	ldr	r1, [pc, #308]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009896:	4313      	orrs	r3, r2
 8009898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d044      	beq.n	8009930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ae:	4b47      	ldr	r3, [pc, #284]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d119      	bne.n	80098ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e07f      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d003      	beq.n	80098ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d107      	bne.n	80098de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ce:	4b3f      	ldr	r3, [pc, #252]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d109      	bne.n	80098ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e06f      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098de:	4b3b      	ldr	r3, [pc, #236]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e067      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098ee:	4b37      	ldr	r3, [pc, #220]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f023 0203 	bic.w	r2, r3, #3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	4934      	ldr	r1, [pc, #208]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009900:	f7fd fa6e 	bl	8006de0 <HAL_GetTick>
 8009904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009906:	e00a      	b.n	800991e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009908:	f7fd fa6a 	bl	8006de0 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	f241 3288 	movw	r2, #5000	; 0x1388
 8009916:	4293      	cmp	r3, r2
 8009918:	d901      	bls.n	800991e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e04f      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800991e:	4b2b      	ldr	r3, [pc, #172]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 020c 	and.w	r2, r3, #12
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	429a      	cmp	r2, r3
 800992e:	d1eb      	bne.n	8009908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009930:	4b25      	ldr	r3, [pc, #148]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d20c      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800993e:	4b22      	ldr	r3, [pc, #136]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009946:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d001      	beq.n	8009958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e032      	b.n	80099be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009964:	4b19      	ldr	r3, [pc, #100]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4916      	ldr	r1, [pc, #88]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009972:	4313      	orrs	r3, r2
 8009974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	490e      	ldr	r1, [pc, #56]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 8009992:	4313      	orrs	r3, r2
 8009994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009996:	f000 f821 	bl	80099dc <HAL_RCC_GetSysClockFreq>
 800999a:	4602      	mov	r2, r0
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <HAL_RCC_ClockConfig+0x1bc>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	091b      	lsrs	r3, r3, #4
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	490a      	ldr	r1, [pc, #40]	; (80099d0 <HAL_RCC_ClockConfig+0x1c0>)
 80099a8:	5ccb      	ldrb	r3, [r1, r3]
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <HAL_RCC_ClockConfig+0x1c4>)
 80099b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <HAL_RCC_ClockConfig+0x1c8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fc ffee 	bl	8006998 <HAL_InitTick>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40023c00 	.word	0x40023c00
 80099cc:	40023800 	.word	0x40023800
 80099d0:	08013194 	.word	0x08013194
 80099d4:	20000014 	.word	0x20000014
 80099d8:	20000018 	.word	0x20000018

080099dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099e0:	b094      	sub	sp, #80	; 0x50
 80099e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	647b      	str	r3, [r7, #68]	; 0x44
 80099e8:	2300      	movs	r3, #0
 80099ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ec:	2300      	movs	r3, #0
 80099ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099f4:	4b79      	ldr	r3, [pc, #484]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 030c 	and.w	r3, r3, #12
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d00d      	beq.n	8009a1c <HAL_RCC_GetSysClockFreq+0x40>
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	f200 80e1 	bhi.w	8009bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <HAL_RCC_GetSysClockFreq+0x34>
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d003      	beq.n	8009a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8009a0e:	e0db      	b.n	8009bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a10:	4b73      	ldr	r3, [pc, #460]	; (8009be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009a14:	e0db      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a16:	4b73      	ldr	r3, [pc, #460]	; (8009be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a1a:	e0d8      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a1c:	4b6f      	ldr	r3, [pc, #444]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a26:	4b6d      	ldr	r3, [pc, #436]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d063      	beq.n	8009afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a32:	4b6a      	ldr	r3, [pc, #424]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	2200      	movs	r2, #0
 8009a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a44:	633b      	str	r3, [r7, #48]	; 0x30
 8009a46:	2300      	movs	r3, #0
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f04f 0100 	mov.w	r1, #0
 8009a5a:	0159      	lsls	r1, r3, #5
 8009a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a60:	0150      	lsls	r0, r2, #5
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4621      	mov	r1, r4
 8009a68:	1a51      	subs	r1, r2, r1
 8009a6a:	6139      	str	r1, [r7, #16]
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a80:	4659      	mov	r1, fp
 8009a82:	018b      	lsls	r3, r1, #6
 8009a84:	4651      	mov	r1, sl
 8009a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a8a:	4651      	mov	r1, sl
 8009a8c:	018a      	lsls	r2, r1, #6
 8009a8e:	4651      	mov	r1, sl
 8009a90:	ebb2 0801 	subs.w	r8, r2, r1
 8009a94:	4659      	mov	r1, fp
 8009a96:	eb63 0901 	sbc.w	r9, r3, r1
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	f04f 0300 	mov.w	r3, #0
 8009aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aae:	4690      	mov	r8, r2
 8009ab0:	4699      	mov	r9, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	eb18 0303 	adds.w	r3, r8, r3
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	462b      	mov	r3, r5
 8009abc:	eb49 0303 	adc.w	r3, r9, r3
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ace:	4629      	mov	r1, r5
 8009ad0:	024b      	lsls	r3, r1, #9
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ad8:	4621      	mov	r1, r4
 8009ada:	024a      	lsls	r2, r1, #9
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aec:	f7f7 f8ac 	bl	8000c48 <__aeabi_uldivmod>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4613      	mov	r3, r2
 8009af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009af8:	e058      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009afa:	4b38      	ldr	r3, [pc, #224]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	099b      	lsrs	r3, r3, #6
 8009b00:	2200      	movs	r2, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	4611      	mov	r1, r2
 8009b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009b0a:	623b      	str	r3, [r7, #32]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	f04f 0100 	mov.w	r1, #0
 8009b20:	0159      	lsls	r1, r3, #5
 8009b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b26:	0150      	lsls	r0, r2, #5
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009b32:	4649      	mov	r1, r9
 8009b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8009b50:	eb63 050b 	sbc.w	r5, r3, fp
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	f04f 0300 	mov.w	r3, #0
 8009b5c:	00eb      	lsls	r3, r5, #3
 8009b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b62:	00e2      	lsls	r2, r4, #3
 8009b64:	4614      	mov	r4, r2
 8009b66:	461d      	mov	r5, r3
 8009b68:	4643      	mov	r3, r8
 8009b6a:	18e3      	adds	r3, r4, r3
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	464b      	mov	r3, r9
 8009b70:	eb45 0303 	adc.w	r3, r5, r3
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b82:	4629      	mov	r1, r5
 8009b84:	028b      	lsls	r3, r1, #10
 8009b86:	4621      	mov	r1, r4
 8009b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	028a      	lsls	r2, r1, #10
 8009b90:	4610      	mov	r0, r2
 8009b92:	4619      	mov	r1, r3
 8009b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b96:	2200      	movs	r2, #0
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	61fa      	str	r2, [r7, #28]
 8009b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ba0:	f7f7 f852 	bl	8000c48 <__aeabi_uldivmod>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4613      	mov	r3, r2
 8009baa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	0c1b      	lsrs	r3, r3, #16
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bc6:	e002      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009bca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3750      	adds	r7, #80	; 0x50
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bda:	bf00      	nop
 8009bdc:	40023800 	.word	0x40023800
 8009be0:	00f42400 	.word	0x00f42400
 8009be4:	007a1200 	.word	0x007a1200

08009be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bec:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8009bee:	681b      	ldr	r3, [r3, #0]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	20000014 	.word	0x20000014

08009c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c04:	f7ff fff0 	bl	8009be8 <HAL_RCC_GetHCLKFreq>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	0a9b      	lsrs	r3, r3, #10
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	4903      	ldr	r1, [pc, #12]	; (8009c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c16:	5ccb      	ldrb	r3, [r1, r3]
 8009c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	40023800 	.word	0x40023800
 8009c24:	080131a4 	.word	0x080131a4

08009c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c2c:	f7ff ffdc 	bl	8009be8 <HAL_RCC_GetHCLKFreq>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	0b5b      	lsrs	r3, r3, #13
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	4903      	ldr	r1, [pc, #12]	; (8009c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c3e:	5ccb      	ldrb	r3, [r1, r3]
 8009c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	40023800 	.word	0x40023800
 8009c4c:	080131a4 	.word	0x080131a4

08009c50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	220f      	movs	r2, #15
 8009c5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <HAL_RCC_GetClockConfig+0x5c>)
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f003 0203 	and.w	r2, r3, #3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <HAL_RCC_GetClockConfig+0x5c>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <HAL_RCC_GetClockConfig+0x5c>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c84:	4b09      	ldr	r3, [pc, #36]	; (8009cac <HAL_RCC_GetClockConfig+0x5c>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	08db      	lsrs	r3, r3, #3
 8009c8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <HAL_RCC_GetClockConfig+0x60>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0207 	and.w	r2, r3, #7
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40023800 	.word	0x40023800
 8009cb0:	40023c00 	.word	0x40023c00

08009cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e041      	b.n	8009d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d106      	bne.n	8009ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7fc fc7e 	bl	80065dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f000 fdae 	bl	800a854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d001      	beq.n	8009d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e04e      	b.n	8009e0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a23      	ldr	r2, [pc, #140]	; (8009e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d022      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d96:	d01d      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a1f      	ldr	r2, [pc, #124]	; (8009e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d018      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a1e      	ldr	r2, [pc, #120]	; (8009e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d013      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d00e      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d009      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a19      	ldr	r2, [pc, #100]	; (8009e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d004      	beq.n	8009dd4 <HAL_TIM_Base_Start_IT+0x80>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a18      	ldr	r2, [pc, #96]	; (8009e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d111      	bne.n	8009df8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b06      	cmp	r3, #6
 8009de4:	d010      	beq.n	8009e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f042 0201 	orr.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df6:	e007      	b.n	8009e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f042 0201 	orr.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40000400 	.word	0x40000400
 8009e20:	40000800 	.word	0x40000800
 8009e24:	40000c00 	.word	0x40000c00
 8009e28:	40010400 	.word	0x40010400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40001800 	.word	0x40001800

08009e34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e041      	b.n	8009eca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f839 	bl	8009ed2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f000 fcee 	bl	800a854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <HAL_TIM_PWM_Start+0x24>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	bf14      	ite	ne
 8009f04:	2301      	movne	r3, #1
 8009f06:	2300      	moveq	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	e022      	b.n	8009f52 <HAL_TIM_PWM_Start+0x6a>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d109      	bne.n	8009f26 <HAL_TIM_PWM_Start+0x3e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	bf14      	ite	ne
 8009f1e:	2301      	movne	r3, #1
 8009f20:	2300      	moveq	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	e015      	b.n	8009f52 <HAL_TIM_PWM_Start+0x6a>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d109      	bne.n	8009f40 <HAL_TIM_PWM_Start+0x58>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	bf14      	ite	ne
 8009f38:	2301      	movne	r3, #1
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e008      	b.n	8009f52 <HAL_TIM_PWM_Start+0x6a>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	bf14      	ite	ne
 8009f4c:	2301      	movne	r3, #1
 8009f4e:	2300      	moveq	r3, #0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e07c      	b.n	800a054 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <HAL_TIM_PWM_Start+0x82>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f68:	e013      	b.n	8009f92 <HAL_TIM_PWM_Start+0xaa>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d104      	bne.n	8009f7a <HAL_TIM_PWM_Start+0x92>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f78:	e00b      	b.n	8009f92 <HAL_TIM_PWM_Start+0xaa>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d104      	bne.n	8009f8a <HAL_TIM_PWM_Start+0xa2>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f88:	e003      	b.n	8009f92 <HAL_TIM_PWM_Start+0xaa>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2201      	movs	r2, #1
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 ff44 	bl	800ae28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a2d      	ldr	r2, [pc, #180]	; (800a05c <HAL_TIM_PWM_Start+0x174>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0xcc>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a2c      	ldr	r2, [pc, #176]	; (800a060 <HAL_TIM_PWM_Start+0x178>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIM_PWM_Start+0xd0>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <HAL_TIM_PWM_Start+0xd2>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a22      	ldr	r2, [pc, #136]	; (800a05c <HAL_TIM_PWM_Start+0x174>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d022      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe0:	d01d      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a1f      	ldr	r2, [pc, #124]	; (800a064 <HAL_TIM_PWM_Start+0x17c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d018      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a1d      	ldr	r2, [pc, #116]	; (800a068 <HAL_TIM_PWM_Start+0x180>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d013      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a1c      	ldr	r2, [pc, #112]	; (800a06c <HAL_TIM_PWM_Start+0x184>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00e      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a16      	ldr	r2, [pc, #88]	; (800a060 <HAL_TIM_PWM_Start+0x178>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d009      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a18      	ldr	r2, [pc, #96]	; (800a070 <HAL_TIM_PWM_Start+0x188>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d004      	beq.n	800a01e <HAL_TIM_PWM_Start+0x136>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a16      	ldr	r2, [pc, #88]	; (800a074 <HAL_TIM_PWM_Start+0x18c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d111      	bne.n	800a042 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b06      	cmp	r3, #6
 800a02e:	d010      	beq.n	800a052 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0201 	orr.w	r2, r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a040:	e007      	b.n	800a052 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0201 	orr.w	r2, r2, #1
 800a050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40010000 	.word	0x40010000
 800a060:	40010400 	.word	0x40010400
 800a064:	40000400 	.word	0x40000400
 800a068:	40000800 	.word	0x40000800
 800a06c:	40000c00 	.word	0x40000c00
 800a070:	40014000 	.word	0x40014000
 800a074:	40001800 	.word	0x40001800

0800a078 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e097      	b.n	800a1bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7fc f9f7 	bl	8006494 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0bc:	f023 0307 	bic.w	r3, r3, #7
 800a0c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f000 fbc1 	bl	800a854 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0fa:	f023 0303 	bic.w	r3, r3, #3
 800a0fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	4313      	orrs	r3, r2
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a118:	f023 030c 	bic.w	r3, r3, #12
 800a11c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	4313      	orrs	r3, r2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	011a      	lsls	r2, r3, #4
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	031b      	lsls	r3, r3, #12
 800a148:	4313      	orrs	r3, r2
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a156:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a15e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	4313      	orrs	r3, r2
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d110      	bne.n	800a216 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d102      	bne.n	800a200 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1fa:	7b7b      	ldrb	r3, [r7, #13]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d001      	beq.n	800a204 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e069      	b.n	800a2d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a214:	e031      	b.n	800a27a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d110      	bne.n	800a23e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d102      	bne.n	800a228 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a222:	7b3b      	ldrb	r3, [r7, #12]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d001      	beq.n	800a22c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e055      	b.n	800a2d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a23c:	e01d      	b.n	800a27a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d108      	bne.n	800a256 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d105      	bne.n	800a256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a24a:	7b7b      	ldrb	r3, [r7, #13]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d102      	bne.n	800a256 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a250:	7b3b      	ldrb	r3, [r7, #12]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d001      	beq.n	800a25a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e03e      	b.n	800a2d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2202      	movs	r2, #2
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2202      	movs	r2, #2
 800a266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <HAL_TIM_Encoder_Start+0xc4>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d008      	beq.n	800a298 <HAL_TIM_Encoder_Start+0xd4>
 800a286:	e00f      	b.n	800a2a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2201      	movs	r2, #1
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fdc9 	bl	800ae28 <TIM_CCxChannelCmd>
      break;
 800a296:	e016      	b.n	800a2c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2201      	movs	r2, #1
 800a29e:	2104      	movs	r1, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fdc1 	bl	800ae28 <TIM_CCxChannelCmd>
      break;
 800a2a6:	e00e      	b.n	800a2c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fdb9 	bl	800ae28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	2104      	movs	r1, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fdb2 	bl	800ae28 <TIM_CCxChannelCmd>
      break;
 800a2c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0201 	orr.w	r2, r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d122      	bne.n	800a33c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b02      	cmp	r3, #2
 800a302:	d11b      	bne.n	800a33c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f06f 0202 	mvn.w	r2, #2
 800a30c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa77 	bl	800a816 <HAL_TIM_IC_CaptureCallback>
 800a328:	e005      	b.n	800a336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fa69 	bl	800a802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fa7a 	bl	800a82a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b04      	cmp	r3, #4
 800a348:	d122      	bne.n	800a390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b04      	cmp	r3, #4
 800a356:	d11b      	bne.n	800a390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0204 	mvn.w	r2, #4
 800a360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2202      	movs	r2, #2
 800a366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa4d 	bl	800a816 <HAL_TIM_IC_CaptureCallback>
 800a37c:	e005      	b.n	800a38a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa3f 	bl	800a802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa50 	bl	800a82a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	f003 0308 	and.w	r3, r3, #8
 800a39a:	2b08      	cmp	r3, #8
 800a39c:	d122      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d11b      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f06f 0208 	mvn.w	r2, #8
 800a3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f003 0303 	and.w	r3, r3, #3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa23 	bl	800a816 <HAL_TIM_IC_CaptureCallback>
 800a3d0:	e005      	b.n	800a3de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa15 	bl	800a802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa26 	bl	800a82a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b10      	cmp	r3, #16
 800a3f0:	d122      	bne.n	800a438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f003 0310 	and.w	r3, r3, #16
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d11b      	bne.n	800a438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f06f 0210 	mvn.w	r2, #16
 800a408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2208      	movs	r2, #8
 800a40e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f9f9 	bl	800a816 <HAL_TIM_IC_CaptureCallback>
 800a424:	e005      	b.n	800a432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f9eb 	bl	800a802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f9fc 	bl	800a82a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b01      	cmp	r3, #1
 800a444:	d10e      	bne.n	800a464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b01      	cmp	r3, #1
 800a452:	d107      	bne.n	800a464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f06f 0201 	mvn.w	r2, #1
 800a45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7fb ff38 	bl	80062d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46e:	2b80      	cmp	r3, #128	; 0x80
 800a470:	d10e      	bne.n	800a490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a47c:	2b80      	cmp	r3, #128	; 0x80
 800a47e:	d107      	bne.n	800a490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fd78 	bl	800af80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49a:	2b40      	cmp	r3, #64	; 0x40
 800a49c:	d10e      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a8:	2b40      	cmp	r3, #64	; 0x40
 800a4aa:	d107      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9c1 	bl	800a83e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d10e      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b20      	cmp	r3, #32
 800a4d6:	d107      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f06f 0220 	mvn.w	r2, #32
 800a4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fd42 	bl	800af6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a506:	2b01      	cmp	r3, #1
 800a508:	d101      	bne.n	800a50e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e0ae      	b.n	800a66c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	f200 809f 	bhi.w	800a65c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a51e:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a559 	.word	0x0800a559
 800a528:	0800a65d 	.word	0x0800a65d
 800a52c:	0800a65d 	.word	0x0800a65d
 800a530:	0800a65d 	.word	0x0800a65d
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a65d 	.word	0x0800a65d
 800a53c:	0800a65d 	.word	0x0800a65d
 800a540:	0800a65d 	.word	0x0800a65d
 800a544:	0800a5db 	.word	0x0800a5db
 800a548:	0800a65d 	.word	0x0800a65d
 800a54c:	0800a65d 	.word	0x0800a65d
 800a550:	0800a65d 	.word	0x0800a65d
 800a554:	0800a61b 	.word	0x0800a61b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fa18 	bl	800a994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0208 	orr.w	r2, r2, #8
 800a572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0204 	bic.w	r2, r2, #4
 800a582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6999      	ldr	r1, [r3, #24]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	691a      	ldr	r2, [r3, #16]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	619a      	str	r2, [r3, #24]
      break;
 800a596:	e064      	b.n	800a662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fa68 	bl	800aa74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699a      	ldr	r2, [r3, #24]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6999      	ldr	r1, [r3, #24]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	021a      	lsls	r2, r3, #8
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	619a      	str	r2, [r3, #24]
      break;
 800a5d8:	e043      	b.n	800a662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fabd 	bl	800ab60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69da      	ldr	r2, [r3, #28]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0208 	orr.w	r2, r2, #8
 800a5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69da      	ldr	r2, [r3, #28]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0204 	bic.w	r2, r2, #4
 800a604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	69d9      	ldr	r1, [r3, #28]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	61da      	str	r2, [r3, #28]
      break;
 800a618:	e023      	b.n	800a662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	4618      	mov	r0, r3
 800a622:	f000 fb11 	bl	800ac48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69da      	ldr	r2, [r3, #28]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	69da      	ldr	r2, [r3, #28]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69d9      	ldr	r1, [r3, #28]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	021a      	lsls	r2, r3, #8
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	61da      	str	r2, [r3, #28]
      break;
 800a65a:	e002      	b.n	800a662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
      break;
 800a660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_TIM_ConfigClockSource+0x1c>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e0b4      	b.n	800a7fa <HAL_TIM_ConfigClockSource+0x186>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c8:	d03e      	beq.n	800a748 <HAL_TIM_ConfigClockSource+0xd4>
 800a6ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ce:	f200 8087 	bhi.w	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d6:	f000 8086 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x172>
 800a6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6de:	d87f      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b70      	cmp	r3, #112	; 0x70
 800a6e2:	d01a      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0xa6>
 800a6e4:	2b70      	cmp	r3, #112	; 0x70
 800a6e6:	d87b      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b60      	cmp	r3, #96	; 0x60
 800a6ea:	d050      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x11a>
 800a6ec:	2b60      	cmp	r3, #96	; 0x60
 800a6ee:	d877      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f0:	2b50      	cmp	r3, #80	; 0x50
 800a6f2:	d03c      	beq.n	800a76e <HAL_TIM_ConfigClockSource+0xfa>
 800a6f4:	2b50      	cmp	r3, #80	; 0x50
 800a6f6:	d873      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	d058      	beq.n	800a7ae <HAL_TIM_ConfigClockSource+0x13a>
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d86f      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a700:	2b30      	cmp	r3, #48	; 0x30
 800a702:	d064      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x15a>
 800a704:	2b30      	cmp	r3, #48	; 0x30
 800a706:	d86b      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d060      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x15a>
 800a70c:	2b20      	cmp	r3, #32
 800a70e:	d867      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d05c      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x15a>
 800a714:	2b10      	cmp	r3, #16
 800a716:	d05a      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x15a>
 800a718:	e062      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	6899      	ldr	r1, [r3, #8]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f000 fb5d 	bl	800ade8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a73c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	609a      	str	r2, [r3, #8]
      break;
 800a746:	e04f      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	6899      	ldr	r1, [r3, #8]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f000 fb46 	bl	800ade8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a76a:	609a      	str	r2, [r3, #8]
      break;
 800a76c:	e03c      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	6859      	ldr	r1, [r3, #4]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f000 faba 	bl	800acf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2150      	movs	r1, #80	; 0x50
 800a786:	4618      	mov	r0, r3
 800a788:	f000 fb13 	bl	800adb2 <TIM_ITRx_SetConfig>
      break;
 800a78c:	e02c      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6859      	ldr	r1, [r3, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f000 fad9 	bl	800ad52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2160      	movs	r1, #96	; 0x60
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fb03 	bl	800adb2 <TIM_ITRx_SetConfig>
      break;
 800a7ac:	e01c      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	6859      	ldr	r1, [r3, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f000 fa9a 	bl	800acf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2140      	movs	r1, #64	; 0x40
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 faf3 	bl	800adb2 <TIM_ITRx_SetConfig>
      break;
 800a7cc:	e00c      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f000 faea 	bl	800adb2 <TIM_ITRx_SetConfig>
      break;
 800a7de:	e003      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e4:	e000      	b.n	800a7e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a40      	ldr	r2, [pc, #256]	; (800a968 <TIM_Base_SetConfig+0x114>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d00f      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3d      	ldr	r2, [pc, #244]	; (800a96c <TIM_Base_SetConfig+0x118>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00b      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a3c      	ldr	r2, [pc, #240]	; (800a970 <TIM_Base_SetConfig+0x11c>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d007      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a3b      	ldr	r2, [pc, #236]	; (800a974 <TIM_Base_SetConfig+0x120>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d003      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a3a      	ldr	r2, [pc, #232]	; (800a978 <TIM_Base_SetConfig+0x124>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d108      	bne.n	800a8a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2f      	ldr	r2, [pc, #188]	; (800a968 <TIM_Base_SetConfig+0x114>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d02b      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b4:	d027      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2c      	ldr	r2, [pc, #176]	; (800a96c <TIM_Base_SetConfig+0x118>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d023      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2b      	ldr	r2, [pc, #172]	; (800a970 <TIM_Base_SetConfig+0x11c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d01f      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2a      	ldr	r2, [pc, #168]	; (800a974 <TIM_Base_SetConfig+0x120>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d01b      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a29      	ldr	r2, [pc, #164]	; (800a978 <TIM_Base_SetConfig+0x124>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d017      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a28      	ldr	r2, [pc, #160]	; (800a97c <TIM_Base_SetConfig+0x128>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d013      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a27      	ldr	r2, [pc, #156]	; (800a980 <TIM_Base_SetConfig+0x12c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d00f      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a26      	ldr	r2, [pc, #152]	; (800a984 <TIM_Base_SetConfig+0x130>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d00b      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a25      	ldr	r2, [pc, #148]	; (800a988 <TIM_Base_SetConfig+0x134>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d007      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a24      	ldr	r2, [pc, #144]	; (800a98c <TIM_Base_SetConfig+0x138>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d003      	beq.n	800a906 <TIM_Base_SetConfig+0xb2>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a23      	ldr	r2, [pc, #140]	; (800a990 <TIM_Base_SetConfig+0x13c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d108      	bne.n	800a918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a90c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a0a      	ldr	r2, [pc, #40]	; (800a968 <TIM_Base_SetConfig+0x114>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d003      	beq.n	800a94c <TIM_Base_SetConfig+0xf8>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a0c      	ldr	r2, [pc, #48]	; (800a978 <TIM_Base_SetConfig+0x124>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d103      	bne.n	800a954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	615a      	str	r2, [r3, #20]
}
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40010000 	.word	0x40010000
 800a96c:	40000400 	.word	0x40000400
 800a970:	40000800 	.word	0x40000800
 800a974:	40000c00 	.word	0x40000c00
 800a978:	40010400 	.word	0x40010400
 800a97c:	40014000 	.word	0x40014000
 800a980:	40014400 	.word	0x40014400
 800a984:	40014800 	.word	0x40014800
 800a988:	40001800 	.word	0x40001800
 800a98c:	40001c00 	.word	0x40001c00
 800a990:	40002000 	.word	0x40002000

0800a994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0201 	bic.w	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0303 	bic.w	r3, r3, #3
 800a9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f023 0302 	bic.w	r3, r3, #2
 800a9dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a20      	ldr	r2, [pc, #128]	; (800aa6c <TIM_OC1_SetConfig+0xd8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d003      	beq.n	800a9f8 <TIM_OC1_SetConfig+0x64>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <TIM_OC1_SetConfig+0xdc>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d10c      	bne.n	800aa12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f023 0308 	bic.w	r3, r3, #8
 800a9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f023 0304 	bic.w	r3, r3, #4
 800aa10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a15      	ldr	r2, [pc, #84]	; (800aa6c <TIM_OC1_SetConfig+0xd8>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d003      	beq.n	800aa22 <TIM_OC1_SetConfig+0x8e>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a14      	ldr	r2, [pc, #80]	; (800aa70 <TIM_OC1_SetConfig+0xdc>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d111      	bne.n	800aa46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	621a      	str	r2, [r3, #32]
}
 800aa60:	bf00      	nop
 800aa62:	371c      	adds	r7, #28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	40010400 	.word	0x40010400

0800aa74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f023 0210 	bic.w	r2, r3, #16
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f023 0320 	bic.w	r3, r3, #32
 800aabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a22      	ldr	r2, [pc, #136]	; (800ab58 <TIM_OC2_SetConfig+0xe4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC2_SetConfig+0x68>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a21      	ldr	r2, [pc, #132]	; (800ab5c <TIM_OC2_SetConfig+0xe8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10d      	bne.n	800aaf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a17      	ldr	r2, [pc, #92]	; (800ab58 <TIM_OC2_SetConfig+0xe4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d003      	beq.n	800ab08 <TIM_OC2_SetConfig+0x94>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a16      	ldr	r2, [pc, #88]	; (800ab5c <TIM_OC2_SetConfig+0xe8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d113      	bne.n	800ab30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	40010000 	.word	0x40010000
 800ab5c:	40010400 	.word	0x40010400

0800ab60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0303 	bic.w	r3, r3, #3
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a21      	ldr	r2, [pc, #132]	; (800ac40 <TIM_OC3_SetConfig+0xe0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d003      	beq.n	800abc6 <TIM_OC3_SetConfig+0x66>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a20      	ldr	r2, [pc, #128]	; (800ac44 <TIM_OC3_SetConfig+0xe4>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d10d      	bne.n	800abe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a16      	ldr	r2, [pc, #88]	; (800ac40 <TIM_OC3_SetConfig+0xe0>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d003      	beq.n	800abf2 <TIM_OC3_SetConfig+0x92>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <TIM_OC3_SetConfig+0xe4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d113      	bne.n	800ac1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	621a      	str	r2, [r3, #32]
}
 800ac34:	bf00      	nop
 800ac36:	371c      	adds	r7, #28
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	40010000 	.word	0x40010000
 800ac44:	40010400 	.word	0x40010400

0800ac48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	031b      	lsls	r3, r3, #12
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a12      	ldr	r2, [pc, #72]	; (800acec <TIM_OC4_SetConfig+0xa4>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC4_SetConfig+0x68>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a11      	ldr	r2, [pc, #68]	; (800acf0 <TIM_OC4_SetConfig+0xa8>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d109      	bne.n	800acc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	019b      	lsls	r3, r3, #6
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	621a      	str	r2, [r3, #32]
}
 800acde:	bf00      	nop
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	40010000 	.word	0x40010000
 800acf0:	40010400 	.word	0x40010400

0800acf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	f023 0201 	bic.w	r2, r3, #1
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f023 030a 	bic.w	r3, r3, #10
 800ad30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	621a      	str	r2, [r3, #32]
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b087      	sub	sp, #28
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	f023 0210 	bic.w	r2, r3, #16
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	031b      	lsls	r3, r3, #12
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	621a      	str	r2, [r3, #32]
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4313      	orrs	r3, r2
 800add0:	f043 0307 	orr.w	r3, r3, #7
 800add4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	609a      	str	r2, [r3, #8]
}
 800addc:	bf00      	nop
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	021a      	lsls	r2, r3, #8
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	609a      	str	r2, [r3, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	371c      	adds	r7, #28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a1a      	ldr	r2, [r3, #32]
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	401a      	ands	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6a1a      	ldr	r2, [r3, #32]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f003 031f 	and.w	r3, r3, #31
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae60:	431a      	orrs	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
}
 800ae66:	bf00      	nop
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
	...

0800ae74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e05a      	b.n	800af42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a21      	ldr	r2, [pc, #132]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d022      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aed8:	d01d      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a1d      	ldr	r2, [pc, #116]	; (800af54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d018      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a1b      	ldr	r2, [pc, #108]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d013      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1a      	ldr	r2, [pc, #104]	; (800af5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00e      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a18      	ldr	r2, [pc, #96]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d009      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a17      	ldr	r2, [pc, #92]	; (800af64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d004      	beq.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a15      	ldr	r2, [pc, #84]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d10c      	bne.n	800af30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	4313      	orrs	r3, r2
 800af26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	40010000 	.word	0x40010000
 800af54:	40000400 	.word	0x40000400
 800af58:	40000800 	.word	0x40000800
 800af5c:	40000c00 	.word	0x40000c00
 800af60:	40010400 	.word	0x40010400
 800af64:	40014000 	.word	0x40014000
 800af68:	40001800 	.word	0x40001800

0800af6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e03f      	b.n	800b026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fb fbbe 	bl	800673c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2224      	movs	r2, #36	; 0x24
 800afc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f001 f831 	bl	800c040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	695a      	ldr	r2, [r3, #20]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800affc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b00c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2220      	movs	r2, #32
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2220      	movs	r2, #32
 800b020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b08a      	sub	sp, #40	; 0x28
 800b032:	af02      	add	r7, sp, #8
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	603b      	str	r3, [r7, #0]
 800b03a:	4613      	mov	r3, r2
 800b03c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d17c      	bne.n	800b148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <HAL_UART_Transmit+0x2c>
 800b054:	88fb      	ldrh	r3, [r7, #6]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e075      	b.n	800b14a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b064:	2b01      	cmp	r3, #1
 800b066:	d101      	bne.n	800b06c <HAL_UART_Transmit+0x3e>
 800b068:	2302      	movs	r3, #2
 800b06a:	e06e      	b.n	800b14a <HAL_UART_Transmit+0x11c>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2221      	movs	r2, #33	; 0x21
 800b07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b082:	f7fb fead 	bl	8006de0 <HAL_GetTick>
 800b086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	88fa      	ldrh	r2, [r7, #6]
 800b08c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	88fa      	ldrh	r2, [r7, #6]
 800b092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b09c:	d108      	bne.n	800b0b0 <HAL_UART_Transmit+0x82>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d104      	bne.n	800b0b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	61bb      	str	r3, [r7, #24]
 800b0ae:	e003      	b.n	800b0b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b0c0:	e02a      	b.n	800b118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2180      	movs	r1, #128	; 0x80
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 fcab 	bl	800ba28 <UART_WaitOnFlagUntilTimeout>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e036      	b.n	800b14a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10b      	bne.n	800b0fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	3302      	adds	r3, #2
 800b0f6:	61bb      	str	r3, [r7, #24]
 800b0f8:	e007      	b.n	800b10a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	781a      	ldrb	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	3301      	adds	r3, #1
 800b108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1cf      	bne.n	800b0c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2200      	movs	r2, #0
 800b12a:	2140      	movs	r1, #64	; 0x40
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 fc7b 	bl	800ba28 <UART_WaitOnFlagUntilTimeout>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e006      	b.n	800b14a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2220      	movs	r2, #32
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	e000      	b.n	800b14a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b148:	2302      	movs	r3, #2
  }
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b152:	b480      	push	{r7}
 800b154:	b085      	sub	sp, #20
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d130      	bne.n	800b1ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_UART_Transmit_IT+0x26>
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e029      	b.n	800b1d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b182:	2b01      	cmp	r3, #1
 800b184:	d101      	bne.n	800b18a <HAL_UART_Transmit_IT+0x38>
 800b186:	2302      	movs	r3, #2
 800b188:	e022      	b.n	800b1d0 <HAL_UART_Transmit_IT+0x7e>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	88fa      	ldrh	r2, [r7, #6]
 800b19c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	88fa      	ldrh	r2, [r7, #6]
 800b1a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2221      	movs	r2, #33	; 0x21
 800b1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e000      	b.n	800b1d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b1ce:	2302      	movs	r3, #2
  }
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d11d      	bne.n	800b232 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <HAL_UART_Receive_IT+0x26>
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e016      	b.n	800b234 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d101      	bne.n	800b214 <HAL_UART_Receive_IT+0x38>
 800b210:	2302      	movs	r3, #2
 800b212:	e00f      	b.n	800b234 <HAL_UART_Receive_IT+0x58>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	461a      	mov	r2, r3
 800b226:	68b9      	ldr	r1, [r7, #8]
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 fc6b 	bl	800bb04 <UART_Start_Receive_IT>
 800b22e:	4603      	mov	r3, r0
 800b230:	e000      	b.n	800b234 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b232:	2302      	movs	r3, #2
  }
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08c      	sub	sp, #48	; 0x30
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b20      	cmp	r3, #32
 800b254:	d152      	bne.n	800b2fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b25c:	88fb      	ldrh	r3, [r7, #6]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e04b      	b.n	800b2fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800b270:	2302      	movs	r3, #2
 800b272:	e044      	b.n	800b2fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2201      	movs	r2, #1
 800b280:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	461a      	mov	r2, r3
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 fc79 	bl	800bb80 <UART_Start_Receive_DMA>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d12c      	bne.n	800b2f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d125      	bne.n	800b2f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	613b      	str	r3, [r7, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	330c      	adds	r3, #12
 800b2c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	e853 3f00 	ldrex	r3, [r3]
 800b2c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f043 0310 	orr.w	r3, r3, #16
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	330c      	adds	r3, #12
 800b2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2da:	627a      	str	r2, [r7, #36]	; 0x24
 800b2dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	6a39      	ldr	r1, [r7, #32]
 800b2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e5      	bne.n	800b2ba <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800b2ee:	e002      	b.n	800b2f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2fa:	e000      	b.n	800b2fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b2fc:	2302      	movs	r3, #2
  }
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
	...

0800b308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b0ba      	sub	sp, #232	; 0xe8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b32e:	2300      	movs	r3, #0
 800b330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b334:	2300      	movs	r3, #0
 800b336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10f      	bne.n	800b36e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b00      	cmp	r3, #0
 800b358:	d009      	beq.n	800b36e <HAL_UART_IRQHandler+0x66>
 800b35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fdaf 	bl	800beca <UART_Receive_IT>
      return;
 800b36c:	e256      	b.n	800b81c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b36e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 80de 	beq.w	800b534 <HAL_UART_IRQHandler+0x22c>
 800b378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b388:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 80d1 	beq.w	800b534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00b      	beq.n	800b3b6 <HAL_UART_IRQHandler+0xae>
 800b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	f043 0201 	orr.w	r2, r3, #1
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00b      	beq.n	800b3da <HAL_UART_IRQHandler+0xd2>
 800b3c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d005      	beq.n	800b3da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	f043 0202 	orr.w	r2, r3, #2
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00b      	beq.n	800b3fe <HAL_UART_IRQHandler+0xf6>
 800b3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	f043 0204 	orr.w	r2, r3, #4
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b402:	f003 0308 	and.w	r3, r3, #8
 800b406:	2b00      	cmp	r3, #0
 800b408:	d011      	beq.n	800b42e <HAL_UART_IRQHandler+0x126>
 800b40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b00      	cmp	r3, #0
 800b414:	d105      	bne.n	800b422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	f043 0208 	orr.w	r2, r3, #8
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 81ed 	beq.w	800b812 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0320 	and.w	r3, r3, #32
 800b440:	2b00      	cmp	r3, #0
 800b442:	d008      	beq.n	800b456 <HAL_UART_IRQHandler+0x14e>
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fd3a 	bl	800beca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	bf0c      	ite	eq
 800b464:	2301      	moveq	r3, #1
 800b466:	2300      	movne	r3, #0
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	f003 0308 	and.w	r3, r3, #8
 800b476:	2b00      	cmp	r3, #0
 800b478:	d103      	bne.n	800b482 <HAL_UART_IRQHandler+0x17a>
 800b47a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d04f      	beq.n	800b522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fc42 	bl	800bd0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	d141      	bne.n	800b51a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3314      	adds	r3, #20
 800b49c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4a4:	e853 3f00 	ldrex	r3, [r3]
 800b4a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3314      	adds	r3, #20
 800b4be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b4da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1d9      	bne.n	800b496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d013      	beq.n	800b512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ee:	4a7d      	ldr	r2, [pc, #500]	; (800b6e4 <HAL_UART_IRQHandler+0x3dc>)
 800b4f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fd fab8 	bl	8008a6c <HAL_DMA_Abort_IT>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d016      	beq.n	800b530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b510:	e00e      	b.n	800b530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7f9 fe00 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b518:	e00a      	b.n	800b530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7f9 fdfc 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b520:	e006      	b.n	800b530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f9 fdf8 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b52e:	e170      	b.n	800b812 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b530:	bf00      	nop
    return;
 800b532:	e16e      	b.n	800b812 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b538:	2b01      	cmp	r3, #1
 800b53a:	f040 814a 	bne.w	800b7d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8143 	beq.w	800b7d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b550:	f003 0310 	and.w	r3, r3, #16
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 813c 	beq.w	800b7d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b55a:	2300      	movs	r3, #0
 800b55c:	60bb      	str	r3, [r7, #8]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60bb      	str	r3, [r7, #8]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	60bb      	str	r3, [r7, #8]
 800b56e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57a:	2b40      	cmp	r3, #64	; 0x40
 800b57c:	f040 80b4 	bne.w	800b6e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b58c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8140 	beq.w	800b816 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b59a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	f080 8139 	bcs.w	800b816 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b6:	f000 8088 	beq.w	800b6ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	330c      	adds	r3, #12
 800b5c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b5d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	330c      	adds	r3, #12
 800b5e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b5e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b5f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b5fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1d9      	bne.n	800b5ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3314      	adds	r3, #20
 800b60c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b618:	f023 0301 	bic.w	r3, r3, #1
 800b61c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3314      	adds	r3, #20
 800b626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b62a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b62e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e1      	bne.n	800b606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3314      	adds	r3, #20
 800b648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3314      	adds	r3, #20
 800b662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b666:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b66c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e3      	bne.n	800b642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b69a:	f023 0310 	bic.w	r3, r3, #16
 800b69e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b6ac:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e3      	bne.n	800b688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fd f961 	bl	800898c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7f9 fc8e 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6e0:	e099      	b.n	800b816 <HAL_UART_IRQHandler+0x50e>
 800b6e2:	bf00      	nop
 800b6e4:	0800bdd3 	.word	0x0800bdd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 808b 	beq.w	800b81a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 8086 	beq.w	800b81a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	330c      	adds	r3, #12
 800b714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	330c      	adds	r3, #12
 800b72e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b732:	647a      	str	r2, [r7, #68]	; 0x44
 800b734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e3      	bne.n	800b70e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3314      	adds	r3, #20
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	e853 3f00 	ldrex	r3, [r3]
 800b754:	623b      	str	r3, [r7, #32]
   return(result);
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	f023 0301 	bic.w	r3, r3, #1
 800b75c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3314      	adds	r3, #20
 800b766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b76a:	633a      	str	r2, [r7, #48]	; 0x30
 800b76c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e3      	bne.n	800b746 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2220      	movs	r2, #32
 800b782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	330c      	adds	r3, #12
 800b792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f023 0310 	bic.w	r3, r3, #16
 800b7a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	330c      	adds	r3, #12
 800b7ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b7b0:	61fa      	str	r2, [r7, #28]
 800b7b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	69b9      	ldr	r1, [r7, #24]
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e3      	bne.n	800b78c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7f9 fc16 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b7d0:	e023      	b.n	800b81a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x4ea>
 800b7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fb05 	bl	800bdfa <UART_Transmit_IT>
    return;
 800b7f0:	e014      	b.n	800b81c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00e      	beq.n	800b81c <HAL_UART_IRQHandler+0x514>
 800b7fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b806:	2b00      	cmp	r3, #0
 800b808:	d008      	beq.n	800b81c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fb45 	bl	800be9a <UART_EndTransmit_IT>
    return;
 800b810:	e004      	b.n	800b81c <HAL_UART_IRQHandler+0x514>
    return;
 800b812:	bf00      	nop
 800b814:	e002      	b.n	800b81c <HAL_UART_IRQHandler+0x514>
      return;
 800b816:	bf00      	nop
 800b818:	e000      	b.n	800b81c <HAL_UART_IRQHandler+0x514>
      return;
 800b81a:	bf00      	nop
  }
}
 800b81c:	37e8      	adds	r7, #232	; 0xe8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop

0800b824 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b09c      	sub	sp, #112	; 0x70
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	2b00      	cmp	r3, #0
 800b852:	d172      	bne.n	800b93a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b856:	2200      	movs	r2, #0
 800b858:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	330c      	adds	r3, #12
 800b860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b870:	66bb      	str	r3, [r7, #104]	; 0x68
 800b872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	330c      	adds	r3, #12
 800b878:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b87a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b87c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e5      	bne.n	800b85a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3314      	adds	r3, #20
 800b894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	667b      	str	r3, [r7, #100]	; 0x64
 800b8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3314      	adds	r3, #20
 800b8ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b8ae:	647a      	str	r2, [r7, #68]	; 0x44
 800b8b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e5      	bne.n	800b88e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d8:	663b      	str	r3, [r7, #96]	; 0x60
 800b8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3314      	adds	r3, #20
 800b8e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8e2:	633a      	str	r2, [r7, #48]	; 0x30
 800b8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e5      	bne.n	800b8c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	2b01      	cmp	r3, #1
 800b904:	d119      	bne.n	800b93a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	330c      	adds	r3, #12
 800b90c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	60fb      	str	r3, [r7, #12]
   return(result);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f023 0310 	bic.w	r3, r3, #16
 800b91c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	330c      	adds	r3, #12
 800b924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b926:	61fa      	str	r2, [r7, #28]
 800b928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92a:	69b9      	ldr	r1, [r7, #24]
 800b92c:	69fa      	ldr	r2, [r7, #28]
 800b92e:	e841 2300 	strex	r3, r2, [r1]
 800b932:	617b      	str	r3, [r7, #20]
   return(result);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1e5      	bne.n	800b906 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d106      	bne.n	800b950 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b946:	4619      	mov	r1, r3
 800b948:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b94a:	f7f9 fb57 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b94e:	e002      	b.n	800b956 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b950:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b952:	f7f9 fb7b 	bl	800504c <HAL_UART_RxCpltCallback>
}
 800b956:	bf00      	nop
 800b958:	3770      	adds	r7, #112	; 0x70
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b970:	2b01      	cmp	r3, #1
 800b972:	d108      	bne.n	800b986 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4619      	mov	r1, r3
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7f9 fb3c 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b984:	e002      	b.n	800b98c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff ff4c 	bl	800b824 <HAL_UART_RxHalfCpltCallback>
}
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	bf0c      	ite	eq
 800b9b4:	2301      	moveq	r3, #1
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b21      	cmp	r3, #33	; 0x21
 800b9c6:	d108      	bne.n	800b9da <UART_DMAError+0x46>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d005      	beq.n	800b9da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b9d4:	68b8      	ldr	r0, [r7, #8]
 800b9d6:	f000 f971 	bl	800bcbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e4:	2b40      	cmp	r3, #64	; 0x40
 800b9e6:	bf0c      	ite	eq
 800b9e8:	2301      	moveq	r3, #1
 800b9ea:	2300      	movne	r3, #0
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b22      	cmp	r3, #34	; 0x22
 800b9fa:	d108      	bne.n	800ba0e <UART_DMAError+0x7a>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d005      	beq.n	800ba0e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2200      	movs	r2, #0
 800ba06:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ba08:	68b8      	ldr	r0, [r7, #8]
 800ba0a:	f000 f97f 	bl	800bd0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba12:	f043 0210 	orr.w	r2, r3, #16
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba1a:	68b8      	ldr	r0, [r7, #8]
 800ba1c:	f7f9 fb7c 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b090      	sub	sp, #64	; 0x40
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	4613      	mov	r3, r2
 800ba36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba38:	e050      	b.n	800badc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba40:	d04c      	beq.n	800badc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d007      	beq.n	800ba58 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba48:	f7fb f9ca 	bl	8006de0 <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d241      	bcs.n	800badc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	330c      	adds	r3, #12
 800ba5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	e853 3f00 	ldrex	r3, [r3]
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	330c      	adds	r3, #12
 800ba76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba78:	637a      	str	r2, [r7, #52]	; 0x34
 800ba7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba80:	e841 2300 	strex	r3, r2, [r1]
 800ba84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1e5      	bne.n	800ba58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3314      	adds	r3, #20
 800ba92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	e853 3f00 	ldrex	r3, [r3]
 800ba9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f023 0301 	bic.w	r3, r3, #1
 800baa2:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3314      	adds	r3, #20
 800baaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baac:	623a      	str	r2, [r7, #32]
 800baae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	69f9      	ldr	r1, [r7, #28]
 800bab2:	6a3a      	ldr	r2, [r7, #32]
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	61bb      	str	r3, [r7, #24]
   return(result);
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e5      	bne.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2220      	movs	r2, #32
 800bacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bad8:	2303      	movs	r3, #3
 800bada:	e00f      	b.n	800bafc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	4013      	ands	r3, r2
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	bf0c      	ite	eq
 800baec:	2301      	moveq	r3, #1
 800baee:	2300      	movne	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d09f      	beq.n	800ba3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3740      	adds	r7, #64	; 0x40
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	88fa      	ldrh	r2, [r7, #6]
 800bb1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	88fa      	ldrh	r2, [r7, #6]
 800bb22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2222      	movs	r2, #34	; 0x22
 800bb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d007      	beq.n	800bb52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	695a      	ldr	r2, [r3, #20]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0201 	orr.w	r2, r2, #1
 800bb60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68da      	ldr	r2, [r3, #12]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f042 0220 	orr.w	r2, r2, #32
 800bb70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b098      	sub	sp, #96	; 0x60
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	88fa      	ldrh	r2, [r7, #6]
 800bb98:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2222      	movs	r2, #34	; 0x22
 800bba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	4a40      	ldr	r2, [pc, #256]	; (800bcb0 <UART_Start_Receive_DMA+0x130>)
 800bbae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb4:	4a3f      	ldr	r2, [pc, #252]	; (800bcb4 <UART_Start_Receive_DMA+0x134>)
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	4a3e      	ldr	r2, [pc, #248]	; (800bcb8 <UART_Start_Receive_DMA+0x138>)
 800bbbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	f7fc fe7c 	bl	80088dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d019      	beq.n	800bc3e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc20:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	330c      	adds	r3, #12
 800bc28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bc2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bc30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e5      	bne.n	800bc0a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3314      	adds	r3, #20
 800bc44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	f043 0301 	orr.w	r3, r3, #1
 800bc54:	657b      	str	r3, [r7, #84]	; 0x54
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc5e:	63ba      	str	r2, [r7, #56]	; 0x38
 800bc60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e5      	bne.n	800bc3e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3314      	adds	r3, #20
 800bc78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	617b      	str	r3, [r7, #20]
   return(result);
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc88:	653b      	str	r3, [r7, #80]	; 0x50
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3314      	adds	r3, #20
 800bc90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc92:	627a      	str	r2, [r7, #36]	; 0x24
 800bc94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	6a39      	ldr	r1, [r7, #32]
 800bc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9a:	e841 2300 	strex	r3, r2, [r1]
 800bc9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e5      	bne.n	800bc72 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3760      	adds	r7, #96	; 0x60
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	0800b839 	.word	0x0800b839
 800bcb4:	0800b95f 	.word	0x0800b95f
 800bcb8:	0800b995 	.word	0x0800b995

0800bcbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b089      	sub	sp, #36	; 0x24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	330c      	adds	r3, #12
 800bcca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	e853 3f00 	ldrex	r3, [r3]
 800bcd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bcda:	61fb      	str	r3, [r7, #28]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	330c      	adds	r3, #12
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	61ba      	str	r2, [r7, #24]
 800bce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	6979      	ldr	r1, [r7, #20]
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	613b      	str	r3, [r7, #16]
   return(result);
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e5      	bne.n	800bcc4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bd00:	bf00      	nop
 800bd02:	3724      	adds	r7, #36	; 0x24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b095      	sub	sp, #84	; 0x54
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	330c      	adds	r3, #12
 800bd32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd34:	643a      	str	r2, [r7, #64]	; 0x40
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd3c:	e841 2300 	strex	r3, r2, [r1]
 800bd40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e5      	bne.n	800bd14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	e853 3f00 	ldrex	r3, [r3]
 800bd56:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	f023 0301 	bic.w	r3, r3, #1
 800bd5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3314      	adds	r3, #20
 800bd66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd70:	e841 2300 	strex	r3, r2, [r1]
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e5      	bne.n	800bd48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d119      	bne.n	800bdb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	330c      	adds	r3, #12
 800bd8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f023 0310 	bic.w	r3, r3, #16
 800bd9a:	647b      	str	r3, [r7, #68]	; 0x44
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	330c      	adds	r3, #12
 800bda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bda4:	61ba      	str	r2, [r7, #24]
 800bda6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	6979      	ldr	r1, [r7, #20]
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e5      	bne.n	800bd84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2220      	movs	r2, #32
 800bdbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdc6:	bf00      	nop
 800bdc8:	3754      	adds	r7, #84	; 0x54
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7f9 f993 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b21      	cmp	r3, #33	; 0x21
 800be0c:	d13e      	bne.n	800be8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be16:	d114      	bne.n	800be42 <UART_Transmit_IT+0x48>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d110      	bne.n	800be42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	1c9a      	adds	r2, r3, #2
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	621a      	str	r2, [r3, #32]
 800be40:	e008      	b.n	800be54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	1c59      	adds	r1, r3, #1
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	6211      	str	r1, [r2, #32]
 800be4c:	781a      	ldrb	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be58:	b29b      	uxth	r3, r3
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	4619      	mov	r1, r3
 800be62:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10f      	bne.n	800be88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	e000      	b.n	800be8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
  }
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68da      	ldr	r2, [r3, #12]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7f9 f956 	bl	800516c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b08c      	sub	sp, #48	; 0x30
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b22      	cmp	r3, #34	; 0x22
 800bedc:	f040 80ab 	bne.w	800c036 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee8:	d117      	bne.n	800bf1a <UART_Receive_IT+0x50>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d113      	bne.n	800bf1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	1c9a      	adds	r2, r3, #2
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	629a      	str	r2, [r3, #40]	; 0x28
 800bf18:	e026      	b.n	800bf68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf2c:	d007      	beq.n	800bf3e <UART_Receive_IT+0x74>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10a      	bne.n	800bf4c <UART_Receive_IT+0x82>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d106      	bne.n	800bf4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	e008      	b.n	800bf5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4619      	mov	r1, r3
 800bf76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d15a      	bne.n	800c032 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 0220 	bic.w	r2, r2, #32
 800bf8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695a      	ldr	r2, [r3, #20]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f022 0201 	bic.w	r2, r2, #1
 800bfaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d135      	bne.n	800c028 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	330c      	adds	r3, #12
 800bfc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	e853 3f00 	ldrex	r3, [r3]
 800bfd0:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	f023 0310 	bic.w	r3, r3, #16
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	623a      	str	r2, [r7, #32]
 800bfe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe6:	69f9      	ldr	r1, [r7, #28]
 800bfe8:	6a3a      	ldr	r2, [r7, #32]
 800bfea:	e841 2300 	strex	r3, r2, [r1]
 800bfee:	61bb      	str	r3, [r7, #24]
   return(result);
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1e5      	bne.n	800bfc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0310 	and.w	r3, r3, #16
 800c000:	2b10      	cmp	r3, #16
 800c002:	d10a      	bne.n	800c01a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7f8 ffeb 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
 800c026:	e002      	b.n	800c02e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7f9 f80f 	bl	800504c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	e002      	b.n	800c038 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	e000      	b.n	800c038 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c036:	2302      	movs	r3, #2
  }
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3730      	adds	r7, #48	; 0x30
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c044:	b0c0      	sub	sp, #256	; 0x100
 800c046:	af00      	add	r7, sp, #0
 800c048:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c05c:	68d9      	ldr	r1, [r3, #12]
 800c05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	ea40 0301 	orr.w	r3, r0, r1
 800c068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	431a      	orrs	r2, r3
 800c078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	431a      	orrs	r2, r3
 800c080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	4313      	orrs	r3, r2
 800c088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c098:	f021 010c 	bic.w	r1, r1, #12
 800c09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0a6:	430b      	orrs	r3, r1
 800c0a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ba:	6999      	ldr	r1, [r3, #24]
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	ea40 0301 	orr.w	r3, r0, r1
 800c0c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b8f      	ldr	r3, [pc, #572]	; (800c30c <UART_SetConfig+0x2cc>)
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d005      	beq.n	800c0e0 <UART_SetConfig+0xa0>
 800c0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b8d      	ldr	r3, [pc, #564]	; (800c310 <UART_SetConfig+0x2d0>)
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d104      	bne.n	800c0ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c0e0:	f7fd fda2 	bl	8009c28 <HAL_RCC_GetPCLK2Freq>
 800c0e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c0e8:	e003      	b.n	800c0f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c0ea:	f7fd fd89 	bl	8009c00 <HAL_RCC_GetPCLK1Freq>
 800c0ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0fc:	f040 810c 	bne.w	800c318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c104:	2200      	movs	r2, #0
 800c106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c10a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c10e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	1891      	adds	r1, r2, r2
 800c118:	65b9      	str	r1, [r7, #88]	; 0x58
 800c11a:	415b      	adcs	r3, r3
 800c11c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c11e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c122:	4621      	mov	r1, r4
 800c124:	eb12 0801 	adds.w	r8, r2, r1
 800c128:	4629      	mov	r1, r5
 800c12a:	eb43 0901 	adc.w	r9, r3, r1
 800c12e:	f04f 0200 	mov.w	r2, #0
 800c132:	f04f 0300 	mov.w	r3, #0
 800c136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c13a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c13e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c142:	4690      	mov	r8, r2
 800c144:	4699      	mov	r9, r3
 800c146:	4623      	mov	r3, r4
 800c148:	eb18 0303 	adds.w	r3, r8, r3
 800c14c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c150:	462b      	mov	r3, r5
 800c152:	eb49 0303 	adc.w	r3, r9, r3
 800c156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c16a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c16e:	460b      	mov	r3, r1
 800c170:	18db      	adds	r3, r3, r3
 800c172:	653b      	str	r3, [r7, #80]	; 0x50
 800c174:	4613      	mov	r3, r2
 800c176:	eb42 0303 	adc.w	r3, r2, r3
 800c17a:	657b      	str	r3, [r7, #84]	; 0x54
 800c17c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c184:	f7f4 fd60 	bl	8000c48 <__aeabi_uldivmod>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4b61      	ldr	r3, [pc, #388]	; (800c314 <UART_SetConfig+0x2d4>)
 800c18e:	fba3 2302 	umull	r2, r3, r3, r2
 800c192:	095b      	lsrs	r3, r3, #5
 800c194:	011c      	lsls	r4, r3, #4
 800c196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c1a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c1a8:	4642      	mov	r2, r8
 800c1aa:	464b      	mov	r3, r9
 800c1ac:	1891      	adds	r1, r2, r2
 800c1ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1b0:	415b      	adcs	r3, r3
 800c1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	eb12 0a01 	adds.w	sl, r2, r1
 800c1be:	4649      	mov	r1, r9
 800c1c0:	eb43 0b01 	adc.w	fp, r3, r1
 800c1c4:	f04f 0200 	mov.w	r2, #0
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1d8:	4692      	mov	sl, r2
 800c1da:	469b      	mov	fp, r3
 800c1dc:	4643      	mov	r3, r8
 800c1de:	eb1a 0303 	adds.w	r3, sl, r3
 800c1e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1e6:	464b      	mov	r3, r9
 800c1e8:	eb4b 0303 	adc.w	r3, fp, r3
 800c1ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c204:	460b      	mov	r3, r1
 800c206:	18db      	adds	r3, r3, r3
 800c208:	643b      	str	r3, [r7, #64]	; 0x40
 800c20a:	4613      	mov	r3, r2
 800c20c:	eb42 0303 	adc.w	r3, r2, r3
 800c210:	647b      	str	r3, [r7, #68]	; 0x44
 800c212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c21a:	f7f4 fd15 	bl	8000c48 <__aeabi_uldivmod>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4611      	mov	r1, r2
 800c224:	4b3b      	ldr	r3, [pc, #236]	; (800c314 <UART_SetConfig+0x2d4>)
 800c226:	fba3 2301 	umull	r2, r3, r3, r1
 800c22a:	095b      	lsrs	r3, r3, #5
 800c22c:	2264      	movs	r2, #100	; 0x64
 800c22e:	fb02 f303 	mul.w	r3, r2, r3
 800c232:	1acb      	subs	r3, r1, r3
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c23a:	4b36      	ldr	r3, [pc, #216]	; (800c314 <UART_SetConfig+0x2d4>)
 800c23c:	fba3 2302 	umull	r2, r3, r3, r2
 800c240:	095b      	lsrs	r3, r3, #5
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c248:	441c      	add	r4, r3
 800c24a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c24e:	2200      	movs	r2, #0
 800c250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c254:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c25c:	4642      	mov	r2, r8
 800c25e:	464b      	mov	r3, r9
 800c260:	1891      	adds	r1, r2, r2
 800c262:	63b9      	str	r1, [r7, #56]	; 0x38
 800c264:	415b      	adcs	r3, r3
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c26c:	4641      	mov	r1, r8
 800c26e:	1851      	adds	r1, r2, r1
 800c270:	6339      	str	r1, [r7, #48]	; 0x30
 800c272:	4649      	mov	r1, r9
 800c274:	414b      	adcs	r3, r1
 800c276:	637b      	str	r3, [r7, #52]	; 0x34
 800c278:	f04f 0200 	mov.w	r2, #0
 800c27c:	f04f 0300 	mov.w	r3, #0
 800c280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c284:	4659      	mov	r1, fp
 800c286:	00cb      	lsls	r3, r1, #3
 800c288:	4651      	mov	r1, sl
 800c28a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c28e:	4651      	mov	r1, sl
 800c290:	00ca      	lsls	r2, r1, #3
 800c292:	4610      	mov	r0, r2
 800c294:	4619      	mov	r1, r3
 800c296:	4603      	mov	r3, r0
 800c298:	4642      	mov	r2, r8
 800c29a:	189b      	adds	r3, r3, r2
 800c29c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	460a      	mov	r2, r1
 800c2a4:	eb42 0303 	adc.w	r3, r2, r3
 800c2a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	18db      	adds	r3, r3, r3
 800c2c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	eb42 0303 	adc.w	r3, r2, r3
 800c2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c2d6:	f7f4 fcb7 	bl	8000c48 <__aeabi_uldivmod>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <UART_SetConfig+0x2d4>)
 800c2e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c2e4:	095b      	lsrs	r3, r3, #5
 800c2e6:	2164      	movs	r1, #100	; 0x64
 800c2e8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	3332      	adds	r3, #50	; 0x32
 800c2f2:	4a08      	ldr	r2, [pc, #32]	; (800c314 <UART_SetConfig+0x2d4>)
 800c2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2f8:	095b      	lsrs	r3, r3, #5
 800c2fa:	f003 0207 	and.w	r2, r3, #7
 800c2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4422      	add	r2, r4
 800c306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c308:	e106      	b.n	800c518 <UART_SetConfig+0x4d8>
 800c30a:	bf00      	nop
 800c30c:	40011000 	.word	0x40011000
 800c310:	40011400 	.word	0x40011400
 800c314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c31c:	2200      	movs	r2, #0
 800c31e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c322:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c32a:	4642      	mov	r2, r8
 800c32c:	464b      	mov	r3, r9
 800c32e:	1891      	adds	r1, r2, r2
 800c330:	6239      	str	r1, [r7, #32]
 800c332:	415b      	adcs	r3, r3
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
 800c336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c33a:	4641      	mov	r1, r8
 800c33c:	1854      	adds	r4, r2, r1
 800c33e:	4649      	mov	r1, r9
 800c340:	eb43 0501 	adc.w	r5, r3, r1
 800c344:	f04f 0200 	mov.w	r2, #0
 800c348:	f04f 0300 	mov.w	r3, #0
 800c34c:	00eb      	lsls	r3, r5, #3
 800c34e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c352:	00e2      	lsls	r2, r4, #3
 800c354:	4614      	mov	r4, r2
 800c356:	461d      	mov	r5, r3
 800c358:	4643      	mov	r3, r8
 800c35a:	18e3      	adds	r3, r4, r3
 800c35c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c360:	464b      	mov	r3, r9
 800c362:	eb45 0303 	adc.w	r3, r5, r3
 800c366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c36a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c37a:	f04f 0200 	mov.w	r2, #0
 800c37e:	f04f 0300 	mov.w	r3, #0
 800c382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c386:	4629      	mov	r1, r5
 800c388:	008b      	lsls	r3, r1, #2
 800c38a:	4621      	mov	r1, r4
 800c38c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c390:	4621      	mov	r1, r4
 800c392:	008a      	lsls	r2, r1, #2
 800c394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c398:	f7f4 fc56 	bl	8000c48 <__aeabi_uldivmod>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4b60      	ldr	r3, [pc, #384]	; (800c524 <UART_SetConfig+0x4e4>)
 800c3a2:	fba3 2302 	umull	r2, r3, r3, r2
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	011c      	lsls	r4, r3, #4
 800c3aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3bc:	4642      	mov	r2, r8
 800c3be:	464b      	mov	r3, r9
 800c3c0:	1891      	adds	r1, r2, r2
 800c3c2:	61b9      	str	r1, [r7, #24]
 800c3c4:	415b      	adcs	r3, r3
 800c3c6:	61fb      	str	r3, [r7, #28]
 800c3c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3cc:	4641      	mov	r1, r8
 800c3ce:	1851      	adds	r1, r2, r1
 800c3d0:	6139      	str	r1, [r7, #16]
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	414b      	adcs	r3, r1
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	f04f 0300 	mov.w	r3, #0
 800c3e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3e4:	4659      	mov	r1, fp
 800c3e6:	00cb      	lsls	r3, r1, #3
 800c3e8:	4651      	mov	r1, sl
 800c3ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3ee:	4651      	mov	r1, sl
 800c3f0:	00ca      	lsls	r2, r1, #3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4642      	mov	r2, r8
 800c3fa:	189b      	adds	r3, r3, r2
 800c3fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c400:	464b      	mov	r3, r9
 800c402:	460a      	mov	r2, r1
 800c404:	eb42 0303 	adc.w	r3, r2, r3
 800c408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	67bb      	str	r3, [r7, #120]	; 0x78
 800c416:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c418:	f04f 0200 	mov.w	r2, #0
 800c41c:	f04f 0300 	mov.w	r3, #0
 800c420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c424:	4649      	mov	r1, r9
 800c426:	008b      	lsls	r3, r1, #2
 800c428:	4641      	mov	r1, r8
 800c42a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c42e:	4641      	mov	r1, r8
 800c430:	008a      	lsls	r2, r1, #2
 800c432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c436:	f7f4 fc07 	bl	8000c48 <__aeabi_uldivmod>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4611      	mov	r1, r2
 800c440:	4b38      	ldr	r3, [pc, #224]	; (800c524 <UART_SetConfig+0x4e4>)
 800c442:	fba3 2301 	umull	r2, r3, r3, r1
 800c446:	095b      	lsrs	r3, r3, #5
 800c448:	2264      	movs	r2, #100	; 0x64
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	1acb      	subs	r3, r1, r3
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	3332      	adds	r3, #50	; 0x32
 800c454:	4a33      	ldr	r2, [pc, #204]	; (800c524 <UART_SetConfig+0x4e4>)
 800c456:	fba2 2303 	umull	r2, r3, r2, r3
 800c45a:	095b      	lsrs	r3, r3, #5
 800c45c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c460:	441c      	add	r4, r3
 800c462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c466:	2200      	movs	r2, #0
 800c468:	673b      	str	r3, [r7, #112]	; 0x70
 800c46a:	677a      	str	r2, [r7, #116]	; 0x74
 800c46c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c470:	4642      	mov	r2, r8
 800c472:	464b      	mov	r3, r9
 800c474:	1891      	adds	r1, r2, r2
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	415b      	adcs	r3, r3
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c480:	4641      	mov	r1, r8
 800c482:	1851      	adds	r1, r2, r1
 800c484:	6039      	str	r1, [r7, #0]
 800c486:	4649      	mov	r1, r9
 800c488:	414b      	adcs	r3, r1
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	f04f 0300 	mov.w	r3, #0
 800c494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c498:	4659      	mov	r1, fp
 800c49a:	00cb      	lsls	r3, r1, #3
 800c49c:	4651      	mov	r1, sl
 800c49e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4a2:	4651      	mov	r1, sl
 800c4a4:	00ca      	lsls	r2, r1, #3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	4642      	mov	r2, r8
 800c4ae:	189b      	adds	r3, r3, r2
 800c4b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4b2:	464b      	mov	r3, r9
 800c4b4:	460a      	mov	r2, r1
 800c4b6:	eb42 0303 	adc.w	r3, r2, r3
 800c4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	663b      	str	r3, [r7, #96]	; 0x60
 800c4c6:	667a      	str	r2, [r7, #100]	; 0x64
 800c4c8:	f04f 0200 	mov.w	r2, #0
 800c4cc:	f04f 0300 	mov.w	r3, #0
 800c4d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	008b      	lsls	r3, r1, #2
 800c4d8:	4641      	mov	r1, r8
 800c4da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4de:	4641      	mov	r1, r8
 800c4e0:	008a      	lsls	r2, r1, #2
 800c4e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c4e6:	f7f4 fbaf 	bl	8000c48 <__aeabi_uldivmod>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <UART_SetConfig+0x4e4>)
 800c4f0:	fba3 1302 	umull	r1, r3, r3, r2
 800c4f4:	095b      	lsrs	r3, r3, #5
 800c4f6:	2164      	movs	r1, #100	; 0x64
 800c4f8:	fb01 f303 	mul.w	r3, r1, r3
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	3332      	adds	r3, #50	; 0x32
 800c502:	4a08      	ldr	r2, [pc, #32]	; (800c524 <UART_SetConfig+0x4e4>)
 800c504:	fba2 2303 	umull	r2, r3, r2, r3
 800c508:	095b      	lsrs	r3, r3, #5
 800c50a:	f003 020f 	and.w	r2, r3, #15
 800c50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4422      	add	r2, r4
 800c516:	609a      	str	r2, [r3, #8]
}
 800c518:	bf00      	nop
 800c51a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c51e:	46bd      	mov	sp, r7
 800c520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c524:	51eb851f 	.word	0x51eb851f

0800c528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c53a:	2b84      	cmp	r3, #132	; 0x84
 800c53c:	d005      	beq.n	800c54a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c53e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	3303      	adds	r3, #3
 800c548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c54a:	68fb      	ldr	r3, [r7, #12]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c55c:	f000 faf6 	bl	800cb4c <vTaskStartScheduler>
  
  return osOK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	bd80      	pop	{r7, pc}

0800c566 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c566:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c568:	b089      	sub	sp, #36	; 0x24
 800c56a:	af04      	add	r7, sp, #16
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d020      	beq.n	800c5ba <osThreadCreate+0x54>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01c      	beq.n	800c5ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685c      	ldr	r4, [r3, #4]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691e      	ldr	r6, [r3, #16]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff ffc8 	bl	800c528 <makeFreeRtosPriority>
 800c598:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5a2:	9202      	str	r2, [sp, #8]
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	9100      	str	r1, [sp, #0]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f8ed 	bl	800c78e <xTaskCreateStatic>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	e01c      	b.n	800c5f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685c      	ldr	r4, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ffaa 	bl	800c528 <makeFreeRtosPriority>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	f107 030c 	add.w	r3, r7, #12
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	9200      	str	r2, [sp, #0]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f000 f92f 	bl	800c848 <xTaskCreate>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d001      	beq.n	800c5f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e000      	b.n	800c5f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <osDelay+0x16>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	e000      	b.n	800c616 <osDelay+0x18>
 800c614:	2301      	movs	r3, #1
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fa64 	bl	800cae4 <vTaskDelay>
  
  return osOK;
 800c61c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c626:	b480      	push	{r7}
 800c628:	b083      	sub	sp, #12
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f103 0208 	add.w	r2, r3, #8
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f04f 32ff 	mov.w	r2, #4294967295
 800c63e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f103 0208 	add.w	r2, r3, #8
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f103 0208 	add.w	r2, r3, #8
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c65a:	bf00      	nop
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c666:	b480      	push	{r7}
 800c668:	b083      	sub	sp, #12
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	1c5a      	adds	r2, r3, #1
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	601a      	str	r2, [r3, #0]
}
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6de:	d103      	bne.n	800c6e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	e00c      	b.n	800c702 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	e002      	b.n	800c6f6 <vListInsert+0x2e>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d2f6      	bcs.n	800c6f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	6892      	ldr	r2, [r2, #8]
 800c750:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6852      	ldr	r2, [r2, #4]
 800c75a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d103      	bne.n	800c76e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	1e5a      	subs	r2, r3, #1
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b08e      	sub	sp, #56	; 0x38
 800c792:	af04      	add	r7, sp, #16
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
 800c79a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10a      	bne.n	800c7d4 <xTaskCreateStatic+0x46>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	61fb      	str	r3, [r7, #28]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7d4:	23a0      	movs	r3, #160	; 0xa0
 800c7d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2ba0      	cmp	r3, #160	; 0xa0
 800c7dc:	d00a      	beq.n	800c7f4 <xTaskCreateStatic+0x66>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	61bb      	str	r3, [r7, #24]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01e      	beq.n	800c83a <xTaskCreateStatic+0xac>
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d01b      	beq.n	800c83a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c80a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	2202      	movs	r2, #2
 800c810:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c814:	2300      	movs	r3, #0
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	f107 0314 	add.w	r3, r7, #20
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f851 	bl	800c8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c834:	f000 f8ec 	bl	800ca10 <prvAddNewTaskToReadyList>
 800c838:	e001      	b.n	800c83e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c83e:	697b      	ldr	r3, [r7, #20]
	}
 800c840:	4618      	mov	r0, r3
 800c842:	3728      	adds	r7, #40	; 0x28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08c      	sub	sp, #48	; 0x30
 800c84c:	af04      	add	r7, sp, #16
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	4613      	mov	r3, r2
 800c856:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c858:	88fb      	ldrh	r3, [r7, #6]
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 f933 	bl	800dac8 <pvPortMalloc>
 800c862:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00e      	beq.n	800c888 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c86a:	20a0      	movs	r0, #160	; 0xa0
 800c86c:	f001 f92c 	bl	800dac8 <pvPortMalloc>
 800c870:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30
 800c87e:	e005      	b.n	800c88c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c880:	6978      	ldr	r0, [r7, #20]
 800c882:	f001 f9ed 	bl	800dc60 <vPortFree>
 800c886:	e001      	b.n	800c88c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d017      	beq.n	800c8c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c89a:	88fa      	ldrh	r2, [r7, #6]
 800c89c:	2300      	movs	r3, #0
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	9302      	str	r3, [sp, #8]
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f80f 	bl	800c8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8b6:	69f8      	ldr	r0, [r7, #28]
 800c8b8:	f000 f8aa 	bl	800ca10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	61bb      	str	r3, [r7, #24]
 800c8c0:	e002      	b.n	800c8c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
	}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	f023 0307 	bic.w	r3, r3, #7
 800c8fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	f003 0307 	and.w	r3, r3, #7
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00a      	beq.n	800c91c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	617b      	str	r3, [r7, #20]
}
 800c918:	bf00      	nop
 800c91a:	e7fe      	b.n	800c91a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d01f      	beq.n	800c962 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c922:	2300      	movs	r3, #0
 800c924:	61fb      	str	r3, [r7, #28]
 800c926:	e012      	b.n	800c94e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	7819      	ldrb	r1, [r3, #0]
 800c930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	4413      	add	r3, r2
 800c936:	3334      	adds	r3, #52	; 0x34
 800c938:	460a      	mov	r2, r1
 800c93a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	4413      	add	r3, r2
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d006      	beq.n	800c956 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	3301      	adds	r3, #1
 800c94c:	61fb      	str	r3, [r7, #28]
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	2b0f      	cmp	r3, #15
 800c952:	d9e9      	bls.n	800c928 <prvInitialiseNewTask+0x54>
 800c954:	e000      	b.n	800c958 <prvInitialiseNewTask+0x84>
			{
				break;
 800c956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c960:	e003      	b.n	800c96a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96c:	2b06      	cmp	r3, #6
 800c96e:	d901      	bls.n	800c974 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c970:	2306      	movs	r3, #6
 800c972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c97e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c982:	2200      	movs	r2, #0
 800c984:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	3304      	adds	r3, #4
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff fe6b 	bl	800c666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c992:	3318      	adds	r3, #24
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff fe66 	bl	800c666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	f1c3 0207 	rsb	r2, r3, #7
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	334c      	adds	r3, #76	; 0x4c
 800c9c4:	224c      	movs	r2, #76	; 0x4c
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 fff2 	bl	800e9b2 <memset>
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	4a0c      	ldr	r2, [pc, #48]	; (800ca04 <prvInitialiseNewTask+0x130>)
 800c9d2:	651a      	str	r2, [r3, #80]	; 0x50
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d6:	4a0c      	ldr	r2, [pc, #48]	; (800ca08 <prvInitialiseNewTask+0x134>)
 800c9d8:	655a      	str	r2, [r3, #84]	; 0x54
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	4a0b      	ldr	r2, [pc, #44]	; (800ca0c <prvInitialiseNewTask+0x138>)
 800c9de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	68f9      	ldr	r1, [r7, #12]
 800c9e4:	69b8      	ldr	r0, [r7, #24]
 800c9e6:	f000 fe21 	bl	800d62c <pxPortInitialiseStack>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9fc:	bf00      	nop
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	200051b4 	.word	0x200051b4
 800ca08:	2000521c 	.word	0x2000521c
 800ca0c:	20005284 	.word	0x20005284

0800ca10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca18:	f000 ff34 	bl	800d884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca1c:	4b2a      	ldr	r3, [pc, #168]	; (800cac8 <prvAddNewTaskToReadyList+0xb8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3301      	adds	r3, #1
 800ca22:	4a29      	ldr	r2, [pc, #164]	; (800cac8 <prvAddNewTaskToReadyList+0xb8>)
 800ca24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca26:	4b29      	ldr	r3, [pc, #164]	; (800cacc <prvAddNewTaskToReadyList+0xbc>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d109      	bne.n	800ca42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca2e:	4a27      	ldr	r2, [pc, #156]	; (800cacc <prvAddNewTaskToReadyList+0xbc>)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca34:	4b24      	ldr	r3, [pc, #144]	; (800cac8 <prvAddNewTaskToReadyList+0xb8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d110      	bne.n	800ca5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca3c:	f000 facc 	bl	800cfd8 <prvInitialiseTaskLists>
 800ca40:	e00d      	b.n	800ca5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca42:	4b23      	ldr	r3, [pc, #140]	; (800cad0 <prvAddNewTaskToReadyList+0xc0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d109      	bne.n	800ca5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca4a:	4b20      	ldr	r3, [pc, #128]	; (800cacc <prvAddNewTaskToReadyList+0xbc>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d802      	bhi.n	800ca5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca58:	4a1c      	ldr	r2, [pc, #112]	; (800cacc <prvAddNewTaskToReadyList+0xbc>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca5e:	4b1d      	ldr	r3, [pc, #116]	; (800cad4 <prvAddNewTaskToReadyList+0xc4>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	4a1b      	ldr	r2, [pc, #108]	; (800cad4 <prvAddNewTaskToReadyList+0xc4>)
 800ca66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	409a      	lsls	r2, r3
 800ca70:	4b19      	ldr	r3, [pc, #100]	; (800cad8 <prvAddNewTaskToReadyList+0xc8>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <prvAddNewTaskToReadyList+0xc8>)
 800ca78:	6013      	str	r3, [r2, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4a15      	ldr	r2, [pc, #84]	; (800cadc <prvAddNewTaskToReadyList+0xcc>)
 800ca88:	441a      	add	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4610      	mov	r0, r2
 800ca92:	f7ff fdf5 	bl	800c680 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca96:	f000 ff25 	bl	800d8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	; (800cad0 <prvAddNewTaskToReadyList+0xc0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00e      	beq.n	800cac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800caa2:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <prvAddNewTaskToReadyList+0xbc>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	429a      	cmp	r2, r3
 800caae:	d207      	bcs.n	800cac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cab0:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <prvAddNewTaskToReadyList+0xd0>)
 800cab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20001560 	.word	0x20001560
 800cacc:	20001460 	.word	0x20001460
 800cad0:	2000156c 	.word	0x2000156c
 800cad4:	2000157c 	.word	0x2000157c
 800cad8:	20001568 	.word	0x20001568
 800cadc:	20001464 	.word	0x20001464
 800cae0:	e000ed04 	.word	0xe000ed04

0800cae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800caec:	2300      	movs	r3, #0
 800caee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d017      	beq.n	800cb26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caf6:	4b13      	ldr	r3, [pc, #76]	; (800cb44 <vTaskDelay+0x60>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <vTaskDelay+0x30>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60bb      	str	r3, [r7, #8]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb14:	f000 f884 	bl	800cc20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fd20 	bl	800d560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb20:	f000 f88c 	bl	800cc3c <xTaskResumeAll>
 800cb24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d107      	bne.n	800cb3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cb2c:	4b06      	ldr	r3, [pc, #24]	; (800cb48 <vTaskDelay+0x64>)
 800cb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb3c:	bf00      	nop
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	20001588 	.word	0x20001588
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb56:	2300      	movs	r3, #0
 800cb58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb5a:	463a      	mov	r2, r7
 800cb5c:	1d39      	adds	r1, r7, #4
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7f8 f93a 	bl	8004ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	9202      	str	r2, [sp, #8]
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	2300      	movs	r3, #0
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	2300      	movs	r3, #0
 800cb78:	460a      	mov	r2, r1
 800cb7a:	4921      	ldr	r1, [pc, #132]	; (800cc00 <vTaskStartScheduler+0xb4>)
 800cb7c:	4821      	ldr	r0, [pc, #132]	; (800cc04 <vTaskStartScheduler+0xb8>)
 800cb7e:	f7ff fe06 	bl	800c78e <xTaskCreateStatic>
 800cb82:	4603      	mov	r3, r0
 800cb84:	4a20      	ldr	r2, [pc, #128]	; (800cc08 <vTaskStartScheduler+0xbc>)
 800cb86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb88:	4b1f      	ldr	r3, [pc, #124]	; (800cc08 <vTaskStartScheduler+0xbc>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb90:	2301      	movs	r3, #1
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	e001      	b.n	800cb9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d11b      	bne.n	800cbd8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	613b      	str	r3, [r7, #16]
}
 800cbb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbb4:	4b15      	ldr	r3, [pc, #84]	; (800cc0c <vTaskStartScheduler+0xc0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	334c      	adds	r3, #76	; 0x4c
 800cbba:	4a15      	ldr	r2, [pc, #84]	; (800cc10 <vTaskStartScheduler+0xc4>)
 800cbbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbbe:	4b15      	ldr	r3, [pc, #84]	; (800cc14 <vTaskStartScheduler+0xc8>)
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbc6:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <vTaskStartScheduler+0xcc>)
 800cbc8:	2201      	movs	r2, #1
 800cbca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbcc:	4b13      	ldr	r3, [pc, #76]	; (800cc1c <vTaskStartScheduler+0xd0>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbd2:	f000 fdb5 	bl	800d740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbd6:	e00e      	b.n	800cbf6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbde:	d10a      	bne.n	800cbf6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <vTaskStartScheduler+0xa8>
}
 800cbf6:	bf00      	nop
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	0801318c 	.word	0x0801318c
 800cc04:	0800cfa9 	.word	0x0800cfa9
 800cc08:	20001584 	.word	0x20001584
 800cc0c:	20001460 	.word	0x20001460
 800cc10:	2000007c 	.word	0x2000007c
 800cc14:	20001580 	.word	0x20001580
 800cc18:	2000156c 	.word	0x2000156c
 800cc1c:	20001564 	.word	0x20001564

0800cc20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc24:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <vTaskSuspendAll+0x18>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	4a03      	ldr	r2, [pc, #12]	; (800cc38 <vTaskSuspendAll+0x18>)
 800cc2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc2e:	bf00      	nop
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	20001588 	.word	0x20001588

0800cc3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc46:	2300      	movs	r3, #0
 800cc48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc4a:	4b41      	ldr	r3, [pc, #260]	; (800cd50 <xTaskResumeAll+0x114>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10a      	bne.n	800cc68 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	603b      	str	r3, [r7, #0]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc68:	f000 fe0c 	bl	800d884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc6c:	4b38      	ldr	r3, [pc, #224]	; (800cd50 <xTaskResumeAll+0x114>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	4a37      	ldr	r2, [pc, #220]	; (800cd50 <xTaskResumeAll+0x114>)
 800cc74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc76:	4b36      	ldr	r3, [pc, #216]	; (800cd50 <xTaskResumeAll+0x114>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d161      	bne.n	800cd42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc7e:	4b35      	ldr	r3, [pc, #212]	; (800cd54 <xTaskResumeAll+0x118>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d05d      	beq.n	800cd42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc86:	e02e      	b.n	800cce6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc88:	4b33      	ldr	r3, [pc, #204]	; (800cd58 <xTaskResumeAll+0x11c>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	3318      	adds	r3, #24
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fd50 	bl	800c73a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff fd4b 	bl	800c73a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca8:	2201      	movs	r2, #1
 800ccaa:	409a      	lsls	r2, r3
 800ccac:	4b2b      	ldr	r3, [pc, #172]	; (800cd5c <xTaskResumeAll+0x120>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	4a2a      	ldr	r2, [pc, #168]	; (800cd5c <xTaskResumeAll+0x120>)
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4a27      	ldr	r2, [pc, #156]	; (800cd60 <xTaskResumeAll+0x124>)
 800ccc4:	441a      	add	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7ff fcd7 	bl	800c680 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4b23      	ldr	r3, [pc, #140]	; (800cd64 <xTaskResumeAll+0x128>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d302      	bcc.n	800cce6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cce0:	4b21      	ldr	r3, [pc, #132]	; (800cd68 <xTaskResumeAll+0x12c>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cce6:	4b1c      	ldr	r3, [pc, #112]	; (800cd58 <xTaskResumeAll+0x11c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1cc      	bne.n	800cc88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccf4:	f000 fa12 	bl	800d11c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccf8:	4b1c      	ldr	r3, [pc, #112]	; (800cd6c <xTaskResumeAll+0x130>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d010      	beq.n	800cd26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd04:	f000 f836 	bl	800cd74 <xTaskIncrementTick>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cd0e:	4b16      	ldr	r3, [pc, #88]	; (800cd68 <xTaskResumeAll+0x12c>)
 800cd10:	2201      	movs	r2, #1
 800cd12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f1      	bne.n	800cd04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cd20:	4b12      	ldr	r3, [pc, #72]	; (800cd6c <xTaskResumeAll+0x130>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd26:	4b10      	ldr	r3, [pc, #64]	; (800cd68 <xTaskResumeAll+0x12c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d009      	beq.n	800cd42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd32:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <xTaskResumeAll+0x134>)
 800cd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd42:	f000 fdcf 	bl	800d8e4 <vPortExitCritical>

	return xAlreadyYielded;
 800cd46:	68bb      	ldr	r3, [r7, #8]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	20001588 	.word	0x20001588
 800cd54:	20001560 	.word	0x20001560
 800cd58:	20001520 	.word	0x20001520
 800cd5c:	20001568 	.word	0x20001568
 800cd60:	20001464 	.word	0x20001464
 800cd64:	20001460 	.word	0x20001460
 800cd68:	20001574 	.word	0x20001574
 800cd6c:	20001570 	.word	0x20001570
 800cd70:	e000ed04 	.word	0xe000ed04

0800cd74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd7e:	4b4e      	ldr	r3, [pc, #312]	; (800ceb8 <xTaskIncrementTick+0x144>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f040 808e 	bne.w	800cea4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd88:	4b4c      	ldr	r3, [pc, #304]	; (800cebc <xTaskIncrementTick+0x148>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd90:	4a4a      	ldr	r2, [pc, #296]	; (800cebc <xTaskIncrementTick+0x148>)
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d120      	bne.n	800cdde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd9c:	4b48      	ldr	r3, [pc, #288]	; (800cec0 <xTaskIncrementTick+0x14c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <xTaskIncrementTick+0x48>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	603b      	str	r3, [r7, #0]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <xTaskIncrementTick+0x46>
 800cdbc:	4b40      	ldr	r3, [pc, #256]	; (800cec0 <xTaskIncrementTick+0x14c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <xTaskIncrementTick+0x150>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a3e      	ldr	r2, [pc, #248]	; (800cec0 <xTaskIncrementTick+0x14c>)
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	4a3e      	ldr	r2, [pc, #248]	; (800cec4 <xTaskIncrementTick+0x150>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	4b3d      	ldr	r3, [pc, #244]	; (800cec8 <xTaskIncrementTick+0x154>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	4a3c      	ldr	r2, [pc, #240]	; (800cec8 <xTaskIncrementTick+0x154>)
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	f000 f99f 	bl	800d11c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cdde:	4b3b      	ldr	r3, [pc, #236]	; (800cecc <xTaskIncrementTick+0x158>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d348      	bcc.n	800ce7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde8:	4b35      	ldr	r3, [pc, #212]	; (800cec0 <xTaskIncrementTick+0x14c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d104      	bne.n	800cdfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdf2:	4b36      	ldr	r3, [pc, #216]	; (800cecc <xTaskIncrementTick+0x158>)
 800cdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf8:	601a      	str	r2, [r3, #0]
					break;
 800cdfa:	e03e      	b.n	800ce7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdfc:	4b30      	ldr	r3, [pc, #192]	; (800cec0 <xTaskIncrementTick+0x14c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d203      	bcs.n	800ce1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce14:	4a2d      	ldr	r2, [pc, #180]	; (800cecc <xTaskIncrementTick+0x158>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce1a:	e02e      	b.n	800ce7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fc8a 	bl	800c73a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	3318      	adds	r3, #24
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fc81 	bl	800c73a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	409a      	lsls	r2, r3
 800ce40:	4b23      	ldr	r3, [pc, #140]	; (800ced0 <xTaskIncrementTick+0x15c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	4a22      	ldr	r2, [pc, #136]	; (800ced0 <xTaskIncrementTick+0x15c>)
 800ce48:	6013      	str	r3, [r2, #0]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4a1f      	ldr	r2, [pc, #124]	; (800ced4 <xTaskIncrementTick+0x160>)
 800ce58:	441a      	add	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7ff fc0d 	bl	800c680 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce6a:	4b1b      	ldr	r3, [pc, #108]	; (800ced8 <xTaskIncrementTick+0x164>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d3b9      	bcc.n	800cde8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce74:	2301      	movs	r3, #1
 800ce76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce78:	e7b6      	b.n	800cde8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce7a:	4b17      	ldr	r3, [pc, #92]	; (800ced8 <xTaskIncrementTick+0x164>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce80:	4914      	ldr	r1, [pc, #80]	; (800ced4 <xTaskIncrementTick+0x160>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d901      	bls.n	800ce96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ce92:	2301      	movs	r3, #1
 800ce94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce96:	4b11      	ldr	r3, [pc, #68]	; (800cedc <xTaskIncrementTick+0x168>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d007      	beq.n	800ceae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	e004      	b.n	800ceae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cea4:	4b0e      	ldr	r3, [pc, #56]	; (800cee0 <xTaskIncrementTick+0x16c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	4a0d      	ldr	r2, [pc, #52]	; (800cee0 <xTaskIncrementTick+0x16c>)
 800ceac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ceae:	697b      	ldr	r3, [r7, #20]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	20001588 	.word	0x20001588
 800cebc:	20001564 	.word	0x20001564
 800cec0:	20001518 	.word	0x20001518
 800cec4:	2000151c 	.word	0x2000151c
 800cec8:	20001578 	.word	0x20001578
 800cecc:	20001580 	.word	0x20001580
 800ced0:	20001568 	.word	0x20001568
 800ced4:	20001464 	.word	0x20001464
 800ced8:	20001460 	.word	0x20001460
 800cedc:	20001574 	.word	0x20001574
 800cee0:	20001570 	.word	0x20001570

0800cee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ceea:	4b29      	ldr	r3, [pc, #164]	; (800cf90 <vTaskSwitchContext+0xac>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d003      	beq.n	800cefa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cef2:	4b28      	ldr	r3, [pc, #160]	; (800cf94 <vTaskSwitchContext+0xb0>)
 800cef4:	2201      	movs	r2, #1
 800cef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cef8:	e044      	b.n	800cf84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800cefa:	4b26      	ldr	r3, [pc, #152]	; (800cf94 <vTaskSwitchContext+0xb0>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf00:	4b25      	ldr	r3, [pc, #148]	; (800cf98 <vTaskSwitchContext+0xb4>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	fab3 f383 	clz	r3, r3
 800cf0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf0e:	7afb      	ldrb	r3, [r7, #11]
 800cf10:	f1c3 031f 	rsb	r3, r3, #31
 800cf14:	617b      	str	r3, [r7, #20]
 800cf16:	4921      	ldr	r1, [pc, #132]	; (800cf9c <vTaskSwitchContext+0xb8>)
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	440b      	add	r3, r1
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	607b      	str	r3, [r7, #4]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <vTaskSwitchContext+0x5a>
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4a14      	ldr	r2, [pc, #80]	; (800cf9c <vTaskSwitchContext+0xb8>)
 800cf4c:	4413      	add	r3, r2
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	605a      	str	r2, [r3, #4]
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	3308      	adds	r3, #8
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d104      	bne.n	800cf70 <vTaskSwitchContext+0x8c>
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	605a      	str	r2, [r3, #4]
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	4a0a      	ldr	r2, [pc, #40]	; (800cfa0 <vTaskSwitchContext+0xbc>)
 800cf78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf7a:	4b09      	ldr	r3, [pc, #36]	; (800cfa0 <vTaskSwitchContext+0xbc>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	334c      	adds	r3, #76	; 0x4c
 800cf80:	4a08      	ldr	r2, [pc, #32]	; (800cfa4 <vTaskSwitchContext+0xc0>)
 800cf82:	6013      	str	r3, [r2, #0]
}
 800cf84:	bf00      	nop
 800cf86:	371c      	adds	r7, #28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	20001588 	.word	0x20001588
 800cf94:	20001574 	.word	0x20001574
 800cf98:	20001568 	.word	0x20001568
 800cf9c:	20001464 	.word	0x20001464
 800cfa0:	20001460 	.word	0x20001460
 800cfa4:	2000007c 	.word	0x2000007c

0800cfa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfb0:	f000 f852 	bl	800d058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <prvIdleTask+0x28>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d9f9      	bls.n	800cfb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfbc:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <prvIdleTask+0x2c>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfcc:	e7f0      	b.n	800cfb0 <prvIdleTask+0x8>
 800cfce:	bf00      	nop
 800cfd0:	20001464 	.word	0x20001464
 800cfd4:	e000ed04 	.word	0xe000ed04

0800cfd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfde:	2300      	movs	r3, #0
 800cfe0:	607b      	str	r3, [r7, #4]
 800cfe2:	e00c      	b.n	800cffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4a12      	ldr	r2, [pc, #72]	; (800d038 <prvInitialiseTaskLists+0x60>)
 800cff0:	4413      	add	r3, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff fb17 	bl	800c626 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3301      	adds	r3, #1
 800cffc:	607b      	str	r3, [r7, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b06      	cmp	r3, #6
 800d002:	d9ef      	bls.n	800cfe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d004:	480d      	ldr	r0, [pc, #52]	; (800d03c <prvInitialiseTaskLists+0x64>)
 800d006:	f7ff fb0e 	bl	800c626 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d00a:	480d      	ldr	r0, [pc, #52]	; (800d040 <prvInitialiseTaskLists+0x68>)
 800d00c:	f7ff fb0b 	bl	800c626 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d010:	480c      	ldr	r0, [pc, #48]	; (800d044 <prvInitialiseTaskLists+0x6c>)
 800d012:	f7ff fb08 	bl	800c626 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d016:	480c      	ldr	r0, [pc, #48]	; (800d048 <prvInitialiseTaskLists+0x70>)
 800d018:	f7ff fb05 	bl	800c626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d01c:	480b      	ldr	r0, [pc, #44]	; (800d04c <prvInitialiseTaskLists+0x74>)
 800d01e:	f7ff fb02 	bl	800c626 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d022:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <prvInitialiseTaskLists+0x78>)
 800d024:	4a05      	ldr	r2, [pc, #20]	; (800d03c <prvInitialiseTaskLists+0x64>)
 800d026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d028:	4b0a      	ldr	r3, [pc, #40]	; (800d054 <prvInitialiseTaskLists+0x7c>)
 800d02a:	4a05      	ldr	r2, [pc, #20]	; (800d040 <prvInitialiseTaskLists+0x68>)
 800d02c:	601a      	str	r2, [r3, #0]
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20001464 	.word	0x20001464
 800d03c:	200014f0 	.word	0x200014f0
 800d040:	20001504 	.word	0x20001504
 800d044:	20001520 	.word	0x20001520
 800d048:	20001534 	.word	0x20001534
 800d04c:	2000154c 	.word	0x2000154c
 800d050:	20001518 	.word	0x20001518
 800d054:	2000151c 	.word	0x2000151c

0800d058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d05e:	e019      	b.n	800d094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d060:	f000 fc10 	bl	800d884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d064:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <prvCheckTasksWaitingTermination+0x50>)
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3304      	adds	r3, #4
 800d070:	4618      	mov	r0, r3
 800d072:	f7ff fb62 	bl	800c73a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d076:	4b0d      	ldr	r3, [pc, #52]	; (800d0ac <prvCheckTasksWaitingTermination+0x54>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	4a0b      	ldr	r2, [pc, #44]	; (800d0ac <prvCheckTasksWaitingTermination+0x54>)
 800d07e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3b01      	subs	r3, #1
 800d086:	4a0a      	ldr	r2, [pc, #40]	; (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d08a:	f000 fc2b 	bl	800d8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f810 	bl	800d0b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d094:	4b06      	ldr	r3, [pc, #24]	; (800d0b0 <prvCheckTasksWaitingTermination+0x58>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e1      	bne.n	800d060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20001534 	.word	0x20001534
 800d0ac:	20001560 	.word	0x20001560
 800d0b0:	20001548 	.word	0x20001548

0800d0b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	334c      	adds	r3, #76	; 0x4c
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f001 fc93 	bl	800e9ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d108      	bne.n	800d0e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 fdc3 	bl	800dc60 <vPortFree>
				vPortFree( pxTCB );
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fdc0 	bl	800dc60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0e0:	e018      	b.n	800d114 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d103      	bne.n	800d0f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fdb7 	bl	800dc60 <vPortFree>
	}
 800d0f2:	e00f      	b.n	800d114 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d00a      	beq.n	800d114 <prvDeleteTCB+0x60>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	60fb      	str	r3, [r7, #12]
}
 800d110:	bf00      	nop
 800d112:	e7fe      	b.n	800d112 <prvDeleteTCB+0x5e>
	}
 800d114:	bf00      	nop
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d122:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <prvResetNextTaskUnblockTime+0x38>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d104      	bne.n	800d136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d12c:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <prvResetNextTaskUnblockTime+0x3c>)
 800d12e:	f04f 32ff 	mov.w	r2, #4294967295
 800d132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d134:	e008      	b.n	800d148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d136:	4b07      	ldr	r3, [pc, #28]	; (800d154 <prvResetNextTaskUnblockTime+0x38>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	4a04      	ldr	r2, [pc, #16]	; (800d158 <prvResetNextTaskUnblockTime+0x3c>)
 800d146:	6013      	str	r3, [r2, #0]
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	20001518 	.word	0x20001518
 800d158:	20001580 	.word	0x20001580

0800d15c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d16a:	f000 fb8b 	bl	800d884 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d16e:	4b29      	ldr	r3, [pc, #164]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d01c      	beq.n	800d1b6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d17c:	4b25      	ldr	r3, [pc, #148]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	43d2      	mvns	r2, r2
 800d188:	400a      	ands	r2, r1
 800d18a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d18e:	4b21      	ldr	r3, [pc, #132]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00b      	beq.n	800d1b6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d19e:	2101      	movs	r1, #1
 800d1a0:	6838      	ldr	r0, [r7, #0]
 800d1a2:	f000 f9dd 	bl	800d560 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d1a6:	4b1c      	ldr	r3, [pc, #112]	; (800d218 <xTaskNotifyWait+0xbc>)
 800d1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d1b6:	f000 fb95 	bl	800d8e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d1ba:	f000 fb63 	bl	800d884 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d005      	beq.n	800d1d0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d1c4:	4b13      	ldr	r3, [pc, #76]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d1d0:	4b10      	ldr	r3, [pc, #64]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d002      	beq.n	800d1e4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	e00a      	b.n	800d1fa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d1e4:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	43d2      	mvns	r2, r2
 800d1f0:	400a      	ands	r2, r1
 800d1f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1fa:	4b06      	ldr	r3, [pc, #24]	; (800d214 <xTaskNotifyWait+0xb8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800d204:	f000 fb6e 	bl	800d8e4 <vPortExitCritical>

		return xReturn;
 800d208:	697b      	ldr	r3, [r7, #20]
	}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20001460 	.word	0x20001460
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08a      	sub	sp, #40	; 0x28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	603b      	str	r3, [r7, #0]
 800d228:	4613      	mov	r3, r2
 800d22a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d22c:	2301      	movs	r3, #1
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10a      	bne.n	800d24c <xTaskGenericNotify+0x30>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	61bb      	str	r3, [r7, #24]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d250:	f000 fb18 	bl	800d884 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d004      	beq.n	800d264 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d26a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	2202      	movs	r2, #2
 800d270:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	2b04      	cmp	r3, #4
 800d278:	d82d      	bhi.n	800d2d6 <xTaskGenericNotify+0xba>
 800d27a:	a201      	add	r2, pc, #4	; (adr r2, 800d280 <xTaskGenericNotify+0x64>)
 800d27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d280:	0800d2f9 	.word	0x0800d2f9
 800d284:	0800d295 	.word	0x0800d295
 800d288:	0800d2a7 	.word	0x0800d2a7
 800d28c:	0800d2b7 	.word	0x0800d2b7
 800d290:	0800d2c1 	.word	0x0800d2c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	431a      	orrs	r2, r3
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d2a4:	e02b      	b.n	800d2fe <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d2b4:	e023      	b.n	800d2fe <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d2b6:	6a3b      	ldr	r3, [r7, #32]
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d2be:	e01e      	b.n	800d2fe <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d2c0:	7ffb      	ldrb	r3, [r7, #31]
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d004      	beq.n	800d2d0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d2ce:	e016      	b.n	800d2fe <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d2d4:	e013      	b.n	800d2fe <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e0:	d00c      	beq.n	800d2fc <xTaskGenericNotify+0xe0>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	617b      	str	r3, [r7, #20]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <xTaskGenericNotify+0xda>
					break;
 800d2f8:	bf00      	nop
 800d2fa:	e000      	b.n	800d2fe <xTaskGenericNotify+0xe2>

					break;
 800d2fc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d2fe:	7ffb      	ldrb	r3, [r7, #31]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d139      	bne.n	800d378 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	3304      	adds	r3, #4
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff fa16 	bl	800c73a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d312:	2201      	movs	r2, #1
 800d314:	409a      	lsls	r2, r3
 800d316:	4b1c      	ldr	r3, [pc, #112]	; (800d388 <xTaskGenericNotify+0x16c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	4a1a      	ldr	r2, [pc, #104]	; (800d388 <xTaskGenericNotify+0x16c>)
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4a17      	ldr	r2, [pc, #92]	; (800d38c <xTaskGenericNotify+0x170>)
 800d32e:	441a      	add	r2, r3
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	3304      	adds	r3, #4
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f7ff f9a2 	bl	800c680 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d33c:	6a3b      	ldr	r3, [r7, #32]
 800d33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <xTaskGenericNotify+0x13e>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	613b      	str	r3, [r7, #16]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35e:	4b0c      	ldr	r3, [pc, #48]	; (800d390 <xTaskGenericNotify+0x174>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d907      	bls.n	800d378 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d368:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <xTaskGenericNotify+0x178>)
 800d36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d378:	f000 fab4 	bl	800d8e4 <vPortExitCritical>

		return xReturn;
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d37e:	4618      	mov	r0, r3
 800d380:	3728      	adds	r7, #40	; 0x28
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20001568 	.word	0x20001568
 800d38c:	20001464 	.word	0x20001464
 800d390:	20001460 	.word	0x20001460
 800d394:	e000ed04 	.word	0xe000ed04

0800d398 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08e      	sub	sp, #56	; 0x38
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	603b      	str	r3, [r7, #0]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c8:	f000 fb3e 	bl	800da48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3d0:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	623a      	str	r2, [r7, #32]
 800d3e6:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3e8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	2202      	movs	r2, #2
 800d40a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	2b04      	cmp	r3, #4
 800d412:	d82f      	bhi.n	800d474 <xTaskGenericNotifyFromISR+0xdc>
 800d414:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <xTaskGenericNotifyFromISR+0x84>)
 800d416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41a:	bf00      	nop
 800d41c:	0800d497 	.word	0x0800d497
 800d420:	0800d431 	.word	0x0800d431
 800d424:	0800d443 	.word	0x0800d443
 800d428:	0800d453 	.word	0x0800d453
 800d42c:	0800d45d 	.word	0x0800d45d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	431a      	orrs	r2, r3
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d440:	e02c      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d450:	e024      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800d45a:	e01f      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d45c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d460:	2b02      	cmp	r3, #2
 800d462:	d004      	beq.n	800d46e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d46c:	e016      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d46e:	2300      	movs	r3, #0
 800d470:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d472:	e013      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47e:	d00c      	beq.n	800d49a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	61bb      	str	r3, [r7, #24]
}
 800d492:	bf00      	nop
 800d494:	e7fe      	b.n	800d494 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <xTaskGenericNotifyFromISR+0x104>
					break;
 800d49a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d49c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d145      	bne.n	800d530 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	617b      	str	r3, [r7, #20]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4c2:	4b21      	ldr	r3, [pc, #132]	; (800d548 <xTaskGenericNotifyFromISR+0x1b0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d11c      	bne.n	800d504 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff f933 	bl	800c73a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d8:	2201      	movs	r2, #1
 800d4da:	409a      	lsls	r2, r3
 800d4dc:	4b1b      	ldr	r3, [pc, #108]	; (800d54c <xTaskGenericNotifyFromISR+0x1b4>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	4a1a      	ldr	r2, [pc, #104]	; (800d54c <xTaskGenericNotifyFromISR+0x1b4>)
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4a17      	ldr	r2, [pc, #92]	; (800d550 <xTaskGenericNotifyFromISR+0x1b8>)
 800d4f4:	441a      	add	r2, r3
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	f7ff f8bf 	bl	800c680 <vListInsertEnd>
 800d502:	e005      	b.n	800d510 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	3318      	adds	r3, #24
 800d508:	4619      	mov	r1, r3
 800d50a:	4812      	ldr	r0, [pc, #72]	; (800d554 <xTaskGenericNotifyFromISR+0x1bc>)
 800d50c:	f7ff f8b8 	bl	800c680 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	4b10      	ldr	r3, [pc, #64]	; (800d558 <xTaskGenericNotifyFromISR+0x1c0>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d908      	bls.n	800d530 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d526:	2201      	movs	r2, #1
 800d528:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d52a:	4b0c      	ldr	r3, [pc, #48]	; (800d55c <xTaskGenericNotifyFromISR+0x1c4>)
 800d52c:	2201      	movs	r2, #1
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d53a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d53e:	4618      	mov	r0, r3
 800d540:	3738      	adds	r7, #56	; 0x38
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20001588 	.word	0x20001588
 800d54c:	20001568 	.word	0x20001568
 800d550:	20001464 	.word	0x20001464
 800d554:	20001520 	.word	0x20001520
 800d558:	20001460 	.word	0x20001460
 800d55c:	20001574 	.word	0x20001574

0800d560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d56a:	4b29      	ldr	r3, [pc, #164]	; (800d610 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d570:	4b28      	ldr	r3, [pc, #160]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3304      	adds	r3, #4
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff f8df 	bl	800c73a <uxListRemove>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d588:	2201      	movs	r2, #1
 800d58a:	fa02 f303 	lsl.w	r3, r2, r3
 800d58e:	43da      	mvns	r2, r3
 800d590:	4b21      	ldr	r3, [pc, #132]	; (800d618 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4013      	ands	r3, r2
 800d596:	4a20      	ldr	r2, [pc, #128]	; (800d618 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d598:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a0:	d10a      	bne.n	800d5b8 <prvAddCurrentTaskToDelayedList+0x58>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d007      	beq.n	800d5b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5a8:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	481a      	ldr	r0, [pc, #104]	; (800d61c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d5b2:	f7ff f865 	bl	800c680 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5b6:	e026      	b.n	800d606 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5c0:	4b14      	ldr	r3, [pc, #80]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d209      	bcs.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5d0:	4b13      	ldr	r3, [pc, #76]	; (800d620 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4619      	mov	r1, r3
 800d5dc:	4610      	mov	r0, r2
 800d5de:	f7ff f873 	bl	800c6c8 <vListInsert>
}
 800d5e2:	e010      	b.n	800d606 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7ff f869 	bl	800c6c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5f6:	4b0c      	ldr	r3, [pc, #48]	; (800d628 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d202      	bcs.n	800d606 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d600:	4a09      	ldr	r2, [pc, #36]	; (800d628 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	6013      	str	r3, [r2, #0]
}
 800d606:	bf00      	nop
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20001564 	.word	0x20001564
 800d614:	20001460 	.word	0x20001460
 800d618:	20001568 	.word	0x20001568
 800d61c:	2000154c 	.word	0x2000154c
 800d620:	2000151c 	.word	0x2000151c
 800d624:	20001518 	.word	0x20001518
 800d628:	20001580 	.word	0x20001580

0800d62c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3b04      	subs	r3, #4
 800d63c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3b04      	subs	r3, #4
 800d64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f023 0201 	bic.w	r2, r3, #1
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b04      	subs	r3, #4
 800d65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d65c:	4a0c      	ldr	r2, [pc, #48]	; (800d690 <pxPortInitialiseStack+0x64>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3b14      	subs	r3, #20
 800d666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3b04      	subs	r3, #4
 800d672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f06f 0202 	mvn.w	r2, #2
 800d67a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3b20      	subs	r3, #32
 800d680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d682:	68fb      	ldr	r3, [r7, #12]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	0800d695 	.word	0x0800d695

0800d694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d69e:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <prvTaskExitError+0x54>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a6:	d00a      	beq.n	800d6be <prvTaskExitError+0x2a>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	60fb      	str	r3, [r7, #12]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <prvTaskExitError+0x28>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60bb      	str	r3, [r7, #8]
}
 800d6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6d2:	bf00      	nop
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d0fc      	beq.n	800d6d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	20000020 	.word	0x20000020
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6f0:	4b07      	ldr	r3, [pc, #28]	; (800d710 <pxCurrentTCBConst2>)
 800d6f2:	6819      	ldr	r1, [r3, #0]
 800d6f4:	6808      	ldr	r0, [r1, #0]
 800d6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fa:	f380 8809 	msr	PSP, r0
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f04f 0000 	mov.w	r0, #0
 800d706:	f380 8811 	msr	BASEPRI, r0
 800d70a:	4770      	bx	lr
 800d70c:	f3af 8000 	nop.w

0800d710 <pxCurrentTCBConst2>:
 800d710:	20001460 	.word	0x20001460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d714:	bf00      	nop
 800d716:	bf00      	nop

0800d718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d718:	4808      	ldr	r0, [pc, #32]	; (800d73c <prvPortStartFirstTask+0x24>)
 800d71a:	6800      	ldr	r0, [r0, #0]
 800d71c:	6800      	ldr	r0, [r0, #0]
 800d71e:	f380 8808 	msr	MSP, r0
 800d722:	f04f 0000 	mov.w	r0, #0
 800d726:	f380 8814 	msr	CONTROL, r0
 800d72a:	b662      	cpsie	i
 800d72c:	b661      	cpsie	f
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	df00      	svc	0
 800d738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d73a:	bf00      	nop
 800d73c:	e000ed08 	.word	0xe000ed08

0800d740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d746:	4b46      	ldr	r3, [pc, #280]	; (800d860 <xPortStartScheduler+0x120>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a46      	ldr	r2, [pc, #280]	; (800d864 <xPortStartScheduler+0x124>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d10a      	bne.n	800d766 <xPortStartScheduler+0x26>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	613b      	str	r3, [r7, #16]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d766:	4b3e      	ldr	r3, [pc, #248]	; (800d860 <xPortStartScheduler+0x120>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a3f      	ldr	r2, [pc, #252]	; (800d868 <xPortStartScheduler+0x128>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d10a      	bne.n	800d786 <xPortStartScheduler+0x46>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d786:	4b39      	ldr	r3, [pc, #228]	; (800d86c <xPortStartScheduler+0x12c>)
 800d788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	22ff      	movs	r2, #255	; 0xff
 800d796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	4b31      	ldr	r3, [pc, #196]	; (800d870 <xPortStartScheduler+0x130>)
 800d7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7ae:	4b31      	ldr	r3, [pc, #196]	; (800d874 <xPortStartScheduler+0x134>)
 800d7b0:	2207      	movs	r2, #7
 800d7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7b4:	e009      	b.n	800d7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d7b6:	4b2f      	ldr	r3, [pc, #188]	; (800d874 <xPortStartScheduler+0x134>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	4a2d      	ldr	r2, [pc, #180]	; (800d874 <xPortStartScheduler+0x134>)
 800d7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7c0:	78fb      	ldrb	r3, [r7, #3]
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7ca:	78fb      	ldrb	r3, [r7, #3]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d2:	2b80      	cmp	r3, #128	; 0x80
 800d7d4:	d0ef      	beq.n	800d7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d7d6:	4b27      	ldr	r3, [pc, #156]	; (800d874 <xPortStartScheduler+0x134>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f1c3 0307 	rsb	r3, r3, #7
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	d00a      	beq.n	800d7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	60bb      	str	r3, [r7, #8]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	; (800d874 <xPortStartScheduler+0x134>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	021b      	lsls	r3, r3, #8
 800d7fe:	4a1d      	ldr	r2, [pc, #116]	; (800d874 <xPortStartScheduler+0x134>)
 800d800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d802:	4b1c      	ldr	r3, [pc, #112]	; (800d874 <xPortStartScheduler+0x134>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d80a:	4a1a      	ldr	r2, [pc, #104]	; (800d874 <xPortStartScheduler+0x134>)
 800d80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	b2da      	uxtb	r2, r3
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d816:	4b18      	ldr	r3, [pc, #96]	; (800d878 <xPortStartScheduler+0x138>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a17      	ldr	r2, [pc, #92]	; (800d878 <xPortStartScheduler+0x138>)
 800d81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d822:	4b15      	ldr	r3, [pc, #84]	; (800d878 <xPortStartScheduler+0x138>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a14      	ldr	r2, [pc, #80]	; (800d878 <xPortStartScheduler+0x138>)
 800d828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d82e:	f000 f8dd 	bl	800d9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d832:	4b12      	ldr	r3, [pc, #72]	; (800d87c <xPortStartScheduler+0x13c>)
 800d834:	2200      	movs	r2, #0
 800d836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d838:	f000 f8fc 	bl	800da34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d83c:	4b10      	ldr	r3, [pc, #64]	; (800d880 <xPortStartScheduler+0x140>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a0f      	ldr	r2, [pc, #60]	; (800d880 <xPortStartScheduler+0x140>)
 800d842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d848:	f7ff ff66 	bl	800d718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d84c:	f7ff fb4a 	bl	800cee4 <vTaskSwitchContext>
	prvTaskExitError();
 800d850:	f7ff ff20 	bl	800d694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	e000ed00 	.word	0xe000ed00
 800d864:	410fc271 	.word	0x410fc271
 800d868:	410fc270 	.word	0x410fc270
 800d86c:	e000e400 	.word	0xe000e400
 800d870:	2000158c 	.word	0x2000158c
 800d874:	20001590 	.word	0x20001590
 800d878:	e000ed20 	.word	0xe000ed20
 800d87c:	20000020 	.word	0x20000020
 800d880:	e000ef34 	.word	0xe000ef34

0800d884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	607b      	str	r3, [r7, #4]
}
 800d89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d89e:	4b0f      	ldr	r3, [pc, #60]	; (800d8dc <vPortEnterCritical+0x58>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	4a0d      	ldr	r2, [pc, #52]	; (800d8dc <vPortEnterCritical+0x58>)
 800d8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8a8:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <vPortEnterCritical+0x58>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d10f      	bne.n	800d8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <vPortEnterCritical+0x5c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00a      	beq.n	800d8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	603b      	str	r3, [r7, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	e7fe      	b.n	800d8ce <vPortEnterCritical+0x4a>
	}
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	20000020 	.word	0x20000020
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d8ea:	4b12      	ldr	r3, [pc, #72]	; (800d934 <vPortExitCritical+0x50>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <vPortExitCritical+0x24>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	607b      	str	r3, [r7, #4]
}
 800d904:	bf00      	nop
 800d906:	e7fe      	b.n	800d906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d908:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <vPortExitCritical+0x50>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	4a09      	ldr	r2, [pc, #36]	; (800d934 <vPortExitCritical+0x50>)
 800d910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d912:	4b08      	ldr	r3, [pc, #32]	; (800d934 <vPortExitCritical+0x50>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d105      	bne.n	800d926 <vPortExitCritical+0x42>
 800d91a:	2300      	movs	r3, #0
 800d91c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	f383 8811 	msr	BASEPRI, r3
}
 800d924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d926:	bf00      	nop
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000020 	.word	0x20000020
	...

0800d940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d940:	f3ef 8009 	mrs	r0, PSP
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	4b15      	ldr	r3, [pc, #84]	; (800d9a0 <pxCurrentTCBConst>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	f01e 0f10 	tst.w	lr, #16
 800d950:	bf08      	it	eq
 800d952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95a:	6010      	str	r0, [r2, #0]
 800d95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d964:	f380 8811 	msr	BASEPRI, r0
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f7ff fab8 	bl	800cee4 <vTaskSwitchContext>
 800d974:	f04f 0000 	mov.w	r0, #0
 800d978:	f380 8811 	msr	BASEPRI, r0
 800d97c:	bc09      	pop	{r0, r3}
 800d97e:	6819      	ldr	r1, [r3, #0]
 800d980:	6808      	ldr	r0, [r1, #0]
 800d982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d986:	f01e 0f10 	tst.w	lr, #16
 800d98a:	bf08      	it	eq
 800d98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d990:	f380 8809 	msr	PSP, r0
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	f3af 8000 	nop.w

0800d9a0 <pxCurrentTCBConst>:
 800d9a0:	20001460 	.word	0x20001460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9a4:	bf00      	nop
 800d9a6:	bf00      	nop

0800d9a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	607b      	str	r3, [r7, #4]
}
 800d9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9c2:	f7ff f9d7 	bl	800cd74 <xTaskIncrementTick>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9cc:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <SysTick_Handler+0x40>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f383 8811 	msr	BASEPRI, r3
}
 800d9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d9e0:	bf00      	nop
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	e000ed04 	.word	0xe000ed04

0800d9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9f0:	4b0b      	ldr	r3, [pc, #44]	; (800da20 <vPortSetupTimerInterrupt+0x34>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9f6:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <vPortSetupTimerInterrupt+0x38>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9fc:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <vPortSetupTimerInterrupt+0x3c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a0a      	ldr	r2, [pc, #40]	; (800da2c <vPortSetupTimerInterrupt+0x40>)
 800da02:	fba2 2303 	umull	r2, r3, r2, r3
 800da06:	099b      	lsrs	r3, r3, #6
 800da08:	4a09      	ldr	r2, [pc, #36]	; (800da30 <vPortSetupTimerInterrupt+0x44>)
 800da0a:	3b01      	subs	r3, #1
 800da0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da0e:	4b04      	ldr	r3, [pc, #16]	; (800da20 <vPortSetupTimerInterrupt+0x34>)
 800da10:	2207      	movs	r2, #7
 800da12:	601a      	str	r2, [r3, #0]
}
 800da14:	bf00      	nop
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	e000e010 	.word	0xe000e010
 800da24:	e000e018 	.word	0xe000e018
 800da28:	20000014 	.word	0x20000014
 800da2c:	10624dd3 	.word	0x10624dd3
 800da30:	e000e014 	.word	0xe000e014

0800da34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da44 <vPortEnableVFP+0x10>
 800da38:	6801      	ldr	r1, [r0, #0]
 800da3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da3e:	6001      	str	r1, [r0, #0]
 800da40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da42:	bf00      	nop
 800da44:	e000ed88 	.word	0xe000ed88

0800da48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da4e:	f3ef 8305 	mrs	r3, IPSR
 800da52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b0f      	cmp	r3, #15
 800da58:	d914      	bls.n	800da84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da5a:	4a17      	ldr	r2, [pc, #92]	; (800dab8 <vPortValidateInterruptPriority+0x70>)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da64:	4b15      	ldr	r3, [pc, #84]	; (800dabc <vPortValidateInterruptPriority+0x74>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	7afa      	ldrb	r2, [r7, #11]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d20a      	bcs.n	800da84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	607b      	str	r3, [r7, #4]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da84:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <vPortValidateInterruptPriority+0x78>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da8c:	4b0d      	ldr	r3, [pc, #52]	; (800dac4 <vPortValidateInterruptPriority+0x7c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d90a      	bls.n	800daaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	603b      	str	r3, [r7, #0]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <vPortValidateInterruptPriority+0x60>
	}
 800daaa:	bf00      	nop
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	e000e3f0 	.word	0xe000e3f0
 800dabc:	2000158c 	.word	0x2000158c
 800dac0:	e000ed0c 	.word	0xe000ed0c
 800dac4:	20001590 	.word	0x20001590

0800dac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b08a      	sub	sp, #40	; 0x28
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dad4:	f7ff f8a4 	bl	800cc20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dad8:	4b5b      	ldr	r3, [pc, #364]	; (800dc48 <pvPortMalloc+0x180>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d101      	bne.n	800dae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dae0:	f000 f920 	bl	800dd24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dae4:	4b59      	ldr	r3, [pc, #356]	; (800dc4c <pvPortMalloc+0x184>)
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4013      	ands	r3, r2
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 8093 	bne.w	800dc18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d01d      	beq.n	800db34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800daf8:	2208      	movs	r2, #8
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4413      	add	r3, r2
 800dafe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f003 0307 	and.w	r3, r3, #7
 800db06:	2b00      	cmp	r3, #0
 800db08:	d014      	beq.n	800db34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f023 0307 	bic.w	r3, r3, #7
 800db10:	3308      	adds	r3, #8
 800db12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f003 0307 	and.w	r3, r3, #7
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <pvPortMalloc+0x6c>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	617b      	str	r3, [r7, #20]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d06e      	beq.n	800dc18 <pvPortMalloc+0x150>
 800db3a:	4b45      	ldr	r3, [pc, #276]	; (800dc50 <pvPortMalloc+0x188>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	429a      	cmp	r2, r3
 800db42:	d869      	bhi.n	800dc18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db44:	4b43      	ldr	r3, [pc, #268]	; (800dc54 <pvPortMalloc+0x18c>)
 800db46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db48:	4b42      	ldr	r3, [pc, #264]	; (800dc54 <pvPortMalloc+0x18c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db4e:	e004      	b.n	800db5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	429a      	cmp	r2, r3
 800db62:	d903      	bls.n	800db6c <pvPortMalloc+0xa4>
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1f1      	bne.n	800db50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db6c:	4b36      	ldr	r3, [pc, #216]	; (800dc48 <pvPortMalloc+0x180>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db72:	429a      	cmp	r2, r3
 800db74:	d050      	beq.n	800dc18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2208      	movs	r2, #8
 800db7c:	4413      	add	r3, r2
 800db7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	2308      	movs	r3, #8
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	429a      	cmp	r2, r3
 800db96:	d91f      	bls.n	800dbd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4413      	add	r3, r2
 800db9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	f003 0307 	and.w	r3, r3, #7
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00a      	beq.n	800dbc0 <pvPortMalloc+0xf8>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	613b      	str	r3, [r7, #16]
}
 800dbbc:	bf00      	nop
 800dbbe:	e7fe      	b.n	800dbbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	1ad2      	subs	r2, r2, r3
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dbd2:	69b8      	ldr	r0, [r7, #24]
 800dbd4:	f000 f908 	bl	800dde8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dbd8:	4b1d      	ldr	r3, [pc, #116]	; (800dc50 <pvPortMalloc+0x188>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	4a1b      	ldr	r2, [pc, #108]	; (800dc50 <pvPortMalloc+0x188>)
 800dbe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbe6:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <pvPortMalloc+0x188>)
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	4b1b      	ldr	r3, [pc, #108]	; (800dc58 <pvPortMalloc+0x190>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d203      	bcs.n	800dbfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dbf2:	4b17      	ldr	r3, [pc, #92]	; (800dc50 <pvPortMalloc+0x188>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a18      	ldr	r2, [pc, #96]	; (800dc58 <pvPortMalloc+0x190>)
 800dbf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	4b13      	ldr	r3, [pc, #76]	; (800dc4c <pvPortMalloc+0x184>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	431a      	orrs	r2, r3
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc0e:	4b13      	ldr	r3, [pc, #76]	; (800dc5c <pvPortMalloc+0x194>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3301      	adds	r3, #1
 800dc14:	4a11      	ldr	r2, [pc, #68]	; (800dc5c <pvPortMalloc+0x194>)
 800dc16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc18:	f7ff f810 	bl	800cc3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	f003 0307 	and.w	r3, r3, #7
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00a      	beq.n	800dc3c <pvPortMalloc+0x174>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	60fb      	str	r3, [r7, #12]
}
 800dc38:	bf00      	nop
 800dc3a:	e7fe      	b.n	800dc3a <pvPortMalloc+0x172>
	return pvReturn;
 800dc3c:	69fb      	ldr	r3, [r7, #28]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3728      	adds	r7, #40	; 0x28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	2000519c 	.word	0x2000519c
 800dc4c:	200051b0 	.word	0x200051b0
 800dc50:	200051a0 	.word	0x200051a0
 800dc54:	20005194 	.word	0x20005194
 800dc58:	200051a4 	.word	0x200051a4
 800dc5c:	200051a8 	.word	0x200051a8

0800dc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d04d      	beq.n	800dd0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc72:	2308      	movs	r3, #8
 800dc74:	425b      	negs	r3, r3
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	4413      	add	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	685a      	ldr	r2, [r3, #4]
 800dc84:	4b24      	ldr	r3, [pc, #144]	; (800dd18 <vPortFree+0xb8>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4013      	ands	r3, r2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10a      	bne.n	800dca4 <vPortFree+0x44>
	__asm volatile
 800dc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc92:	f383 8811 	msr	BASEPRI, r3
 800dc96:	f3bf 8f6f 	isb	sy
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	60fb      	str	r3, [r7, #12]
}
 800dca0:	bf00      	nop
 800dca2:	e7fe      	b.n	800dca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00a      	beq.n	800dcc2 <vPortFree+0x62>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	60bb      	str	r3, [r7, #8]
}
 800dcbe:	bf00      	nop
 800dcc0:	e7fe      	b.n	800dcc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	685a      	ldr	r2, [r3, #4]
 800dcc6:	4b14      	ldr	r3, [pc, #80]	; (800dd18 <vPortFree+0xb8>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4013      	ands	r3, r2
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d01e      	beq.n	800dd0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d11a      	bne.n	800dd0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	4b0e      	ldr	r3, [pc, #56]	; (800dd18 <vPortFree+0xb8>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	43db      	mvns	r3, r3
 800dce2:	401a      	ands	r2, r3
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dce8:	f7fe ff9a 	bl	800cc20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	685a      	ldr	r2, [r3, #4]
 800dcf0:	4b0a      	ldr	r3, [pc, #40]	; (800dd1c <vPortFree+0xbc>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	4a09      	ldr	r2, [pc, #36]	; (800dd1c <vPortFree+0xbc>)
 800dcf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcfa:	6938      	ldr	r0, [r7, #16]
 800dcfc:	f000 f874 	bl	800dde8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd00:	4b07      	ldr	r3, [pc, #28]	; (800dd20 <vPortFree+0xc0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3301      	adds	r3, #1
 800dd06:	4a06      	ldr	r2, [pc, #24]	; (800dd20 <vPortFree+0xc0>)
 800dd08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd0a:	f7fe ff97 	bl	800cc3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd0e:	bf00      	nop
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	200051b0 	.word	0x200051b0
 800dd1c:	200051a0 	.word	0x200051a0
 800dd20:	200051ac 	.word	0x200051ac

0800dd24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd30:	4b27      	ldr	r3, [pc, #156]	; (800ddd0 <prvHeapInit+0xac>)
 800dd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f003 0307 	and.w	r3, r3, #7
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00c      	beq.n	800dd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3307      	adds	r3, #7
 800dd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f023 0307 	bic.w	r3, r3, #7
 800dd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	4a1f      	ldr	r2, [pc, #124]	; (800ddd0 <prvHeapInit+0xac>)
 800dd54:	4413      	add	r3, r2
 800dd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd5c:	4a1d      	ldr	r2, [pc, #116]	; (800ddd4 <prvHeapInit+0xb0>)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd62:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <prvHeapInit+0xb0>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd70:	2208      	movs	r2, #8
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1a9b      	subs	r3, r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f023 0307 	bic.w	r3, r3, #7
 800dd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4a15      	ldr	r2, [pc, #84]	; (800ddd8 <prvHeapInit+0xb4>)
 800dd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd86:	4b14      	ldr	r3, [pc, #80]	; (800ddd8 <prvHeapInit+0xb4>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd8e:	4b12      	ldr	r3, [pc, #72]	; (800ddd8 <prvHeapInit+0xb4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2200      	movs	r2, #0
 800dd94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	1ad2      	subs	r2, r2, r3
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dda4:	4b0c      	ldr	r3, [pc, #48]	; (800ddd8 <prvHeapInit+0xb4>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	4a0a      	ldr	r2, [pc, #40]	; (800dddc <prvHeapInit+0xb8>)
 800ddb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4a09      	ldr	r2, [pc, #36]	; (800dde0 <prvHeapInit+0xbc>)
 800ddba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ddbc:	4b09      	ldr	r3, [pc, #36]	; (800dde4 <prvHeapInit+0xc0>)
 800ddbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ddc2:	601a      	str	r2, [r3, #0]
}
 800ddc4:	bf00      	nop
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	20001594 	.word	0x20001594
 800ddd4:	20005194 	.word	0x20005194
 800ddd8:	2000519c 	.word	0x2000519c
 800dddc:	200051a4 	.word	0x200051a4
 800dde0:	200051a0 	.word	0x200051a0
 800dde4:	200051b0 	.word	0x200051b0

0800dde8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ddf0:	4b28      	ldr	r3, [pc, #160]	; (800de94 <prvInsertBlockIntoFreeList+0xac>)
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	e002      	b.n	800ddfc <prvInsertBlockIntoFreeList+0x14>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d8f7      	bhi.n	800ddf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	4413      	add	r3, r2
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	429a      	cmp	r2, r3
 800de16:	d108      	bne.n	800de2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	441a      	add	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	441a      	add	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d118      	bne.n	800de70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <prvInsertBlockIntoFreeList+0xb0>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	429a      	cmp	r2, r3
 800de48:	d00d      	beq.n	800de66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	441a      	add	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	e008      	b.n	800de78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de66:	4b0c      	ldr	r3, [pc, #48]	; (800de98 <prvInsertBlockIntoFreeList+0xb0>)
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	e003      	b.n	800de78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d002      	beq.n	800de86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de86:	bf00      	nop
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	20005194 	.word	0x20005194
 800de98:	2000519c 	.word	0x2000519c

0800de9c <__cvt>:
 800de9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dea0:	ec55 4b10 	vmov	r4, r5, d0
 800dea4:	2d00      	cmp	r5, #0
 800dea6:	460e      	mov	r6, r1
 800dea8:	4619      	mov	r1, r3
 800deaa:	462b      	mov	r3, r5
 800deac:	bfbb      	ittet	lt
 800deae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deb2:	461d      	movlt	r5, r3
 800deb4:	2300      	movge	r3, #0
 800deb6:	232d      	movlt	r3, #45	; 0x2d
 800deb8:	700b      	strb	r3, [r1, #0]
 800deba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800debc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dec0:	4691      	mov	r9, r2
 800dec2:	f023 0820 	bic.w	r8, r3, #32
 800dec6:	bfbc      	itt	lt
 800dec8:	4622      	movlt	r2, r4
 800deca:	4614      	movlt	r4, r2
 800decc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ded0:	d005      	beq.n	800dede <__cvt+0x42>
 800ded2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ded6:	d100      	bne.n	800deda <__cvt+0x3e>
 800ded8:	3601      	adds	r6, #1
 800deda:	2102      	movs	r1, #2
 800dedc:	e000      	b.n	800dee0 <__cvt+0x44>
 800dede:	2103      	movs	r1, #3
 800dee0:	ab03      	add	r3, sp, #12
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	ab02      	add	r3, sp, #8
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	ec45 4b10 	vmov	d0, r4, r5
 800deec:	4653      	mov	r3, sl
 800deee:	4632      	mov	r2, r6
 800def0:	f000 fed6 	bl	800eca0 <_dtoa_r>
 800def4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800def8:	4607      	mov	r7, r0
 800defa:	d102      	bne.n	800df02 <__cvt+0x66>
 800defc:	f019 0f01 	tst.w	r9, #1
 800df00:	d022      	beq.n	800df48 <__cvt+0xac>
 800df02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df06:	eb07 0906 	add.w	r9, r7, r6
 800df0a:	d110      	bne.n	800df2e <__cvt+0x92>
 800df0c:	783b      	ldrb	r3, [r7, #0]
 800df0e:	2b30      	cmp	r3, #48	; 0x30
 800df10:	d10a      	bne.n	800df28 <__cvt+0x8c>
 800df12:	2200      	movs	r2, #0
 800df14:	2300      	movs	r3, #0
 800df16:	4620      	mov	r0, r4
 800df18:	4629      	mov	r1, r5
 800df1a:	f7f2 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800df1e:	b918      	cbnz	r0, 800df28 <__cvt+0x8c>
 800df20:	f1c6 0601 	rsb	r6, r6, #1
 800df24:	f8ca 6000 	str.w	r6, [sl]
 800df28:	f8da 3000 	ldr.w	r3, [sl]
 800df2c:	4499      	add	r9, r3
 800df2e:	2200      	movs	r2, #0
 800df30:	2300      	movs	r3, #0
 800df32:	4620      	mov	r0, r4
 800df34:	4629      	mov	r1, r5
 800df36:	f7f2 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800df3a:	b108      	cbz	r0, 800df40 <__cvt+0xa4>
 800df3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800df40:	2230      	movs	r2, #48	; 0x30
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	454b      	cmp	r3, r9
 800df46:	d307      	bcc.n	800df58 <__cvt+0xbc>
 800df48:	9b03      	ldr	r3, [sp, #12]
 800df4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df4c:	1bdb      	subs	r3, r3, r7
 800df4e:	4638      	mov	r0, r7
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	b004      	add	sp, #16
 800df54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df58:	1c59      	adds	r1, r3, #1
 800df5a:	9103      	str	r1, [sp, #12]
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	e7f0      	b.n	800df42 <__cvt+0xa6>

0800df60 <__exponent>:
 800df60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df62:	4603      	mov	r3, r0
 800df64:	2900      	cmp	r1, #0
 800df66:	bfb8      	it	lt
 800df68:	4249      	neglt	r1, r1
 800df6a:	f803 2b02 	strb.w	r2, [r3], #2
 800df6e:	bfb4      	ite	lt
 800df70:	222d      	movlt	r2, #45	; 0x2d
 800df72:	222b      	movge	r2, #43	; 0x2b
 800df74:	2909      	cmp	r1, #9
 800df76:	7042      	strb	r2, [r0, #1]
 800df78:	dd2a      	ble.n	800dfd0 <__exponent+0x70>
 800df7a:	f10d 0207 	add.w	r2, sp, #7
 800df7e:	4617      	mov	r7, r2
 800df80:	260a      	movs	r6, #10
 800df82:	4694      	mov	ip, r2
 800df84:	fb91 f5f6 	sdiv	r5, r1, r6
 800df88:	fb06 1415 	mls	r4, r6, r5, r1
 800df8c:	3430      	adds	r4, #48	; 0x30
 800df8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800df92:	460c      	mov	r4, r1
 800df94:	2c63      	cmp	r4, #99	; 0x63
 800df96:	f102 32ff 	add.w	r2, r2, #4294967295
 800df9a:	4629      	mov	r1, r5
 800df9c:	dcf1      	bgt.n	800df82 <__exponent+0x22>
 800df9e:	3130      	adds	r1, #48	; 0x30
 800dfa0:	f1ac 0402 	sub.w	r4, ip, #2
 800dfa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dfa8:	1c41      	adds	r1, r0, #1
 800dfaa:	4622      	mov	r2, r4
 800dfac:	42ba      	cmp	r2, r7
 800dfae:	d30a      	bcc.n	800dfc6 <__exponent+0x66>
 800dfb0:	f10d 0209 	add.w	r2, sp, #9
 800dfb4:	eba2 020c 	sub.w	r2, r2, ip
 800dfb8:	42bc      	cmp	r4, r7
 800dfba:	bf88      	it	hi
 800dfbc:	2200      	movhi	r2, #0
 800dfbe:	4413      	add	r3, r2
 800dfc0:	1a18      	subs	r0, r3, r0
 800dfc2:	b003      	add	sp, #12
 800dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dfca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dfce:	e7ed      	b.n	800dfac <__exponent+0x4c>
 800dfd0:	2330      	movs	r3, #48	; 0x30
 800dfd2:	3130      	adds	r1, #48	; 0x30
 800dfd4:	7083      	strb	r3, [r0, #2]
 800dfd6:	70c1      	strb	r1, [r0, #3]
 800dfd8:	1d03      	adds	r3, r0, #4
 800dfda:	e7f1      	b.n	800dfc0 <__exponent+0x60>

0800dfdc <_printf_float>:
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe0:	ed2d 8b02 	vpush	{d8}
 800dfe4:	b08d      	sub	sp, #52	; 0x34
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfec:	4616      	mov	r6, r2
 800dfee:	461f      	mov	r7, r3
 800dff0:	4605      	mov	r5, r0
 800dff2:	f000 fce7 	bl	800e9c4 <_localeconv_r>
 800dff6:	f8d0 a000 	ldr.w	sl, [r0]
 800dffa:	4650      	mov	r0, sl
 800dffc:	f7f2 f938 	bl	8000270 <strlen>
 800e000:	2300      	movs	r3, #0
 800e002:	930a      	str	r3, [sp, #40]	; 0x28
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	f8d8 3000 	ldr.w	r3, [r8]
 800e00c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e010:	3307      	adds	r3, #7
 800e012:	f023 0307 	bic.w	r3, r3, #7
 800e016:	f103 0208 	add.w	r2, r3, #8
 800e01a:	f8c8 2000 	str.w	r2, [r8]
 800e01e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e026:	9307      	str	r3, [sp, #28]
 800e028:	f8cd 8018 	str.w	r8, [sp, #24]
 800e02c:	ee08 0a10 	vmov	s16, r0
 800e030:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e038:	4b9e      	ldr	r3, [pc, #632]	; (800e2b4 <_printf_float+0x2d8>)
 800e03a:	f04f 32ff 	mov.w	r2, #4294967295
 800e03e:	f7f2 fd75 	bl	8000b2c <__aeabi_dcmpun>
 800e042:	bb88      	cbnz	r0, 800e0a8 <_printf_float+0xcc>
 800e044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e048:	4b9a      	ldr	r3, [pc, #616]	; (800e2b4 <_printf_float+0x2d8>)
 800e04a:	f04f 32ff 	mov.w	r2, #4294967295
 800e04e:	f7f2 fd4f 	bl	8000af0 <__aeabi_dcmple>
 800e052:	bb48      	cbnz	r0, 800e0a8 <_printf_float+0xcc>
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	f7f2 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800e060:	b110      	cbz	r0, 800e068 <_printf_float+0x8c>
 800e062:	232d      	movs	r3, #45	; 0x2d
 800e064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e068:	4a93      	ldr	r2, [pc, #588]	; (800e2b8 <_printf_float+0x2dc>)
 800e06a:	4b94      	ldr	r3, [pc, #592]	; (800e2bc <_printf_float+0x2e0>)
 800e06c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e070:	bf94      	ite	ls
 800e072:	4690      	movls	r8, r2
 800e074:	4698      	movhi	r8, r3
 800e076:	2303      	movs	r3, #3
 800e078:	6123      	str	r3, [r4, #16]
 800e07a:	9b05      	ldr	r3, [sp, #20]
 800e07c:	f023 0304 	bic.w	r3, r3, #4
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	f04f 0900 	mov.w	r9, #0
 800e086:	9700      	str	r7, [sp, #0]
 800e088:	4633      	mov	r3, r6
 800e08a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e08c:	4621      	mov	r1, r4
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 f9da 	bl	800e448 <_printf_common>
 800e094:	3001      	adds	r0, #1
 800e096:	f040 8090 	bne.w	800e1ba <_printf_float+0x1de>
 800e09a:	f04f 30ff 	mov.w	r0, #4294967295
 800e09e:	b00d      	add	sp, #52	; 0x34
 800e0a0:	ecbd 8b02 	vpop	{d8}
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a8:	4642      	mov	r2, r8
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7f2 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 800e0b4:	b140      	cbz	r0, 800e0c8 <_printf_float+0xec>
 800e0b6:	464b      	mov	r3, r9
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	bfbc      	itt	lt
 800e0bc:	232d      	movlt	r3, #45	; 0x2d
 800e0be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0c2:	4a7f      	ldr	r2, [pc, #508]	; (800e2c0 <_printf_float+0x2e4>)
 800e0c4:	4b7f      	ldr	r3, [pc, #508]	; (800e2c4 <_printf_float+0x2e8>)
 800e0c6:	e7d1      	b.n	800e06c <_printf_float+0x90>
 800e0c8:	6863      	ldr	r3, [r4, #4]
 800e0ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0ce:	9206      	str	r2, [sp, #24]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	d13f      	bne.n	800e154 <_printf_float+0x178>
 800e0d4:	2306      	movs	r3, #6
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	9b05      	ldr	r3, [sp, #20]
 800e0da:	6861      	ldr	r1, [r4, #4]
 800e0dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	ab0a      	add	r3, sp, #40	; 0x28
 800e0e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0ea:	ab09      	add	r3, sp, #36	; 0x24
 800e0ec:	ec49 8b10 	vmov	d0, r8, r9
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	6022      	str	r2, [r4, #0]
 800e0f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7ff fecf 	bl	800de9c <__cvt>
 800e0fe:	9b06      	ldr	r3, [sp, #24]
 800e100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e102:	2b47      	cmp	r3, #71	; 0x47
 800e104:	4680      	mov	r8, r0
 800e106:	d108      	bne.n	800e11a <_printf_float+0x13e>
 800e108:	1cc8      	adds	r0, r1, #3
 800e10a:	db02      	blt.n	800e112 <_printf_float+0x136>
 800e10c:	6863      	ldr	r3, [r4, #4]
 800e10e:	4299      	cmp	r1, r3
 800e110:	dd41      	ble.n	800e196 <_printf_float+0x1ba>
 800e112:	f1ab 0302 	sub.w	r3, fp, #2
 800e116:	fa5f fb83 	uxtb.w	fp, r3
 800e11a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e11e:	d820      	bhi.n	800e162 <_printf_float+0x186>
 800e120:	3901      	subs	r1, #1
 800e122:	465a      	mov	r2, fp
 800e124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e128:	9109      	str	r1, [sp, #36]	; 0x24
 800e12a:	f7ff ff19 	bl	800df60 <__exponent>
 800e12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e130:	1813      	adds	r3, r2, r0
 800e132:	2a01      	cmp	r2, #1
 800e134:	4681      	mov	r9, r0
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	dc02      	bgt.n	800e140 <_printf_float+0x164>
 800e13a:	6822      	ldr	r2, [r4, #0]
 800e13c:	07d2      	lsls	r2, r2, #31
 800e13e:	d501      	bpl.n	800e144 <_printf_float+0x168>
 800e140:	3301      	adds	r3, #1
 800e142:	6123      	str	r3, [r4, #16]
 800e144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d09c      	beq.n	800e086 <_printf_float+0xaa>
 800e14c:	232d      	movs	r3, #45	; 0x2d
 800e14e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e152:	e798      	b.n	800e086 <_printf_float+0xaa>
 800e154:	9a06      	ldr	r2, [sp, #24]
 800e156:	2a47      	cmp	r2, #71	; 0x47
 800e158:	d1be      	bne.n	800e0d8 <_printf_float+0xfc>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1bc      	bne.n	800e0d8 <_printf_float+0xfc>
 800e15e:	2301      	movs	r3, #1
 800e160:	e7b9      	b.n	800e0d6 <_printf_float+0xfa>
 800e162:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e166:	d118      	bne.n	800e19a <_printf_float+0x1be>
 800e168:	2900      	cmp	r1, #0
 800e16a:	6863      	ldr	r3, [r4, #4]
 800e16c:	dd0b      	ble.n	800e186 <_printf_float+0x1aa>
 800e16e:	6121      	str	r1, [r4, #16]
 800e170:	b913      	cbnz	r3, 800e178 <_printf_float+0x19c>
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	07d0      	lsls	r0, r2, #31
 800e176:	d502      	bpl.n	800e17e <_printf_float+0x1a2>
 800e178:	3301      	adds	r3, #1
 800e17a:	440b      	add	r3, r1
 800e17c:	6123      	str	r3, [r4, #16]
 800e17e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e180:	f04f 0900 	mov.w	r9, #0
 800e184:	e7de      	b.n	800e144 <_printf_float+0x168>
 800e186:	b913      	cbnz	r3, 800e18e <_printf_float+0x1b2>
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	07d2      	lsls	r2, r2, #31
 800e18c:	d501      	bpl.n	800e192 <_printf_float+0x1b6>
 800e18e:	3302      	adds	r3, #2
 800e190:	e7f4      	b.n	800e17c <_printf_float+0x1a0>
 800e192:	2301      	movs	r3, #1
 800e194:	e7f2      	b.n	800e17c <_printf_float+0x1a0>
 800e196:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19c:	4299      	cmp	r1, r3
 800e19e:	db05      	blt.n	800e1ac <_printf_float+0x1d0>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	6121      	str	r1, [r4, #16]
 800e1a4:	07d8      	lsls	r0, r3, #31
 800e1a6:	d5ea      	bpl.n	800e17e <_printf_float+0x1a2>
 800e1a8:	1c4b      	adds	r3, r1, #1
 800e1aa:	e7e7      	b.n	800e17c <_printf_float+0x1a0>
 800e1ac:	2900      	cmp	r1, #0
 800e1ae:	bfd4      	ite	le
 800e1b0:	f1c1 0202 	rsble	r2, r1, #2
 800e1b4:	2201      	movgt	r2, #1
 800e1b6:	4413      	add	r3, r2
 800e1b8:	e7e0      	b.n	800e17c <_printf_float+0x1a0>
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	055a      	lsls	r2, r3, #21
 800e1be:	d407      	bmi.n	800e1d0 <_printf_float+0x1f4>
 800e1c0:	6923      	ldr	r3, [r4, #16]
 800e1c2:	4642      	mov	r2, r8
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b8      	blx	r7
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	d12c      	bne.n	800e228 <_printf_float+0x24c>
 800e1ce:	e764      	b.n	800e09a <_printf_float+0xbe>
 800e1d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1d4:	f240 80e0 	bls.w	800e398 <_printf_float+0x3bc>
 800e1d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f7f2 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d034      	beq.n	800e252 <_printf_float+0x276>
 800e1e8:	4a37      	ldr	r2, [pc, #220]	; (800e2c8 <_printf_float+0x2ec>)
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	47b8      	blx	r7
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	f43f af51 	beq.w	800e09a <_printf_float+0xbe>
 800e1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	db02      	blt.n	800e206 <_printf_float+0x22a>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	07d8      	lsls	r0, r3, #31
 800e204:	d510      	bpl.n	800e228 <_printf_float+0x24c>
 800e206:	ee18 3a10 	vmov	r3, s16
 800e20a:	4652      	mov	r2, sl
 800e20c:	4631      	mov	r1, r6
 800e20e:	4628      	mov	r0, r5
 800e210:	47b8      	blx	r7
 800e212:	3001      	adds	r0, #1
 800e214:	f43f af41 	beq.w	800e09a <_printf_float+0xbe>
 800e218:	f04f 0800 	mov.w	r8, #0
 800e21c:	f104 091a 	add.w	r9, r4, #26
 800e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e222:	3b01      	subs	r3, #1
 800e224:	4543      	cmp	r3, r8
 800e226:	dc09      	bgt.n	800e23c <_printf_float+0x260>
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	079b      	lsls	r3, r3, #30
 800e22c:	f100 8107 	bmi.w	800e43e <_printf_float+0x462>
 800e230:	68e0      	ldr	r0, [r4, #12]
 800e232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e234:	4298      	cmp	r0, r3
 800e236:	bfb8      	it	lt
 800e238:	4618      	movlt	r0, r3
 800e23a:	e730      	b.n	800e09e <_printf_float+0xc2>
 800e23c:	2301      	movs	r3, #1
 800e23e:	464a      	mov	r2, r9
 800e240:	4631      	mov	r1, r6
 800e242:	4628      	mov	r0, r5
 800e244:	47b8      	blx	r7
 800e246:	3001      	adds	r0, #1
 800e248:	f43f af27 	beq.w	800e09a <_printf_float+0xbe>
 800e24c:	f108 0801 	add.w	r8, r8, #1
 800e250:	e7e6      	b.n	800e220 <_printf_float+0x244>
 800e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	dc39      	bgt.n	800e2cc <_printf_float+0x2f0>
 800e258:	4a1b      	ldr	r2, [pc, #108]	; (800e2c8 <_printf_float+0x2ec>)
 800e25a:	2301      	movs	r3, #1
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	47b8      	blx	r7
 800e262:	3001      	adds	r0, #1
 800e264:	f43f af19 	beq.w	800e09a <_printf_float+0xbe>
 800e268:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e26c:	4313      	orrs	r3, r2
 800e26e:	d102      	bne.n	800e276 <_printf_float+0x29a>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	07d9      	lsls	r1, r3, #31
 800e274:	d5d8      	bpl.n	800e228 <_printf_float+0x24c>
 800e276:	ee18 3a10 	vmov	r3, s16
 800e27a:	4652      	mov	r2, sl
 800e27c:	4631      	mov	r1, r6
 800e27e:	4628      	mov	r0, r5
 800e280:	47b8      	blx	r7
 800e282:	3001      	adds	r0, #1
 800e284:	f43f af09 	beq.w	800e09a <_printf_float+0xbe>
 800e288:	f04f 0900 	mov.w	r9, #0
 800e28c:	f104 0a1a 	add.w	sl, r4, #26
 800e290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e292:	425b      	negs	r3, r3
 800e294:	454b      	cmp	r3, r9
 800e296:	dc01      	bgt.n	800e29c <_printf_float+0x2c0>
 800e298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e29a:	e792      	b.n	800e1c2 <_printf_float+0x1e6>
 800e29c:	2301      	movs	r3, #1
 800e29e:	4652      	mov	r2, sl
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b8      	blx	r7
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f43f aef7 	beq.w	800e09a <_printf_float+0xbe>
 800e2ac:	f109 0901 	add.w	r9, r9, #1
 800e2b0:	e7ee      	b.n	800e290 <_printf_float+0x2b4>
 800e2b2:	bf00      	nop
 800e2b4:	7fefffff 	.word	0x7fefffff
 800e2b8:	080131b4 	.word	0x080131b4
 800e2bc:	080131b8 	.word	0x080131b8
 800e2c0:	080131bc 	.word	0x080131bc
 800e2c4:	080131c0 	.word	0x080131c0
 800e2c8:	080131c4 	.word	0x080131c4
 800e2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	bfa8      	it	ge
 800e2d4:	461a      	movge	r2, r3
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	4691      	mov	r9, r2
 800e2da:	dc37      	bgt.n	800e34c <_printf_float+0x370>
 800e2dc:	f04f 0b00 	mov.w	fp, #0
 800e2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2e4:	f104 021a 	add.w	r2, r4, #26
 800e2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2ea:	9305      	str	r3, [sp, #20]
 800e2ec:	eba3 0309 	sub.w	r3, r3, r9
 800e2f0:	455b      	cmp	r3, fp
 800e2f2:	dc33      	bgt.n	800e35c <_printf_float+0x380>
 800e2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	db3b      	blt.n	800e374 <_printf_float+0x398>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	07da      	lsls	r2, r3, #31
 800e300:	d438      	bmi.n	800e374 <_printf_float+0x398>
 800e302:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e306:	eba2 0903 	sub.w	r9, r2, r3
 800e30a:	9b05      	ldr	r3, [sp, #20]
 800e30c:	1ad2      	subs	r2, r2, r3
 800e30e:	4591      	cmp	r9, r2
 800e310:	bfa8      	it	ge
 800e312:	4691      	movge	r9, r2
 800e314:	f1b9 0f00 	cmp.w	r9, #0
 800e318:	dc35      	bgt.n	800e386 <_printf_float+0x3aa>
 800e31a:	f04f 0800 	mov.w	r8, #0
 800e31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e322:	f104 0a1a 	add.w	sl, r4, #26
 800e326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	eba3 0309 	sub.w	r3, r3, r9
 800e330:	4543      	cmp	r3, r8
 800e332:	f77f af79 	ble.w	800e228 <_printf_float+0x24c>
 800e336:	2301      	movs	r3, #1
 800e338:	4652      	mov	r2, sl
 800e33a:	4631      	mov	r1, r6
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b8      	blx	r7
 800e340:	3001      	adds	r0, #1
 800e342:	f43f aeaa 	beq.w	800e09a <_printf_float+0xbe>
 800e346:	f108 0801 	add.w	r8, r8, #1
 800e34a:	e7ec      	b.n	800e326 <_printf_float+0x34a>
 800e34c:	4613      	mov	r3, r2
 800e34e:	4631      	mov	r1, r6
 800e350:	4642      	mov	r2, r8
 800e352:	4628      	mov	r0, r5
 800e354:	47b8      	blx	r7
 800e356:	3001      	adds	r0, #1
 800e358:	d1c0      	bne.n	800e2dc <_printf_float+0x300>
 800e35a:	e69e      	b.n	800e09a <_printf_float+0xbe>
 800e35c:	2301      	movs	r3, #1
 800e35e:	4631      	mov	r1, r6
 800e360:	4628      	mov	r0, r5
 800e362:	9205      	str	r2, [sp, #20]
 800e364:	47b8      	blx	r7
 800e366:	3001      	adds	r0, #1
 800e368:	f43f ae97 	beq.w	800e09a <_printf_float+0xbe>
 800e36c:	9a05      	ldr	r2, [sp, #20]
 800e36e:	f10b 0b01 	add.w	fp, fp, #1
 800e372:	e7b9      	b.n	800e2e8 <_printf_float+0x30c>
 800e374:	ee18 3a10 	vmov	r3, s16
 800e378:	4652      	mov	r2, sl
 800e37a:	4631      	mov	r1, r6
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b8      	blx	r7
 800e380:	3001      	adds	r0, #1
 800e382:	d1be      	bne.n	800e302 <_printf_float+0x326>
 800e384:	e689      	b.n	800e09a <_printf_float+0xbe>
 800e386:	9a05      	ldr	r2, [sp, #20]
 800e388:	464b      	mov	r3, r9
 800e38a:	4442      	add	r2, r8
 800e38c:	4631      	mov	r1, r6
 800e38e:	4628      	mov	r0, r5
 800e390:	47b8      	blx	r7
 800e392:	3001      	adds	r0, #1
 800e394:	d1c1      	bne.n	800e31a <_printf_float+0x33e>
 800e396:	e680      	b.n	800e09a <_printf_float+0xbe>
 800e398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e39a:	2a01      	cmp	r2, #1
 800e39c:	dc01      	bgt.n	800e3a2 <_printf_float+0x3c6>
 800e39e:	07db      	lsls	r3, r3, #31
 800e3a0:	d53a      	bpl.n	800e418 <_printf_float+0x43c>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	4642      	mov	r2, r8
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b8      	blx	r7
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	f43f ae74 	beq.w	800e09a <_printf_float+0xbe>
 800e3b2:	ee18 3a10 	vmov	r3, s16
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	47b8      	blx	r7
 800e3be:	3001      	adds	r0, #1
 800e3c0:	f43f ae6b 	beq.w	800e09a <_printf_float+0xbe>
 800e3c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e3d0:	f7f2 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d4:	b9d8      	cbnz	r0, 800e40e <_printf_float+0x432>
 800e3d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e3da:	f108 0201 	add.w	r2, r8, #1
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	47b8      	blx	r7
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	d10e      	bne.n	800e406 <_printf_float+0x42a>
 800e3e8:	e657      	b.n	800e09a <_printf_float+0xbe>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4652      	mov	r2, sl
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f43f ae50 	beq.w	800e09a <_printf_float+0xbe>
 800e3fa:	f108 0801 	add.w	r8, r8, #1
 800e3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e400:	3b01      	subs	r3, #1
 800e402:	4543      	cmp	r3, r8
 800e404:	dcf1      	bgt.n	800e3ea <_printf_float+0x40e>
 800e406:	464b      	mov	r3, r9
 800e408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e40c:	e6da      	b.n	800e1c4 <_printf_float+0x1e8>
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	f104 0a1a 	add.w	sl, r4, #26
 800e416:	e7f2      	b.n	800e3fe <_printf_float+0x422>
 800e418:	2301      	movs	r3, #1
 800e41a:	4642      	mov	r2, r8
 800e41c:	e7df      	b.n	800e3de <_printf_float+0x402>
 800e41e:	2301      	movs	r3, #1
 800e420:	464a      	mov	r2, r9
 800e422:	4631      	mov	r1, r6
 800e424:	4628      	mov	r0, r5
 800e426:	47b8      	blx	r7
 800e428:	3001      	adds	r0, #1
 800e42a:	f43f ae36 	beq.w	800e09a <_printf_float+0xbe>
 800e42e:	f108 0801 	add.w	r8, r8, #1
 800e432:	68e3      	ldr	r3, [r4, #12]
 800e434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e436:	1a5b      	subs	r3, r3, r1
 800e438:	4543      	cmp	r3, r8
 800e43a:	dcf0      	bgt.n	800e41e <_printf_float+0x442>
 800e43c:	e6f8      	b.n	800e230 <_printf_float+0x254>
 800e43e:	f04f 0800 	mov.w	r8, #0
 800e442:	f104 0919 	add.w	r9, r4, #25
 800e446:	e7f4      	b.n	800e432 <_printf_float+0x456>

0800e448 <_printf_common>:
 800e448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e44c:	4616      	mov	r6, r2
 800e44e:	4699      	mov	r9, r3
 800e450:	688a      	ldr	r2, [r1, #8]
 800e452:	690b      	ldr	r3, [r1, #16]
 800e454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e458:	4293      	cmp	r3, r2
 800e45a:	bfb8      	it	lt
 800e45c:	4613      	movlt	r3, r2
 800e45e:	6033      	str	r3, [r6, #0]
 800e460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e464:	4607      	mov	r7, r0
 800e466:	460c      	mov	r4, r1
 800e468:	b10a      	cbz	r2, 800e46e <_printf_common+0x26>
 800e46a:	3301      	adds	r3, #1
 800e46c:	6033      	str	r3, [r6, #0]
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	0699      	lsls	r1, r3, #26
 800e472:	bf42      	ittt	mi
 800e474:	6833      	ldrmi	r3, [r6, #0]
 800e476:	3302      	addmi	r3, #2
 800e478:	6033      	strmi	r3, [r6, #0]
 800e47a:	6825      	ldr	r5, [r4, #0]
 800e47c:	f015 0506 	ands.w	r5, r5, #6
 800e480:	d106      	bne.n	800e490 <_printf_common+0x48>
 800e482:	f104 0a19 	add.w	sl, r4, #25
 800e486:	68e3      	ldr	r3, [r4, #12]
 800e488:	6832      	ldr	r2, [r6, #0]
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	42ab      	cmp	r3, r5
 800e48e:	dc26      	bgt.n	800e4de <_printf_common+0x96>
 800e490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e494:	1e13      	subs	r3, r2, #0
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	bf18      	it	ne
 800e49a:	2301      	movne	r3, #1
 800e49c:	0692      	lsls	r2, r2, #26
 800e49e:	d42b      	bmi.n	800e4f8 <_printf_common+0xb0>
 800e4a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	47c0      	blx	r8
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d01e      	beq.n	800e4ec <_printf_common+0xa4>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	6922      	ldr	r2, [r4, #16]
 800e4b2:	f003 0306 	and.w	r3, r3, #6
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	bf02      	ittt	eq
 800e4ba:	68e5      	ldreq	r5, [r4, #12]
 800e4bc:	6833      	ldreq	r3, [r6, #0]
 800e4be:	1aed      	subeq	r5, r5, r3
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	bf0c      	ite	eq
 800e4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c8:	2500      	movne	r5, #0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	bfc4      	itt	gt
 800e4ce:	1a9b      	subgt	r3, r3, r2
 800e4d0:	18ed      	addgt	r5, r5, r3
 800e4d2:	2600      	movs	r6, #0
 800e4d4:	341a      	adds	r4, #26
 800e4d6:	42b5      	cmp	r5, r6
 800e4d8:	d11a      	bne.n	800e510 <_printf_common+0xc8>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	e008      	b.n	800e4f0 <_printf_common+0xa8>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4652      	mov	r2, sl
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	47c0      	blx	r8
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d103      	bne.n	800e4f4 <_printf_common+0xac>
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f4:	3501      	adds	r5, #1
 800e4f6:	e7c6      	b.n	800e486 <_printf_common+0x3e>
 800e4f8:	18e1      	adds	r1, r4, r3
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	2030      	movs	r0, #48	; 0x30
 800e4fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e502:	4422      	add	r2, r4
 800e504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e50c:	3302      	adds	r3, #2
 800e50e:	e7c7      	b.n	800e4a0 <_printf_common+0x58>
 800e510:	2301      	movs	r3, #1
 800e512:	4622      	mov	r2, r4
 800e514:	4649      	mov	r1, r9
 800e516:	4638      	mov	r0, r7
 800e518:	47c0      	blx	r8
 800e51a:	3001      	adds	r0, #1
 800e51c:	d0e6      	beq.n	800e4ec <_printf_common+0xa4>
 800e51e:	3601      	adds	r6, #1
 800e520:	e7d9      	b.n	800e4d6 <_printf_common+0x8e>
	...

0800e524 <_printf_i>:
 800e524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e528:	7e0f      	ldrb	r7, [r1, #24]
 800e52a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e52c:	2f78      	cmp	r7, #120	; 0x78
 800e52e:	4691      	mov	r9, r2
 800e530:	4680      	mov	r8, r0
 800e532:	460c      	mov	r4, r1
 800e534:	469a      	mov	sl, r3
 800e536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e53a:	d807      	bhi.n	800e54c <_printf_i+0x28>
 800e53c:	2f62      	cmp	r7, #98	; 0x62
 800e53e:	d80a      	bhi.n	800e556 <_printf_i+0x32>
 800e540:	2f00      	cmp	r7, #0
 800e542:	f000 80d4 	beq.w	800e6ee <_printf_i+0x1ca>
 800e546:	2f58      	cmp	r7, #88	; 0x58
 800e548:	f000 80c0 	beq.w	800e6cc <_printf_i+0x1a8>
 800e54c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e554:	e03a      	b.n	800e5cc <_printf_i+0xa8>
 800e556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e55a:	2b15      	cmp	r3, #21
 800e55c:	d8f6      	bhi.n	800e54c <_printf_i+0x28>
 800e55e:	a101      	add	r1, pc, #4	; (adr r1, 800e564 <_printf_i+0x40>)
 800e560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e564:	0800e5bd 	.word	0x0800e5bd
 800e568:	0800e5d1 	.word	0x0800e5d1
 800e56c:	0800e54d 	.word	0x0800e54d
 800e570:	0800e54d 	.word	0x0800e54d
 800e574:	0800e54d 	.word	0x0800e54d
 800e578:	0800e54d 	.word	0x0800e54d
 800e57c:	0800e5d1 	.word	0x0800e5d1
 800e580:	0800e54d 	.word	0x0800e54d
 800e584:	0800e54d 	.word	0x0800e54d
 800e588:	0800e54d 	.word	0x0800e54d
 800e58c:	0800e54d 	.word	0x0800e54d
 800e590:	0800e6d5 	.word	0x0800e6d5
 800e594:	0800e5fd 	.word	0x0800e5fd
 800e598:	0800e68f 	.word	0x0800e68f
 800e59c:	0800e54d 	.word	0x0800e54d
 800e5a0:	0800e54d 	.word	0x0800e54d
 800e5a4:	0800e6f7 	.word	0x0800e6f7
 800e5a8:	0800e54d 	.word	0x0800e54d
 800e5ac:	0800e5fd 	.word	0x0800e5fd
 800e5b0:	0800e54d 	.word	0x0800e54d
 800e5b4:	0800e54d 	.word	0x0800e54d
 800e5b8:	0800e697 	.word	0x0800e697
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	1d1a      	adds	r2, r3, #4
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	602a      	str	r2, [r5, #0]
 800e5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e09f      	b.n	800e710 <_printf_i+0x1ec>
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	682b      	ldr	r3, [r5, #0]
 800e5d4:	0607      	lsls	r7, r0, #24
 800e5d6:	f103 0104 	add.w	r1, r3, #4
 800e5da:	6029      	str	r1, [r5, #0]
 800e5dc:	d501      	bpl.n	800e5e2 <_printf_i+0xbe>
 800e5de:	681e      	ldr	r6, [r3, #0]
 800e5e0:	e003      	b.n	800e5ea <_printf_i+0xc6>
 800e5e2:	0646      	lsls	r6, r0, #25
 800e5e4:	d5fb      	bpl.n	800e5de <_printf_i+0xba>
 800e5e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e5ea:	2e00      	cmp	r6, #0
 800e5ec:	da03      	bge.n	800e5f6 <_printf_i+0xd2>
 800e5ee:	232d      	movs	r3, #45	; 0x2d
 800e5f0:	4276      	negs	r6, r6
 800e5f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5f6:	485a      	ldr	r0, [pc, #360]	; (800e760 <_printf_i+0x23c>)
 800e5f8:	230a      	movs	r3, #10
 800e5fa:	e012      	b.n	800e622 <_printf_i+0xfe>
 800e5fc:	682b      	ldr	r3, [r5, #0]
 800e5fe:	6820      	ldr	r0, [r4, #0]
 800e600:	1d19      	adds	r1, r3, #4
 800e602:	6029      	str	r1, [r5, #0]
 800e604:	0605      	lsls	r5, r0, #24
 800e606:	d501      	bpl.n	800e60c <_printf_i+0xe8>
 800e608:	681e      	ldr	r6, [r3, #0]
 800e60a:	e002      	b.n	800e612 <_printf_i+0xee>
 800e60c:	0641      	lsls	r1, r0, #25
 800e60e:	d5fb      	bpl.n	800e608 <_printf_i+0xe4>
 800e610:	881e      	ldrh	r6, [r3, #0]
 800e612:	4853      	ldr	r0, [pc, #332]	; (800e760 <_printf_i+0x23c>)
 800e614:	2f6f      	cmp	r7, #111	; 0x6f
 800e616:	bf0c      	ite	eq
 800e618:	2308      	moveq	r3, #8
 800e61a:	230a      	movne	r3, #10
 800e61c:	2100      	movs	r1, #0
 800e61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e622:	6865      	ldr	r5, [r4, #4]
 800e624:	60a5      	str	r5, [r4, #8]
 800e626:	2d00      	cmp	r5, #0
 800e628:	bfa2      	ittt	ge
 800e62a:	6821      	ldrge	r1, [r4, #0]
 800e62c:	f021 0104 	bicge.w	r1, r1, #4
 800e630:	6021      	strge	r1, [r4, #0]
 800e632:	b90e      	cbnz	r6, 800e638 <_printf_i+0x114>
 800e634:	2d00      	cmp	r5, #0
 800e636:	d04b      	beq.n	800e6d0 <_printf_i+0x1ac>
 800e638:	4615      	mov	r5, r2
 800e63a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e63e:	fb03 6711 	mls	r7, r3, r1, r6
 800e642:	5dc7      	ldrb	r7, [r0, r7]
 800e644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e648:	4637      	mov	r7, r6
 800e64a:	42bb      	cmp	r3, r7
 800e64c:	460e      	mov	r6, r1
 800e64e:	d9f4      	bls.n	800e63a <_printf_i+0x116>
 800e650:	2b08      	cmp	r3, #8
 800e652:	d10b      	bne.n	800e66c <_printf_i+0x148>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	07de      	lsls	r6, r3, #31
 800e658:	d508      	bpl.n	800e66c <_printf_i+0x148>
 800e65a:	6923      	ldr	r3, [r4, #16]
 800e65c:	6861      	ldr	r1, [r4, #4]
 800e65e:	4299      	cmp	r1, r3
 800e660:	bfde      	ittt	le
 800e662:	2330      	movle	r3, #48	; 0x30
 800e664:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e66c:	1b52      	subs	r2, r2, r5
 800e66e:	6122      	str	r2, [r4, #16]
 800e670:	f8cd a000 	str.w	sl, [sp]
 800e674:	464b      	mov	r3, r9
 800e676:	aa03      	add	r2, sp, #12
 800e678:	4621      	mov	r1, r4
 800e67a:	4640      	mov	r0, r8
 800e67c:	f7ff fee4 	bl	800e448 <_printf_common>
 800e680:	3001      	adds	r0, #1
 800e682:	d14a      	bne.n	800e71a <_printf_i+0x1f6>
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	b004      	add	sp, #16
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	f043 0320 	orr.w	r3, r3, #32
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	4833      	ldr	r0, [pc, #204]	; (800e764 <_printf_i+0x240>)
 800e698:	2778      	movs	r7, #120	; 0x78
 800e69a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	6829      	ldr	r1, [r5, #0]
 800e6a2:	061f      	lsls	r7, r3, #24
 800e6a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6a8:	d402      	bmi.n	800e6b0 <_printf_i+0x18c>
 800e6aa:	065f      	lsls	r7, r3, #25
 800e6ac:	bf48      	it	mi
 800e6ae:	b2b6      	uxthmi	r6, r6
 800e6b0:	07df      	lsls	r7, r3, #31
 800e6b2:	bf48      	it	mi
 800e6b4:	f043 0320 	orrmi.w	r3, r3, #32
 800e6b8:	6029      	str	r1, [r5, #0]
 800e6ba:	bf48      	it	mi
 800e6bc:	6023      	strmi	r3, [r4, #0]
 800e6be:	b91e      	cbnz	r6, 800e6c8 <_printf_i+0x1a4>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	f023 0320 	bic.w	r3, r3, #32
 800e6c6:	6023      	str	r3, [r4, #0]
 800e6c8:	2310      	movs	r3, #16
 800e6ca:	e7a7      	b.n	800e61c <_printf_i+0xf8>
 800e6cc:	4824      	ldr	r0, [pc, #144]	; (800e760 <_printf_i+0x23c>)
 800e6ce:	e7e4      	b.n	800e69a <_printf_i+0x176>
 800e6d0:	4615      	mov	r5, r2
 800e6d2:	e7bd      	b.n	800e650 <_printf_i+0x12c>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	6826      	ldr	r6, [r4, #0]
 800e6d8:	6961      	ldr	r1, [r4, #20]
 800e6da:	1d18      	adds	r0, r3, #4
 800e6dc:	6028      	str	r0, [r5, #0]
 800e6de:	0635      	lsls	r5, r6, #24
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	d501      	bpl.n	800e6e8 <_printf_i+0x1c4>
 800e6e4:	6019      	str	r1, [r3, #0]
 800e6e6:	e002      	b.n	800e6ee <_printf_i+0x1ca>
 800e6e8:	0670      	lsls	r0, r6, #25
 800e6ea:	d5fb      	bpl.n	800e6e4 <_printf_i+0x1c0>
 800e6ec:	8019      	strh	r1, [r3, #0]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6123      	str	r3, [r4, #16]
 800e6f2:	4615      	mov	r5, r2
 800e6f4:	e7bc      	b.n	800e670 <_printf_i+0x14c>
 800e6f6:	682b      	ldr	r3, [r5, #0]
 800e6f8:	1d1a      	adds	r2, r3, #4
 800e6fa:	602a      	str	r2, [r5, #0]
 800e6fc:	681d      	ldr	r5, [r3, #0]
 800e6fe:	6862      	ldr	r2, [r4, #4]
 800e700:	2100      	movs	r1, #0
 800e702:	4628      	mov	r0, r5
 800e704:	f7f1 fd64 	bl	80001d0 <memchr>
 800e708:	b108      	cbz	r0, 800e70e <_printf_i+0x1ea>
 800e70a:	1b40      	subs	r0, r0, r5
 800e70c:	6060      	str	r0, [r4, #4]
 800e70e:	6863      	ldr	r3, [r4, #4]
 800e710:	6123      	str	r3, [r4, #16]
 800e712:	2300      	movs	r3, #0
 800e714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e718:	e7aa      	b.n	800e670 <_printf_i+0x14c>
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	462a      	mov	r2, r5
 800e71e:	4649      	mov	r1, r9
 800e720:	4640      	mov	r0, r8
 800e722:	47d0      	blx	sl
 800e724:	3001      	adds	r0, #1
 800e726:	d0ad      	beq.n	800e684 <_printf_i+0x160>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	079b      	lsls	r3, r3, #30
 800e72c:	d413      	bmi.n	800e756 <_printf_i+0x232>
 800e72e:	68e0      	ldr	r0, [r4, #12]
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	4298      	cmp	r0, r3
 800e734:	bfb8      	it	lt
 800e736:	4618      	movlt	r0, r3
 800e738:	e7a6      	b.n	800e688 <_printf_i+0x164>
 800e73a:	2301      	movs	r3, #1
 800e73c:	4632      	mov	r2, r6
 800e73e:	4649      	mov	r1, r9
 800e740:	4640      	mov	r0, r8
 800e742:	47d0      	blx	sl
 800e744:	3001      	adds	r0, #1
 800e746:	d09d      	beq.n	800e684 <_printf_i+0x160>
 800e748:	3501      	adds	r5, #1
 800e74a:	68e3      	ldr	r3, [r4, #12]
 800e74c:	9903      	ldr	r1, [sp, #12]
 800e74e:	1a5b      	subs	r3, r3, r1
 800e750:	42ab      	cmp	r3, r5
 800e752:	dcf2      	bgt.n	800e73a <_printf_i+0x216>
 800e754:	e7eb      	b.n	800e72e <_printf_i+0x20a>
 800e756:	2500      	movs	r5, #0
 800e758:	f104 0619 	add.w	r6, r4, #25
 800e75c:	e7f5      	b.n	800e74a <_printf_i+0x226>
 800e75e:	bf00      	nop
 800e760:	080131c6 	.word	0x080131c6
 800e764:	080131d7 	.word	0x080131d7

0800e768 <std>:
 800e768:	2300      	movs	r3, #0
 800e76a:	b510      	push	{r4, lr}
 800e76c:	4604      	mov	r4, r0
 800e76e:	e9c0 3300 	strd	r3, r3, [r0]
 800e772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e776:	6083      	str	r3, [r0, #8]
 800e778:	8181      	strh	r1, [r0, #12]
 800e77a:	6643      	str	r3, [r0, #100]	; 0x64
 800e77c:	81c2      	strh	r2, [r0, #14]
 800e77e:	6183      	str	r3, [r0, #24]
 800e780:	4619      	mov	r1, r3
 800e782:	2208      	movs	r2, #8
 800e784:	305c      	adds	r0, #92	; 0x5c
 800e786:	f000 f914 	bl	800e9b2 <memset>
 800e78a:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <std+0x58>)
 800e78c:	6263      	str	r3, [r4, #36]	; 0x24
 800e78e:	4b0d      	ldr	r3, [pc, #52]	; (800e7c4 <std+0x5c>)
 800e790:	62a3      	str	r3, [r4, #40]	; 0x28
 800e792:	4b0d      	ldr	r3, [pc, #52]	; (800e7c8 <std+0x60>)
 800e794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e796:	4b0d      	ldr	r3, [pc, #52]	; (800e7cc <std+0x64>)
 800e798:	6323      	str	r3, [r4, #48]	; 0x30
 800e79a:	4b0d      	ldr	r3, [pc, #52]	; (800e7d0 <std+0x68>)
 800e79c:	6224      	str	r4, [r4, #32]
 800e79e:	429c      	cmp	r4, r3
 800e7a0:	d006      	beq.n	800e7b0 <std+0x48>
 800e7a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e7a6:	4294      	cmp	r4, r2
 800e7a8:	d002      	beq.n	800e7b0 <std+0x48>
 800e7aa:	33d0      	adds	r3, #208	; 0xd0
 800e7ac:	429c      	cmp	r4, r3
 800e7ae:	d105      	bne.n	800e7bc <std+0x54>
 800e7b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7b8:	f000 b9ce 	b.w	800eb58 <__retarget_lock_init_recursive>
 800e7bc:	bd10      	pop	{r4, pc}
 800e7be:	bf00      	nop
 800e7c0:	0800e92d 	.word	0x0800e92d
 800e7c4:	0800e94f 	.word	0x0800e94f
 800e7c8:	0800e987 	.word	0x0800e987
 800e7cc:	0800e9ab 	.word	0x0800e9ab
 800e7d0:	200051b4 	.word	0x200051b4

0800e7d4 <stdio_exit_handler>:
 800e7d4:	4a02      	ldr	r2, [pc, #8]	; (800e7e0 <stdio_exit_handler+0xc>)
 800e7d6:	4903      	ldr	r1, [pc, #12]	; (800e7e4 <stdio_exit_handler+0x10>)
 800e7d8:	4803      	ldr	r0, [pc, #12]	; (800e7e8 <stdio_exit_handler+0x14>)
 800e7da:	f000 b869 	b.w	800e8b0 <_fwalk_sglue>
 800e7de:	bf00      	nop
 800e7e0:	20000024 	.word	0x20000024
 800e7e4:	08010539 	.word	0x08010539
 800e7e8:	20000030 	.word	0x20000030

0800e7ec <cleanup_stdio>:
 800e7ec:	6841      	ldr	r1, [r0, #4]
 800e7ee:	4b0c      	ldr	r3, [pc, #48]	; (800e820 <cleanup_stdio+0x34>)
 800e7f0:	4299      	cmp	r1, r3
 800e7f2:	b510      	push	{r4, lr}
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	d001      	beq.n	800e7fc <cleanup_stdio+0x10>
 800e7f8:	f001 fe9e 	bl	8010538 <_fflush_r>
 800e7fc:	68a1      	ldr	r1, [r4, #8]
 800e7fe:	4b09      	ldr	r3, [pc, #36]	; (800e824 <cleanup_stdio+0x38>)
 800e800:	4299      	cmp	r1, r3
 800e802:	d002      	beq.n	800e80a <cleanup_stdio+0x1e>
 800e804:	4620      	mov	r0, r4
 800e806:	f001 fe97 	bl	8010538 <_fflush_r>
 800e80a:	68e1      	ldr	r1, [r4, #12]
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <cleanup_stdio+0x3c>)
 800e80e:	4299      	cmp	r1, r3
 800e810:	d004      	beq.n	800e81c <cleanup_stdio+0x30>
 800e812:	4620      	mov	r0, r4
 800e814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e818:	f001 be8e 	b.w	8010538 <_fflush_r>
 800e81c:	bd10      	pop	{r4, pc}
 800e81e:	bf00      	nop
 800e820:	200051b4 	.word	0x200051b4
 800e824:	2000521c 	.word	0x2000521c
 800e828:	20005284 	.word	0x20005284

0800e82c <global_stdio_init.part.0>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <global_stdio_init.part.0+0x30>)
 800e830:	4c0b      	ldr	r4, [pc, #44]	; (800e860 <global_stdio_init.part.0+0x34>)
 800e832:	4a0c      	ldr	r2, [pc, #48]	; (800e864 <global_stdio_init.part.0+0x38>)
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	4620      	mov	r0, r4
 800e838:	2200      	movs	r2, #0
 800e83a:	2104      	movs	r1, #4
 800e83c:	f7ff ff94 	bl	800e768 <std>
 800e840:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e844:	2201      	movs	r2, #1
 800e846:	2109      	movs	r1, #9
 800e848:	f7ff ff8e 	bl	800e768 <std>
 800e84c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e850:	2202      	movs	r2, #2
 800e852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e856:	2112      	movs	r1, #18
 800e858:	f7ff bf86 	b.w	800e768 <std>
 800e85c:	200052ec 	.word	0x200052ec
 800e860:	200051b4 	.word	0x200051b4
 800e864:	0800e7d5 	.word	0x0800e7d5

0800e868 <__sfp_lock_acquire>:
 800e868:	4801      	ldr	r0, [pc, #4]	; (800e870 <__sfp_lock_acquire+0x8>)
 800e86a:	f000 b976 	b.w	800eb5a <__retarget_lock_acquire_recursive>
 800e86e:	bf00      	nop
 800e870:	200052f5 	.word	0x200052f5

0800e874 <__sfp_lock_release>:
 800e874:	4801      	ldr	r0, [pc, #4]	; (800e87c <__sfp_lock_release+0x8>)
 800e876:	f000 b971 	b.w	800eb5c <__retarget_lock_release_recursive>
 800e87a:	bf00      	nop
 800e87c:	200052f5 	.word	0x200052f5

0800e880 <__sinit>:
 800e880:	b510      	push	{r4, lr}
 800e882:	4604      	mov	r4, r0
 800e884:	f7ff fff0 	bl	800e868 <__sfp_lock_acquire>
 800e888:	6a23      	ldr	r3, [r4, #32]
 800e88a:	b11b      	cbz	r3, 800e894 <__sinit+0x14>
 800e88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e890:	f7ff bff0 	b.w	800e874 <__sfp_lock_release>
 800e894:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <__sinit+0x28>)
 800e896:	6223      	str	r3, [r4, #32]
 800e898:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <__sinit+0x2c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1f5      	bne.n	800e88c <__sinit+0xc>
 800e8a0:	f7ff ffc4 	bl	800e82c <global_stdio_init.part.0>
 800e8a4:	e7f2      	b.n	800e88c <__sinit+0xc>
 800e8a6:	bf00      	nop
 800e8a8:	0800e7ed 	.word	0x0800e7ed
 800e8ac:	200052ec 	.word	0x200052ec

0800e8b0 <_fwalk_sglue>:
 800e8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b4:	4607      	mov	r7, r0
 800e8b6:	4688      	mov	r8, r1
 800e8b8:	4614      	mov	r4, r2
 800e8ba:	2600      	movs	r6, #0
 800e8bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e8c4:	d505      	bpl.n	800e8d2 <_fwalk_sglue+0x22>
 800e8c6:	6824      	ldr	r4, [r4, #0]
 800e8c8:	2c00      	cmp	r4, #0
 800e8ca:	d1f7      	bne.n	800e8bc <_fwalk_sglue+0xc>
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d2:	89ab      	ldrh	r3, [r5, #12]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d907      	bls.n	800e8e8 <_fwalk_sglue+0x38>
 800e8d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	d003      	beq.n	800e8e8 <_fwalk_sglue+0x38>
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	47c0      	blx	r8
 800e8e6:	4306      	orrs	r6, r0
 800e8e8:	3568      	adds	r5, #104	; 0x68
 800e8ea:	e7e9      	b.n	800e8c0 <_fwalk_sglue+0x10>

0800e8ec <siprintf>:
 800e8ec:	b40e      	push	{r1, r2, r3}
 800e8ee:	b500      	push	{lr}
 800e8f0:	b09c      	sub	sp, #112	; 0x70
 800e8f2:	ab1d      	add	r3, sp, #116	; 0x74
 800e8f4:	9002      	str	r0, [sp, #8]
 800e8f6:	9006      	str	r0, [sp, #24]
 800e8f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e8fc:	4809      	ldr	r0, [pc, #36]	; (800e924 <siprintf+0x38>)
 800e8fe:	9107      	str	r1, [sp, #28]
 800e900:	9104      	str	r1, [sp, #16]
 800e902:	4909      	ldr	r1, [pc, #36]	; (800e928 <siprintf+0x3c>)
 800e904:	f853 2b04 	ldr.w	r2, [r3], #4
 800e908:	9105      	str	r1, [sp, #20]
 800e90a:	6800      	ldr	r0, [r0, #0]
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	a902      	add	r1, sp, #8
 800e910:	f001 fc8e 	bl	8010230 <_svfiprintf_r>
 800e914:	9b02      	ldr	r3, [sp, #8]
 800e916:	2200      	movs	r2, #0
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	b01c      	add	sp, #112	; 0x70
 800e91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e920:	b003      	add	sp, #12
 800e922:	4770      	bx	lr
 800e924:	2000007c 	.word	0x2000007c
 800e928:	ffff0208 	.word	0xffff0208

0800e92c <__sread>:
 800e92c:	b510      	push	{r4, lr}
 800e92e:	460c      	mov	r4, r1
 800e930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e934:	f000 f8c2 	bl	800eabc <_read_r>
 800e938:	2800      	cmp	r0, #0
 800e93a:	bfab      	itete	ge
 800e93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e93e:	89a3      	ldrhlt	r3, [r4, #12]
 800e940:	181b      	addge	r3, r3, r0
 800e942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e946:	bfac      	ite	ge
 800e948:	6563      	strge	r3, [r4, #84]	; 0x54
 800e94a:	81a3      	strhlt	r3, [r4, #12]
 800e94c:	bd10      	pop	{r4, pc}

0800e94e <__swrite>:
 800e94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e952:	461f      	mov	r7, r3
 800e954:	898b      	ldrh	r3, [r1, #12]
 800e956:	05db      	lsls	r3, r3, #23
 800e958:	4605      	mov	r5, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	4616      	mov	r6, r2
 800e95e:	d505      	bpl.n	800e96c <__swrite+0x1e>
 800e960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e964:	2302      	movs	r3, #2
 800e966:	2200      	movs	r2, #0
 800e968:	f000 f896 	bl	800ea98 <_lseek_r>
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e976:	81a3      	strh	r3, [r4, #12]
 800e978:	4632      	mov	r2, r6
 800e97a:	463b      	mov	r3, r7
 800e97c:	4628      	mov	r0, r5
 800e97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e982:	f000 b8ad 	b.w	800eae0 <_write_r>

0800e986 <__sseek>:
 800e986:	b510      	push	{r4, lr}
 800e988:	460c      	mov	r4, r1
 800e98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e98e:	f000 f883 	bl	800ea98 <_lseek_r>
 800e992:	1c43      	adds	r3, r0, #1
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	bf15      	itete	ne
 800e998:	6560      	strne	r0, [r4, #84]	; 0x54
 800e99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9a2:	81a3      	strheq	r3, [r4, #12]
 800e9a4:	bf18      	it	ne
 800e9a6:	81a3      	strhne	r3, [r4, #12]
 800e9a8:	bd10      	pop	{r4, pc}

0800e9aa <__sclose>:
 800e9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ae:	f000 b80d 	b.w	800e9cc <_close_r>

0800e9b2 <memset>:
 800e9b2:	4402      	add	r2, r0
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d100      	bne.n	800e9bc <memset+0xa>
 800e9ba:	4770      	bx	lr
 800e9bc:	f803 1b01 	strb.w	r1, [r3], #1
 800e9c0:	e7f9      	b.n	800e9b6 <memset+0x4>
	...

0800e9c4 <_localeconv_r>:
 800e9c4:	4800      	ldr	r0, [pc, #0]	; (800e9c8 <_localeconv_r+0x4>)
 800e9c6:	4770      	bx	lr
 800e9c8:	20000170 	.word	0x20000170

0800e9cc <_close_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d06      	ldr	r5, [pc, #24]	; (800e9e8 <_close_r+0x1c>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	f7f8 f925 	bl	8006c26 <_close>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_close_r+0x1a>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_close_r+0x1a>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	200052f0 	.word	0x200052f0

0800e9ec <_reclaim_reent>:
 800e9ec:	4b29      	ldr	r3, [pc, #164]	; (800ea94 <_reclaim_reent+0xa8>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4283      	cmp	r3, r0
 800e9f2:	b570      	push	{r4, r5, r6, lr}
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	d04b      	beq.n	800ea90 <_reclaim_reent+0xa4>
 800e9f8:	69c3      	ldr	r3, [r0, #28]
 800e9fa:	b143      	cbz	r3, 800ea0e <_reclaim_reent+0x22>
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d144      	bne.n	800ea8c <_reclaim_reent+0xa0>
 800ea02:	69e3      	ldr	r3, [r4, #28]
 800ea04:	6819      	ldr	r1, [r3, #0]
 800ea06:	b111      	cbz	r1, 800ea0e <_reclaim_reent+0x22>
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 ff3b 	bl	800f884 <_free_r>
 800ea0e:	6961      	ldr	r1, [r4, #20]
 800ea10:	b111      	cbz	r1, 800ea18 <_reclaim_reent+0x2c>
 800ea12:	4620      	mov	r0, r4
 800ea14:	f000 ff36 	bl	800f884 <_free_r>
 800ea18:	69e1      	ldr	r1, [r4, #28]
 800ea1a:	b111      	cbz	r1, 800ea22 <_reclaim_reent+0x36>
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f000 ff31 	bl	800f884 <_free_r>
 800ea22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ea24:	b111      	cbz	r1, 800ea2c <_reclaim_reent+0x40>
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 ff2c 	bl	800f884 <_free_r>
 800ea2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea2e:	b111      	cbz	r1, 800ea36 <_reclaim_reent+0x4a>
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 ff27 	bl	800f884 <_free_r>
 800ea36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea38:	b111      	cbz	r1, 800ea40 <_reclaim_reent+0x54>
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 ff22 	bl	800f884 <_free_r>
 800ea40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea42:	b111      	cbz	r1, 800ea4a <_reclaim_reent+0x5e>
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 ff1d 	bl	800f884 <_free_r>
 800ea4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ea4c:	b111      	cbz	r1, 800ea54 <_reclaim_reent+0x68>
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 ff18 	bl	800f884 <_free_r>
 800ea54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ea56:	b111      	cbz	r1, 800ea5e <_reclaim_reent+0x72>
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f000 ff13 	bl	800f884 <_free_r>
 800ea5e:	6a23      	ldr	r3, [r4, #32]
 800ea60:	b1b3      	cbz	r3, 800ea90 <_reclaim_reent+0xa4>
 800ea62:	4620      	mov	r0, r4
 800ea64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea68:	4718      	bx	r3
 800ea6a:	5949      	ldr	r1, [r1, r5]
 800ea6c:	b941      	cbnz	r1, 800ea80 <_reclaim_reent+0x94>
 800ea6e:	3504      	adds	r5, #4
 800ea70:	69e3      	ldr	r3, [r4, #28]
 800ea72:	2d80      	cmp	r5, #128	; 0x80
 800ea74:	68d9      	ldr	r1, [r3, #12]
 800ea76:	d1f8      	bne.n	800ea6a <_reclaim_reent+0x7e>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 ff03 	bl	800f884 <_free_r>
 800ea7e:	e7c0      	b.n	800ea02 <_reclaim_reent+0x16>
 800ea80:	680e      	ldr	r6, [r1, #0]
 800ea82:	4620      	mov	r0, r4
 800ea84:	f000 fefe 	bl	800f884 <_free_r>
 800ea88:	4631      	mov	r1, r6
 800ea8a:	e7ef      	b.n	800ea6c <_reclaim_reent+0x80>
 800ea8c:	2500      	movs	r5, #0
 800ea8e:	e7ef      	b.n	800ea70 <_reclaim_reent+0x84>
 800ea90:	bd70      	pop	{r4, r5, r6, pc}
 800ea92:	bf00      	nop
 800ea94:	2000007c 	.word	0x2000007c

0800ea98 <_lseek_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	4d07      	ldr	r5, [pc, #28]	; (800eab8 <_lseek_r+0x20>)
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	602a      	str	r2, [r5, #0]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	f7f8 f8e4 	bl	8006c74 <_lseek>
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	d102      	bne.n	800eab6 <_lseek_r+0x1e>
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	b103      	cbz	r3, 800eab6 <_lseek_r+0x1e>
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	bd38      	pop	{r3, r4, r5, pc}
 800eab8:	200052f0 	.word	0x200052f0

0800eabc <_read_r>:
 800eabc:	b538      	push	{r3, r4, r5, lr}
 800eabe:	4d07      	ldr	r5, [pc, #28]	; (800eadc <_read_r+0x20>)
 800eac0:	4604      	mov	r4, r0
 800eac2:	4608      	mov	r0, r1
 800eac4:	4611      	mov	r1, r2
 800eac6:	2200      	movs	r2, #0
 800eac8:	602a      	str	r2, [r5, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	f7f8 f872 	bl	8006bb4 <_read>
 800ead0:	1c43      	adds	r3, r0, #1
 800ead2:	d102      	bne.n	800eada <_read_r+0x1e>
 800ead4:	682b      	ldr	r3, [r5, #0]
 800ead6:	b103      	cbz	r3, 800eada <_read_r+0x1e>
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	bd38      	pop	{r3, r4, r5, pc}
 800eadc:	200052f0 	.word	0x200052f0

0800eae0 <_write_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d07      	ldr	r5, [pc, #28]	; (800eb00 <_write_r+0x20>)
 800eae4:	4604      	mov	r4, r0
 800eae6:	4608      	mov	r0, r1
 800eae8:	4611      	mov	r1, r2
 800eaea:	2200      	movs	r2, #0
 800eaec:	602a      	str	r2, [r5, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	f7f8 f87d 	bl	8006bee <_write>
 800eaf4:	1c43      	adds	r3, r0, #1
 800eaf6:	d102      	bne.n	800eafe <_write_r+0x1e>
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	b103      	cbz	r3, 800eafe <_write_r+0x1e>
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	bd38      	pop	{r3, r4, r5, pc}
 800eb00:	200052f0 	.word	0x200052f0

0800eb04 <__errno>:
 800eb04:	4b01      	ldr	r3, [pc, #4]	; (800eb0c <__errno+0x8>)
 800eb06:	6818      	ldr	r0, [r3, #0]
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	2000007c 	.word	0x2000007c

0800eb10 <__libc_init_array>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4d0d      	ldr	r5, [pc, #52]	; (800eb48 <__libc_init_array+0x38>)
 800eb14:	4c0d      	ldr	r4, [pc, #52]	; (800eb4c <__libc_init_array+0x3c>)
 800eb16:	1b64      	subs	r4, r4, r5
 800eb18:	10a4      	asrs	r4, r4, #2
 800eb1a:	2600      	movs	r6, #0
 800eb1c:	42a6      	cmp	r6, r4
 800eb1e:	d109      	bne.n	800eb34 <__libc_init_array+0x24>
 800eb20:	4d0b      	ldr	r5, [pc, #44]	; (800eb50 <__libc_init_array+0x40>)
 800eb22:	4c0c      	ldr	r4, [pc, #48]	; (800eb54 <__libc_init_array+0x44>)
 800eb24:	f004 fa80 	bl	8013028 <_init>
 800eb28:	1b64      	subs	r4, r4, r5
 800eb2a:	10a4      	asrs	r4, r4, #2
 800eb2c:	2600      	movs	r6, #0
 800eb2e:	42a6      	cmp	r6, r4
 800eb30:	d105      	bne.n	800eb3e <__libc_init_array+0x2e>
 800eb32:	bd70      	pop	{r4, r5, r6, pc}
 800eb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb38:	4798      	blx	r3
 800eb3a:	3601      	adds	r6, #1
 800eb3c:	e7ee      	b.n	800eb1c <__libc_init_array+0xc>
 800eb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb42:	4798      	blx	r3
 800eb44:	3601      	adds	r6, #1
 800eb46:	e7f2      	b.n	800eb2e <__libc_init_array+0x1e>
 800eb48:	080137a8 	.word	0x080137a8
 800eb4c:	080137a8 	.word	0x080137a8
 800eb50:	080137a8 	.word	0x080137a8
 800eb54:	080137ac 	.word	0x080137ac

0800eb58 <__retarget_lock_init_recursive>:
 800eb58:	4770      	bx	lr

0800eb5a <__retarget_lock_acquire_recursive>:
 800eb5a:	4770      	bx	lr

0800eb5c <__retarget_lock_release_recursive>:
 800eb5c:	4770      	bx	lr

0800eb5e <strcpy>:
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb64:	f803 2b01 	strb.w	r2, [r3], #1
 800eb68:	2a00      	cmp	r2, #0
 800eb6a:	d1f9      	bne.n	800eb60 <strcpy+0x2>
 800eb6c:	4770      	bx	lr

0800eb6e <memcpy>:
 800eb6e:	440a      	add	r2, r1
 800eb70:	4291      	cmp	r1, r2
 800eb72:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb76:	d100      	bne.n	800eb7a <memcpy+0xc>
 800eb78:	4770      	bx	lr
 800eb7a:	b510      	push	{r4, lr}
 800eb7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb84:	4291      	cmp	r1, r2
 800eb86:	d1f9      	bne.n	800eb7c <memcpy+0xe>
 800eb88:	bd10      	pop	{r4, pc}

0800eb8a <quorem>:
 800eb8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8e:	6903      	ldr	r3, [r0, #16]
 800eb90:	690c      	ldr	r4, [r1, #16]
 800eb92:	42a3      	cmp	r3, r4
 800eb94:	4607      	mov	r7, r0
 800eb96:	db7e      	blt.n	800ec96 <quorem+0x10c>
 800eb98:	3c01      	subs	r4, #1
 800eb9a:	f101 0814 	add.w	r8, r1, #20
 800eb9e:	f100 0514 	add.w	r5, r0, #20
 800eba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebc0:	d331      	bcc.n	800ec26 <quorem+0x9c>
 800ebc2:	f04f 0e00 	mov.w	lr, #0
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	46ac      	mov	ip, r5
 800ebca:	46f2      	mov	sl, lr
 800ebcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebd0:	b293      	uxth	r3, r2
 800ebd2:	fb06 e303 	mla	r3, r6, r3, lr
 800ebd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebda:	0c1a      	lsrs	r2, r3, #16
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	ebaa 0303 	sub.w	r3, sl, r3
 800ebe2:	f8dc a000 	ldr.w	sl, [ip]
 800ebe6:	fa13 f38a 	uxtah	r3, r3, sl
 800ebea:	fb06 220e 	mla	r2, r6, lr, r2
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	9b00      	ldr	r3, [sp, #0]
 800ebf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebf6:	b292      	uxth	r2, r2
 800ebf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ebfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec00:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec04:	4581      	cmp	r9, r0
 800ec06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec0a:	f84c 3b04 	str.w	r3, [ip], #4
 800ec0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec12:	d2db      	bcs.n	800ebcc <quorem+0x42>
 800ec14:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec18:	b92b      	cbnz	r3, 800ec26 <quorem+0x9c>
 800ec1a:	9b01      	ldr	r3, [sp, #4]
 800ec1c:	3b04      	subs	r3, #4
 800ec1e:	429d      	cmp	r5, r3
 800ec20:	461a      	mov	r2, r3
 800ec22:	d32c      	bcc.n	800ec7e <quorem+0xf4>
 800ec24:	613c      	str	r4, [r7, #16]
 800ec26:	4638      	mov	r0, r7
 800ec28:	f001 f9a8 	bl	800ff7c <__mcmp>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	db22      	blt.n	800ec76 <quorem+0xec>
 800ec30:	3601      	adds	r6, #1
 800ec32:	4629      	mov	r1, r5
 800ec34:	2000      	movs	r0, #0
 800ec36:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec3a:	f8d1 c000 	ldr.w	ip, [r1]
 800ec3e:	b293      	uxth	r3, r2
 800ec40:	1ac3      	subs	r3, r0, r3
 800ec42:	0c12      	lsrs	r2, r2, #16
 800ec44:	fa13 f38c 	uxtah	r3, r3, ip
 800ec48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ec4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec56:	45c1      	cmp	r9, r8
 800ec58:	f841 3b04 	str.w	r3, [r1], #4
 800ec5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec60:	d2e9      	bcs.n	800ec36 <quorem+0xac>
 800ec62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec6a:	b922      	cbnz	r2, 800ec76 <quorem+0xec>
 800ec6c:	3b04      	subs	r3, #4
 800ec6e:	429d      	cmp	r5, r3
 800ec70:	461a      	mov	r2, r3
 800ec72:	d30a      	bcc.n	800ec8a <quorem+0x100>
 800ec74:	613c      	str	r4, [r7, #16]
 800ec76:	4630      	mov	r0, r6
 800ec78:	b003      	add	sp, #12
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	6812      	ldr	r2, [r2, #0]
 800ec80:	3b04      	subs	r3, #4
 800ec82:	2a00      	cmp	r2, #0
 800ec84:	d1ce      	bne.n	800ec24 <quorem+0x9a>
 800ec86:	3c01      	subs	r4, #1
 800ec88:	e7c9      	b.n	800ec1e <quorem+0x94>
 800ec8a:	6812      	ldr	r2, [r2, #0]
 800ec8c:	3b04      	subs	r3, #4
 800ec8e:	2a00      	cmp	r2, #0
 800ec90:	d1f0      	bne.n	800ec74 <quorem+0xea>
 800ec92:	3c01      	subs	r4, #1
 800ec94:	e7eb      	b.n	800ec6e <quorem+0xe4>
 800ec96:	2000      	movs	r0, #0
 800ec98:	e7ee      	b.n	800ec78 <quorem+0xee>
 800ec9a:	0000      	movs	r0, r0
 800ec9c:	0000      	movs	r0, r0
	...

0800eca0 <_dtoa_r>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	ed2d 8b04 	vpush	{d8-d9}
 800eca8:	69c5      	ldr	r5, [r0, #28]
 800ecaa:	b093      	sub	sp, #76	; 0x4c
 800ecac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ecb0:	ec57 6b10 	vmov	r6, r7, d0
 800ecb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecb8:	9107      	str	r1, [sp, #28]
 800ecba:	4604      	mov	r4, r0
 800ecbc:	920a      	str	r2, [sp, #40]	; 0x28
 800ecbe:	930d      	str	r3, [sp, #52]	; 0x34
 800ecc0:	b975      	cbnz	r5, 800ece0 <_dtoa_r+0x40>
 800ecc2:	2010      	movs	r0, #16
 800ecc4:	f000 fe2a 	bl	800f91c <malloc>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	61e0      	str	r0, [r4, #28]
 800eccc:	b920      	cbnz	r0, 800ecd8 <_dtoa_r+0x38>
 800ecce:	4bae      	ldr	r3, [pc, #696]	; (800ef88 <_dtoa_r+0x2e8>)
 800ecd0:	21ef      	movs	r1, #239	; 0xef
 800ecd2:	48ae      	ldr	r0, [pc, #696]	; (800ef8c <_dtoa_r+0x2ec>)
 800ecd4:	f001 fc82 	bl	80105dc <__assert_func>
 800ecd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ecdc:	6005      	str	r5, [r0, #0]
 800ecde:	60c5      	str	r5, [r0, #12]
 800ece0:	69e3      	ldr	r3, [r4, #28]
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	b151      	cbz	r1, 800ecfc <_dtoa_r+0x5c>
 800ece6:	685a      	ldr	r2, [r3, #4]
 800ece8:	604a      	str	r2, [r1, #4]
 800ecea:	2301      	movs	r3, #1
 800ecec:	4093      	lsls	r3, r2
 800ecee:	608b      	str	r3, [r1, #8]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f000 ff07 	bl	800fb04 <_Bfree>
 800ecf6:	69e3      	ldr	r3, [r4, #28]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	601a      	str	r2, [r3, #0]
 800ecfc:	1e3b      	subs	r3, r7, #0
 800ecfe:	bfbb      	ittet	lt
 800ed00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ed04:	9303      	strlt	r3, [sp, #12]
 800ed06:	2300      	movge	r3, #0
 800ed08:	2201      	movlt	r2, #1
 800ed0a:	bfac      	ite	ge
 800ed0c:	f8c8 3000 	strge.w	r3, [r8]
 800ed10:	f8c8 2000 	strlt.w	r2, [r8]
 800ed14:	4b9e      	ldr	r3, [pc, #632]	; (800ef90 <_dtoa_r+0x2f0>)
 800ed16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ed1a:	ea33 0308 	bics.w	r3, r3, r8
 800ed1e:	d11b      	bne.n	800ed58 <_dtoa_r+0xb8>
 800ed20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ed2c:	4333      	orrs	r3, r6
 800ed2e:	f000 8593 	beq.w	800f858 <_dtoa_r+0xbb8>
 800ed32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed34:	b963      	cbnz	r3, 800ed50 <_dtoa_r+0xb0>
 800ed36:	4b97      	ldr	r3, [pc, #604]	; (800ef94 <_dtoa_r+0x2f4>)
 800ed38:	e027      	b.n	800ed8a <_dtoa_r+0xea>
 800ed3a:	4b97      	ldr	r3, [pc, #604]	; (800ef98 <_dtoa_r+0x2f8>)
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	3308      	adds	r3, #8
 800ed40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	9800      	ldr	r0, [sp, #0]
 800ed46:	b013      	add	sp, #76	; 0x4c
 800ed48:	ecbd 8b04 	vpop	{d8-d9}
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	4b90      	ldr	r3, [pc, #576]	; (800ef94 <_dtoa_r+0x2f4>)
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	3303      	adds	r3, #3
 800ed56:	e7f3      	b.n	800ed40 <_dtoa_r+0xa0>
 800ed58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	ec51 0b17 	vmov	r0, r1, d7
 800ed62:	eeb0 8a47 	vmov.f32	s16, s14
 800ed66:	eef0 8a67 	vmov.f32	s17, s15
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f7f1 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed70:	4681      	mov	r9, r0
 800ed72:	b160      	cbz	r0, 800ed8e <_dtoa_r+0xee>
 800ed74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed76:	2301      	movs	r3, #1
 800ed78:	6013      	str	r3, [r2, #0]
 800ed7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 8568 	beq.w	800f852 <_dtoa_r+0xbb2>
 800ed82:	4b86      	ldr	r3, [pc, #536]	; (800ef9c <_dtoa_r+0x2fc>)
 800ed84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	e7da      	b.n	800ed44 <_dtoa_r+0xa4>
 800ed8e:	aa10      	add	r2, sp, #64	; 0x40
 800ed90:	a911      	add	r1, sp, #68	; 0x44
 800ed92:	4620      	mov	r0, r4
 800ed94:	eeb0 0a48 	vmov.f32	s0, s16
 800ed98:	eef0 0a68 	vmov.f32	s1, s17
 800ed9c:	f001 f994 	bl	80100c8 <__d2b>
 800eda0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eda4:	4682      	mov	sl, r0
 800eda6:	2d00      	cmp	r5, #0
 800eda8:	d07f      	beq.n	800eeaa <_dtoa_r+0x20a>
 800edaa:	ee18 3a90 	vmov	r3, s17
 800edae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800edb6:	ec51 0b18 	vmov	r0, r1, d8
 800edba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800edbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800edc6:	4619      	mov	r1, r3
 800edc8:	2200      	movs	r2, #0
 800edca:	4b75      	ldr	r3, [pc, #468]	; (800efa0 <_dtoa_r+0x300>)
 800edcc:	f7f1 fa5c 	bl	8000288 <__aeabi_dsub>
 800edd0:	a367      	add	r3, pc, #412	; (adr r3, 800ef70 <_dtoa_r+0x2d0>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fc0f 	bl	80005f8 <__aeabi_dmul>
 800edda:	a367      	add	r3, pc, #412	; (adr r3, 800ef78 <_dtoa_r+0x2d8>)
 800eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede0:	f7f1 fa54 	bl	800028c <__adddf3>
 800ede4:	4606      	mov	r6, r0
 800ede6:	4628      	mov	r0, r5
 800ede8:	460f      	mov	r7, r1
 800edea:	f7f1 fb9b 	bl	8000524 <__aeabi_i2d>
 800edee:	a364      	add	r3, pc, #400	; (adr r3, 800ef80 <_dtoa_r+0x2e0>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 fc00 	bl	80005f8 <__aeabi_dmul>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4630      	mov	r0, r6
 800edfe:	4639      	mov	r1, r7
 800ee00:	f7f1 fa44 	bl	800028c <__adddf3>
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	f7f1 fea6 	bl	8000b58 <__aeabi_d2iz>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	4683      	mov	fp, r0
 800ee10:	2300      	movs	r3, #0
 800ee12:	4630      	mov	r0, r6
 800ee14:	4639      	mov	r1, r7
 800ee16:	f7f1 fe61 	bl	8000adc <__aeabi_dcmplt>
 800ee1a:	b148      	cbz	r0, 800ee30 <_dtoa_r+0x190>
 800ee1c:	4658      	mov	r0, fp
 800ee1e:	f7f1 fb81 	bl	8000524 <__aeabi_i2d>
 800ee22:	4632      	mov	r2, r6
 800ee24:	463b      	mov	r3, r7
 800ee26:	f7f1 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee2a:	b908      	cbnz	r0, 800ee30 <_dtoa_r+0x190>
 800ee2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee30:	f1bb 0f16 	cmp.w	fp, #22
 800ee34:	d857      	bhi.n	800eee6 <_dtoa_r+0x246>
 800ee36:	4b5b      	ldr	r3, [pc, #364]	; (800efa4 <_dtoa_r+0x304>)
 800ee38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	ec51 0b18 	vmov	r0, r1, d8
 800ee44:	f7f1 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d04e      	beq.n	800eeea <_dtoa_r+0x24a>
 800ee4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee50:	2300      	movs	r3, #0
 800ee52:	930c      	str	r3, [sp, #48]	; 0x30
 800ee54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee56:	1b5b      	subs	r3, r3, r5
 800ee58:	1e5a      	subs	r2, r3, #1
 800ee5a:	bf45      	ittet	mi
 800ee5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ee60:	9305      	strmi	r3, [sp, #20]
 800ee62:	2300      	movpl	r3, #0
 800ee64:	2300      	movmi	r3, #0
 800ee66:	9206      	str	r2, [sp, #24]
 800ee68:	bf54      	ite	pl
 800ee6a:	9305      	strpl	r3, [sp, #20]
 800ee6c:	9306      	strmi	r3, [sp, #24]
 800ee6e:	f1bb 0f00 	cmp.w	fp, #0
 800ee72:	db3c      	blt.n	800eeee <_dtoa_r+0x24e>
 800ee74:	9b06      	ldr	r3, [sp, #24]
 800ee76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ee7a:	445b      	add	r3, fp
 800ee7c:	9306      	str	r3, [sp, #24]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9308      	str	r3, [sp, #32]
 800ee82:	9b07      	ldr	r3, [sp, #28]
 800ee84:	2b09      	cmp	r3, #9
 800ee86:	d868      	bhi.n	800ef5a <_dtoa_r+0x2ba>
 800ee88:	2b05      	cmp	r3, #5
 800ee8a:	bfc4      	itt	gt
 800ee8c:	3b04      	subgt	r3, #4
 800ee8e:	9307      	strgt	r3, [sp, #28]
 800ee90:	9b07      	ldr	r3, [sp, #28]
 800ee92:	f1a3 0302 	sub.w	r3, r3, #2
 800ee96:	bfcc      	ite	gt
 800ee98:	2500      	movgt	r5, #0
 800ee9a:	2501      	movle	r5, #1
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	f200 8085 	bhi.w	800efac <_dtoa_r+0x30c>
 800eea2:	e8df f003 	tbb	[pc, r3]
 800eea6:	3b2e      	.short	0x3b2e
 800eea8:	5839      	.short	0x5839
 800eeaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eeae:	441d      	add	r5, r3
 800eeb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eeb4:	2b20      	cmp	r3, #32
 800eeb6:	bfc1      	itttt	gt
 800eeb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eebc:	fa08 f803 	lslgt.w	r8, r8, r3
 800eec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800eec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eec8:	bfd6      	itet	le
 800eeca:	f1c3 0320 	rsble	r3, r3, #32
 800eece:	ea48 0003 	orrgt.w	r0, r8, r3
 800eed2:	fa06 f003 	lslle.w	r0, r6, r3
 800eed6:	f7f1 fb15 	bl	8000504 <__aeabi_ui2d>
 800eeda:	2201      	movs	r2, #1
 800eedc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800eee0:	3d01      	subs	r5, #1
 800eee2:	920e      	str	r2, [sp, #56]	; 0x38
 800eee4:	e76f      	b.n	800edc6 <_dtoa_r+0x126>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e7b3      	b.n	800ee52 <_dtoa_r+0x1b2>
 800eeea:	900c      	str	r0, [sp, #48]	; 0x30
 800eeec:	e7b2      	b.n	800ee54 <_dtoa_r+0x1b4>
 800eeee:	9b05      	ldr	r3, [sp, #20]
 800eef0:	eba3 030b 	sub.w	r3, r3, fp
 800eef4:	9305      	str	r3, [sp, #20]
 800eef6:	f1cb 0300 	rsb	r3, fp, #0
 800eefa:	9308      	str	r3, [sp, #32]
 800eefc:	2300      	movs	r3, #0
 800eefe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef00:	e7bf      	b.n	800ee82 <_dtoa_r+0x1e2>
 800ef02:	2300      	movs	r3, #0
 800ef04:	9309      	str	r3, [sp, #36]	; 0x24
 800ef06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	dc52      	bgt.n	800efb2 <_dtoa_r+0x312>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	9301      	str	r3, [sp, #4]
 800ef10:	9304      	str	r3, [sp, #16]
 800ef12:	461a      	mov	r2, r3
 800ef14:	920a      	str	r2, [sp, #40]	; 0x28
 800ef16:	e00b      	b.n	800ef30 <_dtoa_r+0x290>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e7f3      	b.n	800ef04 <_dtoa_r+0x264>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef22:	445b      	add	r3, fp
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	3301      	adds	r3, #1
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	bfb8      	it	lt
 800ef2e:	2301      	movlt	r3, #1
 800ef30:	69e0      	ldr	r0, [r4, #28]
 800ef32:	2100      	movs	r1, #0
 800ef34:	2204      	movs	r2, #4
 800ef36:	f102 0614 	add.w	r6, r2, #20
 800ef3a:	429e      	cmp	r6, r3
 800ef3c:	d93d      	bls.n	800efba <_dtoa_r+0x31a>
 800ef3e:	6041      	str	r1, [r0, #4]
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fd9f 	bl	800fa84 <_Balloc>
 800ef46:	9000      	str	r0, [sp, #0]
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d139      	bne.n	800efc0 <_dtoa_r+0x320>
 800ef4c:	4b16      	ldr	r3, [pc, #88]	; (800efa8 <_dtoa_r+0x308>)
 800ef4e:	4602      	mov	r2, r0
 800ef50:	f240 11af 	movw	r1, #431	; 0x1af
 800ef54:	e6bd      	b.n	800ecd2 <_dtoa_r+0x32>
 800ef56:	2301      	movs	r3, #1
 800ef58:	e7e1      	b.n	800ef1e <_dtoa_r+0x27e>
 800ef5a:	2501      	movs	r5, #1
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9307      	str	r3, [sp, #28]
 800ef60:	9509      	str	r5, [sp, #36]	; 0x24
 800ef62:	f04f 33ff 	mov.w	r3, #4294967295
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	9304      	str	r3, [sp, #16]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2312      	movs	r3, #18
 800ef6e:	e7d1      	b.n	800ef14 <_dtoa_r+0x274>
 800ef70:	636f4361 	.word	0x636f4361
 800ef74:	3fd287a7 	.word	0x3fd287a7
 800ef78:	8b60c8b3 	.word	0x8b60c8b3
 800ef7c:	3fc68a28 	.word	0x3fc68a28
 800ef80:	509f79fb 	.word	0x509f79fb
 800ef84:	3fd34413 	.word	0x3fd34413
 800ef88:	080131f5 	.word	0x080131f5
 800ef8c:	0801320c 	.word	0x0801320c
 800ef90:	7ff00000 	.word	0x7ff00000
 800ef94:	080131f1 	.word	0x080131f1
 800ef98:	080131e8 	.word	0x080131e8
 800ef9c:	080131c5 	.word	0x080131c5
 800efa0:	3ff80000 	.word	0x3ff80000
 800efa4:	080132f8 	.word	0x080132f8
 800efa8:	08013264 	.word	0x08013264
 800efac:	2301      	movs	r3, #1
 800efae:	9309      	str	r3, [sp, #36]	; 0x24
 800efb0:	e7d7      	b.n	800ef62 <_dtoa_r+0x2c2>
 800efb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	9304      	str	r3, [sp, #16]
 800efb8:	e7ba      	b.n	800ef30 <_dtoa_r+0x290>
 800efba:	3101      	adds	r1, #1
 800efbc:	0052      	lsls	r2, r2, #1
 800efbe:	e7ba      	b.n	800ef36 <_dtoa_r+0x296>
 800efc0:	69e3      	ldr	r3, [r4, #28]
 800efc2:	9a00      	ldr	r2, [sp, #0]
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	9b04      	ldr	r3, [sp, #16]
 800efc8:	2b0e      	cmp	r3, #14
 800efca:	f200 80a8 	bhi.w	800f11e <_dtoa_r+0x47e>
 800efce:	2d00      	cmp	r5, #0
 800efd0:	f000 80a5 	beq.w	800f11e <_dtoa_r+0x47e>
 800efd4:	f1bb 0f00 	cmp.w	fp, #0
 800efd8:	dd38      	ble.n	800f04c <_dtoa_r+0x3ac>
 800efda:	4bc0      	ldr	r3, [pc, #768]	; (800f2dc <_dtoa_r+0x63c>)
 800efdc:	f00b 020f 	and.w	r2, fp, #15
 800efe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800efe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800efec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eff0:	d019      	beq.n	800f026 <_dtoa_r+0x386>
 800eff2:	4bbb      	ldr	r3, [pc, #748]	; (800f2e0 <_dtoa_r+0x640>)
 800eff4:	ec51 0b18 	vmov	r0, r1, d8
 800eff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800effc:	f7f1 fc26 	bl	800084c <__aeabi_ddiv>
 800f000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f004:	f008 080f 	and.w	r8, r8, #15
 800f008:	2503      	movs	r5, #3
 800f00a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f2e0 <_dtoa_r+0x640>
 800f00e:	f1b8 0f00 	cmp.w	r8, #0
 800f012:	d10a      	bne.n	800f02a <_dtoa_r+0x38a>
 800f014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f018:	4632      	mov	r2, r6
 800f01a:	463b      	mov	r3, r7
 800f01c:	f7f1 fc16 	bl	800084c <__aeabi_ddiv>
 800f020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f024:	e02b      	b.n	800f07e <_dtoa_r+0x3de>
 800f026:	2502      	movs	r5, #2
 800f028:	e7ef      	b.n	800f00a <_dtoa_r+0x36a>
 800f02a:	f018 0f01 	tst.w	r8, #1
 800f02e:	d008      	beq.n	800f042 <_dtoa_r+0x3a2>
 800f030:	4630      	mov	r0, r6
 800f032:	4639      	mov	r1, r7
 800f034:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f038:	f7f1 fade 	bl	80005f8 <__aeabi_dmul>
 800f03c:	3501      	adds	r5, #1
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f046:	f109 0908 	add.w	r9, r9, #8
 800f04a:	e7e0      	b.n	800f00e <_dtoa_r+0x36e>
 800f04c:	f000 809f 	beq.w	800f18e <_dtoa_r+0x4ee>
 800f050:	f1cb 0600 	rsb	r6, fp, #0
 800f054:	4ba1      	ldr	r3, [pc, #644]	; (800f2dc <_dtoa_r+0x63c>)
 800f056:	4fa2      	ldr	r7, [pc, #648]	; (800f2e0 <_dtoa_r+0x640>)
 800f058:	f006 020f 	and.w	r2, r6, #15
 800f05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f064:	ec51 0b18 	vmov	r0, r1, d8
 800f068:	f7f1 fac6 	bl	80005f8 <__aeabi_dmul>
 800f06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f070:	1136      	asrs	r6, r6, #4
 800f072:	2300      	movs	r3, #0
 800f074:	2502      	movs	r5, #2
 800f076:	2e00      	cmp	r6, #0
 800f078:	d17e      	bne.n	800f178 <_dtoa_r+0x4d8>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1d0      	bne.n	800f020 <_dtoa_r+0x380>
 800f07e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 8084 	beq.w	800f192 <_dtoa_r+0x4f2>
 800f08a:	4b96      	ldr	r3, [pc, #600]	; (800f2e4 <_dtoa_r+0x644>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	4640      	mov	r0, r8
 800f090:	4649      	mov	r1, r9
 800f092:	f7f1 fd23 	bl	8000adc <__aeabi_dcmplt>
 800f096:	2800      	cmp	r0, #0
 800f098:	d07b      	beq.n	800f192 <_dtoa_r+0x4f2>
 800f09a:	9b04      	ldr	r3, [sp, #16]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d078      	beq.n	800f192 <_dtoa_r+0x4f2>
 800f0a0:	9b01      	ldr	r3, [sp, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dd39      	ble.n	800f11a <_dtoa_r+0x47a>
 800f0a6:	4b90      	ldr	r3, [pc, #576]	; (800f2e8 <_dtoa_r+0x648>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0b6:	9e01      	ldr	r6, [sp, #4]
 800f0b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f0bc:	3501      	adds	r5, #1
 800f0be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f7f1 fa2e 	bl	8000524 <__aeabi_i2d>
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	464b      	mov	r3, r9
 800f0cc:	f7f1 fa94 	bl	80005f8 <__aeabi_dmul>
 800f0d0:	4b86      	ldr	r3, [pc, #536]	; (800f2ec <_dtoa_r+0x64c>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f7f1 f8da 	bl	800028c <__adddf3>
 800f0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0e0:	9303      	str	r3, [sp, #12]
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	d158      	bne.n	800f198 <_dtoa_r+0x4f8>
 800f0e6:	4b82      	ldr	r3, [pc, #520]	; (800f2f0 <_dtoa_r+0x650>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	4649      	mov	r1, r9
 800f0ee:	f7f1 f8cb 	bl	8000288 <__aeabi_dsub>
 800f0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0f6:	4680      	mov	r8, r0
 800f0f8:	4689      	mov	r9, r1
 800f0fa:	f7f1 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	f040 8296 	bne.w	800f630 <_dtoa_r+0x990>
 800f104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f108:	4640      	mov	r0, r8
 800f10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f10e:	4649      	mov	r1, r9
 800f110:	f7f1 fce4 	bl	8000adc <__aeabi_dcmplt>
 800f114:	2800      	cmp	r0, #0
 800f116:	f040 8289 	bne.w	800f62c <_dtoa_r+0x98c>
 800f11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f120:	2b00      	cmp	r3, #0
 800f122:	f2c0 814e 	blt.w	800f3c2 <_dtoa_r+0x722>
 800f126:	f1bb 0f0e 	cmp.w	fp, #14
 800f12a:	f300 814a 	bgt.w	800f3c2 <_dtoa_r+0x722>
 800f12e:	4b6b      	ldr	r3, [pc, #428]	; (800f2dc <_dtoa_r+0x63c>)
 800f130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f280 80dc 	bge.w	800f2f8 <_dtoa_r+0x658>
 800f140:	9b04      	ldr	r3, [sp, #16]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f300 80d8 	bgt.w	800f2f8 <_dtoa_r+0x658>
 800f148:	f040 826f 	bne.w	800f62a <_dtoa_r+0x98a>
 800f14c:	4b68      	ldr	r3, [pc, #416]	; (800f2f0 <_dtoa_r+0x650>)
 800f14e:	2200      	movs	r2, #0
 800f150:	4640      	mov	r0, r8
 800f152:	4649      	mov	r1, r9
 800f154:	f7f1 fa50 	bl	80005f8 <__aeabi_dmul>
 800f158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f15c:	f7f1 fcd2 	bl	8000b04 <__aeabi_dcmpge>
 800f160:	9e04      	ldr	r6, [sp, #16]
 800f162:	4637      	mov	r7, r6
 800f164:	2800      	cmp	r0, #0
 800f166:	f040 8245 	bne.w	800f5f4 <_dtoa_r+0x954>
 800f16a:	9d00      	ldr	r5, [sp, #0]
 800f16c:	2331      	movs	r3, #49	; 0x31
 800f16e:	f805 3b01 	strb.w	r3, [r5], #1
 800f172:	f10b 0b01 	add.w	fp, fp, #1
 800f176:	e241      	b.n	800f5fc <_dtoa_r+0x95c>
 800f178:	07f2      	lsls	r2, r6, #31
 800f17a:	d505      	bpl.n	800f188 <_dtoa_r+0x4e8>
 800f17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f180:	f7f1 fa3a 	bl	80005f8 <__aeabi_dmul>
 800f184:	3501      	adds	r5, #1
 800f186:	2301      	movs	r3, #1
 800f188:	1076      	asrs	r6, r6, #1
 800f18a:	3708      	adds	r7, #8
 800f18c:	e773      	b.n	800f076 <_dtoa_r+0x3d6>
 800f18e:	2502      	movs	r5, #2
 800f190:	e775      	b.n	800f07e <_dtoa_r+0x3de>
 800f192:	9e04      	ldr	r6, [sp, #16]
 800f194:	465f      	mov	r7, fp
 800f196:	e792      	b.n	800f0be <_dtoa_r+0x41e>
 800f198:	9900      	ldr	r1, [sp, #0]
 800f19a:	4b50      	ldr	r3, [pc, #320]	; (800f2dc <_dtoa_r+0x63c>)
 800f19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1a0:	4431      	add	r1, r6
 800f1a2:	9102      	str	r1, [sp, #8]
 800f1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1a6:	eeb0 9a47 	vmov.f32	s18, s14
 800f1aa:	eef0 9a67 	vmov.f32	s19, s15
 800f1ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f1b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	d044      	beq.n	800f244 <_dtoa_r+0x5a4>
 800f1ba:	494e      	ldr	r1, [pc, #312]	; (800f2f4 <_dtoa_r+0x654>)
 800f1bc:	2000      	movs	r0, #0
 800f1be:	f7f1 fb45 	bl	800084c <__aeabi_ddiv>
 800f1c2:	ec53 2b19 	vmov	r2, r3, d9
 800f1c6:	f7f1 f85f 	bl	8000288 <__aeabi_dsub>
 800f1ca:	9d00      	ldr	r5, [sp, #0]
 800f1cc:	ec41 0b19 	vmov	d9, r0, r1
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	f7f1 fcc0 	bl	8000b58 <__aeabi_d2iz>
 800f1d8:	4606      	mov	r6, r0
 800f1da:	f7f1 f9a3 	bl	8000524 <__aeabi_i2d>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	4649      	mov	r1, r9
 800f1e6:	f7f1 f84f 	bl	8000288 <__aeabi_dsub>
 800f1ea:	3630      	adds	r6, #48	; 0x30
 800f1ec:	f805 6b01 	strb.w	r6, [r5], #1
 800f1f0:	ec53 2b19 	vmov	r2, r3, d9
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	4689      	mov	r9, r1
 800f1f8:	f7f1 fc70 	bl	8000adc <__aeabi_dcmplt>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d164      	bne.n	800f2ca <_dtoa_r+0x62a>
 800f200:	4642      	mov	r2, r8
 800f202:	464b      	mov	r3, r9
 800f204:	4937      	ldr	r1, [pc, #220]	; (800f2e4 <_dtoa_r+0x644>)
 800f206:	2000      	movs	r0, #0
 800f208:	f7f1 f83e 	bl	8000288 <__aeabi_dsub>
 800f20c:	ec53 2b19 	vmov	r2, r3, d9
 800f210:	f7f1 fc64 	bl	8000adc <__aeabi_dcmplt>
 800f214:	2800      	cmp	r0, #0
 800f216:	f040 80b6 	bne.w	800f386 <_dtoa_r+0x6e6>
 800f21a:	9b02      	ldr	r3, [sp, #8]
 800f21c:	429d      	cmp	r5, r3
 800f21e:	f43f af7c 	beq.w	800f11a <_dtoa_r+0x47a>
 800f222:	4b31      	ldr	r3, [pc, #196]	; (800f2e8 <_dtoa_r+0x648>)
 800f224:	ec51 0b19 	vmov	r0, r1, d9
 800f228:	2200      	movs	r2, #0
 800f22a:	f7f1 f9e5 	bl	80005f8 <__aeabi_dmul>
 800f22e:	4b2e      	ldr	r3, [pc, #184]	; (800f2e8 <_dtoa_r+0x648>)
 800f230:	ec41 0b19 	vmov	d9, r0, r1
 800f234:	2200      	movs	r2, #0
 800f236:	4640      	mov	r0, r8
 800f238:	4649      	mov	r1, r9
 800f23a:	f7f1 f9dd 	bl	80005f8 <__aeabi_dmul>
 800f23e:	4680      	mov	r8, r0
 800f240:	4689      	mov	r9, r1
 800f242:	e7c5      	b.n	800f1d0 <_dtoa_r+0x530>
 800f244:	ec51 0b17 	vmov	r0, r1, d7
 800f248:	f7f1 f9d6 	bl	80005f8 <__aeabi_dmul>
 800f24c:	9b02      	ldr	r3, [sp, #8]
 800f24e:	9d00      	ldr	r5, [sp, #0]
 800f250:	930f      	str	r3, [sp, #60]	; 0x3c
 800f252:	ec41 0b19 	vmov	d9, r0, r1
 800f256:	4649      	mov	r1, r9
 800f258:	4640      	mov	r0, r8
 800f25a:	f7f1 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800f25e:	4606      	mov	r6, r0
 800f260:	f7f1 f960 	bl	8000524 <__aeabi_i2d>
 800f264:	3630      	adds	r6, #48	; 0x30
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4640      	mov	r0, r8
 800f26c:	4649      	mov	r1, r9
 800f26e:	f7f1 f80b 	bl	8000288 <__aeabi_dsub>
 800f272:	f805 6b01 	strb.w	r6, [r5], #1
 800f276:	9b02      	ldr	r3, [sp, #8]
 800f278:	429d      	cmp	r5, r3
 800f27a:	4680      	mov	r8, r0
 800f27c:	4689      	mov	r9, r1
 800f27e:	f04f 0200 	mov.w	r2, #0
 800f282:	d124      	bne.n	800f2ce <_dtoa_r+0x62e>
 800f284:	4b1b      	ldr	r3, [pc, #108]	; (800f2f4 <_dtoa_r+0x654>)
 800f286:	ec51 0b19 	vmov	r0, r1, d9
 800f28a:	f7f0 ffff 	bl	800028c <__adddf3>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4640      	mov	r0, r8
 800f294:	4649      	mov	r1, r9
 800f296:	f7f1 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d173      	bne.n	800f386 <_dtoa_r+0x6e6>
 800f29e:	ec53 2b19 	vmov	r2, r3, d9
 800f2a2:	4914      	ldr	r1, [pc, #80]	; (800f2f4 <_dtoa_r+0x654>)
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f7f0 ffef 	bl	8000288 <__aeabi_dsub>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	4649      	mov	r1, r9
 800f2b2:	f7f1 fc13 	bl	8000adc <__aeabi_dcmplt>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f43f af2f 	beq.w	800f11a <_dtoa_r+0x47a>
 800f2bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f2be:	1e6b      	subs	r3, r5, #1
 800f2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2c6:	2b30      	cmp	r3, #48	; 0x30
 800f2c8:	d0f8      	beq.n	800f2bc <_dtoa_r+0x61c>
 800f2ca:	46bb      	mov	fp, r7
 800f2cc:	e04a      	b.n	800f364 <_dtoa_r+0x6c4>
 800f2ce:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <_dtoa_r+0x648>)
 800f2d0:	f7f1 f992 	bl	80005f8 <__aeabi_dmul>
 800f2d4:	4680      	mov	r8, r0
 800f2d6:	4689      	mov	r9, r1
 800f2d8:	e7bd      	b.n	800f256 <_dtoa_r+0x5b6>
 800f2da:	bf00      	nop
 800f2dc:	080132f8 	.word	0x080132f8
 800f2e0:	080132d0 	.word	0x080132d0
 800f2e4:	3ff00000 	.word	0x3ff00000
 800f2e8:	40240000 	.word	0x40240000
 800f2ec:	401c0000 	.word	0x401c0000
 800f2f0:	40140000 	.word	0x40140000
 800f2f4:	3fe00000 	.word	0x3fe00000
 800f2f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2fc:	9d00      	ldr	r5, [sp, #0]
 800f2fe:	4642      	mov	r2, r8
 800f300:	464b      	mov	r3, r9
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	f7f1 faa1 	bl	800084c <__aeabi_ddiv>
 800f30a:	f7f1 fc25 	bl	8000b58 <__aeabi_d2iz>
 800f30e:	9001      	str	r0, [sp, #4]
 800f310:	f7f1 f908 	bl	8000524 <__aeabi_i2d>
 800f314:	4642      	mov	r2, r8
 800f316:	464b      	mov	r3, r9
 800f318:	f7f1 f96e 	bl	80005f8 <__aeabi_dmul>
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	f7f0 ffb0 	bl	8000288 <__aeabi_dsub>
 800f328:	9e01      	ldr	r6, [sp, #4]
 800f32a:	9f04      	ldr	r7, [sp, #16]
 800f32c:	3630      	adds	r6, #48	; 0x30
 800f32e:	f805 6b01 	strb.w	r6, [r5], #1
 800f332:	9e00      	ldr	r6, [sp, #0]
 800f334:	1bae      	subs	r6, r5, r6
 800f336:	42b7      	cmp	r7, r6
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	d134      	bne.n	800f3a8 <_dtoa_r+0x708>
 800f33e:	f7f0 ffa5 	bl	800028c <__adddf3>
 800f342:	4642      	mov	r2, r8
 800f344:	464b      	mov	r3, r9
 800f346:	4606      	mov	r6, r0
 800f348:	460f      	mov	r7, r1
 800f34a:	f7f1 fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800f34e:	b9c8      	cbnz	r0, 800f384 <_dtoa_r+0x6e4>
 800f350:	4642      	mov	r2, r8
 800f352:	464b      	mov	r3, r9
 800f354:	4630      	mov	r0, r6
 800f356:	4639      	mov	r1, r7
 800f358:	f7f1 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f35c:	b110      	cbz	r0, 800f364 <_dtoa_r+0x6c4>
 800f35e:	9b01      	ldr	r3, [sp, #4]
 800f360:	07db      	lsls	r3, r3, #31
 800f362:	d40f      	bmi.n	800f384 <_dtoa_r+0x6e4>
 800f364:	4651      	mov	r1, sl
 800f366:	4620      	mov	r0, r4
 800f368:	f000 fbcc 	bl	800fb04 <_Bfree>
 800f36c:	2300      	movs	r3, #0
 800f36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f370:	702b      	strb	r3, [r5, #0]
 800f372:	f10b 0301 	add.w	r3, fp, #1
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	f43f ace2 	beq.w	800ed44 <_dtoa_r+0xa4>
 800f380:	601d      	str	r5, [r3, #0]
 800f382:	e4df      	b.n	800ed44 <_dtoa_r+0xa4>
 800f384:	465f      	mov	r7, fp
 800f386:	462b      	mov	r3, r5
 800f388:	461d      	mov	r5, r3
 800f38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f38e:	2a39      	cmp	r2, #57	; 0x39
 800f390:	d106      	bne.n	800f3a0 <_dtoa_r+0x700>
 800f392:	9a00      	ldr	r2, [sp, #0]
 800f394:	429a      	cmp	r2, r3
 800f396:	d1f7      	bne.n	800f388 <_dtoa_r+0x6e8>
 800f398:	9900      	ldr	r1, [sp, #0]
 800f39a:	2230      	movs	r2, #48	; 0x30
 800f39c:	3701      	adds	r7, #1
 800f39e:	700a      	strb	r2, [r1, #0]
 800f3a0:	781a      	ldrb	r2, [r3, #0]
 800f3a2:	3201      	adds	r2, #1
 800f3a4:	701a      	strb	r2, [r3, #0]
 800f3a6:	e790      	b.n	800f2ca <_dtoa_r+0x62a>
 800f3a8:	4ba3      	ldr	r3, [pc, #652]	; (800f638 <_dtoa_r+0x998>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f7f1 f924 	bl	80005f8 <__aeabi_dmul>
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	4606      	mov	r6, r0
 800f3b6:	460f      	mov	r7, r1
 800f3b8:	f7f1 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d09e      	beq.n	800f2fe <_dtoa_r+0x65e>
 800f3c0:	e7d0      	b.n	800f364 <_dtoa_r+0x6c4>
 800f3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3c4:	2a00      	cmp	r2, #0
 800f3c6:	f000 80ca 	beq.w	800f55e <_dtoa_r+0x8be>
 800f3ca:	9a07      	ldr	r2, [sp, #28]
 800f3cc:	2a01      	cmp	r2, #1
 800f3ce:	f300 80ad 	bgt.w	800f52c <_dtoa_r+0x88c>
 800f3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3d4:	2a00      	cmp	r2, #0
 800f3d6:	f000 80a5 	beq.w	800f524 <_dtoa_r+0x884>
 800f3da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3de:	9e08      	ldr	r6, [sp, #32]
 800f3e0:	9d05      	ldr	r5, [sp, #20]
 800f3e2:	9a05      	ldr	r2, [sp, #20]
 800f3e4:	441a      	add	r2, r3
 800f3e6:	9205      	str	r2, [sp, #20]
 800f3e8:	9a06      	ldr	r2, [sp, #24]
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	441a      	add	r2, r3
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	9206      	str	r2, [sp, #24]
 800f3f2:	f000 fc3d 	bl	800fc70 <__i2b>
 800f3f6:	4607      	mov	r7, r0
 800f3f8:	b165      	cbz	r5, 800f414 <_dtoa_r+0x774>
 800f3fa:	9b06      	ldr	r3, [sp, #24]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	dd09      	ble.n	800f414 <_dtoa_r+0x774>
 800f400:	42ab      	cmp	r3, r5
 800f402:	9a05      	ldr	r2, [sp, #20]
 800f404:	bfa8      	it	ge
 800f406:	462b      	movge	r3, r5
 800f408:	1ad2      	subs	r2, r2, r3
 800f40a:	9205      	str	r2, [sp, #20]
 800f40c:	9a06      	ldr	r2, [sp, #24]
 800f40e:	1aed      	subs	r5, r5, r3
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	9306      	str	r3, [sp, #24]
 800f414:	9b08      	ldr	r3, [sp, #32]
 800f416:	b1f3      	cbz	r3, 800f456 <_dtoa_r+0x7b6>
 800f418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 80a3 	beq.w	800f566 <_dtoa_r+0x8c6>
 800f420:	2e00      	cmp	r6, #0
 800f422:	dd10      	ble.n	800f446 <_dtoa_r+0x7a6>
 800f424:	4639      	mov	r1, r7
 800f426:	4632      	mov	r2, r6
 800f428:	4620      	mov	r0, r4
 800f42a:	f000 fce1 	bl	800fdf0 <__pow5mult>
 800f42e:	4652      	mov	r2, sl
 800f430:	4601      	mov	r1, r0
 800f432:	4607      	mov	r7, r0
 800f434:	4620      	mov	r0, r4
 800f436:	f000 fc31 	bl	800fc9c <__multiply>
 800f43a:	4651      	mov	r1, sl
 800f43c:	4680      	mov	r8, r0
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 fb60 	bl	800fb04 <_Bfree>
 800f444:	46c2      	mov	sl, r8
 800f446:	9b08      	ldr	r3, [sp, #32]
 800f448:	1b9a      	subs	r2, r3, r6
 800f44a:	d004      	beq.n	800f456 <_dtoa_r+0x7b6>
 800f44c:	4651      	mov	r1, sl
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fcce 	bl	800fdf0 <__pow5mult>
 800f454:	4682      	mov	sl, r0
 800f456:	2101      	movs	r1, #1
 800f458:	4620      	mov	r0, r4
 800f45a:	f000 fc09 	bl	800fc70 <__i2b>
 800f45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f460:	2b00      	cmp	r3, #0
 800f462:	4606      	mov	r6, r0
 800f464:	f340 8081 	ble.w	800f56a <_dtoa_r+0x8ca>
 800f468:	461a      	mov	r2, r3
 800f46a:	4601      	mov	r1, r0
 800f46c:	4620      	mov	r0, r4
 800f46e:	f000 fcbf 	bl	800fdf0 <__pow5mult>
 800f472:	9b07      	ldr	r3, [sp, #28]
 800f474:	2b01      	cmp	r3, #1
 800f476:	4606      	mov	r6, r0
 800f478:	dd7a      	ble.n	800f570 <_dtoa_r+0x8d0>
 800f47a:	f04f 0800 	mov.w	r8, #0
 800f47e:	6933      	ldr	r3, [r6, #16]
 800f480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f484:	6918      	ldr	r0, [r3, #16]
 800f486:	f000 fba5 	bl	800fbd4 <__hi0bits>
 800f48a:	f1c0 0020 	rsb	r0, r0, #32
 800f48e:	9b06      	ldr	r3, [sp, #24]
 800f490:	4418      	add	r0, r3
 800f492:	f010 001f 	ands.w	r0, r0, #31
 800f496:	f000 8094 	beq.w	800f5c2 <_dtoa_r+0x922>
 800f49a:	f1c0 0320 	rsb	r3, r0, #32
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	f340 8085 	ble.w	800f5ae <_dtoa_r+0x90e>
 800f4a4:	9b05      	ldr	r3, [sp, #20]
 800f4a6:	f1c0 001c 	rsb	r0, r0, #28
 800f4aa:	4403      	add	r3, r0
 800f4ac:	9305      	str	r3, [sp, #20]
 800f4ae:	9b06      	ldr	r3, [sp, #24]
 800f4b0:	4403      	add	r3, r0
 800f4b2:	4405      	add	r5, r0
 800f4b4:	9306      	str	r3, [sp, #24]
 800f4b6:	9b05      	ldr	r3, [sp, #20]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	dd05      	ble.n	800f4c8 <_dtoa_r+0x828>
 800f4bc:	4651      	mov	r1, sl
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fcef 	bl	800fea4 <__lshift>
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	9b06      	ldr	r3, [sp, #24]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	dd05      	ble.n	800f4da <_dtoa_r+0x83a>
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f000 fce6 	bl	800fea4 <__lshift>
 800f4d8:	4606      	mov	r6, r0
 800f4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d072      	beq.n	800f5c6 <_dtoa_r+0x926>
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4650      	mov	r0, sl
 800f4e4:	f000 fd4a 	bl	800ff7c <__mcmp>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	da6c      	bge.n	800f5c6 <_dtoa_r+0x926>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4651      	mov	r1, sl
 800f4f0:	220a      	movs	r2, #10
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f000 fb28 	bl	800fb48 <__multadd>
 800f4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4fe:	4682      	mov	sl, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 81b0 	beq.w	800f866 <_dtoa_r+0xbc6>
 800f506:	2300      	movs	r3, #0
 800f508:	4639      	mov	r1, r7
 800f50a:	220a      	movs	r2, #10
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 fb1b 	bl	800fb48 <__multadd>
 800f512:	9b01      	ldr	r3, [sp, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	4607      	mov	r7, r0
 800f518:	f300 8096 	bgt.w	800f648 <_dtoa_r+0x9a8>
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	2b02      	cmp	r3, #2
 800f520:	dc59      	bgt.n	800f5d6 <_dtoa_r+0x936>
 800f522:	e091      	b.n	800f648 <_dtoa_r+0x9a8>
 800f524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f52a:	e758      	b.n	800f3de <_dtoa_r+0x73e>
 800f52c:	9b04      	ldr	r3, [sp, #16]
 800f52e:	1e5e      	subs	r6, r3, #1
 800f530:	9b08      	ldr	r3, [sp, #32]
 800f532:	42b3      	cmp	r3, r6
 800f534:	bfbf      	itttt	lt
 800f536:	9b08      	ldrlt	r3, [sp, #32]
 800f538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f53a:	9608      	strlt	r6, [sp, #32]
 800f53c:	1af3      	sublt	r3, r6, r3
 800f53e:	bfb4      	ite	lt
 800f540:	18d2      	addlt	r2, r2, r3
 800f542:	1b9e      	subge	r6, r3, r6
 800f544:	9b04      	ldr	r3, [sp, #16]
 800f546:	bfbc      	itt	lt
 800f548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f54a:	2600      	movlt	r6, #0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	bfb7      	itett	lt
 800f550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f558:	1a9d      	sublt	r5, r3, r2
 800f55a:	2300      	movlt	r3, #0
 800f55c:	e741      	b.n	800f3e2 <_dtoa_r+0x742>
 800f55e:	9e08      	ldr	r6, [sp, #32]
 800f560:	9d05      	ldr	r5, [sp, #20]
 800f562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f564:	e748      	b.n	800f3f8 <_dtoa_r+0x758>
 800f566:	9a08      	ldr	r2, [sp, #32]
 800f568:	e770      	b.n	800f44c <_dtoa_r+0x7ac>
 800f56a:	9b07      	ldr	r3, [sp, #28]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	dc19      	bgt.n	800f5a4 <_dtoa_r+0x904>
 800f570:	9b02      	ldr	r3, [sp, #8]
 800f572:	b9bb      	cbnz	r3, 800f5a4 <_dtoa_r+0x904>
 800f574:	9b03      	ldr	r3, [sp, #12]
 800f576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f57a:	b99b      	cbnz	r3, 800f5a4 <_dtoa_r+0x904>
 800f57c:	9b03      	ldr	r3, [sp, #12]
 800f57e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f582:	0d1b      	lsrs	r3, r3, #20
 800f584:	051b      	lsls	r3, r3, #20
 800f586:	b183      	cbz	r3, 800f5aa <_dtoa_r+0x90a>
 800f588:	9b05      	ldr	r3, [sp, #20]
 800f58a:	3301      	adds	r3, #1
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	9b06      	ldr	r3, [sp, #24]
 800f590:	3301      	adds	r3, #1
 800f592:	9306      	str	r3, [sp, #24]
 800f594:	f04f 0801 	mov.w	r8, #1
 800f598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f47f af6f 	bne.w	800f47e <_dtoa_r+0x7de>
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	e774      	b.n	800f48e <_dtoa_r+0x7ee>
 800f5a4:	f04f 0800 	mov.w	r8, #0
 800f5a8:	e7f6      	b.n	800f598 <_dtoa_r+0x8f8>
 800f5aa:	4698      	mov	r8, r3
 800f5ac:	e7f4      	b.n	800f598 <_dtoa_r+0x8f8>
 800f5ae:	d082      	beq.n	800f4b6 <_dtoa_r+0x816>
 800f5b0:	9a05      	ldr	r2, [sp, #20]
 800f5b2:	331c      	adds	r3, #28
 800f5b4:	441a      	add	r2, r3
 800f5b6:	9205      	str	r2, [sp, #20]
 800f5b8:	9a06      	ldr	r2, [sp, #24]
 800f5ba:	441a      	add	r2, r3
 800f5bc:	441d      	add	r5, r3
 800f5be:	9206      	str	r2, [sp, #24]
 800f5c0:	e779      	b.n	800f4b6 <_dtoa_r+0x816>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	e7f4      	b.n	800f5b0 <_dtoa_r+0x910>
 800f5c6:	9b04      	ldr	r3, [sp, #16]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	dc37      	bgt.n	800f63c <_dtoa_r+0x99c>
 800f5cc:	9b07      	ldr	r3, [sp, #28]
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	dd34      	ble.n	800f63c <_dtoa_r+0x99c>
 800f5d2:	9b04      	ldr	r3, [sp, #16]
 800f5d4:	9301      	str	r3, [sp, #4]
 800f5d6:	9b01      	ldr	r3, [sp, #4]
 800f5d8:	b963      	cbnz	r3, 800f5f4 <_dtoa_r+0x954>
 800f5da:	4631      	mov	r1, r6
 800f5dc:	2205      	movs	r2, #5
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f000 fab2 	bl	800fb48 <__multadd>
 800f5e4:	4601      	mov	r1, r0
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	4650      	mov	r0, sl
 800f5ea:	f000 fcc7 	bl	800ff7c <__mcmp>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	f73f adbb 	bgt.w	800f16a <_dtoa_r+0x4ca>
 800f5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f6:	9d00      	ldr	r5, [sp, #0]
 800f5f8:	ea6f 0b03 	mvn.w	fp, r3
 800f5fc:	f04f 0800 	mov.w	r8, #0
 800f600:	4631      	mov	r1, r6
 800f602:	4620      	mov	r0, r4
 800f604:	f000 fa7e 	bl	800fb04 <_Bfree>
 800f608:	2f00      	cmp	r7, #0
 800f60a:	f43f aeab 	beq.w	800f364 <_dtoa_r+0x6c4>
 800f60e:	f1b8 0f00 	cmp.w	r8, #0
 800f612:	d005      	beq.n	800f620 <_dtoa_r+0x980>
 800f614:	45b8      	cmp	r8, r7
 800f616:	d003      	beq.n	800f620 <_dtoa_r+0x980>
 800f618:	4641      	mov	r1, r8
 800f61a:	4620      	mov	r0, r4
 800f61c:	f000 fa72 	bl	800fb04 <_Bfree>
 800f620:	4639      	mov	r1, r7
 800f622:	4620      	mov	r0, r4
 800f624:	f000 fa6e 	bl	800fb04 <_Bfree>
 800f628:	e69c      	b.n	800f364 <_dtoa_r+0x6c4>
 800f62a:	2600      	movs	r6, #0
 800f62c:	4637      	mov	r7, r6
 800f62e:	e7e1      	b.n	800f5f4 <_dtoa_r+0x954>
 800f630:	46bb      	mov	fp, r7
 800f632:	4637      	mov	r7, r6
 800f634:	e599      	b.n	800f16a <_dtoa_r+0x4ca>
 800f636:	bf00      	nop
 800f638:	40240000 	.word	0x40240000
 800f63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 80c8 	beq.w	800f7d4 <_dtoa_r+0xb34>
 800f644:	9b04      	ldr	r3, [sp, #16]
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	2d00      	cmp	r5, #0
 800f64a:	dd05      	ble.n	800f658 <_dtoa_r+0x9b8>
 800f64c:	4639      	mov	r1, r7
 800f64e:	462a      	mov	r2, r5
 800f650:	4620      	mov	r0, r4
 800f652:	f000 fc27 	bl	800fea4 <__lshift>
 800f656:	4607      	mov	r7, r0
 800f658:	f1b8 0f00 	cmp.w	r8, #0
 800f65c:	d05b      	beq.n	800f716 <_dtoa_r+0xa76>
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fa0f 	bl	800fa84 <_Balloc>
 800f666:	4605      	mov	r5, r0
 800f668:	b928      	cbnz	r0, 800f676 <_dtoa_r+0x9d6>
 800f66a:	4b83      	ldr	r3, [pc, #524]	; (800f878 <_dtoa_r+0xbd8>)
 800f66c:	4602      	mov	r2, r0
 800f66e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f672:	f7ff bb2e 	b.w	800ecd2 <_dtoa_r+0x32>
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	3202      	adds	r2, #2
 800f67a:	0092      	lsls	r2, r2, #2
 800f67c:	f107 010c 	add.w	r1, r7, #12
 800f680:	300c      	adds	r0, #12
 800f682:	f7ff fa74 	bl	800eb6e <memcpy>
 800f686:	2201      	movs	r2, #1
 800f688:	4629      	mov	r1, r5
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fc0a 	bl	800fea4 <__lshift>
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	3301      	adds	r3, #1
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f69a:	4413      	add	r3, r2
 800f69c:	9308      	str	r3, [sp, #32]
 800f69e:	9b02      	ldr	r3, [sp, #8]
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	46b8      	mov	r8, r7
 800f6a6:	9306      	str	r3, [sp, #24]
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	9b04      	ldr	r3, [sp, #16]
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	4650      	mov	r0, sl
 800f6b2:	9301      	str	r3, [sp, #4]
 800f6b4:	f7ff fa69 	bl	800eb8a <quorem>
 800f6b8:	4641      	mov	r1, r8
 800f6ba:	9002      	str	r0, [sp, #8]
 800f6bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f6c0:	4650      	mov	r0, sl
 800f6c2:	f000 fc5b 	bl	800ff7c <__mcmp>
 800f6c6:	463a      	mov	r2, r7
 800f6c8:	9005      	str	r0, [sp, #20]
 800f6ca:	4631      	mov	r1, r6
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f000 fc71 	bl	800ffb4 <__mdiff>
 800f6d2:	68c2      	ldr	r2, [r0, #12]
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	bb02      	cbnz	r2, 800f71a <_dtoa_r+0xa7a>
 800f6d8:	4601      	mov	r1, r0
 800f6da:	4650      	mov	r0, sl
 800f6dc:	f000 fc4e 	bl	800ff7c <__mcmp>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6e8:	f000 fa0c 	bl	800fb04 <_Bfree>
 800f6ec:	9b07      	ldr	r3, [sp, #28]
 800f6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f0:	9d04      	ldr	r5, [sp, #16]
 800f6f2:	ea43 0102 	orr.w	r1, r3, r2
 800f6f6:	9b06      	ldr	r3, [sp, #24]
 800f6f8:	4319      	orrs	r1, r3
 800f6fa:	d110      	bne.n	800f71e <_dtoa_r+0xa7e>
 800f6fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f700:	d029      	beq.n	800f756 <_dtoa_r+0xab6>
 800f702:	9b05      	ldr	r3, [sp, #20]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd02      	ble.n	800f70e <_dtoa_r+0xa6e>
 800f708:	9b02      	ldr	r3, [sp, #8]
 800f70a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f70e:	9b01      	ldr	r3, [sp, #4]
 800f710:	f883 9000 	strb.w	r9, [r3]
 800f714:	e774      	b.n	800f600 <_dtoa_r+0x960>
 800f716:	4638      	mov	r0, r7
 800f718:	e7ba      	b.n	800f690 <_dtoa_r+0x9f0>
 800f71a:	2201      	movs	r2, #1
 800f71c:	e7e1      	b.n	800f6e2 <_dtoa_r+0xa42>
 800f71e:	9b05      	ldr	r3, [sp, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	db04      	blt.n	800f72e <_dtoa_r+0xa8e>
 800f724:	9907      	ldr	r1, [sp, #28]
 800f726:	430b      	orrs	r3, r1
 800f728:	9906      	ldr	r1, [sp, #24]
 800f72a:	430b      	orrs	r3, r1
 800f72c:	d120      	bne.n	800f770 <_dtoa_r+0xad0>
 800f72e:	2a00      	cmp	r2, #0
 800f730:	dded      	ble.n	800f70e <_dtoa_r+0xa6e>
 800f732:	4651      	mov	r1, sl
 800f734:	2201      	movs	r2, #1
 800f736:	4620      	mov	r0, r4
 800f738:	f000 fbb4 	bl	800fea4 <__lshift>
 800f73c:	4631      	mov	r1, r6
 800f73e:	4682      	mov	sl, r0
 800f740:	f000 fc1c 	bl	800ff7c <__mcmp>
 800f744:	2800      	cmp	r0, #0
 800f746:	dc03      	bgt.n	800f750 <_dtoa_r+0xab0>
 800f748:	d1e1      	bne.n	800f70e <_dtoa_r+0xa6e>
 800f74a:	f019 0f01 	tst.w	r9, #1
 800f74e:	d0de      	beq.n	800f70e <_dtoa_r+0xa6e>
 800f750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f754:	d1d8      	bne.n	800f708 <_dtoa_r+0xa68>
 800f756:	9a01      	ldr	r2, [sp, #4]
 800f758:	2339      	movs	r3, #57	; 0x39
 800f75a:	7013      	strb	r3, [r2, #0]
 800f75c:	462b      	mov	r3, r5
 800f75e:	461d      	mov	r5, r3
 800f760:	3b01      	subs	r3, #1
 800f762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f766:	2a39      	cmp	r2, #57	; 0x39
 800f768:	d06c      	beq.n	800f844 <_dtoa_r+0xba4>
 800f76a:	3201      	adds	r2, #1
 800f76c:	701a      	strb	r2, [r3, #0]
 800f76e:	e747      	b.n	800f600 <_dtoa_r+0x960>
 800f770:	2a00      	cmp	r2, #0
 800f772:	dd07      	ble.n	800f784 <_dtoa_r+0xae4>
 800f774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f778:	d0ed      	beq.n	800f756 <_dtoa_r+0xab6>
 800f77a:	9a01      	ldr	r2, [sp, #4]
 800f77c:	f109 0301 	add.w	r3, r9, #1
 800f780:	7013      	strb	r3, [r2, #0]
 800f782:	e73d      	b.n	800f600 <_dtoa_r+0x960>
 800f784:	9b04      	ldr	r3, [sp, #16]
 800f786:	9a08      	ldr	r2, [sp, #32]
 800f788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d043      	beq.n	800f818 <_dtoa_r+0xb78>
 800f790:	4651      	mov	r1, sl
 800f792:	2300      	movs	r3, #0
 800f794:	220a      	movs	r2, #10
 800f796:	4620      	mov	r0, r4
 800f798:	f000 f9d6 	bl	800fb48 <__multadd>
 800f79c:	45b8      	cmp	r8, r7
 800f79e:	4682      	mov	sl, r0
 800f7a0:	f04f 0300 	mov.w	r3, #0
 800f7a4:	f04f 020a 	mov.w	r2, #10
 800f7a8:	4641      	mov	r1, r8
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	d107      	bne.n	800f7be <_dtoa_r+0xb1e>
 800f7ae:	f000 f9cb 	bl	800fb48 <__multadd>
 800f7b2:	4680      	mov	r8, r0
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	9b04      	ldr	r3, [sp, #16]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	9304      	str	r3, [sp, #16]
 800f7bc:	e775      	b.n	800f6aa <_dtoa_r+0xa0a>
 800f7be:	f000 f9c3 	bl	800fb48 <__multadd>
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	4680      	mov	r8, r0
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	220a      	movs	r2, #10
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 f9bc 	bl	800fb48 <__multadd>
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	e7f0      	b.n	800f7b6 <_dtoa_r+0xb16>
 800f7d4:	9b04      	ldr	r3, [sp, #16]
 800f7d6:	9301      	str	r3, [sp, #4]
 800f7d8:	9d00      	ldr	r5, [sp, #0]
 800f7da:	4631      	mov	r1, r6
 800f7dc:	4650      	mov	r0, sl
 800f7de:	f7ff f9d4 	bl	800eb8a <quorem>
 800f7e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f7e6:	9b00      	ldr	r3, [sp, #0]
 800f7e8:	f805 9b01 	strb.w	r9, [r5], #1
 800f7ec:	1aea      	subs	r2, r5, r3
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	dd07      	ble.n	800f804 <_dtoa_r+0xb64>
 800f7f4:	4651      	mov	r1, sl
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	220a      	movs	r2, #10
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f000 f9a4 	bl	800fb48 <__multadd>
 800f800:	4682      	mov	sl, r0
 800f802:	e7ea      	b.n	800f7da <_dtoa_r+0xb3a>
 800f804:	9b01      	ldr	r3, [sp, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	bfc8      	it	gt
 800f80a:	461d      	movgt	r5, r3
 800f80c:	9b00      	ldr	r3, [sp, #0]
 800f80e:	bfd8      	it	le
 800f810:	2501      	movle	r5, #1
 800f812:	441d      	add	r5, r3
 800f814:	f04f 0800 	mov.w	r8, #0
 800f818:	4651      	mov	r1, sl
 800f81a:	2201      	movs	r2, #1
 800f81c:	4620      	mov	r0, r4
 800f81e:	f000 fb41 	bl	800fea4 <__lshift>
 800f822:	4631      	mov	r1, r6
 800f824:	4682      	mov	sl, r0
 800f826:	f000 fba9 	bl	800ff7c <__mcmp>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	dc96      	bgt.n	800f75c <_dtoa_r+0xabc>
 800f82e:	d102      	bne.n	800f836 <_dtoa_r+0xb96>
 800f830:	f019 0f01 	tst.w	r9, #1
 800f834:	d192      	bne.n	800f75c <_dtoa_r+0xabc>
 800f836:	462b      	mov	r3, r5
 800f838:	461d      	mov	r5, r3
 800f83a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f83e:	2a30      	cmp	r2, #48	; 0x30
 800f840:	d0fa      	beq.n	800f838 <_dtoa_r+0xb98>
 800f842:	e6dd      	b.n	800f600 <_dtoa_r+0x960>
 800f844:	9a00      	ldr	r2, [sp, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d189      	bne.n	800f75e <_dtoa_r+0xabe>
 800f84a:	f10b 0b01 	add.w	fp, fp, #1
 800f84e:	2331      	movs	r3, #49	; 0x31
 800f850:	e796      	b.n	800f780 <_dtoa_r+0xae0>
 800f852:	4b0a      	ldr	r3, [pc, #40]	; (800f87c <_dtoa_r+0xbdc>)
 800f854:	f7ff ba99 	b.w	800ed8a <_dtoa_r+0xea>
 800f858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f47f aa6d 	bne.w	800ed3a <_dtoa_r+0x9a>
 800f860:	4b07      	ldr	r3, [pc, #28]	; (800f880 <_dtoa_r+0xbe0>)
 800f862:	f7ff ba92 	b.w	800ed8a <_dtoa_r+0xea>
 800f866:	9b01      	ldr	r3, [sp, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	dcb5      	bgt.n	800f7d8 <_dtoa_r+0xb38>
 800f86c:	9b07      	ldr	r3, [sp, #28]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	f73f aeb1 	bgt.w	800f5d6 <_dtoa_r+0x936>
 800f874:	e7b0      	b.n	800f7d8 <_dtoa_r+0xb38>
 800f876:	bf00      	nop
 800f878:	08013264 	.word	0x08013264
 800f87c:	080131c4 	.word	0x080131c4
 800f880:	080131e8 	.word	0x080131e8

0800f884 <_free_r>:
 800f884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f886:	2900      	cmp	r1, #0
 800f888:	d044      	beq.n	800f914 <_free_r+0x90>
 800f88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f88e:	9001      	str	r0, [sp, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	f1a1 0404 	sub.w	r4, r1, #4
 800f896:	bfb8      	it	lt
 800f898:	18e4      	addlt	r4, r4, r3
 800f89a:	f000 f8e7 	bl	800fa6c <__malloc_lock>
 800f89e:	4a1e      	ldr	r2, [pc, #120]	; (800f918 <_free_r+0x94>)
 800f8a0:	9801      	ldr	r0, [sp, #4]
 800f8a2:	6813      	ldr	r3, [r2, #0]
 800f8a4:	b933      	cbnz	r3, 800f8b4 <_free_r+0x30>
 800f8a6:	6063      	str	r3, [r4, #4]
 800f8a8:	6014      	str	r4, [r2, #0]
 800f8aa:	b003      	add	sp, #12
 800f8ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8b0:	f000 b8e2 	b.w	800fa78 <__malloc_unlock>
 800f8b4:	42a3      	cmp	r3, r4
 800f8b6:	d908      	bls.n	800f8ca <_free_r+0x46>
 800f8b8:	6825      	ldr	r5, [r4, #0]
 800f8ba:	1961      	adds	r1, r4, r5
 800f8bc:	428b      	cmp	r3, r1
 800f8be:	bf01      	itttt	eq
 800f8c0:	6819      	ldreq	r1, [r3, #0]
 800f8c2:	685b      	ldreq	r3, [r3, #4]
 800f8c4:	1949      	addeq	r1, r1, r5
 800f8c6:	6021      	streq	r1, [r4, #0]
 800f8c8:	e7ed      	b.n	800f8a6 <_free_r+0x22>
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	b10b      	cbz	r3, 800f8d4 <_free_r+0x50>
 800f8d0:	42a3      	cmp	r3, r4
 800f8d2:	d9fa      	bls.n	800f8ca <_free_r+0x46>
 800f8d4:	6811      	ldr	r1, [r2, #0]
 800f8d6:	1855      	adds	r5, r2, r1
 800f8d8:	42a5      	cmp	r5, r4
 800f8da:	d10b      	bne.n	800f8f4 <_free_r+0x70>
 800f8dc:	6824      	ldr	r4, [r4, #0]
 800f8de:	4421      	add	r1, r4
 800f8e0:	1854      	adds	r4, r2, r1
 800f8e2:	42a3      	cmp	r3, r4
 800f8e4:	6011      	str	r1, [r2, #0]
 800f8e6:	d1e0      	bne.n	800f8aa <_free_r+0x26>
 800f8e8:	681c      	ldr	r4, [r3, #0]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	6053      	str	r3, [r2, #4]
 800f8ee:	440c      	add	r4, r1
 800f8f0:	6014      	str	r4, [r2, #0]
 800f8f2:	e7da      	b.n	800f8aa <_free_r+0x26>
 800f8f4:	d902      	bls.n	800f8fc <_free_r+0x78>
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	6003      	str	r3, [r0, #0]
 800f8fa:	e7d6      	b.n	800f8aa <_free_r+0x26>
 800f8fc:	6825      	ldr	r5, [r4, #0]
 800f8fe:	1961      	adds	r1, r4, r5
 800f900:	428b      	cmp	r3, r1
 800f902:	bf04      	itt	eq
 800f904:	6819      	ldreq	r1, [r3, #0]
 800f906:	685b      	ldreq	r3, [r3, #4]
 800f908:	6063      	str	r3, [r4, #4]
 800f90a:	bf04      	itt	eq
 800f90c:	1949      	addeq	r1, r1, r5
 800f90e:	6021      	streq	r1, [r4, #0]
 800f910:	6054      	str	r4, [r2, #4]
 800f912:	e7ca      	b.n	800f8aa <_free_r+0x26>
 800f914:	b003      	add	sp, #12
 800f916:	bd30      	pop	{r4, r5, pc}
 800f918:	200052f8 	.word	0x200052f8

0800f91c <malloc>:
 800f91c:	4b02      	ldr	r3, [pc, #8]	; (800f928 <malloc+0xc>)
 800f91e:	4601      	mov	r1, r0
 800f920:	6818      	ldr	r0, [r3, #0]
 800f922:	f000 b823 	b.w	800f96c <_malloc_r>
 800f926:	bf00      	nop
 800f928:	2000007c 	.word	0x2000007c

0800f92c <sbrk_aligned>:
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	4e0e      	ldr	r6, [pc, #56]	; (800f968 <sbrk_aligned+0x3c>)
 800f930:	460c      	mov	r4, r1
 800f932:	6831      	ldr	r1, [r6, #0]
 800f934:	4605      	mov	r5, r0
 800f936:	b911      	cbnz	r1, 800f93e <sbrk_aligned+0x12>
 800f938:	f000 fe40 	bl	80105bc <_sbrk_r>
 800f93c:	6030      	str	r0, [r6, #0]
 800f93e:	4621      	mov	r1, r4
 800f940:	4628      	mov	r0, r5
 800f942:	f000 fe3b 	bl	80105bc <_sbrk_r>
 800f946:	1c43      	adds	r3, r0, #1
 800f948:	d00a      	beq.n	800f960 <sbrk_aligned+0x34>
 800f94a:	1cc4      	adds	r4, r0, #3
 800f94c:	f024 0403 	bic.w	r4, r4, #3
 800f950:	42a0      	cmp	r0, r4
 800f952:	d007      	beq.n	800f964 <sbrk_aligned+0x38>
 800f954:	1a21      	subs	r1, r4, r0
 800f956:	4628      	mov	r0, r5
 800f958:	f000 fe30 	bl	80105bc <_sbrk_r>
 800f95c:	3001      	adds	r0, #1
 800f95e:	d101      	bne.n	800f964 <sbrk_aligned+0x38>
 800f960:	f04f 34ff 	mov.w	r4, #4294967295
 800f964:	4620      	mov	r0, r4
 800f966:	bd70      	pop	{r4, r5, r6, pc}
 800f968:	200052fc 	.word	0x200052fc

0800f96c <_malloc_r>:
 800f96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f970:	1ccd      	adds	r5, r1, #3
 800f972:	f025 0503 	bic.w	r5, r5, #3
 800f976:	3508      	adds	r5, #8
 800f978:	2d0c      	cmp	r5, #12
 800f97a:	bf38      	it	cc
 800f97c:	250c      	movcc	r5, #12
 800f97e:	2d00      	cmp	r5, #0
 800f980:	4607      	mov	r7, r0
 800f982:	db01      	blt.n	800f988 <_malloc_r+0x1c>
 800f984:	42a9      	cmp	r1, r5
 800f986:	d905      	bls.n	800f994 <_malloc_r+0x28>
 800f988:	230c      	movs	r3, #12
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	2600      	movs	r6, #0
 800f98e:	4630      	mov	r0, r6
 800f990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fa68 <_malloc_r+0xfc>
 800f998:	f000 f868 	bl	800fa6c <__malloc_lock>
 800f99c:	f8d8 3000 	ldr.w	r3, [r8]
 800f9a0:	461c      	mov	r4, r3
 800f9a2:	bb5c      	cbnz	r4, 800f9fc <_malloc_r+0x90>
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f7ff ffc0 	bl	800f92c <sbrk_aligned>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	d155      	bne.n	800fa5e <_malloc_r+0xf2>
 800f9b2:	f8d8 4000 	ldr.w	r4, [r8]
 800f9b6:	4626      	mov	r6, r4
 800f9b8:	2e00      	cmp	r6, #0
 800f9ba:	d145      	bne.n	800fa48 <_malloc_r+0xdc>
 800f9bc:	2c00      	cmp	r4, #0
 800f9be:	d048      	beq.n	800fa52 <_malloc_r+0xe6>
 800f9c0:	6823      	ldr	r3, [r4, #0]
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	eb04 0903 	add.w	r9, r4, r3
 800f9ca:	f000 fdf7 	bl	80105bc <_sbrk_r>
 800f9ce:	4581      	cmp	r9, r0
 800f9d0:	d13f      	bne.n	800fa52 <_malloc_r+0xe6>
 800f9d2:	6821      	ldr	r1, [r4, #0]
 800f9d4:	1a6d      	subs	r5, r5, r1
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4638      	mov	r0, r7
 800f9da:	f7ff ffa7 	bl	800f92c <sbrk_aligned>
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d037      	beq.n	800fa52 <_malloc_r+0xe6>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	442b      	add	r3, r5
 800f9e6:	6023      	str	r3, [r4, #0]
 800f9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d038      	beq.n	800fa62 <_malloc_r+0xf6>
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	42a2      	cmp	r2, r4
 800f9f4:	d12b      	bne.n	800fa4e <_malloc_r+0xe2>
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	605a      	str	r2, [r3, #4]
 800f9fa:	e00f      	b.n	800fa1c <_malloc_r+0xb0>
 800f9fc:	6822      	ldr	r2, [r4, #0]
 800f9fe:	1b52      	subs	r2, r2, r5
 800fa00:	d41f      	bmi.n	800fa42 <_malloc_r+0xd6>
 800fa02:	2a0b      	cmp	r2, #11
 800fa04:	d917      	bls.n	800fa36 <_malloc_r+0xca>
 800fa06:	1961      	adds	r1, r4, r5
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	6025      	str	r5, [r4, #0]
 800fa0c:	bf18      	it	ne
 800fa0e:	6059      	strne	r1, [r3, #4]
 800fa10:	6863      	ldr	r3, [r4, #4]
 800fa12:	bf08      	it	eq
 800fa14:	f8c8 1000 	streq.w	r1, [r8]
 800fa18:	5162      	str	r2, [r4, r5]
 800fa1a:	604b      	str	r3, [r1, #4]
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f104 060b 	add.w	r6, r4, #11
 800fa22:	f000 f829 	bl	800fa78 <__malloc_unlock>
 800fa26:	f026 0607 	bic.w	r6, r6, #7
 800fa2a:	1d23      	adds	r3, r4, #4
 800fa2c:	1af2      	subs	r2, r6, r3
 800fa2e:	d0ae      	beq.n	800f98e <_malloc_r+0x22>
 800fa30:	1b9b      	subs	r3, r3, r6
 800fa32:	50a3      	str	r3, [r4, r2]
 800fa34:	e7ab      	b.n	800f98e <_malloc_r+0x22>
 800fa36:	42a3      	cmp	r3, r4
 800fa38:	6862      	ldr	r2, [r4, #4]
 800fa3a:	d1dd      	bne.n	800f9f8 <_malloc_r+0x8c>
 800fa3c:	f8c8 2000 	str.w	r2, [r8]
 800fa40:	e7ec      	b.n	800fa1c <_malloc_r+0xb0>
 800fa42:	4623      	mov	r3, r4
 800fa44:	6864      	ldr	r4, [r4, #4]
 800fa46:	e7ac      	b.n	800f9a2 <_malloc_r+0x36>
 800fa48:	4634      	mov	r4, r6
 800fa4a:	6876      	ldr	r6, [r6, #4]
 800fa4c:	e7b4      	b.n	800f9b8 <_malloc_r+0x4c>
 800fa4e:	4613      	mov	r3, r2
 800fa50:	e7cc      	b.n	800f9ec <_malloc_r+0x80>
 800fa52:	230c      	movs	r3, #12
 800fa54:	603b      	str	r3, [r7, #0]
 800fa56:	4638      	mov	r0, r7
 800fa58:	f000 f80e 	bl	800fa78 <__malloc_unlock>
 800fa5c:	e797      	b.n	800f98e <_malloc_r+0x22>
 800fa5e:	6025      	str	r5, [r4, #0]
 800fa60:	e7dc      	b.n	800fa1c <_malloc_r+0xb0>
 800fa62:	605b      	str	r3, [r3, #4]
 800fa64:	deff      	udf	#255	; 0xff
 800fa66:	bf00      	nop
 800fa68:	200052f8 	.word	0x200052f8

0800fa6c <__malloc_lock>:
 800fa6c:	4801      	ldr	r0, [pc, #4]	; (800fa74 <__malloc_lock+0x8>)
 800fa6e:	f7ff b874 	b.w	800eb5a <__retarget_lock_acquire_recursive>
 800fa72:	bf00      	nop
 800fa74:	200052f4 	.word	0x200052f4

0800fa78 <__malloc_unlock>:
 800fa78:	4801      	ldr	r0, [pc, #4]	; (800fa80 <__malloc_unlock+0x8>)
 800fa7a:	f7ff b86f 	b.w	800eb5c <__retarget_lock_release_recursive>
 800fa7e:	bf00      	nop
 800fa80:	200052f4 	.word	0x200052f4

0800fa84 <_Balloc>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	69c6      	ldr	r6, [r0, #28]
 800fa88:	4604      	mov	r4, r0
 800fa8a:	460d      	mov	r5, r1
 800fa8c:	b976      	cbnz	r6, 800faac <_Balloc+0x28>
 800fa8e:	2010      	movs	r0, #16
 800fa90:	f7ff ff44 	bl	800f91c <malloc>
 800fa94:	4602      	mov	r2, r0
 800fa96:	61e0      	str	r0, [r4, #28]
 800fa98:	b920      	cbnz	r0, 800faa4 <_Balloc+0x20>
 800fa9a:	4b18      	ldr	r3, [pc, #96]	; (800fafc <_Balloc+0x78>)
 800fa9c:	4818      	ldr	r0, [pc, #96]	; (800fb00 <_Balloc+0x7c>)
 800fa9e:	216b      	movs	r1, #107	; 0x6b
 800faa0:	f000 fd9c 	bl	80105dc <__assert_func>
 800faa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faa8:	6006      	str	r6, [r0, #0]
 800faaa:	60c6      	str	r6, [r0, #12]
 800faac:	69e6      	ldr	r6, [r4, #28]
 800faae:	68f3      	ldr	r3, [r6, #12]
 800fab0:	b183      	cbz	r3, 800fad4 <_Balloc+0x50>
 800fab2:	69e3      	ldr	r3, [r4, #28]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800faba:	b9b8      	cbnz	r0, 800faec <_Balloc+0x68>
 800fabc:	2101      	movs	r1, #1
 800fabe:	fa01 f605 	lsl.w	r6, r1, r5
 800fac2:	1d72      	adds	r2, r6, #5
 800fac4:	0092      	lsls	r2, r2, #2
 800fac6:	4620      	mov	r0, r4
 800fac8:	f000 fda6 	bl	8010618 <_calloc_r>
 800facc:	b160      	cbz	r0, 800fae8 <_Balloc+0x64>
 800face:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fad2:	e00e      	b.n	800faf2 <_Balloc+0x6e>
 800fad4:	2221      	movs	r2, #33	; 0x21
 800fad6:	2104      	movs	r1, #4
 800fad8:	4620      	mov	r0, r4
 800fada:	f000 fd9d 	bl	8010618 <_calloc_r>
 800fade:	69e3      	ldr	r3, [r4, #28]
 800fae0:	60f0      	str	r0, [r6, #12]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1e4      	bne.n	800fab2 <_Balloc+0x2e>
 800fae8:	2000      	movs	r0, #0
 800faea:	bd70      	pop	{r4, r5, r6, pc}
 800faec:	6802      	ldr	r2, [r0, #0]
 800faee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800faf2:	2300      	movs	r3, #0
 800faf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800faf8:	e7f7      	b.n	800faea <_Balloc+0x66>
 800fafa:	bf00      	nop
 800fafc:	080131f5 	.word	0x080131f5
 800fb00:	08013275 	.word	0x08013275

0800fb04 <_Bfree>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	69c6      	ldr	r6, [r0, #28]
 800fb08:	4605      	mov	r5, r0
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	b976      	cbnz	r6, 800fb2c <_Bfree+0x28>
 800fb0e:	2010      	movs	r0, #16
 800fb10:	f7ff ff04 	bl	800f91c <malloc>
 800fb14:	4602      	mov	r2, r0
 800fb16:	61e8      	str	r0, [r5, #28]
 800fb18:	b920      	cbnz	r0, 800fb24 <_Bfree+0x20>
 800fb1a:	4b09      	ldr	r3, [pc, #36]	; (800fb40 <_Bfree+0x3c>)
 800fb1c:	4809      	ldr	r0, [pc, #36]	; (800fb44 <_Bfree+0x40>)
 800fb1e:	218f      	movs	r1, #143	; 0x8f
 800fb20:	f000 fd5c 	bl	80105dc <__assert_func>
 800fb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb28:	6006      	str	r6, [r0, #0]
 800fb2a:	60c6      	str	r6, [r0, #12]
 800fb2c:	b13c      	cbz	r4, 800fb3e <_Bfree+0x3a>
 800fb2e:	69eb      	ldr	r3, [r5, #28]
 800fb30:	6862      	ldr	r2, [r4, #4]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb38:	6021      	str	r1, [r4, #0]
 800fb3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}
 800fb40:	080131f5 	.word	0x080131f5
 800fb44:	08013275 	.word	0x08013275

0800fb48 <__multadd>:
 800fb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4c:	690d      	ldr	r5, [r1, #16]
 800fb4e:	4607      	mov	r7, r0
 800fb50:	460c      	mov	r4, r1
 800fb52:	461e      	mov	r6, r3
 800fb54:	f101 0c14 	add.w	ip, r1, #20
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb5e:	b299      	uxth	r1, r3
 800fb60:	fb02 6101 	mla	r1, r2, r1, r6
 800fb64:	0c1e      	lsrs	r6, r3, #16
 800fb66:	0c0b      	lsrs	r3, r1, #16
 800fb68:	fb02 3306 	mla	r3, r2, r6, r3
 800fb6c:	b289      	uxth	r1, r1
 800fb6e:	3001      	adds	r0, #1
 800fb70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb74:	4285      	cmp	r5, r0
 800fb76:	f84c 1b04 	str.w	r1, [ip], #4
 800fb7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb7e:	dcec      	bgt.n	800fb5a <__multadd+0x12>
 800fb80:	b30e      	cbz	r6, 800fbc6 <__multadd+0x7e>
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	42ab      	cmp	r3, r5
 800fb86:	dc19      	bgt.n	800fbbc <__multadd+0x74>
 800fb88:	6861      	ldr	r1, [r4, #4]
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	3101      	adds	r1, #1
 800fb8e:	f7ff ff79 	bl	800fa84 <_Balloc>
 800fb92:	4680      	mov	r8, r0
 800fb94:	b928      	cbnz	r0, 800fba2 <__multadd+0x5a>
 800fb96:	4602      	mov	r2, r0
 800fb98:	4b0c      	ldr	r3, [pc, #48]	; (800fbcc <__multadd+0x84>)
 800fb9a:	480d      	ldr	r0, [pc, #52]	; (800fbd0 <__multadd+0x88>)
 800fb9c:	21ba      	movs	r1, #186	; 0xba
 800fb9e:	f000 fd1d 	bl	80105dc <__assert_func>
 800fba2:	6922      	ldr	r2, [r4, #16]
 800fba4:	3202      	adds	r2, #2
 800fba6:	f104 010c 	add.w	r1, r4, #12
 800fbaa:	0092      	lsls	r2, r2, #2
 800fbac:	300c      	adds	r0, #12
 800fbae:	f7fe ffde 	bl	800eb6e <memcpy>
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4638      	mov	r0, r7
 800fbb6:	f7ff ffa5 	bl	800fb04 <_Bfree>
 800fbba:	4644      	mov	r4, r8
 800fbbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbc0:	3501      	adds	r5, #1
 800fbc2:	615e      	str	r6, [r3, #20]
 800fbc4:	6125      	str	r5, [r4, #16]
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbcc:	08013264 	.word	0x08013264
 800fbd0:	08013275 	.word	0x08013275

0800fbd4 <__hi0bits>:
 800fbd4:	0c03      	lsrs	r3, r0, #16
 800fbd6:	041b      	lsls	r3, r3, #16
 800fbd8:	b9d3      	cbnz	r3, 800fc10 <__hi0bits+0x3c>
 800fbda:	0400      	lsls	r0, r0, #16
 800fbdc:	2310      	movs	r3, #16
 800fbde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fbe2:	bf04      	itt	eq
 800fbe4:	0200      	lsleq	r0, r0, #8
 800fbe6:	3308      	addeq	r3, #8
 800fbe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fbec:	bf04      	itt	eq
 800fbee:	0100      	lsleq	r0, r0, #4
 800fbf0:	3304      	addeq	r3, #4
 800fbf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fbf6:	bf04      	itt	eq
 800fbf8:	0080      	lsleq	r0, r0, #2
 800fbfa:	3302      	addeq	r3, #2
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	db05      	blt.n	800fc0c <__hi0bits+0x38>
 800fc00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fc04:	f103 0301 	add.w	r3, r3, #1
 800fc08:	bf08      	it	eq
 800fc0a:	2320      	moveq	r3, #32
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	4770      	bx	lr
 800fc10:	2300      	movs	r3, #0
 800fc12:	e7e4      	b.n	800fbde <__hi0bits+0xa>

0800fc14 <__lo0bits>:
 800fc14:	6803      	ldr	r3, [r0, #0]
 800fc16:	f013 0207 	ands.w	r2, r3, #7
 800fc1a:	d00c      	beq.n	800fc36 <__lo0bits+0x22>
 800fc1c:	07d9      	lsls	r1, r3, #31
 800fc1e:	d422      	bmi.n	800fc66 <__lo0bits+0x52>
 800fc20:	079a      	lsls	r2, r3, #30
 800fc22:	bf49      	itett	mi
 800fc24:	085b      	lsrmi	r3, r3, #1
 800fc26:	089b      	lsrpl	r3, r3, #2
 800fc28:	6003      	strmi	r3, [r0, #0]
 800fc2a:	2201      	movmi	r2, #1
 800fc2c:	bf5c      	itt	pl
 800fc2e:	6003      	strpl	r3, [r0, #0]
 800fc30:	2202      	movpl	r2, #2
 800fc32:	4610      	mov	r0, r2
 800fc34:	4770      	bx	lr
 800fc36:	b299      	uxth	r1, r3
 800fc38:	b909      	cbnz	r1, 800fc3e <__lo0bits+0x2a>
 800fc3a:	0c1b      	lsrs	r3, r3, #16
 800fc3c:	2210      	movs	r2, #16
 800fc3e:	b2d9      	uxtb	r1, r3
 800fc40:	b909      	cbnz	r1, 800fc46 <__lo0bits+0x32>
 800fc42:	3208      	adds	r2, #8
 800fc44:	0a1b      	lsrs	r3, r3, #8
 800fc46:	0719      	lsls	r1, r3, #28
 800fc48:	bf04      	itt	eq
 800fc4a:	091b      	lsreq	r3, r3, #4
 800fc4c:	3204      	addeq	r2, #4
 800fc4e:	0799      	lsls	r1, r3, #30
 800fc50:	bf04      	itt	eq
 800fc52:	089b      	lsreq	r3, r3, #2
 800fc54:	3202      	addeq	r2, #2
 800fc56:	07d9      	lsls	r1, r3, #31
 800fc58:	d403      	bmi.n	800fc62 <__lo0bits+0x4e>
 800fc5a:	085b      	lsrs	r3, r3, #1
 800fc5c:	f102 0201 	add.w	r2, r2, #1
 800fc60:	d003      	beq.n	800fc6a <__lo0bits+0x56>
 800fc62:	6003      	str	r3, [r0, #0]
 800fc64:	e7e5      	b.n	800fc32 <__lo0bits+0x1e>
 800fc66:	2200      	movs	r2, #0
 800fc68:	e7e3      	b.n	800fc32 <__lo0bits+0x1e>
 800fc6a:	2220      	movs	r2, #32
 800fc6c:	e7e1      	b.n	800fc32 <__lo0bits+0x1e>
	...

0800fc70 <__i2b>:
 800fc70:	b510      	push	{r4, lr}
 800fc72:	460c      	mov	r4, r1
 800fc74:	2101      	movs	r1, #1
 800fc76:	f7ff ff05 	bl	800fa84 <_Balloc>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	b928      	cbnz	r0, 800fc8a <__i2b+0x1a>
 800fc7e:	4b05      	ldr	r3, [pc, #20]	; (800fc94 <__i2b+0x24>)
 800fc80:	4805      	ldr	r0, [pc, #20]	; (800fc98 <__i2b+0x28>)
 800fc82:	f240 1145 	movw	r1, #325	; 0x145
 800fc86:	f000 fca9 	bl	80105dc <__assert_func>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	6144      	str	r4, [r0, #20]
 800fc8e:	6103      	str	r3, [r0, #16]
 800fc90:	bd10      	pop	{r4, pc}
 800fc92:	bf00      	nop
 800fc94:	08013264 	.word	0x08013264
 800fc98:	08013275 	.word	0x08013275

0800fc9c <__multiply>:
 800fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	4691      	mov	r9, r2
 800fca2:	690a      	ldr	r2, [r1, #16]
 800fca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	bfb8      	it	lt
 800fcac:	460b      	movlt	r3, r1
 800fcae:	460c      	mov	r4, r1
 800fcb0:	bfbc      	itt	lt
 800fcb2:	464c      	movlt	r4, r9
 800fcb4:	4699      	movlt	r9, r3
 800fcb6:	6927      	ldr	r7, [r4, #16]
 800fcb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fcbc:	68a3      	ldr	r3, [r4, #8]
 800fcbe:	6861      	ldr	r1, [r4, #4]
 800fcc0:	eb07 060a 	add.w	r6, r7, sl
 800fcc4:	42b3      	cmp	r3, r6
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	bfb8      	it	lt
 800fcca:	3101      	addlt	r1, #1
 800fccc:	f7ff feda 	bl	800fa84 <_Balloc>
 800fcd0:	b930      	cbnz	r0, 800fce0 <__multiply+0x44>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4b44      	ldr	r3, [pc, #272]	; (800fde8 <__multiply+0x14c>)
 800fcd6:	4845      	ldr	r0, [pc, #276]	; (800fdec <__multiply+0x150>)
 800fcd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fcdc:	f000 fc7e 	bl	80105dc <__assert_func>
 800fce0:	f100 0514 	add.w	r5, r0, #20
 800fce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fce8:	462b      	mov	r3, r5
 800fcea:	2200      	movs	r2, #0
 800fcec:	4543      	cmp	r3, r8
 800fcee:	d321      	bcc.n	800fd34 <__multiply+0x98>
 800fcf0:	f104 0314 	add.w	r3, r4, #20
 800fcf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fcf8:	f109 0314 	add.w	r3, r9, #20
 800fcfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fd00:	9202      	str	r2, [sp, #8]
 800fd02:	1b3a      	subs	r2, r7, r4
 800fd04:	3a15      	subs	r2, #21
 800fd06:	f022 0203 	bic.w	r2, r2, #3
 800fd0a:	3204      	adds	r2, #4
 800fd0c:	f104 0115 	add.w	r1, r4, #21
 800fd10:	428f      	cmp	r7, r1
 800fd12:	bf38      	it	cc
 800fd14:	2204      	movcc	r2, #4
 800fd16:	9201      	str	r2, [sp, #4]
 800fd18:	9a02      	ldr	r2, [sp, #8]
 800fd1a:	9303      	str	r3, [sp, #12]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d80c      	bhi.n	800fd3a <__multiply+0x9e>
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	dd03      	ble.n	800fd2c <__multiply+0x90>
 800fd24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d05b      	beq.n	800fde4 <__multiply+0x148>
 800fd2c:	6106      	str	r6, [r0, #16]
 800fd2e:	b005      	add	sp, #20
 800fd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd34:	f843 2b04 	str.w	r2, [r3], #4
 800fd38:	e7d8      	b.n	800fcec <__multiply+0x50>
 800fd3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd3e:	f1ba 0f00 	cmp.w	sl, #0
 800fd42:	d024      	beq.n	800fd8e <__multiply+0xf2>
 800fd44:	f104 0e14 	add.w	lr, r4, #20
 800fd48:	46a9      	mov	r9, r5
 800fd4a:	f04f 0c00 	mov.w	ip, #0
 800fd4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fd52:	f8d9 1000 	ldr.w	r1, [r9]
 800fd56:	fa1f fb82 	uxth.w	fp, r2
 800fd5a:	b289      	uxth	r1, r1
 800fd5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800fd60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fd64:	f8d9 2000 	ldr.w	r2, [r9]
 800fd68:	4461      	add	r1, ip
 800fd6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fd6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800fd72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd76:	b289      	uxth	r1, r1
 800fd78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fd7c:	4577      	cmp	r7, lr
 800fd7e:	f849 1b04 	str.w	r1, [r9], #4
 800fd82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fd86:	d8e2      	bhi.n	800fd4e <__multiply+0xb2>
 800fd88:	9a01      	ldr	r2, [sp, #4]
 800fd8a:	f845 c002 	str.w	ip, [r5, r2]
 800fd8e:	9a03      	ldr	r2, [sp, #12]
 800fd90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fd94:	3304      	adds	r3, #4
 800fd96:	f1b9 0f00 	cmp.w	r9, #0
 800fd9a:	d021      	beq.n	800fde0 <__multiply+0x144>
 800fd9c:	6829      	ldr	r1, [r5, #0]
 800fd9e:	f104 0c14 	add.w	ip, r4, #20
 800fda2:	46ae      	mov	lr, r5
 800fda4:	f04f 0a00 	mov.w	sl, #0
 800fda8:	f8bc b000 	ldrh.w	fp, [ip]
 800fdac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fdb0:	fb09 220b 	mla	r2, r9, fp, r2
 800fdb4:	4452      	add	r2, sl
 800fdb6:	b289      	uxth	r1, r1
 800fdb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fdbc:	f84e 1b04 	str.w	r1, [lr], #4
 800fdc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fdc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fdc8:	f8be 1000 	ldrh.w	r1, [lr]
 800fdcc:	fb09 110a 	mla	r1, r9, sl, r1
 800fdd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fdd4:	4567      	cmp	r7, ip
 800fdd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fdda:	d8e5      	bhi.n	800fda8 <__multiply+0x10c>
 800fddc:	9a01      	ldr	r2, [sp, #4]
 800fdde:	50a9      	str	r1, [r5, r2]
 800fde0:	3504      	adds	r5, #4
 800fde2:	e799      	b.n	800fd18 <__multiply+0x7c>
 800fde4:	3e01      	subs	r6, #1
 800fde6:	e79b      	b.n	800fd20 <__multiply+0x84>
 800fde8:	08013264 	.word	0x08013264
 800fdec:	08013275 	.word	0x08013275

0800fdf0 <__pow5mult>:
 800fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf4:	4615      	mov	r5, r2
 800fdf6:	f012 0203 	ands.w	r2, r2, #3
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	460f      	mov	r7, r1
 800fdfe:	d007      	beq.n	800fe10 <__pow5mult+0x20>
 800fe00:	4c25      	ldr	r4, [pc, #148]	; (800fe98 <__pow5mult+0xa8>)
 800fe02:	3a01      	subs	r2, #1
 800fe04:	2300      	movs	r3, #0
 800fe06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe0a:	f7ff fe9d 	bl	800fb48 <__multadd>
 800fe0e:	4607      	mov	r7, r0
 800fe10:	10ad      	asrs	r5, r5, #2
 800fe12:	d03d      	beq.n	800fe90 <__pow5mult+0xa0>
 800fe14:	69f4      	ldr	r4, [r6, #28]
 800fe16:	b97c      	cbnz	r4, 800fe38 <__pow5mult+0x48>
 800fe18:	2010      	movs	r0, #16
 800fe1a:	f7ff fd7f 	bl	800f91c <malloc>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	61f0      	str	r0, [r6, #28]
 800fe22:	b928      	cbnz	r0, 800fe30 <__pow5mult+0x40>
 800fe24:	4b1d      	ldr	r3, [pc, #116]	; (800fe9c <__pow5mult+0xac>)
 800fe26:	481e      	ldr	r0, [pc, #120]	; (800fea0 <__pow5mult+0xb0>)
 800fe28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fe2c:	f000 fbd6 	bl	80105dc <__assert_func>
 800fe30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe34:	6004      	str	r4, [r0, #0]
 800fe36:	60c4      	str	r4, [r0, #12]
 800fe38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fe3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe40:	b94c      	cbnz	r4, 800fe56 <__pow5mult+0x66>
 800fe42:	f240 2171 	movw	r1, #625	; 0x271
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ff12 	bl	800fc70 <__i2b>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe52:	4604      	mov	r4, r0
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	f04f 0900 	mov.w	r9, #0
 800fe5a:	07eb      	lsls	r3, r5, #31
 800fe5c:	d50a      	bpl.n	800fe74 <__pow5mult+0x84>
 800fe5e:	4639      	mov	r1, r7
 800fe60:	4622      	mov	r2, r4
 800fe62:	4630      	mov	r0, r6
 800fe64:	f7ff ff1a 	bl	800fc9c <__multiply>
 800fe68:	4639      	mov	r1, r7
 800fe6a:	4680      	mov	r8, r0
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7ff fe49 	bl	800fb04 <_Bfree>
 800fe72:	4647      	mov	r7, r8
 800fe74:	106d      	asrs	r5, r5, #1
 800fe76:	d00b      	beq.n	800fe90 <__pow5mult+0xa0>
 800fe78:	6820      	ldr	r0, [r4, #0]
 800fe7a:	b938      	cbnz	r0, 800fe8c <__pow5mult+0x9c>
 800fe7c:	4622      	mov	r2, r4
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4630      	mov	r0, r6
 800fe82:	f7ff ff0b 	bl	800fc9c <__multiply>
 800fe86:	6020      	str	r0, [r4, #0]
 800fe88:	f8c0 9000 	str.w	r9, [r0]
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	e7e4      	b.n	800fe5a <__pow5mult+0x6a>
 800fe90:	4638      	mov	r0, r7
 800fe92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe96:	bf00      	nop
 800fe98:	080133c0 	.word	0x080133c0
 800fe9c:	080131f5 	.word	0x080131f5
 800fea0:	08013275 	.word	0x08013275

0800fea4 <__lshift>:
 800fea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea8:	460c      	mov	r4, r1
 800feaa:	6849      	ldr	r1, [r1, #4]
 800feac:	6923      	ldr	r3, [r4, #16]
 800feae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	4607      	mov	r7, r0
 800feb6:	4691      	mov	r9, r2
 800feb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800febc:	f108 0601 	add.w	r6, r8, #1
 800fec0:	42b3      	cmp	r3, r6
 800fec2:	db0b      	blt.n	800fedc <__lshift+0x38>
 800fec4:	4638      	mov	r0, r7
 800fec6:	f7ff fddd 	bl	800fa84 <_Balloc>
 800feca:	4605      	mov	r5, r0
 800fecc:	b948      	cbnz	r0, 800fee2 <__lshift+0x3e>
 800fece:	4602      	mov	r2, r0
 800fed0:	4b28      	ldr	r3, [pc, #160]	; (800ff74 <__lshift+0xd0>)
 800fed2:	4829      	ldr	r0, [pc, #164]	; (800ff78 <__lshift+0xd4>)
 800fed4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fed8:	f000 fb80 	bl	80105dc <__assert_func>
 800fedc:	3101      	adds	r1, #1
 800fede:	005b      	lsls	r3, r3, #1
 800fee0:	e7ee      	b.n	800fec0 <__lshift+0x1c>
 800fee2:	2300      	movs	r3, #0
 800fee4:	f100 0114 	add.w	r1, r0, #20
 800fee8:	f100 0210 	add.w	r2, r0, #16
 800feec:	4618      	mov	r0, r3
 800feee:	4553      	cmp	r3, sl
 800fef0:	db33      	blt.n	800ff5a <__lshift+0xb6>
 800fef2:	6920      	ldr	r0, [r4, #16]
 800fef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fef8:	f104 0314 	add.w	r3, r4, #20
 800fefc:	f019 091f 	ands.w	r9, r9, #31
 800ff00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff08:	d02b      	beq.n	800ff62 <__lshift+0xbe>
 800ff0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ff0e:	468a      	mov	sl, r1
 800ff10:	2200      	movs	r2, #0
 800ff12:	6818      	ldr	r0, [r3, #0]
 800ff14:	fa00 f009 	lsl.w	r0, r0, r9
 800ff18:	4310      	orrs	r0, r2
 800ff1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ff1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff22:	459c      	cmp	ip, r3
 800ff24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff28:	d8f3      	bhi.n	800ff12 <__lshift+0x6e>
 800ff2a:	ebac 0304 	sub.w	r3, ip, r4
 800ff2e:	3b15      	subs	r3, #21
 800ff30:	f023 0303 	bic.w	r3, r3, #3
 800ff34:	3304      	adds	r3, #4
 800ff36:	f104 0015 	add.w	r0, r4, #21
 800ff3a:	4584      	cmp	ip, r0
 800ff3c:	bf38      	it	cc
 800ff3e:	2304      	movcc	r3, #4
 800ff40:	50ca      	str	r2, [r1, r3]
 800ff42:	b10a      	cbz	r2, 800ff48 <__lshift+0xa4>
 800ff44:	f108 0602 	add.w	r6, r8, #2
 800ff48:	3e01      	subs	r6, #1
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	612e      	str	r6, [r5, #16]
 800ff4e:	4621      	mov	r1, r4
 800ff50:	f7ff fdd8 	bl	800fb04 <_Bfree>
 800ff54:	4628      	mov	r0, r5
 800ff56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff5e:	3301      	adds	r3, #1
 800ff60:	e7c5      	b.n	800feee <__lshift+0x4a>
 800ff62:	3904      	subs	r1, #4
 800ff64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff6c:	459c      	cmp	ip, r3
 800ff6e:	d8f9      	bhi.n	800ff64 <__lshift+0xc0>
 800ff70:	e7ea      	b.n	800ff48 <__lshift+0xa4>
 800ff72:	bf00      	nop
 800ff74:	08013264 	.word	0x08013264
 800ff78:	08013275 	.word	0x08013275

0800ff7c <__mcmp>:
 800ff7c:	b530      	push	{r4, r5, lr}
 800ff7e:	6902      	ldr	r2, [r0, #16]
 800ff80:	690c      	ldr	r4, [r1, #16]
 800ff82:	1b12      	subs	r2, r2, r4
 800ff84:	d10e      	bne.n	800ffa4 <__mcmp+0x28>
 800ff86:	f100 0314 	add.w	r3, r0, #20
 800ff8a:	3114      	adds	r1, #20
 800ff8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ff90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ff94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ff98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ff9c:	42a5      	cmp	r5, r4
 800ff9e:	d003      	beq.n	800ffa8 <__mcmp+0x2c>
 800ffa0:	d305      	bcc.n	800ffae <__mcmp+0x32>
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	bd30      	pop	{r4, r5, pc}
 800ffa8:	4283      	cmp	r3, r0
 800ffaa:	d3f3      	bcc.n	800ff94 <__mcmp+0x18>
 800ffac:	e7fa      	b.n	800ffa4 <__mcmp+0x28>
 800ffae:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb2:	e7f7      	b.n	800ffa4 <__mcmp+0x28>

0800ffb4 <__mdiff>:
 800ffb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb8:	460c      	mov	r4, r1
 800ffba:	4606      	mov	r6, r0
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4690      	mov	r8, r2
 800ffc2:	f7ff ffdb 	bl	800ff7c <__mcmp>
 800ffc6:	1e05      	subs	r5, r0, #0
 800ffc8:	d110      	bne.n	800ffec <__mdiff+0x38>
 800ffca:	4629      	mov	r1, r5
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f7ff fd59 	bl	800fa84 <_Balloc>
 800ffd2:	b930      	cbnz	r0, 800ffe2 <__mdiff+0x2e>
 800ffd4:	4b3a      	ldr	r3, [pc, #232]	; (80100c0 <__mdiff+0x10c>)
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	f240 2137 	movw	r1, #567	; 0x237
 800ffdc:	4839      	ldr	r0, [pc, #228]	; (80100c4 <__mdiff+0x110>)
 800ffde:	f000 fafd 	bl	80105dc <__assert_func>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffec:	bfa4      	itt	ge
 800ffee:	4643      	movge	r3, r8
 800fff0:	46a0      	movge	r8, r4
 800fff2:	4630      	mov	r0, r6
 800fff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fff8:	bfa6      	itte	ge
 800fffa:	461c      	movge	r4, r3
 800fffc:	2500      	movge	r5, #0
 800fffe:	2501      	movlt	r5, #1
 8010000:	f7ff fd40 	bl	800fa84 <_Balloc>
 8010004:	b920      	cbnz	r0, 8010010 <__mdiff+0x5c>
 8010006:	4b2e      	ldr	r3, [pc, #184]	; (80100c0 <__mdiff+0x10c>)
 8010008:	4602      	mov	r2, r0
 801000a:	f240 2145 	movw	r1, #581	; 0x245
 801000e:	e7e5      	b.n	800ffdc <__mdiff+0x28>
 8010010:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010014:	6926      	ldr	r6, [r4, #16]
 8010016:	60c5      	str	r5, [r0, #12]
 8010018:	f104 0914 	add.w	r9, r4, #20
 801001c:	f108 0514 	add.w	r5, r8, #20
 8010020:	f100 0e14 	add.w	lr, r0, #20
 8010024:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801002c:	f108 0210 	add.w	r2, r8, #16
 8010030:	46f2      	mov	sl, lr
 8010032:	2100      	movs	r1, #0
 8010034:	f859 3b04 	ldr.w	r3, [r9], #4
 8010038:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801003c:	fa11 f88b 	uxtah	r8, r1, fp
 8010040:	b299      	uxth	r1, r3
 8010042:	0c1b      	lsrs	r3, r3, #16
 8010044:	eba8 0801 	sub.w	r8, r8, r1
 8010048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801004c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010050:	fa1f f888 	uxth.w	r8, r8
 8010054:	1419      	asrs	r1, r3, #16
 8010056:	454e      	cmp	r6, r9
 8010058:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801005c:	f84a 3b04 	str.w	r3, [sl], #4
 8010060:	d8e8      	bhi.n	8010034 <__mdiff+0x80>
 8010062:	1b33      	subs	r3, r6, r4
 8010064:	3b15      	subs	r3, #21
 8010066:	f023 0303 	bic.w	r3, r3, #3
 801006a:	3304      	adds	r3, #4
 801006c:	3415      	adds	r4, #21
 801006e:	42a6      	cmp	r6, r4
 8010070:	bf38      	it	cc
 8010072:	2304      	movcc	r3, #4
 8010074:	441d      	add	r5, r3
 8010076:	4473      	add	r3, lr
 8010078:	469e      	mov	lr, r3
 801007a:	462e      	mov	r6, r5
 801007c:	4566      	cmp	r6, ip
 801007e:	d30e      	bcc.n	801009e <__mdiff+0xea>
 8010080:	f10c 0203 	add.w	r2, ip, #3
 8010084:	1b52      	subs	r2, r2, r5
 8010086:	f022 0203 	bic.w	r2, r2, #3
 801008a:	3d03      	subs	r5, #3
 801008c:	45ac      	cmp	ip, r5
 801008e:	bf38      	it	cc
 8010090:	2200      	movcc	r2, #0
 8010092:	4413      	add	r3, r2
 8010094:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010098:	b17a      	cbz	r2, 80100ba <__mdiff+0x106>
 801009a:	6107      	str	r7, [r0, #16]
 801009c:	e7a4      	b.n	800ffe8 <__mdiff+0x34>
 801009e:	f856 8b04 	ldr.w	r8, [r6], #4
 80100a2:	fa11 f288 	uxtah	r2, r1, r8
 80100a6:	1414      	asrs	r4, r2, #16
 80100a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80100ac:	b292      	uxth	r2, r2
 80100ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80100b2:	f84e 2b04 	str.w	r2, [lr], #4
 80100b6:	1421      	asrs	r1, r4, #16
 80100b8:	e7e0      	b.n	801007c <__mdiff+0xc8>
 80100ba:	3f01      	subs	r7, #1
 80100bc:	e7ea      	b.n	8010094 <__mdiff+0xe0>
 80100be:	bf00      	nop
 80100c0:	08013264 	.word	0x08013264
 80100c4:	08013275 	.word	0x08013275

080100c8 <__d2b>:
 80100c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100cc:	460f      	mov	r7, r1
 80100ce:	2101      	movs	r1, #1
 80100d0:	ec59 8b10 	vmov	r8, r9, d0
 80100d4:	4616      	mov	r6, r2
 80100d6:	f7ff fcd5 	bl	800fa84 <_Balloc>
 80100da:	4604      	mov	r4, r0
 80100dc:	b930      	cbnz	r0, 80100ec <__d2b+0x24>
 80100de:	4602      	mov	r2, r0
 80100e0:	4b24      	ldr	r3, [pc, #144]	; (8010174 <__d2b+0xac>)
 80100e2:	4825      	ldr	r0, [pc, #148]	; (8010178 <__d2b+0xb0>)
 80100e4:	f240 310f 	movw	r1, #783	; 0x30f
 80100e8:	f000 fa78 	bl	80105dc <__assert_func>
 80100ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80100f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80100f4:	bb2d      	cbnz	r5, 8010142 <__d2b+0x7a>
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	f1b8 0300 	subs.w	r3, r8, #0
 80100fc:	d026      	beq.n	801014c <__d2b+0x84>
 80100fe:	4668      	mov	r0, sp
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	f7ff fd87 	bl	800fc14 <__lo0bits>
 8010106:	e9dd 1200 	ldrd	r1, r2, [sp]
 801010a:	b1e8      	cbz	r0, 8010148 <__d2b+0x80>
 801010c:	f1c0 0320 	rsb	r3, r0, #32
 8010110:	fa02 f303 	lsl.w	r3, r2, r3
 8010114:	430b      	orrs	r3, r1
 8010116:	40c2      	lsrs	r2, r0
 8010118:	6163      	str	r3, [r4, #20]
 801011a:	9201      	str	r2, [sp, #4]
 801011c:	9b01      	ldr	r3, [sp, #4]
 801011e:	61a3      	str	r3, [r4, #24]
 8010120:	2b00      	cmp	r3, #0
 8010122:	bf14      	ite	ne
 8010124:	2202      	movne	r2, #2
 8010126:	2201      	moveq	r2, #1
 8010128:	6122      	str	r2, [r4, #16]
 801012a:	b1bd      	cbz	r5, 801015c <__d2b+0x94>
 801012c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010130:	4405      	add	r5, r0
 8010132:	603d      	str	r5, [r7, #0]
 8010134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010138:	6030      	str	r0, [r6, #0]
 801013a:	4620      	mov	r0, r4
 801013c:	b003      	add	sp, #12
 801013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010146:	e7d6      	b.n	80100f6 <__d2b+0x2e>
 8010148:	6161      	str	r1, [r4, #20]
 801014a:	e7e7      	b.n	801011c <__d2b+0x54>
 801014c:	a801      	add	r0, sp, #4
 801014e:	f7ff fd61 	bl	800fc14 <__lo0bits>
 8010152:	9b01      	ldr	r3, [sp, #4]
 8010154:	6163      	str	r3, [r4, #20]
 8010156:	3020      	adds	r0, #32
 8010158:	2201      	movs	r2, #1
 801015a:	e7e5      	b.n	8010128 <__d2b+0x60>
 801015c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010164:	6038      	str	r0, [r7, #0]
 8010166:	6918      	ldr	r0, [r3, #16]
 8010168:	f7ff fd34 	bl	800fbd4 <__hi0bits>
 801016c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010170:	e7e2      	b.n	8010138 <__d2b+0x70>
 8010172:	bf00      	nop
 8010174:	08013264 	.word	0x08013264
 8010178:	08013275 	.word	0x08013275

0801017c <__ssputs_r>:
 801017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010180:	688e      	ldr	r6, [r1, #8]
 8010182:	461f      	mov	r7, r3
 8010184:	42be      	cmp	r6, r7
 8010186:	680b      	ldr	r3, [r1, #0]
 8010188:	4682      	mov	sl, r0
 801018a:	460c      	mov	r4, r1
 801018c:	4690      	mov	r8, r2
 801018e:	d82c      	bhi.n	80101ea <__ssputs_r+0x6e>
 8010190:	898a      	ldrh	r2, [r1, #12]
 8010192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010196:	d026      	beq.n	80101e6 <__ssputs_r+0x6a>
 8010198:	6965      	ldr	r5, [r4, #20]
 801019a:	6909      	ldr	r1, [r1, #16]
 801019c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101a0:	eba3 0901 	sub.w	r9, r3, r1
 80101a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101a8:	1c7b      	adds	r3, r7, #1
 80101aa:	444b      	add	r3, r9
 80101ac:	106d      	asrs	r5, r5, #1
 80101ae:	429d      	cmp	r5, r3
 80101b0:	bf38      	it	cc
 80101b2:	461d      	movcc	r5, r3
 80101b4:	0553      	lsls	r3, r2, #21
 80101b6:	d527      	bpl.n	8010208 <__ssputs_r+0x8c>
 80101b8:	4629      	mov	r1, r5
 80101ba:	f7ff fbd7 	bl	800f96c <_malloc_r>
 80101be:	4606      	mov	r6, r0
 80101c0:	b360      	cbz	r0, 801021c <__ssputs_r+0xa0>
 80101c2:	6921      	ldr	r1, [r4, #16]
 80101c4:	464a      	mov	r2, r9
 80101c6:	f7fe fcd2 	bl	800eb6e <memcpy>
 80101ca:	89a3      	ldrh	r3, [r4, #12]
 80101cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d4:	81a3      	strh	r3, [r4, #12]
 80101d6:	6126      	str	r6, [r4, #16]
 80101d8:	6165      	str	r5, [r4, #20]
 80101da:	444e      	add	r6, r9
 80101dc:	eba5 0509 	sub.w	r5, r5, r9
 80101e0:	6026      	str	r6, [r4, #0]
 80101e2:	60a5      	str	r5, [r4, #8]
 80101e4:	463e      	mov	r6, r7
 80101e6:	42be      	cmp	r6, r7
 80101e8:	d900      	bls.n	80101ec <__ssputs_r+0x70>
 80101ea:	463e      	mov	r6, r7
 80101ec:	6820      	ldr	r0, [r4, #0]
 80101ee:	4632      	mov	r2, r6
 80101f0:	4641      	mov	r1, r8
 80101f2:	f000 f9c9 	bl	8010588 <memmove>
 80101f6:	68a3      	ldr	r3, [r4, #8]
 80101f8:	1b9b      	subs	r3, r3, r6
 80101fa:	60a3      	str	r3, [r4, #8]
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	4433      	add	r3, r6
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	2000      	movs	r0, #0
 8010204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010208:	462a      	mov	r2, r5
 801020a:	f000 fa2d 	bl	8010668 <_realloc_r>
 801020e:	4606      	mov	r6, r0
 8010210:	2800      	cmp	r0, #0
 8010212:	d1e0      	bne.n	80101d6 <__ssputs_r+0x5a>
 8010214:	6921      	ldr	r1, [r4, #16]
 8010216:	4650      	mov	r0, sl
 8010218:	f7ff fb34 	bl	800f884 <_free_r>
 801021c:	230c      	movs	r3, #12
 801021e:	f8ca 3000 	str.w	r3, [sl]
 8010222:	89a3      	ldrh	r3, [r4, #12]
 8010224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010228:	81a3      	strh	r3, [r4, #12]
 801022a:	f04f 30ff 	mov.w	r0, #4294967295
 801022e:	e7e9      	b.n	8010204 <__ssputs_r+0x88>

08010230 <_svfiprintf_r>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	4698      	mov	r8, r3
 8010236:	898b      	ldrh	r3, [r1, #12]
 8010238:	061b      	lsls	r3, r3, #24
 801023a:	b09d      	sub	sp, #116	; 0x74
 801023c:	4607      	mov	r7, r0
 801023e:	460d      	mov	r5, r1
 8010240:	4614      	mov	r4, r2
 8010242:	d50e      	bpl.n	8010262 <_svfiprintf_r+0x32>
 8010244:	690b      	ldr	r3, [r1, #16]
 8010246:	b963      	cbnz	r3, 8010262 <_svfiprintf_r+0x32>
 8010248:	2140      	movs	r1, #64	; 0x40
 801024a:	f7ff fb8f 	bl	800f96c <_malloc_r>
 801024e:	6028      	str	r0, [r5, #0]
 8010250:	6128      	str	r0, [r5, #16]
 8010252:	b920      	cbnz	r0, 801025e <_svfiprintf_r+0x2e>
 8010254:	230c      	movs	r3, #12
 8010256:	603b      	str	r3, [r7, #0]
 8010258:	f04f 30ff 	mov.w	r0, #4294967295
 801025c:	e0d0      	b.n	8010400 <_svfiprintf_r+0x1d0>
 801025e:	2340      	movs	r3, #64	; 0x40
 8010260:	616b      	str	r3, [r5, #20]
 8010262:	2300      	movs	r3, #0
 8010264:	9309      	str	r3, [sp, #36]	; 0x24
 8010266:	2320      	movs	r3, #32
 8010268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801026c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010270:	2330      	movs	r3, #48	; 0x30
 8010272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010418 <_svfiprintf_r+0x1e8>
 8010276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801027a:	f04f 0901 	mov.w	r9, #1
 801027e:	4623      	mov	r3, r4
 8010280:	469a      	mov	sl, r3
 8010282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010286:	b10a      	cbz	r2, 801028c <_svfiprintf_r+0x5c>
 8010288:	2a25      	cmp	r2, #37	; 0x25
 801028a:	d1f9      	bne.n	8010280 <_svfiprintf_r+0x50>
 801028c:	ebba 0b04 	subs.w	fp, sl, r4
 8010290:	d00b      	beq.n	80102aa <_svfiprintf_r+0x7a>
 8010292:	465b      	mov	r3, fp
 8010294:	4622      	mov	r2, r4
 8010296:	4629      	mov	r1, r5
 8010298:	4638      	mov	r0, r7
 801029a:	f7ff ff6f 	bl	801017c <__ssputs_r>
 801029e:	3001      	adds	r0, #1
 80102a0:	f000 80a9 	beq.w	80103f6 <_svfiprintf_r+0x1c6>
 80102a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102a6:	445a      	add	r2, fp
 80102a8:	9209      	str	r2, [sp, #36]	; 0x24
 80102aa:	f89a 3000 	ldrb.w	r3, [sl]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 80a1 	beq.w	80103f6 <_svfiprintf_r+0x1c6>
 80102b4:	2300      	movs	r3, #0
 80102b6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102be:	f10a 0a01 	add.w	sl, sl, #1
 80102c2:	9304      	str	r3, [sp, #16]
 80102c4:	9307      	str	r3, [sp, #28]
 80102c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102ca:	931a      	str	r3, [sp, #104]	; 0x68
 80102cc:	4654      	mov	r4, sl
 80102ce:	2205      	movs	r2, #5
 80102d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102d4:	4850      	ldr	r0, [pc, #320]	; (8010418 <_svfiprintf_r+0x1e8>)
 80102d6:	f7ef ff7b 	bl	80001d0 <memchr>
 80102da:	9a04      	ldr	r2, [sp, #16]
 80102dc:	b9d8      	cbnz	r0, 8010316 <_svfiprintf_r+0xe6>
 80102de:	06d0      	lsls	r0, r2, #27
 80102e0:	bf44      	itt	mi
 80102e2:	2320      	movmi	r3, #32
 80102e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102e8:	0711      	lsls	r1, r2, #28
 80102ea:	bf44      	itt	mi
 80102ec:	232b      	movmi	r3, #43	; 0x2b
 80102ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102f2:	f89a 3000 	ldrb.w	r3, [sl]
 80102f6:	2b2a      	cmp	r3, #42	; 0x2a
 80102f8:	d015      	beq.n	8010326 <_svfiprintf_r+0xf6>
 80102fa:	9a07      	ldr	r2, [sp, #28]
 80102fc:	4654      	mov	r4, sl
 80102fe:	2000      	movs	r0, #0
 8010300:	f04f 0c0a 	mov.w	ip, #10
 8010304:	4621      	mov	r1, r4
 8010306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801030a:	3b30      	subs	r3, #48	; 0x30
 801030c:	2b09      	cmp	r3, #9
 801030e:	d94d      	bls.n	80103ac <_svfiprintf_r+0x17c>
 8010310:	b1b0      	cbz	r0, 8010340 <_svfiprintf_r+0x110>
 8010312:	9207      	str	r2, [sp, #28]
 8010314:	e014      	b.n	8010340 <_svfiprintf_r+0x110>
 8010316:	eba0 0308 	sub.w	r3, r0, r8
 801031a:	fa09 f303 	lsl.w	r3, r9, r3
 801031e:	4313      	orrs	r3, r2
 8010320:	9304      	str	r3, [sp, #16]
 8010322:	46a2      	mov	sl, r4
 8010324:	e7d2      	b.n	80102cc <_svfiprintf_r+0x9c>
 8010326:	9b03      	ldr	r3, [sp, #12]
 8010328:	1d19      	adds	r1, r3, #4
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	9103      	str	r1, [sp, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	bfbb      	ittet	lt
 8010332:	425b      	neglt	r3, r3
 8010334:	f042 0202 	orrlt.w	r2, r2, #2
 8010338:	9307      	strge	r3, [sp, #28]
 801033a:	9307      	strlt	r3, [sp, #28]
 801033c:	bfb8      	it	lt
 801033e:	9204      	strlt	r2, [sp, #16]
 8010340:	7823      	ldrb	r3, [r4, #0]
 8010342:	2b2e      	cmp	r3, #46	; 0x2e
 8010344:	d10c      	bne.n	8010360 <_svfiprintf_r+0x130>
 8010346:	7863      	ldrb	r3, [r4, #1]
 8010348:	2b2a      	cmp	r3, #42	; 0x2a
 801034a:	d134      	bne.n	80103b6 <_svfiprintf_r+0x186>
 801034c:	9b03      	ldr	r3, [sp, #12]
 801034e:	1d1a      	adds	r2, r3, #4
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	9203      	str	r2, [sp, #12]
 8010354:	2b00      	cmp	r3, #0
 8010356:	bfb8      	it	lt
 8010358:	f04f 33ff 	movlt.w	r3, #4294967295
 801035c:	3402      	adds	r4, #2
 801035e:	9305      	str	r3, [sp, #20]
 8010360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010428 <_svfiprintf_r+0x1f8>
 8010364:	7821      	ldrb	r1, [r4, #0]
 8010366:	2203      	movs	r2, #3
 8010368:	4650      	mov	r0, sl
 801036a:	f7ef ff31 	bl	80001d0 <memchr>
 801036e:	b138      	cbz	r0, 8010380 <_svfiprintf_r+0x150>
 8010370:	9b04      	ldr	r3, [sp, #16]
 8010372:	eba0 000a 	sub.w	r0, r0, sl
 8010376:	2240      	movs	r2, #64	; 0x40
 8010378:	4082      	lsls	r2, r0
 801037a:	4313      	orrs	r3, r2
 801037c:	3401      	adds	r4, #1
 801037e:	9304      	str	r3, [sp, #16]
 8010380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010384:	4825      	ldr	r0, [pc, #148]	; (801041c <_svfiprintf_r+0x1ec>)
 8010386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801038a:	2206      	movs	r2, #6
 801038c:	f7ef ff20 	bl	80001d0 <memchr>
 8010390:	2800      	cmp	r0, #0
 8010392:	d038      	beq.n	8010406 <_svfiprintf_r+0x1d6>
 8010394:	4b22      	ldr	r3, [pc, #136]	; (8010420 <_svfiprintf_r+0x1f0>)
 8010396:	bb1b      	cbnz	r3, 80103e0 <_svfiprintf_r+0x1b0>
 8010398:	9b03      	ldr	r3, [sp, #12]
 801039a:	3307      	adds	r3, #7
 801039c:	f023 0307 	bic.w	r3, r3, #7
 80103a0:	3308      	adds	r3, #8
 80103a2:	9303      	str	r3, [sp, #12]
 80103a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a6:	4433      	add	r3, r6
 80103a8:	9309      	str	r3, [sp, #36]	; 0x24
 80103aa:	e768      	b.n	801027e <_svfiprintf_r+0x4e>
 80103ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80103b0:	460c      	mov	r4, r1
 80103b2:	2001      	movs	r0, #1
 80103b4:	e7a6      	b.n	8010304 <_svfiprintf_r+0xd4>
 80103b6:	2300      	movs	r3, #0
 80103b8:	3401      	adds	r4, #1
 80103ba:	9305      	str	r3, [sp, #20]
 80103bc:	4619      	mov	r1, r3
 80103be:	f04f 0c0a 	mov.w	ip, #10
 80103c2:	4620      	mov	r0, r4
 80103c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103c8:	3a30      	subs	r2, #48	; 0x30
 80103ca:	2a09      	cmp	r2, #9
 80103cc:	d903      	bls.n	80103d6 <_svfiprintf_r+0x1a6>
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d0c6      	beq.n	8010360 <_svfiprintf_r+0x130>
 80103d2:	9105      	str	r1, [sp, #20]
 80103d4:	e7c4      	b.n	8010360 <_svfiprintf_r+0x130>
 80103d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80103da:	4604      	mov	r4, r0
 80103dc:	2301      	movs	r3, #1
 80103de:	e7f0      	b.n	80103c2 <_svfiprintf_r+0x192>
 80103e0:	ab03      	add	r3, sp, #12
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	462a      	mov	r2, r5
 80103e6:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <_svfiprintf_r+0x1f4>)
 80103e8:	a904      	add	r1, sp, #16
 80103ea:	4638      	mov	r0, r7
 80103ec:	f7fd fdf6 	bl	800dfdc <_printf_float>
 80103f0:	1c42      	adds	r2, r0, #1
 80103f2:	4606      	mov	r6, r0
 80103f4:	d1d6      	bne.n	80103a4 <_svfiprintf_r+0x174>
 80103f6:	89ab      	ldrh	r3, [r5, #12]
 80103f8:	065b      	lsls	r3, r3, #25
 80103fa:	f53f af2d 	bmi.w	8010258 <_svfiprintf_r+0x28>
 80103fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010400:	b01d      	add	sp, #116	; 0x74
 8010402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010406:	ab03      	add	r3, sp, #12
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	462a      	mov	r2, r5
 801040c:	4b05      	ldr	r3, [pc, #20]	; (8010424 <_svfiprintf_r+0x1f4>)
 801040e:	a904      	add	r1, sp, #16
 8010410:	4638      	mov	r0, r7
 8010412:	f7fe f887 	bl	800e524 <_printf_i>
 8010416:	e7eb      	b.n	80103f0 <_svfiprintf_r+0x1c0>
 8010418:	080133cc 	.word	0x080133cc
 801041c:	080133d6 	.word	0x080133d6
 8010420:	0800dfdd 	.word	0x0800dfdd
 8010424:	0801017d 	.word	0x0801017d
 8010428:	080133d2 	.word	0x080133d2

0801042c <__sflush_r>:
 801042c:	898a      	ldrh	r2, [r1, #12]
 801042e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010432:	4605      	mov	r5, r0
 8010434:	0710      	lsls	r0, r2, #28
 8010436:	460c      	mov	r4, r1
 8010438:	d458      	bmi.n	80104ec <__sflush_r+0xc0>
 801043a:	684b      	ldr	r3, [r1, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	dc05      	bgt.n	801044c <__sflush_r+0x20>
 8010440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010442:	2b00      	cmp	r3, #0
 8010444:	dc02      	bgt.n	801044c <__sflush_r+0x20>
 8010446:	2000      	movs	r0, #0
 8010448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801044e:	2e00      	cmp	r6, #0
 8010450:	d0f9      	beq.n	8010446 <__sflush_r+0x1a>
 8010452:	2300      	movs	r3, #0
 8010454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010458:	682f      	ldr	r7, [r5, #0]
 801045a:	6a21      	ldr	r1, [r4, #32]
 801045c:	602b      	str	r3, [r5, #0]
 801045e:	d032      	beq.n	80104c6 <__sflush_r+0x9a>
 8010460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	075a      	lsls	r2, r3, #29
 8010466:	d505      	bpl.n	8010474 <__sflush_r+0x48>
 8010468:	6863      	ldr	r3, [r4, #4]
 801046a:	1ac0      	subs	r0, r0, r3
 801046c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801046e:	b10b      	cbz	r3, 8010474 <__sflush_r+0x48>
 8010470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010472:	1ac0      	subs	r0, r0, r3
 8010474:	2300      	movs	r3, #0
 8010476:	4602      	mov	r2, r0
 8010478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801047a:	6a21      	ldr	r1, [r4, #32]
 801047c:	4628      	mov	r0, r5
 801047e:	47b0      	blx	r6
 8010480:	1c43      	adds	r3, r0, #1
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	d106      	bne.n	8010494 <__sflush_r+0x68>
 8010486:	6829      	ldr	r1, [r5, #0]
 8010488:	291d      	cmp	r1, #29
 801048a:	d82b      	bhi.n	80104e4 <__sflush_r+0xb8>
 801048c:	4a29      	ldr	r2, [pc, #164]	; (8010534 <__sflush_r+0x108>)
 801048e:	410a      	asrs	r2, r1
 8010490:	07d6      	lsls	r6, r2, #31
 8010492:	d427      	bmi.n	80104e4 <__sflush_r+0xb8>
 8010494:	2200      	movs	r2, #0
 8010496:	6062      	str	r2, [r4, #4]
 8010498:	04d9      	lsls	r1, r3, #19
 801049a:	6922      	ldr	r2, [r4, #16]
 801049c:	6022      	str	r2, [r4, #0]
 801049e:	d504      	bpl.n	80104aa <__sflush_r+0x7e>
 80104a0:	1c42      	adds	r2, r0, #1
 80104a2:	d101      	bne.n	80104a8 <__sflush_r+0x7c>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	b903      	cbnz	r3, 80104aa <__sflush_r+0x7e>
 80104a8:	6560      	str	r0, [r4, #84]	; 0x54
 80104aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ac:	602f      	str	r7, [r5, #0]
 80104ae:	2900      	cmp	r1, #0
 80104b0:	d0c9      	beq.n	8010446 <__sflush_r+0x1a>
 80104b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104b6:	4299      	cmp	r1, r3
 80104b8:	d002      	beq.n	80104c0 <__sflush_r+0x94>
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7ff f9e2 	bl	800f884 <_free_r>
 80104c0:	2000      	movs	r0, #0
 80104c2:	6360      	str	r0, [r4, #52]	; 0x34
 80104c4:	e7c0      	b.n	8010448 <__sflush_r+0x1c>
 80104c6:	2301      	movs	r3, #1
 80104c8:	4628      	mov	r0, r5
 80104ca:	47b0      	blx	r6
 80104cc:	1c41      	adds	r1, r0, #1
 80104ce:	d1c8      	bne.n	8010462 <__sflush_r+0x36>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d0c5      	beq.n	8010462 <__sflush_r+0x36>
 80104d6:	2b1d      	cmp	r3, #29
 80104d8:	d001      	beq.n	80104de <__sflush_r+0xb2>
 80104da:	2b16      	cmp	r3, #22
 80104dc:	d101      	bne.n	80104e2 <__sflush_r+0xb6>
 80104de:	602f      	str	r7, [r5, #0]
 80104e0:	e7b1      	b.n	8010446 <__sflush_r+0x1a>
 80104e2:	89a3      	ldrh	r3, [r4, #12]
 80104e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104e8:	81a3      	strh	r3, [r4, #12]
 80104ea:	e7ad      	b.n	8010448 <__sflush_r+0x1c>
 80104ec:	690f      	ldr	r7, [r1, #16]
 80104ee:	2f00      	cmp	r7, #0
 80104f0:	d0a9      	beq.n	8010446 <__sflush_r+0x1a>
 80104f2:	0793      	lsls	r3, r2, #30
 80104f4:	680e      	ldr	r6, [r1, #0]
 80104f6:	bf08      	it	eq
 80104f8:	694b      	ldreq	r3, [r1, #20]
 80104fa:	600f      	str	r7, [r1, #0]
 80104fc:	bf18      	it	ne
 80104fe:	2300      	movne	r3, #0
 8010500:	eba6 0807 	sub.w	r8, r6, r7
 8010504:	608b      	str	r3, [r1, #8]
 8010506:	f1b8 0f00 	cmp.w	r8, #0
 801050a:	dd9c      	ble.n	8010446 <__sflush_r+0x1a>
 801050c:	6a21      	ldr	r1, [r4, #32]
 801050e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010510:	4643      	mov	r3, r8
 8010512:	463a      	mov	r2, r7
 8010514:	4628      	mov	r0, r5
 8010516:	47b0      	blx	r6
 8010518:	2800      	cmp	r0, #0
 801051a:	dc06      	bgt.n	801052a <__sflush_r+0xfe>
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	f04f 30ff 	mov.w	r0, #4294967295
 8010528:	e78e      	b.n	8010448 <__sflush_r+0x1c>
 801052a:	4407      	add	r7, r0
 801052c:	eba8 0800 	sub.w	r8, r8, r0
 8010530:	e7e9      	b.n	8010506 <__sflush_r+0xda>
 8010532:	bf00      	nop
 8010534:	dfbffffe 	.word	0xdfbffffe

08010538 <_fflush_r>:
 8010538:	b538      	push	{r3, r4, r5, lr}
 801053a:	690b      	ldr	r3, [r1, #16]
 801053c:	4605      	mov	r5, r0
 801053e:	460c      	mov	r4, r1
 8010540:	b913      	cbnz	r3, 8010548 <_fflush_r+0x10>
 8010542:	2500      	movs	r5, #0
 8010544:	4628      	mov	r0, r5
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	b118      	cbz	r0, 8010552 <_fflush_r+0x1a>
 801054a:	6a03      	ldr	r3, [r0, #32]
 801054c:	b90b      	cbnz	r3, 8010552 <_fflush_r+0x1a>
 801054e:	f7fe f997 	bl	800e880 <__sinit>
 8010552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0f3      	beq.n	8010542 <_fflush_r+0xa>
 801055a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801055c:	07d0      	lsls	r0, r2, #31
 801055e:	d404      	bmi.n	801056a <_fflush_r+0x32>
 8010560:	0599      	lsls	r1, r3, #22
 8010562:	d402      	bmi.n	801056a <_fflush_r+0x32>
 8010564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010566:	f7fe faf8 	bl	800eb5a <__retarget_lock_acquire_recursive>
 801056a:	4628      	mov	r0, r5
 801056c:	4621      	mov	r1, r4
 801056e:	f7ff ff5d 	bl	801042c <__sflush_r>
 8010572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010574:	07da      	lsls	r2, r3, #31
 8010576:	4605      	mov	r5, r0
 8010578:	d4e4      	bmi.n	8010544 <_fflush_r+0xc>
 801057a:	89a3      	ldrh	r3, [r4, #12]
 801057c:	059b      	lsls	r3, r3, #22
 801057e:	d4e1      	bmi.n	8010544 <_fflush_r+0xc>
 8010580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010582:	f7fe faeb 	bl	800eb5c <__retarget_lock_release_recursive>
 8010586:	e7dd      	b.n	8010544 <_fflush_r+0xc>

08010588 <memmove>:
 8010588:	4288      	cmp	r0, r1
 801058a:	b510      	push	{r4, lr}
 801058c:	eb01 0402 	add.w	r4, r1, r2
 8010590:	d902      	bls.n	8010598 <memmove+0x10>
 8010592:	4284      	cmp	r4, r0
 8010594:	4623      	mov	r3, r4
 8010596:	d807      	bhi.n	80105a8 <memmove+0x20>
 8010598:	1e43      	subs	r3, r0, #1
 801059a:	42a1      	cmp	r1, r4
 801059c:	d008      	beq.n	80105b0 <memmove+0x28>
 801059e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105a6:	e7f8      	b.n	801059a <memmove+0x12>
 80105a8:	4402      	add	r2, r0
 80105aa:	4601      	mov	r1, r0
 80105ac:	428a      	cmp	r2, r1
 80105ae:	d100      	bne.n	80105b2 <memmove+0x2a>
 80105b0:	bd10      	pop	{r4, pc}
 80105b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105ba:	e7f7      	b.n	80105ac <memmove+0x24>

080105bc <_sbrk_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4d06      	ldr	r5, [pc, #24]	; (80105d8 <_sbrk_r+0x1c>)
 80105c0:	2300      	movs	r3, #0
 80105c2:	4604      	mov	r4, r0
 80105c4:	4608      	mov	r0, r1
 80105c6:	602b      	str	r3, [r5, #0]
 80105c8:	f7f6 fb62 	bl	8006c90 <_sbrk>
 80105cc:	1c43      	adds	r3, r0, #1
 80105ce:	d102      	bne.n	80105d6 <_sbrk_r+0x1a>
 80105d0:	682b      	ldr	r3, [r5, #0]
 80105d2:	b103      	cbz	r3, 80105d6 <_sbrk_r+0x1a>
 80105d4:	6023      	str	r3, [r4, #0]
 80105d6:	bd38      	pop	{r3, r4, r5, pc}
 80105d8:	200052f0 	.word	0x200052f0

080105dc <__assert_func>:
 80105dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105de:	4614      	mov	r4, r2
 80105e0:	461a      	mov	r2, r3
 80105e2:	4b09      	ldr	r3, [pc, #36]	; (8010608 <__assert_func+0x2c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4605      	mov	r5, r0
 80105e8:	68d8      	ldr	r0, [r3, #12]
 80105ea:	b14c      	cbz	r4, 8010600 <__assert_func+0x24>
 80105ec:	4b07      	ldr	r3, [pc, #28]	; (801060c <__assert_func+0x30>)
 80105ee:	9100      	str	r1, [sp, #0]
 80105f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105f4:	4906      	ldr	r1, [pc, #24]	; (8010610 <__assert_func+0x34>)
 80105f6:	462b      	mov	r3, r5
 80105f8:	f000 f872 	bl	80106e0 <fiprintf>
 80105fc:	f000 f882 	bl	8010704 <abort>
 8010600:	4b04      	ldr	r3, [pc, #16]	; (8010614 <__assert_func+0x38>)
 8010602:	461c      	mov	r4, r3
 8010604:	e7f3      	b.n	80105ee <__assert_func+0x12>
 8010606:	bf00      	nop
 8010608:	2000007c 	.word	0x2000007c
 801060c:	080133e7 	.word	0x080133e7
 8010610:	080133f4 	.word	0x080133f4
 8010614:	08013422 	.word	0x08013422

08010618 <_calloc_r>:
 8010618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801061a:	fba1 2402 	umull	r2, r4, r1, r2
 801061e:	b94c      	cbnz	r4, 8010634 <_calloc_r+0x1c>
 8010620:	4611      	mov	r1, r2
 8010622:	9201      	str	r2, [sp, #4]
 8010624:	f7ff f9a2 	bl	800f96c <_malloc_r>
 8010628:	9a01      	ldr	r2, [sp, #4]
 801062a:	4605      	mov	r5, r0
 801062c:	b930      	cbnz	r0, 801063c <_calloc_r+0x24>
 801062e:	4628      	mov	r0, r5
 8010630:	b003      	add	sp, #12
 8010632:	bd30      	pop	{r4, r5, pc}
 8010634:	220c      	movs	r2, #12
 8010636:	6002      	str	r2, [r0, #0]
 8010638:	2500      	movs	r5, #0
 801063a:	e7f8      	b.n	801062e <_calloc_r+0x16>
 801063c:	4621      	mov	r1, r4
 801063e:	f7fe f9b8 	bl	800e9b2 <memset>
 8010642:	e7f4      	b.n	801062e <_calloc_r+0x16>

08010644 <__ascii_mbtowc>:
 8010644:	b082      	sub	sp, #8
 8010646:	b901      	cbnz	r1, 801064a <__ascii_mbtowc+0x6>
 8010648:	a901      	add	r1, sp, #4
 801064a:	b142      	cbz	r2, 801065e <__ascii_mbtowc+0x1a>
 801064c:	b14b      	cbz	r3, 8010662 <__ascii_mbtowc+0x1e>
 801064e:	7813      	ldrb	r3, [r2, #0]
 8010650:	600b      	str	r3, [r1, #0]
 8010652:	7812      	ldrb	r2, [r2, #0]
 8010654:	1e10      	subs	r0, r2, #0
 8010656:	bf18      	it	ne
 8010658:	2001      	movne	r0, #1
 801065a:	b002      	add	sp, #8
 801065c:	4770      	bx	lr
 801065e:	4610      	mov	r0, r2
 8010660:	e7fb      	b.n	801065a <__ascii_mbtowc+0x16>
 8010662:	f06f 0001 	mvn.w	r0, #1
 8010666:	e7f8      	b.n	801065a <__ascii_mbtowc+0x16>

08010668 <_realloc_r>:
 8010668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801066c:	4680      	mov	r8, r0
 801066e:	4614      	mov	r4, r2
 8010670:	460e      	mov	r6, r1
 8010672:	b921      	cbnz	r1, 801067e <_realloc_r+0x16>
 8010674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010678:	4611      	mov	r1, r2
 801067a:	f7ff b977 	b.w	800f96c <_malloc_r>
 801067e:	b92a      	cbnz	r2, 801068c <_realloc_r+0x24>
 8010680:	f7ff f900 	bl	800f884 <_free_r>
 8010684:	4625      	mov	r5, r4
 8010686:	4628      	mov	r0, r5
 8010688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068c:	f000 f841 	bl	8010712 <_malloc_usable_size_r>
 8010690:	4284      	cmp	r4, r0
 8010692:	4607      	mov	r7, r0
 8010694:	d802      	bhi.n	801069c <_realloc_r+0x34>
 8010696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801069a:	d812      	bhi.n	80106c2 <_realloc_r+0x5a>
 801069c:	4621      	mov	r1, r4
 801069e:	4640      	mov	r0, r8
 80106a0:	f7ff f964 	bl	800f96c <_malloc_r>
 80106a4:	4605      	mov	r5, r0
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d0ed      	beq.n	8010686 <_realloc_r+0x1e>
 80106aa:	42bc      	cmp	r4, r7
 80106ac:	4622      	mov	r2, r4
 80106ae:	4631      	mov	r1, r6
 80106b0:	bf28      	it	cs
 80106b2:	463a      	movcs	r2, r7
 80106b4:	f7fe fa5b 	bl	800eb6e <memcpy>
 80106b8:	4631      	mov	r1, r6
 80106ba:	4640      	mov	r0, r8
 80106bc:	f7ff f8e2 	bl	800f884 <_free_r>
 80106c0:	e7e1      	b.n	8010686 <_realloc_r+0x1e>
 80106c2:	4635      	mov	r5, r6
 80106c4:	e7df      	b.n	8010686 <_realloc_r+0x1e>

080106c6 <__ascii_wctomb>:
 80106c6:	b149      	cbz	r1, 80106dc <__ascii_wctomb+0x16>
 80106c8:	2aff      	cmp	r2, #255	; 0xff
 80106ca:	bf85      	ittet	hi
 80106cc:	238a      	movhi	r3, #138	; 0x8a
 80106ce:	6003      	strhi	r3, [r0, #0]
 80106d0:	700a      	strbls	r2, [r1, #0]
 80106d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80106d6:	bf98      	it	ls
 80106d8:	2001      	movls	r0, #1
 80106da:	4770      	bx	lr
 80106dc:	4608      	mov	r0, r1
 80106de:	4770      	bx	lr

080106e0 <fiprintf>:
 80106e0:	b40e      	push	{r1, r2, r3}
 80106e2:	b503      	push	{r0, r1, lr}
 80106e4:	4601      	mov	r1, r0
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	4805      	ldr	r0, [pc, #20]	; (8010700 <fiprintf+0x20>)
 80106ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	f000 f83f 	bl	8010774 <_vfiprintf_r>
 80106f6:	b002      	add	sp, #8
 80106f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106fc:	b003      	add	sp, #12
 80106fe:	4770      	bx	lr
 8010700:	2000007c 	.word	0x2000007c

08010704 <abort>:
 8010704:	b508      	push	{r3, lr}
 8010706:	2006      	movs	r0, #6
 8010708:	f000 fa0c 	bl	8010b24 <raise>
 801070c:	2001      	movs	r0, #1
 801070e:	f7f6 fa47 	bl	8006ba0 <_exit>

08010712 <_malloc_usable_size_r>:
 8010712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010716:	1f18      	subs	r0, r3, #4
 8010718:	2b00      	cmp	r3, #0
 801071a:	bfbc      	itt	lt
 801071c:	580b      	ldrlt	r3, [r1, r0]
 801071e:	18c0      	addlt	r0, r0, r3
 8010720:	4770      	bx	lr

08010722 <__sfputc_r>:
 8010722:	6893      	ldr	r3, [r2, #8]
 8010724:	3b01      	subs	r3, #1
 8010726:	2b00      	cmp	r3, #0
 8010728:	b410      	push	{r4}
 801072a:	6093      	str	r3, [r2, #8]
 801072c:	da08      	bge.n	8010740 <__sfputc_r+0x1e>
 801072e:	6994      	ldr	r4, [r2, #24]
 8010730:	42a3      	cmp	r3, r4
 8010732:	db01      	blt.n	8010738 <__sfputc_r+0x16>
 8010734:	290a      	cmp	r1, #10
 8010736:	d103      	bne.n	8010740 <__sfputc_r+0x1e>
 8010738:	f85d 4b04 	ldr.w	r4, [sp], #4
 801073c:	f000 b934 	b.w	80109a8 <__swbuf_r>
 8010740:	6813      	ldr	r3, [r2, #0]
 8010742:	1c58      	adds	r0, r3, #1
 8010744:	6010      	str	r0, [r2, #0]
 8010746:	7019      	strb	r1, [r3, #0]
 8010748:	4608      	mov	r0, r1
 801074a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801074e:	4770      	bx	lr

08010750 <__sfputs_r>:
 8010750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010752:	4606      	mov	r6, r0
 8010754:	460f      	mov	r7, r1
 8010756:	4614      	mov	r4, r2
 8010758:	18d5      	adds	r5, r2, r3
 801075a:	42ac      	cmp	r4, r5
 801075c:	d101      	bne.n	8010762 <__sfputs_r+0x12>
 801075e:	2000      	movs	r0, #0
 8010760:	e007      	b.n	8010772 <__sfputs_r+0x22>
 8010762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010766:	463a      	mov	r2, r7
 8010768:	4630      	mov	r0, r6
 801076a:	f7ff ffda 	bl	8010722 <__sfputc_r>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	d1f3      	bne.n	801075a <__sfputs_r+0xa>
 8010772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010774 <_vfiprintf_r>:
 8010774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010778:	460d      	mov	r5, r1
 801077a:	b09d      	sub	sp, #116	; 0x74
 801077c:	4614      	mov	r4, r2
 801077e:	4698      	mov	r8, r3
 8010780:	4606      	mov	r6, r0
 8010782:	b118      	cbz	r0, 801078c <_vfiprintf_r+0x18>
 8010784:	6a03      	ldr	r3, [r0, #32]
 8010786:	b90b      	cbnz	r3, 801078c <_vfiprintf_r+0x18>
 8010788:	f7fe f87a 	bl	800e880 <__sinit>
 801078c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801078e:	07d9      	lsls	r1, r3, #31
 8010790:	d405      	bmi.n	801079e <_vfiprintf_r+0x2a>
 8010792:	89ab      	ldrh	r3, [r5, #12]
 8010794:	059a      	lsls	r2, r3, #22
 8010796:	d402      	bmi.n	801079e <_vfiprintf_r+0x2a>
 8010798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801079a:	f7fe f9de 	bl	800eb5a <__retarget_lock_acquire_recursive>
 801079e:	89ab      	ldrh	r3, [r5, #12]
 80107a0:	071b      	lsls	r3, r3, #28
 80107a2:	d501      	bpl.n	80107a8 <_vfiprintf_r+0x34>
 80107a4:	692b      	ldr	r3, [r5, #16]
 80107a6:	b99b      	cbnz	r3, 80107d0 <_vfiprintf_r+0x5c>
 80107a8:	4629      	mov	r1, r5
 80107aa:	4630      	mov	r0, r6
 80107ac:	f000 f93a 	bl	8010a24 <__swsetup_r>
 80107b0:	b170      	cbz	r0, 80107d0 <_vfiprintf_r+0x5c>
 80107b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107b4:	07dc      	lsls	r4, r3, #31
 80107b6:	d504      	bpl.n	80107c2 <_vfiprintf_r+0x4e>
 80107b8:	f04f 30ff 	mov.w	r0, #4294967295
 80107bc:	b01d      	add	sp, #116	; 0x74
 80107be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	89ab      	ldrh	r3, [r5, #12]
 80107c4:	0598      	lsls	r0, r3, #22
 80107c6:	d4f7      	bmi.n	80107b8 <_vfiprintf_r+0x44>
 80107c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107ca:	f7fe f9c7 	bl	800eb5c <__retarget_lock_release_recursive>
 80107ce:	e7f3      	b.n	80107b8 <_vfiprintf_r+0x44>
 80107d0:	2300      	movs	r3, #0
 80107d2:	9309      	str	r3, [sp, #36]	; 0x24
 80107d4:	2320      	movs	r3, #32
 80107d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107da:	f8cd 800c 	str.w	r8, [sp, #12]
 80107de:	2330      	movs	r3, #48	; 0x30
 80107e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010994 <_vfiprintf_r+0x220>
 80107e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107e8:	f04f 0901 	mov.w	r9, #1
 80107ec:	4623      	mov	r3, r4
 80107ee:	469a      	mov	sl, r3
 80107f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107f4:	b10a      	cbz	r2, 80107fa <_vfiprintf_r+0x86>
 80107f6:	2a25      	cmp	r2, #37	; 0x25
 80107f8:	d1f9      	bne.n	80107ee <_vfiprintf_r+0x7a>
 80107fa:	ebba 0b04 	subs.w	fp, sl, r4
 80107fe:	d00b      	beq.n	8010818 <_vfiprintf_r+0xa4>
 8010800:	465b      	mov	r3, fp
 8010802:	4622      	mov	r2, r4
 8010804:	4629      	mov	r1, r5
 8010806:	4630      	mov	r0, r6
 8010808:	f7ff ffa2 	bl	8010750 <__sfputs_r>
 801080c:	3001      	adds	r0, #1
 801080e:	f000 80a9 	beq.w	8010964 <_vfiprintf_r+0x1f0>
 8010812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010814:	445a      	add	r2, fp
 8010816:	9209      	str	r2, [sp, #36]	; 0x24
 8010818:	f89a 3000 	ldrb.w	r3, [sl]
 801081c:	2b00      	cmp	r3, #0
 801081e:	f000 80a1 	beq.w	8010964 <_vfiprintf_r+0x1f0>
 8010822:	2300      	movs	r3, #0
 8010824:	f04f 32ff 	mov.w	r2, #4294967295
 8010828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801082c:	f10a 0a01 	add.w	sl, sl, #1
 8010830:	9304      	str	r3, [sp, #16]
 8010832:	9307      	str	r3, [sp, #28]
 8010834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010838:	931a      	str	r3, [sp, #104]	; 0x68
 801083a:	4654      	mov	r4, sl
 801083c:	2205      	movs	r2, #5
 801083e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010842:	4854      	ldr	r0, [pc, #336]	; (8010994 <_vfiprintf_r+0x220>)
 8010844:	f7ef fcc4 	bl	80001d0 <memchr>
 8010848:	9a04      	ldr	r2, [sp, #16]
 801084a:	b9d8      	cbnz	r0, 8010884 <_vfiprintf_r+0x110>
 801084c:	06d1      	lsls	r1, r2, #27
 801084e:	bf44      	itt	mi
 8010850:	2320      	movmi	r3, #32
 8010852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010856:	0713      	lsls	r3, r2, #28
 8010858:	bf44      	itt	mi
 801085a:	232b      	movmi	r3, #43	; 0x2b
 801085c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010860:	f89a 3000 	ldrb.w	r3, [sl]
 8010864:	2b2a      	cmp	r3, #42	; 0x2a
 8010866:	d015      	beq.n	8010894 <_vfiprintf_r+0x120>
 8010868:	9a07      	ldr	r2, [sp, #28]
 801086a:	4654      	mov	r4, sl
 801086c:	2000      	movs	r0, #0
 801086e:	f04f 0c0a 	mov.w	ip, #10
 8010872:	4621      	mov	r1, r4
 8010874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010878:	3b30      	subs	r3, #48	; 0x30
 801087a:	2b09      	cmp	r3, #9
 801087c:	d94d      	bls.n	801091a <_vfiprintf_r+0x1a6>
 801087e:	b1b0      	cbz	r0, 80108ae <_vfiprintf_r+0x13a>
 8010880:	9207      	str	r2, [sp, #28]
 8010882:	e014      	b.n	80108ae <_vfiprintf_r+0x13a>
 8010884:	eba0 0308 	sub.w	r3, r0, r8
 8010888:	fa09 f303 	lsl.w	r3, r9, r3
 801088c:	4313      	orrs	r3, r2
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	46a2      	mov	sl, r4
 8010892:	e7d2      	b.n	801083a <_vfiprintf_r+0xc6>
 8010894:	9b03      	ldr	r3, [sp, #12]
 8010896:	1d19      	adds	r1, r3, #4
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	9103      	str	r1, [sp, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	bfbb      	ittet	lt
 80108a0:	425b      	neglt	r3, r3
 80108a2:	f042 0202 	orrlt.w	r2, r2, #2
 80108a6:	9307      	strge	r3, [sp, #28]
 80108a8:	9307      	strlt	r3, [sp, #28]
 80108aa:	bfb8      	it	lt
 80108ac:	9204      	strlt	r2, [sp, #16]
 80108ae:	7823      	ldrb	r3, [r4, #0]
 80108b0:	2b2e      	cmp	r3, #46	; 0x2e
 80108b2:	d10c      	bne.n	80108ce <_vfiprintf_r+0x15a>
 80108b4:	7863      	ldrb	r3, [r4, #1]
 80108b6:	2b2a      	cmp	r3, #42	; 0x2a
 80108b8:	d134      	bne.n	8010924 <_vfiprintf_r+0x1b0>
 80108ba:	9b03      	ldr	r3, [sp, #12]
 80108bc:	1d1a      	adds	r2, r3, #4
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	9203      	str	r2, [sp, #12]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	bfb8      	it	lt
 80108c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80108ca:	3402      	adds	r4, #2
 80108cc:	9305      	str	r3, [sp, #20]
 80108ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80109a4 <_vfiprintf_r+0x230>
 80108d2:	7821      	ldrb	r1, [r4, #0]
 80108d4:	2203      	movs	r2, #3
 80108d6:	4650      	mov	r0, sl
 80108d8:	f7ef fc7a 	bl	80001d0 <memchr>
 80108dc:	b138      	cbz	r0, 80108ee <_vfiprintf_r+0x17a>
 80108de:	9b04      	ldr	r3, [sp, #16]
 80108e0:	eba0 000a 	sub.w	r0, r0, sl
 80108e4:	2240      	movs	r2, #64	; 0x40
 80108e6:	4082      	lsls	r2, r0
 80108e8:	4313      	orrs	r3, r2
 80108ea:	3401      	adds	r4, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108f2:	4829      	ldr	r0, [pc, #164]	; (8010998 <_vfiprintf_r+0x224>)
 80108f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108f8:	2206      	movs	r2, #6
 80108fa:	f7ef fc69 	bl	80001d0 <memchr>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d03f      	beq.n	8010982 <_vfiprintf_r+0x20e>
 8010902:	4b26      	ldr	r3, [pc, #152]	; (801099c <_vfiprintf_r+0x228>)
 8010904:	bb1b      	cbnz	r3, 801094e <_vfiprintf_r+0x1da>
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	3307      	adds	r3, #7
 801090a:	f023 0307 	bic.w	r3, r3, #7
 801090e:	3308      	adds	r3, #8
 8010910:	9303      	str	r3, [sp, #12]
 8010912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010914:	443b      	add	r3, r7
 8010916:	9309      	str	r3, [sp, #36]	; 0x24
 8010918:	e768      	b.n	80107ec <_vfiprintf_r+0x78>
 801091a:	fb0c 3202 	mla	r2, ip, r2, r3
 801091e:	460c      	mov	r4, r1
 8010920:	2001      	movs	r0, #1
 8010922:	e7a6      	b.n	8010872 <_vfiprintf_r+0xfe>
 8010924:	2300      	movs	r3, #0
 8010926:	3401      	adds	r4, #1
 8010928:	9305      	str	r3, [sp, #20]
 801092a:	4619      	mov	r1, r3
 801092c:	f04f 0c0a 	mov.w	ip, #10
 8010930:	4620      	mov	r0, r4
 8010932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010936:	3a30      	subs	r2, #48	; 0x30
 8010938:	2a09      	cmp	r2, #9
 801093a:	d903      	bls.n	8010944 <_vfiprintf_r+0x1d0>
 801093c:	2b00      	cmp	r3, #0
 801093e:	d0c6      	beq.n	80108ce <_vfiprintf_r+0x15a>
 8010940:	9105      	str	r1, [sp, #20]
 8010942:	e7c4      	b.n	80108ce <_vfiprintf_r+0x15a>
 8010944:	fb0c 2101 	mla	r1, ip, r1, r2
 8010948:	4604      	mov	r4, r0
 801094a:	2301      	movs	r3, #1
 801094c:	e7f0      	b.n	8010930 <_vfiprintf_r+0x1bc>
 801094e:	ab03      	add	r3, sp, #12
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	462a      	mov	r2, r5
 8010954:	4b12      	ldr	r3, [pc, #72]	; (80109a0 <_vfiprintf_r+0x22c>)
 8010956:	a904      	add	r1, sp, #16
 8010958:	4630      	mov	r0, r6
 801095a:	f7fd fb3f 	bl	800dfdc <_printf_float>
 801095e:	4607      	mov	r7, r0
 8010960:	1c78      	adds	r0, r7, #1
 8010962:	d1d6      	bne.n	8010912 <_vfiprintf_r+0x19e>
 8010964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010966:	07d9      	lsls	r1, r3, #31
 8010968:	d405      	bmi.n	8010976 <_vfiprintf_r+0x202>
 801096a:	89ab      	ldrh	r3, [r5, #12]
 801096c:	059a      	lsls	r2, r3, #22
 801096e:	d402      	bmi.n	8010976 <_vfiprintf_r+0x202>
 8010970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010972:	f7fe f8f3 	bl	800eb5c <__retarget_lock_release_recursive>
 8010976:	89ab      	ldrh	r3, [r5, #12]
 8010978:	065b      	lsls	r3, r3, #25
 801097a:	f53f af1d 	bmi.w	80107b8 <_vfiprintf_r+0x44>
 801097e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010980:	e71c      	b.n	80107bc <_vfiprintf_r+0x48>
 8010982:	ab03      	add	r3, sp, #12
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	462a      	mov	r2, r5
 8010988:	4b05      	ldr	r3, [pc, #20]	; (80109a0 <_vfiprintf_r+0x22c>)
 801098a:	a904      	add	r1, sp, #16
 801098c:	4630      	mov	r0, r6
 801098e:	f7fd fdc9 	bl	800e524 <_printf_i>
 8010992:	e7e4      	b.n	801095e <_vfiprintf_r+0x1ea>
 8010994:	080133cc 	.word	0x080133cc
 8010998:	080133d6 	.word	0x080133d6
 801099c:	0800dfdd 	.word	0x0800dfdd
 80109a0:	08010751 	.word	0x08010751
 80109a4:	080133d2 	.word	0x080133d2

080109a8 <__swbuf_r>:
 80109a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109aa:	460e      	mov	r6, r1
 80109ac:	4614      	mov	r4, r2
 80109ae:	4605      	mov	r5, r0
 80109b0:	b118      	cbz	r0, 80109ba <__swbuf_r+0x12>
 80109b2:	6a03      	ldr	r3, [r0, #32]
 80109b4:	b90b      	cbnz	r3, 80109ba <__swbuf_r+0x12>
 80109b6:	f7fd ff63 	bl	800e880 <__sinit>
 80109ba:	69a3      	ldr	r3, [r4, #24]
 80109bc:	60a3      	str	r3, [r4, #8]
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	071a      	lsls	r2, r3, #28
 80109c2:	d525      	bpl.n	8010a10 <__swbuf_r+0x68>
 80109c4:	6923      	ldr	r3, [r4, #16]
 80109c6:	b31b      	cbz	r3, 8010a10 <__swbuf_r+0x68>
 80109c8:	6823      	ldr	r3, [r4, #0]
 80109ca:	6922      	ldr	r2, [r4, #16]
 80109cc:	1a98      	subs	r0, r3, r2
 80109ce:	6963      	ldr	r3, [r4, #20]
 80109d0:	b2f6      	uxtb	r6, r6
 80109d2:	4283      	cmp	r3, r0
 80109d4:	4637      	mov	r7, r6
 80109d6:	dc04      	bgt.n	80109e2 <__swbuf_r+0x3a>
 80109d8:	4621      	mov	r1, r4
 80109da:	4628      	mov	r0, r5
 80109dc:	f7ff fdac 	bl	8010538 <_fflush_r>
 80109e0:	b9e0      	cbnz	r0, 8010a1c <__swbuf_r+0x74>
 80109e2:	68a3      	ldr	r3, [r4, #8]
 80109e4:	3b01      	subs	r3, #1
 80109e6:	60a3      	str	r3, [r4, #8]
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	1c5a      	adds	r2, r3, #1
 80109ec:	6022      	str	r2, [r4, #0]
 80109ee:	701e      	strb	r6, [r3, #0]
 80109f0:	6962      	ldr	r2, [r4, #20]
 80109f2:	1c43      	adds	r3, r0, #1
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d004      	beq.n	8010a02 <__swbuf_r+0x5a>
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	07db      	lsls	r3, r3, #31
 80109fc:	d506      	bpl.n	8010a0c <__swbuf_r+0x64>
 80109fe:	2e0a      	cmp	r6, #10
 8010a00:	d104      	bne.n	8010a0c <__swbuf_r+0x64>
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	f7ff fd97 	bl	8010538 <_fflush_r>
 8010a0a:	b938      	cbnz	r0, 8010a1c <__swbuf_r+0x74>
 8010a0c:	4638      	mov	r0, r7
 8010a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a10:	4621      	mov	r1, r4
 8010a12:	4628      	mov	r0, r5
 8010a14:	f000 f806 	bl	8010a24 <__swsetup_r>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d0d5      	beq.n	80109c8 <__swbuf_r+0x20>
 8010a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8010a20:	e7f4      	b.n	8010a0c <__swbuf_r+0x64>
	...

08010a24 <__swsetup_r>:
 8010a24:	b538      	push	{r3, r4, r5, lr}
 8010a26:	4b2a      	ldr	r3, [pc, #168]	; (8010ad0 <__swsetup_r+0xac>)
 8010a28:	4605      	mov	r5, r0
 8010a2a:	6818      	ldr	r0, [r3, #0]
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	b118      	cbz	r0, 8010a38 <__swsetup_r+0x14>
 8010a30:	6a03      	ldr	r3, [r0, #32]
 8010a32:	b90b      	cbnz	r3, 8010a38 <__swsetup_r+0x14>
 8010a34:	f7fd ff24 	bl	800e880 <__sinit>
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a3e:	0718      	lsls	r0, r3, #28
 8010a40:	d422      	bmi.n	8010a88 <__swsetup_r+0x64>
 8010a42:	06d9      	lsls	r1, r3, #27
 8010a44:	d407      	bmi.n	8010a56 <__swsetup_r+0x32>
 8010a46:	2309      	movs	r3, #9
 8010a48:	602b      	str	r3, [r5, #0]
 8010a4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a4e:	81a3      	strh	r3, [r4, #12]
 8010a50:	f04f 30ff 	mov.w	r0, #4294967295
 8010a54:	e034      	b.n	8010ac0 <__swsetup_r+0x9c>
 8010a56:	0758      	lsls	r0, r3, #29
 8010a58:	d512      	bpl.n	8010a80 <__swsetup_r+0x5c>
 8010a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a5c:	b141      	cbz	r1, 8010a70 <__swsetup_r+0x4c>
 8010a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a62:	4299      	cmp	r1, r3
 8010a64:	d002      	beq.n	8010a6c <__swsetup_r+0x48>
 8010a66:	4628      	mov	r0, r5
 8010a68:	f7fe ff0c 	bl	800f884 <_free_r>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	6363      	str	r3, [r4, #52]	; 0x34
 8010a70:	89a3      	ldrh	r3, [r4, #12]
 8010a72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	6063      	str	r3, [r4, #4]
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	6023      	str	r3, [r4, #0]
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	f043 0308 	orr.w	r3, r3, #8
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	6923      	ldr	r3, [r4, #16]
 8010a8a:	b94b      	cbnz	r3, 8010aa0 <__swsetup_r+0x7c>
 8010a8c:	89a3      	ldrh	r3, [r4, #12]
 8010a8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a96:	d003      	beq.n	8010aa0 <__swsetup_r+0x7c>
 8010a98:	4621      	mov	r1, r4
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f000 f884 	bl	8010ba8 <__smakebuf_r>
 8010aa0:	89a0      	ldrh	r0, [r4, #12]
 8010aa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010aa6:	f010 0301 	ands.w	r3, r0, #1
 8010aaa:	d00a      	beq.n	8010ac2 <__swsetup_r+0x9e>
 8010aac:	2300      	movs	r3, #0
 8010aae:	60a3      	str	r3, [r4, #8]
 8010ab0:	6963      	ldr	r3, [r4, #20]
 8010ab2:	425b      	negs	r3, r3
 8010ab4:	61a3      	str	r3, [r4, #24]
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	b943      	cbnz	r3, 8010acc <__swsetup_r+0xa8>
 8010aba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010abe:	d1c4      	bne.n	8010a4a <__swsetup_r+0x26>
 8010ac0:	bd38      	pop	{r3, r4, r5, pc}
 8010ac2:	0781      	lsls	r1, r0, #30
 8010ac4:	bf58      	it	pl
 8010ac6:	6963      	ldrpl	r3, [r4, #20]
 8010ac8:	60a3      	str	r3, [r4, #8]
 8010aca:	e7f4      	b.n	8010ab6 <__swsetup_r+0x92>
 8010acc:	2000      	movs	r0, #0
 8010ace:	e7f7      	b.n	8010ac0 <__swsetup_r+0x9c>
 8010ad0:	2000007c 	.word	0x2000007c

08010ad4 <_raise_r>:
 8010ad4:	291f      	cmp	r1, #31
 8010ad6:	b538      	push	{r3, r4, r5, lr}
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	d904      	bls.n	8010ae8 <_raise_r+0x14>
 8010ade:	2316      	movs	r3, #22
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010aea:	b112      	cbz	r2, 8010af2 <_raise_r+0x1e>
 8010aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010af0:	b94b      	cbnz	r3, 8010b06 <_raise_r+0x32>
 8010af2:	4620      	mov	r0, r4
 8010af4:	f000 f830 	bl	8010b58 <_getpid_r>
 8010af8:	462a      	mov	r2, r5
 8010afa:	4601      	mov	r1, r0
 8010afc:	4620      	mov	r0, r4
 8010afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b02:	f000 b817 	b.w	8010b34 <_kill_r>
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d00a      	beq.n	8010b20 <_raise_r+0x4c>
 8010b0a:	1c59      	adds	r1, r3, #1
 8010b0c:	d103      	bne.n	8010b16 <_raise_r+0x42>
 8010b0e:	2316      	movs	r3, #22
 8010b10:	6003      	str	r3, [r0, #0]
 8010b12:	2001      	movs	r0, #1
 8010b14:	e7e7      	b.n	8010ae6 <_raise_r+0x12>
 8010b16:	2400      	movs	r4, #0
 8010b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	4798      	blx	r3
 8010b20:	2000      	movs	r0, #0
 8010b22:	e7e0      	b.n	8010ae6 <_raise_r+0x12>

08010b24 <raise>:
 8010b24:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <raise+0xc>)
 8010b26:	4601      	mov	r1, r0
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	f7ff bfd3 	b.w	8010ad4 <_raise_r>
 8010b2e:	bf00      	nop
 8010b30:	2000007c 	.word	0x2000007c

08010b34 <_kill_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4d07      	ldr	r5, [pc, #28]	; (8010b54 <_kill_r+0x20>)
 8010b38:	2300      	movs	r3, #0
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	4608      	mov	r0, r1
 8010b3e:	4611      	mov	r1, r2
 8010b40:	602b      	str	r3, [r5, #0]
 8010b42:	f7f6 f81d 	bl	8006b80 <_kill>
 8010b46:	1c43      	adds	r3, r0, #1
 8010b48:	d102      	bne.n	8010b50 <_kill_r+0x1c>
 8010b4a:	682b      	ldr	r3, [r5, #0]
 8010b4c:	b103      	cbz	r3, 8010b50 <_kill_r+0x1c>
 8010b4e:	6023      	str	r3, [r4, #0]
 8010b50:	bd38      	pop	{r3, r4, r5, pc}
 8010b52:	bf00      	nop
 8010b54:	200052f0 	.word	0x200052f0

08010b58 <_getpid_r>:
 8010b58:	f7f6 b80a 	b.w	8006b70 <_getpid>

08010b5c <__swhatbuf_r>:
 8010b5c:	b570      	push	{r4, r5, r6, lr}
 8010b5e:	460c      	mov	r4, r1
 8010b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b64:	2900      	cmp	r1, #0
 8010b66:	b096      	sub	sp, #88	; 0x58
 8010b68:	4615      	mov	r5, r2
 8010b6a:	461e      	mov	r6, r3
 8010b6c:	da0d      	bge.n	8010b8a <__swhatbuf_r+0x2e>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b74:	f04f 0100 	mov.w	r1, #0
 8010b78:	bf0c      	ite	eq
 8010b7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010b7e:	2340      	movne	r3, #64	; 0x40
 8010b80:	2000      	movs	r0, #0
 8010b82:	6031      	str	r1, [r6, #0]
 8010b84:	602b      	str	r3, [r5, #0]
 8010b86:	b016      	add	sp, #88	; 0x58
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
 8010b8a:	466a      	mov	r2, sp
 8010b8c:	f000 f848 	bl	8010c20 <_fstat_r>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	dbec      	blt.n	8010b6e <__swhatbuf_r+0x12>
 8010b94:	9901      	ldr	r1, [sp, #4]
 8010b96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010b9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010b9e:	4259      	negs	r1, r3
 8010ba0:	4159      	adcs	r1, r3
 8010ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ba6:	e7eb      	b.n	8010b80 <__swhatbuf_r+0x24>

08010ba8 <__smakebuf_r>:
 8010ba8:	898b      	ldrh	r3, [r1, #12]
 8010baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bac:	079d      	lsls	r5, r3, #30
 8010bae:	4606      	mov	r6, r0
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	d507      	bpl.n	8010bc4 <__smakebuf_r+0x1c>
 8010bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bb8:	6023      	str	r3, [r4, #0]
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	6163      	str	r3, [r4, #20]
 8010bc0:	b002      	add	sp, #8
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	ab01      	add	r3, sp, #4
 8010bc6:	466a      	mov	r2, sp
 8010bc8:	f7ff ffc8 	bl	8010b5c <__swhatbuf_r>
 8010bcc:	9900      	ldr	r1, [sp, #0]
 8010bce:	4605      	mov	r5, r0
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f7fe fecb 	bl	800f96c <_malloc_r>
 8010bd6:	b948      	cbnz	r0, 8010bec <__smakebuf_r+0x44>
 8010bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bdc:	059a      	lsls	r2, r3, #22
 8010bde:	d4ef      	bmi.n	8010bc0 <__smakebuf_r+0x18>
 8010be0:	f023 0303 	bic.w	r3, r3, #3
 8010be4:	f043 0302 	orr.w	r3, r3, #2
 8010be8:	81a3      	strh	r3, [r4, #12]
 8010bea:	e7e3      	b.n	8010bb4 <__smakebuf_r+0xc>
 8010bec:	89a3      	ldrh	r3, [r4, #12]
 8010bee:	6020      	str	r0, [r4, #0]
 8010bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bf4:	81a3      	strh	r3, [r4, #12]
 8010bf6:	9b00      	ldr	r3, [sp, #0]
 8010bf8:	6163      	str	r3, [r4, #20]
 8010bfa:	9b01      	ldr	r3, [sp, #4]
 8010bfc:	6120      	str	r0, [r4, #16]
 8010bfe:	b15b      	cbz	r3, 8010c18 <__smakebuf_r+0x70>
 8010c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c04:	4630      	mov	r0, r6
 8010c06:	f000 f81d 	bl	8010c44 <_isatty_r>
 8010c0a:	b128      	cbz	r0, 8010c18 <__smakebuf_r+0x70>
 8010c0c:	89a3      	ldrh	r3, [r4, #12]
 8010c0e:	f023 0303 	bic.w	r3, r3, #3
 8010c12:	f043 0301 	orr.w	r3, r3, #1
 8010c16:	81a3      	strh	r3, [r4, #12]
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	431d      	orrs	r5, r3
 8010c1c:	81a5      	strh	r5, [r4, #12]
 8010c1e:	e7cf      	b.n	8010bc0 <__smakebuf_r+0x18>

08010c20 <_fstat_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d07      	ldr	r5, [pc, #28]	; (8010c40 <_fstat_r+0x20>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	4611      	mov	r1, r2
 8010c2c:	602b      	str	r3, [r5, #0]
 8010c2e:	f7f6 f806 	bl	8006c3e <_fstat>
 8010c32:	1c43      	adds	r3, r0, #1
 8010c34:	d102      	bne.n	8010c3c <_fstat_r+0x1c>
 8010c36:	682b      	ldr	r3, [r5, #0]
 8010c38:	b103      	cbz	r3, 8010c3c <_fstat_r+0x1c>
 8010c3a:	6023      	str	r3, [r4, #0]
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
 8010c3e:	bf00      	nop
 8010c40:	200052f0 	.word	0x200052f0

08010c44 <_isatty_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4d06      	ldr	r5, [pc, #24]	; (8010c60 <_isatty_r+0x1c>)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4608      	mov	r0, r1
 8010c4e:	602b      	str	r3, [r5, #0]
 8010c50:	f7f6 f805 	bl	8006c5e <_isatty>
 8010c54:	1c43      	adds	r3, r0, #1
 8010c56:	d102      	bne.n	8010c5e <_isatty_r+0x1a>
 8010c58:	682b      	ldr	r3, [r5, #0]
 8010c5a:	b103      	cbz	r3, 8010c5e <_isatty_r+0x1a>
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	200052f0 	.word	0x200052f0

08010c64 <atan2>:
 8010c64:	f000 bbb8 	b.w	80113d8 <__ieee754_atan2>

08010c68 <pow>:
 8010c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6a:	ed2d 8b02 	vpush	{d8}
 8010c6e:	eeb0 8a40 	vmov.f32	s16, s0
 8010c72:	eef0 8a60 	vmov.f32	s17, s1
 8010c76:	ec55 4b11 	vmov	r4, r5, d1
 8010c7a:	f000 fc75 	bl	8011568 <__ieee754_pow>
 8010c7e:	4622      	mov	r2, r4
 8010c80:	462b      	mov	r3, r5
 8010c82:	4620      	mov	r0, r4
 8010c84:	4629      	mov	r1, r5
 8010c86:	ec57 6b10 	vmov	r6, r7, d0
 8010c8a:	f7ef ff4f 	bl	8000b2c <__aeabi_dcmpun>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d13b      	bne.n	8010d0a <pow+0xa2>
 8010c92:	ec51 0b18 	vmov	r0, r1, d8
 8010c96:	2200      	movs	r2, #0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f7ef ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c9e:	b1b8      	cbz	r0, 8010cd0 <pow+0x68>
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	f7ef ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d146      	bne.n	8010d3e <pow+0xd6>
 8010cb0:	ec45 4b10 	vmov	d0, r4, r5
 8010cb4:	f000 f920 	bl	8010ef8 <finite>
 8010cb8:	b338      	cbz	r0, 8010d0a <pow+0xa2>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	f7ef ff0b 	bl	8000adc <__aeabi_dcmplt>
 8010cc6:	b300      	cbz	r0, 8010d0a <pow+0xa2>
 8010cc8:	f7fd ff1c 	bl	800eb04 <__errno>
 8010ccc:	2322      	movs	r3, #34	; 0x22
 8010cce:	e01b      	b.n	8010d08 <pow+0xa0>
 8010cd0:	ec47 6b10 	vmov	d0, r6, r7
 8010cd4:	f000 f910 	bl	8010ef8 <finite>
 8010cd8:	b9e0      	cbnz	r0, 8010d14 <pow+0xac>
 8010cda:	eeb0 0a48 	vmov.f32	s0, s16
 8010cde:	eef0 0a68 	vmov.f32	s1, s17
 8010ce2:	f000 f909 	bl	8010ef8 <finite>
 8010ce6:	b1a8      	cbz	r0, 8010d14 <pow+0xac>
 8010ce8:	ec45 4b10 	vmov	d0, r4, r5
 8010cec:	f000 f904 	bl	8010ef8 <finite>
 8010cf0:	b180      	cbz	r0, 8010d14 <pow+0xac>
 8010cf2:	4632      	mov	r2, r6
 8010cf4:	463b      	mov	r3, r7
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	4639      	mov	r1, r7
 8010cfa:	f7ef ff17 	bl	8000b2c <__aeabi_dcmpun>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0e2      	beq.n	8010cc8 <pow+0x60>
 8010d02:	f7fd feff 	bl	800eb04 <__errno>
 8010d06:	2321      	movs	r3, #33	; 0x21
 8010d08:	6003      	str	r3, [r0, #0]
 8010d0a:	ecbd 8b02 	vpop	{d8}
 8010d0e:	ec47 6b10 	vmov	d0, r6, r7
 8010d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d14:	2200      	movs	r2, #0
 8010d16:	2300      	movs	r3, #0
 8010d18:	4630      	mov	r0, r6
 8010d1a:	4639      	mov	r1, r7
 8010d1c:	f7ef fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d0f2      	beq.n	8010d0a <pow+0xa2>
 8010d24:	eeb0 0a48 	vmov.f32	s0, s16
 8010d28:	eef0 0a68 	vmov.f32	s1, s17
 8010d2c:	f000 f8e4 	bl	8010ef8 <finite>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d0ea      	beq.n	8010d0a <pow+0xa2>
 8010d34:	ec45 4b10 	vmov	d0, r4, r5
 8010d38:	f000 f8de 	bl	8010ef8 <finite>
 8010d3c:	e7c3      	b.n	8010cc6 <pow+0x5e>
 8010d3e:	4f01      	ldr	r7, [pc, #4]	; (8010d44 <pow+0xdc>)
 8010d40:	2600      	movs	r6, #0
 8010d42:	e7e2      	b.n	8010d0a <pow+0xa2>
 8010d44:	3ff00000 	.word	0x3ff00000

08010d48 <sqrt>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	ed2d 8b02 	vpush	{d8}
 8010d4e:	ec55 4b10 	vmov	r4, r5, d0
 8010d52:	f000 f8dd 	bl	8010f10 <__ieee754_sqrt>
 8010d56:	4622      	mov	r2, r4
 8010d58:	462b      	mov	r3, r5
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8010d62:	eef0 8a60 	vmov.f32	s17, s1
 8010d66:	f7ef fee1 	bl	8000b2c <__aeabi_dcmpun>
 8010d6a:	b990      	cbnz	r0, 8010d92 <sqrt+0x4a>
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2300      	movs	r3, #0
 8010d70:	4620      	mov	r0, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef feb2 	bl	8000adc <__aeabi_dcmplt>
 8010d78:	b158      	cbz	r0, 8010d92 <sqrt+0x4a>
 8010d7a:	f7fd fec3 	bl	800eb04 <__errno>
 8010d7e:	2321      	movs	r3, #33	; 0x21
 8010d80:	6003      	str	r3, [r0, #0]
 8010d82:	2200      	movs	r2, #0
 8010d84:	2300      	movs	r3, #0
 8010d86:	4610      	mov	r0, r2
 8010d88:	4619      	mov	r1, r3
 8010d8a:	f7ef fd5f 	bl	800084c <__aeabi_ddiv>
 8010d8e:	ec41 0b18 	vmov	d8, r0, r1
 8010d92:	eeb0 0a48 	vmov.f32	s0, s16
 8010d96:	eef0 0a68 	vmov.f32	s1, s17
 8010d9a:	ecbd 8b02 	vpop	{d8}
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}

08010da0 <cos>:
 8010da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010da2:	ec53 2b10 	vmov	r2, r3, d0
 8010da6:	4826      	ldr	r0, [pc, #152]	; (8010e40 <cos+0xa0>)
 8010da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010dac:	4281      	cmp	r1, r0
 8010dae:	dc06      	bgt.n	8010dbe <cos+0x1e>
 8010db0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010e38 <cos+0x98>
 8010db4:	b005      	add	sp, #20
 8010db6:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dba:	f000 b985 	b.w	80110c8 <__kernel_cos>
 8010dbe:	4821      	ldr	r0, [pc, #132]	; (8010e44 <cos+0xa4>)
 8010dc0:	4281      	cmp	r1, r0
 8010dc2:	dd09      	ble.n	8010dd8 <cos+0x38>
 8010dc4:	ee10 0a10 	vmov	r0, s0
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f7ef fa5d 	bl	8000288 <__aeabi_dsub>
 8010dce:	ec41 0b10 	vmov	d0, r0, r1
 8010dd2:	b005      	add	sp, #20
 8010dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dd8:	4668      	mov	r0, sp
 8010dda:	f001 f8f1 	bl	8011fc0 <__ieee754_rem_pio2>
 8010dde:	f000 0003 	and.w	r0, r0, #3
 8010de2:	2801      	cmp	r0, #1
 8010de4:	d00b      	beq.n	8010dfe <cos+0x5e>
 8010de6:	2802      	cmp	r0, #2
 8010de8:	d016      	beq.n	8010e18 <cos+0x78>
 8010dea:	b9e0      	cbnz	r0, 8010e26 <cos+0x86>
 8010dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010df0:	ed9d 0b00 	vldr	d0, [sp]
 8010df4:	f000 f968 	bl	80110c8 <__kernel_cos>
 8010df8:	ec51 0b10 	vmov	r0, r1, d0
 8010dfc:	e7e7      	b.n	8010dce <cos+0x2e>
 8010dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e02:	ed9d 0b00 	vldr	d0, [sp]
 8010e06:	f000 fa27 	bl	8011258 <__kernel_sin>
 8010e0a:	ec53 2b10 	vmov	r2, r3, d0
 8010e0e:	ee10 0a10 	vmov	r0, s0
 8010e12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e16:	e7da      	b.n	8010dce <cos+0x2e>
 8010e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e1c:	ed9d 0b00 	vldr	d0, [sp]
 8010e20:	f000 f952 	bl	80110c8 <__kernel_cos>
 8010e24:	e7f1      	b.n	8010e0a <cos+0x6a>
 8010e26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e2a:	ed9d 0b00 	vldr	d0, [sp]
 8010e2e:	2001      	movs	r0, #1
 8010e30:	f000 fa12 	bl	8011258 <__kernel_sin>
 8010e34:	e7e0      	b.n	8010df8 <cos+0x58>
 8010e36:	bf00      	nop
	...
 8010e40:	3fe921fb 	.word	0x3fe921fb
 8010e44:	7fefffff 	.word	0x7fefffff

08010e48 <sin>:
 8010e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e4a:	ec53 2b10 	vmov	r2, r3, d0
 8010e4e:	4828      	ldr	r0, [pc, #160]	; (8010ef0 <sin+0xa8>)
 8010e50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e54:	4281      	cmp	r1, r0
 8010e56:	dc07      	bgt.n	8010e68 <sin+0x20>
 8010e58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010ee8 <sin+0xa0>
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	b005      	add	sp, #20
 8010e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e64:	f000 b9f8 	b.w	8011258 <__kernel_sin>
 8010e68:	4822      	ldr	r0, [pc, #136]	; (8010ef4 <sin+0xac>)
 8010e6a:	4281      	cmp	r1, r0
 8010e6c:	dd09      	ble.n	8010e82 <sin+0x3a>
 8010e6e:	ee10 0a10 	vmov	r0, s0
 8010e72:	4619      	mov	r1, r3
 8010e74:	f7ef fa08 	bl	8000288 <__aeabi_dsub>
 8010e78:	ec41 0b10 	vmov	d0, r0, r1
 8010e7c:	b005      	add	sp, #20
 8010e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e82:	4668      	mov	r0, sp
 8010e84:	f001 f89c 	bl	8011fc0 <__ieee754_rem_pio2>
 8010e88:	f000 0003 	and.w	r0, r0, #3
 8010e8c:	2801      	cmp	r0, #1
 8010e8e:	d00c      	beq.n	8010eaa <sin+0x62>
 8010e90:	2802      	cmp	r0, #2
 8010e92:	d011      	beq.n	8010eb8 <sin+0x70>
 8010e94:	b9f0      	cbnz	r0, 8010ed4 <sin+0x8c>
 8010e96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e9a:	ed9d 0b00 	vldr	d0, [sp]
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	f000 f9da 	bl	8011258 <__kernel_sin>
 8010ea4:	ec51 0b10 	vmov	r0, r1, d0
 8010ea8:	e7e6      	b.n	8010e78 <sin+0x30>
 8010eaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eae:	ed9d 0b00 	vldr	d0, [sp]
 8010eb2:	f000 f909 	bl	80110c8 <__kernel_cos>
 8010eb6:	e7f5      	b.n	8010ea4 <sin+0x5c>
 8010eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ebc:	ed9d 0b00 	vldr	d0, [sp]
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	f000 f9c9 	bl	8011258 <__kernel_sin>
 8010ec6:	ec53 2b10 	vmov	r2, r3, d0
 8010eca:	ee10 0a10 	vmov	r0, s0
 8010ece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ed2:	e7d1      	b.n	8010e78 <sin+0x30>
 8010ed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ed8:	ed9d 0b00 	vldr	d0, [sp]
 8010edc:	f000 f8f4 	bl	80110c8 <__kernel_cos>
 8010ee0:	e7f1      	b.n	8010ec6 <sin+0x7e>
 8010ee2:	bf00      	nop
 8010ee4:	f3af 8000 	nop.w
	...
 8010ef0:	3fe921fb 	.word	0x3fe921fb
 8010ef4:	7fefffff 	.word	0x7fefffff

08010ef8 <finite>:
 8010ef8:	b082      	sub	sp, #8
 8010efa:	ed8d 0b00 	vstr	d0, [sp]
 8010efe:	9801      	ldr	r0, [sp, #4]
 8010f00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010f04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f08:	0fc0      	lsrs	r0, r0, #31
 8010f0a:	b002      	add	sp, #8
 8010f0c:	4770      	bx	lr
	...

08010f10 <__ieee754_sqrt>:
 8010f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	ec55 4b10 	vmov	r4, r5, d0
 8010f18:	4e67      	ldr	r6, [pc, #412]	; (80110b8 <__ieee754_sqrt+0x1a8>)
 8010f1a:	43ae      	bics	r6, r5
 8010f1c:	ee10 0a10 	vmov	r0, s0
 8010f20:	ee10 2a10 	vmov	r2, s0
 8010f24:	4629      	mov	r1, r5
 8010f26:	462b      	mov	r3, r5
 8010f28:	d10d      	bne.n	8010f46 <__ieee754_sqrt+0x36>
 8010f2a:	f7ef fb65 	bl	80005f8 <__aeabi_dmul>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4620      	mov	r0, r4
 8010f34:	4629      	mov	r1, r5
 8010f36:	f7ef f9a9 	bl	800028c <__adddf3>
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	ec45 4b10 	vmov	d0, r4, r5
 8010f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f46:	2d00      	cmp	r5, #0
 8010f48:	dc0b      	bgt.n	8010f62 <__ieee754_sqrt+0x52>
 8010f4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010f4e:	4326      	orrs	r6, r4
 8010f50:	d0f5      	beq.n	8010f3e <__ieee754_sqrt+0x2e>
 8010f52:	b135      	cbz	r5, 8010f62 <__ieee754_sqrt+0x52>
 8010f54:	f7ef f998 	bl	8000288 <__aeabi_dsub>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	f7ef fc76 	bl	800084c <__aeabi_ddiv>
 8010f60:	e7eb      	b.n	8010f3a <__ieee754_sqrt+0x2a>
 8010f62:	1509      	asrs	r1, r1, #20
 8010f64:	f000 808d 	beq.w	8011082 <__ieee754_sqrt+0x172>
 8010f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f6c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f74:	07c9      	lsls	r1, r1, #31
 8010f76:	bf5c      	itt	pl
 8010f78:	005b      	lslpl	r3, r3, #1
 8010f7a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f82:	bf58      	it	pl
 8010f84:	0052      	lslpl	r2, r2, #1
 8010f86:	2500      	movs	r5, #0
 8010f88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010f8c:	1076      	asrs	r6, r6, #1
 8010f8e:	0052      	lsls	r2, r2, #1
 8010f90:	f04f 0e16 	mov.w	lr, #22
 8010f94:	46ac      	mov	ip, r5
 8010f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010f9a:	eb0c 0001 	add.w	r0, ip, r1
 8010f9e:	4298      	cmp	r0, r3
 8010fa0:	bfde      	ittt	le
 8010fa2:	1a1b      	suble	r3, r3, r0
 8010fa4:	eb00 0c01 	addle.w	ip, r0, r1
 8010fa8:	186d      	addle	r5, r5, r1
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	f1be 0e01 	subs.w	lr, lr, #1
 8010fb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010fb4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010fb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010fbc:	d1ed      	bne.n	8010f9a <__ieee754_sqrt+0x8a>
 8010fbe:	4674      	mov	r4, lr
 8010fc0:	2720      	movs	r7, #32
 8010fc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010fc6:	4563      	cmp	r3, ip
 8010fc8:	eb01 000e 	add.w	r0, r1, lr
 8010fcc:	dc02      	bgt.n	8010fd4 <__ieee754_sqrt+0xc4>
 8010fce:	d113      	bne.n	8010ff8 <__ieee754_sqrt+0xe8>
 8010fd0:	4290      	cmp	r0, r2
 8010fd2:	d811      	bhi.n	8010ff8 <__ieee754_sqrt+0xe8>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	eb00 0e01 	add.w	lr, r0, r1
 8010fda:	da57      	bge.n	801108c <__ieee754_sqrt+0x17c>
 8010fdc:	f1be 0f00 	cmp.w	lr, #0
 8010fe0:	db54      	blt.n	801108c <__ieee754_sqrt+0x17c>
 8010fe2:	f10c 0801 	add.w	r8, ip, #1
 8010fe6:	eba3 030c 	sub.w	r3, r3, ip
 8010fea:	4290      	cmp	r0, r2
 8010fec:	bf88      	it	hi
 8010fee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010ff2:	1a12      	subs	r2, r2, r0
 8010ff4:	440c      	add	r4, r1
 8010ff6:	46c4      	mov	ip, r8
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	3f01      	subs	r7, #1
 8010ffc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011000:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011004:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011008:	d1dd      	bne.n	8010fc6 <__ieee754_sqrt+0xb6>
 801100a:	4313      	orrs	r3, r2
 801100c:	d01b      	beq.n	8011046 <__ieee754_sqrt+0x136>
 801100e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80110bc <__ieee754_sqrt+0x1ac>
 8011012:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80110c0 <__ieee754_sqrt+0x1b0>
 8011016:	e9da 0100 	ldrd	r0, r1, [sl]
 801101a:	e9db 2300 	ldrd	r2, r3, [fp]
 801101e:	f7ef f933 	bl	8000288 <__aeabi_dsub>
 8011022:	e9da 8900 	ldrd	r8, r9, [sl]
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	4640      	mov	r0, r8
 801102c:	4649      	mov	r1, r9
 801102e:	f7ef fd5f 	bl	8000af0 <__aeabi_dcmple>
 8011032:	b140      	cbz	r0, 8011046 <__ieee754_sqrt+0x136>
 8011034:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011038:	e9da 0100 	ldrd	r0, r1, [sl]
 801103c:	e9db 2300 	ldrd	r2, r3, [fp]
 8011040:	d126      	bne.n	8011090 <__ieee754_sqrt+0x180>
 8011042:	3501      	adds	r5, #1
 8011044:	463c      	mov	r4, r7
 8011046:	106a      	asrs	r2, r5, #1
 8011048:	0863      	lsrs	r3, r4, #1
 801104a:	07e9      	lsls	r1, r5, #31
 801104c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011050:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011054:	bf48      	it	mi
 8011056:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801105a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801105e:	461c      	mov	r4, r3
 8011060:	e76d      	b.n	8010f3e <__ieee754_sqrt+0x2e>
 8011062:	0ad3      	lsrs	r3, r2, #11
 8011064:	3815      	subs	r0, #21
 8011066:	0552      	lsls	r2, r2, #21
 8011068:	2b00      	cmp	r3, #0
 801106a:	d0fa      	beq.n	8011062 <__ieee754_sqrt+0x152>
 801106c:	02dc      	lsls	r4, r3, #11
 801106e:	d50a      	bpl.n	8011086 <__ieee754_sqrt+0x176>
 8011070:	f1c1 0420 	rsb	r4, r1, #32
 8011074:	fa22 f404 	lsr.w	r4, r2, r4
 8011078:	1e4d      	subs	r5, r1, #1
 801107a:	408a      	lsls	r2, r1
 801107c:	4323      	orrs	r3, r4
 801107e:	1b41      	subs	r1, r0, r5
 8011080:	e772      	b.n	8010f68 <__ieee754_sqrt+0x58>
 8011082:	4608      	mov	r0, r1
 8011084:	e7f0      	b.n	8011068 <__ieee754_sqrt+0x158>
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	3101      	adds	r1, #1
 801108a:	e7ef      	b.n	801106c <__ieee754_sqrt+0x15c>
 801108c:	46e0      	mov	r8, ip
 801108e:	e7aa      	b.n	8010fe6 <__ieee754_sqrt+0xd6>
 8011090:	f7ef f8fc 	bl	800028c <__adddf3>
 8011094:	e9da 8900 	ldrd	r8, r9, [sl]
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	4640      	mov	r0, r8
 801109e:	4649      	mov	r1, r9
 80110a0:	f7ef fd1c 	bl	8000adc <__aeabi_dcmplt>
 80110a4:	b120      	cbz	r0, 80110b0 <__ieee754_sqrt+0x1a0>
 80110a6:	1ca0      	adds	r0, r4, #2
 80110a8:	bf08      	it	eq
 80110aa:	3501      	addeq	r5, #1
 80110ac:	3402      	adds	r4, #2
 80110ae:	e7ca      	b.n	8011046 <__ieee754_sqrt+0x136>
 80110b0:	3401      	adds	r4, #1
 80110b2:	f024 0401 	bic.w	r4, r4, #1
 80110b6:	e7c6      	b.n	8011046 <__ieee754_sqrt+0x136>
 80110b8:	7ff00000 	.word	0x7ff00000
 80110bc:	200001f0 	.word	0x200001f0
 80110c0:	200001f8 	.word	0x200001f8
 80110c4:	00000000 	.word	0x00000000

080110c8 <__kernel_cos>:
 80110c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110cc:	ec57 6b10 	vmov	r6, r7, d0
 80110d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80110d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80110d8:	ed8d 1b00 	vstr	d1, [sp]
 80110dc:	da07      	bge.n	80110ee <__kernel_cos+0x26>
 80110de:	ee10 0a10 	vmov	r0, s0
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef fd38 	bl	8000b58 <__aeabi_d2iz>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	f000 8088 	beq.w	80111fe <__kernel_cos+0x136>
 80110ee:	4632      	mov	r2, r6
 80110f0:	463b      	mov	r3, r7
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef fa7f 	bl	80005f8 <__aeabi_dmul>
 80110fa:	4b51      	ldr	r3, [pc, #324]	; (8011240 <__kernel_cos+0x178>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	4604      	mov	r4, r0
 8011100:	460d      	mov	r5, r1
 8011102:	f7ef fa79 	bl	80005f8 <__aeabi_dmul>
 8011106:	a340      	add	r3, pc, #256	; (adr r3, 8011208 <__kernel_cos+0x140>)
 8011108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110c:	4682      	mov	sl, r0
 801110e:	468b      	mov	fp, r1
 8011110:	4620      	mov	r0, r4
 8011112:	4629      	mov	r1, r5
 8011114:	f7ef fa70 	bl	80005f8 <__aeabi_dmul>
 8011118:	a33d      	add	r3, pc, #244	; (adr r3, 8011210 <__kernel_cos+0x148>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	f7ef f8b5 	bl	800028c <__adddf3>
 8011122:	4622      	mov	r2, r4
 8011124:	462b      	mov	r3, r5
 8011126:	f7ef fa67 	bl	80005f8 <__aeabi_dmul>
 801112a:	a33b      	add	r3, pc, #236	; (adr r3, 8011218 <__kernel_cos+0x150>)
 801112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011130:	f7ef f8aa 	bl	8000288 <__aeabi_dsub>
 8011134:	4622      	mov	r2, r4
 8011136:	462b      	mov	r3, r5
 8011138:	f7ef fa5e 	bl	80005f8 <__aeabi_dmul>
 801113c:	a338      	add	r3, pc, #224	; (adr r3, 8011220 <__kernel_cos+0x158>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	f7ef f8a3 	bl	800028c <__adddf3>
 8011146:	4622      	mov	r2, r4
 8011148:	462b      	mov	r3, r5
 801114a:	f7ef fa55 	bl	80005f8 <__aeabi_dmul>
 801114e:	a336      	add	r3, pc, #216	; (adr r3, 8011228 <__kernel_cos+0x160>)
 8011150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011154:	f7ef f898 	bl	8000288 <__aeabi_dsub>
 8011158:	4622      	mov	r2, r4
 801115a:	462b      	mov	r3, r5
 801115c:	f7ef fa4c 	bl	80005f8 <__aeabi_dmul>
 8011160:	a333      	add	r3, pc, #204	; (adr r3, 8011230 <__kernel_cos+0x168>)
 8011162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011166:	f7ef f891 	bl	800028c <__adddf3>
 801116a:	4622      	mov	r2, r4
 801116c:	462b      	mov	r3, r5
 801116e:	f7ef fa43 	bl	80005f8 <__aeabi_dmul>
 8011172:	4622      	mov	r2, r4
 8011174:	462b      	mov	r3, r5
 8011176:	f7ef fa3f 	bl	80005f8 <__aeabi_dmul>
 801117a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801117e:	4604      	mov	r4, r0
 8011180:	460d      	mov	r5, r1
 8011182:	4630      	mov	r0, r6
 8011184:	4639      	mov	r1, r7
 8011186:	f7ef fa37 	bl	80005f8 <__aeabi_dmul>
 801118a:	460b      	mov	r3, r1
 801118c:	4602      	mov	r2, r0
 801118e:	4629      	mov	r1, r5
 8011190:	4620      	mov	r0, r4
 8011192:	f7ef f879 	bl	8000288 <__aeabi_dsub>
 8011196:	4b2b      	ldr	r3, [pc, #172]	; (8011244 <__kernel_cos+0x17c>)
 8011198:	4598      	cmp	r8, r3
 801119a:	4606      	mov	r6, r0
 801119c:	460f      	mov	r7, r1
 801119e:	dc10      	bgt.n	80111c2 <__kernel_cos+0xfa>
 80111a0:	4602      	mov	r2, r0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4650      	mov	r0, sl
 80111a6:	4659      	mov	r1, fp
 80111a8:	f7ef f86e 	bl	8000288 <__aeabi_dsub>
 80111ac:	460b      	mov	r3, r1
 80111ae:	4926      	ldr	r1, [pc, #152]	; (8011248 <__kernel_cos+0x180>)
 80111b0:	4602      	mov	r2, r0
 80111b2:	2000      	movs	r0, #0
 80111b4:	f7ef f868 	bl	8000288 <__aeabi_dsub>
 80111b8:	ec41 0b10 	vmov	d0, r0, r1
 80111bc:	b003      	add	sp, #12
 80111be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c2:	4b22      	ldr	r3, [pc, #136]	; (801124c <__kernel_cos+0x184>)
 80111c4:	4920      	ldr	r1, [pc, #128]	; (8011248 <__kernel_cos+0x180>)
 80111c6:	4598      	cmp	r8, r3
 80111c8:	bfcc      	ite	gt
 80111ca:	4d21      	ldrgt	r5, [pc, #132]	; (8011250 <__kernel_cos+0x188>)
 80111cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80111d0:	2400      	movs	r4, #0
 80111d2:	4622      	mov	r2, r4
 80111d4:	462b      	mov	r3, r5
 80111d6:	2000      	movs	r0, #0
 80111d8:	f7ef f856 	bl	8000288 <__aeabi_dsub>
 80111dc:	4622      	mov	r2, r4
 80111de:	4680      	mov	r8, r0
 80111e0:	4689      	mov	r9, r1
 80111e2:	462b      	mov	r3, r5
 80111e4:	4650      	mov	r0, sl
 80111e6:	4659      	mov	r1, fp
 80111e8:	f7ef f84e 	bl	8000288 <__aeabi_dsub>
 80111ec:	4632      	mov	r2, r6
 80111ee:	463b      	mov	r3, r7
 80111f0:	f7ef f84a 	bl	8000288 <__aeabi_dsub>
 80111f4:	4602      	mov	r2, r0
 80111f6:	460b      	mov	r3, r1
 80111f8:	4640      	mov	r0, r8
 80111fa:	4649      	mov	r1, r9
 80111fc:	e7da      	b.n	80111b4 <__kernel_cos+0xec>
 80111fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011238 <__kernel_cos+0x170>
 8011202:	e7db      	b.n	80111bc <__kernel_cos+0xf4>
 8011204:	f3af 8000 	nop.w
 8011208:	be8838d4 	.word	0xbe8838d4
 801120c:	bda8fae9 	.word	0xbda8fae9
 8011210:	bdb4b1c4 	.word	0xbdb4b1c4
 8011214:	3e21ee9e 	.word	0x3e21ee9e
 8011218:	809c52ad 	.word	0x809c52ad
 801121c:	3e927e4f 	.word	0x3e927e4f
 8011220:	19cb1590 	.word	0x19cb1590
 8011224:	3efa01a0 	.word	0x3efa01a0
 8011228:	16c15177 	.word	0x16c15177
 801122c:	3f56c16c 	.word	0x3f56c16c
 8011230:	5555554c 	.word	0x5555554c
 8011234:	3fa55555 	.word	0x3fa55555
 8011238:	00000000 	.word	0x00000000
 801123c:	3ff00000 	.word	0x3ff00000
 8011240:	3fe00000 	.word	0x3fe00000
 8011244:	3fd33332 	.word	0x3fd33332
 8011248:	3ff00000 	.word	0x3ff00000
 801124c:	3fe90000 	.word	0x3fe90000
 8011250:	3fd20000 	.word	0x3fd20000
 8011254:	00000000 	.word	0x00000000

08011258 <__kernel_sin>:
 8011258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125c:	ed2d 8b04 	vpush	{d8-d9}
 8011260:	eeb0 8a41 	vmov.f32	s16, s2
 8011264:	eef0 8a61 	vmov.f32	s17, s3
 8011268:	ec55 4b10 	vmov	r4, r5, d0
 801126c:	b083      	sub	sp, #12
 801126e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011276:	9001      	str	r0, [sp, #4]
 8011278:	da06      	bge.n	8011288 <__kernel_sin+0x30>
 801127a:	ee10 0a10 	vmov	r0, s0
 801127e:	4629      	mov	r1, r5
 8011280:	f7ef fc6a 	bl	8000b58 <__aeabi_d2iz>
 8011284:	2800      	cmp	r0, #0
 8011286:	d051      	beq.n	801132c <__kernel_sin+0xd4>
 8011288:	4622      	mov	r2, r4
 801128a:	462b      	mov	r3, r5
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7ef f9b2 	bl	80005f8 <__aeabi_dmul>
 8011294:	4682      	mov	sl, r0
 8011296:	468b      	mov	fp, r1
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4620      	mov	r0, r4
 801129e:	4629      	mov	r1, r5
 80112a0:	f7ef f9aa 	bl	80005f8 <__aeabi_dmul>
 80112a4:	a341      	add	r3, pc, #260	; (adr r3, 80113ac <__kernel_sin+0x154>)
 80112a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112aa:	4680      	mov	r8, r0
 80112ac:	4689      	mov	r9, r1
 80112ae:	4650      	mov	r0, sl
 80112b0:	4659      	mov	r1, fp
 80112b2:	f7ef f9a1 	bl	80005f8 <__aeabi_dmul>
 80112b6:	a33f      	add	r3, pc, #252	; (adr r3, 80113b4 <__kernel_sin+0x15c>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	f7ee ffe4 	bl	8000288 <__aeabi_dsub>
 80112c0:	4652      	mov	r2, sl
 80112c2:	465b      	mov	r3, fp
 80112c4:	f7ef f998 	bl	80005f8 <__aeabi_dmul>
 80112c8:	a33c      	add	r3, pc, #240	; (adr r3, 80113bc <__kernel_sin+0x164>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	f7ee ffdd 	bl	800028c <__adddf3>
 80112d2:	4652      	mov	r2, sl
 80112d4:	465b      	mov	r3, fp
 80112d6:	f7ef f98f 	bl	80005f8 <__aeabi_dmul>
 80112da:	a33a      	add	r3, pc, #232	; (adr r3, 80113c4 <__kernel_sin+0x16c>)
 80112dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e0:	f7ee ffd2 	bl	8000288 <__aeabi_dsub>
 80112e4:	4652      	mov	r2, sl
 80112e6:	465b      	mov	r3, fp
 80112e8:	f7ef f986 	bl	80005f8 <__aeabi_dmul>
 80112ec:	a337      	add	r3, pc, #220	; (adr r3, 80113cc <__kernel_sin+0x174>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	f7ee ffcb 	bl	800028c <__adddf3>
 80112f6:	9b01      	ldr	r3, [sp, #4]
 80112f8:	4606      	mov	r6, r0
 80112fa:	460f      	mov	r7, r1
 80112fc:	b9eb      	cbnz	r3, 801133a <__kernel_sin+0xe2>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	4650      	mov	r0, sl
 8011304:	4659      	mov	r1, fp
 8011306:	f7ef f977 	bl	80005f8 <__aeabi_dmul>
 801130a:	a325      	add	r3, pc, #148	; (adr r3, 80113a0 <__kernel_sin+0x148>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	f7ee ffba 	bl	8000288 <__aeabi_dsub>
 8011314:	4642      	mov	r2, r8
 8011316:	464b      	mov	r3, r9
 8011318:	f7ef f96e 	bl	80005f8 <__aeabi_dmul>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	4620      	mov	r0, r4
 8011322:	4629      	mov	r1, r5
 8011324:	f7ee ffb2 	bl	800028c <__adddf3>
 8011328:	4604      	mov	r4, r0
 801132a:	460d      	mov	r5, r1
 801132c:	ec45 4b10 	vmov	d0, r4, r5
 8011330:	b003      	add	sp, #12
 8011332:	ecbd 8b04 	vpop	{d8-d9}
 8011336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133a:	4b1b      	ldr	r3, [pc, #108]	; (80113a8 <__kernel_sin+0x150>)
 801133c:	ec51 0b18 	vmov	r0, r1, d8
 8011340:	2200      	movs	r2, #0
 8011342:	f7ef f959 	bl	80005f8 <__aeabi_dmul>
 8011346:	4632      	mov	r2, r6
 8011348:	ec41 0b19 	vmov	d9, r0, r1
 801134c:	463b      	mov	r3, r7
 801134e:	4640      	mov	r0, r8
 8011350:	4649      	mov	r1, r9
 8011352:	f7ef f951 	bl	80005f8 <__aeabi_dmul>
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	ec51 0b19 	vmov	r0, r1, d9
 801135e:	f7ee ff93 	bl	8000288 <__aeabi_dsub>
 8011362:	4652      	mov	r2, sl
 8011364:	465b      	mov	r3, fp
 8011366:	f7ef f947 	bl	80005f8 <__aeabi_dmul>
 801136a:	ec53 2b18 	vmov	r2, r3, d8
 801136e:	f7ee ff8b 	bl	8000288 <__aeabi_dsub>
 8011372:	a30b      	add	r3, pc, #44	; (adr r3, 80113a0 <__kernel_sin+0x148>)
 8011374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011378:	4606      	mov	r6, r0
 801137a:	460f      	mov	r7, r1
 801137c:	4640      	mov	r0, r8
 801137e:	4649      	mov	r1, r9
 8011380:	f7ef f93a 	bl	80005f8 <__aeabi_dmul>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	4630      	mov	r0, r6
 801138a:	4639      	mov	r1, r7
 801138c:	f7ee ff7e 	bl	800028c <__adddf3>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	4620      	mov	r0, r4
 8011396:	4629      	mov	r1, r5
 8011398:	f7ee ff76 	bl	8000288 <__aeabi_dsub>
 801139c:	e7c4      	b.n	8011328 <__kernel_sin+0xd0>
 801139e:	bf00      	nop
 80113a0:	55555549 	.word	0x55555549
 80113a4:	3fc55555 	.word	0x3fc55555
 80113a8:	3fe00000 	.word	0x3fe00000
 80113ac:	5acfd57c 	.word	0x5acfd57c
 80113b0:	3de5d93a 	.word	0x3de5d93a
 80113b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80113b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80113bc:	57b1fe7d 	.word	0x57b1fe7d
 80113c0:	3ec71de3 	.word	0x3ec71de3
 80113c4:	19c161d5 	.word	0x19c161d5
 80113c8:	3f2a01a0 	.word	0x3f2a01a0
 80113cc:	1110f8a6 	.word	0x1110f8a6
 80113d0:	3f811111 	.word	0x3f811111
 80113d4:	00000000 	.word	0x00000000

080113d8 <__ieee754_atan2>:
 80113d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113dc:	ec57 6b11 	vmov	r6, r7, d1
 80113e0:	4273      	negs	r3, r6
 80113e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011560 <__ieee754_atan2+0x188>
 80113e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80113ea:	4333      	orrs	r3, r6
 80113ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80113f0:	4543      	cmp	r3, r8
 80113f2:	ec51 0b10 	vmov	r0, r1, d0
 80113f6:	ee11 5a10 	vmov	r5, s2
 80113fa:	d80a      	bhi.n	8011412 <__ieee754_atan2+0x3a>
 80113fc:	4244      	negs	r4, r0
 80113fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011402:	4304      	orrs	r4, r0
 8011404:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011408:	4544      	cmp	r4, r8
 801140a:	ee10 9a10 	vmov	r9, s0
 801140e:	468e      	mov	lr, r1
 8011410:	d907      	bls.n	8011422 <__ieee754_atan2+0x4a>
 8011412:	4632      	mov	r2, r6
 8011414:	463b      	mov	r3, r7
 8011416:	f7ee ff39 	bl	800028c <__adddf3>
 801141a:	ec41 0b10 	vmov	d0, r0, r1
 801141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011422:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011426:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801142a:	4334      	orrs	r4, r6
 801142c:	d103      	bne.n	8011436 <__ieee754_atan2+0x5e>
 801142e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011432:	f000 bfcd 	b.w	80123d0 <atan>
 8011436:	17bc      	asrs	r4, r7, #30
 8011438:	f004 0402 	and.w	r4, r4, #2
 801143c:	ea53 0909 	orrs.w	r9, r3, r9
 8011440:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011444:	d107      	bne.n	8011456 <__ieee754_atan2+0x7e>
 8011446:	2c02      	cmp	r4, #2
 8011448:	d05f      	beq.n	801150a <__ieee754_atan2+0x132>
 801144a:	2c03      	cmp	r4, #3
 801144c:	d1e5      	bne.n	801141a <__ieee754_atan2+0x42>
 801144e:	a140      	add	r1, pc, #256	; (adr r1, 8011550 <__ieee754_atan2+0x178>)
 8011450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011454:	e7e1      	b.n	801141a <__ieee754_atan2+0x42>
 8011456:	4315      	orrs	r5, r2
 8011458:	d106      	bne.n	8011468 <__ieee754_atan2+0x90>
 801145a:	f1be 0f00 	cmp.w	lr, #0
 801145e:	da5f      	bge.n	8011520 <__ieee754_atan2+0x148>
 8011460:	a13d      	add	r1, pc, #244	; (adr r1, 8011558 <__ieee754_atan2+0x180>)
 8011462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011466:	e7d8      	b.n	801141a <__ieee754_atan2+0x42>
 8011468:	4542      	cmp	r2, r8
 801146a:	d10f      	bne.n	801148c <__ieee754_atan2+0xb4>
 801146c:	4293      	cmp	r3, r2
 801146e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011472:	d107      	bne.n	8011484 <__ieee754_atan2+0xac>
 8011474:	2c02      	cmp	r4, #2
 8011476:	d84c      	bhi.n	8011512 <__ieee754_atan2+0x13a>
 8011478:	4b33      	ldr	r3, [pc, #204]	; (8011548 <__ieee754_atan2+0x170>)
 801147a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801147e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011482:	e7ca      	b.n	801141a <__ieee754_atan2+0x42>
 8011484:	2c02      	cmp	r4, #2
 8011486:	d848      	bhi.n	801151a <__ieee754_atan2+0x142>
 8011488:	4b30      	ldr	r3, [pc, #192]	; (801154c <__ieee754_atan2+0x174>)
 801148a:	e7f6      	b.n	801147a <__ieee754_atan2+0xa2>
 801148c:	4543      	cmp	r3, r8
 801148e:	d0e4      	beq.n	801145a <__ieee754_atan2+0x82>
 8011490:	1a9b      	subs	r3, r3, r2
 8011492:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011496:	ea4f 5223 	mov.w	r2, r3, asr #20
 801149a:	da1e      	bge.n	80114da <__ieee754_atan2+0x102>
 801149c:	2f00      	cmp	r7, #0
 801149e:	da01      	bge.n	80114a4 <__ieee754_atan2+0xcc>
 80114a0:	323c      	adds	r2, #60	; 0x3c
 80114a2:	db1e      	blt.n	80114e2 <__ieee754_atan2+0x10a>
 80114a4:	4632      	mov	r2, r6
 80114a6:	463b      	mov	r3, r7
 80114a8:	f7ef f9d0 	bl	800084c <__aeabi_ddiv>
 80114ac:	ec41 0b10 	vmov	d0, r0, r1
 80114b0:	f001 f92e 	bl	8012710 <fabs>
 80114b4:	f000 ff8c 	bl	80123d0 <atan>
 80114b8:	ec51 0b10 	vmov	r0, r1, d0
 80114bc:	2c01      	cmp	r4, #1
 80114be:	d013      	beq.n	80114e8 <__ieee754_atan2+0x110>
 80114c0:	2c02      	cmp	r4, #2
 80114c2:	d015      	beq.n	80114f0 <__ieee754_atan2+0x118>
 80114c4:	2c00      	cmp	r4, #0
 80114c6:	d0a8      	beq.n	801141a <__ieee754_atan2+0x42>
 80114c8:	a317      	add	r3, pc, #92	; (adr r3, 8011528 <__ieee754_atan2+0x150>)
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	f7ee fedb 	bl	8000288 <__aeabi_dsub>
 80114d2:	a317      	add	r3, pc, #92	; (adr r3, 8011530 <__ieee754_atan2+0x158>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	e014      	b.n	8011504 <__ieee754_atan2+0x12c>
 80114da:	a117      	add	r1, pc, #92	; (adr r1, 8011538 <__ieee754_atan2+0x160>)
 80114dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114e0:	e7ec      	b.n	80114bc <__ieee754_atan2+0xe4>
 80114e2:	2000      	movs	r0, #0
 80114e4:	2100      	movs	r1, #0
 80114e6:	e7e9      	b.n	80114bc <__ieee754_atan2+0xe4>
 80114e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114ec:	4619      	mov	r1, r3
 80114ee:	e794      	b.n	801141a <__ieee754_atan2+0x42>
 80114f0:	a30d      	add	r3, pc, #52	; (adr r3, 8011528 <__ieee754_atan2+0x150>)
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	f7ee fec7 	bl	8000288 <__aeabi_dsub>
 80114fa:	4602      	mov	r2, r0
 80114fc:	460b      	mov	r3, r1
 80114fe:	a10c      	add	r1, pc, #48	; (adr r1, 8011530 <__ieee754_atan2+0x158>)
 8011500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011504:	f7ee fec0 	bl	8000288 <__aeabi_dsub>
 8011508:	e787      	b.n	801141a <__ieee754_atan2+0x42>
 801150a:	a109      	add	r1, pc, #36	; (adr r1, 8011530 <__ieee754_atan2+0x158>)
 801150c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011510:	e783      	b.n	801141a <__ieee754_atan2+0x42>
 8011512:	a10b      	add	r1, pc, #44	; (adr r1, 8011540 <__ieee754_atan2+0x168>)
 8011514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011518:	e77f      	b.n	801141a <__ieee754_atan2+0x42>
 801151a:	2000      	movs	r0, #0
 801151c:	2100      	movs	r1, #0
 801151e:	e77c      	b.n	801141a <__ieee754_atan2+0x42>
 8011520:	a105      	add	r1, pc, #20	; (adr r1, 8011538 <__ieee754_atan2+0x160>)
 8011522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011526:	e778      	b.n	801141a <__ieee754_atan2+0x42>
 8011528:	33145c07 	.word	0x33145c07
 801152c:	3ca1a626 	.word	0x3ca1a626
 8011530:	54442d18 	.word	0x54442d18
 8011534:	400921fb 	.word	0x400921fb
 8011538:	54442d18 	.word	0x54442d18
 801153c:	3ff921fb 	.word	0x3ff921fb
 8011540:	54442d18 	.word	0x54442d18
 8011544:	3fe921fb 	.word	0x3fe921fb
 8011548:	08013528 	.word	0x08013528
 801154c:	08013540 	.word	0x08013540
 8011550:	54442d18 	.word	0x54442d18
 8011554:	c00921fb 	.word	0xc00921fb
 8011558:	54442d18 	.word	0x54442d18
 801155c:	bff921fb 	.word	0xbff921fb
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	00000000 	.word	0x00000000

08011568 <__ieee754_pow>:
 8011568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156c:	ed2d 8b06 	vpush	{d8-d10}
 8011570:	b089      	sub	sp, #36	; 0x24
 8011572:	ed8d 1b00 	vstr	d1, [sp]
 8011576:	e9dd 2900 	ldrd	r2, r9, [sp]
 801157a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801157e:	ea58 0102 	orrs.w	r1, r8, r2
 8011582:	ec57 6b10 	vmov	r6, r7, d0
 8011586:	d115      	bne.n	80115b4 <__ieee754_pow+0x4c>
 8011588:	19b3      	adds	r3, r6, r6
 801158a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801158e:	4152      	adcs	r2, r2
 8011590:	4299      	cmp	r1, r3
 8011592:	4b89      	ldr	r3, [pc, #548]	; (80117b8 <__ieee754_pow+0x250>)
 8011594:	4193      	sbcs	r3, r2
 8011596:	f080 84d1 	bcs.w	8011f3c <__ieee754_pow+0x9d4>
 801159a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801159e:	4630      	mov	r0, r6
 80115a0:	4639      	mov	r1, r7
 80115a2:	f7ee fe73 	bl	800028c <__adddf3>
 80115a6:	ec41 0b10 	vmov	d0, r0, r1
 80115aa:	b009      	add	sp, #36	; 0x24
 80115ac:	ecbd 8b06 	vpop	{d8-d10}
 80115b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b4:	4b81      	ldr	r3, [pc, #516]	; (80117bc <__ieee754_pow+0x254>)
 80115b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80115ba:	429c      	cmp	r4, r3
 80115bc:	ee10 aa10 	vmov	sl, s0
 80115c0:	463d      	mov	r5, r7
 80115c2:	dc06      	bgt.n	80115d2 <__ieee754_pow+0x6a>
 80115c4:	d101      	bne.n	80115ca <__ieee754_pow+0x62>
 80115c6:	2e00      	cmp	r6, #0
 80115c8:	d1e7      	bne.n	801159a <__ieee754_pow+0x32>
 80115ca:	4598      	cmp	r8, r3
 80115cc:	dc01      	bgt.n	80115d2 <__ieee754_pow+0x6a>
 80115ce:	d10f      	bne.n	80115f0 <__ieee754_pow+0x88>
 80115d0:	b172      	cbz	r2, 80115f0 <__ieee754_pow+0x88>
 80115d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80115d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80115da:	ea55 050a 	orrs.w	r5, r5, sl
 80115de:	d1dc      	bne.n	801159a <__ieee754_pow+0x32>
 80115e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80115e4:	18db      	adds	r3, r3, r3
 80115e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80115ea:	4152      	adcs	r2, r2
 80115ec:	429d      	cmp	r5, r3
 80115ee:	e7d0      	b.n	8011592 <__ieee754_pow+0x2a>
 80115f0:	2d00      	cmp	r5, #0
 80115f2:	da3b      	bge.n	801166c <__ieee754_pow+0x104>
 80115f4:	4b72      	ldr	r3, [pc, #456]	; (80117c0 <__ieee754_pow+0x258>)
 80115f6:	4598      	cmp	r8, r3
 80115f8:	dc51      	bgt.n	801169e <__ieee754_pow+0x136>
 80115fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80115fe:	4598      	cmp	r8, r3
 8011600:	f340 84ab 	ble.w	8011f5a <__ieee754_pow+0x9f2>
 8011604:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801160c:	2b14      	cmp	r3, #20
 801160e:	dd0f      	ble.n	8011630 <__ieee754_pow+0xc8>
 8011610:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011614:	fa22 f103 	lsr.w	r1, r2, r3
 8011618:	fa01 f303 	lsl.w	r3, r1, r3
 801161c:	4293      	cmp	r3, r2
 801161e:	f040 849c 	bne.w	8011f5a <__ieee754_pow+0x9f2>
 8011622:	f001 0101 	and.w	r1, r1, #1
 8011626:	f1c1 0302 	rsb	r3, r1, #2
 801162a:	9304      	str	r3, [sp, #16]
 801162c:	b182      	cbz	r2, 8011650 <__ieee754_pow+0xe8>
 801162e:	e05f      	b.n	80116f0 <__ieee754_pow+0x188>
 8011630:	2a00      	cmp	r2, #0
 8011632:	d15b      	bne.n	80116ec <__ieee754_pow+0x184>
 8011634:	f1c3 0314 	rsb	r3, r3, #20
 8011638:	fa48 f103 	asr.w	r1, r8, r3
 801163c:	fa01 f303 	lsl.w	r3, r1, r3
 8011640:	4543      	cmp	r3, r8
 8011642:	f040 8487 	bne.w	8011f54 <__ieee754_pow+0x9ec>
 8011646:	f001 0101 	and.w	r1, r1, #1
 801164a:	f1c1 0302 	rsb	r3, r1, #2
 801164e:	9304      	str	r3, [sp, #16]
 8011650:	4b5c      	ldr	r3, [pc, #368]	; (80117c4 <__ieee754_pow+0x25c>)
 8011652:	4598      	cmp	r8, r3
 8011654:	d132      	bne.n	80116bc <__ieee754_pow+0x154>
 8011656:	f1b9 0f00 	cmp.w	r9, #0
 801165a:	f280 8477 	bge.w	8011f4c <__ieee754_pow+0x9e4>
 801165e:	4959      	ldr	r1, [pc, #356]	; (80117c4 <__ieee754_pow+0x25c>)
 8011660:	4632      	mov	r2, r6
 8011662:	463b      	mov	r3, r7
 8011664:	2000      	movs	r0, #0
 8011666:	f7ef f8f1 	bl	800084c <__aeabi_ddiv>
 801166a:	e79c      	b.n	80115a6 <__ieee754_pow+0x3e>
 801166c:	2300      	movs	r3, #0
 801166e:	9304      	str	r3, [sp, #16]
 8011670:	2a00      	cmp	r2, #0
 8011672:	d13d      	bne.n	80116f0 <__ieee754_pow+0x188>
 8011674:	4b51      	ldr	r3, [pc, #324]	; (80117bc <__ieee754_pow+0x254>)
 8011676:	4598      	cmp	r8, r3
 8011678:	d1ea      	bne.n	8011650 <__ieee754_pow+0xe8>
 801167a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801167e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011682:	ea53 030a 	orrs.w	r3, r3, sl
 8011686:	f000 8459 	beq.w	8011f3c <__ieee754_pow+0x9d4>
 801168a:	4b4f      	ldr	r3, [pc, #316]	; (80117c8 <__ieee754_pow+0x260>)
 801168c:	429c      	cmp	r4, r3
 801168e:	dd08      	ble.n	80116a2 <__ieee754_pow+0x13a>
 8011690:	f1b9 0f00 	cmp.w	r9, #0
 8011694:	f2c0 8456 	blt.w	8011f44 <__ieee754_pow+0x9dc>
 8011698:	e9dd 0100 	ldrd	r0, r1, [sp]
 801169c:	e783      	b.n	80115a6 <__ieee754_pow+0x3e>
 801169e:	2302      	movs	r3, #2
 80116a0:	e7e5      	b.n	801166e <__ieee754_pow+0x106>
 80116a2:	f1b9 0f00 	cmp.w	r9, #0
 80116a6:	f04f 0000 	mov.w	r0, #0
 80116aa:	f04f 0100 	mov.w	r1, #0
 80116ae:	f6bf af7a 	bge.w	80115a6 <__ieee754_pow+0x3e>
 80116b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80116b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116ba:	e774      	b.n	80115a6 <__ieee754_pow+0x3e>
 80116bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80116c0:	d106      	bne.n	80116d0 <__ieee754_pow+0x168>
 80116c2:	4632      	mov	r2, r6
 80116c4:	463b      	mov	r3, r7
 80116c6:	4630      	mov	r0, r6
 80116c8:	4639      	mov	r1, r7
 80116ca:	f7ee ff95 	bl	80005f8 <__aeabi_dmul>
 80116ce:	e76a      	b.n	80115a6 <__ieee754_pow+0x3e>
 80116d0:	4b3e      	ldr	r3, [pc, #248]	; (80117cc <__ieee754_pow+0x264>)
 80116d2:	4599      	cmp	r9, r3
 80116d4:	d10c      	bne.n	80116f0 <__ieee754_pow+0x188>
 80116d6:	2d00      	cmp	r5, #0
 80116d8:	db0a      	blt.n	80116f0 <__ieee754_pow+0x188>
 80116da:	ec47 6b10 	vmov	d0, r6, r7
 80116de:	b009      	add	sp, #36	; 0x24
 80116e0:	ecbd 8b06 	vpop	{d8-d10}
 80116e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e8:	f7ff bc12 	b.w	8010f10 <__ieee754_sqrt>
 80116ec:	2300      	movs	r3, #0
 80116ee:	9304      	str	r3, [sp, #16]
 80116f0:	ec47 6b10 	vmov	d0, r6, r7
 80116f4:	f001 f80c 	bl	8012710 <fabs>
 80116f8:	ec51 0b10 	vmov	r0, r1, d0
 80116fc:	f1ba 0f00 	cmp.w	sl, #0
 8011700:	d129      	bne.n	8011756 <__ieee754_pow+0x1ee>
 8011702:	b124      	cbz	r4, 801170e <__ieee754_pow+0x1a6>
 8011704:	4b2f      	ldr	r3, [pc, #188]	; (80117c4 <__ieee754_pow+0x25c>)
 8011706:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801170a:	429a      	cmp	r2, r3
 801170c:	d123      	bne.n	8011756 <__ieee754_pow+0x1ee>
 801170e:	f1b9 0f00 	cmp.w	r9, #0
 8011712:	da05      	bge.n	8011720 <__ieee754_pow+0x1b8>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	2000      	movs	r0, #0
 801171a:	492a      	ldr	r1, [pc, #168]	; (80117c4 <__ieee754_pow+0x25c>)
 801171c:	f7ef f896 	bl	800084c <__aeabi_ddiv>
 8011720:	2d00      	cmp	r5, #0
 8011722:	f6bf af40 	bge.w	80115a6 <__ieee754_pow+0x3e>
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801172c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011730:	431c      	orrs	r4, r3
 8011732:	d108      	bne.n	8011746 <__ieee754_pow+0x1de>
 8011734:	4602      	mov	r2, r0
 8011736:	460b      	mov	r3, r1
 8011738:	4610      	mov	r0, r2
 801173a:	4619      	mov	r1, r3
 801173c:	f7ee fda4 	bl	8000288 <__aeabi_dsub>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	e78f      	b.n	8011666 <__ieee754_pow+0xfe>
 8011746:	9b04      	ldr	r3, [sp, #16]
 8011748:	2b01      	cmp	r3, #1
 801174a:	f47f af2c 	bne.w	80115a6 <__ieee754_pow+0x3e>
 801174e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011752:	4619      	mov	r1, r3
 8011754:	e727      	b.n	80115a6 <__ieee754_pow+0x3e>
 8011756:	0feb      	lsrs	r3, r5, #31
 8011758:	3b01      	subs	r3, #1
 801175a:	9306      	str	r3, [sp, #24]
 801175c:	9a06      	ldr	r2, [sp, #24]
 801175e:	9b04      	ldr	r3, [sp, #16]
 8011760:	4313      	orrs	r3, r2
 8011762:	d102      	bne.n	801176a <__ieee754_pow+0x202>
 8011764:	4632      	mov	r2, r6
 8011766:	463b      	mov	r3, r7
 8011768:	e7e6      	b.n	8011738 <__ieee754_pow+0x1d0>
 801176a:	4b19      	ldr	r3, [pc, #100]	; (80117d0 <__ieee754_pow+0x268>)
 801176c:	4598      	cmp	r8, r3
 801176e:	f340 80fb 	ble.w	8011968 <__ieee754_pow+0x400>
 8011772:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011776:	4598      	cmp	r8, r3
 8011778:	4b13      	ldr	r3, [pc, #76]	; (80117c8 <__ieee754_pow+0x260>)
 801177a:	dd0c      	ble.n	8011796 <__ieee754_pow+0x22e>
 801177c:	429c      	cmp	r4, r3
 801177e:	dc0f      	bgt.n	80117a0 <__ieee754_pow+0x238>
 8011780:	f1b9 0f00 	cmp.w	r9, #0
 8011784:	da0f      	bge.n	80117a6 <__ieee754_pow+0x23e>
 8011786:	2000      	movs	r0, #0
 8011788:	b009      	add	sp, #36	; 0x24
 801178a:	ecbd 8b06 	vpop	{d8-d10}
 801178e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011792:	f001 b86e 	b.w	8012872 <__math_oflow>
 8011796:	429c      	cmp	r4, r3
 8011798:	dbf2      	blt.n	8011780 <__ieee754_pow+0x218>
 801179a:	4b0a      	ldr	r3, [pc, #40]	; (80117c4 <__ieee754_pow+0x25c>)
 801179c:	429c      	cmp	r4, r3
 801179e:	dd19      	ble.n	80117d4 <__ieee754_pow+0x26c>
 80117a0:	f1b9 0f00 	cmp.w	r9, #0
 80117a4:	dcef      	bgt.n	8011786 <__ieee754_pow+0x21e>
 80117a6:	2000      	movs	r0, #0
 80117a8:	b009      	add	sp, #36	; 0x24
 80117aa:	ecbd 8b06 	vpop	{d8-d10}
 80117ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b2:	f001 b855 	b.w	8012860 <__math_uflow>
 80117b6:	bf00      	nop
 80117b8:	fff00000 	.word	0xfff00000
 80117bc:	7ff00000 	.word	0x7ff00000
 80117c0:	433fffff 	.word	0x433fffff
 80117c4:	3ff00000 	.word	0x3ff00000
 80117c8:	3fefffff 	.word	0x3fefffff
 80117cc:	3fe00000 	.word	0x3fe00000
 80117d0:	41e00000 	.word	0x41e00000
 80117d4:	4b60      	ldr	r3, [pc, #384]	; (8011958 <__ieee754_pow+0x3f0>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	f7ee fd56 	bl	8000288 <__aeabi_dsub>
 80117dc:	a354      	add	r3, pc, #336	; (adr r3, 8011930 <__ieee754_pow+0x3c8>)
 80117de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e2:	4604      	mov	r4, r0
 80117e4:	460d      	mov	r5, r1
 80117e6:	f7ee ff07 	bl	80005f8 <__aeabi_dmul>
 80117ea:	a353      	add	r3, pc, #332	; (adr r3, 8011938 <__ieee754_pow+0x3d0>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	4606      	mov	r6, r0
 80117f2:	460f      	mov	r7, r1
 80117f4:	4620      	mov	r0, r4
 80117f6:	4629      	mov	r1, r5
 80117f8:	f7ee fefe 	bl	80005f8 <__aeabi_dmul>
 80117fc:	4b57      	ldr	r3, [pc, #348]	; (801195c <__ieee754_pow+0x3f4>)
 80117fe:	4682      	mov	sl, r0
 8011800:	468b      	mov	fp, r1
 8011802:	2200      	movs	r2, #0
 8011804:	4620      	mov	r0, r4
 8011806:	4629      	mov	r1, r5
 8011808:	f7ee fef6 	bl	80005f8 <__aeabi_dmul>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	a14b      	add	r1, pc, #300	; (adr r1, 8011940 <__ieee754_pow+0x3d8>)
 8011812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011816:	f7ee fd37 	bl	8000288 <__aeabi_dsub>
 801181a:	4622      	mov	r2, r4
 801181c:	462b      	mov	r3, r5
 801181e:	f7ee feeb 	bl	80005f8 <__aeabi_dmul>
 8011822:	4602      	mov	r2, r0
 8011824:	460b      	mov	r3, r1
 8011826:	2000      	movs	r0, #0
 8011828:	494d      	ldr	r1, [pc, #308]	; (8011960 <__ieee754_pow+0x3f8>)
 801182a:	f7ee fd2d 	bl	8000288 <__aeabi_dsub>
 801182e:	4622      	mov	r2, r4
 8011830:	4680      	mov	r8, r0
 8011832:	4689      	mov	r9, r1
 8011834:	462b      	mov	r3, r5
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	f7ee fedd 	bl	80005f8 <__aeabi_dmul>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	4640      	mov	r0, r8
 8011844:	4649      	mov	r1, r9
 8011846:	f7ee fed7 	bl	80005f8 <__aeabi_dmul>
 801184a:	a33f      	add	r3, pc, #252	; (adr r3, 8011948 <__ieee754_pow+0x3e0>)
 801184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011850:	f7ee fed2 	bl	80005f8 <__aeabi_dmul>
 8011854:	4602      	mov	r2, r0
 8011856:	460b      	mov	r3, r1
 8011858:	4650      	mov	r0, sl
 801185a:	4659      	mov	r1, fp
 801185c:	f7ee fd14 	bl	8000288 <__aeabi_dsub>
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	4680      	mov	r8, r0
 8011866:	4689      	mov	r9, r1
 8011868:	4630      	mov	r0, r6
 801186a:	4639      	mov	r1, r7
 801186c:	f7ee fd0e 	bl	800028c <__adddf3>
 8011870:	2000      	movs	r0, #0
 8011872:	4632      	mov	r2, r6
 8011874:	463b      	mov	r3, r7
 8011876:	4604      	mov	r4, r0
 8011878:	460d      	mov	r5, r1
 801187a:	f7ee fd05 	bl	8000288 <__aeabi_dsub>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	4640      	mov	r0, r8
 8011884:	4649      	mov	r1, r9
 8011886:	f7ee fcff 	bl	8000288 <__aeabi_dsub>
 801188a:	9b04      	ldr	r3, [sp, #16]
 801188c:	9a06      	ldr	r2, [sp, #24]
 801188e:	3b01      	subs	r3, #1
 8011890:	4313      	orrs	r3, r2
 8011892:	4682      	mov	sl, r0
 8011894:	468b      	mov	fp, r1
 8011896:	f040 81e7 	bne.w	8011c68 <__ieee754_pow+0x700>
 801189a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011950 <__ieee754_pow+0x3e8>
 801189e:	eeb0 8a47 	vmov.f32	s16, s14
 80118a2:	eef0 8a67 	vmov.f32	s17, s15
 80118a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80118aa:	2600      	movs	r6, #0
 80118ac:	4632      	mov	r2, r6
 80118ae:	463b      	mov	r3, r7
 80118b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118b4:	f7ee fce8 	bl	8000288 <__aeabi_dsub>
 80118b8:	4622      	mov	r2, r4
 80118ba:	462b      	mov	r3, r5
 80118bc:	f7ee fe9c 	bl	80005f8 <__aeabi_dmul>
 80118c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118c4:	4680      	mov	r8, r0
 80118c6:	4689      	mov	r9, r1
 80118c8:	4650      	mov	r0, sl
 80118ca:	4659      	mov	r1, fp
 80118cc:	f7ee fe94 	bl	80005f8 <__aeabi_dmul>
 80118d0:	4602      	mov	r2, r0
 80118d2:	460b      	mov	r3, r1
 80118d4:	4640      	mov	r0, r8
 80118d6:	4649      	mov	r1, r9
 80118d8:	f7ee fcd8 	bl	800028c <__adddf3>
 80118dc:	4632      	mov	r2, r6
 80118de:	463b      	mov	r3, r7
 80118e0:	4680      	mov	r8, r0
 80118e2:	4689      	mov	r9, r1
 80118e4:	4620      	mov	r0, r4
 80118e6:	4629      	mov	r1, r5
 80118e8:	f7ee fe86 	bl	80005f8 <__aeabi_dmul>
 80118ec:	460b      	mov	r3, r1
 80118ee:	4604      	mov	r4, r0
 80118f0:	460d      	mov	r5, r1
 80118f2:	4602      	mov	r2, r0
 80118f4:	4649      	mov	r1, r9
 80118f6:	4640      	mov	r0, r8
 80118f8:	f7ee fcc8 	bl	800028c <__adddf3>
 80118fc:	4b19      	ldr	r3, [pc, #100]	; (8011964 <__ieee754_pow+0x3fc>)
 80118fe:	4299      	cmp	r1, r3
 8011900:	ec45 4b19 	vmov	d9, r4, r5
 8011904:	4606      	mov	r6, r0
 8011906:	460f      	mov	r7, r1
 8011908:	468b      	mov	fp, r1
 801190a:	f340 82f0 	ble.w	8011eee <__ieee754_pow+0x986>
 801190e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011916:	4303      	orrs	r3, r0
 8011918:	f000 81e4 	beq.w	8011ce4 <__ieee754_pow+0x77c>
 801191c:	ec51 0b18 	vmov	r0, r1, d8
 8011920:	2200      	movs	r2, #0
 8011922:	2300      	movs	r3, #0
 8011924:	f7ef f8da 	bl	8000adc <__aeabi_dcmplt>
 8011928:	3800      	subs	r0, #0
 801192a:	bf18      	it	ne
 801192c:	2001      	movne	r0, #1
 801192e:	e72b      	b.n	8011788 <__ieee754_pow+0x220>
 8011930:	60000000 	.word	0x60000000
 8011934:	3ff71547 	.word	0x3ff71547
 8011938:	f85ddf44 	.word	0xf85ddf44
 801193c:	3e54ae0b 	.word	0x3e54ae0b
 8011940:	55555555 	.word	0x55555555
 8011944:	3fd55555 	.word	0x3fd55555
 8011948:	652b82fe 	.word	0x652b82fe
 801194c:	3ff71547 	.word	0x3ff71547
 8011950:	00000000 	.word	0x00000000
 8011954:	bff00000 	.word	0xbff00000
 8011958:	3ff00000 	.word	0x3ff00000
 801195c:	3fd00000 	.word	0x3fd00000
 8011960:	3fe00000 	.word	0x3fe00000
 8011964:	408fffff 	.word	0x408fffff
 8011968:	4bd5      	ldr	r3, [pc, #852]	; (8011cc0 <__ieee754_pow+0x758>)
 801196a:	402b      	ands	r3, r5
 801196c:	2200      	movs	r2, #0
 801196e:	b92b      	cbnz	r3, 801197c <__ieee754_pow+0x414>
 8011970:	4bd4      	ldr	r3, [pc, #848]	; (8011cc4 <__ieee754_pow+0x75c>)
 8011972:	f7ee fe41 	bl	80005f8 <__aeabi_dmul>
 8011976:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801197a:	460c      	mov	r4, r1
 801197c:	1523      	asrs	r3, r4, #20
 801197e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011982:	4413      	add	r3, r2
 8011984:	9305      	str	r3, [sp, #20]
 8011986:	4bd0      	ldr	r3, [pc, #832]	; (8011cc8 <__ieee754_pow+0x760>)
 8011988:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801198c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011990:	429c      	cmp	r4, r3
 8011992:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011996:	dd08      	ble.n	80119aa <__ieee754_pow+0x442>
 8011998:	4bcc      	ldr	r3, [pc, #816]	; (8011ccc <__ieee754_pow+0x764>)
 801199a:	429c      	cmp	r4, r3
 801199c:	f340 8162 	ble.w	8011c64 <__ieee754_pow+0x6fc>
 80119a0:	9b05      	ldr	r3, [sp, #20]
 80119a2:	3301      	adds	r3, #1
 80119a4:	9305      	str	r3, [sp, #20]
 80119a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80119aa:	2400      	movs	r4, #0
 80119ac:	00e3      	lsls	r3, r4, #3
 80119ae:	9307      	str	r3, [sp, #28]
 80119b0:	4bc7      	ldr	r3, [pc, #796]	; (8011cd0 <__ieee754_pow+0x768>)
 80119b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119b6:	ed93 7b00 	vldr	d7, [r3]
 80119ba:	4629      	mov	r1, r5
 80119bc:	ec53 2b17 	vmov	r2, r3, d7
 80119c0:	eeb0 9a47 	vmov.f32	s18, s14
 80119c4:	eef0 9a67 	vmov.f32	s19, s15
 80119c8:	4682      	mov	sl, r0
 80119ca:	f7ee fc5d 	bl	8000288 <__aeabi_dsub>
 80119ce:	4652      	mov	r2, sl
 80119d0:	4606      	mov	r6, r0
 80119d2:	460f      	mov	r7, r1
 80119d4:	462b      	mov	r3, r5
 80119d6:	ec51 0b19 	vmov	r0, r1, d9
 80119da:	f7ee fc57 	bl	800028c <__adddf3>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	2000      	movs	r0, #0
 80119e4:	49bb      	ldr	r1, [pc, #748]	; (8011cd4 <__ieee754_pow+0x76c>)
 80119e6:	f7ee ff31 	bl	800084c <__aeabi_ddiv>
 80119ea:	ec41 0b1a 	vmov	d10, r0, r1
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4630      	mov	r0, r6
 80119f4:	4639      	mov	r1, r7
 80119f6:	f7ee fdff 	bl	80005f8 <__aeabi_dmul>
 80119fa:	2300      	movs	r3, #0
 80119fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a00:	9302      	str	r3, [sp, #8]
 8011a02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011a06:	46ab      	mov	fp, r5
 8011a08:	106d      	asrs	r5, r5, #1
 8011a0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011a0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011a12:	ec41 0b18 	vmov	d8, r0, r1
 8011a16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	4640      	mov	r0, r8
 8011a1e:	4649      	mov	r1, r9
 8011a20:	4614      	mov	r4, r2
 8011a22:	461d      	mov	r5, r3
 8011a24:	f7ee fde8 	bl	80005f8 <__aeabi_dmul>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	4639      	mov	r1, r7
 8011a30:	f7ee fc2a 	bl	8000288 <__aeabi_dsub>
 8011a34:	ec53 2b19 	vmov	r2, r3, d9
 8011a38:	4606      	mov	r6, r0
 8011a3a:	460f      	mov	r7, r1
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	4629      	mov	r1, r5
 8011a40:	f7ee fc22 	bl	8000288 <__aeabi_dsub>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4650      	mov	r0, sl
 8011a4a:	4659      	mov	r1, fp
 8011a4c:	f7ee fc1c 	bl	8000288 <__aeabi_dsub>
 8011a50:	4642      	mov	r2, r8
 8011a52:	464b      	mov	r3, r9
 8011a54:	f7ee fdd0 	bl	80005f8 <__aeabi_dmul>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	4639      	mov	r1, r7
 8011a60:	f7ee fc12 	bl	8000288 <__aeabi_dsub>
 8011a64:	ec53 2b1a 	vmov	r2, r3, d10
 8011a68:	f7ee fdc6 	bl	80005f8 <__aeabi_dmul>
 8011a6c:	ec53 2b18 	vmov	r2, r3, d8
 8011a70:	ec41 0b19 	vmov	d9, r0, r1
 8011a74:	ec51 0b18 	vmov	r0, r1, d8
 8011a78:	f7ee fdbe 	bl	80005f8 <__aeabi_dmul>
 8011a7c:	a37c      	add	r3, pc, #496	; (adr r3, 8011c70 <__ieee754_pow+0x708>)
 8011a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a82:	4604      	mov	r4, r0
 8011a84:	460d      	mov	r5, r1
 8011a86:	f7ee fdb7 	bl	80005f8 <__aeabi_dmul>
 8011a8a:	a37b      	add	r3, pc, #492	; (adr r3, 8011c78 <__ieee754_pow+0x710>)
 8011a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a90:	f7ee fbfc 	bl	800028c <__adddf3>
 8011a94:	4622      	mov	r2, r4
 8011a96:	462b      	mov	r3, r5
 8011a98:	f7ee fdae 	bl	80005f8 <__aeabi_dmul>
 8011a9c:	a378      	add	r3, pc, #480	; (adr r3, 8011c80 <__ieee754_pow+0x718>)
 8011a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa2:	f7ee fbf3 	bl	800028c <__adddf3>
 8011aa6:	4622      	mov	r2, r4
 8011aa8:	462b      	mov	r3, r5
 8011aaa:	f7ee fda5 	bl	80005f8 <__aeabi_dmul>
 8011aae:	a376      	add	r3, pc, #472	; (adr r3, 8011c88 <__ieee754_pow+0x720>)
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	f7ee fbea 	bl	800028c <__adddf3>
 8011ab8:	4622      	mov	r2, r4
 8011aba:	462b      	mov	r3, r5
 8011abc:	f7ee fd9c 	bl	80005f8 <__aeabi_dmul>
 8011ac0:	a373      	add	r3, pc, #460	; (adr r3, 8011c90 <__ieee754_pow+0x728>)
 8011ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac6:	f7ee fbe1 	bl	800028c <__adddf3>
 8011aca:	4622      	mov	r2, r4
 8011acc:	462b      	mov	r3, r5
 8011ace:	f7ee fd93 	bl	80005f8 <__aeabi_dmul>
 8011ad2:	a371      	add	r3, pc, #452	; (adr r3, 8011c98 <__ieee754_pow+0x730>)
 8011ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad8:	f7ee fbd8 	bl	800028c <__adddf3>
 8011adc:	4622      	mov	r2, r4
 8011ade:	4606      	mov	r6, r0
 8011ae0:	460f      	mov	r7, r1
 8011ae2:	462b      	mov	r3, r5
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	f7ee fd86 	bl	80005f8 <__aeabi_dmul>
 8011aec:	4602      	mov	r2, r0
 8011aee:	460b      	mov	r3, r1
 8011af0:	4630      	mov	r0, r6
 8011af2:	4639      	mov	r1, r7
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	4642      	mov	r2, r8
 8011afa:	4604      	mov	r4, r0
 8011afc:	460d      	mov	r5, r1
 8011afe:	464b      	mov	r3, r9
 8011b00:	ec51 0b18 	vmov	r0, r1, d8
 8011b04:	f7ee fbc2 	bl	800028c <__adddf3>
 8011b08:	ec53 2b19 	vmov	r2, r3, d9
 8011b0c:	f7ee fd74 	bl	80005f8 <__aeabi_dmul>
 8011b10:	4622      	mov	r2, r4
 8011b12:	462b      	mov	r3, r5
 8011b14:	f7ee fbba 	bl	800028c <__adddf3>
 8011b18:	4642      	mov	r2, r8
 8011b1a:	4682      	mov	sl, r0
 8011b1c:	468b      	mov	fp, r1
 8011b1e:	464b      	mov	r3, r9
 8011b20:	4640      	mov	r0, r8
 8011b22:	4649      	mov	r1, r9
 8011b24:	f7ee fd68 	bl	80005f8 <__aeabi_dmul>
 8011b28:	4b6b      	ldr	r3, [pc, #428]	; (8011cd8 <__ieee754_pow+0x770>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	460f      	mov	r7, r1
 8011b30:	f7ee fbac 	bl	800028c <__adddf3>
 8011b34:	4652      	mov	r2, sl
 8011b36:	465b      	mov	r3, fp
 8011b38:	f7ee fba8 	bl	800028c <__adddf3>
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	4604      	mov	r4, r0
 8011b40:	460d      	mov	r5, r1
 8011b42:	4602      	mov	r2, r0
 8011b44:	460b      	mov	r3, r1
 8011b46:	4640      	mov	r0, r8
 8011b48:	4649      	mov	r1, r9
 8011b4a:	f7ee fd55 	bl	80005f8 <__aeabi_dmul>
 8011b4e:	4b62      	ldr	r3, [pc, #392]	; (8011cd8 <__ieee754_pow+0x770>)
 8011b50:	4680      	mov	r8, r0
 8011b52:	4689      	mov	r9, r1
 8011b54:	2200      	movs	r2, #0
 8011b56:	4620      	mov	r0, r4
 8011b58:	4629      	mov	r1, r5
 8011b5a:	f7ee fb95 	bl	8000288 <__aeabi_dsub>
 8011b5e:	4632      	mov	r2, r6
 8011b60:	463b      	mov	r3, r7
 8011b62:	f7ee fb91 	bl	8000288 <__aeabi_dsub>
 8011b66:	4602      	mov	r2, r0
 8011b68:	460b      	mov	r3, r1
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	4659      	mov	r1, fp
 8011b6e:	f7ee fb8b 	bl	8000288 <__aeabi_dsub>
 8011b72:	ec53 2b18 	vmov	r2, r3, d8
 8011b76:	f7ee fd3f 	bl	80005f8 <__aeabi_dmul>
 8011b7a:	4622      	mov	r2, r4
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	460f      	mov	r7, r1
 8011b80:	462b      	mov	r3, r5
 8011b82:	ec51 0b19 	vmov	r0, r1, d9
 8011b86:	f7ee fd37 	bl	80005f8 <__aeabi_dmul>
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	4630      	mov	r0, r6
 8011b90:	4639      	mov	r1, r7
 8011b92:	f7ee fb7b 	bl	800028c <__adddf3>
 8011b96:	4606      	mov	r6, r0
 8011b98:	460f      	mov	r7, r1
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	4640      	mov	r0, r8
 8011ba0:	4649      	mov	r1, r9
 8011ba2:	f7ee fb73 	bl	800028c <__adddf3>
 8011ba6:	a33e      	add	r3, pc, #248	; (adr r3, 8011ca0 <__ieee754_pow+0x738>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	2000      	movs	r0, #0
 8011bae:	4604      	mov	r4, r0
 8011bb0:	460d      	mov	r5, r1
 8011bb2:	f7ee fd21 	bl	80005f8 <__aeabi_dmul>
 8011bb6:	4642      	mov	r2, r8
 8011bb8:	ec41 0b18 	vmov	d8, r0, r1
 8011bbc:	464b      	mov	r3, r9
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f7ee fb61 	bl	8000288 <__aeabi_dsub>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	460b      	mov	r3, r1
 8011bca:	4630      	mov	r0, r6
 8011bcc:	4639      	mov	r1, r7
 8011bce:	f7ee fb5b 	bl	8000288 <__aeabi_dsub>
 8011bd2:	a335      	add	r3, pc, #212	; (adr r3, 8011ca8 <__ieee754_pow+0x740>)
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	f7ee fd0e 	bl	80005f8 <__aeabi_dmul>
 8011bdc:	a334      	add	r3, pc, #208	; (adr r3, 8011cb0 <__ieee754_pow+0x748>)
 8011bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be2:	4606      	mov	r6, r0
 8011be4:	460f      	mov	r7, r1
 8011be6:	4620      	mov	r0, r4
 8011be8:	4629      	mov	r1, r5
 8011bea:	f7ee fd05 	bl	80005f8 <__aeabi_dmul>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	4639      	mov	r1, r7
 8011bf6:	f7ee fb49 	bl	800028c <__adddf3>
 8011bfa:	9a07      	ldr	r2, [sp, #28]
 8011bfc:	4b37      	ldr	r3, [pc, #220]	; (8011cdc <__ieee754_pow+0x774>)
 8011bfe:	4413      	add	r3, r2
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	f7ee fb42 	bl	800028c <__adddf3>
 8011c08:	4682      	mov	sl, r0
 8011c0a:	9805      	ldr	r0, [sp, #20]
 8011c0c:	468b      	mov	fp, r1
 8011c0e:	f7ee fc89 	bl	8000524 <__aeabi_i2d>
 8011c12:	9a07      	ldr	r2, [sp, #28]
 8011c14:	4b32      	ldr	r3, [pc, #200]	; (8011ce0 <__ieee754_pow+0x778>)
 8011c16:	4413      	add	r3, r2
 8011c18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	460f      	mov	r7, r1
 8011c20:	4652      	mov	r2, sl
 8011c22:	465b      	mov	r3, fp
 8011c24:	ec51 0b18 	vmov	r0, r1, d8
 8011c28:	f7ee fb30 	bl	800028c <__adddf3>
 8011c2c:	4642      	mov	r2, r8
 8011c2e:	464b      	mov	r3, r9
 8011c30:	f7ee fb2c 	bl	800028c <__adddf3>
 8011c34:	4632      	mov	r2, r6
 8011c36:	463b      	mov	r3, r7
 8011c38:	f7ee fb28 	bl	800028c <__adddf3>
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	4632      	mov	r2, r6
 8011c40:	463b      	mov	r3, r7
 8011c42:	4604      	mov	r4, r0
 8011c44:	460d      	mov	r5, r1
 8011c46:	f7ee fb1f 	bl	8000288 <__aeabi_dsub>
 8011c4a:	4642      	mov	r2, r8
 8011c4c:	464b      	mov	r3, r9
 8011c4e:	f7ee fb1b 	bl	8000288 <__aeabi_dsub>
 8011c52:	ec53 2b18 	vmov	r2, r3, d8
 8011c56:	f7ee fb17 	bl	8000288 <__aeabi_dsub>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	4650      	mov	r0, sl
 8011c60:	4659      	mov	r1, fp
 8011c62:	e610      	b.n	8011886 <__ieee754_pow+0x31e>
 8011c64:	2401      	movs	r4, #1
 8011c66:	e6a1      	b.n	80119ac <__ieee754_pow+0x444>
 8011c68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011cb8 <__ieee754_pow+0x750>
 8011c6c:	e617      	b.n	801189e <__ieee754_pow+0x336>
 8011c6e:	bf00      	nop
 8011c70:	4a454eef 	.word	0x4a454eef
 8011c74:	3fca7e28 	.word	0x3fca7e28
 8011c78:	93c9db65 	.word	0x93c9db65
 8011c7c:	3fcd864a 	.word	0x3fcd864a
 8011c80:	a91d4101 	.word	0xa91d4101
 8011c84:	3fd17460 	.word	0x3fd17460
 8011c88:	518f264d 	.word	0x518f264d
 8011c8c:	3fd55555 	.word	0x3fd55555
 8011c90:	db6fabff 	.word	0xdb6fabff
 8011c94:	3fdb6db6 	.word	0x3fdb6db6
 8011c98:	33333303 	.word	0x33333303
 8011c9c:	3fe33333 	.word	0x3fe33333
 8011ca0:	e0000000 	.word	0xe0000000
 8011ca4:	3feec709 	.word	0x3feec709
 8011ca8:	dc3a03fd 	.word	0xdc3a03fd
 8011cac:	3feec709 	.word	0x3feec709
 8011cb0:	145b01f5 	.word	0x145b01f5
 8011cb4:	be3e2fe0 	.word	0xbe3e2fe0
 8011cb8:	00000000 	.word	0x00000000
 8011cbc:	3ff00000 	.word	0x3ff00000
 8011cc0:	7ff00000 	.word	0x7ff00000
 8011cc4:	43400000 	.word	0x43400000
 8011cc8:	0003988e 	.word	0x0003988e
 8011ccc:	000bb679 	.word	0x000bb679
 8011cd0:	08013558 	.word	0x08013558
 8011cd4:	3ff00000 	.word	0x3ff00000
 8011cd8:	40080000 	.word	0x40080000
 8011cdc:	08013578 	.word	0x08013578
 8011ce0:	08013568 	.word	0x08013568
 8011ce4:	a3b3      	add	r3, pc, #716	; (adr r3, 8011fb4 <__ieee754_pow+0xa4c>)
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	4640      	mov	r0, r8
 8011cec:	4649      	mov	r1, r9
 8011cee:	f7ee facd 	bl	800028c <__adddf3>
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	ec41 0b1a 	vmov	d10, r0, r1
 8011cf8:	462b      	mov	r3, r5
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	f7ee fac3 	bl	8000288 <__aeabi_dsub>
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	ec51 0b1a 	vmov	r0, r1, d10
 8011d0a:	f7ee ff05 	bl	8000b18 <__aeabi_dcmpgt>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	f47f ae04 	bne.w	801191c <__ieee754_pow+0x3b4>
 8011d14:	4aa2      	ldr	r2, [pc, #648]	; (8011fa0 <__ieee754_pow+0xa38>)
 8011d16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	f340 8107 	ble.w	8011f2e <__ieee754_pow+0x9c6>
 8011d20:	151b      	asrs	r3, r3, #20
 8011d22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011d26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011d2a:	fa4a fa03 	asr.w	sl, sl, r3
 8011d2e:	44da      	add	sl, fp
 8011d30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011d34:	489b      	ldr	r0, [pc, #620]	; (8011fa4 <__ieee754_pow+0xa3c>)
 8011d36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011d3a:	4108      	asrs	r0, r1
 8011d3c:	ea00 030a 	and.w	r3, r0, sl
 8011d40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011d44:	f1c1 0114 	rsb	r1, r1, #20
 8011d48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011d4c:	fa4a fa01 	asr.w	sl, sl, r1
 8011d50:	f1bb 0f00 	cmp.w	fp, #0
 8011d54:	f04f 0200 	mov.w	r2, #0
 8011d58:	4620      	mov	r0, r4
 8011d5a:	4629      	mov	r1, r5
 8011d5c:	bfb8      	it	lt
 8011d5e:	f1ca 0a00 	rsblt	sl, sl, #0
 8011d62:	f7ee fa91 	bl	8000288 <__aeabi_dsub>
 8011d66:	ec41 0b19 	vmov	d9, r0, r1
 8011d6a:	4642      	mov	r2, r8
 8011d6c:	464b      	mov	r3, r9
 8011d6e:	ec51 0b19 	vmov	r0, r1, d9
 8011d72:	f7ee fa8b 	bl	800028c <__adddf3>
 8011d76:	a37a      	add	r3, pc, #488	; (adr r3, 8011f60 <__ieee754_pow+0x9f8>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	4604      	mov	r4, r0
 8011d80:	460d      	mov	r5, r1
 8011d82:	f7ee fc39 	bl	80005f8 <__aeabi_dmul>
 8011d86:	ec53 2b19 	vmov	r2, r3, d9
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	460f      	mov	r7, r1
 8011d8e:	4620      	mov	r0, r4
 8011d90:	4629      	mov	r1, r5
 8011d92:	f7ee fa79 	bl	8000288 <__aeabi_dsub>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fa73 	bl	8000288 <__aeabi_dsub>
 8011da2:	a371      	add	r3, pc, #452	; (adr r3, 8011f68 <__ieee754_pow+0xa00>)
 8011da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da8:	f7ee fc26 	bl	80005f8 <__aeabi_dmul>
 8011dac:	a370      	add	r3, pc, #448	; (adr r3, 8011f70 <__ieee754_pow+0xa08>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	4680      	mov	r8, r0
 8011db4:	4689      	mov	r9, r1
 8011db6:	4620      	mov	r0, r4
 8011db8:	4629      	mov	r1, r5
 8011dba:	f7ee fc1d 	bl	80005f8 <__aeabi_dmul>
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	4640      	mov	r0, r8
 8011dc4:	4649      	mov	r1, r9
 8011dc6:	f7ee fa61 	bl	800028c <__adddf3>
 8011dca:	4604      	mov	r4, r0
 8011dcc:	460d      	mov	r5, r1
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	f7ee fa59 	bl	800028c <__adddf3>
 8011dda:	4632      	mov	r2, r6
 8011ddc:	463b      	mov	r3, r7
 8011dde:	4680      	mov	r8, r0
 8011de0:	4689      	mov	r9, r1
 8011de2:	f7ee fa51 	bl	8000288 <__aeabi_dsub>
 8011de6:	4602      	mov	r2, r0
 8011de8:	460b      	mov	r3, r1
 8011dea:	4620      	mov	r0, r4
 8011dec:	4629      	mov	r1, r5
 8011dee:	f7ee fa4b 	bl	8000288 <__aeabi_dsub>
 8011df2:	4642      	mov	r2, r8
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	464b      	mov	r3, r9
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	f7ee fbfb 	bl	80005f8 <__aeabi_dmul>
 8011e02:	a35d      	add	r3, pc, #372	; (adr r3, 8011f78 <__ieee754_pow+0xa10>)
 8011e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e08:	4604      	mov	r4, r0
 8011e0a:	460d      	mov	r5, r1
 8011e0c:	f7ee fbf4 	bl	80005f8 <__aeabi_dmul>
 8011e10:	a35b      	add	r3, pc, #364	; (adr r3, 8011f80 <__ieee754_pow+0xa18>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7ee fa37 	bl	8000288 <__aeabi_dsub>
 8011e1a:	4622      	mov	r2, r4
 8011e1c:	462b      	mov	r3, r5
 8011e1e:	f7ee fbeb 	bl	80005f8 <__aeabi_dmul>
 8011e22:	a359      	add	r3, pc, #356	; (adr r3, 8011f88 <__ieee754_pow+0xa20>)
 8011e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e28:	f7ee fa30 	bl	800028c <__adddf3>
 8011e2c:	4622      	mov	r2, r4
 8011e2e:	462b      	mov	r3, r5
 8011e30:	f7ee fbe2 	bl	80005f8 <__aeabi_dmul>
 8011e34:	a356      	add	r3, pc, #344	; (adr r3, 8011f90 <__ieee754_pow+0xa28>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	f7ee fa25 	bl	8000288 <__aeabi_dsub>
 8011e3e:	4622      	mov	r2, r4
 8011e40:	462b      	mov	r3, r5
 8011e42:	f7ee fbd9 	bl	80005f8 <__aeabi_dmul>
 8011e46:	a354      	add	r3, pc, #336	; (adr r3, 8011f98 <__ieee754_pow+0xa30>)
 8011e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4c:	f7ee fa1e 	bl	800028c <__adddf3>
 8011e50:	4622      	mov	r2, r4
 8011e52:	462b      	mov	r3, r5
 8011e54:	f7ee fbd0 	bl	80005f8 <__aeabi_dmul>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	4640      	mov	r0, r8
 8011e5e:	4649      	mov	r1, r9
 8011e60:	f7ee fa12 	bl	8000288 <__aeabi_dsub>
 8011e64:	4604      	mov	r4, r0
 8011e66:	460d      	mov	r5, r1
 8011e68:	4602      	mov	r2, r0
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	4640      	mov	r0, r8
 8011e6e:	4649      	mov	r1, r9
 8011e70:	f7ee fbc2 	bl	80005f8 <__aeabi_dmul>
 8011e74:	2200      	movs	r2, #0
 8011e76:	ec41 0b19 	vmov	d9, r0, r1
 8011e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7ee fa01 	bl	8000288 <__aeabi_dsub>
 8011e86:	4602      	mov	r2, r0
 8011e88:	460b      	mov	r3, r1
 8011e8a:	ec51 0b19 	vmov	r0, r1, d9
 8011e8e:	f7ee fcdd 	bl	800084c <__aeabi_ddiv>
 8011e92:	4632      	mov	r2, r6
 8011e94:	4604      	mov	r4, r0
 8011e96:	460d      	mov	r5, r1
 8011e98:	463b      	mov	r3, r7
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	f7ee fbab 	bl	80005f8 <__aeabi_dmul>
 8011ea2:	4632      	mov	r2, r6
 8011ea4:	463b      	mov	r3, r7
 8011ea6:	f7ee f9f1 	bl	800028c <__adddf3>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	460b      	mov	r3, r1
 8011eae:	4620      	mov	r0, r4
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7ee f9e9 	bl	8000288 <__aeabi_dsub>
 8011eb6:	4642      	mov	r2, r8
 8011eb8:	464b      	mov	r3, r9
 8011eba:	f7ee f9e5 	bl	8000288 <__aeabi_dsub>
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	4939      	ldr	r1, [pc, #228]	; (8011fa8 <__ieee754_pow+0xa40>)
 8011ec4:	2000      	movs	r0, #0
 8011ec6:	f7ee f9df 	bl	8000288 <__aeabi_dsub>
 8011eca:	ec41 0b10 	vmov	d0, r0, r1
 8011ece:	ee10 3a90 	vmov	r3, s1
 8011ed2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011eda:	da2b      	bge.n	8011f34 <__ieee754_pow+0x9cc>
 8011edc:	4650      	mov	r0, sl
 8011ede:	f000 fc23 	bl	8012728 <scalbn>
 8011ee2:	ec51 0b10 	vmov	r0, r1, d0
 8011ee6:	ec53 2b18 	vmov	r2, r3, d8
 8011eea:	f7ff bbee 	b.w	80116ca <__ieee754_pow+0x162>
 8011eee:	4b2f      	ldr	r3, [pc, #188]	; (8011fac <__ieee754_pow+0xa44>)
 8011ef0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011ef4:	429e      	cmp	r6, r3
 8011ef6:	f77f af0d 	ble.w	8011d14 <__ieee754_pow+0x7ac>
 8011efa:	4b2d      	ldr	r3, [pc, #180]	; (8011fb0 <__ieee754_pow+0xa48>)
 8011efc:	440b      	add	r3, r1
 8011efe:	4303      	orrs	r3, r0
 8011f00:	d009      	beq.n	8011f16 <__ieee754_pow+0x9ae>
 8011f02:	ec51 0b18 	vmov	r0, r1, d8
 8011f06:	2200      	movs	r2, #0
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f7ee fde7 	bl	8000adc <__aeabi_dcmplt>
 8011f0e:	3800      	subs	r0, #0
 8011f10:	bf18      	it	ne
 8011f12:	2001      	movne	r0, #1
 8011f14:	e448      	b.n	80117a8 <__ieee754_pow+0x240>
 8011f16:	4622      	mov	r2, r4
 8011f18:	462b      	mov	r3, r5
 8011f1a:	f7ee f9b5 	bl	8000288 <__aeabi_dsub>
 8011f1e:	4642      	mov	r2, r8
 8011f20:	464b      	mov	r3, r9
 8011f22:	f7ee fdef 	bl	8000b04 <__aeabi_dcmpge>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f43f aef4 	beq.w	8011d14 <__ieee754_pow+0x7ac>
 8011f2c:	e7e9      	b.n	8011f02 <__ieee754_pow+0x99a>
 8011f2e:	f04f 0a00 	mov.w	sl, #0
 8011f32:	e71a      	b.n	8011d6a <__ieee754_pow+0x802>
 8011f34:	ec51 0b10 	vmov	r0, r1, d0
 8011f38:	4619      	mov	r1, r3
 8011f3a:	e7d4      	b.n	8011ee6 <__ieee754_pow+0x97e>
 8011f3c:	491a      	ldr	r1, [pc, #104]	; (8011fa8 <__ieee754_pow+0xa40>)
 8011f3e:	2000      	movs	r0, #0
 8011f40:	f7ff bb31 	b.w	80115a6 <__ieee754_pow+0x3e>
 8011f44:	2000      	movs	r0, #0
 8011f46:	2100      	movs	r1, #0
 8011f48:	f7ff bb2d 	b.w	80115a6 <__ieee754_pow+0x3e>
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	4639      	mov	r1, r7
 8011f50:	f7ff bb29 	b.w	80115a6 <__ieee754_pow+0x3e>
 8011f54:	9204      	str	r2, [sp, #16]
 8011f56:	f7ff bb7b 	b.w	8011650 <__ieee754_pow+0xe8>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	f7ff bb65 	b.w	801162a <__ieee754_pow+0xc2>
 8011f60:	00000000 	.word	0x00000000
 8011f64:	3fe62e43 	.word	0x3fe62e43
 8011f68:	fefa39ef 	.word	0xfefa39ef
 8011f6c:	3fe62e42 	.word	0x3fe62e42
 8011f70:	0ca86c39 	.word	0x0ca86c39
 8011f74:	be205c61 	.word	0xbe205c61
 8011f78:	72bea4d0 	.word	0x72bea4d0
 8011f7c:	3e663769 	.word	0x3e663769
 8011f80:	c5d26bf1 	.word	0xc5d26bf1
 8011f84:	3ebbbd41 	.word	0x3ebbbd41
 8011f88:	af25de2c 	.word	0xaf25de2c
 8011f8c:	3f11566a 	.word	0x3f11566a
 8011f90:	16bebd93 	.word	0x16bebd93
 8011f94:	3f66c16c 	.word	0x3f66c16c
 8011f98:	5555553e 	.word	0x5555553e
 8011f9c:	3fc55555 	.word	0x3fc55555
 8011fa0:	3fe00000 	.word	0x3fe00000
 8011fa4:	fff00000 	.word	0xfff00000
 8011fa8:	3ff00000 	.word	0x3ff00000
 8011fac:	4090cbff 	.word	0x4090cbff
 8011fb0:	3f6f3400 	.word	0x3f6f3400
 8011fb4:	652b82fe 	.word	0x652b82fe
 8011fb8:	3c971547 	.word	0x3c971547
 8011fbc:	00000000 	.word	0x00000000

08011fc0 <__ieee754_rem_pio2>:
 8011fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	ed2d 8b02 	vpush	{d8}
 8011fc8:	ec55 4b10 	vmov	r4, r5, d0
 8011fcc:	4bca      	ldr	r3, [pc, #808]	; (80122f8 <__ieee754_rem_pio2+0x338>)
 8011fce:	b08b      	sub	sp, #44	; 0x2c
 8011fd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011fd4:	4598      	cmp	r8, r3
 8011fd6:	4682      	mov	sl, r0
 8011fd8:	9502      	str	r5, [sp, #8]
 8011fda:	dc08      	bgt.n	8011fee <__ieee754_rem_pio2+0x2e>
 8011fdc:	2200      	movs	r2, #0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	ed80 0b00 	vstr	d0, [r0]
 8011fe4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011fe8:	f04f 0b00 	mov.w	fp, #0
 8011fec:	e028      	b.n	8012040 <__ieee754_rem_pio2+0x80>
 8011fee:	4bc3      	ldr	r3, [pc, #780]	; (80122fc <__ieee754_rem_pio2+0x33c>)
 8011ff0:	4598      	cmp	r8, r3
 8011ff2:	dc78      	bgt.n	80120e6 <__ieee754_rem_pio2+0x126>
 8011ff4:	9b02      	ldr	r3, [sp, #8]
 8011ff6:	4ec2      	ldr	r6, [pc, #776]	; (8012300 <__ieee754_rem_pio2+0x340>)
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	ee10 0a10 	vmov	r0, s0
 8011ffe:	a3b0      	add	r3, pc, #704	; (adr r3, 80122c0 <__ieee754_rem_pio2+0x300>)
 8012000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012004:	4629      	mov	r1, r5
 8012006:	dd39      	ble.n	801207c <__ieee754_rem_pio2+0xbc>
 8012008:	f7ee f93e 	bl	8000288 <__aeabi_dsub>
 801200c:	45b0      	cmp	r8, r6
 801200e:	4604      	mov	r4, r0
 8012010:	460d      	mov	r5, r1
 8012012:	d01b      	beq.n	801204c <__ieee754_rem_pio2+0x8c>
 8012014:	a3ac      	add	r3, pc, #688	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x308>)
 8012016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201a:	f7ee f935 	bl	8000288 <__aeabi_dsub>
 801201e:	4602      	mov	r2, r0
 8012020:	460b      	mov	r3, r1
 8012022:	e9ca 2300 	strd	r2, r3, [sl]
 8012026:	4620      	mov	r0, r4
 8012028:	4629      	mov	r1, r5
 801202a:	f7ee f92d 	bl	8000288 <__aeabi_dsub>
 801202e:	a3a6      	add	r3, pc, #664	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x308>)
 8012030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012034:	f7ee f928 	bl	8000288 <__aeabi_dsub>
 8012038:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801203c:	f04f 0b01 	mov.w	fp, #1
 8012040:	4658      	mov	r0, fp
 8012042:	b00b      	add	sp, #44	; 0x2c
 8012044:	ecbd 8b02 	vpop	{d8}
 8012048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204c:	a3a0      	add	r3, pc, #640	; (adr r3, 80122d0 <__ieee754_rem_pio2+0x310>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	f7ee f919 	bl	8000288 <__aeabi_dsub>
 8012056:	a3a0      	add	r3, pc, #640	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x318>)
 8012058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205c:	4604      	mov	r4, r0
 801205e:	460d      	mov	r5, r1
 8012060:	f7ee f912 	bl	8000288 <__aeabi_dsub>
 8012064:	4602      	mov	r2, r0
 8012066:	460b      	mov	r3, r1
 8012068:	e9ca 2300 	strd	r2, r3, [sl]
 801206c:	4620      	mov	r0, r4
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee f90a 	bl	8000288 <__aeabi_dsub>
 8012074:	a398      	add	r3, pc, #608	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x318>)
 8012076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207a:	e7db      	b.n	8012034 <__ieee754_rem_pio2+0x74>
 801207c:	f7ee f906 	bl	800028c <__adddf3>
 8012080:	45b0      	cmp	r8, r6
 8012082:	4604      	mov	r4, r0
 8012084:	460d      	mov	r5, r1
 8012086:	d016      	beq.n	80120b6 <__ieee754_rem_pio2+0xf6>
 8012088:	a38f      	add	r3, pc, #572	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x308>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	f7ee f8fd 	bl	800028c <__adddf3>
 8012092:	4602      	mov	r2, r0
 8012094:	460b      	mov	r3, r1
 8012096:	e9ca 2300 	strd	r2, r3, [sl]
 801209a:	4620      	mov	r0, r4
 801209c:	4629      	mov	r1, r5
 801209e:	f7ee f8f3 	bl	8000288 <__aeabi_dsub>
 80120a2:	a389      	add	r3, pc, #548	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x308>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	f7ee f8f0 	bl	800028c <__adddf3>
 80120ac:	f04f 3bff 	mov.w	fp, #4294967295
 80120b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120b4:	e7c4      	b.n	8012040 <__ieee754_rem_pio2+0x80>
 80120b6:	a386      	add	r3, pc, #536	; (adr r3, 80122d0 <__ieee754_rem_pio2+0x310>)
 80120b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120bc:	f7ee f8e6 	bl	800028c <__adddf3>
 80120c0:	a385      	add	r3, pc, #532	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x318>)
 80120c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c6:	4604      	mov	r4, r0
 80120c8:	460d      	mov	r5, r1
 80120ca:	f7ee f8df 	bl	800028c <__adddf3>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	e9ca 2300 	strd	r2, r3, [sl]
 80120d6:	4620      	mov	r0, r4
 80120d8:	4629      	mov	r1, r5
 80120da:	f7ee f8d5 	bl	8000288 <__aeabi_dsub>
 80120de:	a37e      	add	r3, pc, #504	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x318>)
 80120e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e4:	e7e0      	b.n	80120a8 <__ieee754_rem_pio2+0xe8>
 80120e6:	4b87      	ldr	r3, [pc, #540]	; (8012304 <__ieee754_rem_pio2+0x344>)
 80120e8:	4598      	cmp	r8, r3
 80120ea:	f300 80d8 	bgt.w	801229e <__ieee754_rem_pio2+0x2de>
 80120ee:	f000 fb0f 	bl	8012710 <fabs>
 80120f2:	ec55 4b10 	vmov	r4, r5, d0
 80120f6:	ee10 0a10 	vmov	r0, s0
 80120fa:	a379      	add	r3, pc, #484	; (adr r3, 80122e0 <__ieee754_rem_pio2+0x320>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	4629      	mov	r1, r5
 8012102:	f7ee fa79 	bl	80005f8 <__aeabi_dmul>
 8012106:	4b80      	ldr	r3, [pc, #512]	; (8012308 <__ieee754_rem_pio2+0x348>)
 8012108:	2200      	movs	r2, #0
 801210a:	f7ee f8bf 	bl	800028c <__adddf3>
 801210e:	f7ee fd23 	bl	8000b58 <__aeabi_d2iz>
 8012112:	4683      	mov	fp, r0
 8012114:	f7ee fa06 	bl	8000524 <__aeabi_i2d>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	ec43 2b18 	vmov	d8, r2, r3
 8012120:	a367      	add	r3, pc, #412	; (adr r3, 80122c0 <__ieee754_rem_pio2+0x300>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	f7ee fa67 	bl	80005f8 <__aeabi_dmul>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4620      	mov	r0, r4
 8012130:	4629      	mov	r1, r5
 8012132:	f7ee f8a9 	bl	8000288 <__aeabi_dsub>
 8012136:	a364      	add	r3, pc, #400	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x308>)
 8012138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213c:	4606      	mov	r6, r0
 801213e:	460f      	mov	r7, r1
 8012140:	ec51 0b18 	vmov	r0, r1, d8
 8012144:	f7ee fa58 	bl	80005f8 <__aeabi_dmul>
 8012148:	f1bb 0f1f 	cmp.w	fp, #31
 801214c:	4604      	mov	r4, r0
 801214e:	460d      	mov	r5, r1
 8012150:	dc0d      	bgt.n	801216e <__ieee754_rem_pio2+0x1ae>
 8012152:	4b6e      	ldr	r3, [pc, #440]	; (801230c <__ieee754_rem_pio2+0x34c>)
 8012154:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801215c:	4543      	cmp	r3, r8
 801215e:	d006      	beq.n	801216e <__ieee754_rem_pio2+0x1ae>
 8012160:	4622      	mov	r2, r4
 8012162:	462b      	mov	r3, r5
 8012164:	4630      	mov	r0, r6
 8012166:	4639      	mov	r1, r7
 8012168:	f7ee f88e 	bl	8000288 <__aeabi_dsub>
 801216c:	e00e      	b.n	801218c <__ieee754_rem_pio2+0x1cc>
 801216e:	462b      	mov	r3, r5
 8012170:	4622      	mov	r2, r4
 8012172:	4630      	mov	r0, r6
 8012174:	4639      	mov	r1, r7
 8012176:	f7ee f887 	bl	8000288 <__aeabi_dsub>
 801217a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801217e:	9303      	str	r3, [sp, #12]
 8012180:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012184:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012188:	2b10      	cmp	r3, #16
 801218a:	dc02      	bgt.n	8012192 <__ieee754_rem_pio2+0x1d2>
 801218c:	e9ca 0100 	strd	r0, r1, [sl]
 8012190:	e039      	b.n	8012206 <__ieee754_rem_pio2+0x246>
 8012192:	a34f      	add	r3, pc, #316	; (adr r3, 80122d0 <__ieee754_rem_pio2+0x310>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	ec51 0b18 	vmov	r0, r1, d8
 801219c:	f7ee fa2c 	bl	80005f8 <__aeabi_dmul>
 80121a0:	4604      	mov	r4, r0
 80121a2:	460d      	mov	r5, r1
 80121a4:	4602      	mov	r2, r0
 80121a6:	460b      	mov	r3, r1
 80121a8:	4630      	mov	r0, r6
 80121aa:	4639      	mov	r1, r7
 80121ac:	f7ee f86c 	bl	8000288 <__aeabi_dsub>
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	4680      	mov	r8, r0
 80121b6:	4689      	mov	r9, r1
 80121b8:	4630      	mov	r0, r6
 80121ba:	4639      	mov	r1, r7
 80121bc:	f7ee f864 	bl	8000288 <__aeabi_dsub>
 80121c0:	4622      	mov	r2, r4
 80121c2:	462b      	mov	r3, r5
 80121c4:	f7ee f860 	bl	8000288 <__aeabi_dsub>
 80121c8:	a343      	add	r3, pc, #268	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x318>)
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	4604      	mov	r4, r0
 80121d0:	460d      	mov	r5, r1
 80121d2:	ec51 0b18 	vmov	r0, r1, d8
 80121d6:	f7ee fa0f 	bl	80005f8 <__aeabi_dmul>
 80121da:	4622      	mov	r2, r4
 80121dc:	462b      	mov	r3, r5
 80121de:	f7ee f853 	bl	8000288 <__aeabi_dsub>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	4604      	mov	r4, r0
 80121e8:	460d      	mov	r5, r1
 80121ea:	4640      	mov	r0, r8
 80121ec:	4649      	mov	r1, r9
 80121ee:	f7ee f84b 	bl	8000288 <__aeabi_dsub>
 80121f2:	9a03      	ldr	r2, [sp, #12]
 80121f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	2b31      	cmp	r3, #49	; 0x31
 80121fc:	dc24      	bgt.n	8012248 <__ieee754_rem_pio2+0x288>
 80121fe:	e9ca 0100 	strd	r0, r1, [sl]
 8012202:	4646      	mov	r6, r8
 8012204:	464f      	mov	r7, r9
 8012206:	e9da 8900 	ldrd	r8, r9, [sl]
 801220a:	4630      	mov	r0, r6
 801220c:	4642      	mov	r2, r8
 801220e:	464b      	mov	r3, r9
 8012210:	4639      	mov	r1, r7
 8012212:	f7ee f839 	bl	8000288 <__aeabi_dsub>
 8012216:	462b      	mov	r3, r5
 8012218:	4622      	mov	r2, r4
 801221a:	f7ee f835 	bl	8000288 <__aeabi_dsub>
 801221e:	9b02      	ldr	r3, [sp, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012226:	f6bf af0b 	bge.w	8012040 <__ieee754_rem_pio2+0x80>
 801222a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801222e:	f8ca 3004 	str.w	r3, [sl, #4]
 8012232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012236:	f8ca 8000 	str.w	r8, [sl]
 801223a:	f8ca 0008 	str.w	r0, [sl, #8]
 801223e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012242:	f1cb 0b00 	rsb	fp, fp, #0
 8012246:	e6fb      	b.n	8012040 <__ieee754_rem_pio2+0x80>
 8012248:	a327      	add	r3, pc, #156	; (adr r3, 80122e8 <__ieee754_rem_pio2+0x328>)
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	ec51 0b18 	vmov	r0, r1, d8
 8012252:	f7ee f9d1 	bl	80005f8 <__aeabi_dmul>
 8012256:	4604      	mov	r4, r0
 8012258:	460d      	mov	r5, r1
 801225a:	4602      	mov	r2, r0
 801225c:	460b      	mov	r3, r1
 801225e:	4640      	mov	r0, r8
 8012260:	4649      	mov	r1, r9
 8012262:	f7ee f811 	bl	8000288 <__aeabi_dsub>
 8012266:	4602      	mov	r2, r0
 8012268:	460b      	mov	r3, r1
 801226a:	4606      	mov	r6, r0
 801226c:	460f      	mov	r7, r1
 801226e:	4640      	mov	r0, r8
 8012270:	4649      	mov	r1, r9
 8012272:	f7ee f809 	bl	8000288 <__aeabi_dsub>
 8012276:	4622      	mov	r2, r4
 8012278:	462b      	mov	r3, r5
 801227a:	f7ee f805 	bl	8000288 <__aeabi_dsub>
 801227e:	a31c      	add	r3, pc, #112	; (adr r3, 80122f0 <__ieee754_rem_pio2+0x330>)
 8012280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012284:	4604      	mov	r4, r0
 8012286:	460d      	mov	r5, r1
 8012288:	ec51 0b18 	vmov	r0, r1, d8
 801228c:	f7ee f9b4 	bl	80005f8 <__aeabi_dmul>
 8012290:	4622      	mov	r2, r4
 8012292:	462b      	mov	r3, r5
 8012294:	f7ed fff8 	bl	8000288 <__aeabi_dsub>
 8012298:	4604      	mov	r4, r0
 801229a:	460d      	mov	r5, r1
 801229c:	e760      	b.n	8012160 <__ieee754_rem_pio2+0x1a0>
 801229e:	4b1c      	ldr	r3, [pc, #112]	; (8012310 <__ieee754_rem_pio2+0x350>)
 80122a0:	4598      	cmp	r8, r3
 80122a2:	dd37      	ble.n	8012314 <__ieee754_rem_pio2+0x354>
 80122a4:	ee10 2a10 	vmov	r2, s0
 80122a8:	462b      	mov	r3, r5
 80122aa:	4620      	mov	r0, r4
 80122ac:	4629      	mov	r1, r5
 80122ae:	f7ed ffeb 	bl	8000288 <__aeabi_dsub>
 80122b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80122b6:	e9ca 0100 	strd	r0, r1, [sl]
 80122ba:	e695      	b.n	8011fe8 <__ieee754_rem_pio2+0x28>
 80122bc:	f3af 8000 	nop.w
 80122c0:	54400000 	.word	0x54400000
 80122c4:	3ff921fb 	.word	0x3ff921fb
 80122c8:	1a626331 	.word	0x1a626331
 80122cc:	3dd0b461 	.word	0x3dd0b461
 80122d0:	1a600000 	.word	0x1a600000
 80122d4:	3dd0b461 	.word	0x3dd0b461
 80122d8:	2e037073 	.word	0x2e037073
 80122dc:	3ba3198a 	.word	0x3ba3198a
 80122e0:	6dc9c883 	.word	0x6dc9c883
 80122e4:	3fe45f30 	.word	0x3fe45f30
 80122e8:	2e000000 	.word	0x2e000000
 80122ec:	3ba3198a 	.word	0x3ba3198a
 80122f0:	252049c1 	.word	0x252049c1
 80122f4:	397b839a 	.word	0x397b839a
 80122f8:	3fe921fb 	.word	0x3fe921fb
 80122fc:	4002d97b 	.word	0x4002d97b
 8012300:	3ff921fb 	.word	0x3ff921fb
 8012304:	413921fb 	.word	0x413921fb
 8012308:	3fe00000 	.word	0x3fe00000
 801230c:	08013588 	.word	0x08013588
 8012310:	7fefffff 	.word	0x7fefffff
 8012314:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012318:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801231c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012320:	4620      	mov	r0, r4
 8012322:	460d      	mov	r5, r1
 8012324:	f7ee fc18 	bl	8000b58 <__aeabi_d2iz>
 8012328:	f7ee f8fc 	bl	8000524 <__aeabi_i2d>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4620      	mov	r0, r4
 8012332:	4629      	mov	r1, r5
 8012334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012338:	f7ed ffa6 	bl	8000288 <__aeabi_dsub>
 801233c:	4b21      	ldr	r3, [pc, #132]	; (80123c4 <__ieee754_rem_pio2+0x404>)
 801233e:	2200      	movs	r2, #0
 8012340:	f7ee f95a 	bl	80005f8 <__aeabi_dmul>
 8012344:	460d      	mov	r5, r1
 8012346:	4604      	mov	r4, r0
 8012348:	f7ee fc06 	bl	8000b58 <__aeabi_d2iz>
 801234c:	f7ee f8ea 	bl	8000524 <__aeabi_i2d>
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	4620      	mov	r0, r4
 8012356:	4629      	mov	r1, r5
 8012358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801235c:	f7ed ff94 	bl	8000288 <__aeabi_dsub>
 8012360:	4b18      	ldr	r3, [pc, #96]	; (80123c4 <__ieee754_rem_pio2+0x404>)
 8012362:	2200      	movs	r2, #0
 8012364:	f7ee f948 	bl	80005f8 <__aeabi_dmul>
 8012368:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801236c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012370:	2703      	movs	r7, #3
 8012372:	2400      	movs	r4, #0
 8012374:	2500      	movs	r5, #0
 8012376:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801237a:	4622      	mov	r2, r4
 801237c:	462b      	mov	r3, r5
 801237e:	46b9      	mov	r9, r7
 8012380:	3f01      	subs	r7, #1
 8012382:	f7ee fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012386:	2800      	cmp	r0, #0
 8012388:	d1f5      	bne.n	8012376 <__ieee754_rem_pio2+0x3b6>
 801238a:	4b0f      	ldr	r3, [pc, #60]	; (80123c8 <__ieee754_rem_pio2+0x408>)
 801238c:	9301      	str	r3, [sp, #4]
 801238e:	2302      	movs	r3, #2
 8012390:	9300      	str	r3, [sp, #0]
 8012392:	4632      	mov	r2, r6
 8012394:	464b      	mov	r3, r9
 8012396:	4651      	mov	r1, sl
 8012398:	a804      	add	r0, sp, #16
 801239a:	f000 fa75 	bl	8012888 <__kernel_rem_pio2>
 801239e:	9b02      	ldr	r3, [sp, #8]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	4683      	mov	fp, r0
 80123a4:	f6bf ae4c 	bge.w	8012040 <__ieee754_rem_pio2+0x80>
 80123a8:	e9da 2100 	ldrd	r2, r1, [sl]
 80123ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123b0:	e9ca 2300 	strd	r2, r3, [sl]
 80123b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80123b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80123c0:	e73f      	b.n	8012242 <__ieee754_rem_pio2+0x282>
 80123c2:	bf00      	nop
 80123c4:	41700000 	.word	0x41700000
 80123c8:	08013608 	.word	0x08013608
 80123cc:	00000000 	.word	0x00000000

080123d0 <atan>:
 80123d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	ec55 4b10 	vmov	r4, r5, d0
 80123d8:	4bc3      	ldr	r3, [pc, #780]	; (80126e8 <atan+0x318>)
 80123da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80123de:	429e      	cmp	r6, r3
 80123e0:	46ab      	mov	fp, r5
 80123e2:	dd18      	ble.n	8012416 <atan+0x46>
 80123e4:	4bc1      	ldr	r3, [pc, #772]	; (80126ec <atan+0x31c>)
 80123e6:	429e      	cmp	r6, r3
 80123e8:	dc01      	bgt.n	80123ee <atan+0x1e>
 80123ea:	d109      	bne.n	8012400 <atan+0x30>
 80123ec:	b144      	cbz	r4, 8012400 <atan+0x30>
 80123ee:	4622      	mov	r2, r4
 80123f0:	462b      	mov	r3, r5
 80123f2:	4620      	mov	r0, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	f7ed ff49 	bl	800028c <__adddf3>
 80123fa:	4604      	mov	r4, r0
 80123fc:	460d      	mov	r5, r1
 80123fe:	e006      	b.n	801240e <atan+0x3e>
 8012400:	f1bb 0f00 	cmp.w	fp, #0
 8012404:	f300 8131 	bgt.w	801266a <atan+0x29a>
 8012408:	a59b      	add	r5, pc, #620	; (adr r5, 8012678 <atan+0x2a8>)
 801240a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801240e:	ec45 4b10 	vmov	d0, r4, r5
 8012412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012416:	4bb6      	ldr	r3, [pc, #728]	; (80126f0 <atan+0x320>)
 8012418:	429e      	cmp	r6, r3
 801241a:	dc14      	bgt.n	8012446 <atan+0x76>
 801241c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012420:	429e      	cmp	r6, r3
 8012422:	dc0d      	bgt.n	8012440 <atan+0x70>
 8012424:	a396      	add	r3, pc, #600	; (adr r3, 8012680 <atan+0x2b0>)
 8012426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242a:	ee10 0a10 	vmov	r0, s0
 801242e:	4629      	mov	r1, r5
 8012430:	f7ed ff2c 	bl	800028c <__adddf3>
 8012434:	4baf      	ldr	r3, [pc, #700]	; (80126f4 <atan+0x324>)
 8012436:	2200      	movs	r2, #0
 8012438:	f7ee fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 801243c:	2800      	cmp	r0, #0
 801243e:	d1e6      	bne.n	801240e <atan+0x3e>
 8012440:	f04f 3aff 	mov.w	sl, #4294967295
 8012444:	e02b      	b.n	801249e <atan+0xce>
 8012446:	f000 f963 	bl	8012710 <fabs>
 801244a:	4bab      	ldr	r3, [pc, #684]	; (80126f8 <atan+0x328>)
 801244c:	429e      	cmp	r6, r3
 801244e:	ec55 4b10 	vmov	r4, r5, d0
 8012452:	f300 80bf 	bgt.w	80125d4 <atan+0x204>
 8012456:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801245a:	429e      	cmp	r6, r3
 801245c:	f300 80a0 	bgt.w	80125a0 <atan+0x1d0>
 8012460:	ee10 2a10 	vmov	r2, s0
 8012464:	ee10 0a10 	vmov	r0, s0
 8012468:	462b      	mov	r3, r5
 801246a:	4629      	mov	r1, r5
 801246c:	f7ed ff0e 	bl	800028c <__adddf3>
 8012470:	4ba0      	ldr	r3, [pc, #640]	; (80126f4 <atan+0x324>)
 8012472:	2200      	movs	r2, #0
 8012474:	f7ed ff08 	bl	8000288 <__aeabi_dsub>
 8012478:	2200      	movs	r2, #0
 801247a:	4606      	mov	r6, r0
 801247c:	460f      	mov	r7, r1
 801247e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012482:	4620      	mov	r0, r4
 8012484:	4629      	mov	r1, r5
 8012486:	f7ed ff01 	bl	800028c <__adddf3>
 801248a:	4602      	mov	r2, r0
 801248c:	460b      	mov	r3, r1
 801248e:	4630      	mov	r0, r6
 8012490:	4639      	mov	r1, r7
 8012492:	f7ee f9db 	bl	800084c <__aeabi_ddiv>
 8012496:	f04f 0a00 	mov.w	sl, #0
 801249a:	4604      	mov	r4, r0
 801249c:	460d      	mov	r5, r1
 801249e:	4622      	mov	r2, r4
 80124a0:	462b      	mov	r3, r5
 80124a2:	4620      	mov	r0, r4
 80124a4:	4629      	mov	r1, r5
 80124a6:	f7ee f8a7 	bl	80005f8 <__aeabi_dmul>
 80124aa:	4602      	mov	r2, r0
 80124ac:	460b      	mov	r3, r1
 80124ae:	4680      	mov	r8, r0
 80124b0:	4689      	mov	r9, r1
 80124b2:	f7ee f8a1 	bl	80005f8 <__aeabi_dmul>
 80124b6:	a374      	add	r3, pc, #464	; (adr r3, 8012688 <atan+0x2b8>)
 80124b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124bc:	4606      	mov	r6, r0
 80124be:	460f      	mov	r7, r1
 80124c0:	f7ee f89a 	bl	80005f8 <__aeabi_dmul>
 80124c4:	a372      	add	r3, pc, #456	; (adr r3, 8012690 <atan+0x2c0>)
 80124c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ca:	f7ed fedf 	bl	800028c <__adddf3>
 80124ce:	4632      	mov	r2, r6
 80124d0:	463b      	mov	r3, r7
 80124d2:	f7ee f891 	bl	80005f8 <__aeabi_dmul>
 80124d6:	a370      	add	r3, pc, #448	; (adr r3, 8012698 <atan+0x2c8>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	f7ed fed6 	bl	800028c <__adddf3>
 80124e0:	4632      	mov	r2, r6
 80124e2:	463b      	mov	r3, r7
 80124e4:	f7ee f888 	bl	80005f8 <__aeabi_dmul>
 80124e8:	a36d      	add	r3, pc, #436	; (adr r3, 80126a0 <atan+0x2d0>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	f7ed fecd 	bl	800028c <__adddf3>
 80124f2:	4632      	mov	r2, r6
 80124f4:	463b      	mov	r3, r7
 80124f6:	f7ee f87f 	bl	80005f8 <__aeabi_dmul>
 80124fa:	a36b      	add	r3, pc, #428	; (adr r3, 80126a8 <atan+0x2d8>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	f7ed fec4 	bl	800028c <__adddf3>
 8012504:	4632      	mov	r2, r6
 8012506:	463b      	mov	r3, r7
 8012508:	f7ee f876 	bl	80005f8 <__aeabi_dmul>
 801250c:	a368      	add	r3, pc, #416	; (adr r3, 80126b0 <atan+0x2e0>)
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	f7ed febb 	bl	800028c <__adddf3>
 8012516:	4642      	mov	r2, r8
 8012518:	464b      	mov	r3, r9
 801251a:	f7ee f86d 	bl	80005f8 <__aeabi_dmul>
 801251e:	a366      	add	r3, pc, #408	; (adr r3, 80126b8 <atan+0x2e8>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	4680      	mov	r8, r0
 8012526:	4689      	mov	r9, r1
 8012528:	4630      	mov	r0, r6
 801252a:	4639      	mov	r1, r7
 801252c:	f7ee f864 	bl	80005f8 <__aeabi_dmul>
 8012530:	a363      	add	r3, pc, #396	; (adr r3, 80126c0 <atan+0x2f0>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	f7ed fea7 	bl	8000288 <__aeabi_dsub>
 801253a:	4632      	mov	r2, r6
 801253c:	463b      	mov	r3, r7
 801253e:	f7ee f85b 	bl	80005f8 <__aeabi_dmul>
 8012542:	a361      	add	r3, pc, #388	; (adr r3, 80126c8 <atan+0x2f8>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	f7ed fe9e 	bl	8000288 <__aeabi_dsub>
 801254c:	4632      	mov	r2, r6
 801254e:	463b      	mov	r3, r7
 8012550:	f7ee f852 	bl	80005f8 <__aeabi_dmul>
 8012554:	a35e      	add	r3, pc, #376	; (adr r3, 80126d0 <atan+0x300>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	f7ed fe95 	bl	8000288 <__aeabi_dsub>
 801255e:	4632      	mov	r2, r6
 8012560:	463b      	mov	r3, r7
 8012562:	f7ee f849 	bl	80005f8 <__aeabi_dmul>
 8012566:	a35c      	add	r3, pc, #368	; (adr r3, 80126d8 <atan+0x308>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	f7ed fe8c 	bl	8000288 <__aeabi_dsub>
 8012570:	4632      	mov	r2, r6
 8012572:	463b      	mov	r3, r7
 8012574:	f7ee f840 	bl	80005f8 <__aeabi_dmul>
 8012578:	4602      	mov	r2, r0
 801257a:	460b      	mov	r3, r1
 801257c:	4640      	mov	r0, r8
 801257e:	4649      	mov	r1, r9
 8012580:	f7ed fe84 	bl	800028c <__adddf3>
 8012584:	4622      	mov	r2, r4
 8012586:	462b      	mov	r3, r5
 8012588:	f7ee f836 	bl	80005f8 <__aeabi_dmul>
 801258c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012590:	4602      	mov	r2, r0
 8012592:	460b      	mov	r3, r1
 8012594:	d14b      	bne.n	801262e <atan+0x25e>
 8012596:	4620      	mov	r0, r4
 8012598:	4629      	mov	r1, r5
 801259a:	f7ed fe75 	bl	8000288 <__aeabi_dsub>
 801259e:	e72c      	b.n	80123fa <atan+0x2a>
 80125a0:	ee10 0a10 	vmov	r0, s0
 80125a4:	4b53      	ldr	r3, [pc, #332]	; (80126f4 <atan+0x324>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	4629      	mov	r1, r5
 80125aa:	f7ed fe6d 	bl	8000288 <__aeabi_dsub>
 80125ae:	4b51      	ldr	r3, [pc, #324]	; (80126f4 <atan+0x324>)
 80125b0:	4606      	mov	r6, r0
 80125b2:	460f      	mov	r7, r1
 80125b4:	2200      	movs	r2, #0
 80125b6:	4620      	mov	r0, r4
 80125b8:	4629      	mov	r1, r5
 80125ba:	f7ed fe67 	bl	800028c <__adddf3>
 80125be:	4602      	mov	r2, r0
 80125c0:	460b      	mov	r3, r1
 80125c2:	4630      	mov	r0, r6
 80125c4:	4639      	mov	r1, r7
 80125c6:	f7ee f941 	bl	800084c <__aeabi_ddiv>
 80125ca:	f04f 0a01 	mov.w	sl, #1
 80125ce:	4604      	mov	r4, r0
 80125d0:	460d      	mov	r5, r1
 80125d2:	e764      	b.n	801249e <atan+0xce>
 80125d4:	4b49      	ldr	r3, [pc, #292]	; (80126fc <atan+0x32c>)
 80125d6:	429e      	cmp	r6, r3
 80125d8:	da1d      	bge.n	8012616 <atan+0x246>
 80125da:	ee10 0a10 	vmov	r0, s0
 80125de:	4b48      	ldr	r3, [pc, #288]	; (8012700 <atan+0x330>)
 80125e0:	2200      	movs	r2, #0
 80125e2:	4629      	mov	r1, r5
 80125e4:	f7ed fe50 	bl	8000288 <__aeabi_dsub>
 80125e8:	4b45      	ldr	r3, [pc, #276]	; (8012700 <atan+0x330>)
 80125ea:	4606      	mov	r6, r0
 80125ec:	460f      	mov	r7, r1
 80125ee:	2200      	movs	r2, #0
 80125f0:	4620      	mov	r0, r4
 80125f2:	4629      	mov	r1, r5
 80125f4:	f7ee f800 	bl	80005f8 <__aeabi_dmul>
 80125f8:	4b3e      	ldr	r3, [pc, #248]	; (80126f4 <atan+0x324>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	f7ed fe46 	bl	800028c <__adddf3>
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f7ee f920 	bl	800084c <__aeabi_ddiv>
 801260c:	f04f 0a02 	mov.w	sl, #2
 8012610:	4604      	mov	r4, r0
 8012612:	460d      	mov	r5, r1
 8012614:	e743      	b.n	801249e <atan+0xce>
 8012616:	462b      	mov	r3, r5
 8012618:	ee10 2a10 	vmov	r2, s0
 801261c:	4939      	ldr	r1, [pc, #228]	; (8012704 <atan+0x334>)
 801261e:	2000      	movs	r0, #0
 8012620:	f7ee f914 	bl	800084c <__aeabi_ddiv>
 8012624:	f04f 0a03 	mov.w	sl, #3
 8012628:	4604      	mov	r4, r0
 801262a:	460d      	mov	r5, r1
 801262c:	e737      	b.n	801249e <atan+0xce>
 801262e:	4b36      	ldr	r3, [pc, #216]	; (8012708 <atan+0x338>)
 8012630:	4e36      	ldr	r6, [pc, #216]	; (801270c <atan+0x33c>)
 8012632:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263a:	f7ed fe25 	bl	8000288 <__aeabi_dsub>
 801263e:	4622      	mov	r2, r4
 8012640:	462b      	mov	r3, r5
 8012642:	f7ed fe21 	bl	8000288 <__aeabi_dsub>
 8012646:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012652:	f7ed fe19 	bl	8000288 <__aeabi_dsub>
 8012656:	f1bb 0f00 	cmp.w	fp, #0
 801265a:	4604      	mov	r4, r0
 801265c:	460d      	mov	r5, r1
 801265e:	f6bf aed6 	bge.w	801240e <atan+0x3e>
 8012662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012666:	461d      	mov	r5, r3
 8012668:	e6d1      	b.n	801240e <atan+0x3e>
 801266a:	a51d      	add	r5, pc, #116	; (adr r5, 80126e0 <atan+0x310>)
 801266c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012670:	e6cd      	b.n	801240e <atan+0x3e>
 8012672:	bf00      	nop
 8012674:	f3af 8000 	nop.w
 8012678:	54442d18 	.word	0x54442d18
 801267c:	bff921fb 	.word	0xbff921fb
 8012680:	8800759c 	.word	0x8800759c
 8012684:	7e37e43c 	.word	0x7e37e43c
 8012688:	e322da11 	.word	0xe322da11
 801268c:	3f90ad3a 	.word	0x3f90ad3a
 8012690:	24760deb 	.word	0x24760deb
 8012694:	3fa97b4b 	.word	0x3fa97b4b
 8012698:	a0d03d51 	.word	0xa0d03d51
 801269c:	3fb10d66 	.word	0x3fb10d66
 80126a0:	c54c206e 	.word	0xc54c206e
 80126a4:	3fb745cd 	.word	0x3fb745cd
 80126a8:	920083ff 	.word	0x920083ff
 80126ac:	3fc24924 	.word	0x3fc24924
 80126b0:	5555550d 	.word	0x5555550d
 80126b4:	3fd55555 	.word	0x3fd55555
 80126b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80126bc:	bfa2b444 	.word	0xbfa2b444
 80126c0:	52defd9a 	.word	0x52defd9a
 80126c4:	3fadde2d 	.word	0x3fadde2d
 80126c8:	af749a6d 	.word	0xaf749a6d
 80126cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80126d0:	fe231671 	.word	0xfe231671
 80126d4:	3fbc71c6 	.word	0x3fbc71c6
 80126d8:	9998ebc4 	.word	0x9998ebc4
 80126dc:	3fc99999 	.word	0x3fc99999
 80126e0:	54442d18 	.word	0x54442d18
 80126e4:	3ff921fb 	.word	0x3ff921fb
 80126e8:	440fffff 	.word	0x440fffff
 80126ec:	7ff00000 	.word	0x7ff00000
 80126f0:	3fdbffff 	.word	0x3fdbffff
 80126f4:	3ff00000 	.word	0x3ff00000
 80126f8:	3ff2ffff 	.word	0x3ff2ffff
 80126fc:	40038000 	.word	0x40038000
 8012700:	3ff80000 	.word	0x3ff80000
 8012704:	bff00000 	.word	0xbff00000
 8012708:	08013730 	.word	0x08013730
 801270c:	08013710 	.word	0x08013710

08012710 <fabs>:
 8012710:	ec51 0b10 	vmov	r0, r1, d0
 8012714:	ee10 2a10 	vmov	r2, s0
 8012718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801271c:	ec43 2b10 	vmov	d0, r2, r3
 8012720:	4770      	bx	lr
 8012722:	0000      	movs	r0, r0
 8012724:	0000      	movs	r0, r0
	...

08012728 <scalbn>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	ec55 4b10 	vmov	r4, r5, d0
 801272e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012732:	4606      	mov	r6, r0
 8012734:	462b      	mov	r3, r5
 8012736:	b999      	cbnz	r1, 8012760 <scalbn+0x38>
 8012738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801273c:	4323      	orrs	r3, r4
 801273e:	d03f      	beq.n	80127c0 <scalbn+0x98>
 8012740:	4b35      	ldr	r3, [pc, #212]	; (8012818 <scalbn+0xf0>)
 8012742:	4629      	mov	r1, r5
 8012744:	ee10 0a10 	vmov	r0, s0
 8012748:	2200      	movs	r2, #0
 801274a:	f7ed ff55 	bl	80005f8 <__aeabi_dmul>
 801274e:	4b33      	ldr	r3, [pc, #204]	; (801281c <scalbn+0xf4>)
 8012750:	429e      	cmp	r6, r3
 8012752:	4604      	mov	r4, r0
 8012754:	460d      	mov	r5, r1
 8012756:	da10      	bge.n	801277a <scalbn+0x52>
 8012758:	a327      	add	r3, pc, #156	; (adr r3, 80127f8 <scalbn+0xd0>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	e01f      	b.n	80127a0 <scalbn+0x78>
 8012760:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012764:	4291      	cmp	r1, r2
 8012766:	d10c      	bne.n	8012782 <scalbn+0x5a>
 8012768:	ee10 2a10 	vmov	r2, s0
 801276c:	4620      	mov	r0, r4
 801276e:	4629      	mov	r1, r5
 8012770:	f7ed fd8c 	bl	800028c <__adddf3>
 8012774:	4604      	mov	r4, r0
 8012776:	460d      	mov	r5, r1
 8012778:	e022      	b.n	80127c0 <scalbn+0x98>
 801277a:	460b      	mov	r3, r1
 801277c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012780:	3936      	subs	r1, #54	; 0x36
 8012782:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012786:	4296      	cmp	r6, r2
 8012788:	dd0d      	ble.n	80127a6 <scalbn+0x7e>
 801278a:	2d00      	cmp	r5, #0
 801278c:	a11c      	add	r1, pc, #112	; (adr r1, 8012800 <scalbn+0xd8>)
 801278e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012792:	da02      	bge.n	801279a <scalbn+0x72>
 8012794:	a11c      	add	r1, pc, #112	; (adr r1, 8012808 <scalbn+0xe0>)
 8012796:	e9d1 0100 	ldrd	r0, r1, [r1]
 801279a:	a319      	add	r3, pc, #100	; (adr r3, 8012800 <scalbn+0xd8>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	f7ed ff2a 	bl	80005f8 <__aeabi_dmul>
 80127a4:	e7e6      	b.n	8012774 <scalbn+0x4c>
 80127a6:	1872      	adds	r2, r6, r1
 80127a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80127ac:	428a      	cmp	r2, r1
 80127ae:	dcec      	bgt.n	801278a <scalbn+0x62>
 80127b0:	2a00      	cmp	r2, #0
 80127b2:	dd08      	ble.n	80127c6 <scalbn+0x9e>
 80127b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127c0:	ec45 4b10 	vmov	d0, r4, r5
 80127c4:	bd70      	pop	{r4, r5, r6, pc}
 80127c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80127ca:	da08      	bge.n	80127de <scalbn+0xb6>
 80127cc:	2d00      	cmp	r5, #0
 80127ce:	a10a      	add	r1, pc, #40	; (adr r1, 80127f8 <scalbn+0xd0>)
 80127d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127d4:	dac0      	bge.n	8012758 <scalbn+0x30>
 80127d6:	a10e      	add	r1, pc, #56	; (adr r1, 8012810 <scalbn+0xe8>)
 80127d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127dc:	e7bc      	b.n	8012758 <scalbn+0x30>
 80127de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127e2:	3236      	adds	r2, #54	; 0x36
 80127e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80127ec:	4620      	mov	r0, r4
 80127ee:	4b0c      	ldr	r3, [pc, #48]	; (8012820 <scalbn+0xf8>)
 80127f0:	2200      	movs	r2, #0
 80127f2:	e7d5      	b.n	80127a0 <scalbn+0x78>
 80127f4:	f3af 8000 	nop.w
 80127f8:	c2f8f359 	.word	0xc2f8f359
 80127fc:	01a56e1f 	.word	0x01a56e1f
 8012800:	8800759c 	.word	0x8800759c
 8012804:	7e37e43c 	.word	0x7e37e43c
 8012808:	8800759c 	.word	0x8800759c
 801280c:	fe37e43c 	.word	0xfe37e43c
 8012810:	c2f8f359 	.word	0xc2f8f359
 8012814:	81a56e1f 	.word	0x81a56e1f
 8012818:	43500000 	.word	0x43500000
 801281c:	ffff3cb0 	.word	0xffff3cb0
 8012820:	3c900000 	.word	0x3c900000

08012824 <with_errno>:
 8012824:	b570      	push	{r4, r5, r6, lr}
 8012826:	4604      	mov	r4, r0
 8012828:	460d      	mov	r5, r1
 801282a:	4616      	mov	r6, r2
 801282c:	f7fc f96a 	bl	800eb04 <__errno>
 8012830:	4629      	mov	r1, r5
 8012832:	6006      	str	r6, [r0, #0]
 8012834:	4620      	mov	r0, r4
 8012836:	bd70      	pop	{r4, r5, r6, pc}

08012838 <xflow>:
 8012838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801283a:	4614      	mov	r4, r2
 801283c:	461d      	mov	r5, r3
 801283e:	b108      	cbz	r0, 8012844 <xflow+0xc>
 8012840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012844:	e9cd 2300 	strd	r2, r3, [sp]
 8012848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801284c:	4620      	mov	r0, r4
 801284e:	4629      	mov	r1, r5
 8012850:	f7ed fed2 	bl	80005f8 <__aeabi_dmul>
 8012854:	2222      	movs	r2, #34	; 0x22
 8012856:	b003      	add	sp, #12
 8012858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801285c:	f7ff bfe2 	b.w	8012824 <with_errno>

08012860 <__math_uflow>:
 8012860:	b508      	push	{r3, lr}
 8012862:	2200      	movs	r2, #0
 8012864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012868:	f7ff ffe6 	bl	8012838 <xflow>
 801286c:	ec41 0b10 	vmov	d0, r0, r1
 8012870:	bd08      	pop	{r3, pc}

08012872 <__math_oflow>:
 8012872:	b508      	push	{r3, lr}
 8012874:	2200      	movs	r2, #0
 8012876:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801287a:	f7ff ffdd 	bl	8012838 <xflow>
 801287e:	ec41 0b10 	vmov	d0, r0, r1
 8012882:	bd08      	pop	{r3, pc}
 8012884:	0000      	movs	r0, r0
	...

08012888 <__kernel_rem_pio2>:
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	ed2d 8b02 	vpush	{d8}
 8012890:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012894:	f112 0f14 	cmn.w	r2, #20
 8012898:	9306      	str	r3, [sp, #24]
 801289a:	9104      	str	r1, [sp, #16]
 801289c:	4bc2      	ldr	r3, [pc, #776]	; (8012ba8 <__kernel_rem_pio2+0x320>)
 801289e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80128a0:	9009      	str	r0, [sp, #36]	; 0x24
 80128a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	9b06      	ldr	r3, [sp, #24]
 80128aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80128ae:	bfa8      	it	ge
 80128b0:	1ed4      	subge	r4, r2, #3
 80128b2:	9305      	str	r3, [sp, #20]
 80128b4:	bfb2      	itee	lt
 80128b6:	2400      	movlt	r4, #0
 80128b8:	2318      	movge	r3, #24
 80128ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80128be:	f06f 0317 	mvn.w	r3, #23
 80128c2:	fb04 3303 	mla	r3, r4, r3, r3
 80128c6:	eb03 0a02 	add.w	sl, r3, r2
 80128ca:	9b00      	ldr	r3, [sp, #0]
 80128cc:	9a05      	ldr	r2, [sp, #20]
 80128ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012b98 <__kernel_rem_pio2+0x310>
 80128d2:	eb03 0802 	add.w	r8, r3, r2
 80128d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80128d8:	1aa7      	subs	r7, r4, r2
 80128da:	ae20      	add	r6, sp, #128	; 0x80
 80128dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80128e0:	2500      	movs	r5, #0
 80128e2:	4545      	cmp	r5, r8
 80128e4:	dd13      	ble.n	801290e <__kernel_rem_pio2+0x86>
 80128e6:	9b06      	ldr	r3, [sp, #24]
 80128e8:	aa20      	add	r2, sp, #128	; 0x80
 80128ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80128ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80128f2:	f04f 0800 	mov.w	r8, #0
 80128f6:	9b00      	ldr	r3, [sp, #0]
 80128f8:	4598      	cmp	r8, r3
 80128fa:	dc31      	bgt.n	8012960 <__kernel_rem_pio2+0xd8>
 80128fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012b98 <__kernel_rem_pio2+0x310>
 8012900:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012908:	462f      	mov	r7, r5
 801290a:	2600      	movs	r6, #0
 801290c:	e01b      	b.n	8012946 <__kernel_rem_pio2+0xbe>
 801290e:	42ef      	cmn	r7, r5
 8012910:	d407      	bmi.n	8012922 <__kernel_rem_pio2+0x9a>
 8012912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012916:	f7ed fe05 	bl	8000524 <__aeabi_i2d>
 801291a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801291e:	3501      	adds	r5, #1
 8012920:	e7df      	b.n	80128e2 <__kernel_rem_pio2+0x5a>
 8012922:	ec51 0b18 	vmov	r0, r1, d8
 8012926:	e7f8      	b.n	801291a <__kernel_rem_pio2+0x92>
 8012928:	e9d7 2300 	ldrd	r2, r3, [r7]
 801292c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012930:	f7ed fe62 	bl	80005f8 <__aeabi_dmul>
 8012934:	4602      	mov	r2, r0
 8012936:	460b      	mov	r3, r1
 8012938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801293c:	f7ed fca6 	bl	800028c <__adddf3>
 8012940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012944:	3601      	adds	r6, #1
 8012946:	9b05      	ldr	r3, [sp, #20]
 8012948:	429e      	cmp	r6, r3
 801294a:	f1a7 0708 	sub.w	r7, r7, #8
 801294e:	ddeb      	ble.n	8012928 <__kernel_rem_pio2+0xa0>
 8012950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012954:	f108 0801 	add.w	r8, r8, #1
 8012958:	ecab 7b02 	vstmia	fp!, {d7}
 801295c:	3508      	adds	r5, #8
 801295e:	e7ca      	b.n	80128f6 <__kernel_rem_pio2+0x6e>
 8012960:	9b00      	ldr	r3, [sp, #0]
 8012962:	aa0c      	add	r2, sp, #48	; 0x30
 8012964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012968:	930b      	str	r3, [sp, #44]	; 0x2c
 801296a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801296c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012970:	9c00      	ldr	r4, [sp, #0]
 8012972:	930a      	str	r3, [sp, #40]	; 0x28
 8012974:	00e3      	lsls	r3, r4, #3
 8012976:	9308      	str	r3, [sp, #32]
 8012978:	ab98      	add	r3, sp, #608	; 0x260
 801297a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801297e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012982:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012986:	ab70      	add	r3, sp, #448	; 0x1c0
 8012988:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801298c:	46c3      	mov	fp, r8
 801298e:	46a1      	mov	r9, r4
 8012990:	f1b9 0f00 	cmp.w	r9, #0
 8012994:	f1a5 0508 	sub.w	r5, r5, #8
 8012998:	dc77      	bgt.n	8012a8a <__kernel_rem_pio2+0x202>
 801299a:	ec47 6b10 	vmov	d0, r6, r7
 801299e:	4650      	mov	r0, sl
 80129a0:	f7ff fec2 	bl	8012728 <scalbn>
 80129a4:	ec57 6b10 	vmov	r6, r7, d0
 80129a8:	2200      	movs	r2, #0
 80129aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80129ae:	ee10 0a10 	vmov	r0, s0
 80129b2:	4639      	mov	r1, r7
 80129b4:	f7ed fe20 	bl	80005f8 <__aeabi_dmul>
 80129b8:	ec41 0b10 	vmov	d0, r0, r1
 80129bc:	f000 fab4 	bl	8012f28 <floor>
 80129c0:	4b7a      	ldr	r3, [pc, #488]	; (8012bac <__kernel_rem_pio2+0x324>)
 80129c2:	ec51 0b10 	vmov	r0, r1, d0
 80129c6:	2200      	movs	r2, #0
 80129c8:	f7ed fe16 	bl	80005f8 <__aeabi_dmul>
 80129cc:	4602      	mov	r2, r0
 80129ce:	460b      	mov	r3, r1
 80129d0:	4630      	mov	r0, r6
 80129d2:	4639      	mov	r1, r7
 80129d4:	f7ed fc58 	bl	8000288 <__aeabi_dsub>
 80129d8:	460f      	mov	r7, r1
 80129da:	4606      	mov	r6, r0
 80129dc:	f7ee f8bc 	bl	8000b58 <__aeabi_d2iz>
 80129e0:	9002      	str	r0, [sp, #8]
 80129e2:	f7ed fd9f 	bl	8000524 <__aeabi_i2d>
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	4630      	mov	r0, r6
 80129ec:	4639      	mov	r1, r7
 80129ee:	f7ed fc4b 	bl	8000288 <__aeabi_dsub>
 80129f2:	f1ba 0f00 	cmp.w	sl, #0
 80129f6:	4606      	mov	r6, r0
 80129f8:	460f      	mov	r7, r1
 80129fa:	dd6d      	ble.n	8012ad8 <__kernel_rem_pio2+0x250>
 80129fc:	1e61      	subs	r1, r4, #1
 80129fe:	ab0c      	add	r3, sp, #48	; 0x30
 8012a00:	9d02      	ldr	r5, [sp, #8]
 8012a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a06:	f1ca 0018 	rsb	r0, sl, #24
 8012a0a:	fa43 f200 	asr.w	r2, r3, r0
 8012a0e:	4415      	add	r5, r2
 8012a10:	4082      	lsls	r2, r0
 8012a12:	1a9b      	subs	r3, r3, r2
 8012a14:	aa0c      	add	r2, sp, #48	; 0x30
 8012a16:	9502      	str	r5, [sp, #8]
 8012a18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012a1c:	f1ca 0217 	rsb	r2, sl, #23
 8012a20:	fa43 fb02 	asr.w	fp, r3, r2
 8012a24:	f1bb 0f00 	cmp.w	fp, #0
 8012a28:	dd65      	ble.n	8012af6 <__kernel_rem_pio2+0x26e>
 8012a2a:	9b02      	ldr	r3, [sp, #8]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	3301      	adds	r3, #1
 8012a30:	9302      	str	r3, [sp, #8]
 8012a32:	4615      	mov	r5, r2
 8012a34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012a38:	4294      	cmp	r4, r2
 8012a3a:	f300 809f 	bgt.w	8012b7c <__kernel_rem_pio2+0x2f4>
 8012a3e:	f1ba 0f00 	cmp.w	sl, #0
 8012a42:	dd07      	ble.n	8012a54 <__kernel_rem_pio2+0x1cc>
 8012a44:	f1ba 0f01 	cmp.w	sl, #1
 8012a48:	f000 80c1 	beq.w	8012bce <__kernel_rem_pio2+0x346>
 8012a4c:	f1ba 0f02 	cmp.w	sl, #2
 8012a50:	f000 80c7 	beq.w	8012be2 <__kernel_rem_pio2+0x35a>
 8012a54:	f1bb 0f02 	cmp.w	fp, #2
 8012a58:	d14d      	bne.n	8012af6 <__kernel_rem_pio2+0x26e>
 8012a5a:	4632      	mov	r2, r6
 8012a5c:	463b      	mov	r3, r7
 8012a5e:	4954      	ldr	r1, [pc, #336]	; (8012bb0 <__kernel_rem_pio2+0x328>)
 8012a60:	2000      	movs	r0, #0
 8012a62:	f7ed fc11 	bl	8000288 <__aeabi_dsub>
 8012a66:	4606      	mov	r6, r0
 8012a68:	460f      	mov	r7, r1
 8012a6a:	2d00      	cmp	r5, #0
 8012a6c:	d043      	beq.n	8012af6 <__kernel_rem_pio2+0x26e>
 8012a6e:	4650      	mov	r0, sl
 8012a70:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012ba0 <__kernel_rem_pio2+0x318>
 8012a74:	f7ff fe58 	bl	8012728 <scalbn>
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	ec53 2b10 	vmov	r2, r3, d0
 8012a80:	f7ed fc02 	bl	8000288 <__aeabi_dsub>
 8012a84:	4606      	mov	r6, r0
 8012a86:	460f      	mov	r7, r1
 8012a88:	e035      	b.n	8012af6 <__kernel_rem_pio2+0x26e>
 8012a8a:	4b4a      	ldr	r3, [pc, #296]	; (8012bb4 <__kernel_rem_pio2+0x32c>)
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4630      	mov	r0, r6
 8012a90:	4639      	mov	r1, r7
 8012a92:	f7ed fdb1 	bl	80005f8 <__aeabi_dmul>
 8012a96:	f7ee f85f 	bl	8000b58 <__aeabi_d2iz>
 8012a9a:	f7ed fd43 	bl	8000524 <__aeabi_i2d>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	ec43 2b18 	vmov	d8, r2, r3
 8012aa6:	4b44      	ldr	r3, [pc, #272]	; (8012bb8 <__kernel_rem_pio2+0x330>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f7ed fda5 	bl	80005f8 <__aeabi_dmul>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	4639      	mov	r1, r7
 8012ab6:	f7ed fbe7 	bl	8000288 <__aeabi_dsub>
 8012aba:	f7ee f84d 	bl	8000b58 <__aeabi_d2iz>
 8012abe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ac2:	f84b 0b04 	str.w	r0, [fp], #4
 8012ac6:	ec51 0b18 	vmov	r0, r1, d8
 8012aca:	f7ed fbdf 	bl	800028c <__adddf3>
 8012ace:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	460f      	mov	r7, r1
 8012ad6:	e75b      	b.n	8012990 <__kernel_rem_pio2+0x108>
 8012ad8:	d106      	bne.n	8012ae8 <__kernel_rem_pio2+0x260>
 8012ada:	1e63      	subs	r3, r4, #1
 8012adc:	aa0c      	add	r2, sp, #48	; 0x30
 8012ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ae2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8012ae6:	e79d      	b.n	8012a24 <__kernel_rem_pio2+0x19c>
 8012ae8:	4b34      	ldr	r3, [pc, #208]	; (8012bbc <__kernel_rem_pio2+0x334>)
 8012aea:	2200      	movs	r2, #0
 8012aec:	f7ee f80a 	bl	8000b04 <__aeabi_dcmpge>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d140      	bne.n	8012b76 <__kernel_rem_pio2+0x2ee>
 8012af4:	4683      	mov	fp, r0
 8012af6:	2200      	movs	r2, #0
 8012af8:	2300      	movs	r3, #0
 8012afa:	4630      	mov	r0, r6
 8012afc:	4639      	mov	r1, r7
 8012afe:	f7ed ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	f000 80c1 	beq.w	8012c8a <__kernel_rem_pio2+0x402>
 8012b08:	1e65      	subs	r5, r4, #1
 8012b0a:	462b      	mov	r3, r5
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	9900      	ldr	r1, [sp, #0]
 8012b10:	428b      	cmp	r3, r1
 8012b12:	da6d      	bge.n	8012bf0 <__kernel_rem_pio2+0x368>
 8012b14:	2a00      	cmp	r2, #0
 8012b16:	f000 808a 	beq.w	8012c2e <__kernel_rem_pio2+0x3a6>
 8012b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8012b1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012b20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 80ae 	beq.w	8012c86 <__kernel_rem_pio2+0x3fe>
 8012b2a:	4650      	mov	r0, sl
 8012b2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012ba0 <__kernel_rem_pio2+0x318>
 8012b30:	f7ff fdfa 	bl	8012728 <scalbn>
 8012b34:	1c6b      	adds	r3, r5, #1
 8012b36:	00da      	lsls	r2, r3, #3
 8012b38:	9205      	str	r2, [sp, #20]
 8012b3a:	ec57 6b10 	vmov	r6, r7, d0
 8012b3e:	aa70      	add	r2, sp, #448	; 0x1c0
 8012b40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8012bb4 <__kernel_rem_pio2+0x32c>
 8012b44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012b48:	462c      	mov	r4, r5
 8012b4a:	f04f 0800 	mov.w	r8, #0
 8012b4e:	2c00      	cmp	r4, #0
 8012b50:	f280 80d4 	bge.w	8012cfc <__kernel_rem_pio2+0x474>
 8012b54:	462c      	mov	r4, r5
 8012b56:	2c00      	cmp	r4, #0
 8012b58:	f2c0 8102 	blt.w	8012d60 <__kernel_rem_pio2+0x4d8>
 8012b5c:	4b18      	ldr	r3, [pc, #96]	; (8012bc0 <__kernel_rem_pio2+0x338>)
 8012b5e:	461e      	mov	r6, r3
 8012b60:	ab70      	add	r3, sp, #448	; 0x1c0
 8012b62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8012b66:	1b2b      	subs	r3, r5, r4
 8012b68:	f04f 0900 	mov.w	r9, #0
 8012b6c:	f04f 0a00 	mov.w	sl, #0
 8012b70:	2700      	movs	r7, #0
 8012b72:	9306      	str	r3, [sp, #24]
 8012b74:	e0e6      	b.n	8012d44 <__kernel_rem_pio2+0x4bc>
 8012b76:	f04f 0b02 	mov.w	fp, #2
 8012b7a:	e756      	b.n	8012a2a <__kernel_rem_pio2+0x1a2>
 8012b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012b80:	bb05      	cbnz	r5, 8012bc4 <__kernel_rem_pio2+0x33c>
 8012b82:	b123      	cbz	r3, 8012b8e <__kernel_rem_pio2+0x306>
 8012b84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012b88:	f8c8 3000 	str.w	r3, [r8]
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	3201      	adds	r2, #1
 8012b90:	f108 0804 	add.w	r8, r8, #4
 8012b94:	461d      	mov	r5, r3
 8012b96:	e74f      	b.n	8012a38 <__kernel_rem_pio2+0x1b0>
	...
 8012ba4:	3ff00000 	.word	0x3ff00000
 8012ba8:	08013790 	.word	0x08013790
 8012bac:	40200000 	.word	0x40200000
 8012bb0:	3ff00000 	.word	0x3ff00000
 8012bb4:	3e700000 	.word	0x3e700000
 8012bb8:	41700000 	.word	0x41700000
 8012bbc:	3fe00000 	.word	0x3fe00000
 8012bc0:	08013750 	.word	0x08013750
 8012bc4:	1acb      	subs	r3, r1, r3
 8012bc6:	f8c8 3000 	str.w	r3, [r8]
 8012bca:	462b      	mov	r3, r5
 8012bcc:	e7df      	b.n	8012b8e <__kernel_rem_pio2+0x306>
 8012bce:	1e62      	subs	r2, r4, #1
 8012bd0:	ab0c      	add	r3, sp, #48	; 0x30
 8012bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bda:	a90c      	add	r1, sp, #48	; 0x30
 8012bdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012be0:	e738      	b.n	8012a54 <__kernel_rem_pio2+0x1cc>
 8012be2:	1e62      	subs	r2, r4, #1
 8012be4:	ab0c      	add	r3, sp, #48	; 0x30
 8012be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012bee:	e7f4      	b.n	8012bda <__kernel_rem_pio2+0x352>
 8012bf0:	a90c      	add	r1, sp, #48	; 0x30
 8012bf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	430a      	orrs	r2, r1
 8012bfa:	e788      	b.n	8012b0e <__kernel_rem_pio2+0x286>
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012c02:	2900      	cmp	r1, #0
 8012c04:	d0fa      	beq.n	8012bfc <__kernel_rem_pio2+0x374>
 8012c06:	9a08      	ldr	r2, [sp, #32]
 8012c08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012c0c:	446a      	add	r2, sp
 8012c0e:	3a98      	subs	r2, #152	; 0x98
 8012c10:	9208      	str	r2, [sp, #32]
 8012c12:	9a06      	ldr	r2, [sp, #24]
 8012c14:	a920      	add	r1, sp, #128	; 0x80
 8012c16:	18a2      	adds	r2, r4, r2
 8012c18:	18e3      	adds	r3, r4, r3
 8012c1a:	f104 0801 	add.w	r8, r4, #1
 8012c1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012c22:	9302      	str	r3, [sp, #8]
 8012c24:	9b02      	ldr	r3, [sp, #8]
 8012c26:	4543      	cmp	r3, r8
 8012c28:	da04      	bge.n	8012c34 <__kernel_rem_pio2+0x3ac>
 8012c2a:	461c      	mov	r4, r3
 8012c2c:	e6a2      	b.n	8012974 <__kernel_rem_pio2+0xec>
 8012c2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c30:	2301      	movs	r3, #1
 8012c32:	e7e4      	b.n	8012bfe <__kernel_rem_pio2+0x376>
 8012c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012c3a:	f7ed fc73 	bl	8000524 <__aeabi_i2d>
 8012c3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c44:	46ab      	mov	fp, r5
 8012c46:	461c      	mov	r4, r3
 8012c48:	f04f 0900 	mov.w	r9, #0
 8012c4c:	2600      	movs	r6, #0
 8012c4e:	2700      	movs	r7, #0
 8012c50:	9b05      	ldr	r3, [sp, #20]
 8012c52:	4599      	cmp	r9, r3
 8012c54:	dd06      	ble.n	8012c64 <__kernel_rem_pio2+0x3dc>
 8012c56:	9b08      	ldr	r3, [sp, #32]
 8012c58:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012c5c:	f108 0801 	add.w	r8, r8, #1
 8012c60:	9308      	str	r3, [sp, #32]
 8012c62:	e7df      	b.n	8012c24 <__kernel_rem_pio2+0x39c>
 8012c64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012c68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012c6c:	f7ed fcc4 	bl	80005f8 <__aeabi_dmul>
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	4630      	mov	r0, r6
 8012c76:	4639      	mov	r1, r7
 8012c78:	f7ed fb08 	bl	800028c <__adddf3>
 8012c7c:	f109 0901 	add.w	r9, r9, #1
 8012c80:	4606      	mov	r6, r0
 8012c82:	460f      	mov	r7, r1
 8012c84:	e7e4      	b.n	8012c50 <__kernel_rem_pio2+0x3c8>
 8012c86:	3d01      	subs	r5, #1
 8012c88:	e747      	b.n	8012b1a <__kernel_rem_pio2+0x292>
 8012c8a:	ec47 6b10 	vmov	d0, r6, r7
 8012c8e:	f1ca 0000 	rsb	r0, sl, #0
 8012c92:	f7ff fd49 	bl	8012728 <scalbn>
 8012c96:	ec57 6b10 	vmov	r6, r7, d0
 8012c9a:	4ba0      	ldr	r3, [pc, #640]	; (8012f1c <__kernel_rem_pio2+0x694>)
 8012c9c:	ee10 0a10 	vmov	r0, s0
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	f7ed ff2e 	bl	8000b04 <__aeabi_dcmpge>
 8012ca8:	b1f8      	cbz	r0, 8012cea <__kernel_rem_pio2+0x462>
 8012caa:	4b9d      	ldr	r3, [pc, #628]	; (8012f20 <__kernel_rem_pio2+0x698>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	4630      	mov	r0, r6
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	f7ed fca1 	bl	80005f8 <__aeabi_dmul>
 8012cb6:	f7ed ff4f 	bl	8000b58 <__aeabi_d2iz>
 8012cba:	4680      	mov	r8, r0
 8012cbc:	f7ed fc32 	bl	8000524 <__aeabi_i2d>
 8012cc0:	4b96      	ldr	r3, [pc, #600]	; (8012f1c <__kernel_rem_pio2+0x694>)
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f7ed fc98 	bl	80005f8 <__aeabi_dmul>
 8012cc8:	460b      	mov	r3, r1
 8012cca:	4602      	mov	r2, r0
 8012ccc:	4639      	mov	r1, r7
 8012cce:	4630      	mov	r0, r6
 8012cd0:	f7ed fada 	bl	8000288 <__aeabi_dsub>
 8012cd4:	f7ed ff40 	bl	8000b58 <__aeabi_d2iz>
 8012cd8:	1c65      	adds	r5, r4, #1
 8012cda:	ab0c      	add	r3, sp, #48	; 0x30
 8012cdc:	f10a 0a18 	add.w	sl, sl, #24
 8012ce0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ce4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012ce8:	e71f      	b.n	8012b2a <__kernel_rem_pio2+0x2a2>
 8012cea:	4630      	mov	r0, r6
 8012cec:	4639      	mov	r1, r7
 8012cee:	f7ed ff33 	bl	8000b58 <__aeabi_d2iz>
 8012cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8012cf4:	4625      	mov	r5, r4
 8012cf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012cfa:	e716      	b.n	8012b2a <__kernel_rem_pio2+0x2a2>
 8012cfc:	ab0c      	add	r3, sp, #48	; 0x30
 8012cfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012d02:	f7ed fc0f 	bl	8000524 <__aeabi_i2d>
 8012d06:	4632      	mov	r2, r6
 8012d08:	463b      	mov	r3, r7
 8012d0a:	f7ed fc75 	bl	80005f8 <__aeabi_dmul>
 8012d0e:	4642      	mov	r2, r8
 8012d10:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012d14:	464b      	mov	r3, r9
 8012d16:	4630      	mov	r0, r6
 8012d18:	4639      	mov	r1, r7
 8012d1a:	f7ed fc6d 	bl	80005f8 <__aeabi_dmul>
 8012d1e:	3c01      	subs	r4, #1
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	e713      	b.n	8012b4e <__kernel_rem_pio2+0x2c6>
 8012d26:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012d2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012d2e:	f7ed fc63 	bl	80005f8 <__aeabi_dmul>
 8012d32:	4602      	mov	r2, r0
 8012d34:	460b      	mov	r3, r1
 8012d36:	4648      	mov	r0, r9
 8012d38:	4651      	mov	r1, sl
 8012d3a:	f7ed faa7 	bl	800028c <__adddf3>
 8012d3e:	3701      	adds	r7, #1
 8012d40:	4681      	mov	r9, r0
 8012d42:	468a      	mov	sl, r1
 8012d44:	9b00      	ldr	r3, [sp, #0]
 8012d46:	429f      	cmp	r7, r3
 8012d48:	dc02      	bgt.n	8012d50 <__kernel_rem_pio2+0x4c8>
 8012d4a:	9b06      	ldr	r3, [sp, #24]
 8012d4c:	429f      	cmp	r7, r3
 8012d4e:	ddea      	ble.n	8012d26 <__kernel_rem_pio2+0x49e>
 8012d50:	9a06      	ldr	r2, [sp, #24]
 8012d52:	ab48      	add	r3, sp, #288	; 0x120
 8012d54:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8012d58:	e9c6 9a00 	strd	r9, sl, [r6]
 8012d5c:	3c01      	subs	r4, #1
 8012d5e:	e6fa      	b.n	8012b56 <__kernel_rem_pio2+0x2ce>
 8012d60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	dc0b      	bgt.n	8012d7e <__kernel_rem_pio2+0x4f6>
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	dc39      	bgt.n	8012dde <__kernel_rem_pio2+0x556>
 8012d6a:	d05d      	beq.n	8012e28 <__kernel_rem_pio2+0x5a0>
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	f003 0007 	and.w	r0, r3, #7
 8012d72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012d76:	ecbd 8b02 	vpop	{d8}
 8012d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d1f3      	bne.n	8012d6c <__kernel_rem_pio2+0x4e4>
 8012d84:	9b05      	ldr	r3, [sp, #20]
 8012d86:	9500      	str	r5, [sp, #0]
 8012d88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8012d8c:	eb0d 0403 	add.w	r4, sp, r3
 8012d90:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8012d94:	46a2      	mov	sl, r4
 8012d96:	9b00      	ldr	r3, [sp, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f1aa 0a08 	sub.w	sl, sl, #8
 8012d9e:	dc69      	bgt.n	8012e74 <__kernel_rem_pio2+0x5ec>
 8012da0:	46aa      	mov	sl, r5
 8012da2:	f1ba 0f01 	cmp.w	sl, #1
 8012da6:	f1a4 0408 	sub.w	r4, r4, #8
 8012daa:	f300 8083 	bgt.w	8012eb4 <__kernel_rem_pio2+0x62c>
 8012dae:	9c05      	ldr	r4, [sp, #20]
 8012db0:	ab48      	add	r3, sp, #288	; 0x120
 8012db2:	441c      	add	r4, r3
 8012db4:	2000      	movs	r0, #0
 8012db6:	2100      	movs	r1, #0
 8012db8:	2d01      	cmp	r5, #1
 8012dba:	f300 809a 	bgt.w	8012ef2 <__kernel_rem_pio2+0x66a>
 8012dbe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8012dc2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012dc6:	f1bb 0f00 	cmp.w	fp, #0
 8012dca:	f040 8098 	bne.w	8012efe <__kernel_rem_pio2+0x676>
 8012dce:	9b04      	ldr	r3, [sp, #16]
 8012dd0:	e9c3 7800 	strd	r7, r8, [r3]
 8012dd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012dd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012ddc:	e7c6      	b.n	8012d6c <__kernel_rem_pio2+0x4e4>
 8012dde:	9e05      	ldr	r6, [sp, #20]
 8012de0:	ab48      	add	r3, sp, #288	; 0x120
 8012de2:	441e      	add	r6, r3
 8012de4:	462c      	mov	r4, r5
 8012de6:	2000      	movs	r0, #0
 8012de8:	2100      	movs	r1, #0
 8012dea:	2c00      	cmp	r4, #0
 8012dec:	da33      	bge.n	8012e56 <__kernel_rem_pio2+0x5ce>
 8012dee:	f1bb 0f00 	cmp.w	fp, #0
 8012df2:	d036      	beq.n	8012e62 <__kernel_rem_pio2+0x5da>
 8012df4:	4602      	mov	r2, r0
 8012df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dfa:	9c04      	ldr	r4, [sp, #16]
 8012dfc:	e9c4 2300 	strd	r2, r3, [r4]
 8012e00:	4602      	mov	r2, r0
 8012e02:	460b      	mov	r3, r1
 8012e04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012e08:	f7ed fa3e 	bl	8000288 <__aeabi_dsub>
 8012e0c:	ae4a      	add	r6, sp, #296	; 0x128
 8012e0e:	2401      	movs	r4, #1
 8012e10:	42a5      	cmp	r5, r4
 8012e12:	da29      	bge.n	8012e68 <__kernel_rem_pio2+0x5e0>
 8012e14:	f1bb 0f00 	cmp.w	fp, #0
 8012e18:	d002      	beq.n	8012e20 <__kernel_rem_pio2+0x598>
 8012e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e1e:	4619      	mov	r1, r3
 8012e20:	9b04      	ldr	r3, [sp, #16]
 8012e22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e26:	e7a1      	b.n	8012d6c <__kernel_rem_pio2+0x4e4>
 8012e28:	9c05      	ldr	r4, [sp, #20]
 8012e2a:	ab48      	add	r3, sp, #288	; 0x120
 8012e2c:	441c      	add	r4, r3
 8012e2e:	2000      	movs	r0, #0
 8012e30:	2100      	movs	r1, #0
 8012e32:	2d00      	cmp	r5, #0
 8012e34:	da09      	bge.n	8012e4a <__kernel_rem_pio2+0x5c2>
 8012e36:	f1bb 0f00 	cmp.w	fp, #0
 8012e3a:	d002      	beq.n	8012e42 <__kernel_rem_pio2+0x5ba>
 8012e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e40:	4619      	mov	r1, r3
 8012e42:	9b04      	ldr	r3, [sp, #16]
 8012e44:	e9c3 0100 	strd	r0, r1, [r3]
 8012e48:	e790      	b.n	8012d6c <__kernel_rem_pio2+0x4e4>
 8012e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e4e:	f7ed fa1d 	bl	800028c <__adddf3>
 8012e52:	3d01      	subs	r5, #1
 8012e54:	e7ed      	b.n	8012e32 <__kernel_rem_pio2+0x5aa>
 8012e56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012e5a:	f7ed fa17 	bl	800028c <__adddf3>
 8012e5e:	3c01      	subs	r4, #1
 8012e60:	e7c3      	b.n	8012dea <__kernel_rem_pio2+0x562>
 8012e62:	4602      	mov	r2, r0
 8012e64:	460b      	mov	r3, r1
 8012e66:	e7c8      	b.n	8012dfa <__kernel_rem_pio2+0x572>
 8012e68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012e6c:	f7ed fa0e 	bl	800028c <__adddf3>
 8012e70:	3401      	adds	r4, #1
 8012e72:	e7cd      	b.n	8012e10 <__kernel_rem_pio2+0x588>
 8012e74:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012e7c:	9b00      	ldr	r3, [sp, #0]
 8012e7e:	3b01      	subs	r3, #1
 8012e80:	9300      	str	r3, [sp, #0]
 8012e82:	4632      	mov	r2, r6
 8012e84:	463b      	mov	r3, r7
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	f7ed f9ff 	bl	800028c <__adddf3>
 8012e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4640      	mov	r0, r8
 8012e98:	4649      	mov	r1, r9
 8012e9a:	f7ed f9f5 	bl	8000288 <__aeabi_dsub>
 8012e9e:	4632      	mov	r2, r6
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	f7ed f9f3 	bl	800028c <__adddf3>
 8012ea6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012eaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012eae:	ed8a 7b00 	vstr	d7, [sl]
 8012eb2:	e770      	b.n	8012d96 <__kernel_rem_pio2+0x50e>
 8012eb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012eb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012ebc:	4640      	mov	r0, r8
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	463b      	mov	r3, r7
 8012ec2:	4649      	mov	r1, r9
 8012ec4:	f7ed f9e2 	bl	800028c <__adddf3>
 8012ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8012ecc:	4602      	mov	r2, r0
 8012ece:	460b      	mov	r3, r1
 8012ed0:	4640      	mov	r0, r8
 8012ed2:	4649      	mov	r1, r9
 8012ed4:	f7ed f9d8 	bl	8000288 <__aeabi_dsub>
 8012ed8:	4632      	mov	r2, r6
 8012eda:	463b      	mov	r3, r7
 8012edc:	f7ed f9d6 	bl	800028c <__adddf3>
 8012ee0:	ed9d 7b00 	vldr	d7, [sp]
 8012ee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ee8:	ed84 7b00 	vstr	d7, [r4]
 8012eec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ef0:	e757      	b.n	8012da2 <__kernel_rem_pio2+0x51a>
 8012ef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012ef6:	f7ed f9c9 	bl	800028c <__adddf3>
 8012efa:	3d01      	subs	r5, #1
 8012efc:	e75c      	b.n	8012db8 <__kernel_rem_pio2+0x530>
 8012efe:	9b04      	ldr	r3, [sp, #16]
 8012f00:	9a04      	ldr	r2, [sp, #16]
 8012f02:	601f      	str	r7, [r3, #0]
 8012f04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012f08:	605c      	str	r4, [r3, #4]
 8012f0a:	609d      	str	r5, [r3, #8]
 8012f0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012f10:	60d3      	str	r3, [r2, #12]
 8012f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f16:	6110      	str	r0, [r2, #16]
 8012f18:	6153      	str	r3, [r2, #20]
 8012f1a:	e727      	b.n	8012d6c <__kernel_rem_pio2+0x4e4>
 8012f1c:	41700000 	.word	0x41700000
 8012f20:	3e700000 	.word	0x3e700000
 8012f24:	00000000 	.word	0x00000000

08012f28 <floor>:
 8012f28:	ec51 0b10 	vmov	r0, r1, d0
 8012f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012f38:	2e13      	cmp	r6, #19
 8012f3a:	ee10 5a10 	vmov	r5, s0
 8012f3e:	ee10 8a10 	vmov	r8, s0
 8012f42:	460c      	mov	r4, r1
 8012f44:	dc31      	bgt.n	8012faa <floor+0x82>
 8012f46:	2e00      	cmp	r6, #0
 8012f48:	da14      	bge.n	8012f74 <floor+0x4c>
 8012f4a:	a333      	add	r3, pc, #204	; (adr r3, 8013018 <floor+0xf0>)
 8012f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f50:	f7ed f99c 	bl	800028c <__adddf3>
 8012f54:	2200      	movs	r2, #0
 8012f56:	2300      	movs	r3, #0
 8012f58:	f7ed fdde 	bl	8000b18 <__aeabi_dcmpgt>
 8012f5c:	b138      	cbz	r0, 8012f6e <floor+0x46>
 8012f5e:	2c00      	cmp	r4, #0
 8012f60:	da53      	bge.n	801300a <floor+0xe2>
 8012f62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012f66:	4325      	orrs	r5, r4
 8012f68:	d052      	beq.n	8013010 <floor+0xe8>
 8012f6a:	4c2d      	ldr	r4, [pc, #180]	; (8013020 <floor+0xf8>)
 8012f6c:	2500      	movs	r5, #0
 8012f6e:	4621      	mov	r1, r4
 8012f70:	4628      	mov	r0, r5
 8012f72:	e024      	b.n	8012fbe <floor+0x96>
 8012f74:	4f2b      	ldr	r7, [pc, #172]	; (8013024 <floor+0xfc>)
 8012f76:	4137      	asrs	r7, r6
 8012f78:	ea01 0307 	and.w	r3, r1, r7
 8012f7c:	4303      	orrs	r3, r0
 8012f7e:	d01e      	beq.n	8012fbe <floor+0x96>
 8012f80:	a325      	add	r3, pc, #148	; (adr r3, 8013018 <floor+0xf0>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	f7ed f981 	bl	800028c <__adddf3>
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f7ed fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d0eb      	beq.n	8012f6e <floor+0x46>
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	bfbe      	ittt	lt
 8012f9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012f9e:	4133      	asrlt	r3, r6
 8012fa0:	18e4      	addlt	r4, r4, r3
 8012fa2:	ea24 0407 	bic.w	r4, r4, r7
 8012fa6:	2500      	movs	r5, #0
 8012fa8:	e7e1      	b.n	8012f6e <floor+0x46>
 8012faa:	2e33      	cmp	r6, #51	; 0x33
 8012fac:	dd0b      	ble.n	8012fc6 <floor+0x9e>
 8012fae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012fb2:	d104      	bne.n	8012fbe <floor+0x96>
 8012fb4:	ee10 2a10 	vmov	r2, s0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	f7ed f967 	bl	800028c <__adddf3>
 8012fbe:	ec41 0b10 	vmov	d0, r0, r1
 8012fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012fca:	f04f 37ff 	mov.w	r7, #4294967295
 8012fce:	40df      	lsrs	r7, r3
 8012fd0:	4238      	tst	r0, r7
 8012fd2:	d0f4      	beq.n	8012fbe <floor+0x96>
 8012fd4:	a310      	add	r3, pc, #64	; (adr r3, 8013018 <floor+0xf0>)
 8012fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fda:	f7ed f957 	bl	800028c <__adddf3>
 8012fde:	2200      	movs	r2, #0
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	f7ed fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d0c1      	beq.n	8012f6e <floor+0x46>
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	da0a      	bge.n	8013004 <floor+0xdc>
 8012fee:	2e14      	cmp	r6, #20
 8012ff0:	d101      	bne.n	8012ff6 <floor+0xce>
 8012ff2:	3401      	adds	r4, #1
 8012ff4:	e006      	b.n	8013004 <floor+0xdc>
 8012ff6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	40b3      	lsls	r3, r6
 8012ffe:	441d      	add	r5, r3
 8013000:	45a8      	cmp	r8, r5
 8013002:	d8f6      	bhi.n	8012ff2 <floor+0xca>
 8013004:	ea25 0507 	bic.w	r5, r5, r7
 8013008:	e7b1      	b.n	8012f6e <floor+0x46>
 801300a:	2500      	movs	r5, #0
 801300c:	462c      	mov	r4, r5
 801300e:	e7ae      	b.n	8012f6e <floor+0x46>
 8013010:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013014:	e7ab      	b.n	8012f6e <floor+0x46>
 8013016:	bf00      	nop
 8013018:	8800759c 	.word	0x8800759c
 801301c:	7e37e43c 	.word	0x7e37e43c
 8013020:	bff00000 	.word	0xbff00000
 8013024:	000fffff 	.word	0x000fffff

08013028 <_init>:
 8013028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302a:	bf00      	nop
 801302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801302e:	bc08      	pop	{r3}
 8013030:	469e      	mov	lr, r3
 8013032:	4770      	bx	lr

08013034 <_fini>:
 8013034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013036:	bf00      	nop
 8013038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801303a:	bc08      	pop	{r3}
 801303c:	469e      	mov	lr, r3
 801303e:	4770      	bx	lr
