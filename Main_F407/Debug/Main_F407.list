
Main_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08012040  08012040  00022040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012758  08012758  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012758  08012758  00022758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012760  08012760  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012760  08012760  00022760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012764  08012764  00022764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012768  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00004ff0  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200051d8  200051d8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f34e  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d55  00000000  00000000  0004f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00054300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001453  00000000  00000000  00055d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007961  00000000  00000000  000571cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022060  00000000  00000000  0005eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7453  00000000  00000000  00080b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000083c8  00000000  00000000  00167fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001703a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012028 	.word	0x08012028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08012028 	.word	0x08012028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <encoder_Init>:
#include "stdbool.h"
#include "stdlib.h"


void encoder_Init(Encoder_t *enc,TIM_HandleTypeDef *htim, uint16_t pulPerRev, float deltaT)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	ed87 0a00 	vstr	s0, [r7]
 8000f54:	80fb      	strh	r3, [r7, #6]
	enc->htim = htim;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = pulPerRev;
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	611a      	str	r2, [r3, #16]
	enc->deltaT = deltaT;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <encoder_ResetCount>:
		return enc->Degree;
	}
	return 0;
}
void encoder_ResetCount(Encoder_t *enc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
	enc->count_X4 = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
	enc->vel_Pre = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
	enc->vel_Real = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	enc->Distance = 0;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <encoder_GetFloatingDis>:
{
	enc->Radius = R;
}

float encoder_GetFloatingDis(Encoder_t *enc)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	enc->Distance += abs((int16_t)__HAL_TIM_GET_COUNTER(enc->htim));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bfb8      	it	lt
 8000fc4:	425b      	neglt	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	441a      	add	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
	return enc->Distance;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <MotorDC_Init>:
 * @param pwmMode The PWM mode to be used for the motor.
 * @param channel1 The channel number for the first PWM output.
 * @param channel2 The channel number for the second PWM output.
 */
void MotorDC_Init(MotorDC *dcMotor, TIM_HandleTypeDef *htim, PWM_Mode pwmMode, uint32_t channel1, uint32_t channel2)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	80fb      	strh	r3, [r7, #6]
	dcMotor->Channel1 = channel1;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	609a      	str	r2, [r3, #8]
	dcMotor->Channel2 = channel2;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
	dcMotor->invPWM = pwmMode;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	88fa      	ldrh	r2, [r7, #6]
 8001018:	809a      	strh	r2, [r3, #4]
	dcMotor->timDC = htim;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <MotorDC_Drive>:

void MotorDC_Drive(MotorDC *dcMotor, int32_t speedInput)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	uint16_t invPWM = dcMotor->invPWM;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	81fb      	strh	r3, [r7, #14]
	uint32_t pwm = abs(speedInput);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	60bb      	str	r3, [r7, #8]
	switch (dcMotor->invPWM) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <MotorDC_Drive+0x2c>
 800104e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001052:	f000 8097 	beq.w	8001184 <MotorDC_Drive+0x158>
			if (speedInput < 0)
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
		break;
	}
}
 8001056:	e13d      	b.n	80012d4 <MotorDC_Drive+0x2a8>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, 0);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d105      	bne.n	800106c <MotorDC_Drive+0x40>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	e018      	b.n	800109e <MotorDC_Drive+0x72>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d105      	bne.n	8001080 <MotorDC_Drive+0x54>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	6393      	str	r3, [r2, #56]	; 0x38
 800107e:	e00e      	b.n	800109e <MotorDC_Drive+0x72>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d105      	bne.n	8001094 <MotorDC_Drive+0x68>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001092:	e004      	b.n	800109e <MotorDC_Drive+0x72>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, 0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <MotorDC_Drive+0x86>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
 80010b0:	e018      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d105      	bne.n	80010c6 <MotorDC_Drive+0x9a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	6393      	str	r3, [r2, #56]	; 0x38
 80010c4:	e00e      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d105      	bne.n	80010da <MotorDC_Drive+0xae>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010d8:	e004      	b.n	80010e4 <MotorDC_Drive+0xb8>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da23      	bge.n	8001132 <MotorDC_Drive+0x106>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <MotorDC_Drive+0xd2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80010fc:	e0e7      	b.n	80012ce <MotorDC_Drive+0x2a2>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, pwm);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d105      	bne.n	8001112 <MotorDC_Drive+0xe6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	6393      	str	r3, [r2, #56]	; 0x38
 8001110:	e037      	b.n	8001182 <MotorDC_Drive+0x156>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d105      	bne.n	8001126 <MotorDC_Drive+0xfa>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001124:	e02d      	b.n	8001182 <MotorDC_Drive+0x156>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001130:	e0cd      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f340 80ca 	ble.w	80012ce <MotorDC_Drive+0x2a2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <MotorDC_Drive+0x122>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800114c:	e0bf      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d105      	bne.n	8001162 <MotorDC_Drive+0x136>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001160:	e0b5      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d105      	bne.n	8001176 <MotorDC_Drive+0x14a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001174:	e0ab      	b.n	80012ce <MotorDC_Drive+0x2a2>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, pwm);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001180:	e0a5      	b.n	80012ce <MotorDC_Drive+0x2a2>
 8001182:	e0a4      	b.n	80012ce <MotorDC_Drive+0x2a2>
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <MotorDC_Drive+0x16c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e018      	b.n	80011ca <MotorDC_Drive+0x19e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d105      	bne.n	80011ac <MotorDC_Drive+0x180>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38
 80011aa:	e00e      	b.n	80011ca <MotorDC_Drive+0x19e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d105      	bne.n	80011c0 <MotorDC_Drive+0x194>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011be:	e004      	b.n	80011ca <MotorDC_Drive+0x19e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <MotorDC_Drive+0x1b2>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	89fa      	ldrh	r2, [r7, #14]
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
 80011dc:	e018      	b.n	8001210 <MotorDC_Drive+0x1e4>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d105      	bne.n	80011f2 <MotorDC_Drive+0x1c6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38
 80011f0:	e00e      	b.n	8001210 <MotorDC_Drive+0x1e4>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d105      	bne.n	8001206 <MotorDC_Drive+0x1da>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001204:	e004      	b.n	8001210 <MotorDC_Drive+0x1e4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
			if (speedInput < 0)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da2b      	bge.n	800126e <MotorDC_Drive+0x242>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <MotorDC_Drive+0x202>
 800121e:	89f9      	ldrh	r1, [r7, #14]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	1a8a      	subs	r2, r1, r2
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800122c:	e051      	b.n	80012d2 <MotorDC_Drive+0x2a6>
				__HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel1, invPWM - pwm);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d107      	bne.n	8001246 <MotorDC_Drive+0x21a>
 8001236:	89f9      	ldrh	r1, [r7, #14]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	6393      	str	r3, [r2, #56]	; 0x38
 8001244:	e042      	b.n	80012cc <MotorDC_Drive+0x2a0>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d107      	bne.n	800125e <MotorDC_Drive+0x232>
 800124e:	89f9      	ldrh	r1, [r7, #14]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800125c:	e036      	b.n	80012cc <MotorDC_Drive+0x2a0>
 800125e:	89f9      	ldrh	r1, [r7, #14]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1acb      	subs	r3, r1, r3
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800126c:	e031      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	dd2e      	ble.n	80012d2 <MotorDC_Drive+0x2a6>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <MotorDC_Drive+0x260>
 800127c:	89f9      	ldrh	r1, [r7, #14]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	1a8a      	subs	r2, r1, r2
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800128a:	e022      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d107      	bne.n	80012a4 <MotorDC_Drive+0x278>
 8001294:	89f9      	ldrh	r1, [r7, #14]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1acb      	subs	r3, r1, r3
 80012a0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80012a2:	e016      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d107      	bne.n	80012bc <MotorDC_Drive+0x290>
 80012ac:	89f9      	ldrh	r1, [r7, #14]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1acb      	subs	r3, r1, r3
 80012b8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80012ba:	e00a      	b.n	80012d2 <MotorDC_Drive+0x2a6>
			else if (speedInput > 0) __HAL_TIM_SET_COMPARE(dcMotor->timDC, dcMotor->Channel2, invPWM - pwm);
 80012bc:	89f9      	ldrh	r1, [r7, #14]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80012ca:	e002      	b.n	80012d2 <MotorDC_Drive+0x2a6>
 80012cc:	e001      	b.n	80012d2 <MotorDC_Drive+0x2a6>
		break;
 80012ce:	bf00      	nop
 80012d0:	e000      	b.n	80012d4 <MotorDC_Drive+0x2a8>
		break;
 80012d2:	bf00      	nop
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <startPutBall>:
extern TIM_HandleTypeDef htim5;
PutParam_t putBall;
GetParam_t getBall;

void startPutBall(uint8_t state)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]

	MotorDC_Init(&putBall.mdc, &htim3, MOTOR_PWM_INVERSE, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80012ea:	2304      	movs	r3, #4
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	4976      	ldr	r1, [pc, #472]	; (80014d0 <startPutBall+0x1f0>)
 80012f6:	4877      	ldr	r0, [pc, #476]	; (80014d4 <startPutBall+0x1f4>)
 80012f8:	f7ff fe7e 	bl	8000ff8 <MotorDC_Init>
	MotorDC_Init(&getBall.mdc, &htim5, MOTOR_PWM_NORMAL, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80012fc:	2304      	movs	r3, #4
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	2200      	movs	r2, #0
 8001304:	4974      	ldr	r1, [pc, #464]	; (80014d8 <startPutBall+0x1f8>)
 8001306:	4875      	ldr	r0, [pc, #468]	; (80014dc <startPutBall+0x1fc>)
 8001308:	f7ff fe76 	bl	8000ff8 <MotorDC_Init>
	encoder_Init(&putBall.enc, &htim2, 19200, 0.001);
 800130c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80014e0 <startPutBall+0x200>
 8001310:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001314:	4973      	ldr	r1, [pc, #460]	; (80014e4 <startPutBall+0x204>)
 8001316:	4874      	ldr	r0, [pc, #464]	; (80014e8 <startPutBall+0x208>)
 8001318:	f7ff fe14 	bl	8000f44 <encoder_Init>
	if(state == 0)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d123      	bne.n	800136a <startPutBall+0x8a>
	{
		putBall.count += 1;
 8001322:	4b71      	ldr	r3, [pc, #452]	; (80014e8 <startPutBall+0x208>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	3301      	adds	r3, #1
 8001328:	4a6f      	ldr	r2, [pc, #444]	; (80014e8 <startPutBall+0x208>)
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
		putBall.StopPutFlag = 0;
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <startPutBall+0x208>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if(putBall.count < 50)
 8001334:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <startPutBall+0x208>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	2b31      	cmp	r3, #49	; 0x31
 800133a:	dc09      	bgt.n	8001350 <startPutBall+0x70>
		{
			MotorDC_Drive(&putBall.mdc, -200);
 800133c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001340:	4864      	ldr	r0, [pc, #400]	; (80014d4 <startPutBall+0x1f4>)
 8001342:	f7ff fe73 	bl	800102c <MotorDC_Drive>
			putBall.flag = 0;
 8001346:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <startPutBall+0x208>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800134e:	e007      	b.n	8001360 <startPutBall+0x80>
		}
		else
		{
			MotorDC_Drive(&putBall.mdc, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	4860      	ldr	r0, [pc, #384]	; (80014d4 <startPutBall+0x1f4>)
 8001354:	f7ff fe6a 	bl	800102c <MotorDC_Drive>
			putBall.flag = 1;
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <startPutBall+0x208>)
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		MotorDC_Drive(&getBall.mdc, -1000);
 8001360:	4962      	ldr	r1, [pc, #392]	; (80014ec <startPutBall+0x20c>)
 8001362:	485e      	ldr	r0, [pc, #376]	; (80014dc <startPutBall+0x1fc>)
 8001364:	f7ff fe62 	bl	800102c <MotorDC_Drive>
		}else{
			MotorDC_Drive(&putBall.mdc, -200);
			MotorDC_Drive(&getBall.mdc, -1000);
		}
	}
}
 8001368:	e0ae      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 1)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d145      	bne.n	80013fc <startPutBall+0x11c>
		putBall.count = 0;
 8001370:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <startPutBall+0x208>)
 8001372:	2200      	movs	r2, #0
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <startPutBall+0x208>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <startPutBall+0x208>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 8001386:	4b5a      	ldr	r3, [pc, #360]	; (80014f0 <startPutBall+0x210>)
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
		if(putBall.StopPutFlag == 0)
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <startPutBall+0x208>)
 8001390:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001394:	2b00      	cmp	r3, #0
 8001396:	d116      	bne.n	80013c6 <startPutBall+0xe6>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	4855      	ldr	r0, [pc, #340]	; (80014f4 <startPutBall+0x214>)
 800139e:	f006 fee7 	bl	8008170 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00e      	beq.n	80013c6 <startPutBall+0xe6>
				osDelay(5);
 80013a8:	2005      	movs	r0, #5
 80013aa:	f00a f924 	bl	800b5f6 <osDelay>
				if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 80013ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b2:	4850      	ldr	r0, [pc, #320]	; (80014f4 <startPutBall+0x214>)
 80013b4:	f006 fedc 	bl	8008170 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <startPutBall+0xe6>
					putBall.StopPutFlag = 1;
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <startPutBall+0x208>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <startPutBall+0x208>)
 80013c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <startPutBall+0x108>
			MotorDC_Drive(&putBall.mdc, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4840      	ldr	r0, [pc, #256]	; (80014d4 <startPutBall+0x1f4>)
 80013d4:	f7ff fe2a 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80013d8:	2100      	movs	r1, #0
 80013da:	4840      	ldr	r0, [pc, #256]	; (80014dc <startPutBall+0x1fc>)
 80013dc:	f7ff fe26 	bl	800102c <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80013e0:	4841      	ldr	r0, [pc, #260]	; (80014e8 <startPutBall+0x208>)
 80013e2:	f7ff fdc7 	bl	8000f74 <encoder_ResetCount>
}
 80013e6:	e06f      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc, 400);
 80013e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013ec:	4839      	ldr	r0, [pc, #228]	; (80014d4 <startPutBall+0x1f4>)
 80013ee:	f7ff fe1d 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 80013f2:	493e      	ldr	r1, [pc, #248]	; (80014ec <startPutBall+0x20c>)
 80013f4:	4839      	ldr	r0, [pc, #228]	; (80014dc <startPutBall+0x1fc>)
 80013f6:	f7ff fe19 	bl	800102c <MotorDC_Drive>
}
 80013fa:	e065      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 2)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d11f      	bne.n	8001442 <startPutBall+0x162>
		putBall.StopPutFlag = 0;
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <startPutBall+0x208>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		putBall.count += 1;
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <startPutBall+0x208>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	3301      	adds	r3, #1
 8001410:	4a35      	ldr	r2, [pc, #212]	; (80014e8 <startPutBall+0x208>)
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
		if (putBall.count<25)
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <startPutBall+0x208>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	2b18      	cmp	r3, #24
 800141a:	dc09      	bgt.n	8001430 <startPutBall+0x150>
			MotorDC_Drive(&putBall.mdc,400);
 800141c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001420:	482c      	ldr	r0, [pc, #176]	; (80014d4 <startPutBall+0x1f4>)
 8001422:	f7ff fe03 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 8001426:	4931      	ldr	r1, [pc, #196]	; (80014ec <startPutBall+0x20c>)
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <startPutBall+0x1fc>)
 800142a:	f7ff fdff 	bl	800102c <MotorDC_Drive>
}
 800142e:	e04b      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc,0);
 8001430:	2100      	movs	r1, #0
 8001432:	4828      	ldr	r0, [pc, #160]	; (80014d4 <startPutBall+0x1f4>)
 8001434:	f7ff fdfa 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	4828      	ldr	r0, [pc, #160]	; (80014dc <startPutBall+0x1fc>)
 800143c:	f7ff fdf6 	bl	800102c <MotorDC_Drive>
}
 8001440:	e042      	b.n	80014c8 <startPutBall+0x1e8>
	else if(state == 3)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d13f      	bne.n	80014c8 <startPutBall+0x1e8>
		putBall.count = 0;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <startPutBall+0x208>)
 800144a:	2200      	movs	r2, #0
 800144c:	659a      	str	r2, [r3, #88]	; 0x58
		putBall.flag = 0;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <startPutBall+0x208>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		putBall.accel.vel_controller = 0;
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <startPutBall+0x208>)
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
		getBall.accel.vel_controller = 0;
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <startPutBall+0x210>)
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
		if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin))
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <startPutBall+0x214>)
 800146c:	f006 fe80 	bl	8008170 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <startPutBall+0x1b4>
			osDelay(5);
 8001476:	2005      	movs	r0, #5
 8001478:	f00a f8bd 	bl	800b5f6 <osDelay>
			if(HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin)){
 800147c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001480:	481c      	ldr	r0, [pc, #112]	; (80014f4 <startPutBall+0x214>)
 8001482:	f006 fe75 	bl	8008170 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <startPutBall+0x1b4>
				putBall.StopPutFlag = 1;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <startPutBall+0x208>)
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		if (putBall.StopPutFlag)
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <startPutBall+0x208>)
 8001496:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <startPutBall+0x1d6>
			MotorDC_Drive(&putBall.mdc, 0);
 800149e:	2100      	movs	r1, #0
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <startPutBall+0x1f4>)
 80014a2:	f7ff fdc3 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <startPutBall+0x1fc>)
 80014aa:	f7ff fdbf 	bl	800102c <MotorDC_Drive>
			encoder_ResetCount(&putBall.enc);
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <startPutBall+0x208>)
 80014b0:	f7ff fd60 	bl	8000f74 <encoder_ResetCount>
}
 80014b4:	e008      	b.n	80014c8 <startPutBall+0x1e8>
			MotorDC_Drive(&putBall.mdc, -200);
 80014b6:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <startPutBall+0x1f4>)
 80014bc:	f7ff fdb6 	bl	800102c <MotorDC_Drive>
			MotorDC_Drive(&getBall.mdc, -1000);
 80014c0:	490a      	ldr	r1, [pc, #40]	; (80014ec <startPutBall+0x20c>)
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <startPutBall+0x1fc>)
 80014c4:	f7ff fdb2 	bl	800102c <MotorDC_Drive>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000738 	.word	0x20000738
 80014d4:	20000234 	.word	0x20000234
 80014d8:	200007c8 	.word	0x200007c8
 80014dc:	20000290 	.word	0x20000290
 80014e0:	3a83126f 	.word	0x3a83126f
 80014e4:	200006f0 	.word	0x200006f0
 80014e8:	20000204 	.word	0x20000204
 80014ec:	fffffc18 	.word	0xfffffc18
 80014f0:	20000260 	.word	0x20000260
 80014f4:	40021000 	.word	0x40021000

080014f8 <PutBall_getFlag>:

uint8_t PutBall_getFlag()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	return putBall.flag;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <PutBall_getFlag+0x14>)
 80014fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000204 	.word	0x20000204

08001510 <modulo360>:
 *  Created on: Oct 12, 2023
 *      Author: Admin
 */

#include "AngleOptimizer.h"
float modulo360(float Angle){
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]
	int Result = (int)Angle/360.0;
 800151a:	edd7 7a01 	vldr	s15, [r7, #4]
 800151e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7fe fffd 	bl	8000524 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <modulo360+0x78>)
 8001530:	f7ff f98c 	bl	800084c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb0c 	bl	8000b58 <__aeabi_d2iz>
 8001540:	4603      	mov	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
	return Angle-Result*360.0;
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7fe ffe8 	bl	8000524 <__aeabi_i2d>
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <modulo360+0x78>)
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe8f 	bl	8000288 <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb19 	bl	8000ba8 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	ee07 3a90 	vmov	s15, r3
}
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	40768000 	.word	0x40768000

0800158c <absf>:

float absf(float num)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num>=0)return num;
 8001596:	edd7 7a01 	vldr	s15, [r7, #4]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	db02      	blt.n	80015aa <absf+0x1e>
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	e003      	b.n	80015b2 <absf+0x26>
	else return num*-1;
 80015aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ae:	eef1 7a67 	vneg.f32	s15, s15
}
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <angopt_QuadrantCheckInput>:
	int Result = (int)Angle/180.0;
	return Angle-Result*180.0;
}

int angopt_QuadrantCheckInput(float x, float y)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ca:	edc7 0a00 	vstr	s1, [r7]
	float xT = x,yT = y;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	60bb      	str	r3, [r7, #8]
	if(absf(xT)<0.0001) xT = 0;
 80015d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80015da:	f7ff ffd7 	bl	800158c <absf>
 80015de:	ee10 3a10 	vmov	r3, s0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb0 	bl	8000548 <__aeabi_f2d>
 80015e8:	a353      	add	r3, pc, #332	; (adr r3, 8001738 <angopt_QuadrantCheckInput+0x178>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff fa75 	bl	8000adc <__aeabi_dcmplt>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <angopt_QuadrantCheckInput+0x3e>
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
	if(absf(yT)<0.0001) yT = 0;
 80015fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001602:	f7ff ffc3 	bl	800158c <absf>
 8001606:	ee10 3a10 	vmov	r3, s0
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff9c 	bl	8000548 <__aeabi_f2d>
 8001610:	a349      	add	r3, pc, #292	; (adr r3, 8001738 <angopt_QuadrantCheckInput+0x178>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff fa61 	bl	8000adc <__aeabi_dcmplt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <angopt_QuadrantCheckInput+0x66>
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]

	if((xT>0)&&(yT>0))return 1;
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	dd08      	ble.n	8001646 <angopt_QuadrantCheckInput+0x86>
 8001634:	edd7 7a02 	vldr	s15, [r7, #8]
 8001638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	dd01      	ble.n	8001646 <angopt_QuadrantCheckInput+0x86>
 8001642:	2301      	movs	r3, #1
 8001644:	e074      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT<0))return 2;
 8001646:	edd7 7a03 	vldr	s15, [r7, #12]
 800164a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd08      	ble.n	8001666 <angopt_QuadrantCheckInput+0xa6>
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d501      	bpl.n	8001666 <angopt_QuadrantCheckInput+0xa6>
 8001662:	2302      	movs	r3, #2
 8001664:	e064      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT<0))return 3;
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d508      	bpl.n	8001686 <angopt_QuadrantCheckInput+0xc6>
 8001674:	edd7 7a02 	vldr	s15, [r7, #8]
 8001678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d501      	bpl.n	8001686 <angopt_QuadrantCheckInput+0xc6>
 8001682:	2303      	movs	r3, #3
 8001684:	e054      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT>0))return 4;
 8001686:	edd7 7a03 	vldr	s15, [r7, #12]
 800168a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d508      	bpl.n	80016a6 <angopt_QuadrantCheckInput+0xe6>
 8001694:	edd7 7a02 	vldr	s15, [r7, #8]
 8001698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dd01      	ble.n	80016a6 <angopt_QuadrantCheckInput+0xe6>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e044      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT>0))return -1;
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d109      	bne.n	80016c8 <angopt_QuadrantCheckInput+0x108>
 80016b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	dd02      	ble.n	80016c8 <angopt_QuadrantCheckInput+0x108>
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e033      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT==0)&&(yT<0))return -2;
 80016c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	d109      	bne.n	80016ea <angopt_QuadrantCheckInput+0x12a>
 80016d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	d502      	bpl.n	80016ea <angopt_QuadrantCheckInput+0x12a>
 80016e4:	f06f 0301 	mvn.w	r3, #1
 80016e8:	e022      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT>0)&&(yT==0))return -3;
 80016ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	dd09      	ble.n	800170c <angopt_QuadrantCheckInput+0x14c>
 80016f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	d102      	bne.n	800170c <angopt_QuadrantCheckInput+0x14c>
 8001706:	f06f 0302 	mvn.w	r3, #2
 800170a:	e011      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>
	else if((xT<0)&&(yT==0))return -4;
 800170c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d509      	bpl.n	800172e <angopt_QuadrantCheckInput+0x16e>
 800171a:	edd7 7a02 	vldr	s15, [r7, #8]
 800171e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	d102      	bne.n	800172e <angopt_QuadrantCheckInput+0x16e>
 8001728:	f06f 0303 	mvn.w	r3, #3
 800172c:	e000      	b.n	8001730 <angopt_QuadrantCheckInput+0x170>

	return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	eb1c432d 	.word	0xeb1c432d
 800173c:	3f1a36e2 	.word	0x3f1a36e2

08001740 <angopt_QuadRantCheckOutput>:
//{
//
//}

void angopt_QuadRantCheckOutput(ModuleID ID,float Input)
{
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b09b      	sub	sp, #108	; 0x6c
 8001744:	af0a      	add	r7, sp, #40	; 0x28
 8001746:	4603      	mov	r3, r0
 8001748:	ed87 0a00 	vstr	s0, [r7]
 800174c:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f000 ff48 	bl	80025ec <swer_GetOptAngle>
#define Case1		opt.Case1
#define Case2		opt.Case2
#define Direc 		opt.direct

	float XCurr = cos(Input);
 800175c:	6838      	ldr	r0, [r7, #0]
 800175e:	f7fe fef3 	bl	8000548 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ec43 2b10 	vmov	d0, r2, r3
 800176a:	f00e fb19 	bl	800fda0 <cos>
 800176e:	ec53 2b10 	vmov	r2, r3, d0
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa17 	bl	8000ba8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float YCurr = sin(Input);
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	ec43 2b10 	vmov	d0, r2, r3
 800178c:	f00e fb5c 	bl	800fe48 <sin>
 8001790:	ec53 2b10 	vmov	r2, r3, d0
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa06 	bl	8000ba8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
//	float AngleCheck=modulo360(Input);

	Case2 = angopt_QuadrantCheckInput(XCurr, YCurr);
 80017a0:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 80017a4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80017a8:	f7ff ff0a 	bl	80015c0 <angopt_QuadrantCheckInput>
 80017ac:	4603      	mov	r3, r0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
//	if (absf(AngleCheck)<0.001) Case2 = -2;
//	else if (absf(AngleCheck-90.0)<0.001) Case2 = -1;
//	else if (absf(AngleCheck-180.0)<0.001) Case2 = -4;
//	else if (absf(AngleCheck-270.0)<0.001) Case2 = -3;

	if (Case1 == 0)Direc = 0;
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <angopt_QuadRantCheckOutput+0x7c>
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	e009      	b.n	80017d0 <angopt_QuadRantCheckOutput+0x90>
//		}else if(Case1 == 4){
//			if ((Case2 == 2)||(Case2 == -2)||(Case2 == -3))Direc = -1;
//			else Direc = 1;
//		}
		else {
			if(Case2 == Case1)Direc = 1;
 80017bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d102      	bne.n	80017ca <angopt_QuadRantCheckOutput+0x8a>
 80017c4:	2301      	movs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	e002      	b.n	80017d0 <angopt_QuadRantCheckOutput+0x90>
			else Direc = -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	60bb      	str	r3, [r7, #8]
		}
//	}
	swer_SetOptAngle(ID, opt);
 80017d0:	79fe      	ldrb	r6, [r7, #7]
 80017d2:	466d      	mov	r5, sp
 80017d4:	f107 0414 	add.w	r4, r7, #20
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	602b      	str	r3, [r5, #0]
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 fed8 	bl	80025a0 <swer_SetOptAngle>
}
 80017f0:	bf00      	nop
 80017f2:	3744      	adds	r7, #68	; 0x44
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017f8 <angopt_Cal>:


void angopt_Cal(ModuleID ID,float input)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b099      	sub	sp, #100	; 0x64
 8001800:	af0a      	add	r7, sp, #40	; 0x28
 8001802:	4603      	mov	r3, r0
 8001804:	ed87 0a00 	vstr	s0, [r7]
 8001808:	71fb      	strb	r3, [r7, #7]
	Angle_Opt_Param opt = swer_GetOptAngle(ID);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 feea 	bl	80025ec <swer_GetOptAngle>
#define outputAngle 	opt.outputAngle
#define preAngle 		opt.preAngle
#define calInput		opt.calInput
#define preCal			opt.preCal
#define deltaCal		opt.deltaCal
	if(input != preAngle){
 8001818:	edd7 7a06 	vldr	s15, [r7, #24]
 800181c:	ed97 7a00 	vldr	s14, [r7]
 8001820:	eeb4 7a67 	vcmp.f32	s14, s15
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	f000 80d7 	beq.w	80019da <angopt_Cal+0x1e2>
		calInput = input;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	61fb      	str	r3, [r7, #28]

		if((currentAngle>=0)&&(calInput<0))
 8001830:	edd7 7a03 	vldr	s15, [r7, #12]
 8001834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	db0f      	blt.n	800185e <angopt_Cal+0x66>
 800183e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d508      	bpl.n	800185e <angopt_Cal+0x66>
		{
			calInput+=360;
 800184c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001850:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80019e8 <angopt_Cal+0x1f0>
 8001854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001858:	edc7 7a07 	vstr	s15, [r7, #28]
 800185c:	e015      	b.n	800188a <angopt_Cal+0x92>
		}
		else if ((currentAngle<0)&&(calInput>0))
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	d50e      	bpl.n	800188a <angopt_Cal+0x92>
 800186c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dd07      	ble.n	800188a <angopt_Cal+0x92>
		{
			calInput-=360;
 800187a:	edd7 7a07 	vldr	s15, [r7, #28]
 800187e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80019e8 <angopt_Cal+0x1f0>
 8001882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001886:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		deltaAngle = calInput - modulo360(currentAngle);
 800188a:	ed97 8a07 	vldr	s16, [r7, #28]
 800188e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	f7ff fe3b 	bl	8001510 <modulo360>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80018a2:	edc7 7a04 	vstr	s15, [r7, #16]

		if(deltaAngle>180)
 80018a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018aa:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80019ec <angopt_Cal+0x1f4>
 80018ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd08      	ble.n	80018ca <angopt_Cal+0xd2>
		{
			deltaAngle+=-360;
 80018b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018bc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80019e8 <angopt_Cal+0x1f0>
 80018c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c4:	edc7 7a04 	vstr	s15, [r7, #16]
 80018c8:	e010      	b.n	80018ec <angopt_Cal+0xf4>
		}
		else if(deltaAngle<-180)
 80018ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ce:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80019f0 <angopt_Cal+0x1f8>
 80018d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d507      	bpl.n	80018ec <angopt_Cal+0xf4>
		{
			deltaAngle+=360;
 80018dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80019e8 <angopt_Cal+0x1f0>
 80018e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e8:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		if((deltaAngle<=90)&&(deltaAngle>=-90))deltaAngle = deltaAngle;
 80018ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80019f4 <angopt_Cal+0x1fc>
 80018f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d80b      	bhi.n	8001916 <angopt_Cal+0x11e>
 80018fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001902:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80019f8 <angopt_Cal+0x200>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	db02      	blt.n	8001916 <angopt_Cal+0x11e>
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e034      	b.n	8001980 <angopt_Cal+0x188>
		else if ((deltaAngle>90)&&(deltaAngle<=180))deltaAngle += -180.0;
 8001916:	edd7 7a04 	vldr	s15, [r7, #16]
 800191a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80019f4 <angopt_Cal+0x1fc>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	dd11      	ble.n	800194c <angopt_Cal+0x154>
 8001928:	edd7 7a04 	vldr	s15, [r7, #16]
 800192c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80019ec <angopt_Cal+0x1f4>
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d808      	bhi.n	800194c <angopt_Cal+0x154>
 800193a:	edd7 7a04 	vldr	s15, [r7, #16]
 800193e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80019ec <angopt_Cal+0x1f4>
 8001942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001946:	edc7 7a04 	vstr	s15, [r7, #16]
 800194a:	e019      	b.n	8001980 <angopt_Cal+0x188>
		else if ((deltaAngle<-90)&&(deltaAngle>=-180))deltaAngle += 180.0;
 800194c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001950:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80019f8 <angopt_Cal+0x200>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d510      	bpl.n	8001980 <angopt_Cal+0x188>
 800195e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001962:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80019f0 <angopt_Cal+0x1f8>
 8001966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	db07      	blt.n	8001980 <angopt_Cal+0x188>
 8001970:	edd7 7a04 	vldr	s15, [r7, #16]
 8001974:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019ec <angopt_Cal+0x1f4>
 8001978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800197c:	edc7 7a04 	vstr	s15, [r7, #16]

		preAngle = input;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	61bb      	str	r3, [r7, #24]
		preCal = calInput;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	623b      	str	r3, [r7, #32]
		currentAngle += deltaAngle;
 8001988:	ed97 7a03 	vldr	s14, [r7, #12]
 800198c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
		if(currentAngle>=1080) currentAngle-=360;
 8001998:	edd7 7a03 	vldr	s15, [r7, #12]
 800199c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019fc <angopt_Cal+0x204>
 80019a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	db07      	blt.n	80019ba <angopt_Cal+0x1c2>
 80019aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80019e8 <angopt_Cal+0x1f0>
 80019b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b6:	edc7 7a03 	vstr	s15, [r7, #12]
		swer_SetOptAngle(ID, opt);
 80019ba:	79fe      	ldrb	r6, [r7, #7]
 80019bc:	466d      	mov	r5, sp
 80019be:	f107 0414 	add.w	r4, r7, #20
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	4630      	mov	r0, r6
 80019d6:	f000 fde3 	bl	80025a0 <swer_SetOptAngle>
	}
}
 80019da:	bf00      	nop
 80019dc:	373c      	adds	r7, #60	; 0x3c
 80019de:	46bd      	mov	sp, r7
 80019e0:	ecbd 8b02 	vpop	{d8}
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	43b40000 	.word	0x43b40000
 80019ec:	43340000 	.word	0x43340000
 80019f0:	c3340000 	.word	0xc3340000
 80019f4:	42b40000 	.word	0x42b40000
 80019f8:	c2b40000 	.word	0xc2b40000
 80019fc:	44870000 	.word	0x44870000

08001a00 <invkine_CalWheelVector>:
#include "main.h"
int Count;
extern TIM_HandleTypeDef htim10;
InverseKinematicProcedure InvCalcStep = 0;

void invkine_CalWheelVector(ModuleID ID, float u, float v, float r){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a10:	ed87 1a00 	vstr	s2, [r7]
 8001a14:	73fb      	strb	r3, [r7, #15]
	pVectorCalXY pVectXY = swer_GetFuncHandle(ID);
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fe07 	bl	800262c <swer_GetFuncHandle>
 8001a1e:	6178      	str	r0, [r7, #20]
	pVectXY(u,v,r);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	ed97 1a00 	vldr	s2, [r7]
 8001a26:	edd7 0a01 	vldr	s1, [r7, #4]
 8001a2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a2e:	4798      	blx	r3
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <invkine_CalOptAngle>:

void invkine_CalOptAngle(ModuleID ID){
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	b09d      	sub	sp, #116	; 0x74
 8001a3c:	af0a      	add	r7, sp, #40	; 0x28
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
	WheelVector vect = swer_GetWheelVector(ID);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fd85 	bl	8002554 <swer_GetWheelVector>
 8001a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4e:	eef0 7a60 	vmov.f32	s15, s1
 8001a52:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001a56:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fdc2 	bl	80025ec <swer_GetOptAngle>
	angopt.Case1 = angopt_QuadrantCheckInput(vect.wheelVelX,vect.wheelVelY);
 8001a68:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a6c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a70:	eef0 0a47 	vmov.f32	s1, s14
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f7ff fda2 	bl	80015c0 <angopt_QuadrantCheckInput>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
	swer_SetOptAngle(ID, angopt);
 8001a80:	79fe      	ldrb	r6, [r7, #7]
 8001a82:	466d      	mov	r5, sp
 8001a84:	f107 0418 	add.w	r4, r7, #24
 8001a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 fd80 	bl	80025a0 <swer_SetOptAngle>

	//------------------------------------------------------------------
	float rawAngle = atan2(vect.wheelVelY,vect.wheelVelX)*180.0/M_PI;
 8001aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	460d      	mov	r5, r1
 8001aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	ec43 2b11 	vmov	d1, r2, r3
 8001abc:	ec45 4b10 	vmov	d0, r4, r5
 8001ac0:	f00e f8d0 	bl	800fc64 <atan2>
 8001ac4:	ec51 0b10 	vmov	r0, r1, d0
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <invkine_CalOptAngle+0xd8>)
 8001ace:	f7fe fd93 	bl	80005f8 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	a30b      	add	r3, pc, #44	; (adr r3, 8001b08 <invkine_CalOptAngle+0xd0>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe feb4 	bl	800084c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f85c 	bl	8000ba8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
	angopt_Cal(ID, rawAngle);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fe7c 	bl	80017f8 <angopt_Cal>
	//------------------------------------------------------------------

}
 8001b00:	bf00      	nop
 8001b02:	374c      	adds	r7, #76	; 0x4c
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	54442d18 	.word	0x54442d18
 8001b0c:	400921fb 	.word	0x400921fb
 8001b10:	40668000 	.word	0x40668000
 8001b14:	00000000 	.word	0x00000000

08001b18 <invkine_CalSpeedVectorControl>:

float invkine_CalSpeedVectorControl(ModuleID ID)
{
 8001b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b1c:	b092      	sub	sp, #72	; 0x48
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
	float temp;
	WheelVector vect = swer_GetWheelVector(ID);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd14 	bl	8002554 <swer_GetWheelVector>
 8001b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b30:	eef0 7a60 	vmov.f32	s15, s1
 8001b34:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8001b38:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd51 	bl	80025ec <swer_GetOptAngle>
	angopt_QuadRantCheckOutput(ID,angopt.currentAngle*M_PI/180);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcfb 	bl	8000548 <__aeabi_f2d>
 8001b52:	a33c      	add	r3, pc, #240	; (adr r3, 8001c44 <invkine_CalSpeedVectorControl+0x12c>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd4e 	bl	80005f8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <invkine_CalSpeedVectorControl+0x128>)
 8001b6a:	f7fe fe6f 	bl	800084c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7ff f817 	bl	8000ba8 <__aeabi_d2f>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	ee00 2a10 	vmov	s0, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fddc 	bl	8001740 <angopt_QuadRantCheckOutput>
	temp = (float)angopt.direct  * (60.0/(ROBOT_WHEEL_RADIUS_METER*2.0*M_PI)) * (sqrt(pow(vect.wheelVelX,2) + pow(vect.wheelVelY,2))) ;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	ee17 0a90 	vmov	r0, s15
 8001b96:	f7fe fcd7 	bl	8000548 <__aeabi_f2d>
 8001b9a:	a325      	add	r3, pc, #148	; (adr r3, 8001c30 <invkine_CalSpeedVectorControl+0x118>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd2a 	bl	80005f8 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4614      	mov	r4, r2
 8001baa:	461d      	mov	r5, r3
 8001bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcca 	bl	8000548 <__aeabi_f2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001c38 <invkine_CalSpeedVectorControl+0x120>
 8001bbc:	ec43 2b10 	vmov	d0, r2, r3
 8001bc0:	f00e f852 	bl	800fc68 <pow>
 8001bc4:	ec59 8b10 	vmov	r8, r9, d0
 8001bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcbc 	bl	8000548 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001c38 <invkine_CalSpeedVectorControl+0x120>
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f00e f844 	bl	800fc68 <pow>
 8001be0:	ec53 2b10 	vmov	r2, r3, d0
 8001be4:	4640      	mov	r0, r8
 8001be6:	4649      	mov	r1, r9
 8001be8:	f7fe fb50 	bl	800028c <__adddf3>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	ec43 2b17 	vmov	d7, r2, r3
 8001bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf8:	eef0 0a67 	vmov.f32	s1, s15
 8001bfc:	f00e f8a4 	bl	800fd48 <sqrt>
 8001c00:	ec53 2b10 	vmov	r2, r3, d0
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fcf6 	bl	80005f8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ffc8 	bl	8000ba8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
	return temp;
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	ee07 3a90 	vmov	s15, r3
}
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	3748      	adds	r7, #72	; 0x48
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c2e:	bf00      	nop
 8001c30:	644967bf 	.word	0x644967bf
 8001c34:	406a869c 	.word	0x406a869c
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40000000 	.word	0x40000000
 8001c40:	40668000 	.word	0x40668000
 8001c44:	54442d18 	.word	0x54442d18
 8001c48:	400921fb 	.word	0x400921fb

08001c4c <invkine_Implementation>:

HAL_StatusTypeDef  invkine_Implementation(ModuleID ID, float u, float v, float r,void (*ptnCpltCallback)(ModuleID,float, float))
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	b09d      	sub	sp, #116	; 0x74
 8001c50:	af0a      	add	r7, sp, #40	; 0x28
 8001c52:	4603      	mov	r3, r0
 8001c54:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c58:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c5c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c60:	6079      	str	r1, [r7, #4]
 8001c62:	75fb      	strb	r3, [r7, #23]
//	HAL_TIM_Base_Start(&htim10);
//	__HAL_TIM_SET_COUNTER(&htim10,0);
	static float velocity = 0;

	invkine_CalWheelVector(ID, u, v, r);
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	ed97 1a02 	vldr	s2, [r7, #8]
 8001c6a:	edd7 0a03 	vldr	s1, [r7, #12]
 8001c6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fec4 	bl	8001a00 <invkine_CalWheelVector>
	if(u == 0&&v==0&&r==0)__NOP();
 8001c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d10f      	bne.n	8001ca6 <invkine_Implementation+0x5a>
 8001c86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	d108      	bne.n	8001ca6 <invkine_Implementation+0x5a>
 8001c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	d101      	bne.n	8001ca6 <invkine_Implementation+0x5a>
 8001ca2:	bf00      	nop
 8001ca4:	e003      	b.n	8001cae <invkine_Implementation+0x62>
	else invkine_CalOptAngle(ID);
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fec5 	bl	8001a38 <invkine_CalOptAngle>

	velocity = invkine_CalSpeedVectorControl(ID);
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <invkine_CalSpeedVectorControl>
 8001cb6:	eef0 7a40 	vmov.f32	s15, s0
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <invkine_Implementation+0xf8>)
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
	Angle_Opt_Param angopt = swer_GetOptAngle(ID);
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	7dfa      	ldrb	r2, [r7, #23]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fc8f 	bl	80025ec <swer_GetOptAngle>
	if(u == 0&&v==0&&r==0)angopt.currentAngle= angopt.PreCurrAngle;
 8001cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	d10f      	bne.n	8001cfc <invkine_Implementation+0xb0>
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d108      	bne.n	8001cfc <invkine_Implementation+0xb0>
 8001cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	d101      	bne.n	8001cfc <invkine_Implementation+0xb0>
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	61fb      	str	r3, [r7, #28]
//	Count = __HAL_TIM_GET_COUNTER(&htim10);
//	HAL_TIM_Base_Stop(&htim10);
	ptnCpltCallback(ID,velocity,angopt.currentAngle);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <invkine_Implementation+0xf8>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d06:	7dfa      	ldrb	r2, [r7, #23]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	eef0 0a47 	vmov.f32	s1, s14
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	4610      	mov	r0, r2
 8001d14:	4798      	blx	r3
	angopt.PreCurrAngle = angopt.currentAngle;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
	swer_SetOptAngle(ID, angopt);
 8001d1a:	7dfe      	ldrb	r6, [r7, #23]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d34:	4630      	mov	r0, r6
 8001d36:	f000 fc33 	bl	80025a0 <swer_SetOptAngle>

	return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	374c      	adds	r7, #76	; 0x4c
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	200002b8 	.word	0x200002b8

08001d48 <trajecPlan_Cal>:
	pd->u = pd->uP + pd->uD;
	if(pd->u > pd->uAbove)pd->u = pd->uAbove;
	else if (pd->u < pd->uBelow)pd->u = pd->uBelow;
}

void trajecPlan_Cal(trajec_Param *trajec){
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	trajec->a0 = trajec->P0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]
	trajec->a1 = trajec->v0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
	trajec->a2 = (3/(trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) - (2/trajec->tf)*trajec->v0 - (1/trajec->tf)*trajec->vf;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d92:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d96:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001db2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edc3 7a03 	vstr	s15, [r3, #12]
	trajec->a3 = (-2/(trajec->tf*trajec->tf*trajec->tf))*(trajec->Pf - trajec->P0) + (1/(trajec->tf*trajec->tf))*(trajec->vf + trajec->v0);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8001de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edd3 6a08 	vldr	s13, [r3, #32]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001df8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e14:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e24:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	edc3 7a04 	vstr	s15, [r3, #16]

	if (trajec->t > trajec->tf) trajec->t = trajec->tf;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	ed93 7a00 	vldr	s14, [r3]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	dd03      	ble.n	8001e54 <trajecPlan_Cal+0x10c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]

	trajec->xTrajec = trajec->a0 + trajec->a1*trajec->t + trajec->a2*trajec->t*trajec->t + trajec->a3*trajec->t*trajec->t*trajec->t;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	edc3 7a05 	vstr	s15, [r3, #20]
	trajec->xdottraject = trajec->a1 + 2*trajec->a2*trajec->t + 3* trajec->a3*trajec->t*trajec->t;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ec6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ede:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001ee2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edc3 7a06 	vstr	s15, [r3, #24]

	if(trajec->Pf == trajec->P0){
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f10:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d107      	bne.n	8001f2a <trajecPlan_Cal+0x1e2>
		trajec->xTrajec = trajec->Pf;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	615a      	str	r2, [r3, #20]
		trajec->xdottraject = 0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <trajecPlan_SetParam>:

void trajecPlan_SetParam(trajec_Param *trajec,float P0,float Pf,float tf,float v0,float vf)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b087      	sub	sp, #28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6178      	str	r0, [r7, #20]
 8001f3e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f42:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f46:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f4a:	edc7 1a01 	vstr	s3, [r7, #4]
 8001f4e:	ed87 2a00 	vstr	s4, [r7]
	trajec -> t = 0;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
	trajec -> P0 = P0;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	61da      	str	r2, [r3, #28]
	trajec -> Pf = Pf;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
	trajec -> tf = tf;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
	trajec -> v0 = v0;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
	trajec -> vf = vf;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f78:	bf00      	nop
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <swer0_CalVector>:
#define DY3	-0.09428
#define DY1	-0.09428
#define DY2	0.18856

SwerveModuleParam swerParam[MAX_MODULE];
void swer0_CalVector(float u, float v, float r){
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f92:	ed87 1a01 	vstr	s2, [r7, #4]
	__NOP();
 8001f96:	bf00      	nop
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	0000      	movs	r0, r0
	...

08001fa8 <swer1_CalVector>:
//	float alpha = (225)*M_PI/180;
//	vct.wheelVelX = cos(alpha)*(u + ROBOT_WIDTH_METER*r) - sin(alpha)*(v + ROBOT_LENGHT_METER*r);
//	vct.wheelVelY = sin(alpha)*(u + ROBOT_WIDTH_METER*r) + cos(alpha)*(v + ROBOT_LENGHT_METER*r);
//	swer_SetWheelVector(MODULE_ID_4, vct);
//}
void swer1_CalVector(float u, float v, float r){
 8001fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fac:	b088      	sub	sp, #32
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fb4:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fb8:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <swer1_CalVector+0x1b0>)
 8001fbe:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY1*r) - sin(alpha)*(v + DX1*r);
 8001fc0:	69f8      	ldr	r0, [r7, #28]
 8001fc2:	f7fe fac1 	bl	8000548 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	ec43 2b10 	vmov	d0, r2, r3
 8001fce:	f00d fee7 	bl	800fda0 <cos>
 8001fd2:	ec59 8b10 	vmov	r8, r9, d0
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7fe fab6 	bl	8000548 <__aeabi_f2d>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	460d      	mov	r5, r1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fab1 	bl	8000548 <__aeabi_f2d>
 8001fe6:	a358      	add	r3, pc, #352	; (adr r3, 8002148 <swer1_CalVector+0x1a0>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb04 	bl	80005f8 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe f948 	bl	800028c <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4640      	mov	r0, r8
 8002002:	4649      	mov	r1, r9
 8002004:	f7fe faf8 	bl	80005f8 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4690      	mov	r8, r2
 800200e:	4699      	mov	r9, r3
 8002010:	69f8      	ldr	r0, [r7, #28]
 8002012:	f7fe fa99 	bl	8000548 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ec43 2b10 	vmov	d0, r2, r3
 800201e:	f00d ff13 	bl	800fe48 <sin>
 8002022:	ec5b ab10 	vmov	sl, fp, d0
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4604      	mov	r4, r0
 800202e:	460d      	mov	r5, r1
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe fa89 	bl	8000548 <__aeabi_f2d>
 8002036:	a346      	add	r3, pc, #280	; (adr r3, 8002150 <swer1_CalVector+0x1a8>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fadc 	bl	80005f8 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe f920 	bl	800028c <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4650      	mov	r0, sl
 8002052:	4659      	mov	r1, fp
 8002054:	f7fe fad0 	bl	80005f8 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4640      	mov	r0, r8
 800205e:	4649      	mov	r1, r9
 8002060:	f7fe f912 	bl	8000288 <__aeabi_dsub>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fd9c 	bl	8000ba8 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY1*r) + cos(alpha)*(v + DX1*r);
 8002074:	69f8      	ldr	r0, [r7, #28]
 8002076:	f7fe fa67 	bl	8000548 <__aeabi_f2d>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	ec43 2b10 	vmov	d0, r2, r3
 8002082:	f00d fee1 	bl	800fe48 <sin>
 8002086:	ec59 8b10 	vmov	r8, r9, d0
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7fe fa5c 	bl	8000548 <__aeabi_f2d>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe fa57 	bl	8000548 <__aeabi_f2d>
 800209a:	a32b      	add	r3, pc, #172	; (adr r3, 8002148 <swer1_CalVector+0x1a0>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe f8ee 	bl	800028c <__adddf3>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4640      	mov	r0, r8
 80020b6:	4649      	mov	r1, r9
 80020b8:	f7fe fa9e 	bl	80005f8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4690      	mov	r8, r2
 80020c2:	4699      	mov	r9, r3
 80020c4:	69f8      	ldr	r0, [r7, #28]
 80020c6:	f7fe fa3f 	bl	8000548 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	ec43 2b10 	vmov	d0, r2, r3
 80020d2:	f00d fe65 	bl	800fda0 <cos>
 80020d6:	ec5b ab10 	vmov	sl, fp, d0
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f7fe fa34 	bl	8000548 <__aeabi_f2d>
 80020e0:	4604      	mov	r4, r0
 80020e2:	460d      	mov	r5, r1
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7fe fa2f 	bl	8000548 <__aeabi_f2d>
 80020ea:	a319      	add	r3, pc, #100	; (adr r3, 8002150 <swer1_CalVector+0x1a8>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa82 	bl	80005f8 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe f8c6 	bl	800028c <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4650      	mov	r0, sl
 8002106:	4659      	mov	r1, fp
 8002108:	f7fe fa76 	bl	80005f8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4640      	mov	r0, r8
 8002112:	4649      	mov	r1, r9
 8002114:	f7fe f8ba 	bl	800028c <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fd42 	bl	8000ba8 <__aeabi_d2f>
 8002124:	4603      	mov	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_1, vct);
 8002128:	ed97 7a05 	vldr	s14, [r7, #20]
 800212c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002130:	eeb0 0a47 	vmov.f32	s0, s14
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	2001      	movs	r0, #1
 800213a:	f000 f9e7 	bl	800250c <swer_SetWheelVector>
}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002148:	ecaab8a6 	.word	0xecaab8a6
 800214c:	3fb822bb 	.word	0x3fb822bb
 8002150:	f1800a7c 	.word	0xf1800a7c
 8002154:	bfd21a0c 	.word	0xbfd21a0c
 8002158:	40490fdb 	.word	0x40490fdb
 800215c:	00000000 	.word	0x00000000

08002160 <swer2_CalVector>:

void swer2_CalVector(float u, float v, float r){
 8002160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af00      	add	r7, sp, #0
 8002168:	ed87 0a03 	vstr	s0, [r7, #12]
 800216c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002170:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = -90*M_PI/180;
 8002174:	4b60      	ldr	r3, [pc, #384]	; (80022f8 <swer2_CalVector+0x198>)
 8002176:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY2*r) - sin(alpha)*(v + DX2*r);
 8002178:	69f8      	ldr	r0, [r7, #28]
 800217a:	f7fe f9e5 	bl	8000548 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	ec43 2b10 	vmov	d0, r2, r3
 8002186:	f00d fe0b 	bl	800fda0 <cos>
 800218a:	ec59 8b10 	vmov	r8, r9, d0
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7fe f9da 	bl	8000548 <__aeabi_f2d>
 8002194:	4604      	mov	r4, r0
 8002196:	460d      	mov	r5, r1
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe f9d5 	bl	8000548 <__aeabi_f2d>
 800219e:	a354      	add	r3, pc, #336	; (adr r3, 80022f0 <swer2_CalVector+0x190>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fa28 	bl	80005f8 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe f86a 	bl	8000288 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	69f8      	ldr	r0, [r7, #28]
 80021ca:	f7fe f9bd 	bl	8000548 <__aeabi_f2d>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	ec43 2b10 	vmov	d0, r2, r3
 80021d6:	f00d fe37 	bl	800fe48 <sin>
 80021da:	ec59 8b10 	vmov	r8, r9, d0
 80021de:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80022fc <swer2_CalVector+0x19c>
 80021e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	ee17 0a90 	vmov	r0, s15
 80021f6:	f7fe f9a7 	bl	8000548 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4640      	mov	r0, r8
 8002200:	4649      	mov	r1, r9
 8002202:	f7fe f9f9 	bl	80005f8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fe f83b 	bl	8000288 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fcc5 	bl	8000ba8 <__aeabi_d2f>
 800221e:	4603      	mov	r3, r0
 8002220:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY2*r) + cos(alpha)*(v + DX2*r);
 8002222:	69f8      	ldr	r0, [r7, #28]
 8002224:	f7fe f990 	bl	8000548 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	ec43 2b10 	vmov	d0, r2, r3
 8002230:	f00d fe0a 	bl	800fe48 <sin>
 8002234:	ec59 8b10 	vmov	r8, r9, d0
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7fe f985 	bl	8000548 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe f980 	bl	8000548 <__aeabi_f2d>
 8002248:	a329      	add	r3, pc, #164	; (adr r3, 80022f0 <swer2_CalVector+0x190>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe f9d3 	bl	80005f8 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4620      	mov	r0, r4
 8002258:	4629      	mov	r1, r5
 800225a:	f7fe f815 	bl	8000288 <__aeabi_dsub>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fe f9c7 	bl	80005f8 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4614      	mov	r4, r2
 8002270:	461d      	mov	r5, r3
 8002272:	69f8      	ldr	r0, [r7, #28]
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	ec43 2b10 	vmov	d0, r2, r3
 8002280:	f00d fd8e 	bl	800fda0 <cos>
 8002284:	ec59 8b10 	vmov	r8, r9, d0
 8002288:	edd7 7a01 	vldr	s15, [r7, #4]
 800228c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80022fc <swer2_CalVector+0x19c>
 8002290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f952 	bl	8000548 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f9a4 	bl	80005f8 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fd ffe8 	bl	800028c <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc70 	bl	8000ba8 <__aeabi_d2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_2, vct);
 80022cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80022d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d4:	eeb0 0a47 	vmov.f32	s0, s14
 80022d8:	eef0 0a67 	vmov.f32	s1, s15
 80022dc:	2002      	movs	r0, #2
 80022de:	f000 f915 	bl	800250c <swer_SetWheelVector>
}
 80022e2:	bf00      	nop
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	ecaab8a6 	.word	0xecaab8a6
 80022f4:	3fc822bb 	.word	0x3fc822bb
 80022f8:	bfc90fdb 	.word	0xbfc90fdb
 80022fc:	00000000 	.word	0x00000000

08002300 <swer3_CalVector>:

void swer3_CalVector(float u, float v, float r){
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af00      	add	r7, sp, #0
 8002308:	ed87 0a03 	vstr	s0, [r7, #12]
 800230c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002310:	ed87 1a01 	vstr	s2, [r7, #4]
	WheelVector vct;
	float alpha = 180*M_PI/180;
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <swer3_CalVector+0x1b0>)
 8002316:	61fb      	str	r3, [r7, #28]
	vct.wheelVelX = cos(alpha)*(u - DY3*r) - sin(alpha)*(v + DX3*r);
 8002318:	69f8      	ldr	r0, [r7, #28]
 800231a:	f7fe f915 	bl	8000548 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	ec43 2b10 	vmov	d0, r2, r3
 8002326:	f00d fd3b 	bl	800fda0 <cos>
 800232a:	ec59 8b10 	vmov	r8, r9, d0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7fe f90a 	bl	8000548 <__aeabi_f2d>
 8002334:	4604      	mov	r4, r0
 8002336:	460d      	mov	r5, r1
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe f905 	bl	8000548 <__aeabi_f2d>
 800233e:	a358      	add	r3, pc, #352	; (adr r3, 80024a0 <swer3_CalVector+0x1a0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f958 	bl	80005f8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ff9c 	bl	800028c <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4640      	mov	r0, r8
 800235a:	4649      	mov	r1, r9
 800235c:	f7fe f94c 	bl	80005f8 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4690      	mov	r8, r2
 8002366:	4699      	mov	r9, r3
 8002368:	69f8      	ldr	r0, [r7, #28]
 800236a:	f7fe f8ed 	bl	8000548 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	ec43 2b10 	vmov	d0, r2, r3
 8002376:	f00d fd67 	bl	800fe48 <sin>
 800237a:	ec5b ab10 	vmov	sl, fp, d0
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f7fe f8e2 	bl	8000548 <__aeabi_f2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe f8dd 	bl	8000548 <__aeabi_f2d>
 800238e:	a346      	add	r3, pc, #280	; (adr r3, 80024a8 <swer3_CalVector+0x1a8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f930 	bl	80005f8 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fd ff74 	bl	800028c <__adddf3>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4650      	mov	r0, sl
 80023aa:	4659      	mov	r1, fp
 80023ac:	f7fe f924 	bl	80005f8 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4640      	mov	r0, r8
 80023b6:	4649      	mov	r1, r9
 80023b8:	f7fd ff66 	bl	8000288 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fbf0 	bl	8000ba8 <__aeabi_d2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	617b      	str	r3, [r7, #20]
	vct.wheelVelY = sin(alpha)*(u - DY3*r) + cos(alpha)*(v + DX3*r);
 80023cc:	69f8      	ldr	r0, [r7, #28]
 80023ce:	f7fe f8bb 	bl	8000548 <__aeabi_f2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ec43 2b10 	vmov	d0, r2, r3
 80023da:	f00d fd35 	bl	800fe48 <sin>
 80023de:	ec59 8b10 	vmov	r8, r9, d0
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7fe f8b0 	bl	8000548 <__aeabi_f2d>
 80023e8:	4604      	mov	r4, r0
 80023ea:	460d      	mov	r5, r1
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe f8ab 	bl	8000548 <__aeabi_f2d>
 80023f2:	a32b      	add	r3, pc, #172	; (adr r3, 80024a0 <swer3_CalVector+0x1a0>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f8fe 	bl	80005f8 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd ff42 	bl	800028c <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4640      	mov	r0, r8
 800240e:	4649      	mov	r1, r9
 8002410:	f7fe f8f2 	bl	80005f8 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4690      	mov	r8, r2
 800241a:	4699      	mov	r9, r3
 800241c:	69f8      	ldr	r0, [r7, #28]
 800241e:	f7fe f893 	bl	8000548 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ec43 2b10 	vmov	d0, r2, r3
 800242a:	f00d fcb9 	bl	800fda0 <cos>
 800242e:	ec5b ab10 	vmov	sl, fp, d0
 8002432:	68b8      	ldr	r0, [r7, #8]
 8002434:	f7fe f888 	bl	8000548 <__aeabi_f2d>
 8002438:	4604      	mov	r4, r0
 800243a:	460d      	mov	r5, r1
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe f883 	bl	8000548 <__aeabi_f2d>
 8002442:	a319      	add	r3, pc, #100	; (adr r3, 80024a8 <swer3_CalVector+0x1a8>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fe f8d6 	bl	80005f8 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd ff1a 	bl	800028c <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4650      	mov	r0, sl
 800245e:	4659      	mov	r1, fp
 8002460:	f7fe f8ca 	bl	80005f8 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fd ff0e 	bl	800028c <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb96 	bl	8000ba8 <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	61bb      	str	r3, [r7, #24]
	swer_SetWheelVector(MODULE_ID_3, vct);
 8002480:	ed97 7a05 	vldr	s14, [r7, #20]
 8002484:	edd7 7a06 	vldr	s15, [r7, #24]
 8002488:	eeb0 0a47 	vmov.f32	s0, s14
 800248c:	eef0 0a67 	vmov.f32	s1, s15
 8002490:	2003      	movs	r0, #3
 8002492:	f000 f83b 	bl	800250c <swer_SetWheelVector>
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a0:	ecaab8a6 	.word	0xecaab8a6
 80024a4:	3fb822bb 	.word	0x3fb822bb
 80024a8:	f1800a7c 	.word	0xf1800a7c
 80024ac:	3fd21a0c 	.word	0x3fd21a0c
 80024b0:	40490fdb 	.word	0x40490fdb

080024b4 <swer_Init>:

void swer_Init(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	swerParam[0].pVctXY = &swer0_CalVector;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <swer_Init+0x44>)
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <swer_Init+0x48>)
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
	swerParam[MODULE_ID_1].pVctXY = &swer1_CalVector;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <swer_Init+0x44>)
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <swer_Init+0x4c>)
 80024c2:	675a      	str	r2, [r3, #116]	; 0x74
	swerParam[MODULE_ID_2].pVctXY = &swer2_CalVector;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <swer_Init+0x44>)
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <swer_Init+0x50>)
 80024c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	swerParam[MODULE_ID_3].pVctXY = &swer3_CalVector;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <swer_Init+0x44>)
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <swer_Init+0x54>)
 80024d0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	swerParam[MODULE_ID_1].angleOpt.direct =
	swerParam[MODULE_ID_2].angleOpt.direct =
	swerParam[MODULE_ID_3].angleOpt.direct = 1;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <swer_Init+0x44>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <swer_Init+0x44>)
 80024de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	swerParam[MODULE_ID_2].angleOpt.direct =
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <swer_Init+0x44>)
 80024e4:	6793      	str	r3, [r2, #120]	; 0x78
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <swer_Init+0x44>)
 80024e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	swerParam[MODULE_ID_1].angleOpt.direct =
 80024ea:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <swer_Init+0x44>)
 80024ec:	63d3      	str	r3, [r2, #60]	; 0x3c

}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	200002bc 	.word	0x200002bc
 80024fc:	08001f85 	.word	0x08001f85
 8002500:	08001fa9 	.word	0x08001fa9
 8002504:	08002161 	.word	0x08002161
 8002508:	08002301 	.word	0x08002301

0800250c <swer_SetWheelVector>:


void swer_SetWheelVector(ModuleID ID,WheelVector vct){swerParam[ID].vct = vct;}
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	eeb0 7a40 	vmov.f32	s14, s0
 8002518:	eef0 7a60 	vmov.f32	s15, s1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	ed87 7a01 	vstr	s14, [r7, #4]
 8002522:	edc7 7a02 	vstr	s15, [r7, #8]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	4909      	ldr	r1, [pc, #36]	; (8002550 <swer_SetWheelVector+0x44>)
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3330      	adds	r3, #48	; 0x30
 8002536:	461a      	mov	r2, r3
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800253e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200002bc 	.word	0x200002bc

08002554 <swer_GetWheelVector>:
WheelVector swer_GetWheelVector(ModuleID ID){return swerParam[ID].vct;}
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <swer_GetWheelVector+0x48>)
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002578:	e883 0003 	stmia.w	r3, {r0, r1}
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	ee07 2a10 	vmov	s14, r2
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb0 0a47 	vmov.f32	s0, s14
 800258c:	eef0 0a67 	vmov.f32	s1, s15
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200002bc 	.word	0x200002bc

080025a0 <swer_SetOptAngle>:
void swer_SetOptAngle(ModuleID ID,Angle_Opt_Param angleOpt){swerParam[ID].angleOpt = angleOpt;}
 80025a0:	b084      	sub	sp, #16
 80025a2:	b4b0      	push	{r4, r5, r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4604      	mov	r4, r0
 80025aa:	f107 001c 	add.w	r0, r7, #28
 80025ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80025b2:	4623      	mov	r3, r4
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	79fa      	ldrb	r2, [r7, #7]
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <swer_SetOptAngle+0x48>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	461d      	mov	r5, r3
 80025c6:	f107 041c 	add.w	r4, r7, #28
 80025ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bcb0      	pop	{r4, r5, r7}
 80025e2:	b004      	add	sp, #16
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	200002bc 	.word	0x200002bc

080025ec <swer_GetOptAngle>:
Angle_Opt_Param swer_GetOptAngle(ModuleID ID){return swerParam[ID].angleOpt;}
 80025ec:	b4b0      	push	{r4, r5, r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	490a      	ldr	r1, [pc, #40]	; (8002628 <swer_GetOptAngle+0x3c>)
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	4604      	mov	r4, r0
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bcb0      	pop	{r4, r5, r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200002bc 	.word	0x200002bc

0800262c <swer_GetFuncHandle>:
pVectorCalXY swer_GetFuncHandle(ModuleID ID){return *swerParam[ID].pVctXY;}
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <swer_GetFuncHandle+0x28>)
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3338      	adds	r3, #56	; 0x38
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	200002bc 	.word	0x200002bc

08002658 <canctrl_RxHeaderGetModeID>:
#define TARGET_FLAG_GROUP canEvent
void canctrl_SetFlag(CAN_MODE_ID e){SETFLAG(TARGET_FLAG_GROUP,e);}
bool canctrl_CheckFlag(CAN_MODE_ID e){return CHECKFLAG(TARGET_FLAG_GROUP,e);}
void canctrl_ClearFlag(CAN_MODE_ID e){CLEARFLAG(TARGET_FLAG_GROUP,e);}
uint32_t canctrl_GetEvent(){return canEvent;}
CAN_MODE_ID canctrl_RxHeaderGetModeID(){return rxHeader.StdId & 0x0f;}
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <canctrl_RxHeaderGetModeID+0x1c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	200003d0 	.word	0x200003d0

08002678 <canctrl_SetTargetDevice>:
void canctrl_SetTargetDevice(CAN_DEVICE_ID dev){ canctrl_SetID(dev << CAN_DEVICE_POS);}
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f86c 	bl	8002764 <canctrl_SetID>
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <canctrl_GetRxHeader>:
CAN_RxHeaderTypeDef canctrl_GetRxHeader(){return rxHeader;}
 8002694:	b4b0      	push	{r4, r5, r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a07      	ldr	r2, [pc, #28]	; (80026bc <canctrl_GetRxHeader+0x28>)
 80026a0:	461c      	mov	r4, r3
 80026a2:	4615      	mov	r5, r2
 80026a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bcb0      	pop	{r4, r5, r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200003d0 	.word	0x200003d0

080026c0 <canctrl_RTR_SetToData>:
void canctrl_RTR_SetToData(){txHeader.RTR = CAN_RTR_DATA;}
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <canctrl_RTR_SetToData+0x14>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	200003b8 	.word	0x200003b8

080026d8 <canctrl_RTR_TxRequest>:
void canctrl_RTR_SetToRemote(){txHeader.RTR = CAN_RTR_REMOTE;}

HAL_StatusTypeDef canctrl_RTR_TxRequest(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID, CAN_MODE_ID modeID)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	4613      	mov	r3, r2
 80026e6:	70bb      	strb	r3, [r7, #2]
	if(!can) return HAL_ERROR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <canctrl_RTR_TxRequest+0x1a>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e02d      	b.n	800274e <canctrl_RTR_TxRequest+0x76>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f004 fb0d 	bl	8006d12 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <canctrl_RTR_TxRequest+0x2a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e025      	b.n	800274e <canctrl_RTR_TxRequest+0x76>
	HAL_StatusTypeDef err = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
	txHeader.DLC = 0;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
	txHeader.RTR = CAN_RTR_REMOTE;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 800270e:	2202      	movs	r2, #2
 8002710:	60da      	str	r2, [r3, #12]
	txHeader.StdId = modeID;
 8002712:	78bb      	ldrb	r3, [r7, #2]
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 8002716:	6013      	str	r3, [r2, #0]
	txHeader.IDE = CAN_ID_STD;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
	if(targetID) canctrl_SetTargetDevice(targetID);
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <canctrl_RTR_TxRequest+0x54>
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ffa6 	bl	8002678 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <canctrl_RTR_TxRequest+0x84>)
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <canctrl_RTR_TxRequest+0x88>)
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f004 fa12 	bl	8006b5c <HAL_CAN_AddTxMessage>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
	memset(txData,0,sizeof(txData));
 800273c:	2208      	movs	r2, #8
 800273e:	2100      	movs	r1, #0
 8002740:	4807      	ldr	r0, [pc, #28]	; (8002760 <canctrl_RTR_TxRequest+0x88>)
 8002742:	f00b f936 	bl	800d9b2 <memset>
	txHeader.StdId = 0;
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <canctrl_RTR_TxRequest+0x80>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
	return err;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003b8 	.word	0x200003b8
 800275c:	200003ac 	.word	0x200003ac
 8002760:	200003ec 	.word	0x200003ec

08002764 <canctrl_SetID>:

HAL_StatusTypeDef canctrl_SetID(uint32_t ID){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	if(ID > 0x7ff) return HAL_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002772:	d301      	bcc.n	8002778 <canctrl_SetID+0x14>
 8002774:	2301      	movs	r3, #1
 8002776:	e006      	b.n	8002786 <canctrl_SetID+0x22>
	txHeader.StdId |= ID;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <canctrl_SetID+0x30>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4313      	orrs	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <canctrl_SetID+0x30>)
 8002782:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200003b8 	.word	0x200003b8

08002798 <canctrl_PutMessage>:


HAL_StatusTypeDef canctrl_PutMessage(void* data,size_t dataSize)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	memset(txData,0,sizeof(txData));
 80027a2:	2208      	movs	r2, #8
 80027a4:	2100      	movs	r1, #0
 80027a6:	4809      	ldr	r0, [pc, #36]	; (80027cc <canctrl_PutMessage+0x34>)
 80027a8:	f00b f903 	bl	800d9b2 <memset>
	if(dataSize <= 8) txHeader.DLC = dataSize;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d802      	bhi.n	80027b8 <canctrl_PutMessage+0x20>
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <canctrl_PutMessage+0x38>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6113      	str	r3, [r2, #16]
	memcpy(txData,data,sizeof(txData));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <canctrl_PutMessage+0x34>)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6810      	ldr	r0, [r2, #0]
 80027be:	6851      	ldr	r1, [r2, #4]
 80027c0:	c303      	stmia	r3!, {r0, r1}
	return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200003ec 	.word	0x200003ec
 80027d0:	200003b8 	.word	0x200003b8

080027d4 <canctrl_GetMessage>:

HAL_StatusTypeDef canctrl_GetMessage(void *data, size_t sizeOfDataType){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	if(rxHeader.DLC != sizeOfDataType) return HAL_ERROR;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <canctrl_GetMessage+0x2c>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <canctrl_GetMessage+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e005      	b.n	80027f8 <canctrl_GetMessage+0x24>
	memcpy(data,rxData,sizeOfDataType);
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4905      	ldr	r1, [pc, #20]	; (8002804 <canctrl_GetMessage+0x30>)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f00b f9bc 	bl	800db6e <memcpy>
	return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200003d0 	.word	0x200003d0
 8002804:	200003f4 	.word	0x200003f4

08002808 <canctrl_Send>:
	} else return HAL_BUSY;
}


HAL_StatusTypeDef canctrl_Send(CAN_HandleTypeDef *can, CAN_DEVICE_ID targetID)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]

	if(!txHeader.DLC && !can) return HAL_ERROR;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <canctrl_Send+0x74>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <canctrl_Send+0x1e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <canctrl_Send+0x1e>
 8002822:	2301      	movs	r3, #1
 8002824:	e026      	b.n	8002874 <canctrl_Send+0x6c>
	if(!HAL_CAN_GetTxMailboxesFreeLevel(can)) return HAL_BUSY;
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f004 fa73 	bl	8006d12 <HAL_CAN_GetTxMailboxesFreeLevel>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <canctrl_Send+0x2e>
 8002832:	2302      	movs	r3, #2
 8002834:	e01e      	b.n	8002874 <canctrl_Send+0x6c>
	HAL_StatusTypeDef err = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
	txHeader.IDE = CAN_ID_STD;
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <canctrl_Send+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
	canctrl_RTR_SetToData();
 8002840:	f7ff ff3e 	bl	80026c0 <canctrl_RTR_SetToData>
	if(targetID) canctrl_SetTargetDevice(targetID);
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <canctrl_Send+0x4a>
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff13 	bl	8002678 <canctrl_SetTargetDevice>
	err = HAL_CAN_AddTxMessage(can, &txHeader, txData, txMailBox);
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <canctrl_Send+0x78>)
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <canctrl_Send+0x7c>)
 8002856:	4909      	ldr	r1, [pc, #36]	; (800287c <canctrl_Send+0x74>)
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f004 f97f 	bl	8006b5c <HAL_CAN_AddTxMessage>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
	txHeader.StdId = 0;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <canctrl_Send+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
	memset(txData,0,sizeof(txData));
 8002868:	2208      	movs	r2, #8
 800286a:	2100      	movs	r1, #0
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <canctrl_Send+0x7c>)
 800286e:	f00b f8a0 	bl	800d9b2 <memset>
	return err;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200003b8 	.word	0x200003b8
 8002880:	200003ac 	.word	0x200003ac
 8002884:	200003ec 	.word	0x200003ec

08002888 <canctrl_Receive_2>:
	checkEventFromRxHeader();
	return HAL_OK;
}

CAN_MODE_ID canctrl_Receive_2(CAN_HandleTypeDef *can, uint32_t FIFO)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	HAL_CAN_GetRxMessage(can, FIFO, &rxHeader, rxData);
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <canctrl_Receive_2+0x24>)
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <canctrl_Receive_2+0x28>)
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f004 fa6f 	bl	8006d7c <HAL_CAN_GetRxMessage>
	return canctrl_RxHeaderGetModeID();
 800289e:	f7ff fedb 	bl	8002658 <canctrl_RxHeaderGetModeID>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200003f4 	.word	0x200003f4
 80028b0:	200003d0 	.word	0x200003d0

080028b4 <canctrl_Filter_Mask16>:
										uint16_t lowID,
										uint16_t maskHigh,
										uint16_t maskLow,
										uint32_t filBank,
										uint32_t FIFO)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
	CAN_FilterTypeDef canFilCfg;
	canFilCfg.FilterActivation = CAN_FILTER_ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
	canFilCfg.FilterBank = filBank;
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
	canFilCfg.FilterFIFOAssignment = FIFO;
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d8:	623b      	str	r3, [r7, #32]
	canFilCfg.FilterIdLow = 		lowID;
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	617b      	str	r3, [r7, #20]
	canFilCfg.FilterIdHigh = 		highID;
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	613b      	str	r3, [r7, #16]
	canFilCfg.FilterMaskIdLow = 	maskLow;
 80028e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028e6:	61fb      	str	r3, [r7, #28]
	canFilCfg.FilterMaskIdHigh = 	maskHigh;
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	61bb      	str	r3, [r7, #24]
	canFilCfg.FilterMode = CAN_FILTERMODE_IDMASK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilCfg.FilterScale = CAN_FILTERSCALE_16BIT;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilCfg.SlaveStartFilterBank = 13;
 80028f4:	230d      	movs	r3, #13
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
	return HAL_CAN_ConfigFilter(can, &canFilCfg);
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4619      	mov	r1, r3
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f004 f808 	bl	8006914 <HAL_CAN_ConfigFilter>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3738      	adds	r7, #56	; 0x38
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <canfunc_SetBoolValue>:
	bool bVal = temp - 1;
	return bVal;
}

void canfunc_SetBoolValue(bool bVal, CAN_MODE_ID modeID)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	460a      	mov	r2, r1
 8002918:	71fb      	strb	r3, [r7, #7]
 800291a:	4613      	mov	r3, r2
 800291c:	71bb      	strb	r3, [r7, #6]
	if(modeID != CANCTRL_MODE_TEST
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	2b0b      	cmp	r3, #11
 8002922:	d00b      	beq.n	800293c <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_PID_BLDC_BREAKPROTECTION
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	2b0a      	cmp	r3, #10
 8002928:	d008      	beq.n	800293c <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_SET_HOME
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_MOTOR_BLDC_BRAKE
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d002      	beq.n	800293c <canfunc_SetBoolValue+0x2e>
	&& modeID != CANCTRL_MODE_UNTANGLE_WIRE
 8002936:	79bb      	ldrb	r3, [r7, #6]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d10e      	bne.n	800295a <canfunc_SetBoolValue+0x4c>
	) return;
	canctrl_SetID(modeID);
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff10 	bl	8002764 <canctrl_SetID>
	uint8_t temp = (uint8_t)bVal + 1;
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	3301      	adds	r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	73fb      	strb	r3, [r7, #15]
	canctrl_PutMessage((void*)&temp, 1);
 800294c:	f107 030f 	add.w	r3, r7, #15
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff20 	bl	8002798 <canctrl_PutMessage>
 8002958:	e000      	b.n	800295c <canfunc_SetBoolValue+0x4e>
	) return;
 800295a:	bf00      	nop
}
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <canfunc_MotorPutSpeedAndAngle>:
	if(canctrl_GetMessage(&encBLDC,sizeof(encBLDC))!= HAL_OK) while(1);
	return encBLDC;
}

void canfunc_MotorPutSpeedAndAngle(CAN_SpeedBLDC_AngleDC speedAngle)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	463b      	mov	r3, r7
 800296a:	e883 0003 	stmia.w	r3, {r0, r1}
	canctrl_SetID(CANCTRL_MODE_MOTOR_SPEED_ANGLE);
 800296e:	2002      	movs	r0, #2
 8002970:	f7ff fef8 	bl	8002764 <canctrl_SetID>
	canctrl_PutMessage((void*)&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC));
 8002974:	463b      	mov	r3, r7
 8002976:	2108      	movs	r1, #8
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff0d 	bl	8002798 <canctrl_PutMessage>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <canfunc_MotorGetSpeedAndAngle>:

CAN_SpeedBLDC_AngleDC canfunc_MotorGetSpeedAndAngle()
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	CAN_SpeedBLDC_AngleDC speedAngle;
	if(canctrl_GetMessage(&speedAngle, sizeof(CAN_SpeedBLDC_AngleDC)) != HAL_OK) while(1);
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	2108      	movs	r1, #8
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff1d 	bl	80027d4 <canctrl_GetMessage>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d000      	beq.n	80029a2 <canfunc_MotorGetSpeedAndAngle+0x1c>
 80029a0:	e7fe      	b.n	80029a0 <canfunc_MotorGetSpeedAndAngle+0x1a>
	return speedAngle;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	0000      	movs	r0, r0
 80029bc:	0000      	movs	r0, r0
	...

080029c0 <GamepPadHandle>:
 *  Created on: Oct 24, 2023
 *      Author: Admin
 */
#include"Gamepad.h"

void GamepPadHandle(_GamePad *pad,uint8_t *DataTayGame){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	pad->Status = 1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]

	pad->XLeft = DataTayGame[1];
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	785a      	ldrb	r2, [r3, #1]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	705a      	strb	r2, [r3, #1]
	pad->YLeft = DataTayGame[2];
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	789a      	ldrb	r2, [r3, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	709a      	strb	r2, [r3, #2]

	pad->XRight = DataTayGame[3];
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	78da      	ldrb	r2, [r3, #3]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	70da      	strb	r2, [r3, #3]
	pad->YRight = DataTayGame[4];
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	791a      	ldrb	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	711a      	strb	r2, [r3, #4]

	pad->Left = (DataTayGame[5] >> 7) & 1;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3305      	adds	r3, #5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	09db      	lsrs	r3, r3, #7
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	715a      	strb	r2, [r3, #5]
	pad->Up = (DataTayGame[5] >> 6) & 1;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3305      	adds	r3, #5
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	719a      	strb	r2, [r3, #6]
	pad->Right = (DataTayGame[5] >> 5) & 1;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3305      	adds	r3, #5
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	71da      	strb	r2, [r3, #7]
	pad->Down = (DataTayGame[5] >> 4) & 1;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3305      	adds	r3, #5
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	721a      	strb	r2, [r3, #8]

	pad->Square = (DataTayGame[5] >> 3) & 1;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3305      	adds	r3, #5
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	725a      	strb	r2, [r3, #9]
	pad->Triangle = (DataTayGame[5] >> 2) & 1;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3305      	adds	r3, #5
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	729a      	strb	r2, [r3, #10]
	pad->Circle = (DataTayGame[5] >> 1) & 1;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3305      	adds	r3, #5
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	72da      	strb	r2, [r3, #11]
	pad->Cross = DataTayGame[5] & 1;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3305      	adds	r3, #5
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	731a      	strb	r2, [r3, #12]

	pad->L1 = (DataTayGame[6] >> 7) & 1;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3306      	adds	r3, #6
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	09db      	lsrs	r3, r3, #7
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	735a      	strb	r2, [r3, #13]
	pad->L2 = (DataTayGame[6] >> 6) & 1;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3306      	adds	r3, #6
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	739a      	strb	r2, [r3, #14]
	pad->R1 = (DataTayGame[6] >> 5) & 1;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	3306      	adds	r3, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	741a      	strb	r2, [r3, #16]
	pad->R2 = (DataTayGame[6] >> 4) & 1;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3306      	adds	r3, #6
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	745a      	strb	r2, [r3, #17]

	pad->Touch = (DataTayGame[6] >> 3) & 1;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3306      	adds	r3, #6
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	74da      	strb	r2, [r3, #19]
	pad->Charge = (DataTayGame[6] >> 2) & 1;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3306      	adds	r3, #6
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	751a      	strb	r2, [r3, #20]

	pad->L3 = (DataTayGame[6] >> 1) & 1;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	3306      	adds	r3, #6
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	73da      	strb	r2, [r3, #15]
	pad->R3 = DataTayGame[6] & 1;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	3306      	adds	r3, #6
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	749a      	strb	r2, [r3, #18]

	pad->Battery = DataTayGame[7];
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	79da      	ldrb	r2, [r3, #7]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	755a      	strb	r2, [r3, #21]

	pad->XLeftCtr = ((pad->XLeft-125))*0.5/125;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	3b7d      	subs	r3, #125	; 0x7d
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fcfa 	bl	8000524 <__aeabi_i2d>
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <GamepPadHandle+0x2d8>)
 8002b36:	f7fd fd5f 	bl	80005f8 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <GamepPadHandle+0x2dc>)
 8002b48:	f7fd fe80 	bl	800084c <__aeabi_ddiv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f828 	bl	8000ba8 <__aeabi_d2f>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
	pad->YLeftCtr = ((pad->YLeft-125))*0.5/125;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	3b7d      	subs	r3, #125	; 0x7d
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcdd 	bl	8000524 <__aeabi_i2d>
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <GamepPadHandle+0x2d8>)
 8002b70:	f7fd fd42 	bl	80005f8 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <GamepPadHandle+0x2dc>)
 8002b82:	f7fd fe63 	bl	800084c <__aeabi_ddiv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f80b 	bl	8000ba8 <__aeabi_d2f>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	61da      	str	r2, [r3, #28]
	pad->XRightCtr =(((pad->XRight-125))*1/125);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	78db      	ldrb	r3, [r3, #3]
 8002b9c:	3b7d      	subs	r3, #125	; 0x7d
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <GamepPadHandle+0x2e0>)
 8002ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ba4:	10d2      	asrs	r2, r2, #3
 8002ba6:	17db      	asrs	r3, r3, #31
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	edc3 7a08 	vstr	s15, [r3, #32]

	if ((pad->XLeftCtr > -0.05)&&(pad->XLeftCtr < 0.05))pad->XLeftCtr = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc3 	bl	8000548 <__aeabi_f2d>
 8002bc2:	a32d      	add	r3, pc, #180	; (adr r3, 8002c78 <GamepPadHandle+0x2b8>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd ffa6 	bl	8000b18 <__aeabi_dcmpgt>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <GamepPadHandle+0x234>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fcb6 	bl	8000548 <__aeabi_f2d>
 8002bdc:	a328      	add	r3, pc, #160	; (adr r3, 8002c80 <GamepPadHandle+0x2c0>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd ff7b 	bl	8000adc <__aeabi_dcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <GamepPadHandle+0x234>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
	if ((pad->YLeftCtr > -0.05)&&(pad->YLeftCtr < 0.05))pad->YLeftCtr = 0;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_f2d>
 8002bfe:	a31e      	add	r3, pc, #120	; (adr r3, 8002c78 <GamepPadHandle+0x2b8>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd ff88 	bl	8000b18 <__aeabi_dcmpgt>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <GamepPadHandle+0x270>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc98 	bl	8000548 <__aeabi_f2d>
 8002c18:	a319      	add	r3, pc, #100	; (adr r3, 8002c80 <GamepPadHandle+0x2c0>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd ff5d 	bl	8000adc <__aeabi_dcmplt>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <GamepPadHandle+0x270>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc87 	bl	8000548 <__aeabi_f2d>
 8002c3a:	a313      	add	r3, pc, #76	; (adr r3, 8002c88 <GamepPadHandle+0x2c8>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd ff6a 	bl	8000b18 <__aeabi_dcmpgt>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d100      	bne.n	8002c4c <GamepPadHandle+0x28c>
}
 8002c4a:	e011      	b.n	8002c70 <GamepPadHandle+0x2b0>
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc79 	bl	8000548 <__aeabi_f2d>
 8002c56:	a30e      	add	r3, pc, #56	; (adr r3, 8002c90 <GamepPadHandle+0x2d0>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd ff3e 	bl	8000adc <__aeabi_dcmplt>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d100      	bne.n	8002c68 <GamepPadHandle+0x2a8>
}
 8002c66:	e003      	b.n	8002c70 <GamepPadHandle+0x2b0>
	if ((pad->XRightCtr > -0.1)&&(pad->XRightCtr < 0.1))pad->XRightCtr = 0;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	9999999a 	.word	0x9999999a
 8002c7c:	bfa99999 	.word	0xbfa99999
 8002c80:	9999999a 	.word	0x9999999a
 8002c84:	3fa99999 	.word	0x3fa99999
 8002c88:	9999999a 	.word	0x9999999a
 8002c8c:	bfb99999 	.word	0xbfb99999
 8002c90:	9999999a 	.word	0x9999999a
 8002c94:	3fb99999 	.word	0x3fb99999
 8002c98:	3fe00000 	.word	0x3fe00000
 8002c9c:	405f4000 	.word	0x405f4000
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <checkNull>:
#include "LogData.h"

char txLogBuffer[150] = {0};
UART_HandleTypeDef *targetUART;

static HAL_StatusTypeDef checkNull(){
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	if(targetUART != NULL) return HAL_OK;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <checkNull+0x1c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <checkNull+0x10>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <checkNull+0x12>
	return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000494 	.word	0x20000494

08002cc4 <log_Init>:

void log_Init(UART_HandleTypeDef *huart){
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

	targetUART = huart;
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <log_Init+0x1c>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000494 	.word	0x20000494

08002ce4 <log_TransmitCompleteHandle>:

void log_TransmitCompleteHandle(UART_HandleTypeDef *huart){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	if(huart != targetUART) return;
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <log_TransmitCompleteHandle+0x30>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d109      	bne.n	8002d0a <log_TransmitCompleteHandle+0x26>
	memset(txLogBuffer,0,strlen(txLogBuffer));
 8002cf6:	4808      	ldr	r0, [pc, #32]	; (8002d18 <log_TransmitCompleteHandle+0x34>)
 8002cf8:	f7fd faba 	bl	8000270 <strlen>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2100      	movs	r1, #0
 8002d02:	4805      	ldr	r0, [pc, #20]	; (8002d18 <log_TransmitCompleteHandle+0x34>)
 8002d04:	f00a fe55 	bl	800d9b2 <memset>
 8002d08:	e000      	b.n	8002d0c <log_TransmitCompleteHandle+0x28>
	if(huart != targetUART) return;
 8002d0a:	bf00      	nop

}
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000494 	.word	0x20000494
 8002d18:	200003fc 	.word	0x200003fc

08002d1c <log_SendString>:

void log_SendString(){
 8002d1c:	b598      	push	{r3, r4, r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	if(checkNull() != HAL_OK) return;
 8002d20:	f7ff ffc0 	bl	8002ca4 <checkNull>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d114      	bne.n	8002d54 <log_SendString+0x38>
	txLogBuffer[strlen(txLogBuffer) -1] = '\n';  //xóa dấu phẩy cuối cùng, thay bằng \n
 8002d2a:	480b      	ldr	r0, [pc, #44]	; (8002d58 <log_SendString+0x3c>)
 8002d2c:	f7fd faa0 	bl	8000270 <strlen>
 8002d30:	4603      	mov	r3, r0
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <log_SendString+0x3c>)
 8002d36:	210a      	movs	r1, #10
 8002d38:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_IT(targetUART, (uint8_t*)txLogBuffer, strlen(txLogBuffer));
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <log_SendString+0x40>)
 8002d3c:	681c      	ldr	r4, [r3, #0]
 8002d3e:	4806      	ldr	r0, [pc, #24]	; (8002d58 <log_SendString+0x3c>)
 8002d40:	f7fd fa96 	bl	8000270 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4903      	ldr	r1, [pc, #12]	; (8002d58 <log_SendString+0x3c>)
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f007 f95a 	bl	800a006 <HAL_UART_Transmit_IT>
 8002d52:	e000      	b.n	8002d56 <log_SendString+0x3a>
	if(checkNull() != HAL_OK) return;
 8002d54:	bf00      	nop
}
 8002d56:	bd98      	pop	{r3, r4, r7, pc}
 8002d58:	200003fc 	.word	0x200003fc
 8002d5c:	20000494 	.word	0x20000494

08002d60 <log_AddHeaderArgumentToBuffer>:


void log_AddHeaderArgumentToBuffer(char *name){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	char s[10] = {0};
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	809a      	strh	r2, [r3, #4]
	strcpy(s,name);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00a feee 	bl	800db5e <strcpy>
	sprintf(txLogBuffer+strlen(txLogBuffer),"%s,",s);
 8002d82:	4808      	ldr	r0, [pc, #32]	; (8002da4 <log_AddHeaderArgumentToBuffer+0x44>)
 8002d84:	f7fd fa74 	bl	8000270 <strlen>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <log_AddHeaderArgumentToBuffer+0x44>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f107 020c 	add.w	r2, r7, #12
 8002d92:	4905      	ldr	r1, [pc, #20]	; (8002da8 <log_AddHeaderArgumentToBuffer+0x48>)
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00a fda9 	bl	800d8ec <siprintf>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200003fc 	.word	0x200003fc
 8002da8:	08012040 	.word	0x08012040

08002dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <vApplicationGetIdleTaskMemory+0x30>)
 8002dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000498 	.word	0x20000498
 8002ddc:	20000538 	.word	0x20000538

08002de0 <nodeHome_SetFlag>:
}


uint32_t nodeSwerveSetHomeComplete = 0;
#define SETHOME_FLAG_GROUP nodeSwerveSetHomeComplete
void nodeHome_SetFlag(CAN_DEVICE_ID e) {
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	SETFLAG(SETHOME_FLAG_GROUP, e);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2201      	movs	r2, #1
 8002dee:	409a      	lsls	r2, r3
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <nodeHome_SetFlag+0x28>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <nodeHome_SetFlag+0x28>)
 8002df8:	6013      	str	r3, [r2, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	2000117c 	.word	0x2000117c

08002e0c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*=============================== CAN ===============================*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002e14:	2102      	movs	r1, #2
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f004 f8e8 	bl	8006fec <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO0);
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fd32 	bl	8002888 <canctrl_Receive_2>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	7bf9      	ldrb	r1, [r7, #15]
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f009 faa8 	bl	800c390 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000e8c 	.word	0x20000e8c
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8002e70:	2110      	movs	r1, #16
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f004 f8ba 	bl	8006fec <HAL_CAN_DeactivateNotification>
	CAN_MODE_ID modeID = canctrl_Receive_2(hcan, CAN_RX_FIFO1);
 8002e78:	2101      	movs	r1, #1
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fd04 	bl	8002888 <canctrl_Receive_2>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]
	BaseType_t HigherPriorityTaskWoken = pdFALSE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR(TaskCANHandle, modeID, eSetValueWithOverwrite, &HigherPriorityTaskWoken);
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	7bf9      	ldrb	r1, [r7, #15]
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	2203      	movs	r2, #3
 8002e98:	f009 fa7a 	bl	800c390 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_CAN_RxFifo1MsgPendingCallback+0x4a>
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000e8c 	.word	0x20000e8c
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <CAN_Init>:
void CAN_Init() {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af04      	add	r7, sp, #16
	HAL_CAN_Start(&hcan1);
 8002eca:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <CAN_Init+0x34>)
 8002ecc:	f003 fe02 	bl	8006ad4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8002ed0:	2112      	movs	r1, #18
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <CAN_Init+0x34>)
 8002ed4:	f004 f864 	bl	8006fa0 <HAL_CAN_ActivateNotification>
	canctrl_Filter_Mask16(&hcan1,
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	2300      	movs	r3, #0
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2360      	movs	r3, #96	; 0x60
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	2260      	movs	r2, #96	; 0x60
 8002ee8:	2120      	movs	r1, #32
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <CAN_Init+0x34>)
 8002eec:	f7ff fce2 	bl	80028b4 <canctrl_Filter_Mask16>
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			CANCTRL_MODE_SET_HOME << 5,
			CANCTRL_MODE_NODE_REQ_SPEED_ANGLE << 5,
			0,
			CAN_RX_FIFO0);
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000680 	.word	0x20000680

08002efc <setHomeComplete>:

void setHomeComplete()
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <handleFunctionCAN>:

void handleFunctionCAN(CAN_MODE_ID mode, CAN_DEVICE_ID targetID) {
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	460a      	mov	r2, r1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	73bb      	strb	r3, [r7, #14]
	switch (mode) {
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d020      	beq.n	8002f64 <handleFunctionCAN+0x58>
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	dc2c      	bgt.n	8002f80 <handleFunctionCAN+0x74>
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <handleFunctionCAN+0x24>
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d00b      	beq.n	8002f46 <handleFunctionCAN+0x3a>
		case CANCTRL_MODE_UNTANGLE_WIRE:
			canfunc_SetBoolValue(1,CANCTRL_MODE_UNTANGLE_WIRE);
			while(canctrl_Send(&hcan1, targetID) != HAL_OK);
			break;
		default:
			break;
 8002f2e:	e027      	b.n	8002f80 <handleFunctionCAN+0x74>
			nodeHome_SetFlag(targetID);
 8002f30:	7bbb      	ldrb	r3, [r7, #14]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff54 	bl	8002de0 <nodeHome_SetFlag>
			if(nodeSwerveSetHomeComplete == 30)
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <handleFunctionCAN+0x84>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b1e      	cmp	r3, #30
 8002f3e:	d121      	bne.n	8002f84 <handleFunctionCAN+0x78>
				setHomeComplete();
 8002f40:	f7ff ffdc 	bl	8002efc <setHomeComplete>
		break;
 8002f44:	e01e      	b.n	8002f84 <handleFunctionCAN+0x78>
			nodeSpeedAngle[targetID - 1] = canfunc_MotorGetSpeedAndAngle();
 8002f46:	7bbb      	ldrb	r3, [r7, #14]
 8002f48:	1e5c      	subs	r4, r3, #1
 8002f4a:	4d12      	ldr	r5, [pc, #72]	; (8002f94 <handleFunctionCAN+0x88>)
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd19 	bl	8002986 <canfunc_MotorGetSpeedAndAngle>
 8002f54:	00e3      	lsls	r3, r4, #3
 8002f56:	442b      	add	r3, r5
 8002f58:	463a      	mov	r2, r7
 8002f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5e:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8002f62:	e010      	b.n	8002f86 <handleFunctionCAN+0x7a>
			canfunc_SetBoolValue(1,CANCTRL_MODE_UNTANGLE_WIRE);
 8002f64:	210c      	movs	r1, #12
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7ff fcd1 	bl	800290e <canfunc_SetBoolValue>
			while(canctrl_Send(&hcan1, targetID) != HAL_OK);
 8002f6c:	bf00      	nop
 8002f6e:	7bbb      	ldrb	r3, [r7, #14]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4809      	ldr	r0, [pc, #36]	; (8002f98 <handleFunctionCAN+0x8c>)
 8002f74:	f7ff fc48 	bl	8002808 <canctrl_Send>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f7      	bne.n	8002f6e <handleFunctionCAN+0x62>
			break;
 8002f7e:	e002      	b.n	8002f86 <handleFunctionCAN+0x7a>
			break;
 8002f80:	bf00      	nop
 8002f82:	e000      	b.n	8002f86 <handleFunctionCAN+0x7a>
		break;
 8002f84:	bf00      	nop
	}

}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000117c 	.word	0x2000117c
 8002f94:	20001180 	.word	0x20001180
 8002f98:	20000680 	.word	0x20000680

08002f9c <HAL_UART_RxCpltCallback>:
/*=============================== UART ===============================*/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_UART_RxCpltCallback+0xa8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d145      	bne.n	800303a <HAL_UART_RxCpltCallback+0x9e>
		gamepadRxIsBusy = 1;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_UART_RxCpltCallback+0xac>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
		int ViTriData = -1;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00a      	b.n	8002fd6 <HAL_UART_RxCpltCallback+0x3a>
			if (UARTRX3_Buffer[i] == 0xAA) {
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_UART_RxCpltCallback+0xb0>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2baa      	cmp	r3, #170	; 0xaa
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_RxCpltCallback+0x34>
				ViTriData = i;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	617b      	str	r3, [r7, #20]
		for (int i = 0; i <= 8; ++i) {
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	ddf1      	ble.n	8002fc0 <HAL_UART_RxCpltCallback+0x24>
			}
		}
		if (ViTriData != -1) {
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d01e      	beq.n	8003022 <HAL_UART_RxCpltCallback+0x86>
			int cnt = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8002fe8:	e013      	b.n	8003012 <HAL_UART_RxCpltCallback+0x76>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_UART_RxCpltCallback+0xb0>)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4413      	add	r3, r2
 8002ff0:	7819      	ldrb	r1, [r3, #0]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_UART_RxCpltCallback+0xb4>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
				if (ViTriData >= 9) {
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b08      	cmp	r3, #8
 8003006:	dd01      	ble.n	800300c <HAL_UART_RxCpltCallback+0x70>
					ViTriData = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
			while (cnt < 9) {
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b08      	cmp	r3, #8
 8003016:	dde8      	ble.n	8002fea <HAL_UART_RxCpltCallback+0x4e>
			}

			GamepPadHandle(&GamePad, DataTayGame);
 8003018:	490d      	ldr	r1, [pc, #52]	; (8003050 <HAL_UART_RxCpltCallback+0xb4>)
 800301a:	480e      	ldr	r0, [pc, #56]	; (8003054 <HAL_UART_RxCpltCallback+0xb8>)
 800301c:	f7ff fcd0 	bl	80029c0 <GamepPadHandle>
 8003020:	e002      	b.n	8003028 <HAL_UART_RxCpltCallback+0x8c>

		} else {
			GamePad.Status = 0;
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_UART_RxCpltCallback+0xb8>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
		}
		if (!gamepadRxIsBusy)
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_UART_RxCpltCallback+0xac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_UART_RxCpltCallback+0x9e>
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8003030:	2209      	movs	r2, #9
 8003032:	4906      	ldr	r1, [pc, #24]	; (800304c <HAL_UART_RxCpltCallback+0xb0>)
 8003034:	4808      	ldr	r0, [pc, #32]	; (8003058 <HAL_UART_RxCpltCallback+0xbc>)
 8003036:	f007 f82b 	bl	800a090 <HAL_UART_Receive_IT>

	}
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40004800 	.word	0x40004800
 8003048:	200011d4 	.word	0x200011d4
 800304c:	20001198 	.word	0x20001198
 8003050:	200011a4 	.word	0x200011a4
 8003054:	200011b0 	.word	0x200011b0
 8003058:	200008e0 	.word	0x200008e0

0800305c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	while (1);
 8003064:	e7fe      	b.n	8003064 <HAL_CAN_ErrorCallback+0x8>
	...

08003068 <HAL_UART_ErrorCallback>:
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
	memset(UARTRX3_Buffer, 0, sizeof(UARTRX3_Buffer));
 8003086:	2209      	movs	r2, #9
 8003088:	2100      	movs	r1, #0
 800308a:	480a      	ldr	r0, [pc, #40]	; (80030b4 <HAL_UART_ErrorCallback+0x4c>)
 800308c:	f00a fc91 	bl	800d9b2 <memset>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8003090:	2209      	movs	r2, #9
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <HAL_UART_ErrorCallback+0x4c>)
 8003094:	4808      	ldr	r0, [pc, #32]	; (80030b8 <HAL_UART_ErrorCallback+0x50>)
 8003096:	f006 fffb 	bl	800a090 <HAL_UART_Receive_IT>
	__HAL_UART_DISABLE(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a8:	60da      	str	r2, [r3, #12]
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20001198 	.word	0x20001198
 80030b8:	200008e0 	.word	0x200008e0

080030bc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	log_TransmitCompleteHandle(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fe0d 	bl	8002ce4 <log_TransmitCompleteHandle>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <Send_Data>:

void Send_Data(){
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0

	log_SendString();
 80030d6:	f7ff fe21 	bl	8002d1c <log_SendString>
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <Send_Header>:

void Send_Header(){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	log_AddHeaderArgumentToBuffer("PoseX");
 80030e4:	480a      	ldr	r0, [pc, #40]	; (8003110 <Send_Header+0x30>)
 80030e6:	f7ff fe3b 	bl	8002d60 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseY");
 80030ea:	480a      	ldr	r0, [pc, #40]	; (8003114 <Send_Header+0x34>)
 80030ec:	f7ff fe38 	bl	8002d60 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("PoseTheta");
 80030f0:	4809      	ldr	r0, [pc, #36]	; (8003118 <Send_Header+0x38>)
 80030f2:	f7ff fe35 	bl	8002d60 <log_AddHeaderArgumentToBuffer>

	log_AddHeaderArgumentToBuffer("TrajecPlanX");
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <Send_Header+0x3c>)
 80030f8:	f7ff fe32 	bl	8002d60 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanY");
 80030fc:	4808      	ldr	r0, [pc, #32]	; (8003120 <Send_Header+0x40>)
 80030fe:	f7ff fe2f 	bl	8002d60 <log_AddHeaderArgumentToBuffer>
	log_AddHeaderArgumentToBuffer("TrajecPlanTheta");
 8003102:	4808      	ldr	r0, [pc, #32]	; (8003124 <Send_Header+0x44>)
 8003104:	f7ff fe2c 	bl	8002d60 <log_AddHeaderArgumentToBuffer>

	log_SendString();
 8003108:	f7ff fe08 	bl	8002d1c <log_SendString>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	0801205c 	.word	0x0801205c
 8003114:	08012064 	.word	0x08012064
 8003118:	0801206c 	.word	0x0801206c
 800311c:	08012078 	.word	0x08012078
 8003120:	08012084 	.word	0x08012084
 8003124:	08012090 	.word	0x08012090

08003128 <Get_MPU_Angle>:

///////////////////////////MPU//////////////////////////
#define DELTA_T 0.05
void Get_MPU_Angle()
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
    send_mpu ='z';
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <Get_MPU_Angle+0x44>)
 800312e:	227a      	movs	r2, #122	; 0x7a
 8003130:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 8003132:	2301      	movs	r3, #1
 8003134:	2201      	movs	r2, #1
 8003136:	490d      	ldr	r1, [pc, #52]	; (800316c <Get_MPU_Angle+0x44>)
 8003138:	480d      	ldr	r0, [pc, #52]	; (8003170 <Get_MPU_Angle+0x48>)
 800313a:	f006 fed2 	bl	8009ee2 <HAL_UART_Transmit>
    angle=mpu[0]<<8|mpu[1];
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <Get_MPU_Angle+0x4c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21a      	sxth	r2, r3
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <Get_MPU_Angle+0x4c>)
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	b21b      	sxth	r3, r3
 800314c:	4313      	orrs	r3, r2
 800314e:	b21a      	sxth	r2, r3
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <Get_MPU_Angle+0x50>)
 8003152:	801a      	strh	r2, [r3, #0]
    a_Now=angle;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <Get_MPU_Angle+0x50>)
 8003156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <Get_MPU_Angle+0x54>)
 8003164:	edc3 7a00 	vstr	s15, [r3]
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200011f2 	.word	0x200011f2
 8003170:	20000858 	.word	0x20000858
 8003174:	200011e8 	.word	0x200011e8
 8003178:	200011f4 	.word	0x200011f4
 800317c:	200011f8 	.word	0x200011f8

08003180 <Reset_MPU_Angle>:

void Reset_MPU_Angle()
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
    send_mpu ='a';
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <Reset_MPU_Angle+0x1c>)
 8003186:	2261      	movs	r2, #97	; 0x61
 8003188:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,&send_mpu,1,1);
 800318a:	2301      	movs	r3, #1
 800318c:	2201      	movs	r2, #1
 800318e:	4903      	ldr	r1, [pc, #12]	; (800319c <Reset_MPU_Angle+0x1c>)
 8003190:	4803      	ldr	r0, [pc, #12]	; (80031a0 <Reset_MPU_Angle+0x20>)
 8003192:	f006 fea6 	bl	8009ee2 <HAL_UART_Transmit>

}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200011f2 	.word	0x200011f2
 80031a0:	20000858 	.word	0x20000858

080031a4 <process_Init>:
/////////////////////Process///////////////////



void process_Init()
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	////////PID/////////
	pid_Angle.kP = 1.2;
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <process_Init+0x54>)
 80031aa:	4a14      	ldr	r2, [pc, #80]	; (80031fc <process_Init+0x58>)
 80031ac:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <process_Init+0x54>)
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <process_Init+0x54>)
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <process_Init+0x54>)
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <process_Init+0x54>)
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <process_Init+0x5c>)
 80031ca:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <process_Init+0x54>)
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <process_Init+0x60>)
 80031d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <process_Init+0x54>)
 80031d4:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <process_Init+0x64>)
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <process_Init+0x54>)
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <process_Init+0x68>)
 80031dc:	61da      	str	r2, [r3, #28]

	process_AutoChose = 0;
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <process_Init+0x6c>)
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
	encoder_Init(&FloatingEnc, &htim1, 200, DELTA_T);
 80031e6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003214 <process_Init+0x70>
 80031ea:	22c8      	movs	r2, #200	; 0xc8
 80031ec:	490a      	ldr	r1, [pc, #40]	; (8003218 <process_Init+0x74>)
 80031ee:	480b      	ldr	r0, [pc, #44]	; (800321c <process_Init+0x78>)
 80031f0:	f7fd fea8 	bl	8000f44 <encoder_Init>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20001200 	.word	0x20001200
 80031fc:	3f99999a 	.word	0x3f99999a
 8003200:	3d4ccccd 	.word	0x3d4ccccd
 8003204:	40a00000 	.word	0x40a00000
 8003208:	c0a00000 	.word	0xc0a00000
 800320c:	41a00000 	.word	0x41a00000
 8003210:	20001290 	.word	0x20001290
 8003214:	3d4ccccd 	.word	0x3d4ccccd
 8003218:	200006a8 	.word	0x200006a8
 800321c:	2000124c 	.word	0x2000124c

08003220 <process_PD_OnStrainghtPath>:

void process_PD_OnStrainghtPath()
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
	pid_Angle.kP = 2.5;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <process_PD_OnStrainghtPath+0x48>)
 8003228:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <process_PD_OnStrainghtPath+0x4c>)
 8003246:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <process_PD_OnStrainghtPath+0x50>)
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <process_PD_OnStrainghtPath+0x54>)
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <process_PD_OnStrainghtPath+0x44>)
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <process_PD_OnStrainghtPath+0x58>)
 8003258:	61da      	str	r2, [r3, #28]
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	20001200 	.word	0x20001200
 8003268:	40200000 	.word	0x40200000
 800326c:	3d4ccccd 	.word	0x3d4ccccd
 8003270:	40a00000 	.word	0x40a00000
 8003274:	c0a00000 	.word	0xc0a00000
 8003278:	41a00000 	.word	0x41a00000

0800327c <process_PD_OnTrajecPath>:

void process_PD_OnTrajecPath()
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	pid_Angle.kP = 1.2;
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <process_PD_OnTrajecPath+0x48>)
 8003284:	60da      	str	r2, [r3, #12]
	pid_Angle.kI = 0;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
	pid_Angle.kD = 0;
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
	pid_Angle.alpha = 0;
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
	pid_Angle.deltaT = DELTA_T;
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <process_PD_OnTrajecPath+0x4c>)
 80032a2:	609a      	str	r2, [r3, #8]
	pid_Angle.u_AboveLimit = 5;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <process_PD_OnTrajecPath+0x50>)
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pid_Angle.u_BelowLimit = -5;
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 80032ac:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <process_PD_OnTrajecPath+0x54>)
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
	pid_Angle.kB = 1/DELTA_T;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <process_PD_OnTrajecPath+0x44>)
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <process_PD_OnTrajecPath+0x58>)
 80032b4:	61da      	str	r2, [r3, #28]
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	20001200 	.word	0x20001200
 80032c4:	3f99999a 	.word	0x3f99999a
 80032c8:	3d4ccccd 	.word	0x3d4ccccd
 80032cc:	40a00000 	.word	0x40a00000
 80032d0:	c0a00000 	.word	0xc0a00000
 80032d4:	41a00000 	.word	0x41a00000

080032d8 <process_PD_Auto_Chose>:

void process_PD_Auto_Chose(float Target,float Current)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	ed87 0a01 	vstr	s0, [r7, #4]
 80032e2:	edc7 0a00 	vstr	s1, [r7]
	if(process_AutoChose == 0)
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <process_PD_Auto_Chose+0xc0>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d125      	bne.n	8003342 <process_PD_Auto_Chose+0x6a>
	{
		if(absf(Target - Current)<5*M_PI/180)
 80032f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80032fa:	edd7 7a00 	vldr	s15, [r7]
 80032fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003302:	eeb0 0a67 	vmov.f32	s0, s15
 8003306:	f7fe f941 	bl	800158c <absf>
 800330a:	ee10 3a10 	vmov	r3, s0
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f91a 	bl	8000548 <__aeabi_f2d>
 8003314:	a31e      	add	r3, pc, #120	; (adr r3, 8003390 <process_PD_Auto_Chose+0xb8>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd fbdf 	bl	8000adc <__aeabi_dcmplt>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <process_PD_Auto_Chose+0x62>
		{
			process_AutoChose_Count++;
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <process_PD_Auto_Chose+0xc4>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800332e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <process_PD_Auto_Chose+0xc4>)
 8003334:	edc3 7a00 	vstr	s15, [r3]
 8003338:	e003      	b.n	8003342 <process_PD_Auto_Chose+0x6a>
		}else{
			process_AutoChose_Count = 0;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <process_PD_Auto_Chose+0xc4>)
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
		}
	}

	if (process_AutoChose_Count>15)
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <process_PD_Auto_Chose+0xc4>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800334c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	dd07      	ble.n	8003366 <process_PD_Auto_Chose+0x8e>
	{
		process_AutoChose_Count = 0;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <process_PD_Auto_Chose+0xc4>)
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
		process_AutoChose = 1;
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <process_PD_Auto_Chose+0xc0>)
 8003360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003364:	601a      	str	r2, [r3, #0]
	}

	if (process_AutoChose == 1)
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <process_PD_Auto_Chose+0xc0>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003370:	eef4 7a47 	vcmp.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	d102      	bne.n	8003380 <process_PD_Auto_Chose+0xa8>
	{
		process_PD_OnStrainghtPath();
 800337a:	f7ff ff51 	bl	8003220 <process_PD_OnStrainghtPath>
	}else{
		process_PD_OnTrajecPath();
	}
}
 800337e:	e001      	b.n	8003384 <process_PD_Auto_Chose+0xac>
		process_PD_OnTrajecPath();
 8003380:	f7ff ff7c 	bl	800327c <process_PD_OnTrajecPath>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	f3af 8000 	nop.w
 8003390:	4ae74487 	.word	0x4ae74487
 8003394:	3fb65718 	.word	0x3fb65718
 8003398:	20001290 	.word	0x20001290
 800339c:	20001294 	.word	0x20001294

080033a0 <process_SetFloatingEnc>:
void process_SetFloatingEnc()
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	floatingEncCount = encoder_GetFloatingDis(&FloatingEnc);
 80033a4:	4806      	ldr	r0, [pc, #24]	; (80033c0 <process_SetFloatingEnc+0x20>)
 80033a6:	f7fd fe02 	bl	8000fae <encoder_GetFloatingDis>
 80033aa:	eef0 7a40 	vmov.f32	s15, s0
 80033ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b2:	ee17 2a90 	vmov	r2, s15
 80033b6:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <process_SetFloatingEnc+0x24>)
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000124c 	.word	0x2000124c
 80033c4:	2000127c 	.word	0x2000127c

080033c8 <process_ResetFloatingEnc>:

void process_ResetFloatingEnc()
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	encoder_ResetCount(&FloatingEnc);
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <process_ResetFloatingEnc+0x14>)
 80033ce:	f7fd fdd1 	bl	8000f74 <encoder_ResetCount>
	floatingEncCount = 0;
 80033d2:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <process_ResetFloatingEnc+0x18>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000124c 	.word	0x2000124c
 80033e0:	2000127c 	.word	0x2000127c
 80033e4:	00000000 	.word	0x00000000

080033e8 <process_Accel_FloatingEnc2>:
	u = cos(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
	v = sin(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
}

void process_Accel_FloatingEnc2(float Angle,float maxSpeed,float s,float accel)
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80033f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80033f6:	ed87 1a01 	vstr	s2, [r7, #4]
 80033fa:	edc7 1a00 	vstr	s3, [r7]
	use_pidTheta = 1;
 80033fe:	4b7a      	ldr	r3, [pc, #488]	; (80035e8 <process_Accel_FloatingEnc2+0x200>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
	if ((floatingEncCount < 500)&&(chasis_Vector_TargetSpeed<maxSpeed))
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <process_Accel_FloatingEnc2+0x204>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800340c:	da13      	bge.n	8003436 <process_Accel_FloatingEnc2+0x4e>
 800340e:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	ed97 7a02 	vldr	s14, [r7, #8]
 8003418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003420:	dd09      	ble.n	8003436 <process_Accel_FloatingEnc2+0x4e>
	{
		chasis_Vector_TargetSpeed += accel;
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	edd7 7a00 	vldr	s15, [r7]
 800342c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003430:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003432:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((floatingEncCount > 500)&&(floatingEncCount < (s - 500)))
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <process_Accel_FloatingEnc2+0x204>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800343e:	dd19      	ble.n	8003474 <process_Accel_FloatingEnc2+0x8c>
 8003440:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <process_Accel_FloatingEnc2+0x204>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800344c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003450:	eddf 6a68 	vldr	s13, [pc, #416]	; 80035f4 <process_Accel_FloatingEnc2+0x20c>
 8003454:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	d508      	bpl.n	8003474 <process_Accel_FloatingEnc2+0x8c>
	{
		chasis_Vector_TargetSpeed = maxSpeed/2;
 8003462:	ed97 7a02 	vldr	s14, [r7, #8]
 8003466:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800346a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346e:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
	}

	if (floatingEncCount > (s - 400)){
 8003474:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <process_Accel_FloatingEnc2+0x204>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003480:	edd7 7a01 	vldr	s15, [r7, #4]
 8003484:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80035f8 <process_Accel_FloatingEnc2+0x210>
 8003488:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800348c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	dd09      	ble.n	80034aa <process_Accel_FloatingEnc2+0xc2>
		chasis_Vector_TargetSpeed -= accel ;
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003498:	ed93 7a00 	vldr	s14, [r3]
 800349c:	edd7 7a00 	vldr	s15, [r7]
 80034a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 80034a6:	edc3 7a00 	vstr	s15, [r3]
//	if (floatingEncCount > (s - 300)){
//		use_pidTheta = 0;
//		r = 0;
//	}

	if ((chasis_Vector_TargetSpeed<=0)||(floatingEncCount > s))
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	d90c      	bls.n	80034d4 <process_Accel_FloatingEnc2+0xec>
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <process_Accel_FloatingEnc2+0x204>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80034ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d51b      	bpl.n	800350c <process_Accel_FloatingEnc2+0x124>
	{
		chasis_Vector_TargetSpeed = 0;
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
		process_ResetFloatingEnc();
 80034dc:	f7ff ff74 	bl	80033c8 <process_ResetFloatingEnc>
		r = 0;
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <process_Accel_FloatingEnc2+0x214>)
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
		u = 0;
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <process_Accel_FloatingEnc2+0x218>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
		v = 0;
 80034f0:	4b44      	ldr	r3, [pc, #272]	; (8003604 <process_Accel_FloatingEnc2+0x21c>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
		use_pidTheta = 0;
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <process_Accel_FloatingEnc2+0x200>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
		step += 1;
 80034fe:	4b42      	ldr	r3, [pc, #264]	; (8003608 <process_Accel_FloatingEnc2+0x220>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <process_Accel_FloatingEnc2+0x220>)
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e062      	b.n	80035d2 <process_Accel_FloatingEnc2+0x1ea>
	}else{
		u = cos(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7fd f81b 	bl	8000548 <__aeabi_f2d>
 8003512:	a333      	add	r3, pc, #204	; (adr r3, 80035e0 <process_Accel_FloatingEnc2+0x1f8>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f86e 	bl	80005f8 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <process_Accel_FloatingEnc2+0x224>)
 800352a:	f7fd f98f 	bl	800084c <__aeabi_ddiv>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	ec43 2b17 	vmov	d7, r2, r3
 8003536:	eeb0 0a47 	vmov.f32	s0, s14
 800353a:	eef0 0a67 	vmov.f32	s1, s15
 800353e:	f00c fc2f 	bl	800fda0 <cos>
 8003542:	ec55 4b10 	vmov	r4, r5, d0
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc fffc 	bl	8000548 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fd f84e 	bl	80005f8 <__aeabi_dmul>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fb20 	bl	8000ba8 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <process_Accel_FloatingEnc2+0x218>)
 800356c:	6013      	str	r3, [r2, #0]
		v = sin(Angle*M_PI/180)*chasis_Vector_TargetSpeed ;
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7fc ffea 	bl	8000548 <__aeabi_f2d>
 8003574:	a31a      	add	r3, pc, #104	; (adr r3, 80035e0 <process_Accel_FloatingEnc2+0x1f8>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f7fd f83d 	bl	80005f8 <__aeabi_dmul>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <process_Accel_FloatingEnc2+0x224>)
 800358c:	f7fd f95e 	bl	800084c <__aeabi_ddiv>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	ec43 2b17 	vmov	d7, r2, r3
 8003598:	eeb0 0a47 	vmov.f32	s0, s14
 800359c:	eef0 0a67 	vmov.f32	s1, s15
 80035a0:	f00c fc52 	bl	800fe48 <sin>
 80035a4:	ec55 4b10 	vmov	r4, r5, d0
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <process_Accel_FloatingEnc2+0x208>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffcb 	bl	8000548 <__aeabi_f2d>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fd f81d 	bl	80005f8 <__aeabi_dmul>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd faef 	bl	8000ba8 <__aeabi_d2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <process_Accel_FloatingEnc2+0x21c>)
 80035ce:	6013      	str	r3, [r2, #0]

	}
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdb0      	pop	{r4, r5, r7, pc}
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w
 80035e0:	54442d18 	.word	0x54442d18
 80035e4:	400921fb 	.word	0x400921fb
 80035e8:	20001248 	.word	0x20001248
 80035ec:	2000127c 	.word	0x2000127c
 80035f0:	2000128c 	.word	0x2000128c
 80035f4:	43fa0000 	.word	0x43fa0000
 80035f8:	43c80000 	.word	0x43c80000
 80035fc:	20001288 	.word	0x20001288
 8003600:	20001280 	.word	0x20001280
 8003604:	20001284 	.word	0x20001284
 8003608:	200011e6 	.word	0x200011e6
 800360c:	40668000 	.word	0x40668000

08003610 <process_RunByAngle>:

void process_RunByAngle(float Angle,float speed)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	ed87 0a01 	vstr	s0, [r7, #4]
 800361a:	edc7 0a00 	vstr	s1, [r7]
	u = cos(Angle*M_PI/180)*speed ;
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fc ff92 	bl	8000548 <__aeabi_f2d>
 8003624:	a330      	add	r3, pc, #192	; (adr r3, 80036e8 <process_RunByAngle+0xd8>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc ffe5 	bl	80005f8 <__aeabi_dmul>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <process_RunByAngle+0xe0>)
 800363c:	f7fd f906 	bl	800084c <__aeabi_ddiv>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	ec43 2b17 	vmov	d7, r2, r3
 8003648:	eeb0 0a47 	vmov.f32	s0, s14
 800364c:	eef0 0a67 	vmov.f32	s1, s15
 8003650:	f00c fba6 	bl	800fda0 <cos>
 8003654:	ec55 4b10 	vmov	r4, r5, d0
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f7fc ff75 	bl	8000548 <__aeabi_f2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fc ffc7 	bl	80005f8 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f7fd fa99 	bl	8000ba8 <__aeabi_d2f>
 8003676:	4603      	mov	r3, r0
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <process_RunByAngle+0xe4>)
 800367a:	6013      	str	r3, [r2, #0]
	v = sin(Angle*M_PI/180)*speed ;
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fc ff63 	bl	8000548 <__aeabi_f2d>
 8003682:	a319      	add	r3, pc, #100	; (adr r3, 80036e8 <process_RunByAngle+0xd8>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f7fc ffb6 	bl	80005f8 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <process_RunByAngle+0xe0>)
 800369a:	f7fd f8d7 	bl	800084c <__aeabi_ddiv>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	ec43 2b17 	vmov	d7, r2, r3
 80036a6:	eeb0 0a47 	vmov.f32	s0, s14
 80036aa:	eef0 0a67 	vmov.f32	s1, s15
 80036ae:	f00c fbcb 	bl	800fe48 <sin>
 80036b2:	ec55 4b10 	vmov	r4, r5, d0
 80036b6:	6838      	ldr	r0, [r7, #0]
 80036b8:	f7fc ff46 	bl	8000548 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc ff98 	bl	80005f8 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fd fa6a 	bl	8000ba8 <__aeabi_d2f>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <process_RunByAngle+0xe8>)
 80036d8:	6013      	str	r3, [r2, #0]
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdb0      	pop	{r4, r5, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	f3af 8000 	nop.w
 80036e8:	54442d18 	.word	0x54442d18
 80036ec:	400921fb 	.word	0x400921fb
 80036f0:	40668000 	.word	0x40668000
 80036f4:	20001280 	.word	0x20001280
 80036f8:	20001284 	.word	0x20001284

080036fc <process_Signal_RotationMatrixTransform>:

void process_Signal_RotationMatrixTransform(float u, float v ,float r)
{
 80036fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	ed87 0a03 	vstr	s0, [r7, #12]
 8003708:	edc7 0a02 	vstr	s1, [r7, #8]
 800370c:	ed87 1a01 	vstr	s2, [r7, #4]
	uControlX = u*cos(angle_Rad) - v*sin(angle_Rad);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fc ff19 	bl	8000548 <__aeabi_f2d>
 8003716:	4604      	mov	r4, r0
 8003718:	460d      	mov	r5, r1
 800371a:	4b40      	ldr	r3, [pc, #256]	; (800381c <process_Signal_RotationMatrixTransform+0x120>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc ff12 	bl	8000548 <__aeabi_f2d>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	ec43 2b10 	vmov	d0, r2, r3
 800372c:	f00c fb38 	bl	800fda0 <cos>
 8003730:	ec53 2b10 	vmov	r2, r3, d0
 8003734:	4620      	mov	r0, r4
 8003736:	4629      	mov	r1, r5
 8003738:	f7fc ff5e 	bl	80005f8 <__aeabi_dmul>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4690      	mov	r8, r2
 8003742:	4699      	mov	r9, r3
 8003744:	68b8      	ldr	r0, [r7, #8]
 8003746:	f7fc feff 	bl	8000548 <__aeabi_f2d>
 800374a:	4604      	mov	r4, r0
 800374c:	460d      	mov	r5, r1
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <process_Signal_RotationMatrixTransform+0x120>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fef8 	bl	8000548 <__aeabi_f2d>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	ec43 2b10 	vmov	d0, r2, r3
 8003760:	f00c fb72 	bl	800fe48 <sin>
 8003764:	ec53 2b10 	vmov	r2, r3, d0
 8003768:	4620      	mov	r0, r4
 800376a:	4629      	mov	r1, r5
 800376c:	f7fc ff44 	bl	80005f8 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4640      	mov	r0, r8
 8003776:	4649      	mov	r1, r9
 8003778:	f7fc fd86 	bl	8000288 <__aeabi_dsub>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd fa10 	bl	8000ba8 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <process_Signal_RotationMatrixTransform+0x124>)
 800378c:	6013      	str	r3, [r2, #0]
	uControlY = u*sin(angle_Rad) + v*cos(angle_Rad);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7fc feda 	bl	8000548 <__aeabi_f2d>
 8003794:	4604      	mov	r4, r0
 8003796:	460d      	mov	r5, r1
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <process_Signal_RotationMatrixTransform+0x120>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fed3 	bl	8000548 <__aeabi_f2d>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	ec43 2b10 	vmov	d0, r2, r3
 80037aa:	f00c fb4d 	bl	800fe48 <sin>
 80037ae:	ec53 2b10 	vmov	r2, r3, d0
 80037b2:	4620      	mov	r0, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	f7fc ff1f 	bl	80005f8 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4690      	mov	r8, r2
 80037c0:	4699      	mov	r9, r3
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f7fc fec0 	bl	8000548 <__aeabi_f2d>
 80037c8:	4604      	mov	r4, r0
 80037ca:	460d      	mov	r5, r1
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <process_Signal_RotationMatrixTransform+0x120>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc feb9 	bl	8000548 <__aeabi_f2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	ec43 2b10 	vmov	d0, r2, r3
 80037de:	f00c fadf 	bl	800fda0 <cos>
 80037e2:	ec53 2b10 	vmov	r2, r3, d0
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fc ff05 	bl	80005f8 <__aeabi_dmul>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4640      	mov	r0, r8
 80037f4:	4649      	mov	r1, r9
 80037f6:	f7fc fd49 	bl	800028c <__adddf3>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f9d1 	bl	8000ba8 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	4a06      	ldr	r2, [pc, #24]	; (8003824 <process_Signal_RotationMatrixTransform+0x128>)
 800380a:	6013      	str	r3, [r2, #0]
	uControlTheta = r;
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <process_Signal_RotationMatrixTransform+0x12c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800381c:	200011fc 	.word	0x200011fc
 8003820:	200011d8 	.word	0x200011d8
 8003824:	200011dc 	.word	0x200011dc
 8003828:	200011e0 	.word	0x200011e0
 800382c:	00000000 	.word	0x00000000

08003830 <process_Ball_Approach>:

void process_Ball_Approach()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	if (process_SubState == 0)
 8003834:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <process_Ball_Approach+0x1d8>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	d112      	bne.n	800386a <process_Ball_Approach+0x3a>
	{	process_Count ++;
 8003844:	4b71      	ldr	r3, [pc, #452]	; (8003a0c <process_Ball_Approach+0x1dc>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <process_Ball_Approach+0x1dc>)
 800384e:	701a      	strb	r2, [r3, #0]
		if (process_Count > 10)
 8003850:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <process_Ball_Approach+0x1dc>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b0a      	cmp	r3, #10
 8003856:	f240 80c7 	bls.w	80039e8 <process_Ball_Approach+0x1b8>
		{
			process_Count = 0;
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <process_Ball_Approach+0x1dc>)
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 8003860:	4b69      	ldr	r3, [pc, #420]	; (8003a08 <process_Ball_Approach+0x1d8>)
 8003862:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003866:	601a      	str	r2, [r3, #0]
			process_SubState = 0;
			step += 1;

		}
	}
}
 8003868:	e0be      	b.n	80039e8 <process_Ball_Approach+0x1b8>
	else if(process_SubState == 1)
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <process_Ball_Approach+0x1d8>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003874:	eef4 7a47 	vcmp.f32	s15, s14
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	d11d      	bne.n	80038ba <process_Ball_Approach+0x8a>
		process_RunByAngle(45,0.1);
 800387e:	eddf 0a64 	vldr	s1, [pc, #400]	; 8003a10 <process_Ball_Approach+0x1e0>
 8003882:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8003a14 <process_Ball_Approach+0x1e4>
 8003886:	f7ff fec3 	bl	8003610 <process_RunByAngle>
		use_pidTheta = 1;
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <process_Ball_Approach+0x1e8>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
		if (distance<0.3)
 8003890:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <process_Ball_Approach+0x1ec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe57 	bl	8000548 <__aeabi_f2d>
 800389a:	a355      	add	r3, pc, #340	; (adr r3, 80039f0 <process_Ball_Approach+0x1c0>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fd f91c 	bl	8000adc <__aeabi_dcmplt>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d100      	bne.n	80038ac <process_Ball_Approach+0x7c>
}
 80038aa:	e09d      	b.n	80039e8 <process_Ball_Approach+0x1b8>
			process_ResetFloatingEnc();
 80038ac:	f7ff fd8c 	bl	80033c8 <process_ResetFloatingEnc>
			process_SubState = 2;
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <process_Ball_Approach+0x1d8>)
 80038b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	e096      	b.n	80039e8 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 2)
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <process_Ball_Approach+0x1d8>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038c4:	eef4 7a47 	vcmp.f32	s15, s14
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	d11d      	bne.n	800390a <process_Ball_Approach+0xda>
		process_RunByAngle(45,0.1);
 80038ce:	eddf 0a50 	vldr	s1, [pc, #320]	; 8003a10 <process_Ball_Approach+0x1e0>
 80038d2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003a14 <process_Ball_Approach+0x1e4>
 80038d6:	f7ff fe9b 	bl	8003610 <process_RunByAngle>
		if (floatingEncCount>140)
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <process_Ball_Approach+0x1f0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b8c      	cmp	r3, #140	; 0x8c
 80038e0:	f340 8082 	ble.w	80039e8 <process_Ball_Approach+0x1b8>
			u = 0;
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <process_Ball_Approach+0x1f4>)
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
			v = 0;
 80038ec:	4b4e      	ldr	r3, [pc, #312]	; (8003a28 <process_Ball_Approach+0x1f8>)
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
			r = 0;
 80038f4:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <process_Ball_Approach+0x1fc>)
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <process_Ball_Approach+0x1e8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
			process_SubState = 3;
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <process_Ball_Approach+0x1d8>)
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <process_Ball_Approach+0x200>)
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	e06e      	b.n	80039e8 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 3)
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <process_Ball_Approach+0x1d8>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003914:	eef4 7a47 	vcmp.f32	s15, s14
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d12a      	bne.n	8003974 <process_Ball_Approach+0x144>
		use_pidTheta = 1;
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <process_Ball_Approach+0x1e8>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,-0.08);
 8003924:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003a34 <process_Ball_Approach+0x204>
 8003928:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003a38 <process_Ball_Approach+0x208>
 800392c:	f7ff fe70 	bl	8003610 <process_RunByAngle>
		if(distance < 0.21)
 8003930:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <process_Ball_Approach+0x1ec>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	a32f      	add	r3, pc, #188	; (adr r3, 80039f8 <process_Ball_Approach+0x1c8>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f7fd f8cc 	bl	8000adc <__aeabi_dcmplt>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d100      	bne.n	800394c <process_Ball_Approach+0x11c>
}
 800394a:	e04d      	b.n	80039e8 <process_Ball_Approach+0x1b8>
			u = 0;
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <process_Ball_Approach+0x1f4>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
			v = 0;
 8003954:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <process_Ball_Approach+0x1f8>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
			r = 0;
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <process_Ball_Approach+0x1fc>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003964:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <process_Ball_Approach+0x1e8>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
			process_SubState = 4;
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <process_Ball_Approach+0x1d8>)
 800396c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	e039      	b.n	80039e8 <process_Ball_Approach+0x1b8>
	else if (process_SubState == 4)
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <process_Ball_Approach+0x1d8>)
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800397e:	eef4 7a47 	vcmp.f32	s15, s14
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	d12f      	bne.n	80039e8 <process_Ball_Approach+0x1b8>
		use_pidTheta = 1;
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <process_Ball_Approach+0x1e8>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,0.08);
 800398e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8003a3c <process_Ball_Approach+0x20c>
 8003992:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003a38 <process_Ball_Approach+0x208>
 8003996:	f7ff fe3b 	bl	8003610 <process_RunByAngle>
		if(distance > 0.15)
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <process_Ball_Approach+0x1ec>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fdd2 	bl	8000548 <__aeabi_f2d>
 80039a4:	a316      	add	r3, pc, #88	; (adr r3, 8003a00 <process_Ball_Approach+0x1d0>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f7fd f8b5 	bl	8000b18 <__aeabi_dcmpgt>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d100      	bne.n	80039b6 <process_Ball_Approach+0x186>
}
 80039b4:	e018      	b.n	80039e8 <process_Ball_Approach+0x1b8>
			u = 0;
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <process_Ball_Approach+0x1f4>)
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
			v = 0;
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <process_Ball_Approach+0x1f8>)
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
			r = 0;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <process_Ball_Approach+0x1fc>)
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <process_Ball_Approach+0x1e8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
			process_SubState = 0;
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <process_Ball_Approach+0x1d8>)
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
			step += 1;
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <process_Ball_Approach+0x210>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <process_Ball_Approach+0x210>)
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	f3af 8000 	nop.w
 80039f0:	33333333 	.word	0x33333333
 80039f4:	3fd33333 	.word	0x3fd33333
 80039f8:	ae147ae1 	.word	0xae147ae1
 80039fc:	3fcae147 	.word	0x3fcae147
 8003a00:	33333333 	.word	0x33333333
 8003a04:	3fc33333 	.word	0x3fc33333
 8003a08:	20001298 	.word	0x20001298
 8003a0c:	2000129e 	.word	0x2000129e
 8003a10:	3dcccccd 	.word	0x3dcccccd
 8003a14:	42340000 	.word	0x42340000
 8003a18:	20001248 	.word	0x20001248
 8003a1c:	200012b0 	.word	0x200012b0
 8003a20:	2000127c 	.word	0x2000127c
 8003a24:	20001280 	.word	0x20001280
 8003a28:	20001284 	.word	0x20001284
 8003a2c:	20001288 	.word	0x20001288
 8003a30:	40400000 	.word	0x40400000
 8003a34:	bda3d70a 	.word	0xbda3d70a
 8003a38:	43070000 	.word	0x43070000
 8003a3c:	3da3d70a 	.word	0x3da3d70a
 8003a40:	200011e6 	.word	0x200011e6
 8003a44:	00000000 	.word	0x00000000

08003a48 <process_Ball_Approach2>:

void process_Ball_Approach2()
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	if (process_SubState == 0)
 8003a4c:	4b74      	ldr	r3, [pc, #464]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	d112      	bne.n	8003a82 <process_Ball_Approach2+0x3a>
	{	process_Count ++;
 8003a5c:	4b71      	ldr	r3, [pc, #452]	; (8003c24 <process_Ball_Approach2+0x1dc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <process_Ball_Approach2+0x1dc>)
 8003a66:	701a      	strb	r2, [r3, #0]
		if (process_Count > 10)
 8003a68:	4b6e      	ldr	r3, [pc, #440]	; (8003c24 <process_Ball_Approach2+0x1dc>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b0a      	cmp	r3, #10
 8003a6e:	f240 80c7 	bls.w	8003c00 <process_Ball_Approach2+0x1b8>
		{
			process_Count = 0;
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <process_Ball_Approach2+0x1dc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 8003a78:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003a7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a7e:	601a      	str	r2, [r3, #0]
			process_SubState = 0;
			step += 1;

		}
	}
}
 8003a80:	e0be      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
	else if(process_SubState == 1)
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a8c:	eef4 7a47 	vcmp.f32	s15, s14
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	d11d      	bne.n	8003ad2 <process_Ball_Approach2+0x8a>
		process_RunByAngle(-135,0.1);
 8003a96:	eddf 0a64 	vldr	s1, [pc, #400]	; 8003c28 <process_Ball_Approach2+0x1e0>
 8003a9a:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8003c2c <process_Ball_Approach2+0x1e4>
 8003a9e:	f7ff fdb7 	bl	8003610 <process_RunByAngle>
		use_pidTheta = 1;
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
		if (distance<0.3)
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <process_Ball_Approach2+0x1ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fc fd4b 	bl	8000548 <__aeabi_f2d>
 8003ab2:	a355      	add	r3, pc, #340	; (adr r3, 8003c08 <process_Ball_Approach2+0x1c0>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fd f810 	bl	8000adc <__aeabi_dcmplt>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <process_Ball_Approach2+0x7c>
}
 8003ac2:	e09d      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
			process_ResetFloatingEnc();
 8003ac4:	f7ff fc80 	bl	80033c8 <process_ResetFloatingEnc>
			process_SubState = 2;
 8003ac8:	4b55      	ldr	r3, [pc, #340]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	e096      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 2)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003adc:	eef4 7a47 	vcmp.f32	s15, s14
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	d11d      	bne.n	8003b22 <process_Ball_Approach2+0xda>
		process_RunByAngle(-135,0.1);
 8003ae6:	eddf 0a50 	vldr	s1, [pc, #320]	; 8003c28 <process_Ball_Approach2+0x1e0>
 8003aea:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003c2c <process_Ball_Approach2+0x1e4>
 8003aee:	f7ff fd8f 	bl	8003610 <process_RunByAngle>
		if (floatingEncCount>100)
 8003af2:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <process_Ball_Approach2+0x1f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	f340 8082 	ble.w	8003c00 <process_Ball_Approach2+0x1b8>
			u = 0;
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <process_Ball_Approach2+0x1f4>)
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
			v = 0;
 8003b04:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <process_Ball_Approach2+0x1f8>)
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
			r = 0;
 8003b0c:	4b4d      	ldr	r3, [pc, #308]	; (8003c44 <process_Ball_Approach2+0x1fc>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003b14:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			process_SubState = 3;
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003b1c:	4a4a      	ldr	r2, [pc, #296]	; (8003c48 <process_Ball_Approach2+0x200>)
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	e06e      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 3)
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b2c:	eef4 7a47 	vcmp.f32	s15, s14
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	d12a      	bne.n	8003b8c <process_Ball_Approach2+0x144>
		use_pidTheta = 1;
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,-0.08);
 8003b3c:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003c4c <process_Ball_Approach2+0x204>
 8003b40:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003c50 <process_Ball_Approach2+0x208>
 8003b44:	f7ff fd64 	bl	8003610 <process_RunByAngle>
		if(distance < 0.21)
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <process_Ball_Approach2+0x1ec>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fcfb 	bl	8000548 <__aeabi_f2d>
 8003b52:	a32f      	add	r3, pc, #188	; (adr r3, 8003c10 <process_Ball_Approach2+0x1c8>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc ffc0 	bl	8000adc <__aeabi_dcmplt>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d100      	bne.n	8003b64 <process_Ball_Approach2+0x11c>
}
 8003b62:	e04d      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
			u = 0;
 8003b64:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <process_Ball_Approach2+0x1f4>)
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
			v = 0;
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <process_Ball_Approach2+0x1f8>)
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
			r = 0;
 8003b74:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <process_Ball_Approach2+0x1fc>)
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
			process_SubState = 4;
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003b84:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	e039      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
	else if (process_SubState == 4)
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003b96:	eef4 7a47 	vcmp.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d12f      	bne.n	8003c00 <process_Ball_Approach2+0x1b8>
		use_pidTheta = 1;
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(135,0.08);
 8003ba6:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8003c54 <process_Ball_Approach2+0x20c>
 8003baa:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003c50 <process_Ball_Approach2+0x208>
 8003bae:	f7ff fd2f 	bl	8003610 <process_RunByAngle>
		if(distance > 0.15)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <process_Ball_Approach2+0x1ec>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fcc6 	bl	8000548 <__aeabi_f2d>
 8003bbc:	a316      	add	r3, pc, #88	; (adr r3, 8003c18 <process_Ball_Approach2+0x1d0>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d100      	bne.n	8003bce <process_Ball_Approach2+0x186>
}
 8003bcc:	e018      	b.n	8003c00 <process_Ball_Approach2+0x1b8>
			u = 0;
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <process_Ball_Approach2+0x1f4>)
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
			v = 0;
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <process_Ball_Approach2+0x1f8>)
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
			r = 0;
 8003bde:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <process_Ball_Approach2+0x1fc>)
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
			use_pidTheta = 0;
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <process_Ball_Approach2+0x1e8>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
			process_SubState = 0;
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <process_Ball_Approach2+0x1d8>)
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
			step += 1;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <process_Ball_Approach2+0x210>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <process_Ball_Approach2+0x210>)
 8003bfe:	701a      	strb	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	f3af 8000 	nop.w
 8003c08:	33333333 	.word	0x33333333
 8003c0c:	3fd33333 	.word	0x3fd33333
 8003c10:	ae147ae1 	.word	0xae147ae1
 8003c14:	3fcae147 	.word	0x3fcae147
 8003c18:	33333333 	.word	0x33333333
 8003c1c:	3fc33333 	.word	0x3fc33333
 8003c20:	20001298 	.word	0x20001298
 8003c24:	2000129e 	.word	0x2000129e
 8003c28:	3dcccccd 	.word	0x3dcccccd
 8003c2c:	c3070000 	.word	0xc3070000
 8003c30:	20001248 	.word	0x20001248
 8003c34:	200012b0 	.word	0x200012b0
 8003c38:	2000127c 	.word	0x2000127c
 8003c3c:	20001280 	.word	0x20001280
 8003c40:	20001284 	.word	0x20001284
 8003c44:	20001288 	.word	0x20001288
 8003c48:	40400000 	.word	0x40400000
 8003c4c:	bda3d70a 	.word	0xbda3d70a
 8003c50:	43070000 	.word	0x43070000
 8003c54:	3da3d70a 	.word	0x3da3d70a
 8003c58:	200011e6 	.word	0x200011e6

08003c5c <process_ApproachWall>:

void process_ApproachWall()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	if(process_SubState == 0)
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <process_ApproachWall+0x120>)
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	d126      	bne.n	8003cbe <process_ApproachWall+0x62>
	{
		use_pidTheta = 1;
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <process_ApproachWall+0x124>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
		process_RunByAngle(45,0.1);
 8003c76:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003d84 <process_ApproachWall+0x128>
 8003c7a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003d88 <process_ApproachWall+0x12c>
 8003c7e:	f7ff fcc7 	bl	8003610 <process_RunByAngle>
		if (HAL_GPIO_ReadPin(sensor_4_GPIO_Port, sensor_4_Pin))
 8003c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c86:	4841      	ldr	r0, [pc, #260]	; (8003d8c <process_ApproachWall+0x130>)
 8003c88:	f004 fa72 	bl	8008170 <HAL_GPIO_ReadPin>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <process_ApproachWall+0x44>
		{
			process_SSCheck ++;
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <process_ApproachWall+0x134>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <process_ApproachWall+0x134>)
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e002      	b.n	8003ca6 <process_ApproachWall+0x4a>
		}else{
			process_SSCheck = 0;
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <process_ApproachWall+0x134>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
		}
		if (process_SSCheck > 5)
 8003ca6:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <process_ApproachWall+0x134>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d963      	bls.n	8003d76 <process_ApproachWall+0x11a>
		{
			process_SSCheck = 0;
 8003cae:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <process_ApproachWall+0x134>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
			process_SubState = 1;
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <process_ApproachWall+0x120>)
 8003cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cba:	601a      	str	r2, [r3, #0]
					r = 0;
					process_RunByAngle(45,0.05);
					step++;
				}
		}
}
 8003cbc:	e05b      	b.n	8003d76 <process_ApproachWall+0x11a>
	else if(process_SubState == 1)
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <process_ApproachWall+0x120>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cc8:	eef4 7a47 	vcmp.f32	s15, s14
 8003ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd0:	d117      	bne.n	8003d02 <process_ApproachWall+0xa6>
			process_Count++;
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <process_ApproachWall+0x138>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <process_ApproachWall+0x138>)
 8003cdc:	701a      	strb	r2, [r3, #0]
			if (process_Count > 40)
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <process_ApproachWall+0x138>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b28      	cmp	r3, #40	; 0x28
 8003ce4:	d947      	bls.n	8003d76 <process_ApproachWall+0x11a>
				process_Count = 0;
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <process_ApproachWall+0x138>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
				process_SubState = 2;
 8003cec:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <process_ApproachWall+0x120>)
 8003cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cf2:	601a      	str	r2, [r3, #0]
				process_RunByAngle(-28,0.1);
 8003cf4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003d84 <process_ApproachWall+0x128>
 8003cf8:	eebb 0a0c 	vmov.f32	s0, #188	; 0xc1e00000 -28.0
 8003cfc:	f7ff fc88 	bl	8003610 <process_RunByAngle>
}
 8003d00:	e039      	b.n	8003d76 <process_ApproachWall+0x11a>
	else if(process_SubState == 2)
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <process_ApproachWall+0x120>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d0c:	eef4 7a47 	vcmp.f32	s15, s14
 8003d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d14:	d12f      	bne.n	8003d76 <process_ApproachWall+0x11a>
			if (HAL_GPIO_ReadPin(sensor_7_GPIO_Port, sensor_7_Pin))
 8003d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d1a:	481c      	ldr	r0, [pc, #112]	; (8003d8c <process_ApproachWall+0x130>)
 8003d1c:	f004 fa28 	bl	8008170 <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <process_ApproachWall+0xd8>
				process_SSCheck ++;
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <process_ApproachWall+0x134>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <process_ApproachWall+0x134>)
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e002      	b.n	8003d3a <process_ApproachWall+0xde>
				process_SSCheck = 0;
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <process_ApproachWall+0x134>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
			if (process_SSCheck >= 1)
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <process_ApproachWall+0x134>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d019      	beq.n	8003d76 <process_ApproachWall+0x11a>
					process_SSCheck = 0;
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <process_ApproachWall+0x134>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
					process_SubState = 1;
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <process_ApproachWall+0x120>)
 8003d4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d4e:	601a      	str	r2, [r3, #0]
					use_pidTheta = 0;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <process_ApproachWall+0x124>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
					r = 0;
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <process_ApproachWall+0x13c>)
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
					process_RunByAngle(45,0.05);
 8003d5e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003d9c <process_ApproachWall+0x140>
 8003d62:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8003d88 <process_ApproachWall+0x12c>
 8003d66:	f7ff fc53 	bl	8003610 <process_RunByAngle>
					step++;
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <process_ApproachWall+0x144>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <process_ApproachWall+0x144>)
 8003d74:	701a      	strb	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20001298 	.word	0x20001298
 8003d80:	20001248 	.word	0x20001248
 8003d84:	3dcccccd 	.word	0x3dcccccd
 8003d88:	42340000 	.word	0x42340000
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	2000129d 	.word	0x2000129d
 8003d94:	2000129e 	.word	0x2000129e
 8003d98:	20001288 	.word	0x20001288
 8003d9c:	3d4ccccd 	.word	0x3d4ccccd
 8003da0:	200011e6 	.word	0x200011e6

08003da4 <process_setVal_PutBall>:
void process_setVal_PutBall(uint8_t value)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
	process_GetBall_State =  value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <process_setVal_PutBall+0x1c>)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	7013      	strb	r3, [r2, #0]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	2000129c 	.word	0x2000129c

08003dc4 <process_ReleaseBall>:

void process_ReleaseBall()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	process_RunByAngle(45,0);
 8003dc8:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003e0c <process_ReleaseBall+0x48>
 8003dcc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003e10 <process_ReleaseBall+0x4c>
 8003dd0:	f7ff fc1e 	bl	8003610 <process_RunByAngle>
	process_setVal_PutBall(2);
 8003dd4:	2002      	movs	r0, #2
 8003dd6:	f7ff ffe5 	bl	8003da4 <process_setVal_PutBall>
	process_Count++;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <process_ReleaseBall+0x50>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <process_ReleaseBall+0x50>)
 8003de4:	701a      	strb	r2, [r3, #0]
	if (process_Count>50){
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <process_ReleaseBall+0x50>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b32      	cmp	r3, #50	; 0x32
 8003dec:	d90b      	bls.n	8003e06 <process_ReleaseBall+0x42>
		process_Count = 0;
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <process_ReleaseBall+0x50>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
		process_setVal_PutBall(3);
 8003df4:	2003      	movs	r0, #3
 8003df6:	f7ff ffd5 	bl	8003da4 <process_setVal_PutBall>
		step++;
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <process_ReleaseBall+0x54>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <process_ReleaseBall+0x54>)
 8003e04:	701a      	strb	r2, [r3, #0]
	}
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	00000000 	.word	0x00000000
 8003e10:	42340000 	.word	0x42340000
 8003e14:	2000129e 	.word	0x2000129e
 8003e18:	200011e6 	.word	0x200011e6

08003e1c <process_getBall>:
void process_getBall()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	process_setVal_PutBall(0);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7ff ffbf 	bl	8003da4 <process_setVal_PutBall>
	if (PutBall_getFlag()){
 8003e26:	f7fd fb67 	bl	80014f8 <PutBall_getFlag>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <process_getBall+0x2a>
		process_setVal_PutBall(1);
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7ff ffb7 	bl	8003da4 <process_setVal_PutBall>
		process_ResetFloatingEnc();
 8003e36:	f7ff fac7 	bl	80033c8 <process_ResetFloatingEnc>
		step += 1;
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <process_getBall+0x30>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <process_getBall+0x30>)
 8003e44:	701a      	strb	r2, [r3, #0]
	}
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200011e6 	.word	0x200011e6

08003e50 <readADC>:
////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////CAM BIEN DO KHOANG CACH/////////////////////////////////////
void readADC(){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8003e54:	483c      	ldr	r0, [pc, #240]	; (8003f48 <readADC+0xf8>)
 8003e56:	f001 ff6d 	bl	8005d34 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003e5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e5e:	483a      	ldr	r0, [pc, #232]	; (8003f48 <readADC+0xf8>)
 8003e60:	f002 f86d 	bl	8005f3e <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 8003e64:	4838      	ldr	r0, [pc, #224]	; (8003f48 <readADC+0xf8>)
 8003e66:	f002 fa05 	bl	8006274 <HAL_ADC_GetValue>
 8003e6a:	ee07 0a90 	vmov	s15, r0
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <readADC+0xfc>)
 8003e74:	edc3 7a00 	vstr	s15, [r3]
	count++;
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <readADC+0x100>)
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e86:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <readADC+0x100>)
 8003e88:	edc3 7a00 	vstr	s15, [r3]
	sum+=adc_val;
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <readADC+0x104>)
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <readADC+0xfc>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <readADC+0x104>)
 8003e9e:	edc3 7a00 	vstr	s15, [r3]
	if(count>50)
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <readADC+0x100>)
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003f58 <readADC+0x108>
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	dd11      	ble.n	8003eda <readADC+0x8a>
	{
		adc_val_Fil=sum/50;
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <readADC+0x104>)
 8003eb8:	ed93 7a00 	vldr	s14, [r3]
 8003ebc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f58 <readADC+0x108>
 8003ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <readADC+0x10c>)
 8003ec6:	edc3 7a00 	vstr	s15, [r3]
		sum = 0;
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <readADC+0x104>)
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
		count = 0;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <readADC+0x100>)
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
	}
	distance = (9.8/3945) * adc_val_Fil - 150 * (9.8/3945) + 0.28;
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <readADC+0x10c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb32 	bl	8000548 <__aeabi_f2d>
 8003ee4:	a312      	add	r3, pc, #72	; (adr r3, 8003f30 <readADC+0xe0>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc fb85 	bl	80005f8 <__aeabi_dmul>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	a310      	add	r3, pc, #64	; (adr r3, 8003f38 <readADC+0xe8>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f7fc f9c4 	bl	8000288 <__aeabi_dsub>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	a30d      	add	r3, pc, #52	; (adr r3, 8003f40 <readADC+0xf0>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc f9bd 	bl	800028c <__adddf3>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fc fe45 	bl	8000ba8 <__aeabi_d2f>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <readADC+0x110>)
 8003f22:	6013      	str	r3, [r2, #0]

	HAL_ADC_Stop(&hadc1);
 8003f24:	4808      	ldr	r0, [pc, #32]	; (8003f48 <readADC+0xf8>)
 8003f26:	f001 ffd7 	bl	8005ed8 <HAL_ADC_Stop>
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	b87677a3 	.word	0xb87677a3
 8003f34:	3f6459a7 	.word	0x3f6459a7
 8003f38:	8c2ad433 	.word	0x8c2ad433
 8003f3c:	3fd7d910 	.word	0x3fd7d910
 8003f40:	1eb851ec 	.word	0x1eb851ec
 8003f44:	3fd1eb85 	.word	0x3fd1eb85
 8003f48:	20000638 	.word	0x20000638
 8003f4c:	200012ac 	.word	0x200012ac
 8003f50:	200012a0 	.word	0x200012a0
 8003f54:	200012a8 	.word	0x200012a8
 8003f58:	42480000 	.word	0x42480000
 8003f5c:	200012a4 	.word	0x200012a4
 8003f60:	200012b0 	.word	0x200012b0

08003f64 <process_WireRelease>:

void process_WireRelease(){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_1);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	200c      	movs	r0, #12
 8003f6c:	f7fe ffce 	bl	8002f0c <handleFunctionCAN>
	osDelay(1);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f007 fb40 	bl	800b5f6 <osDelay>
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_2);
 8003f76:	2102      	movs	r1, #2
 8003f78:	200c      	movs	r0, #12
 8003f7a:	f7fe ffc7 	bl	8002f0c <handleFunctionCAN>
	osDelay(1);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f007 fb39 	bl	800b5f6 <osDelay>
	handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_3);
 8003f84:	2103      	movs	r1, #3
 8003f86:	200c      	movs	r0, #12
 8003f88:	f7fe ffc0 	bl	8002f0c <handleFunctionCAN>
	osDelay(1);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f007 fb32 	bl	800b5f6 <osDelay>
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b09c      	sub	sp, #112	; 0x70
 8003f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f9e:	f001 fe43 	bl	8005c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fa2:	f000 f8db 	bl	800415c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fa6:	f000 fca1 	bl	80048ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003faa:	f000 fc69 	bl	8004880 <MX_DMA_Init>
  MX_CAN1_Init();
 8003fae:	f000 f991 	bl	80042d4 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003fb2:	f000 fa1d 	bl	80043f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003fb6:	f000 fa6f 	bl	8004498 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003fba:	f000 fc37 	bl	800482c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003fbe:	f000 f9bf 	bl	8004340 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003fc2:	f000 fbbb 	bl	800473c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8003fc6:	f000 fbdd 	bl	8004784 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003fca:	f000 fc05 	bl	80047d8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003fce:	f000 fb33 	bl	8004638 <MX_TIM5_Init>
  MX_ADC1_Init();
 8003fd2:	f000 f92d 	bl	8004230 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003fd6:	f000 fae1 	bl	800459c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  	log_Init(&huart2);
  	log_Init(&huart2);
 8003fda:	4847      	ldr	r0, [pc, #284]	; (80040f8 <main+0x160>)
 8003fdc:	f7fe fe72 	bl	8002cc4 <log_Init>
  	Send_Header();
 8003fe0:	f7ff f87e 	bl	80030e0 <Send_Header>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8003fe4:	2209      	movs	r2, #9
 8003fe6:	4945      	ldr	r1, [pc, #276]	; (80040fc <main+0x164>)
 8003fe8:	4845      	ldr	r0, [pc, #276]	; (8004100 <main+0x168>)
 8003fea:	f006 f851 	bl	800a090 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8003fee:	4845      	ldr	r0, [pc, #276]	; (8004104 <main+0x16c>)
 8003ff0:	f004 fe0a 	bl	8008c08 <HAL_TIM_Base_Start_IT>

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8003ff4:	4b44      	ldr	r3, [pc, #272]	; (8004108 <main+0x170>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <main+0x170>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0208 	bic.w	r2, r2, #8
 8004002:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004004:	2100      	movs	r1, #0
 8004006:	4841      	ldr	r0, [pc, #260]	; (800410c <main+0x174>)
 8004008:	f004 fec8 	bl	8008d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800400c:	2104      	movs	r1, #4
 800400e:	483f      	ldr	r0, [pc, #252]	; (800410c <main+0x174>)
 8004010:	f004 fec4 	bl	8008d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8004014:	2100      	movs	r1, #0
 8004016:	483e      	ldr	r0, [pc, #248]	; (8004110 <main+0x178>)
 8004018:	f004 fec0 	bl	8008d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800401c:	2104      	movs	r1, #4
 800401e:	483c      	ldr	r0, [pc, #240]	; (8004110 <main+0x178>)
 8004020:	f004 febc 	bl	8008d9c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8004024:	213c      	movs	r1, #60	; 0x3c
 8004026:	483b      	ldr	r0, [pc, #236]	; (8004114 <main+0x17c>)
 8004028:	f005 f826 	bl	8009078 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800402c:	213c      	movs	r1, #60	; 0x3c
 800402e:	483a      	ldr	r0, [pc, #232]	; (8004118 <main+0x180>)
 8004030:	f005 f822 	bl	8009078 <HAL_TIM_Encoder_Start>


	HAL_UART_Receive_DMA(&huart1,(uint8_t*)mpu,10);
 8004034:	220a      	movs	r2, #10
 8004036:	4939      	ldr	r1, [pc, #228]	; (800411c <main+0x184>)
 8004038:	4839      	ldr	r0, [pc, #228]	; (8004120 <main+0x188>)
 800403a:	f006 f859 	bl	800a0f0 <HAL_UART_Receive_DMA>


	pid.kP = -0.12;
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <main+0x18c>)
 8004040:	4a39      	ldr	r2, [pc, #228]	; (8004128 <main+0x190>)
 8004042:	60da      	str	r2, [r3, #12]
	pid.kI = 5.32;
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <main+0x18c>)
 8004046:	4a39      	ldr	r2, [pc, #228]	; (800412c <main+0x194>)
 8004048:	615a      	str	r2, [r3, #20]
	pid.kD = 20.22;
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <main+0x18c>)
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <main+0x198>)
 800404e:	621a      	str	r2, [r3, #32]
	pid.alpha = 5.31;
 8004050:	4b34      	ldr	r3, [pc, #208]	; (8004124 <main+0x18c>)
 8004052:	4a38      	ldr	r2, [pc, #224]	; (8004134 <main+0x19c>)
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
	pid.deltaT = 0.001;
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <main+0x18c>)
 8004058:	4a37      	ldr	r2, [pc, #220]	; (8004138 <main+0x1a0>)
 800405a:	609a      	str	r2, [r3, #8]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 256);
 800405c:	4b37      	ldr	r3, [pc, #220]	; (800413c <main+0x1a4>)
 800405e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004062:	461d      	mov	r5, r3
 8004064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800406c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f007 fa71 	bl	800b55e <osThreadCreate>
 800407c:	4603      	mov	r3, r0
 800407e:	4a30      	ldr	r2, [pc, #192]	; (8004140 <main+0x1a8>)
 8004080:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskInvKine */
  osThreadStaticDef(TaskInvKine, InverseKinematic, osPriorityLow, 0, 256, TaskInvKineBuffer, &TaskInvKineControlBlock);
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <main+0x1ac>)
 8004084:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004088:	461d      	mov	r5, r3
 800408a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800408c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800408e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskInvKineHandle = osThreadCreate(osThread(TaskInvKine), NULL);
 8004096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f007 fa5e 	bl	800b55e <osThreadCreate>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <main+0x1b0>)
 80040a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCAN */
  osThreadStaticDef(TaskCAN, CAN_Bus, osPriorityBelowNormal, 0, 128, TaskCANBuffer, &TaskCANControlBlock);
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <main+0x1b4>)
 80040aa:	f107 041c 	add.w	r4, r7, #28
 80040ae:	461d      	mov	r5, r3
 80040b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCANHandle = osThreadCreate(osThread(TaskCAN), NULL);
 80040bc:	f107 031c 	add.w	r3, r7, #28
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 fa4b 	bl	800b55e <osThreadCreate>
 80040c8:	4603      	mov	r3, r0
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <main+0x1b8>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskOdometer */
  osThreadDef(TaskOdometer, OdometerHandle, osPriorityHigh, 0, 256);
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <main+0x1bc>)
 80040d0:	463c      	mov	r4, r7
 80040d2:	461d      	mov	r5, r3
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskOdometerHandle = osThreadCreate(osThread(TaskOdometer), NULL);
 80040e0:	463b      	mov	r3, r7
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f007 fa3a 	bl	800b55e <osThreadCreate>
 80040ea:	4603      	mov	r3, r0
 80040ec:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <main+0x1c0>)
 80040ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80040f0:	f007 fa2e 	bl	800b550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80040f4:	e7fe      	b.n	80040f4 <main+0x15c>
 80040f6:	bf00      	nop
 80040f8:	2000089c 	.word	0x2000089c
 80040fc:	20001198 	.word	0x20001198
 8004100:	200008e0 	.word	0x200008e0
 8004104:	20000780 	.word	0x20000780
 8004108:	20000924 	.word	0x20000924
 800410c:	20000738 	.word	0x20000738
 8004110:	200007c8 	.word	0x200007c8
 8004114:	200006f0 	.word	0x200006f0
 8004118:	200006a8 	.word	0x200006a8
 800411c:	200011e8 	.word	0x200011e8
 8004120:	20000858 	.word	0x20000858
 8004124:	20001134 	.word	0x20001134
 8004128:	bdf5c28f 	.word	0xbdf5c28f
 800412c:	40aa3d71 	.word	0x40aa3d71
 8004130:	41a1c28f 	.word	0x41a1c28f
 8004134:	40a9eb85 	.word	0x40a9eb85
 8004138:	3a83126f 	.word	0x3a83126f
 800413c:	080120ac 	.word	0x080120ac
 8004140:	200009e4 	.word	0x200009e4
 8004144:	080120d4 	.word	0x080120d4
 8004148:	200009e8 	.word	0x200009e8
 800414c:	080120f8 	.word	0x080120f8
 8004150:	20000e8c 	.word	0x20000e8c
 8004154:	08012124 	.word	0x08012124
 8004158:	20001130 	.word	0x20001130

0800415c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b094      	sub	sp, #80	; 0x50
 8004160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004162:	f107 0320 	add.w	r3, r7, #32
 8004166:	2230      	movs	r2, #48	; 0x30
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f009 fc21 	bl	800d9b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <SystemClock_Config+0xcc>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <SystemClock_Config+0xcc>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <SystemClock_Config+0xcc>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800419c:	2300      	movs	r3, #0
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <SystemClock_Config+0xd0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a21      	ldr	r2, [pc, #132]	; (800422c <SystemClock_Config+0xd0>)
 80041a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <SystemClock_Config+0xd0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041b8:	2302      	movs	r3, #2
 80041ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041bc:	2301      	movs	r3, #1
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041c0:	2310      	movs	r3, #16
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041c4:	2302      	movs	r3, #2
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041c8:	2300      	movs	r3, #0
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80041cc:	2308      	movs	r3, #8
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80041d0:	23a0      	movs	r3, #160	; 0xa0
 80041d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041d4:	2302      	movs	r3, #2
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80041d8:	2304      	movs	r3, #4
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041dc:	f107 0320 	add.w	r3, r7, #32
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 fff7 	bl	80081d4 <HAL_RCC_OscConfig>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80041ec:	f000 ffb6 	bl	800515c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041f0:	230f      	movs	r3, #15
 80041f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041f4:	2302      	movs	r3, #2
 80041f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80041fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004208:	f107 030c 	add.w	r3, r7, #12
 800420c:	2105      	movs	r1, #5
 800420e:	4618      	mov	r0, r3
 8004210:	f004 fa58 	bl	80086c4 <HAL_RCC_ClockConfig>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800421a:	f000 ff9f 	bl	800515c <Error_Handler>
  }
}
 800421e:	bf00      	nop
 8004220:	3750      	adds	r7, #80	; 0x50
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000

08004230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004236:	463b      	mov	r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004242:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004244:	4a21      	ldr	r2, [pc, #132]	; (80042cc <MX_ADC1_Init+0x9c>)
 8004246:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <MX_ADC1_Init+0x98>)
 800424a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800424e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <MX_ADC1_Init+0x98>)
 800425e:	2201      	movs	r2, #1
 8004260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_ADC1_Init+0x98>)
 800426c:	2200      	movs	r2, #0
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004270:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004272:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <MX_ADC1_Init+0xa0>)
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004278:	2200      	movs	r2, #0
 800427a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <MX_ADC1_Init+0x98>)
 800427e:	2201      	movs	r2, #1
 8004280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <MX_ADC1_Init+0x98>)
 800428c:	2201      	movs	r2, #1
 800428e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <MX_ADC1_Init+0x98>)
 8004292:	f001 fd0b 	bl	8005cac <HAL_ADC_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800429c:	f000 ff5e 	bl	800515c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80042a0:	230b      	movs	r3, #11
 80042a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042ac:	463b      	mov	r3, r7
 80042ae:	4619      	mov	r1, r3
 80042b0:	4805      	ldr	r0, [pc, #20]	; (80042c8 <MX_ADC1_Init+0x98>)
 80042b2:	f002 f80b 	bl	80062cc <HAL_ADC_ConfigChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80042bc:	f000 ff4e 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000638 	.word	0x20000638
 80042cc:	40012000 	.word	0x40012000
 80042d0:	0f000001 	.word	0x0f000001

080042d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <MX_CAN1_Init+0x64>)
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <MX_CAN1_Init+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <MX_CAN1_Init+0x64>)
 80042e0:	220a      	movs	r2, #10
 80042e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <MX_CAN1_Init+0x64>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <MX_CAN1_Init+0x64>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <MX_CAN1_Init+0x64>)
 80042f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80042f8:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <MX_CAN1_Init+0x64>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <MX_CAN1_Init+0x64>)
 8004300:	2200      	movs	r2, #0
 8004302:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <MX_CAN1_Init+0x64>)
 8004306:	2200      	movs	r2, #0
 8004308:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <MX_CAN1_Init+0x64>)
 800430c:	2200      	movs	r2, #0
 800430e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MX_CAN1_Init+0x64>)
 8004312:	2200      	movs	r2, #0
 8004314:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <MX_CAN1_Init+0x64>)
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <MX_CAN1_Init+0x64>)
 800431e:	2200      	movs	r2, #0
 8004320:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_CAN1_Init+0x64>)
 8004324:	f002 f9fa 	bl	800671c <HAL_CAN_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800432e:	f000 ff15 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000680 	.word	0x20000680
 800433c:	40006400 	.word	0x40006400

08004340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	2224      	movs	r2, #36	; 0x24
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f009 fb2f 	bl	800d9b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <MX_TIM1_Init+0xa8>)
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <MX_TIM1_Init+0xac>)
 8004360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <MX_TIM1_Init+0xa8>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004368:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <MX_TIM1_Init+0xa8>)
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <MX_TIM1_Init+0xa8>)
 8004370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004374:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <MX_TIM1_Init+0xa8>)
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <MX_TIM1_Init+0xa8>)
 800437e:	2200      	movs	r2, #0
 8004380:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004382:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <MX_TIM1_Init+0xa8>)
 8004384:	2200      	movs	r2, #0
 8004386:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004388:	2301      	movs	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043a0:	2301      	movs	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80043ac:	f107 030c 	add.w	r3, r7, #12
 80043b0:	4619      	mov	r1, r3
 80043b2:	480d      	ldr	r0, [pc, #52]	; (80043e8 <MX_TIM1_Init+0xa8>)
 80043b4:	f004 fdba 	bl	8008f2c <HAL_TIM_Encoder_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80043be:	f000 fecd 	bl	800515c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4806      	ldr	r0, [pc, #24]	; (80043e8 <MX_TIM1_Init+0xa8>)
 80043d0:	f005 fcaa 	bl	8009d28 <HAL_TIMEx_MasterConfigSynchronization>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80043da:	f000 febf 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80043de:	bf00      	nop
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200006a8 	.word	0x200006a8
 80043ec:	40010000 	.word	0x40010000

080043f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f009 fad7 	bl	800d9b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <MX_TIM2_Init+0xa4>)
 800440e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004414:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <MX_TIM2_Init+0xa4>)
 8004416:	2200      	movs	r2, #0
 8004418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <MX_TIM2_Init+0xa4>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <MX_TIM2_Init+0xa4>)
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <MX_TIM2_Init+0xa4>)
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <MX_TIM2_Init+0xa4>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004434:	2303      	movs	r3, #3
 8004436:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004450:	2300      	movs	r3, #0
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4619      	mov	r1, r3
 800445e:	480d      	ldr	r0, [pc, #52]	; (8004494 <MX_TIM2_Init+0xa4>)
 8004460:	f004 fd64 	bl	8008f2c <HAL_TIM_Encoder_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800446a:	f000 fe77 	bl	800515c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4806      	ldr	r0, [pc, #24]	; (8004494 <MX_TIM2_Init+0xa4>)
 800447c:	f005 fc54 	bl	8009d28 <HAL_TIMEx_MasterConfigSynchronization>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004486:	f000 fe69 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800448a:	bf00      	nop
 800448c:	3730      	adds	r7, #48	; 0x30
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200006f0 	.word	0x200006f0

08004498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08e      	sub	sp, #56	; 0x38
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800449e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ac:	f107 0320 	add.w	r3, r7, #32
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
 80044c4:	615a      	str	r2, [r3, #20]
 80044c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044ca:	4a33      	ldr	r2, [pc, #204]	; (8004598 <MX_TIM3_Init+0x100>)
 80044cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044d0:	224f      	movs	r2, #79	; 0x4f
 80044d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e2:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044e8:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044ee:	4829      	ldr	r0, [pc, #164]	; (8004594 <MX_TIM3_Init+0xfc>)
 80044f0:	f004 fb3a 	bl	8008b68 <HAL_TIM_Base_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80044fa:	f000 fe2f 	bl	800515c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004508:	4619      	mov	r1, r3
 800450a:	4822      	ldr	r0, [pc, #136]	; (8004594 <MX_TIM3_Init+0xfc>)
 800450c:	f005 f80c 	bl	8009528 <HAL_TIM_ConfigClockSource>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004516:	f000 fe21 	bl	800515c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800451a:	481e      	ldr	r0, [pc, #120]	; (8004594 <MX_TIM3_Init+0xfc>)
 800451c:	f004 fbe4 	bl	8008ce8 <HAL_TIM_PWM_Init>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004526:	f000 fe19 	bl	800515c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004532:	f107 0320 	add.w	r3, r7, #32
 8004536:	4619      	mov	r1, r3
 8004538:	4816      	ldr	r0, [pc, #88]	; (8004594 <MX_TIM3_Init+0xfc>)
 800453a:	f005 fbf5 	bl	8009d28 <HAL_TIMEx_MasterConfigSynchronization>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004544:	f000 fe0a 	bl	800515c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004548:	2360      	movs	r3, #96	; 0x60
 800454a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	2200      	movs	r2, #0
 800455c:	4619      	mov	r1, r3
 800455e:	480d      	ldr	r0, [pc, #52]	; (8004594 <MX_TIM3_Init+0xfc>)
 8004560:	f004 ff20 	bl	80093a4 <HAL_TIM_PWM_ConfigChannel>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800456a:	f000 fdf7 	bl	800515c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	2204      	movs	r2, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4807      	ldr	r0, [pc, #28]	; (8004594 <MX_TIM3_Init+0xfc>)
 8004576:	f004 ff15 	bl	80093a4 <HAL_TIM_PWM_ConfigChannel>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004580:	f000 fdec 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004584:	4803      	ldr	r0, [pc, #12]	; (8004594 <MX_TIM3_Init+0xfc>)
 8004586:	f000 ffc5 	bl	8005514 <HAL_TIM_MspPostInit>

}
 800458a:	bf00      	nop
 800458c:	3738      	adds	r7, #56	; 0x38
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000738 	.word	0x20000738
 8004598:	40000400 	.word	0x40000400

0800459c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b0:	463b      	mov	r3, r7
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <MX_TIM4_Init+0x94>)
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <MX_TIM4_Init+0x98>)
 80045bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <MX_TIM4_Init+0x94>)
 80045c0:	224f      	movs	r2, #79	; 0x4f
 80045c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <MX_TIM4_Init+0x94>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <MX_TIM4_Init+0x94>)
 80045cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <MX_TIM4_Init+0x94>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <MX_TIM4_Init+0x94>)
 80045da:	2200      	movs	r2, #0
 80045dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045de:	4814      	ldr	r0, [pc, #80]	; (8004630 <MX_TIM4_Init+0x94>)
 80045e0:	f004 fac2 	bl	8008b68 <HAL_TIM_Base_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80045ea:	f000 fdb7 	bl	800515c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045f4:	f107 0308 	add.w	r3, r7, #8
 80045f8:	4619      	mov	r1, r3
 80045fa:	480d      	ldr	r0, [pc, #52]	; (8004630 <MX_TIM4_Init+0x94>)
 80045fc:	f004 ff94 	bl	8009528 <HAL_TIM_ConfigClockSource>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004606:	f000 fda9 	bl	800515c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004612:	463b      	mov	r3, r7
 8004614:	4619      	mov	r1, r3
 8004616:	4806      	ldr	r0, [pc, #24]	; (8004630 <MX_TIM4_Init+0x94>)
 8004618:	f005 fb86 	bl	8009d28 <HAL_TIMEx_MasterConfigSynchronization>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004622:	f000 fd9b 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004626:	bf00      	nop
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000780 	.word	0x20000780
 8004634:	40000800 	.word	0x40000800

08004638 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800463e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464c:	f107 0320 	add.w	r3, r7, #32
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
 8004664:	615a      	str	r2, [r3, #20]
 8004666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <MX_TIM5_Init+0xfc>)
 800466a:	4a33      	ldr	r2, [pc, #204]	; (8004738 <MX_TIM5_Init+0x100>)
 800466c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004670:	224f      	movs	r2, #79	; 0x4f
 8004672:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800467a:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <MX_TIM5_Init+0xfc>)
 800467c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004680:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004684:	2200      	movs	r2, #0
 8004686:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004688:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <MX_TIM5_Init+0xfc>)
 800468a:	2200      	movs	r2, #0
 800468c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800468e:	4829      	ldr	r0, [pc, #164]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004690:	f004 fa6a 	bl	8008b68 <HAL_TIM_Base_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800469a:	f000 fd5f 	bl	800515c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800469e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80046a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a8:	4619      	mov	r1, r3
 80046aa:	4822      	ldr	r0, [pc, #136]	; (8004734 <MX_TIM5_Init+0xfc>)
 80046ac:	f004 ff3c 	bl	8009528 <HAL_TIM_ConfigClockSource>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80046b6:	f000 fd51 	bl	800515c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80046ba:	481e      	ldr	r0, [pc, #120]	; (8004734 <MX_TIM5_Init+0xfc>)
 80046bc:	f004 fb14 	bl	8008ce8 <HAL_TIM_PWM_Init>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80046c6:	f000 fd49 	bl	800515c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80046d2:	f107 0320 	add.w	r3, r7, #32
 80046d6:	4619      	mov	r1, r3
 80046d8:	4816      	ldr	r0, [pc, #88]	; (8004734 <MX_TIM5_Init+0xfc>)
 80046da:	f005 fb25 	bl	8009d28 <HAL_TIMEx_MasterConfigSynchronization>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80046e4:	f000 fd3a 	bl	800515c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e8:	2360      	movs	r3, #96	; 0x60
 80046ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	2200      	movs	r2, #0
 80046fc:	4619      	mov	r1, r3
 80046fe:	480d      	ldr	r0, [pc, #52]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004700:	f004 fe50 	bl	80093a4 <HAL_TIM_PWM_ConfigChannel>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800470a:	f000 fd27 	bl	800515c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	2204      	movs	r2, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4807      	ldr	r0, [pc, #28]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004716:	f004 fe45 	bl	80093a4 <HAL_TIM_PWM_ConfigChannel>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8004720:	f000 fd1c 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004724:	4803      	ldr	r0, [pc, #12]	; (8004734 <MX_TIM5_Init+0xfc>)
 8004726:	f000 fef5 	bl	8005514 <HAL_TIM_MspPostInit>

}
 800472a:	bf00      	nop
 800472c:	3738      	adds	r7, #56	; 0x38
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200007c8 	.word	0x200007c8
 8004738:	40000c00 	.word	0x40000c00

0800473c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <MX_TIM10_Init+0x40>)
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <MX_TIM10_Init+0x44>)
 8004744:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 160-1;
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <MX_TIM10_Init+0x40>)
 8004748:	229f      	movs	r2, #159	; 0x9f
 800474a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <MX_TIM10_Init+0x40>)
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65000;
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <MX_TIM10_Init+0x40>)
 8004754:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8004758:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <MX_TIM10_Init+0x40>)
 800475c:	2200      	movs	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <MX_TIM10_Init+0x40>)
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004766:	4805      	ldr	r0, [pc, #20]	; (800477c <MX_TIM10_Init+0x40>)
 8004768:	f004 f9fe 	bl	8008b68 <HAL_TIM_Base_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8004772:	f000 fcf3 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000810 	.word	0x20000810
 8004780:	40014400 	.word	0x40014400

08004784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <MX_USART1_UART_Init+0x50>)
 800478c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 8004790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 80047aa:	220c      	movs	r2, #12
 80047ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047ba:	4805      	ldr	r0, [pc, #20]	; (80047d0 <MX_USART1_UART_Init+0x4c>)
 80047bc:	f005 fb44 	bl	8009e48 <HAL_UART_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047c6:	f000 fcc9 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000858 	.word	0x20000858
 80047d4:	40011000 	.word	0x40011000

080047d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <MX_USART2_UART_Init+0x50>)
 80047e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 80047fe:	220c      	movs	r2, #12
 8004800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 8004804:	2200      	movs	r2, #0
 8004806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 800480a:	2200      	movs	r2, #0
 800480c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800480e:	4805      	ldr	r0, [pc, #20]	; (8004824 <MX_USART2_UART_Init+0x4c>)
 8004810:	f005 fb1a 	bl	8009e48 <HAL_UART_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800481a:	f000 fc9f 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	2000089c 	.word	0x2000089c
 8004828:	40004400 	.word	0x40004400

0800482c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <MX_USART3_UART_Init+0x50>)
 8004834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800483c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004840:	2200      	movs	r2, #0
 8004842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004846:	2200      	movs	r2, #0
 8004848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 800484c:	2200      	movs	r2, #0
 800484e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004852:	220c      	movs	r2, #12
 8004854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004858:	2200      	movs	r2, #0
 800485a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 800485e:	2200      	movs	r2, #0
 8004860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004862:	4805      	ldr	r0, [pc, #20]	; (8004878 <MX_USART3_UART_Init+0x4c>)
 8004864:	f005 faf0 	bl	8009e48 <HAL_UART_Init>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800486e:	f000 fc75 	bl	800515c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200008e0 	.word	0x200008e0
 800487c:	40004800 	.word	0x40004800

08004880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <MX_DMA_Init+0x68>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <MX_DMA_Init+0x68>)
 8004890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <MX_DMA_Init+0x68>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <MX_DMA_Init+0x68>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <MX_DMA_Init+0x68>)
 80048ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048b0:	6313      	str	r3, [r2, #48]	; 0x30
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <MX_DMA_Init+0x68>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2105      	movs	r1, #5
 80048c2:	2011      	movs	r0, #17
 80048c4:	f002 fe8c 	bl	80075e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80048c8:	2011      	movs	r0, #17
 80048ca:	f002 fea5 	bl	8007618 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2105      	movs	r1, #5
 80048d2:	203a      	movs	r0, #58	; 0x3a
 80048d4:	f002 fe84 	bl	80075e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048d8:	203a      	movs	r0, #58	; 0x3a
 80048da:	f002 fe9d 	bl	8007618 <HAL_NVIC_EnableIRQ>

}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800

080048ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	f107 0314 	add.w	r3, r7, #20
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	609a      	str	r2, [r3, #8]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <MX_GPIO_Init+0x110>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a3c      	ldr	r2, [pc, #240]	; (80049fc <MX_GPIO_Init+0x110>)
 800490c:	f043 0310 	orr.w	r3, r3, #16
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <MX_GPIO_Init+0x110>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <MX_GPIO_Init+0x110>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a35      	ldr	r2, [pc, #212]	; (80049fc <MX_GPIO_Init+0x110>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <MX_GPIO_Init+0x110>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <MX_GPIO_Init+0x110>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <MX_GPIO_Init+0x110>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <MX_GPIO_Init+0x110>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <MX_GPIO_Init+0x110>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <MX_GPIO_Init+0x110>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <MX_GPIO_Init+0x110>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4b21      	ldr	r3, [pc, #132]	; (80049fc <MX_GPIO_Init+0x110>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a20      	ldr	r2, [pc, #128]	; (80049fc <MX_GPIO_Init+0x110>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <MX_GPIO_Init+0x110>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800498e:	2200      	movs	r2, #0
 8004990:	2160      	movs	r1, #96	; 0x60
 8004992:	481b      	ldr	r0, [pc, #108]	; (8004a00 <MX_GPIO_Init+0x114>)
 8004994:	f003 fc04 	bl	80081a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin, GPIO_PIN_RESET);
 8004998:	2200      	movs	r2, #0
 800499a:	21f0      	movs	r1, #240	; 0xf0
 800499c:	4819      	ldr	r0, [pc, #100]	; (8004a04 <MX_GPIO_Init+0x118>)
 800499e:	f003 fbff 	bl	80081a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80049a2:	2360      	movs	r3, #96	; 0x60
 80049a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4619      	mov	r1, r3
 80049b8:	4811      	ldr	r0, [pc, #68]	; (8004a00 <MX_GPIO_Init+0x114>)
 80049ba:	f003 fa3d 	bl	8007e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC595_CLK_Pin HC595_RCLK_Pin HC595_OE_Pin HC595_DATA_Pin */
  GPIO_InitStruct.Pin = HC595_CLK_Pin|HC595_RCLK_Pin|HC595_OE_Pin|HC595_DATA_Pin;
 80049be:	23f0      	movs	r3, #240	; 0xf0
 80049c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	4619      	mov	r1, r3
 80049d4:	480b      	ldr	r0, [pc, #44]	; (8004a04 <MX_GPIO_Init+0x118>)
 80049d6:	f003 fa2f 	bl	8007e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_1_Pin sensor_2_Pin sensor_3_Pin sensor_4_Pin
                           sensor_5_Pin sensor_6_Pin sensor_7_Pin sensor_8_Pin */
  GPIO_InitStruct.Pin = sensor_1_Pin|sensor_2_Pin|sensor_3_Pin|sensor_4_Pin
 80049da:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 80049de:	617b      	str	r3, [r7, #20]
                          |sensor_5_Pin|sensor_6_Pin|sensor_7_Pin|sensor_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	4804      	ldr	r0, [pc, #16]	; (8004a00 <MX_GPIO_Init+0x114>)
 80049f0:	f003 fa22 	bl	8007e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40020000 	.word	0x40020000

08004a08 <InvCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t shootFlag;
void InvCpltCallback(ModuleID ID, float speed, float angle) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a14:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a18:	73fb      	strb	r3, [r7, #15]
	CAN_SpeedBLDC_AngleDC speedAngle;
	speedAngle.bldcSpeed = speed;
 8004a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a22:	ee17 3a90 	vmov	r3, s15
 8004a26:	613b      	str	r3, [r7, #16]
	speedAngle.dcAngle = angle;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
	canfunc_MotorPutSpeedAndAngle(speedAngle);
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a34:	f7fd ff95 	bl	8002962 <canfunc_MotorPutSpeedAndAngle>



	while (canctrl_Send(&hcan1, ID) != HAL_OK);
 8004a38:	bf00      	nop
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <InvCpltCallback+0x4c>)
 8004a40:	f7fd fee2 	bl	8002808 <canctrl_Send>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f7      	bne.n	8004a3a <InvCpltCallback+0x32>
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000680 	.word	0x20000680

08004a58 <StartDefaultTask>:
 * @retval None
 */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	swer_Init();
 8004a60:	f7fd fd28 	bl	80024b4 <swer_Init>

	for (;;) {

		if(xaDay == 0 )
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <StartDefaultTask+0xd4>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d139      	bne.n	8004ae0 <StartDefaultTask+0x88>
		{
			invkine_Implementation(MODULE_ID_3, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <StartDefaultTask+0xd8>)
 8004a6e:	edd3 7a00 	vldr	s15, [r3]
 8004a72:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <StartDefaultTask+0xdc>)
 8004a74:	ed93 7a00 	vldr	s14, [r3]
 8004a78:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <StartDefaultTask+0xe0>)
 8004a7a:	edd3 6a00 	vldr	s13, [r3]
 8004a7e:	492f      	ldr	r1, [pc, #188]	; (8004b3c <StartDefaultTask+0xe4>)
 8004a80:	eeb0 1a66 	vmov.f32	s2, s13
 8004a84:	eef0 0a47 	vmov.f32	s1, s14
 8004a88:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8c:	2003      	movs	r0, #3
 8004a8e:	f7fd f8dd 	bl	8001c4c <invkine_Implementation>
			invkine_Implementation(MODULE_ID_1, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <StartDefaultTask+0xd8>)
 8004a94:	edd3 7a00 	vldr	s15, [r3]
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <StartDefaultTask+0xdc>)
 8004a9a:	ed93 7a00 	vldr	s14, [r3]
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <StartDefaultTask+0xe0>)
 8004aa0:	edd3 6a00 	vldr	s13, [r3]
 8004aa4:	4925      	ldr	r1, [pc, #148]	; (8004b3c <StartDefaultTask+0xe4>)
 8004aa6:	eeb0 1a66 	vmov.f32	s2, s13
 8004aaa:	eef0 0a47 	vmov.f32	s1, s14
 8004aae:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f7fd f8ca 	bl	8001c4c <invkine_Implementation>
			invkine_Implementation(MODULE_ID_2, uControlX, uControlY, uControlTheta, &InvCpltCallback);
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <StartDefaultTask+0xd8>)
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <StartDefaultTask+0xdc>)
 8004ac0:	ed93 7a00 	vldr	s14, [r3]
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <StartDefaultTask+0xe0>)
 8004ac6:	edd3 6a00 	vldr	s13, [r3]
 8004aca:	491c      	ldr	r1, [pc, #112]	; (8004b3c <StartDefaultTask+0xe4>)
 8004acc:	eeb0 1a66 	vmov.f32	s2, s13
 8004ad0:	eef0 0a47 	vmov.f32	s1, s14
 8004ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f7fd f8b7 	bl	8001c4c <invkine_Implementation>
 8004ade:	e005      	b.n	8004aec <StartDefaultTask+0x94>
		}else if (xaDay == 1){
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <StartDefaultTask+0xd4>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <StartDefaultTask+0x94>
			process_WireRelease();
 8004ae8:	f7ff fa3c 	bl	8003f64 <process_WireRelease>
		}


		if (gamepadRxIsBusy) {
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <StartDefaultTask+0xe8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <StartDefaultTask+0xac>
			gamepadRxIsBusy = 0;
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <StartDefaultTask+0xe8>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t*) UARTRX3_Buffer, 9);
 8004afa:	2209      	movs	r2, #9
 8004afc:	4911      	ldr	r1, [pc, #68]	; (8004b44 <StartDefaultTask+0xec>)
 8004afe:	4812      	ldr	r0, [pc, #72]	; (8004b48 <StartDefaultTask+0xf0>)
 8004b00:	f005 fac6 	bl	800a090 <HAL_UART_Receive_IT>
		}
		if ((huart3.Instance->CR1 & USART_CR1_UE) == 0) {
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <StartDefaultTask+0xf0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <StartDefaultTask+0xca>
			__HAL_UART_ENABLE(&huart3);
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <StartDefaultTask+0xf0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <StartDefaultTask+0xf0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b20:	60da      	str	r2, [r3, #12]
		}
		osDelay(50);
 8004b22:	2032      	movs	r0, #50	; 0x32
 8004b24:	f006 fd67 	bl	800b5f6 <osDelay>
		if(xaDay == 0 )
 8004b28:	e79c      	b.n	8004a64 <StartDefaultTask+0xc>
 8004b2a:	bf00      	nop
 8004b2c:	200011e4 	.word	0x200011e4
 8004b30:	200011d8 	.word	0x200011d8
 8004b34:	200011dc 	.word	0x200011dc
 8004b38:	200011e0 	.word	0x200011e0
 8004b3c:	08004a09 	.word	0x08004a09
 8004b40:	200011d4 	.word	0x200011d4
 8004b44:	20001198 	.word	0x20001198
 8004b48:	200008e0 	.word	0x200008e0

08004b4c <InverseKinematic>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
/* USER CODE END Header_InverseKinematic */
void InverseKinematic(void const * argument)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InverseKinematic */
	uint32_t value = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8004b58:	f107 020c 	add.w	r2, r7, #12
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	2100      	movs	r1, #0
 8004b62:	2000      	movs	r0, #0
 8004b64:	f007 faf6 	bl	800c154 <xTaskNotifyWait>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <InverseKinematic+0x26>
			Send_Data();
 8004b6e:	f7fe fab0 	bl	80030d2 <Send_Data>
		}
		osDelay(1);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f006 fd3f 	bl	800b5f6 <osDelay>
		if(xTaskNotifyWait(pdFALSE, pdFALSE, &value, portMAX_DELAY)){
 8004b78:	e7ee      	b.n	8004b58 <InverseKinematic+0xc>
	...

08004b7c <CAN_Bus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Bus */
void CAN_Bus(void const * argument)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Bus */
	CAN_Init();
 8004b84:	f7fe f99e 	bl	8002ec4 <CAN_Init>


	osDelay(500);
 8004b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b8c:	f006 fd33 	bl	800b5f6 <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_1, CANCTRL_MODE_SET_HOME);
 8004b90:	2201      	movs	r2, #1
 8004b92:	2101      	movs	r1, #1
 8004b94:	4821      	ldr	r0, [pc, #132]	; (8004c1c <CAN_Bus+0xa0>)
 8004b96:	f7fd fd9f 	bl	80026d8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f006 fd2b 	bl	800b5f6 <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_2, CANCTRL_MODE_SET_HOME);
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	481d      	ldr	r0, [pc, #116]	; (8004c1c <CAN_Bus+0xa0>)
 8004ba6:	f7fd fd97 	bl	80026d8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004baa:	2001      	movs	r0, #1
 8004bac:	f006 fd23 	bl	800b5f6 <osDelay>
	canctrl_RTR_TxRequest(&hcan1, CANCTRL_DEVICE_MOTOR_CONTROLLER_3, CANCTRL_MODE_SET_HOME);
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	4819      	ldr	r0, [pc, #100]	; (8004c1c <CAN_Bus+0xa0>)
 8004bb6:	f7fd fd8f 	bl	80026d8 <canctrl_RTR_TxRequest>
	osDelay(1);
 8004bba:	2001      	movs	r0, #1
 8004bbc:	f006 fd1b 	bl	800b5f6 <osDelay>
	osDelay(500);
 8004bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bc4:	f006 fd17 	bl	800b5f6 <osDelay>
	uint32_t modeID;
	/* Infinite loop */
	for (;;) {
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 8004bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f007 fabe 	bl	800c154 <xTaskNotifyWait>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f4      	beq.n	8004bc8 <CAN_Bus+0x4c>
			CAN_RxHeaderTypeDef rxHeader = canctrl_GetRxHeader();
 8004bde:	f107 030c 	add.w	r3, r7, #12
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd fd56 	bl	8002694 <canctrl_GetRxHeader>
			uint32_t targetID = rxHeader.StdId >> CAN_DEVICE_POS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
			if ((modeID == CANCTRL_MODE_SET_HOME || modeID == CANCTRL_MODE_NODE_REQ_SPEED_ANGLE ) && targetID) {
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d002      	beq.n	8004bfa <CAN_Bus+0x7e>
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d10a      	bne.n	8004c10 <CAN_Bus+0x94>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <CAN_Bus+0x94>
				handleFunctionCAN(modeID, targetID);
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe f97e 	bl	8002f0c <handleFunctionCAN>
			}
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004c10:	2102      	movs	r1, #2
 8004c12:	4802      	ldr	r0, [pc, #8]	; (8004c1c <CAN_Bus+0xa0>)
 8004c14:	f002 f9c4 	bl	8006fa0 <HAL_CAN_ActivateNotification>
		if (xTaskNotifyWait(pdFALSE, pdFALSE, &modeID, portMAX_DELAY)) {
 8004c18:	e7d6      	b.n	8004bc8 <CAN_Bus+0x4c>
 8004c1a:	bf00      	nop
 8004c1c:	20000680 	.word	0x20000680

08004c20 <OdometerHandle>:
 */
float TargetAngleTrajec,TargetAngleTrajecAccel;
uint8_t CB5;
/* USER CODE END Header_OdometerHandle */
void OdometerHandle(void const * argument)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OdometerHandle */
	  /* USER CODE BEGIN OdometerHandle */

		process_Init();
 8004c28:	f7fe fabc 	bl	80031a4 <process_Init>
//		handleFunctionCAN(CANCTRL_MODE_UNTANGLE_WIRE, CANCTRL_DEVICE_MOTOR_CONTROLLER_1);
//		for(CAN_DEVICE_ID id = CANCTRL_DEVICE_MOTOR_CONTROLLER_1; id <= CANCTRL_DEVICE_MOTOR_CONTROLLER_3;id++){
//		}
		/* Infinite loop */
		for (;;) {
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 8004c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c30:	48b3      	ldr	r0, [pc, #716]	; (8004f00 <OdometerHandle+0x2e0>)
 8004c32:	f003 fa9d 	bl	8008170 <HAL_GPIO_ReadPin>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4bb2      	ldr	r3, [pc, #712]	; (8004f04 <OdometerHandle+0x2e4>)
 8004c3c:	701a      	strb	r2, [r3, #0]
			else if(step == 4)// Doi Nhan nut de chay tiep
			{
				// if (dieu kien nut nhan duoc nhan)step = 5;
			}
--------------------------------------------CODE MAU--------------------------------------------------*/
			angle_Rad = (a_Now/10)*M_PI/180;
 8004c3e:	4bb2      	ldr	r3, [pc, #712]	; (8004f08 <OdometerHandle+0x2e8>)
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c4c:	ee16 0a90 	vmov	r0, s13
 8004c50:	f7fb fc7a 	bl	8000548 <__aeabi_f2d>
 8004c54:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ef0 <OdometerHandle+0x2d0>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fccd 	bl	80005f8 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	4ba8      	ldr	r3, [pc, #672]	; (8004f0c <OdometerHandle+0x2ec>)
 8004c6c:	f7fb fdee 	bl	800084c <__aeabi_ddiv>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f7fb ff96 	bl	8000ba8 <__aeabi_d2f>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4aa4      	ldr	r2, [pc, #656]	; (8004f10 <OdometerHandle+0x2f0>)
 8004c80:	6013      	str	r3, [r2, #0]
			trajecTheta.t += DELTA_T;
 8004c82:	4ba4      	ldr	r3, [pc, #656]	; (8004f14 <OdometerHandle+0x2f4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb fc5e 	bl	8000548 <__aeabi_f2d>
 8004c8c:	a39a      	add	r3, pc, #616	; (adr r3, 8004ef8 <OdometerHandle+0x2d8>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fafb 	bl	800028c <__adddf3>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fb ff83 	bl	8000ba8 <__aeabi_d2f>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a9b      	ldr	r2, [pc, #620]	; (8004f14 <OdometerHandle+0x2f4>)
 8004ca6:	6013      	str	r3, [r2, #0]
			startPutBall(process_GetBall_State);
 8004ca8:	4b9b      	ldr	r3, [pc, #620]	; (8004f18 <OdometerHandle+0x2f8>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc fb17 	bl	80012e0 <startPutBall>
			Get_MPU_Angle();
 8004cb2:	f7fe fa39 	bl	8003128 <Get_MPU_Angle>
			process_SetFloatingEnc();
 8004cb6:	f7fe fb73 	bl	80033a0 <process_SetFloatingEnc>
			trajecPlan_Cal(&trajecTheta);
 8004cba:	4896      	ldr	r0, [pc, #600]	; (8004f14 <OdometerHandle+0x2f4>)
 8004cbc:	f7fd f844 	bl	8001d48 <trajecPlan_Cal>
			if (use_pidTheta)
 8004cc0:	4b96      	ldr	r3, [pc, #600]	; (8004f1c <OdometerHandle+0x2fc>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d018      	beq.n	8004cfa <OdometerHandle+0xda>
			{
				r = -(PID_Cal(&pid_Angle, trajecTheta.xTrajec, angle_Rad)+trajecTheta.xdottraject);
 8004cc8:	4b92      	ldr	r3, [pc, #584]	; (8004f14 <OdometerHandle+0x2f4>)
 8004cca:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cce:	4b90      	ldr	r3, [pc, #576]	; (8004f10 <OdometerHandle+0x2f0>)
 8004cd0:	ed93 7a00 	vldr	s14, [r3]
 8004cd4:	eef0 0a47 	vmov.f32	s1, s14
 8004cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cdc:	4890      	ldr	r0, [pc, #576]	; (8004f20 <OdometerHandle+0x300>)
 8004cde:	f006 fb53 	bl	800b388 <PID_Cal>
 8004ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	; (8004f14 <OdometerHandle+0x2f4>)
 8004ce8:	edd3 7a06 	vldr	s15, [r3, #24]
 8004cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf0:	eef1 7a67 	vneg.f32	s15, s15
 8004cf4:	4b8b      	ldr	r3, [pc, #556]	; (8004f24 <OdometerHandle+0x304>)
 8004cf6:	edc3 7a00 	vstr	s15, [r3]

			}
///////////////////////////////////////////////////CODE O DAY/////////////////////////////////////////////////////

				if (step == 0)
 8004cfa:	4b8b      	ldr	r3, [pc, #556]	; (8004f28 <OdometerHandle+0x308>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <OdometerHandle+0xe8>
					{	// Ra lenh cho co Cau lay bong di xuong
						process_getBall();
 8004d02:	f7ff f88b 	bl	8003e1c <process_getBall>
 8004d06:	e189      	b.n	800501c <OdometerHandle+0x3fc>
					}

				else if (step == 1)
 8004d08:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <OdometerHandle+0x308>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d128      	bne.n	8004d62 <OdometerHandle+0x142>
					{	//Ra lenh cho co Cau lay bong di len cham chu U
						process_setVal_PutBall(1);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7ff f847 	bl	8003da4 <process_setVal_PutBall>

						if (GamePad.Down)
 8004d16:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <OdometerHandle+0x30c>)
 8004d18:	7a1b      	ldrb	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 817e 	beq.w	800501c <OdometerHandle+0x3fc>
						{
							osDelay(500);
 8004d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d24:	f006 fc67 	bl	800b5f6 <osDelay>
							if(GamePad.Down)
 8004d28:	4b80      	ldr	r3, [pc, #512]	; (8004f2c <OdometerHandle+0x30c>)
 8004d2a:	7a1b      	ldrb	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8175 	beq.w	800501c <OdometerHandle+0x3fc>
							{	//Reset thong so enc tha troi va la ban :
								Reset_MPU_Angle();
 8004d32:	f7fe fa25 	bl	8003180 <Reset_MPU_Angle>
								process_ResetFloatingEnc();
 8004d36:	f7fe fb47 	bl	80033c8 <process_ResetFloatingEnc>
								// Set thong so quy hoach quy dao :
								trajecPlan_SetParam(&trajecTheta, angle_Rad, -45*M_PI/180, 5, 0, 0);
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <OdometerHandle+0x2f0>)
 8004d3c:	edd3 7a00 	vldr	s15, [r3]
 8004d40:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8004f30 <OdometerHandle+0x310>
 8004d44:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8004f30 <OdometerHandle+0x310>
 8004d48:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8004d4c:	eddf 0a79 	vldr	s1, [pc, #484]	; 8004f34 <OdometerHandle+0x314>
 8004d50:	eeb0 0a67 	vmov.f32	s0, s15
 8004d54:	486f      	ldr	r0, [pc, #444]	; (8004f14 <OdometerHandle+0x2f4>)
 8004d56:	f7fd f8ee 	bl	8001f36 <trajecPlan_SetParam>
								step = 2;
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <OdometerHandle+0x308>)
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e15c      	b.n	800501c <OdometerHandle+0x3fc>
							}
						}
					}

				else if (step == 2)
 8004d62:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <OdometerHandle+0x308>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d119      	bne.n	8004d9e <OdometerHandle+0x17e>
					{
						//Cho phep PID giu goc
						use_pidTheta = 1;
 8004d6a:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <OdometerHandle+0x2fc>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
						//Set thong so khi vua chay vua xoay
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004d70:	4b68      	ldr	r3, [pc, #416]	; (8004f14 <OdometerHandle+0x2f4>)
 8004d72:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d76:	4b66      	ldr	r3, [pc, #408]	; (8004f10 <OdometerHandle+0x2f0>)
 8004d78:	ed93 7a00 	vldr	s14, [r3]
 8004d7c:	eef0 0a47 	vmov.f32	s1, s14
 8004d80:	eeb0 0a67 	vmov.f32	s0, s15
 8004d84:	f7fe faa8 	bl	80032d8 <process_PD_Auto_Chose>
						//Set chu trinh chay theo enc
						process_Accel_FloatingEnc2(-22, 1.2, 4400, 0.08);
 8004d88:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8004f38 <OdometerHandle+0x318>
 8004d8c:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8004f3c <OdometerHandle+0x31c>
 8004d90:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8004f40 <OdometerHandle+0x320>
 8004d94:	eebb 0a06 	vmov.f32	s0, #182	; 0xc1b00000 -22.0
 8004d98:	f7fe fb26 	bl	80033e8 <process_Accel_FloatingEnc2>
 8004d9c:	e13e      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 3)
 8004d9e:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <OdometerHandle+0x308>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d102      	bne.n	8004dac <OdometerHandle+0x18c>
					{
						process_Ball_Approach();
 8004da6:	f7fe fd43 	bl	8003830 <process_Ball_Approach>
 8004daa:	e137      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 4)
 8004dac:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <OdometerHandle+0x308>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d102      	bne.n	8004dba <OdometerHandle+0x19a>
					{
						process_getBall();
 8004db4:	f7ff f832 	bl	8003e1c <process_getBall>
 8004db8:	e130      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 5)
 8004dba:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <OdometerHandle+0x308>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d116      	bne.n	8004df0 <OdometerHandle+0x1d0>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -3*M_PI/180, 4, 0, 0);
 8004dc2:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <OdometerHandle+0x2f0>)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	ed9f 2a59 	vldr	s4, [pc, #356]	; 8004f30 <OdometerHandle+0x310>
 8004dcc:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004f30 <OdometerHandle+0x310>
 8004dd0:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8004dd4:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8004f44 <OdometerHandle+0x324>
 8004dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ddc:	484d      	ldr	r0, [pc, #308]	; (8004f14 <OdometerHandle+0x2f4>)
 8004dde:	f7fd f8aa 	bl	8001f36 <trajecPlan_SetParam>
						step += 1;
 8004de2:	4b51      	ldr	r3, [pc, #324]	; (8004f28 <OdometerHandle+0x308>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <OdometerHandle+0x308>)
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e115      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if(step == 6)
 8004df0:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <OdometerHandle+0x308>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d10a      	bne.n	8004e0e <OdometerHandle+0x1ee>
					{
						process_Accel_FloatingEnc2(75, 1.2, 3000, 0.05);
 8004df8:	eddf 1a53 	vldr	s3, [pc, #332]	; 8004f48 <OdometerHandle+0x328>
 8004dfc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8004f4c <OdometerHandle+0x32c>
 8004e00:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8004f40 <OdometerHandle+0x320>
 8004e04:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8004f50 <OdometerHandle+0x330>
 8004e08:	f7fe faee 	bl	80033e8 <process_Accel_FloatingEnc2>
 8004e0c:	e106      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if(step == 7)
 8004e0e:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <OdometerHandle+0x308>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b07      	cmp	r3, #7
 8004e14:	d104      	bne.n	8004e20 <OdometerHandle+0x200>
					{
						process_PD_OnStrainghtPath();
 8004e16:	f7fe fa03 	bl	8003220 <process_PD_OnStrainghtPath>
						process_ApproachWall();
 8004e1a:	f7fe ff1f 	bl	8003c5c <process_ApproachWall>
 8004e1e:	e0fd      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if(step == 8)
 8004e20:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <OdometerHandle+0x308>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d102      	bne.n	8004e2e <OdometerHandle+0x20e>
					{
						process_ReleaseBall();
 8004e28:	f7fe ffcc 	bl	8003dc4 <process_ReleaseBall>
 8004e2c:	e0f6      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 9)
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <OdometerHandle+0x308>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b09      	cmp	r3, #9
 8004e34:	d116      	bne.n	8004e64 <OdometerHandle+0x244>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -45*M_PI/180, 4, 0, 0);
 8004e36:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <OdometerHandle+0x2f0>)
 8004e38:	edd3 7a00 	vldr	s15, [r3]
 8004e3c:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8004f30 <OdometerHandle+0x310>
 8004e40:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8004f30 <OdometerHandle+0x310>
 8004e44:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8004e48:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8004f34 <OdometerHandle+0x314>
 8004e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e50:	4830      	ldr	r0, [pc, #192]	; (8004f14 <OdometerHandle+0x2f4>)
 8004e52:	f7fd f870 	bl	8001f36 <trajecPlan_SetParam>
						step += 1;
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <OdometerHandle+0x308>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <OdometerHandle+0x308>)
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	e0db      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 10)
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <OdometerHandle+0x308>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b0a      	cmp	r3, #10
 8004e6a:	d116      	bne.n	8004e9a <OdometerHandle+0x27a>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <OdometerHandle+0x2f4>)
 8004e6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <OdometerHandle+0x2f0>)
 8004e74:	ed93 7a00 	vldr	s14, [r3]
 8004e78:	eef0 0a47 	vmov.f32	s1, s14
 8004e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e80:	f7fe fa2a 	bl	80032d8 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(-115, 1.2, 3200, 0.05);
 8004e84:	eddf 1a30 	vldr	s3, [pc, #192]	; 8004f48 <OdometerHandle+0x328>
 8004e88:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8004f54 <OdometerHandle+0x334>
 8004e8c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004f40 <OdometerHandle+0x320>
 8004e90:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004f58 <OdometerHandle+0x338>
 8004e94:	f7fe faa8 	bl	80033e8 <process_Accel_FloatingEnc2>
 8004e98:	e0c0      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 11)
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <OdometerHandle+0x308>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b0b      	cmp	r3, #11
 8004ea0:	d102      	bne.n	8004ea8 <OdometerHandle+0x288>
					{
						process_Ball_Approach2();
 8004ea2:	f7fe fdd1 	bl	8003a48 <process_Ball_Approach2>
 8004ea6:	e0b9      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 12)
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <OdometerHandle+0x308>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d102      	bne.n	8004eb6 <OdometerHandle+0x296>
					{
						process_getBall();
 8004eb0:	f7fe ffb4 	bl	8003e1c <process_getBall>
 8004eb4:	e0b2      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 13)
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <OdometerHandle+0x308>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b0d      	cmp	r3, #13
 8004ebc:	d14e      	bne.n	8004f5c <OdometerHandle+0x33c>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, -3*M_PI/180, 3, 0, 0);
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <OdometerHandle+0x2f0>)
 8004ec0:	edd3 7a00 	vldr	s15, [r3]
 8004ec4:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8004f30 <OdometerHandle+0x310>
 8004ec8:	eddf 1a19 	vldr	s3, [pc, #100]	; 8004f30 <OdometerHandle+0x310>
 8004ecc:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8004ed0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004f44 <OdometerHandle+0x324>
 8004ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed8:	480e      	ldr	r0, [pc, #56]	; (8004f14 <OdometerHandle+0x2f4>)
 8004eda:	f7fd f82c 	bl	8001f36 <trajecPlan_SetParam>
						step += 1;
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <OdometerHandle+0x308>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <OdometerHandle+0x308>)
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e097      	b.n	800501c <OdometerHandle+0x3fc>
 8004eec:	f3af 8000 	nop.w
 8004ef0:	54442d18 	.word	0x54442d18
 8004ef4:	400921fb 	.word	0x400921fb
 8004ef8:	9999999a 	.word	0x9999999a
 8004efc:	3fa99999 	.word	0x3fa99999
 8004f00:	40021000 	.word	0x40021000
 8004f04:	200012e4 	.word	0x200012e4
 8004f08:	200011f8 	.word	0x200011f8
 8004f0c:	40668000 	.word	0x40668000
 8004f10:	200011fc 	.word	0x200011fc
 8004f14:	200012b4 	.word	0x200012b4
 8004f18:	2000129c 	.word	0x2000129c
 8004f1c:	20001248 	.word	0x20001248
 8004f20:	20001200 	.word	0x20001200
 8004f24:	20001288 	.word	0x20001288
 8004f28:	200011e6 	.word	0x200011e6
 8004f2c:	200011b0 	.word	0x200011b0
 8004f30:	00000000 	.word	0x00000000
 8004f34:	bf490fdb 	.word	0xbf490fdb
 8004f38:	3da3d70a 	.word	0x3da3d70a
 8004f3c:	45898000 	.word	0x45898000
 8004f40:	3f99999a 	.word	0x3f99999a
 8004f44:	bd567750 	.word	0xbd567750
 8004f48:	3d4ccccd 	.word	0x3d4ccccd
 8004f4c:	453b8000 	.word	0x453b8000
 8004f50:	42960000 	.word	0x42960000
 8004f54:	45480000 	.word	0x45480000
 8004f58:	c2e60000 	.word	0xc2e60000
					}
				else if (step == 14)
 8004f5c:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <OdometerHandle+0x4b8>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b0e      	cmp	r3, #14
 8004f62:	d116      	bne.n	8004f92 <OdometerHandle+0x372>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004f64:	4b5d      	ldr	r3, [pc, #372]	; (80050dc <OdometerHandle+0x4bc>)
 8004f66:	edd3 7a08 	vldr	s15, [r3, #32]
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <OdometerHandle+0x4c0>)
 8004f6c:	ed93 7a00 	vldr	s14, [r3]
 8004f70:	eef0 0a47 	vmov.f32	s1, s14
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	f7fe f9ae 	bl	80032d8 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(78, 1.2, 2800, 0.05);
 8004f7c:	eddf 1a59 	vldr	s3, [pc, #356]	; 80050e4 <OdometerHandle+0x4c4>
 8004f80:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80050e8 <OdometerHandle+0x4c8>
 8004f84:	eddf 0a59 	vldr	s1, [pc, #356]	; 80050ec <OdometerHandle+0x4cc>
 8004f88:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80050f0 <OdometerHandle+0x4d0>
 8004f8c:	f7fe fa2c 	bl	80033e8 <process_Accel_FloatingEnc2>
 8004f90:	e044      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 15)
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <OdometerHandle+0x4b8>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d104      	bne.n	8004fa4 <OdometerHandle+0x384>
					{
						process_PD_OnStrainghtPath();
 8004f9a:	f7fe f941 	bl	8003220 <process_PD_OnStrainghtPath>
						process_ApproachWall();
 8004f9e:	f7fe fe5d 	bl	8003c5c <process_ApproachWall>
 8004fa2:	e03b      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 16)
 8004fa4:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <OdometerHandle+0x4b8>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d102      	bne.n	8004fb2 <OdometerHandle+0x392>
					{
						process_ReleaseBall();
 8004fac:	f7fe ff0a 	bl	8003dc4 <process_ReleaseBall>
 8004fb0:	e034      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 17)
 8004fb2:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <OdometerHandle+0x4b8>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b11      	cmp	r3, #17
 8004fb8:	d116      	bne.n	8004fe8 <OdometerHandle+0x3c8>
					{
						trajecPlan_SetParam(&trajecTheta, angle_Rad, 0*M_PI/180, 1, 0, 0);
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <OdometerHandle+0x4c0>)
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 80050f4 <OdometerHandle+0x4d4>
 8004fc4:	eddf 1a4b 	vldr	s3, [pc, #300]	; 80050f4 <OdometerHandle+0x4d4>
 8004fc8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004fcc:	eddf 0a49 	vldr	s1, [pc, #292]	; 80050f4 <OdometerHandle+0x4d4>
 8004fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd4:	4841      	ldr	r0, [pc, #260]	; (80050dc <OdometerHandle+0x4bc>)
 8004fd6:	f7fc ffae 	bl	8001f36 <trajecPlan_SetParam>
						step += 1;
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <OdometerHandle+0x4b8>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <OdometerHandle+0x4b8>)
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e019      	b.n	800501c <OdometerHandle+0x3fc>
					}
				else if (step == 18)
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <OdometerHandle+0x4b8>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b12      	cmp	r3, #18
 8004fee:	d115      	bne.n	800501c <OdometerHandle+0x3fc>
					{
						process_PD_Auto_Chose(trajecTheta.Pf, angle_Rad);
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <OdometerHandle+0x4bc>)
 8004ff2:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <OdometerHandle+0x4c0>)
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	eef0 0a47 	vmov.f32	s1, s14
 8005000:	eeb0 0a67 	vmov.f32	s0, s15
 8005004:	f7fe f968 	bl	80032d8 <process_PD_Auto_Chose>
						process_Accel_FloatingEnc2(200, 1.2, 6000, 0.05);
 8005008:	eddf 1a36 	vldr	s3, [pc, #216]	; 80050e4 <OdometerHandle+0x4c4>
 800500c:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80050f8 <OdometerHandle+0x4d8>
 8005010:	eddf 0a36 	vldr	s1, [pc, #216]	; 80050ec <OdometerHandle+0x4cc>
 8005014:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80050fc <OdometerHandle+0x4dc>
 8005018:	f7fe f9e6 	bl	80033e8 <process_Accel_FloatingEnc2>
					}

////////////////////////////////////////////////NUT BAM////////////////////////////////////////////////////////////
			if (GamePad.Down && GamePad.Cross)//Chuyen Sang Che Do GamePad
 800501c:	4b38      	ldr	r3, [pc, #224]	; (8005100 <OdometerHandle+0x4e0>)
 800501e:	7a1b      	ldrb	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d011      	beq.n	8005048 <OdometerHandle+0x428>
 8005024:	4b36      	ldr	r3, [pc, #216]	; (8005100 <OdometerHandle+0x4e0>)
 8005026:	7b1b      	ldrb	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <OdometerHandle+0x428>
			{
				osDelay(100);
 800502c:	2064      	movs	r0, #100	; 0x64
 800502e:	f006 fae2 	bl	800b5f6 <osDelay>
				if (GamePad.Down && GamePad.Cross)
 8005032:	4b33      	ldr	r3, [pc, #204]	; (8005100 <OdometerHandle+0x4e0>)
 8005034:	7a1b      	ldrb	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <OdometerHandle+0x428>
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <OdometerHandle+0x4e0>)
 800503c:	7b1b      	ldrb	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <OdometerHandle+0x428>
				{
					Gamepad = 1;
 8005042:	4b30      	ldr	r3, [pc, #192]	; (8005104 <OdometerHandle+0x4e4>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
				}
			}

			if((GamePad.Square == 1)&&(GamePad.Right == 1))// Xa day
 8005048:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <OdometerHandle+0x4e0>)
 800504a:	7a5b      	ldrb	r3, [r3, #9]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d111      	bne.n	8005074 <OdometerHandle+0x454>
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <OdometerHandle+0x4e0>)
 8005052:	79db      	ldrb	r3, [r3, #7]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10d      	bne.n	8005074 <OdometerHandle+0x454>
			{
				osDelay(100);
 8005058:	2064      	movs	r0, #100	; 0x64
 800505a:	f006 facc 	bl	800b5f6 <osDelay>
				if((GamePad.Square == 1)&&(GamePad.Right == 1))
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <OdometerHandle+0x4e0>)
 8005060:	7a5b      	ldrb	r3, [r3, #9]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d106      	bne.n	8005074 <OdometerHandle+0x454>
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <OdometerHandle+0x4e0>)
 8005068:	79db      	ldrb	r3, [r3, #7]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d102      	bne.n	8005074 <OdometerHandle+0x454>
				{
					xaDay = 1;
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <OdometerHandle+0x4e8>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
				}
			}

			if (Gamepad == 1)
 8005074:	4b23      	ldr	r3, [pc, #140]	; (8005104 <OdometerHandle+0x4e4>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d110      	bne.n	800509e <OdometerHandle+0x47e>
			{
				uControlX = 	-GamePad.XLeftCtr;
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <OdometerHandle+0x4e0>)
 800507e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005082:	eef1 7a67 	vneg.f32	s15, s15
 8005086:	4b21      	ldr	r3, [pc, #132]	; (800510c <OdometerHandle+0x4ec>)
 8005088:	edc3 7a00 	vstr	s15, [r3]
				uControlY = 	GamePad.YLeftCtr;
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <OdometerHandle+0x4e0>)
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <OdometerHandle+0x4f0>)
 8005092:	6013      	str	r3, [r2, #0]
				uControlTheta = GamePad.XRightCtr;
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <OdometerHandle+0x4e0>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <OdometerHandle+0x4f4>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e010      	b.n	80050c0 <OdometerHandle+0x4a0>
			}
			else {
				process_Signal_RotationMatrixTransform(u, v, r);
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <OdometerHandle+0x4f8>)
 80050a0:	edd3 7a00 	vldr	s15, [r3]
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <OdometerHandle+0x4fc>)
 80050a6:	ed93 7a00 	vldr	s14, [r3]
 80050aa:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <OdometerHandle+0x500>)
 80050ac:	edd3 6a00 	vldr	s13, [r3]
 80050b0:	eeb0 1a66 	vmov.f32	s2, s13
 80050b4:	eef0 0a47 	vmov.f32	s1, s14
 80050b8:	eeb0 0a67 	vmov.f32	s0, s15
 80050bc:	f7fe fb1e 	bl	80036fc <process_Signal_RotationMatrixTransform>
			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
			xTaskNotify(TaskInvKineHandle,1,eSetValueWithOverwrite);
 80050c0:	4b18      	ldr	r3, [pc, #96]	; (8005124 <OdometerHandle+0x504>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	2203      	movs	r2, #3
 80050c8:	2101      	movs	r1, #1
 80050ca:	f007 f8a3 	bl	800c214 <xTaskGenericNotify>
			osDelay(DELTA_T*1000);
 80050ce:	2032      	movs	r0, #50	; 0x32
 80050d0:	f006 fa91 	bl	800b5f6 <osDelay>
			CB5 = HAL_GPIO_ReadPin(sensor_5_GPIO_Port, sensor_5_Pin);
 80050d4:	e5aa      	b.n	8004c2c <OdometerHandle+0xc>
 80050d6:	bf00      	nop
 80050d8:	200011e6 	.word	0x200011e6
 80050dc:	200012b4 	.word	0x200012b4
 80050e0:	200011fc 	.word	0x200011fc
 80050e4:	3d4ccccd 	.word	0x3d4ccccd
 80050e8:	452f0000 	.word	0x452f0000
 80050ec:	3f99999a 	.word	0x3f99999a
 80050f0:	429c0000 	.word	0x429c0000
 80050f4:	00000000 	.word	0x00000000
 80050f8:	45bb8000 	.word	0x45bb8000
 80050fc:	43480000 	.word	0x43480000
 8005100:	200011b0 	.word	0x200011b0
 8005104:	200011e5 	.word	0x200011e5
 8005108:	200011e4 	.word	0x200011e4
 800510c:	200011d8 	.word	0x200011d8
 8005110:	200011dc 	.word	0x200011dc
 8005114:	200011e0 	.word	0x200011e0
 8005118:	20001280 	.word	0x20001280
 800511c:	20001284 	.word	0x20001284
 8005120:	20001288 	.word	0x20001288
 8005124:	200009e8 	.word	0x200009e8

08005128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a07      	ldr	r2, [pc, #28]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800513a:	f000 fd97 	bl	8005c6c <HAL_IncTick>
  }
  if (htim->Instance == TIM4) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <HAL_TIM_PeriodElapsedCallback+0x24>
    readADC();
 8005148:	f7fe fe82 	bl	8003e50 <readADC>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40001c00 	.word	0x40001c00
 8005158:	40000800 	.word	0x40000800

0800515c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005160:	b672      	cpsid	i
}
 8005162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005164:	e7fe      	b.n	8005164 <Error_Handler+0x8>
	...

08005168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_MspInit+0x54>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HAL_MspInit+0x54>)
 8005178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <HAL_MspInit+0x54>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_MspInit+0x54>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_MspInit+0x54>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_MspInit+0x54>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051a6:	2200      	movs	r2, #0
 80051a8:	210f      	movs	r1, #15
 80051aa:	f06f 0001 	mvn.w	r0, #1
 80051ae:	f002 fa17 	bl	80075e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800

080051c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <HAL_ADC_MspInit+0x8c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d12f      	bne.n	8005242 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_ADC_MspInit+0x90>)
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_ADC_MspInit+0x90>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6453      	str	r3, [r2, #68]	; 0x44
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <HAL_ADC_MspInit+0x90>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_ADC_MspInit+0x90>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	4a12      	ldr	r2, [pc, #72]	; (8005250 <HAL_ADC_MspInit+0x90>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6313      	str	r3, [r2, #48]	; 0x30
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_ADC_MspInit+0x90>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800521a:	2302      	movs	r3, #2
 800521c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521e:	2303      	movs	r3, #3
 8005220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <HAL_ADC_MspInit+0x94>)
 800522e:	f002 fe03 	bl	8007e38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8005232:	2200      	movs	r2, #0
 8005234:	2105      	movs	r1, #5
 8005236:	2012      	movs	r0, #18
 8005238:	f002 f9d2 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800523c:	2012      	movs	r0, #18
 800523e:	f002 f9eb 	bl	8007618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005242:	bf00      	nop
 8005244:	3728      	adds	r7, #40	; 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40012000 	.word	0x40012000
 8005250:	40023800 	.word	0x40023800
 8005254:	40020800 	.word	0x40020800

08005258 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_CAN_MspInit+0x94>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d134      	bne.n	80052e4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 8005284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6313      	str	r3, [r2, #48]	; 0x30
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_CAN_MspInit+0x98>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80052b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80052b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b8:	2302      	movs	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c0:	2303      	movs	r3, #3
 80052c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80052c4:	2309      	movs	r3, #9
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4619      	mov	r1, r3
 80052ce:	4809      	ldr	r0, [pc, #36]	; (80052f4 <HAL_CAN_MspInit+0x9c>)
 80052d0:	f002 fdb2 	bl	8007e38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2105      	movs	r1, #5
 80052d8:	2014      	movs	r0, #20
 80052da:	f002 f981 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80052de:	2014      	movs	r0, #20
 80052e0:	f002 f99a 	bl	8007618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	3728      	adds	r7, #40	; 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40006400 	.word	0x40006400
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40020000 	.word	0x40020000

080052f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08c      	sub	sp, #48	; 0x30
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005300:	f107 031c 	add.w	r3, r7, #28
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a46      	ldr	r2, [pc, #280]	; (8005430 <HAL_TIM_Encoder_MspInit+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d12d      	bne.n	8005376 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	4b45      	ldr	r3, [pc, #276]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	4a44      	ldr	r2, [pc, #272]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6453      	str	r3, [r2, #68]	; 0x44
 800532a:	4b42      	ldr	r3, [pc, #264]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	4b3e      	ldr	r3, [pc, #248]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005358:	2302      	movs	r3, #2
 800535a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005360:	2300      	movs	r3, #0
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005364:	2301      	movs	r3, #1
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005368:	f107 031c 	add.w	r3, r7, #28
 800536c:	4619      	mov	r1, r3
 800536e:	4832      	ldr	r0, [pc, #200]	; (8005438 <HAL_TIM_Encoder_MspInit+0x140>)
 8005370:	f002 fd62 	bl	8007e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005374:	e057      	b.n	8005426 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537e:	d152      	bne.n	8005426 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6413      	str	r3, [r2, #64]	; 0x40
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	4a23      	ldr	r2, [pc, #140]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6313      	str	r3, [r2, #48]	; 0x30
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b8:	2300      	movs	r3, #0
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	6313      	str	r3, [r2, #48]	; 0x30
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <HAL_TIM_Encoder_MspInit+0x13c>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80053d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053e6:	2301      	movs	r3, #1
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ea:	f107 031c 	add.w	r3, r7, #28
 80053ee:	4619      	mov	r1, r3
 80053f0:	4811      	ldr	r0, [pc, #68]	; (8005438 <HAL_TIM_Encoder_MspInit+0x140>)
 80053f2:	f002 fd21 	bl	8007e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053f6:	2308      	movs	r3, #8
 80053f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053fa:	2302      	movs	r3, #2
 80053fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005402:	2300      	movs	r3, #0
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005406:	2301      	movs	r3, #1
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800540a:	f107 031c 	add.w	r3, r7, #28
 800540e:	4619      	mov	r1, r3
 8005410:	480a      	ldr	r0, [pc, #40]	; (800543c <HAL_TIM_Encoder_MspInit+0x144>)
 8005412:	f002 fd11 	bl	8007e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005416:	2200      	movs	r2, #0
 8005418:	2105      	movs	r1, #5
 800541a:	201c      	movs	r0, #28
 800541c:	f002 f8e0 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005420:	201c      	movs	r0, #28
 8005422:	f002 f8f9 	bl	8007618 <HAL_NVIC_EnableIRQ>
}
 8005426:	bf00      	nop
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40023800 	.word	0x40023800
 8005438:	40020000 	.word	0x40020000
 800543c:	40020400 	.word	0x40020400

08005440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <HAL_TIM_Base_MspInit+0xc0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b28      	ldr	r3, [pc, #160]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800546e:	e042      	b.n	80054f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a24      	ldr	r2, [pc, #144]	; (8005508 <HAL_TIM_Base_MspInit+0xc8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d116      	bne.n	80054a8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a20      	ldr	r2, [pc, #128]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 8005484:	f043 0304 	orr.w	r3, r3, #4
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005496:	2200      	movs	r2, #0
 8005498:	2105      	movs	r1, #5
 800549a:	201e      	movs	r0, #30
 800549c:	f002 f8a0 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054a0:	201e      	movs	r0, #30
 80054a2:	f002 f8b9 	bl	8007618 <HAL_NVIC_EnableIRQ>
}
 80054a6:	e026      	b.n	80054f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_TIM_Base_MspInit+0xcc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	4a12      	ldr	r2, [pc, #72]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054bc:	f043 0308 	orr.w	r3, r3, #8
 80054c0:	6413      	str	r3, [r2, #64]	; 0x40
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	e012      	b.n	80054f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <HAL_TIM_Base_MspInit+0xd0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10d      	bne.n	80054f6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e8:	6453      	str	r3, [r2, #68]	; 0x44
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_TIM_Base_MspInit+0xc4>)
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
}
 80054f6:	bf00      	nop
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40000400 	.word	0x40000400
 8005504:	40023800 	.word	0x40023800
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40014400 	.word	0x40014400

08005514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <HAL_TIM_MspPostInit+0xb0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d11e      	bne.n	8005574 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	6313      	str	r3, [r2, #48]	; 0x30
 8005546:	4b20      	ldr	r3, [pc, #128]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005552:	2330      	movs	r3, #48	; 0x30
 8005554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005556:	2302      	movs	r3, #2
 8005558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555e:	2300      	movs	r3, #0
 8005560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005562:	2302      	movs	r3, #2
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005566:	f107 0314 	add.w	r3, r7, #20
 800556a:	4619      	mov	r1, r3
 800556c:	4817      	ldr	r0, [pc, #92]	; (80055cc <HAL_TIM_MspPostInit+0xb8>)
 800556e:	f002 fc63 	bl	8007e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005572:	e022      	b.n	80055ba <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <HAL_TIM_MspPostInit+0xbc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d11d      	bne.n	80055ba <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6313      	str	r3, [r2, #48]	; 0x30
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_TIM_MspPostInit+0xb4>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800559a:	2303      	movs	r3, #3
 800559c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559e:	2302      	movs	r3, #2
 80055a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a6:	2300      	movs	r3, #0
 80055a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80055aa:	2302      	movs	r3, #2
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	4619      	mov	r1, r3
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <HAL_TIM_MspPostInit+0xc0>)
 80055b6:	f002 fc3f 	bl	8007e38 <HAL_GPIO_Init>
}
 80055ba:	bf00      	nop
 80055bc:	3728      	adds	r7, #40	; 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40020400 	.word	0x40020400
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40020000 	.word	0x40020000

080055d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a86      	ldr	r2, [pc, #536]	; (8005810 <HAL_UART_MspInit+0x238>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d163      	bne.n	80056c2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	4b85      	ldr	r3, [pc, #532]	; (8005814 <HAL_UART_MspInit+0x23c>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4a84      	ldr	r2, [pc, #528]	; (8005814 <HAL_UART_MspInit+0x23c>)
 8005604:	f043 0310 	orr.w	r3, r3, #16
 8005608:	6453      	str	r3, [r2, #68]	; 0x44
 800560a:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_UART_MspInit+0x23c>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	623b      	str	r3, [r7, #32]
 8005614:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	4b7e      	ldr	r3, [pc, #504]	; (8005814 <HAL_UART_MspInit+0x23c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	4a7d      	ldr	r2, [pc, #500]	; (8005814 <HAL_UART_MspInit+0x23c>)
 8005620:	f043 0302 	orr.w	r3, r3, #2
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
 8005626:	4b7b      	ldr	r3, [pc, #492]	; (8005814 <HAL_UART_MspInit+0x23c>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005632:	23c0      	movs	r3, #192	; 0xc0
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563a:	2300      	movs	r3, #0
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800563e:	2303      	movs	r3, #3
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005642:	2307      	movs	r3, #7
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564a:	4619      	mov	r1, r3
 800564c:	4872      	ldr	r0, [pc, #456]	; (8005818 <HAL_UART_MspInit+0x240>)
 800564e:	f002 fbf3 	bl	8007e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005652:	4b72      	ldr	r3, [pc, #456]	; (800581c <HAL_UART_MspInit+0x244>)
 8005654:	4a72      	ldr	r2, [pc, #456]	; (8005820 <HAL_UART_MspInit+0x248>)
 8005656:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005658:	4b70      	ldr	r3, [pc, #448]	; (800581c <HAL_UART_MspInit+0x244>)
 800565a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800565e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005660:	4b6e      	ldr	r3, [pc, #440]	; (800581c <HAL_UART_MspInit+0x244>)
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005666:	4b6d      	ldr	r3, [pc, #436]	; (800581c <HAL_UART_MspInit+0x244>)
 8005668:	2200      	movs	r2, #0
 800566a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800566c:	4b6b      	ldr	r3, [pc, #428]	; (800581c <HAL_UART_MspInit+0x244>)
 800566e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005672:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005674:	4b69      	ldr	r3, [pc, #420]	; (800581c <HAL_UART_MspInit+0x244>)
 8005676:	2200      	movs	r2, #0
 8005678:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800567a:	4b68      	ldr	r3, [pc, #416]	; (800581c <HAL_UART_MspInit+0x244>)
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005680:	4b66      	ldr	r3, [pc, #408]	; (800581c <HAL_UART_MspInit+0x244>)
 8005682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005686:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005688:	4b64      	ldr	r3, [pc, #400]	; (800581c <HAL_UART_MspInit+0x244>)
 800568a:	2200      	movs	r2, #0
 800568c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800568e:	4b63      	ldr	r3, [pc, #396]	; (800581c <HAL_UART_MspInit+0x244>)
 8005690:	2200      	movs	r2, #0
 8005692:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005694:	4861      	ldr	r0, [pc, #388]	; (800581c <HAL_UART_MspInit+0x244>)
 8005696:	f001 ffcd 	bl	8007634 <HAL_DMA_Init>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80056a0:	f7ff fd5c 	bl	800515c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_UART_MspInit+0x244>)
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
 80056aa:	4a5c      	ldr	r2, [pc, #368]	; (800581c <HAL_UART_MspInit+0x244>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2105      	movs	r1, #5
 80056b4:	2025      	movs	r0, #37	; 0x25
 80056b6:	f001 ff93 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056ba:	2025      	movs	r0, #37	; 0x25
 80056bc:	f001 ffac 	bl	8007618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80056c0:	e0a1      	b.n	8005806 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a57      	ldr	r2, [pc, #348]	; (8005824 <HAL_UART_MspInit+0x24c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d162      	bne.n	8005792 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 80056cc:	2300      	movs	r3, #0
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	4b50      	ldr	r3, [pc, #320]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	4a4f      	ldr	r2, [pc, #316]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	6413      	str	r3, [r2, #64]	; 0x40
 80056dc:	4b4d      	ldr	r3, [pc, #308]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	4b49      	ldr	r3, [pc, #292]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	4a48      	ldr	r2, [pc, #288]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056f2:	f043 0308 	orr.w	r3, r3, #8
 80056f6:	6313      	str	r3, [r2, #48]	; 0x30
 80056f8:	4b46      	ldr	r3, [pc, #280]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005704:	2360      	movs	r3, #96	; 0x60
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	2302      	movs	r3, #2
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005710:	2303      	movs	r3, #3
 8005712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005714:	2307      	movs	r3, #7
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571c:	4619      	mov	r1, r3
 800571e:	4842      	ldr	r0, [pc, #264]	; (8005828 <HAL_UART_MspInit+0x250>)
 8005720:	f002 fb8a 	bl	8007e38 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005724:	4b41      	ldr	r3, [pc, #260]	; (800582c <HAL_UART_MspInit+0x254>)
 8005726:	4a42      	ldr	r2, [pc, #264]	; (8005830 <HAL_UART_MspInit+0x258>)
 8005728:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_UART_MspInit+0x254>)
 800572c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005730:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_UART_MspInit+0x254>)
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005738:	4b3c      	ldr	r3, [pc, #240]	; (800582c <HAL_UART_MspInit+0x254>)
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_UART_MspInit+0x254>)
 8005740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005744:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005746:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_UART_MspInit+0x254>)
 8005748:	2200      	movs	r2, #0
 800574a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800574c:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_UART_MspInit+0x254>)
 800574e:	2200      	movs	r2, #0
 8005750:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005752:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_UART_MspInit+0x254>)
 8005754:	2200      	movs	r2, #0
 8005756:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_UART_MspInit+0x254>)
 800575a:	2200      	movs	r2, #0
 800575c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_UART_MspInit+0x254>)
 8005760:	2200      	movs	r2, #0
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005764:	4831      	ldr	r0, [pc, #196]	; (800582c <HAL_UART_MspInit+0x254>)
 8005766:	f001 ff65 	bl	8007634 <HAL_DMA_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005770:	f7ff fcf4 	bl	800515c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_UART_MspInit+0x254>)
 8005778:	635a      	str	r2, [r3, #52]	; 0x34
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <HAL_UART_MspInit+0x254>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2105      	movs	r1, #5
 8005784:	2026      	movs	r0, #38	; 0x26
 8005786:	f001 ff2b 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800578a:	2026      	movs	r0, #38	; 0x26
 800578c:	f001 ff44 	bl	8007618 <HAL_NVIC_EnableIRQ>
}
 8005790:	e039      	b.n	8005806 <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a27      	ldr	r2, [pc, #156]	; (8005834 <HAL_UART_MspInit+0x25c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d134      	bne.n	8005806 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057aa:	6413      	str	r3, [r2, #64]	; 0x40
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	4b15      	ldr	r3, [pc, #84]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	6313      	str	r3, [r2, #48]	; 0x30
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_UART_MspInit+0x23c>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80057d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057da:	2302      	movs	r3, #2
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e2:	2303      	movs	r3, #3
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057e6:	2307      	movs	r3, #7
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	4619      	mov	r1, r3
 80057f0:	4809      	ldr	r0, [pc, #36]	; (8005818 <HAL_UART_MspInit+0x240>)
 80057f2:	f002 fb21 	bl	8007e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80057f6:	2200      	movs	r2, #0
 80057f8:	2105      	movs	r1, #5
 80057fa:	2027      	movs	r0, #39	; 0x27
 80057fc:	f001 fef0 	bl	80075e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005800:	2027      	movs	r0, #39	; 0x27
 8005802:	f001 ff09 	bl	8007618 <HAL_NVIC_EnableIRQ>
}
 8005806:	bf00      	nop
 8005808:	3738      	adds	r7, #56	; 0x38
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40011000 	.word	0x40011000
 8005814:	40023800 	.word	0x40023800
 8005818:	40020400 	.word	0x40020400
 800581c:	20000924 	.word	0x20000924
 8005820:	40026440 	.word	0x40026440
 8005824:	40004400 	.word	0x40004400
 8005828:	40020c00 	.word	0x40020c00
 800582c:	20000984 	.word	0x20000984
 8005830:	400260a0 	.word	0x400260a0
 8005834:	40004800 	.word	0x40004800

08005838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <HAL_InitTick+0xe4>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	4a32      	ldr	r2, [pc, #200]	; (800591c <HAL_InitTick+0xe4>)
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	6413      	str	r3, [r2, #64]	; 0x40
 8005858:	4b30      	ldr	r3, [pc, #192]	; (800591c <HAL_InitTick+0xe4>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005864:	f107 0210 	add.w	r2, r7, #16
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f003 f948 	bl	8008b04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800587e:	f003 f919 	bl	8008ab4 <HAL_RCC_GetPCLK1Freq>
 8005882:	6378      	str	r0, [r7, #52]	; 0x34
 8005884:	e004      	b.n	8005890 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005886:	f003 f915 	bl	8008ab4 <HAL_RCC_GetPCLK1Freq>
 800588a:	4603      	mov	r3, r0
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	4a23      	ldr	r2, [pc, #140]	; (8005920 <HAL_InitTick+0xe8>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	0c9b      	lsrs	r3, r3, #18
 800589a:	3b01      	subs	r3, #1
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_InitTick+0xec>)
 80058a0:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_InitTick+0xf0>)
 80058a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80058a4:	4b1f      	ldr	r3, [pc, #124]	; (8005924 <HAL_InitTick+0xec>)
 80058a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058aa:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <HAL_InitTick+0xec>)
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <HAL_InitTick+0xec>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <HAL_InitTick+0xec>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_InitTick+0xec>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 80058c4:	4817      	ldr	r0, [pc, #92]	; (8005924 <HAL_InitTick+0xec>)
 80058c6:	f003 f94f 	bl	8008b68 <HAL_TIM_Base_Init>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80058d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11b      	bne.n	8005910 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 80058d8:	4812      	ldr	r0, [pc, #72]	; (8005924 <HAL_InitTick+0xec>)
 80058da:	f003 f995 	bl	8008c08 <HAL_TIM_Base_Start_IT>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80058e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d111      	bne.n	8005910 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80058ec:	202c      	movs	r0, #44	; 0x2c
 80058ee:	f001 fe93 	bl	8007618 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d808      	bhi.n	800590a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 80058f8:	2200      	movs	r2, #0
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	202c      	movs	r0, #44	; 0x2c
 80058fe:	f001 fe6f 	bl	80075e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <HAL_InitTick+0xf4>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	e002      	b.n	8005910 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005910:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005914:	4618      	mov	r0, r3
 8005916:	3738      	adds	r7, #56	; 0x38
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	431bde83 	.word	0x431bde83
 8005924:	200012e8 	.word	0x200012e8
 8005928:	40001c00 	.word	0x40001c00
 800592c:	20000004 	.word	0x20000004

08005930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005934:	e7fe      	b.n	8005934 <NMI_Handler+0x4>

08005936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800593a:	e7fe      	b.n	800593a <HardFault_Handler+0x4>

0800593c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005940:	e7fe      	b.n	8005940 <MemManage_Handler+0x4>

08005942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005946:	e7fe      	b.n	8005946 <BusFault_Handler+0x4>

08005948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800594c:	e7fe      	b.n	800594c <UsageFault_Handler+0x4>

0800594e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005960:	4802      	ldr	r0, [pc, #8]	; (800596c <DMA1_Stream6_IRQHandler+0x10>)
 8005962:	f001 ffff 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000984 	.word	0x20000984

08005970 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <ADC_IRQHandler+0x10>)
 8005976:	f000 fb6d 	bl	8006054 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000638 	.word	0x20000638

08005984 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005988:	4802      	ldr	r0, [pc, #8]	; (8005994 <CAN1_RX0_IRQHandler+0x10>)
 800598a:	f001 fb56 	bl	800703a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000680 	.word	0x20000680

08005998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800599c:	4802      	ldr	r0, [pc, #8]	; (80059a8 <TIM2_IRQHandler+0x10>)
 800599e:	f003 fbf9 	bl	8009194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059a2:	bf00      	nop
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	200006f0 	.word	0x200006f0

080059ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80059b0:	4802      	ldr	r0, [pc, #8]	; (80059bc <TIM4_IRQHandler+0x10>)
 80059b2:	f003 fbef 	bl	8009194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000780 	.word	0x20000780

080059c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <USART1_IRQHandler+0x10>)
 80059c6:	f004 fbc3 	bl	800a150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000858 	.word	0x20000858

080059d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80059d8:	4802      	ldr	r0, [pc, #8]	; (80059e4 <USART2_IRQHandler+0x10>)
 80059da:	f004 fbb9 	bl	800a150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2000089c 	.word	0x2000089c

080059e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059ec:	4802      	ldr	r0, [pc, #8]	; (80059f8 <USART3_IRQHandler+0x10>)
 80059ee:	f004 fbaf 	bl	800a150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	200008e0 	.word	0x200008e0

080059fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8005a00:	4802      	ldr	r0, [pc, #8]	; (8005a0c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005a02:	f003 fbc7 	bl	8009194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005a06:	bf00      	nop
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200012e8 	.word	0x200012e8

08005a10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005a14:	4802      	ldr	r0, [pc, #8]	; (8005a20 <DMA2_Stream2_IRQHandler+0x10>)
 8005a16:	f001 ffa5 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005a1a:	bf00      	nop
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000924 	.word	0x20000924

08005a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return 1;
 8005a28:	2301      	movs	r3, #1
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_kill>:

int _kill(int pid, int sig)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a3e:	f008 f861 	bl	800db04 <__errno>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2216      	movs	r2, #22
 8005a46:	601a      	str	r2, [r3, #0]
  return -1;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_exit>:

void _exit (int status)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ffe7 	bl	8005a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a66:	e7fe      	b.n	8005a66 <_exit+0x12>

08005a68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e00a      	b.n	8005a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a7a:	f3af 8000 	nop.w
 8005a7e:	4601      	mov	r1, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	60ba      	str	r2, [r7, #8]
 8005a86:	b2ca      	uxtb	r2, r1
 8005a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	dbf0      	blt.n	8005a7a <_read+0x12>
  }

  return len;
 8005a98:	687b      	ldr	r3, [r7, #4]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e009      	b.n	8005ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	60ba      	str	r2, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	dbf1      	blt.n	8005ab4 <_write+0x12>
  }
  return len;
 8005ad0:	687b      	ldr	r3, [r7, #4]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_close>:

int _close(int file)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b02:	605a      	str	r2, [r3, #4]
  return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <_isatty>:

int _isatty(int file)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b1a:	2301      	movs	r3, #1
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <_sbrk+0x5c>)
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <_sbrk+0x60>)
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <_sbrk+0x64>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b60:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <_sbrk+0x64>)
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <_sbrk+0x68>)
 8005b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <_sbrk+0x64>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d207      	bcs.n	8005b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b74:	f007 ffc6 	bl	800db04 <__errno>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	220c      	movs	r2, #12
 8005b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	e009      	b.n	8005b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b84:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <_sbrk+0x64>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <_sbrk+0x64>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <_sbrk+0x64>)
 8005b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b96:	68fb      	ldr	r3, [r7, #12]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20020000 	.word	0x20020000
 8005ba4:	00000400 	.word	0x00000400
 8005ba8:	20001330 	.word	0x20001330
 8005bac:	200051d8 	.word	0x200051d8

08005bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <SystemInit+0x20>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	4a05      	ldr	r2, [pc, #20]	; (8005bd0 <SystemInit+0x20>)
 8005bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000ed00 	.word	0xe000ed00

08005bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005bd8:	480d      	ldr	r0, [pc, #52]	; (8005c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005bda:	490e      	ldr	r1, [pc, #56]	; (8005c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005bdc:	4a0e      	ldr	r2, [pc, #56]	; (8005c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005be0:	e002      	b.n	8005be8 <LoopCopyDataInit>

08005be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005be6:	3304      	adds	r3, #4

08005be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bec:	d3f9      	bcc.n	8005be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bee:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005bf0:	4c0b      	ldr	r4, [pc, #44]	; (8005c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bf4:	e001      	b.n	8005bfa <LoopFillZerobss>

08005bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bf8:	3204      	adds	r2, #4

08005bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bfc:	d3fb      	bcc.n	8005bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005bfe:	f7ff ffd7 	bl	8005bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c02:	f007 ff85 	bl	800db10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c06:	f7fe f9c7 	bl	8003f98 <main>
  bx  lr    
 8005c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c14:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005c18:	08012768 	.word	0x08012768
  ldr r2, =_sbss
 8005c1c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005c20:	200051d8 	.word	0x200051d8

08005c24 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c24:	e7fe      	b.n	8005c24 <CAN1_RX1_IRQHandler>
	...

08005c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <HAL_Init+0x40>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <HAL_Init+0x40>)
 8005c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_Init+0x40>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <HAL_Init+0x40>)
 8005c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c44:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <HAL_Init+0x40>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a07      	ldr	r2, [pc, #28]	; (8005c68 <HAL_Init+0x40>)
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c50:	2003      	movs	r0, #3
 8005c52:	f001 fcba 	bl	80075ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c56:	200f      	movs	r0, #15
 8005c58:	f7ff fdee 	bl	8005838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c5c:	f7ff fa84 	bl	8005168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40023c00 	.word	0x40023c00

08005c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_IncTick+0x20>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_IncTick+0x24>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_IncTick+0x24>)
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000008 	.word	0x20000008
 8005c90:	20001334 	.word	0x20001334

08005c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return uwTick;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <HAL_GetTick+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20001334 	.word	0x20001334

08005cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e033      	b.n	8005d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fa78 	bl	80051c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d118      	bne.n	8005d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cf2:	f023 0302 	bic.w	r3, r3, #2
 8005cf6:	f043 0202 	orr.w	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc06 	bl	8006510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	f043 0201 	orr.w	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
 8005d1a:	e001      	b.n	8005d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_ADC_Start+0x1a>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e0b2      	b.n	8005eb4 <HAL_ADC_Start+0x180>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d018      	beq.n	8005d96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d74:	4b52      	ldr	r3, [pc, #328]	; (8005ec0 <HAL_ADC_Start+0x18c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a52      	ldr	r2, [pc, #328]	; (8005ec4 <HAL_ADC_Start+0x190>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0c9a      	lsrs	r2, r3, #18
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d88:	e002      	b.n	8005d90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f9      	bne.n	8005d8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d17a      	bne.n	8005e9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d106      	bne.n	8005df2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	f023 0206 	bic.w	r2, r3, #6
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44
 8005df0:	e002      	b.n	8005df8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e00:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <HAL_ADC_Start+0x194>)
 8005e02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d12a      	bne.n	8005e70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_ADC_Start+0x198>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d015      	beq.n	8005e50 <HAL_ADC_Start+0x11c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <HAL_ADC_Start+0x19c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d105      	bne.n	8005e3a <HAL_ADC_Start+0x106>
 8005e2e:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <HAL_ADC_Start+0x194>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a25      	ldr	r2, [pc, #148]	; (8005ed4 <HAL_ADC_Start+0x1a0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d136      	bne.n	8005eb2 <HAL_ADC_Start+0x17e>
 8005e44:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <HAL_ADC_Start+0x194>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d130      	bne.n	8005eb2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d129      	bne.n	8005eb2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e6c:	609a      	str	r2, [r3, #8]
 8005e6e:	e020      	b.n	8005eb2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <HAL_ADC_Start+0x198>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d11b      	bne.n	8005eb2 <HAL_ADC_Start+0x17e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d114      	bne.n	8005eb2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	e00b      	b.n	8005eb2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0210 	orr.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	431bde83 	.word	0x431bde83
 8005ec8:	40012300 	.word	0x40012300
 8005ecc:	40012000 	.word	0x40012000
 8005ed0:	40012100 	.word	0x40012100
 8005ed4:	40012200 	.word	0x40012200

08005ed8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_ADC_Stop+0x16>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e021      	b.n	8005f32 <HAL_ADC_Stop+0x5a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f043 0201 	orr.w	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5a:	d113      	bne.n	8005f84 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6a:	d10b      	bne.n	8005f84 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e063      	b.n	800604c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f84:	f7ff fe86 	bl	8005c94 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f8a:	e021      	b.n	8005fd0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d01d      	beq.n	8005fd0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_ADC_PollForConversion+0x6c>
 8005f9a:	f7ff fe7b 	bl	8005c94 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d212      	bcs.n	8005fd0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	f043 0204 	orr.w	r2, r3, #4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e03d      	b.n	800604c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d1d6      	bne.n	8005f8c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f06f 0212 	mvn.w	r2, #18
 8005fe6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d123      	bne.n	800604a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006006:	2b00      	cmp	r3, #0
 8006008:	d11f      	bne.n	800604a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006022:	2b00      	cmp	r3, #0
 8006024:	d111      	bne.n	800604a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f043 0201 	orr.w	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d049      	beq.n	800611e <HAL_ADC_IRQHandler+0xca>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d046      	beq.n	800611e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d12b      	bne.n	800610e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d127      	bne.n	800610e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d006      	beq.n	80060da <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d119      	bne.n	800610e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0220 	bic.w	r2, r2, #32
 80060e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8bd 	bl	800628e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0212 	mvn.w	r2, #18
 800611c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d057      	beq.n	80061e4 <HAL_ADC_IRQHandler+0x190>
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d054      	beq.n	80061e4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d139      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006178:	2b00      	cmp	r3, #0
 800617a:	d12b      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006186:	2b00      	cmp	r3, #0
 8006188:	d124      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11d      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800619c:	2b00      	cmp	r3, #0
 800619e:	d119      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0201 	orr.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa97 	bl	8006708 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f06f 020c 	mvn.w	r2, #12
 80061e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d017      	beq.n	800622a <HAL_ADC_IRQHandler+0x1d6>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b01      	cmp	r3, #1
 800620c:	d10d      	bne.n	800622a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f841 	bl	80062a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0201 	mvn.w	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006238:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d015      	beq.n	800626c <HAL_ADC_IRQHandler+0x218>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f043 0202 	orr.w	r2, r3, #2
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f06f 0220 	mvn.w	r2, #32
 800625a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f82a 	bl	80062b6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f06f 0220 	mvn.w	r2, #32
 800626a:	601a      	str	r2, [r3, #0]
  }
}
 800626c:	bf00      	nop
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x1c>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e105      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x228>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b09      	cmp	r3, #9
 80062f6:	d925      	bls.n	8006344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	3b1e      	subs	r3, #30
 800630e:	2207      	movs	r2, #7
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43da      	mvns	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	400a      	ands	r2, r1
 800631c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68d9      	ldr	r1, [r3, #12]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	4618      	mov	r0, r3
 8006330:	4603      	mov	r3, r0
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4403      	add	r3, r0
 8006336:	3b1e      	subs	r3, #30
 8006338:	409a      	lsls	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	e022      	b.n	800638a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6919      	ldr	r1, [r3, #16]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	2207      	movs	r2, #7
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43da      	mvns	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	400a      	ands	r2, r1
 8006366:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	4618      	mov	r0, r3
 800637a:	4603      	mov	r3, r0
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4403      	add	r3, r0
 8006380:	409a      	lsls	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d824      	bhi.n	80063dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	3b05      	subs	r3, #5
 80063a4:	221f      	movs	r2, #31
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43da      	mvns	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	400a      	ands	r2, r1
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	4618      	mov	r0, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	3b05      	subs	r3, #5
 80063ce:	fa00 f203 	lsl.w	r2, r0, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34
 80063da:	e04c      	b.n	8006476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	d824      	bhi.n	800642e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	3b23      	subs	r3, #35	; 0x23
 80063f6:	221f      	movs	r2, #31
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	43da      	mvns	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	400a      	ands	r2, r1
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	4618      	mov	r0, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	3b23      	subs	r3, #35	; 0x23
 8006420:	fa00 f203 	lsl.w	r2, r0, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
 800642c:	e023      	b.n	8006476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	3b41      	subs	r3, #65	; 0x41
 8006440:	221f      	movs	r2, #31
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	43da      	mvns	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	400a      	ands	r2, r1
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	4618      	mov	r0, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	3b41      	subs	r3, #65	; 0x41
 800646a:	fa00 f203 	lsl.w	r2, r0, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <HAL_ADC_ConfigChannel+0x234>)
 8006478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_ADC_ConfigChannel+0x238>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d109      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x1cc>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b12      	cmp	r3, #18
 800648a:	d105      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_ADC_ConfigChannel+0x238>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d123      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x21e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d003      	beq.n	80064b2 <HAL_ADC_ConfigChannel+0x1e6>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b11      	cmp	r3, #17
 80064b0:	d11b      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d111      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <HAL_ADC_ConfigChannel+0x23c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a10      	ldr	r2, [pc, #64]	; (800650c <HAL_ADC_ConfigChannel+0x240>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	0c9a      	lsrs	r2, r3, #18
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064dc:	e002      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f9      	bne.n	80064de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40012300 	.word	0x40012300
 8006504:	40012000 	.word	0x40012000
 8006508:	20000000 	.word	0x20000000
 800650c:	431bde83 	.word	0x431bde83

08006510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006518:	4b79      	ldr	r3, [pc, #484]	; (8006700 <ADC_Init+0x1f0>)
 800651a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	021a      	lsls	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6859      	ldr	r1, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800658a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6899      	ldr	r1, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	4a58      	ldr	r2, [pc, #352]	; (8006704 <ADC_Init+0x1f4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6899      	ldr	r1, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6899      	ldr	r1, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	e00f      	b.n	800660e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800660c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0202 	bic.w	r2, r2, #2
 800661c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6899      	ldr	r1, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	7e1b      	ldrb	r3, [r3, #24]
 8006628:	005a      	lsls	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800665a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	3b01      	subs	r3, #1
 8006668:	035a      	lsls	r2, r3, #13
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	e007      	b.n	8006684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	3b01      	subs	r3, #1
 80066a0:	051a      	lsls	r2, r3, #20
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066c6:	025a      	lsls	r2, r3, #9
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6899      	ldr	r1, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	029a      	lsls	r2, r3, #10
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40012300 	.word	0x40012300
 8006704:	0f000001 	.word	0x0f000001

08006708 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0ed      	b.n	800690a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fe fd8c 	bl	8005258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006750:	f7ff faa0 	bl	8005c94 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006756:	e012      	b.n	800677e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006758:	f7ff fa9c 	bl	8005c94 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b0a      	cmp	r3, #10
 8006764:	d90b      	bls.n	800677e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2205      	movs	r2, #5
 8006776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0c5      	b.n	800690a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0e5      	beq.n	8006758 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0202 	bic.w	r2, r2, #2
 800679a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800679c:	f7ff fa7a 	bl	8005c94 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80067a2:	e012      	b.n	80067ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80067a4:	f7ff fa76 	bl	8005c94 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d90b      	bls.n	80067ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2205      	movs	r2, #5
 80067c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e09f      	b.n	800690a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e5      	bne.n	80067a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7e1b      	ldrb	r3, [r3, #24]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d108      	bne.n	80067f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e007      	b.n	8006802 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006800:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7e5b      	ldrb	r3, [r3, #25]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d108      	bne.n	800681c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e007      	b.n	800682c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7e9b      	ldrb	r3, [r3, #26]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0220 	orr.w	r2, r2, #32
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e007      	b.n	8006856 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0220 	bic.w	r2, r2, #32
 8006854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7edb      	ldrb	r3, [r3, #27]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d108      	bne.n	8006870 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0210 	bic.w	r2, r2, #16
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e007      	b.n	8006880 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0210 	orr.w	r2, r2, #16
 800687e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7f1b      	ldrb	r3, [r3, #28]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d108      	bne.n	800689a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e007      	b.n	80068aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0208 	bic.w	r2, r2, #8
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7f5b      	ldrb	r3, [r3, #29]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d108      	bne.n	80068c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0204 	orr.w	r2, r2, #4
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e007      	b.n	80068d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	ea42 0103 	orr.w	r1, r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800692a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800692c:	7cfb      	ldrb	r3, [r7, #19]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d003      	beq.n	800693a <HAL_CAN_ConfigFilter+0x26>
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	2b02      	cmp	r3, #2
 8006936:	f040 80be 	bne.w	8006ab6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800693a:	4b65      	ldr	r3, [pc, #404]	; (8006ad0 <HAL_CAN_ConfigFilter+0x1bc>)
 800693c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006944:	f043 0201 	orr.w	r2, r3, #1
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006954:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	431a      	orrs	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	43db      	mvns	r3, r3
 800698c:	401a      	ands	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d123      	bne.n	80069e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80069be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3248      	adds	r2, #72	; 0x48
 80069c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80069d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	3348      	adds	r3, #72	; 0x48
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	440b      	add	r3, r1
 80069e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d122      	bne.n	8006a32 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006a0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3248      	adds	r2, #72	; 0x48
 8006a12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a28:	6979      	ldr	r1, [r7, #20]
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	440b      	add	r3, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	43db      	mvns	r3, r3
 8006a44:	401a      	ands	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006a4c:	e007      	b.n	8006a5e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	401a      	ands	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006a78:	e007      	b.n	8006a8a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006aa8:	f023 0201 	bic.w	r2, r3, #1
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e006      	b.n	8006ac4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40006400 	.word	0x40006400

08006ad4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d12e      	bne.n	8006b46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b00:	f7ff f8c8 	bl	8005c94 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b06:	e012      	b.n	8006b2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b08:	f7ff f8c4 	bl	8005c94 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b0a      	cmp	r3, #10
 8006b14:	d90b      	bls.n	8006b2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2205      	movs	r2, #5
 8006b26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e012      	b.n	8006b54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e006      	b.n	8006b54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
  }
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	; 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d003      	beq.n	8006b88 <HAL_CAN_AddTxMessage+0x2c>
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	f040 80b8 	bne.w	8006cf8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 80a0 	beq.w	8006ce8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d907      	bls.n	8006bc8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e09e      	b.n	8006d06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006bc8:	2201      	movs	r2, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10d      	bne.n	8006bf6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6809      	ldr	r1, [r1, #0]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	3318      	adds	r3, #24
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	440b      	add	r3, r1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e00f      	b.n	8006c16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006c00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006c0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	3318      	adds	r3, #24
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	440b      	add	r3, r1
 8006c14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	3318      	adds	r3, #24
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	440b      	add	r3, r1
 8006c26:	3304      	adds	r3, #4
 8006c28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7d1b      	ldrb	r3, [r3, #20]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d111      	bne.n	8006c56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	3318      	adds	r3, #24
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	3318      	adds	r3, #24
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	440b      	add	r3, r1
 8006c52:	3304      	adds	r3, #4
 8006c54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3307      	adds	r3, #7
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	061a      	lsls	r2, r3, #24
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3306      	adds	r3, #6
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3305      	adds	r3, #5
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	4313      	orrs	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	3204      	adds	r2, #4
 8006c76:	7812      	ldrb	r2, [r2, #0]
 8006c78:	4610      	mov	r0, r2
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6811      	ldr	r1, [r2, #0]
 8006c7e:	ea43 0200 	orr.w	r2, r3, r0
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	440b      	add	r3, r1
 8006c88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006c8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3303      	adds	r3, #3
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	061a      	lsls	r2, r3, #24
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3302      	adds	r3, #2
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	7812      	ldrb	r2, [r2, #0]
 8006cae:	4610      	mov	r0, r2
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	6811      	ldr	r1, [r2, #0]
 8006cb4:	ea43 0200 	orr.w	r2, r3, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006cc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	3318      	adds	r3, #24
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	4413      	add	r3, r2
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	6811      	ldr	r1, [r2, #0]
 8006cd6:	f043 0201 	orr.w	r2, r3, #1
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	3318      	adds	r3, #24
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	440b      	add	r3, r1
 8006ce2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e00e      	b.n	8006d06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e006      	b.n	8006d06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3724      	adds	r7, #36	; 0x24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d24:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d002      	beq.n	8006d32 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d11d      	bne.n	8006d6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d003      	beq.n	8006da0 <HAL_CAN_GetRxMessage+0x24>
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	f040 80f3 	bne.w	8006f86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10e      	bne.n	8006dc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d116      	bne.n	8006de2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0e7      	b.n	8006f94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d107      	bne.n	8006de2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0d8      	b.n	8006f94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	331b      	adds	r3, #27
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	4413      	add	r3, r2
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0204 	and.w	r2, r3, #4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10c      	bne.n	8006e1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	331b      	adds	r3, #27
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	4413      	add	r3, r2
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	0d5b      	lsrs	r3, r3, #21
 8006e10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e00b      	b.n	8006e32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	331b      	adds	r3, #27
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	4413      	add	r3, r2
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	331b      	adds	r3, #27
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0202 	and.w	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	331b      	adds	r3, #27
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	331b      	adds	r3, #27
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	331b      	adds	r3, #27
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	4413      	add	r3, r2
 8006e84:	3304      	adds	r3, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	0a1a      	lsrs	r2, r3, #8
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	0c1a      	lsrs	r2, r3, #16
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	0e1a      	lsrs	r2, r3, #24
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	3303      	adds	r3, #3
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	0a1a      	lsrs	r2, r3, #8
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	3305      	adds	r3, #5
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	0c1a      	lsrs	r2, r3, #16
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	3306      	adds	r3, #6
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	0e1a      	lsrs	r2, r3, #24
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	3307      	adds	r3, #7
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d108      	bne.n	8006f72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0220 	orr.w	r2, r2, #32
 8006f6e:	60da      	str	r2, [r3, #12]
 8006f70:	e007      	b.n	8006f82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0220 	orr.w	r2, r2, #32
 8006f80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e006      	b.n	8006f94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
  }
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d002      	beq.n	8006fbe <HAL_CAN_ActivateNotification+0x1e>
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d109      	bne.n	8006fd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6959      	ldr	r1, [r3, #20]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e006      	b.n	8006fe0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
  }
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ffc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d002      	beq.n	800700a <HAL_CAN_DeactivateNotification+0x1e>
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d10a      	bne.n	8007020 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6959      	ldr	r1, [r3, #20]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	43da      	mvns	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	400a      	ands	r2, r1
 800701a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e006      	b.n	800702e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
  }
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b08a      	sub	sp, #40	; 0x28
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d07c      	beq.n	800717a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d023      	beq.n	80070d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2201      	movs	r2, #1
 8007090:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f983 	bl	80073a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80070a2:	e016      	b.n	80070d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e00c      	b.n	80070d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ca:	e002      	b.n	80070d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f989 	bl	80073e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d024      	beq.n	8007126 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f963 	bl	80073bc <HAL_CAN_TxMailbox1CompleteCallback>
 80070f6:	e016      	b.n	8007126 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
 800710a:	e00c      	b.n	8007126 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
 800711e:	e002      	b.n	8007126 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f969 	bl	80073f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d024      	beq.n	800717a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f943 	bl	80073d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800714a:	e016      	b.n	800717a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d004      	beq.n	8007160 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e00c      	b.n	800717a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
 8007172:	e002      	b.n	800717a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f949 	bl	800740c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00c      	beq.n	800719e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007194:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2210      	movs	r2, #16
 800719c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d006      	beq.n	80071c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2208      	movs	r2, #8
 80071b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f930 	bl	8007420 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fb fe17 	bl	8002e0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00c      	beq.n	8007202 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2210      	movs	r2, #16
 8007200:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d006      	beq.n	8007224 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2208      	movs	r2, #8
 800721c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f908 	bl	8007434 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fb fe13 	bl	8002e68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	d006      	beq.n	8007264 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2210      	movs	r2, #16
 800725c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f8f2 	bl	8007448 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d006      	beq.n	8007286 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2208      	movs	r2, #8
 800727e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8eb 	bl	800745c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d07b      	beq.n	8007388 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d072      	beq.n	8007380 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	f043 0302 	orr.w	r3, r3, #2
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	f043 0304 	orr.w	r3, r3, #4
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d043      	beq.n	8007380 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d03e      	beq.n	8007380 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007308:	2b60      	cmp	r3, #96	; 0x60
 800730a:	d02b      	beq.n	8007364 <HAL_CAN_IRQHandler+0x32a>
 800730c:	2b60      	cmp	r3, #96	; 0x60
 800730e:	d82e      	bhi.n	800736e <HAL_CAN_IRQHandler+0x334>
 8007310:	2b50      	cmp	r3, #80	; 0x50
 8007312:	d022      	beq.n	800735a <HAL_CAN_IRQHandler+0x320>
 8007314:	2b50      	cmp	r3, #80	; 0x50
 8007316:	d82a      	bhi.n	800736e <HAL_CAN_IRQHandler+0x334>
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d019      	beq.n	8007350 <HAL_CAN_IRQHandler+0x316>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	d826      	bhi.n	800736e <HAL_CAN_IRQHandler+0x334>
 8007320:	2b30      	cmp	r3, #48	; 0x30
 8007322:	d010      	beq.n	8007346 <HAL_CAN_IRQHandler+0x30c>
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d822      	bhi.n	800736e <HAL_CAN_IRQHandler+0x334>
 8007328:	2b10      	cmp	r3, #16
 800732a:	d002      	beq.n	8007332 <HAL_CAN_IRQHandler+0x2f8>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d005      	beq.n	800733c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007330:	e01d      	b.n	800736e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	f043 0308 	orr.w	r3, r3, #8
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800733a:	e019      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	f043 0310 	orr.w	r3, r3, #16
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007344:	e014      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	f043 0320 	orr.w	r3, r3, #32
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800734e:	e00f      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007358:	e00a      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007362:	e005      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800736c:	e000      	b.n	8007370 <HAL_CAN_IRQHandler+0x336>
            break;
 800736e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800737e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2204      	movs	r2, #4
 8007386:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fb fe5e 	bl	800305c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80073a0:	bf00      	nop
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <__NVIC_SetPriorityGrouping+0x44>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800748c:	4013      	ands	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800749c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074a2:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <__NVIC_SetPriorityGrouping+0x44>)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	60d3      	str	r3, [r2, #12]
}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000ed00 	.word	0xe000ed00

080074b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <__NVIC_GetPriorityGrouping+0x18>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f003 0307 	and.w	r3, r3, #7
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	db0b      	blt.n	80074fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	f003 021f 	and.w	r2, r3, #31
 80074ec:	4907      	ldr	r1, [pc, #28]	; (800750c <__NVIC_EnableIRQ+0x38>)
 80074ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	2001      	movs	r0, #1
 80074f6:	fa00 f202 	lsl.w	r2, r0, r2
 80074fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	e000e100 	.word	0xe000e100

08007510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800751c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db0a      	blt.n	800753a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	490c      	ldr	r1, [pc, #48]	; (800755c <__NVIC_SetPriority+0x4c>)
 800752a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752e:	0112      	lsls	r2, r2, #4
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	440b      	add	r3, r1
 8007534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007538:	e00a      	b.n	8007550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4908      	ldr	r1, [pc, #32]	; (8007560 <__NVIC_SetPriority+0x50>)
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	3b04      	subs	r3, #4
 8007548:	0112      	lsls	r2, r2, #4
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	440b      	add	r3, r1
 800754e:	761a      	strb	r2, [r3, #24]
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	e000e100 	.word	0xe000e100
 8007560:	e000ed00 	.word	0xe000ed00

08007564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007564:	b480      	push	{r7}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f1c3 0307 	rsb	r3, r3, #7
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf28      	it	cs
 8007582:	2304      	movcs	r3, #4
 8007584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3304      	adds	r3, #4
 800758a:	2b06      	cmp	r3, #6
 800758c:	d902      	bls.n	8007594 <NVIC_EncodePriority+0x30>
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3b03      	subs	r3, #3
 8007592:	e000      	b.n	8007596 <NVIC_EncodePriority+0x32>
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	401a      	ands	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075ac:	f04f 31ff 	mov.w	r1, #4294967295
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	fa01 f303 	lsl.w	r3, r1, r3
 80075b6:	43d9      	mvns	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075bc:	4313      	orrs	r3, r2
         );
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3724      	adds	r7, #36	; 0x24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff ff4c 	bl	8007470 <__NVIC_SetPriorityGrouping>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075f2:	f7ff ff61 	bl	80074b8 <__NVIC_GetPriorityGrouping>
 80075f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	6978      	ldr	r0, [r7, #20]
 80075fe:	f7ff ffb1 	bl	8007564 <NVIC_EncodePriority>
 8007602:	4602      	mov	r2, r0
 8007604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ff80 	bl	8007510 <__NVIC_SetPriority>
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff ff54 	bl	80074d4 <__NVIC_EnableIRQ>
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007640:	f7fe fb28 	bl	8005c94 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e099      	b.n	8007784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007670:	e00f      	b.n	8007692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007672:	f7fe fb0f 	bl	8005c94 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b05      	cmp	r3, #5
 800767e:	d908      	bls.n	8007692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e078      	b.n	8007784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e8      	bne.n	8007672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4b38      	ldr	r3, [pc, #224]	; (800778c <HAL_DMA_Init+0x158>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d107      	bne.n	80076fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	4313      	orrs	r3, r2
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b04      	cmp	r3, #4
 8007724:	d117      	bne.n	8007756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fb01 	bl	8007d40 <DMA_CheckFifoParam>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007752:	2301      	movs	r3, #1
 8007754:	e016      	b.n	8007784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fab8 	bl	8007cd4 <DMA_CalcBaseAndBitshift>
 8007764:	4603      	mov	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	223f      	movs	r2, #63	; 0x3f
 800776e:	409a      	lsls	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	f010803f 	.word	0xf010803f

08007790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_DMA_Start_IT+0x26>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e040      	b.n	8007838 <HAL_DMA_Start_IT+0xa8>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d12f      	bne.n	800782a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fa4a 	bl	8007c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e8:	223f      	movs	r2, #63	; 0x3f
 80077ea:	409a      	lsls	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0216 	orr.w	r2, r2, #22
 80077fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e005      	b.n	8007836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800784e:	f7fe fa21 	bl	8005c94 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d008      	beq.n	8007872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e052      	b.n	8007918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0216 	bic.w	r2, r2, #22
 8007880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_DMA_Abort+0x62>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0208 	bic.w	r2, r2, #8
 80078b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078c2:	e013      	b.n	80078ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078c4:	f7fe f9e6 	bl	8005c94 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d90c      	bls.n	80078ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e015      	b.n	8007918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e4      	bne.n	80078c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	223f      	movs	r2, #63	; 0x3f
 8007900:	409a      	lsls	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d004      	beq.n	800793e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e00c      	b.n	8007958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2205      	movs	r2, #5
 8007942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007970:	4b8e      	ldr	r3, [pc, #568]	; (8007bac <HAL_DMA_IRQHandler+0x248>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a8e      	ldr	r2, [pc, #568]	; (8007bb0 <HAL_DMA_IRQHandler+0x24c>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a9b      	lsrs	r3, r3, #10
 800797c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798e:	2208      	movs	r2, #8
 8007990:	409a      	lsls	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0204 	bic.w	r2, r2, #4
 80079b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	2208      	movs	r2, #8
 80079be:	409a      	lsls	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c8:	f043 0201 	orr.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	2201      	movs	r2, #1
 80079d6:	409a      	lsls	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	2201      	movs	r2, #1
 80079f4:	409a      	lsls	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	f043 0202 	orr.w	r2, r3, #2
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d012      	beq.n	8007a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	2204      	movs	r2, #4
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	f043 0204 	orr.w	r2, r3, #4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a40:	2210      	movs	r2, #16
 8007a42:	409a      	lsls	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d043      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d03c      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	2210      	movs	r2, #16
 8007a60:	409a      	lsls	r2, r3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d024      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	e01f      	b.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01b      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4798      	blx	r3
 8007aa4:	e016      	b.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad8:	2220      	movs	r2, #32
 8007ada:	409a      	lsls	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 808f 	beq.w	8007c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8087 	beq.w	8007c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afa:	2220      	movs	r2, #32
 8007afc:	409a      	lsls	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d136      	bne.n	8007b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0216 	bic.w	r2, r2, #22
 8007b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <HAL_DMA_IRQHandler+0x1da>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0208 	bic.w	r2, r2, #8
 8007b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b52:	223f      	movs	r2, #63	; 0x3f
 8007b54:	409a      	lsls	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d07e      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
        }
        return;
 8007b7a:	e079      	b.n	8007c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01d      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d031      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
 8007ba8:	e02c      	b.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
 8007baa:	bf00      	nop
 8007bac:	20000000 	.word	0x20000000
 8007bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d023      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
 8007bc4:	e01e      	b.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10f      	bne.n	8007bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0210 	bic.w	r2, r2, #16
 8007be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d032      	beq.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d022      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d307      	bcc.n	8007c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f2      	bne.n	8007c30 <HAL_DMA_IRQHandler+0x2cc>
 8007c4a:	e000      	b.n	8007c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
 8007c6e:	e000      	b.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c70:	bf00      	nop
    }
  }
}
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d108      	bne.n	8007cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007cb6:	e007      	b.n	8007cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	60da      	str	r2, [r3, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	3b10      	subs	r3, #16
 8007ce4:	4a14      	ldr	r2, [pc, #80]	; (8007d38 <DMA_CalcBaseAndBitshift+0x64>)
 8007ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007cee:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <DMA_CalcBaseAndBitshift+0x68>)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d909      	bls.n	8007d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d0a:	f023 0303 	bic.w	r3, r3, #3
 8007d0e:	1d1a      	adds	r2, r3, #4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	659a      	str	r2, [r3, #88]	; 0x58
 8007d14:	e007      	b.n	8007d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	aaaaaaab 	.word	0xaaaaaaab
 8007d3c:	08012160 	.word	0x08012160

08007d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11f      	bne.n	8007d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d856      	bhi.n	8007e0e <DMA_CheckFifoParam+0xce>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <DMA_CheckFifoParam+0x28>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d8b 	.word	0x08007d8b
 8007d70:	08007d79 	.word	0x08007d79
 8007d74:	08007e0f 	.word	0x08007e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d046      	beq.n	8007e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d88:	e043      	b.n	8007e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d92:	d140      	bne.n	8007e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d98:	e03d      	b.n	8007e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	d121      	bne.n	8007de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d837      	bhi.n	8007e1a <DMA_CheckFifoParam+0xda>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <DMA_CheckFifoParam+0x70>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc1 	.word	0x08007dc1
 8007db4:	08007dc7 	.word	0x08007dc7
 8007db8:	08007dc1 	.word	0x08007dc1
 8007dbc:	08007dd9 	.word	0x08007dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc4:	e030      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d025      	beq.n	8007e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd6:	e022      	b.n	8007e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007de0:	d11f      	bne.n	8007e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007de6:	e01c      	b.n	8007e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d903      	bls.n	8007df6 <DMA_CheckFifoParam+0xb6>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d003      	beq.n	8007dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007df4:	e018      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfa:	e015      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e00b      	b.n	8007e26 <DMA_CheckFifoParam+0xe6>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e00a      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e12:	bf00      	nop
 8007e14:	e008      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e16:	bf00      	nop
 8007e18:	e006      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e004      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e26:	bf00      	nop
    }
  } 
  
  return status; 
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	; 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	e16b      	b.n	800812c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e54:	2201      	movs	r2, #1
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4013      	ands	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	f040 815a 	bne.w	8008126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d005      	beq.n	8007e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d130      	bne.n	8007eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	2203      	movs	r2, #3
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	43db      	mvns	r3, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 0201 	and.w	r2, r3, #1
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d017      	beq.n	8007f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	2203      	movs	r2, #3
 8007f04:	fa02 f303 	lsl.w	r3, r2, r3
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d123      	bne.n	8007f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	08da      	lsrs	r2, r3, #3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3208      	adds	r2, #8
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	220f      	movs	r2, #15
 8007f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f50:	43db      	mvns	r3, r3
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	4013      	ands	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	08da      	lsrs	r2, r3, #3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3208      	adds	r2, #8
 8007f76:	69b9      	ldr	r1, [r7, #24]
 8007f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	2203      	movs	r2, #3
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4013      	ands	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f003 0203 	and.w	r2, r3, #3
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80b4 	beq.w	8008126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	4b60      	ldr	r3, [pc, #384]	; (8008144 <HAL_GPIO_Init+0x30c>)
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	4a5f      	ldr	r2, [pc, #380]	; (8008144 <HAL_GPIO_Init+0x30c>)
 8007fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8007fce:	4b5d      	ldr	r3, [pc, #372]	; (8008144 <HAL_GPIO_Init+0x30c>)
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fda:	4a5b      	ldr	r2, [pc, #364]	; (8008148 <HAL_GPIO_Init+0x310>)
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	089b      	lsrs	r3, r3, #2
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	220f      	movs	r2, #15
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a52      	ldr	r2, [pc, #328]	; (800814c <HAL_GPIO_Init+0x314>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d02b      	beq.n	800805e <HAL_GPIO_Init+0x226>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a51      	ldr	r2, [pc, #324]	; (8008150 <HAL_GPIO_Init+0x318>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d025      	beq.n	800805a <HAL_GPIO_Init+0x222>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a50      	ldr	r2, [pc, #320]	; (8008154 <HAL_GPIO_Init+0x31c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01f      	beq.n	8008056 <HAL_GPIO_Init+0x21e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a4f      	ldr	r2, [pc, #316]	; (8008158 <HAL_GPIO_Init+0x320>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d019      	beq.n	8008052 <HAL_GPIO_Init+0x21a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a4e      	ldr	r2, [pc, #312]	; (800815c <HAL_GPIO_Init+0x324>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d013      	beq.n	800804e <HAL_GPIO_Init+0x216>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a4d      	ldr	r2, [pc, #308]	; (8008160 <HAL_GPIO_Init+0x328>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00d      	beq.n	800804a <HAL_GPIO_Init+0x212>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a4c      	ldr	r2, [pc, #304]	; (8008164 <HAL_GPIO_Init+0x32c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <HAL_GPIO_Init+0x20e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a4b      	ldr	r2, [pc, #300]	; (8008168 <HAL_GPIO_Init+0x330>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d101      	bne.n	8008042 <HAL_GPIO_Init+0x20a>
 800803e:	2307      	movs	r3, #7
 8008040:	e00e      	b.n	8008060 <HAL_GPIO_Init+0x228>
 8008042:	2308      	movs	r3, #8
 8008044:	e00c      	b.n	8008060 <HAL_GPIO_Init+0x228>
 8008046:	2306      	movs	r3, #6
 8008048:	e00a      	b.n	8008060 <HAL_GPIO_Init+0x228>
 800804a:	2305      	movs	r3, #5
 800804c:	e008      	b.n	8008060 <HAL_GPIO_Init+0x228>
 800804e:	2304      	movs	r3, #4
 8008050:	e006      	b.n	8008060 <HAL_GPIO_Init+0x228>
 8008052:	2303      	movs	r3, #3
 8008054:	e004      	b.n	8008060 <HAL_GPIO_Init+0x228>
 8008056:	2302      	movs	r3, #2
 8008058:	e002      	b.n	8008060 <HAL_GPIO_Init+0x228>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <HAL_GPIO_Init+0x228>
 800805e:	2300      	movs	r3, #0
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	f002 0203 	and.w	r2, r2, #3
 8008066:	0092      	lsls	r2, r2, #2
 8008068:	4093      	lsls	r3, r2
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008070:	4935      	ldr	r1, [pc, #212]	; (8008148 <HAL_GPIO_Init+0x310>)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	3302      	adds	r3, #2
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800807e:	4b3b      	ldr	r3, [pc, #236]	; (800816c <HAL_GPIO_Init+0x334>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	43db      	mvns	r3, r3
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	4013      	ands	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080a2:	4a32      	ldr	r2, [pc, #200]	; (800816c <HAL_GPIO_Init+0x334>)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080a8:	4b30      	ldr	r3, [pc, #192]	; (800816c <HAL_GPIO_Init+0x334>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080cc:	4a27      	ldr	r2, [pc, #156]	; (800816c <HAL_GPIO_Init+0x334>)
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080d2:	4b26      	ldr	r3, [pc, #152]	; (800816c <HAL_GPIO_Init+0x334>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	43db      	mvns	r3, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4013      	ands	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080f6:	4a1d      	ldr	r2, [pc, #116]	; (800816c <HAL_GPIO_Init+0x334>)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080fc:	4b1b      	ldr	r3, [pc, #108]	; (800816c <HAL_GPIO_Init+0x334>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	43db      	mvns	r3, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	4013      	ands	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4313      	orrs	r3, r2
 800811e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008120:	4a12      	ldr	r2, [pc, #72]	; (800816c <HAL_GPIO_Init+0x334>)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3301      	adds	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2b0f      	cmp	r3, #15
 8008130:	f67f ae90 	bls.w	8007e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	3724      	adds	r7, #36	; 0x24
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40023800 	.word	0x40023800
 8008148:	40013800 	.word	0x40013800
 800814c:	40020000 	.word	0x40020000
 8008150:	40020400 	.word	0x40020400
 8008154:	40020800 	.word	0x40020800
 8008158:	40020c00 	.word	0x40020c00
 800815c:	40021000 	.word	0x40021000
 8008160:	40021400 	.word	0x40021400
 8008164:	40021800 	.word	0x40021800
 8008168:	40021c00 	.word	0x40021c00
 800816c:	40013c00 	.word	0x40013c00

08008170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691a      	ldr	r2, [r3, #16]
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e001      	b.n	8008192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	807b      	strh	r3, [r7, #2]
 80081ac:	4613      	mov	r3, r2
 80081ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081b0:	787b      	ldrb	r3, [r7, #1]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081b6:	887a      	ldrh	r2, [r7, #2]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80081bc:	e003      	b.n	80081c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	041a      	lsls	r2, r3, #16
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	619a      	str	r2, [r3, #24]
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e267      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d075      	beq.n	80082de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081f2:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 030c 	and.w	r3, r3, #12
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d00c      	beq.n	8008218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081fe:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008206:	2b08      	cmp	r3, #8
 8008208:	d112      	bne.n	8008230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800820a:	4b82      	ldr	r3, [pc, #520]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008216:	d10b      	bne.n	8008230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008218:	4b7e      	ldr	r3, [pc, #504]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d05b      	beq.n	80082dc <HAL_RCC_OscConfig+0x108>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d157      	bne.n	80082dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e242      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d106      	bne.n	8008248 <HAL_RCC_OscConfig+0x74>
 800823a:	4b76      	ldr	r3, [pc, #472]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a75      	ldr	r2, [pc, #468]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e01d      	b.n	8008284 <HAL_RCC_OscConfig+0xb0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008250:	d10c      	bne.n	800826c <HAL_RCC_OscConfig+0x98>
 8008252:	4b70      	ldr	r3, [pc, #448]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a6f      	ldr	r2, [pc, #444]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a6c      	ldr	r2, [pc, #432]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e00b      	b.n	8008284 <HAL_RCC_OscConfig+0xb0>
 800826c:	4b69      	ldr	r3, [pc, #420]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a68      	ldr	r2, [pc, #416]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4b66      	ldr	r3, [pc, #408]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a65      	ldr	r2, [pc, #404]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800827e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d013      	beq.n	80082b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828c:	f7fd fd02 	bl	8005c94 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008294:	f7fd fcfe 	bl	8005c94 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b64      	cmp	r3, #100	; 0x64
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e207      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a6:	4b5b      	ldr	r3, [pc, #364]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f0      	beq.n	8008294 <HAL_RCC_OscConfig+0xc0>
 80082b2:	e014      	b.n	80082de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fd fcee 	bl	8005c94 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082bc:	f7fd fcea 	bl	8005c94 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e1f3      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ce:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0xe8>
 80082da:	e000      	b.n	80082de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d063      	beq.n	80083b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082ea:	4b4a      	ldr	r3, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082f6:	4b47      	ldr	r3, [pc, #284]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d11c      	bne.n	800833c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008302:	4b44      	ldr	r3, [pc, #272]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d116      	bne.n	800833c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830e:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_RCC_OscConfig+0x152>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d001      	beq.n	8008326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e1c7      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008326:	4b3b      	ldr	r3, [pc, #236]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4937      	ldr	r1, [pc, #220]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008336:	4313      	orrs	r3, r2
 8008338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833a:	e03a      	b.n	80083b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d020      	beq.n	8008386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008344:	4b34      	ldr	r3, [pc, #208]	; (8008418 <HAL_RCC_OscConfig+0x244>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834a:	f7fd fca3 	bl	8005c94 <HAL_GetTick>
 800834e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008350:	e008      	b.n	8008364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008352:	f7fd fc9f 	bl	8005c94 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e1a8      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008364:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f0      	beq.n	8008352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4925      	ldr	r1, [pc, #148]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008380:	4313      	orrs	r3, r2
 8008382:	600b      	str	r3, [r1, #0]
 8008384:	e015      	b.n	80083b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <HAL_RCC_OscConfig+0x244>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fd fc82 	bl	8005c94 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008394:	f7fd fc7e 	bl	8005c94 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e187      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083a6:	4b1b      	ldr	r3, [pc, #108]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d036      	beq.n	800842c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <HAL_RCC_OscConfig+0x248>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fd fc62 	bl	8005c94 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d4:	f7fd fc5e 	bl	8005c94 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e167      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80083e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0f0      	beq.n	80083d4 <HAL_RCC_OscConfig+0x200>
 80083f2:	e01b      	b.n	800842c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_RCC_OscConfig+0x248>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083fa:	f7fd fc4b 	bl	8005c94 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008400:	e00e      	b.n	8008420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008402:	f7fd fc47 	bl	8005c94 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d907      	bls.n	8008420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e150      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
 8008414:	40023800 	.word	0x40023800
 8008418:	42470000 	.word	0x42470000
 800841c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008420:	4b88      	ldr	r3, [pc, #544]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1ea      	bne.n	8008402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8097 	beq.w	8008568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800843e:	4b81      	ldr	r3, [pc, #516]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10f      	bne.n	800846a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800844a:	2300      	movs	r3, #0
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	4b7d      	ldr	r3, [pc, #500]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	4a7c      	ldr	r2, [pc, #496]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008458:	6413      	str	r3, [r2, #64]	; 0x40
 800845a:	4b7a      	ldr	r3, [pc, #488]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008466:	2301      	movs	r3, #1
 8008468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800846a:	4b77      	ldr	r3, [pc, #476]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d118      	bne.n	80084a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008476:	4b74      	ldr	r3, [pc, #464]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a73      	ldr	r2, [pc, #460]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800847c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008482:	f7fd fc07 	bl	8005c94 <HAL_GetTick>
 8008486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008488:	e008      	b.n	800849c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848a:	f7fd fc03 	bl	8005c94 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e10c      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800849c:	4b6a      	ldr	r3, [pc, #424]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d106      	bne.n	80084be <HAL_RCC_OscConfig+0x2ea>
 80084b0:	4b64      	ldr	r3, [pc, #400]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b4:	4a63      	ldr	r2, [pc, #396]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	6713      	str	r3, [r2, #112]	; 0x70
 80084bc:	e01c      	b.n	80084f8 <HAL_RCC_OscConfig+0x324>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0x30c>
 80084c6:	4b5f      	ldr	r3, [pc, #380]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	4a5e      	ldr	r2, [pc, #376]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	6713      	str	r3, [r2, #112]	; 0x70
 80084d2:	4b5c      	ldr	r3, [pc, #368]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	4a5b      	ldr	r2, [pc, #364]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084d8:	f043 0301 	orr.w	r3, r3, #1
 80084dc:	6713      	str	r3, [r2, #112]	; 0x70
 80084de:	e00b      	b.n	80084f8 <HAL_RCC_OscConfig+0x324>
 80084e0:	4b58      	ldr	r3, [pc, #352]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	4a57      	ldr	r2, [pc, #348]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084e6:	f023 0301 	bic.w	r3, r3, #1
 80084ea:	6713      	str	r3, [r2, #112]	; 0x70
 80084ec:	4b55      	ldr	r3, [pc, #340]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	4a54      	ldr	r2, [pc, #336]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084f2:	f023 0304 	bic.w	r3, r3, #4
 80084f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d015      	beq.n	800852c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008500:	f7fd fbc8 	bl	8005c94 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008506:	e00a      	b.n	800851e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008508:	f7fd fbc4 	bl	8005c94 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	; 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e0cb      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800851e:	4b49      	ldr	r3, [pc, #292]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ee      	beq.n	8008508 <HAL_RCC_OscConfig+0x334>
 800852a:	e014      	b.n	8008556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800852c:	f7fd fbb2 	bl	8005c94 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008532:	e00a      	b.n	800854a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008534:	f7fd fbae 	bl	8005c94 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e0b5      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800854a:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1ee      	bne.n	8008534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d105      	bne.n	8008568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800855c:	4b39      	ldr	r3, [pc, #228]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	4a38      	ldr	r2, [pc, #224]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a1 	beq.w	80086b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008572:	4b34      	ldr	r3, [pc, #208]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b08      	cmp	r3, #8
 800857c:	d05c      	beq.n	8008638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d141      	bne.n	800860a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b31      	ldr	r3, [pc, #196]	; (800864c <HAL_RCC_OscConfig+0x478>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858c:	f7fd fb82 	bl	8005c94 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008594:	f7fd fb7e 	bl	8005c94 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e087      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a6:	4b27      	ldr	r3, [pc, #156]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	019b      	lsls	r3, r3, #6
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	3b01      	subs	r3, #1
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	061b      	lsls	r3, r3, #24
 80085d6:	491b      	ldr	r1, [pc, #108]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <HAL_RCC_OscConfig+0x478>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e2:	f7fd fb57 	bl	8005c94 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ea:	f7fd fb53 	bl	8005c94 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e05c      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCC_OscConfig+0x416>
 8008608:	e054      	b.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_RCC_OscConfig+0x478>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fd fb40 	bl	8005c94 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008618:	f7fd fb3c 	bl	8005c94 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e045      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0x444>
 8008636:	e03d      	b.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d107      	bne.n	8008650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e038      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
 8008644:	40023800 	.word	0x40023800
 8008648:	40007000 	.word	0x40007000
 800864c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008650:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_RCC_OscConfig+0x4ec>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d028      	beq.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d121      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008676:	429a      	cmp	r2, r3
 8008678:	d11a      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008688:	4293      	cmp	r3, r2
 800868a:	d111      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	3b01      	subs	r3, #1
 800869a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d107      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d001      	beq.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40023800 	.word	0x40023800

080086c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0cc      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086d8:	4b68      	ldr	r3, [pc, #416]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90c      	bls.n	8008700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086e6:	4b65      	ldr	r3, [pc, #404]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ee:	4b63      	ldr	r3, [pc, #396]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0b8      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d020      	beq.n	800874e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008718:	4b59      	ldr	r3, [pc, #356]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4a58      	ldr	r2, [pc, #352]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008730:	4b53      	ldr	r3, [pc, #332]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4a52      	ldr	r2, [pc, #328]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800873a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800873c:	4b50      	ldr	r3, [pc, #320]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	494d      	ldr	r1, [pc, #308]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	4313      	orrs	r3, r2
 800874c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d044      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d107      	bne.n	8008772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008762:	4b47      	ldr	r3, [pc, #284]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d119      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e07f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d003      	beq.n	8008782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800877e:	2b03      	cmp	r3, #3
 8008780:	d107      	bne.n	8008792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008782:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e06f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008792:	4b3b      	ldr	r3, [pc, #236]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e067      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087a2:	4b37      	ldr	r3, [pc, #220]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f023 0203 	bic.w	r2, r3, #3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4934      	ldr	r1, [pc, #208]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087b4:	f7fd fa6e 	bl	8005c94 <HAL_GetTick>
 80087b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ba:	e00a      	b.n	80087d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087bc:	f7fd fa6a 	bl	8005c94 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e04f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d2:	4b2b      	ldr	r3, [pc, #172]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 020c 	and.w	r2, r3, #12
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d1eb      	bne.n	80087bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087e4:	4b25      	ldr	r3, [pc, #148]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d20c      	bcs.n	800880c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b22      	ldr	r3, [pc, #136]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fa:	4b20      	ldr	r3, [pc, #128]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e032      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008818:	4b19      	ldr	r3, [pc, #100]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	4916      	ldr	r1, [pc, #88]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	4313      	orrs	r3, r2
 8008828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	490e      	ldr	r1, [pc, #56]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	4313      	orrs	r3, r2
 8008848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800884a:	f000 f821 	bl	8008890 <HAL_RCC_GetSysClockFreq>
 800884e:	4602      	mov	r2, r0
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	091b      	lsrs	r3, r3, #4
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	490a      	ldr	r1, [pc, #40]	; (8008884 <HAL_RCC_ClockConfig+0x1c0>)
 800885c:	5ccb      	ldrb	r3, [r1, r3]
 800885e:	fa22 f303 	lsr.w	r3, r2, r3
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <HAL_RCC_ClockConfig+0x1c4>)
 8008864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_RCC_ClockConfig+0x1c8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7fc ffe4 	bl	8005838 <HAL_InitTick>

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40023c00 	.word	0x40023c00
 8008880:	40023800 	.word	0x40023800
 8008884:	08012148 	.word	0x08012148
 8008888:	20000000 	.word	0x20000000
 800888c:	20000004 	.word	0x20000004

08008890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008894:	b094      	sub	sp, #80	; 0x50
 8008896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
 800889c:	2300      	movs	r3, #0
 800889e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a0:	2300      	movs	r3, #0
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a8:	4b79      	ldr	r3, [pc, #484]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f003 030c 	and.w	r3, r3, #12
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d00d      	beq.n	80088d0 <HAL_RCC_GetSysClockFreq+0x40>
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	f200 80e1 	bhi.w	8008a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <HAL_RCC_GetSysClockFreq+0x34>
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d003      	beq.n	80088ca <HAL_RCC_GetSysClockFreq+0x3a>
 80088c2:	e0db      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088c4:	4b73      	ldr	r3, [pc, #460]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80088c8:	e0db      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088ca:	4b73      	ldr	r3, [pc, #460]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80088cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088ce:	e0d8      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088d0:	4b6f      	ldr	r3, [pc, #444]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088da:	4b6d      	ldr	r3, [pc, #436]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d063      	beq.n	80089ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088e6:	4b6a      	ldr	r3, [pc, #424]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	099b      	lsrs	r3, r3, #6
 80088ec:	2200      	movs	r2, #0
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	633b      	str	r3, [r7, #48]	; 0x30
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
 80088fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008902:	4622      	mov	r2, r4
 8008904:	462b      	mov	r3, r5
 8008906:	f04f 0000 	mov.w	r0, #0
 800890a:	f04f 0100 	mov.w	r1, #0
 800890e:	0159      	lsls	r1, r3, #5
 8008910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008914:	0150      	lsls	r0, r2, #5
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4621      	mov	r1, r4
 800891c:	1a51      	subs	r1, r2, r1
 800891e:	6139      	str	r1, [r7, #16]
 8008920:	4629      	mov	r1, r5
 8008922:	eb63 0301 	sbc.w	r3, r3, r1
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008934:	4659      	mov	r1, fp
 8008936:	018b      	lsls	r3, r1, #6
 8008938:	4651      	mov	r1, sl
 800893a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800893e:	4651      	mov	r1, sl
 8008940:	018a      	lsls	r2, r1, #6
 8008942:	4651      	mov	r1, sl
 8008944:	ebb2 0801 	subs.w	r8, r2, r1
 8008948:	4659      	mov	r1, fp
 800894a:	eb63 0901 	sbc.w	r9, r3, r1
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	f04f 0300 	mov.w	r3, #0
 8008956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800895a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800895e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008962:	4690      	mov	r8, r2
 8008964:	4699      	mov	r9, r3
 8008966:	4623      	mov	r3, r4
 8008968:	eb18 0303 	adds.w	r3, r8, r3
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	462b      	mov	r3, r5
 8008970:	eb49 0303 	adc.w	r3, r9, r3
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008982:	4629      	mov	r1, r5
 8008984:	024b      	lsls	r3, r1, #9
 8008986:	4621      	mov	r1, r4
 8008988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800898c:	4621      	mov	r1, r4
 800898e:	024a      	lsls	r2, r1, #9
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008996:	2200      	movs	r2, #0
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
 800899a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800899c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089a0:	f7f8 f952 	bl	8000c48 <__aeabi_uldivmod>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4613      	mov	r3, r2
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ac:	e058      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ae:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	099b      	lsrs	r3, r3, #6
 80089b4:	2200      	movs	r2, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	4611      	mov	r1, r2
 80089ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089be:	623b      	str	r3, [r7, #32]
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	f04f 0000 	mov.w	r0, #0
 80089d0:	f04f 0100 	mov.w	r1, #0
 80089d4:	0159      	lsls	r1, r3, #5
 80089d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089da:	0150      	lsls	r0, r2, #5
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4641      	mov	r1, r8
 80089e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80089e6:	4649      	mov	r1, r9
 80089e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80089f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80089fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a00:	ebb2 040a 	subs.w	r4, r2, sl
 8008a04:	eb63 050b 	sbc.w	r5, r3, fp
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	00eb      	lsls	r3, r5, #3
 8008a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a16:	00e2      	lsls	r2, r4, #3
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	4643      	mov	r3, r8
 8008a1e:	18e3      	adds	r3, r4, r3
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	464b      	mov	r3, r9
 8008a24:	eb45 0303 	adc.w	r3, r5, r3
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a36:	4629      	mov	r1, r5
 8008a38:	028b      	lsls	r3, r1, #10
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a40:	4621      	mov	r1, r4
 8008a42:	028a      	lsls	r2, r1, #10
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
 8008a4e:	61fa      	str	r2, [r7, #28]
 8008a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a54:	f7f8 f8f8 	bl	8000c48 <__aeabi_uldivmod>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	0c1b      	lsrs	r3, r3, #16
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a7a:	e002      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3750      	adds	r7, #80	; 0x50
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a8e:	bf00      	nop
 8008a90:	40023800 	.word	0x40023800
 8008a94:	00f42400 	.word	0x00f42400
 8008a98:	007a1200 	.word	0x007a1200

08008a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008aa0:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000000 	.word	0x20000000

08008ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ab8:	f7ff fff0 	bl	8008a9c <HAL_RCC_GetHCLKFreq>
 8008abc:	4602      	mov	r2, r0
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	0a9b      	lsrs	r3, r3, #10
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	4903      	ldr	r1, [pc, #12]	; (8008ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aca:	5ccb      	ldrb	r3, [r1, r3]
 8008acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	08012158 	.word	0x08012158

08008adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ae0:	f7ff ffdc 	bl	8008a9c <HAL_RCC_GetHCLKFreq>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	0b5b      	lsrs	r3, r3, #13
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	4903      	ldr	r1, [pc, #12]	; (8008b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008af2:	5ccb      	ldrb	r3, [r1, r3]
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40023800 	.word	0x40023800
 8008b00:	08012158 	.word	0x08012158

08008b04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	220f      	movs	r2, #15
 8008b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b14:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <HAL_RCC_GetClockConfig+0x5c>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0203 	and.w	r2, r3, #3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b20:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <HAL_RCC_GetClockConfig+0x5c>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <HAL_RCC_GetClockConfig+0x5c>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <HAL_RCC_GetClockConfig+0x5c>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	08db      	lsrs	r3, r3, #3
 8008b3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b46:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <HAL_RCC_GetClockConfig+0x60>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0207 	and.w	r2, r3, #7
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	40023800 	.word	0x40023800
 8008b64:	40023c00 	.word	0x40023c00

08008b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e041      	b.n	8008bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d106      	bne.n	8008b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7fc fc56 	bl	8005440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f000 fdae 	bl	8009708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d001      	beq.n	8008c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e04e      	b.n	8008cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a23      	ldr	r2, [pc, #140]	; (8008ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d022      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d01d      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d018      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a1e      	ldr	r2, [pc, #120]	; (8008cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1c      	ldr	r2, [pc, #112]	; (8008cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00e      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1b      	ldr	r2, [pc, #108]	; (8008cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d009      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a19      	ldr	r2, [pc, #100]	; (8008ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIM_Base_Start_IT+0x80>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d111      	bne.n	8008cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b06      	cmp	r3, #6
 8008c98:	d010      	beq.n	8008cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0201 	orr.w	r2, r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008caa:	e007      	b.n	8008cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40010400 	.word	0x40010400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40001800 	.word	0x40001800

08008ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e041      	b.n	8008d7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f839 	bl	8008d86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f000 fcee 	bl	8009708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d109      	bne.n	8008dc0 <HAL_TIM_PWM_Start+0x24>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e022      	b.n	8008e06 <HAL_TIM_PWM_Start+0x6a>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d109      	bne.n	8008dda <HAL_TIM_PWM_Start+0x3e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	bf14      	ite	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e015      	b.n	8008e06 <HAL_TIM_PWM_Start+0x6a>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d109      	bne.n	8008df4 <HAL_TIM_PWM_Start+0x58>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	bf14      	ite	ne
 8008dec:	2301      	movne	r3, #1
 8008dee:	2300      	moveq	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	e008      	b.n	8008e06 <HAL_TIM_PWM_Start+0x6a>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	bf14      	ite	ne
 8008e00:	2301      	movne	r3, #1
 8008e02:	2300      	moveq	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e07c      	b.n	8008f08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_PWM_Start+0x82>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e1c:	e013      	b.n	8008e46 <HAL_TIM_PWM_Start+0xaa>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <HAL_TIM_PWM_Start+0x92>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e2c:	e00b      	b.n	8008e46 <HAL_TIM_PWM_Start+0xaa>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d104      	bne.n	8008e3e <HAL_TIM_PWM_Start+0xa2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e3c:	e003      	b.n	8008e46 <HAL_TIM_PWM_Start+0xaa>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2202      	movs	r2, #2
 8008e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 ff44 	bl	8009cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a2d      	ldr	r2, [pc, #180]	; (8008f10 <HAL_TIM_PWM_Start+0x174>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_TIM_PWM_Start+0xcc>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a2c      	ldr	r2, [pc, #176]	; (8008f14 <HAL_TIM_PWM_Start+0x178>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d101      	bne.n	8008e6c <HAL_TIM_PWM_Start+0xd0>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <HAL_TIM_PWM_Start+0xd2>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a22      	ldr	r2, [pc, #136]	; (8008f10 <HAL_TIM_PWM_Start+0x174>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e94:	d01d      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1f      	ldr	r2, [pc, #124]	; (8008f18 <HAL_TIM_PWM_Start+0x17c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d018      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1d      	ldr	r2, [pc, #116]	; (8008f1c <HAL_TIM_PWM_Start+0x180>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <HAL_TIM_PWM_Start+0x184>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <HAL_TIM_PWM_Start+0x178>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_TIM_PWM_Start+0x188>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIM_PWM_Start+0x136>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a16      	ldr	r2, [pc, #88]	; (8008f28 <HAL_TIM_PWM_Start+0x18c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d111      	bne.n	8008ef6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b06      	cmp	r3, #6
 8008ee2:	d010      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef4:	e007      	b.n	8008f06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40010000 	.word	0x40010000
 8008f14:	40010400 	.word	0x40010400
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40014000 	.word	0x40014000
 8008f28:	40001800 	.word	0x40001800

08008f2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e097      	b.n	8009070 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fc f9cf 	bl	80052f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6812      	ldr	r2, [r2, #0]
 8008f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f70:	f023 0307 	bic.w	r3, r3, #7
 8008f74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f000 fbc1 	bl	8009708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008fcc:	f023 030c 	bic.w	r3, r3, #12
 8008fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	011a      	lsls	r2, r3, #4
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	031b      	lsls	r3, r3, #12
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009012:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4313      	orrs	r3, r2
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009088:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009090:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009098:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d110      	bne.n	80090ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d102      	bne.n	80090b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80090ae:	7b7b      	ldrb	r3, [r7, #13]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d001      	beq.n	80090b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e069      	b.n	800918c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c8:	e031      	b.n	800912e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d110      	bne.n	80090f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d102      	bne.n	80090dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090d6:	7b3b      	ldrb	r3, [r7, #12]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d001      	beq.n	80090e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e055      	b.n	800918c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090f0:	e01d      	b.n	800912e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d108      	bne.n	800910a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d105      	bne.n	800910a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090fe:	7b7b      	ldrb	r3, [r7, #13]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d102      	bne.n	800910a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009104:	7b3b      	ldrb	r3, [r7, #12]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d001      	beq.n	800910e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e03e      	b.n	800918c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2202      	movs	r2, #2
 800911a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2202      	movs	r2, #2
 8009122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2202      	movs	r2, #2
 800912a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_TIM_Encoder_Start+0xc4>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b04      	cmp	r3, #4
 8009138:	d008      	beq.n	800914c <HAL_TIM_Encoder_Start+0xd4>
 800913a:	e00f      	b.n	800915c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2201      	movs	r2, #1
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fdc9 	bl	8009cdc <TIM_CCxChannelCmd>
      break;
 800914a:	e016      	b.n	800917a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	2104      	movs	r1, #4
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fdc1 	bl	8009cdc <TIM_CCxChannelCmd>
      break;
 800915a:	e00e      	b.n	800917a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2201      	movs	r2, #1
 8009162:	2100      	movs	r1, #0
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fdb9 	bl	8009cdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	2104      	movs	r1, #4
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fdb2 	bl	8009cdc <TIM_CCxChannelCmd>
      break;
 8009178:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0201 	orr.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d122      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d11b      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f06f 0202 	mvn.w	r2, #2
 80091c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa77 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 80091dc:	e005      	b.n	80091ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa69 	bl	80096b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fa7a 	bl	80096de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d122      	bne.n	8009244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b04      	cmp	r3, #4
 800920a:	d11b      	bne.n	8009244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0204 	mvn.w	r2, #4
 8009214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2202      	movs	r2, #2
 800921a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa4d 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa3f 	bl	80096b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa50 	bl	80096de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b08      	cmp	r3, #8
 8009250:	d122      	bne.n	8009298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b08      	cmp	r3, #8
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0208 	mvn.w	r2, #8
 8009268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2204      	movs	r2, #4
 800926e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa23 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa15 	bl	80096b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa26 	bl	80096de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0210 	mvn.w	r2, #16
 80092bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2208      	movs	r2, #8
 80092c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9f9 	bl	80096ca <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9eb 	bl	80096b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9fc 	bl	80096de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d10e      	bne.n	8009318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b01      	cmp	r3, #1
 8009306:	d107      	bne.n	8009318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0201 	mvn.w	r2, #1
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7fb ff08 	bl	8005128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009322:	2b80      	cmp	r3, #128	; 0x80
 8009324:	d10e      	bne.n	8009344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b80      	cmp	r3, #128	; 0x80
 8009332:	d107      	bne.n	8009344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800933c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fd78 	bl	8009e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d10e      	bne.n	8009370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d107      	bne.n	8009370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9c1 	bl	80096f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b20      	cmp	r3, #32
 800937c:	d10e      	bne.n	800939c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b20      	cmp	r3, #32
 800938a:	d107      	bne.n	800939c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0220 	mvn.w	r2, #32
 8009394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fd42 	bl	8009e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093be:	2302      	movs	r3, #2
 80093c0:	e0ae      	b.n	8009520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b0c      	cmp	r3, #12
 80093ce:	f200 809f 	bhi.w	8009510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	0800940d 	.word	0x0800940d
 80093dc:	08009511 	.word	0x08009511
 80093e0:	08009511 	.word	0x08009511
 80093e4:	08009511 	.word	0x08009511
 80093e8:	0800944d 	.word	0x0800944d
 80093ec:	08009511 	.word	0x08009511
 80093f0:	08009511 	.word	0x08009511
 80093f4:	08009511 	.word	0x08009511
 80093f8:	0800948f 	.word	0x0800948f
 80093fc:	08009511 	.word	0x08009511
 8009400:	08009511 	.word	0x08009511
 8009404:	08009511 	.word	0x08009511
 8009408:	080094cf 	.word	0x080094cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fa18 	bl	8009848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0208 	orr.w	r2, r2, #8
 8009426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0204 	bic.w	r2, r2, #4
 8009436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6999      	ldr	r1, [r3, #24]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	691a      	ldr	r2, [r3, #16]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	619a      	str	r2, [r3, #24]
      break;
 800944a:	e064      	b.n	8009516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fa68 	bl	8009928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699a      	ldr	r2, [r3, #24]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6999      	ldr	r1, [r3, #24]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	021a      	lsls	r2, r3, #8
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	619a      	str	r2, [r3, #24]
      break;
 800948c:	e043      	b.n	8009516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fabd 	bl	8009a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0208 	orr.w	r2, r2, #8
 80094a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69da      	ldr	r2, [r3, #28]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0204 	bic.w	r2, r2, #4
 80094b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69d9      	ldr	r1, [r3, #28]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	61da      	str	r2, [r3, #28]
      break;
 80094cc:	e023      	b.n	8009516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fb11 	bl	8009afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69da      	ldr	r2, [r3, #28]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69d9      	ldr	r1, [r3, #28]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	021a      	lsls	r2, r3, #8
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	61da      	str	r2, [r3, #28]
      break;
 800950e:	e002      	b.n	8009516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	75fb      	strb	r3, [r7, #23]
      break;
 8009514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_TIM_ConfigClockSource+0x1c>
 8009540:	2302      	movs	r3, #2
 8009542:	e0b4      	b.n	80096ae <HAL_TIM_ConfigClockSource+0x186>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800956a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800957c:	d03e      	beq.n	80095fc <HAL_TIM_ConfigClockSource+0xd4>
 800957e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009582:	f200 8087 	bhi.w	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 8009586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800958a:	f000 8086 	beq.w	800969a <HAL_TIM_ConfigClockSource+0x172>
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009592:	d87f      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 8009594:	2b70      	cmp	r3, #112	; 0x70
 8009596:	d01a      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0xa6>
 8009598:	2b70      	cmp	r3, #112	; 0x70
 800959a:	d87b      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 800959c:	2b60      	cmp	r3, #96	; 0x60
 800959e:	d050      	beq.n	8009642 <HAL_TIM_ConfigClockSource+0x11a>
 80095a0:	2b60      	cmp	r3, #96	; 0x60
 80095a2:	d877      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 80095a4:	2b50      	cmp	r3, #80	; 0x50
 80095a6:	d03c      	beq.n	8009622 <HAL_TIM_ConfigClockSource+0xfa>
 80095a8:	2b50      	cmp	r3, #80	; 0x50
 80095aa:	d873      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	d058      	beq.n	8009662 <HAL_TIM_ConfigClockSource+0x13a>
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d86f      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 80095b4:	2b30      	cmp	r3, #48	; 0x30
 80095b6:	d064      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0x15a>
 80095b8:	2b30      	cmp	r3, #48	; 0x30
 80095ba:	d86b      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d060      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0x15a>
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d867      	bhi.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d05c      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0x15a>
 80095c8:	2b10      	cmp	r3, #16
 80095ca:	d05a      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0x15a>
 80095cc:	e062      	b.n	8009694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6899      	ldr	r1, [r3, #8]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f000 fb5d 	bl	8009c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	609a      	str	r2, [r3, #8]
      break;
 80095fa:	e04f      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	6899      	ldr	r1, [r3, #8]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f000 fb46 	bl	8009c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800961e:	609a      	str	r2, [r3, #8]
      break;
 8009620:	e03c      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	6859      	ldr	r1, [r3, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	461a      	mov	r2, r3
 8009630:	f000 faba 	bl	8009ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2150      	movs	r1, #80	; 0x50
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fb13 	bl	8009c66 <TIM_ITRx_SetConfig>
      break;
 8009640:	e02c      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	6859      	ldr	r1, [r3, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	461a      	mov	r2, r3
 8009650:	f000 fad9 	bl	8009c06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2160      	movs	r1, #96	; 0x60
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fb03 	bl	8009c66 <TIM_ITRx_SetConfig>
      break;
 8009660:	e01c      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6859      	ldr	r1, [r3, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	461a      	mov	r2, r3
 8009670:	f000 fa9a 	bl	8009ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2140      	movs	r1, #64	; 0x40
 800967a:	4618      	mov	r0, r3
 800967c:	f000 faf3 	bl	8009c66 <TIM_ITRx_SetConfig>
      break;
 8009680:	e00c      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f000 faea 	bl	8009c66 <TIM_ITRx_SetConfig>
      break;
 8009692:	e003      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]
      break;
 8009698:	e000      	b.n	800969c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800969a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
	...

08009708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a40      	ldr	r2, [pc, #256]	; (800981c <TIM_Base_SetConfig+0x114>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d013      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009726:	d00f      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <TIM_Base_SetConfig+0x118>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00b      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a3c      	ldr	r2, [pc, #240]	; (8009824 <TIM_Base_SetConfig+0x11c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a3b      	ldr	r2, [pc, #236]	; (8009828 <TIM_Base_SetConfig+0x120>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_Base_SetConfig+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a3a      	ldr	r2, [pc, #232]	; (800982c <TIM_Base_SetConfig+0x124>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d108      	bne.n	800975a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2f      	ldr	r2, [pc, #188]	; (800981c <TIM_Base_SetConfig+0x114>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d02b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009768:	d027      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a2c      	ldr	r2, [pc, #176]	; (8009820 <TIM_Base_SetConfig+0x118>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d023      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a2b      	ldr	r2, [pc, #172]	; (8009824 <TIM_Base_SetConfig+0x11c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d01f      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a2a      	ldr	r2, [pc, #168]	; (8009828 <TIM_Base_SetConfig+0x120>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d01b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a29      	ldr	r2, [pc, #164]	; (800982c <TIM_Base_SetConfig+0x124>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d017      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a28      	ldr	r2, [pc, #160]	; (8009830 <TIM_Base_SetConfig+0x128>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a27      	ldr	r2, [pc, #156]	; (8009834 <TIM_Base_SetConfig+0x12c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00f      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a26      	ldr	r2, [pc, #152]	; (8009838 <TIM_Base_SetConfig+0x130>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a25      	ldr	r2, [pc, #148]	; (800983c <TIM_Base_SetConfig+0x134>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d007      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a24      	ldr	r2, [pc, #144]	; (8009840 <TIM_Base_SetConfig+0x138>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_Base_SetConfig+0xb2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a23      	ldr	r2, [pc, #140]	; (8009844 <TIM_Base_SetConfig+0x13c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d108      	bne.n	80097cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a0a      	ldr	r2, [pc, #40]	; (800981c <TIM_Base_SetConfig+0x114>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_Base_SetConfig+0xf8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <TIM_Base_SetConfig+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d103      	bne.n	8009808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	615a      	str	r2, [r3, #20]
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40010000 	.word	0x40010000
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40010400 	.word	0x40010400
 8009830:	40014000 	.word	0x40014000
 8009834:	40014400 	.word	0x40014400
 8009838:	40014800 	.word	0x40014800
 800983c:	40001800 	.word	0x40001800
 8009840:	40001c00 	.word	0x40001c00
 8009844:	40002000 	.word	0x40002000

08009848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f023 0201 	bic.w	r2, r3, #1
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f023 0302 	bic.w	r3, r3, #2
 8009890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a20      	ldr	r2, [pc, #128]	; (8009920 <TIM_OC1_SetConfig+0xd8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d003      	beq.n	80098ac <TIM_OC1_SetConfig+0x64>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a1f      	ldr	r2, [pc, #124]	; (8009924 <TIM_OC1_SetConfig+0xdc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d10c      	bne.n	80098c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f023 0308 	bic.w	r3, r3, #8
 80098b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f023 0304 	bic.w	r3, r3, #4
 80098c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a15      	ldr	r2, [pc, #84]	; (8009920 <TIM_OC1_SetConfig+0xd8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_OC1_SetConfig+0x8e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a14      	ldr	r2, [pc, #80]	; (8009924 <TIM_OC1_SetConfig+0xdc>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d111      	bne.n	80098fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	621a      	str	r2, [r3, #32]
}
 8009914:	bf00      	nop
 8009916:	371c      	adds	r7, #28
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40010000 	.word	0x40010000
 8009924:	40010400 	.word	0x40010400

08009928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	f023 0210 	bic.w	r2, r3, #16
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800995e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f023 0320 	bic.w	r3, r3, #32
 8009972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a22      	ldr	r2, [pc, #136]	; (8009a0c <TIM_OC2_SetConfig+0xe4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d003      	beq.n	8009990 <TIM_OC2_SetConfig+0x68>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a21      	ldr	r2, [pc, #132]	; (8009a10 <TIM_OC2_SetConfig+0xe8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10d      	bne.n	80099ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a17      	ldr	r2, [pc, #92]	; (8009a0c <TIM_OC2_SetConfig+0xe4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d003      	beq.n	80099bc <TIM_OC2_SetConfig+0x94>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a16      	ldr	r2, [pc, #88]	; (8009a10 <TIM_OC2_SetConfig+0xe8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d113      	bne.n	80099e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	621a      	str	r2, [r3, #32]
}
 80099fe:	bf00      	nop
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	40010000 	.word	0x40010000
 8009a10:	40010400 	.word	0x40010400

08009a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	021b      	lsls	r3, r3, #8
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a21      	ldr	r2, [pc, #132]	; (8009af4 <TIM_OC3_SetConfig+0xe0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d003      	beq.n	8009a7a <TIM_OC3_SetConfig+0x66>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a20      	ldr	r2, [pc, #128]	; (8009af8 <TIM_OC3_SetConfig+0xe4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d10d      	bne.n	8009a96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a16      	ldr	r2, [pc, #88]	; (8009af4 <TIM_OC3_SetConfig+0xe0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d003      	beq.n	8009aa6 <TIM_OC3_SetConfig+0x92>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a15      	ldr	r2, [pc, #84]	; (8009af8 <TIM_OC3_SetConfig+0xe4>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d113      	bne.n	8009ace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	011b      	lsls	r3, r3, #4
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	621a      	str	r2, [r3, #32]
}
 8009ae8:	bf00      	nop
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	40010000 	.word	0x40010000
 8009af8:	40010400 	.word	0x40010400

08009afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	031b      	lsls	r3, r3, #12
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a12      	ldr	r2, [pc, #72]	; (8009ba0 <TIM_OC4_SetConfig+0xa4>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d003      	beq.n	8009b64 <TIM_OC4_SetConfig+0x68>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a11      	ldr	r2, [pc, #68]	; (8009ba4 <TIM_OC4_SetConfig+0xa8>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d109      	bne.n	8009b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	019b      	lsls	r3, r3, #6
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	40010000 	.word	0x40010000
 8009ba4:	40010400 	.word	0x40010400

08009ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	f023 0201 	bic.w	r2, r3, #1
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f023 030a 	bic.w	r3, r3, #10
 8009be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b087      	sub	sp, #28
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f023 0210 	bic.w	r2, r3, #16
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	031b      	lsls	r3, r3, #12
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	621a      	str	r2, [r3, #32]
}
 8009c5a:	bf00      	nop
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	f043 0307 	orr.w	r3, r3, #7
 8009c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	609a      	str	r2, [r3, #8]
}
 8009c90:	bf00      	nop
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	021a      	lsls	r2, r3, #8
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	609a      	str	r2, [r3, #8]
}
 8009cd0:	bf00      	nop
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f003 031f 	and.w	r3, r3, #31
 8009cee:	2201      	movs	r2, #1
 8009cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1a      	ldr	r2, [r3, #32]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	401a      	ands	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a1a      	ldr	r2, [r3, #32]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 031f 	and.w	r3, r3, #31
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	fa01 f303 	lsl.w	r3, r1, r3
 8009d14:	431a      	orrs	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e05a      	b.n	8009df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d022      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8c:	d01d      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a1d      	ldr	r2, [pc, #116]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d018      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a1b      	ldr	r2, [pc, #108]	; (8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d013      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00e      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a18      	ldr	r2, [pc, #96]	; (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d009      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d004      	beq.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d10c      	bne.n	8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40010400 	.word	0x40010400
 8009e18:	40014000 	.word	0x40014000
 8009e1c:	40001800 	.word	0x40001800

08009e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e03f      	b.n	8009eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fb fbb2 	bl	80055d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2224      	movs	r2, #36	; 0x24
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f807 	bl	800aea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	695a      	ldr	r2, [r3, #20]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b08a      	sub	sp, #40	; 0x28
 8009ee6:	af02      	add	r7, sp, #8
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	60b9      	str	r1, [r7, #8]
 8009eec:	603b      	str	r3, [r7, #0]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	d17c      	bne.n	8009ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <HAL_UART_Transmit+0x2c>
 8009f08:	88fb      	ldrh	r3, [r7, #6]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e075      	b.n	8009ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_UART_Transmit+0x3e>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e06e      	b.n	8009ffe <HAL_UART_Transmit+0x11c>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2221      	movs	r2, #33	; 0x21
 8009f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f36:	f7fb fead 	bl	8005c94 <HAL_GetTick>
 8009f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	88fa      	ldrh	r2, [r7, #6]
 8009f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f50:	d108      	bne.n	8009f64 <HAL_UART_Transmit+0x82>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e003      	b.n	8009f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f74:	e02a      	b.n	8009fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2180      	movs	r1, #128	; 0x80
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 fc81 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e036      	b.n	8009ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10b      	bne.n	8009fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	3302      	adds	r3, #2
 8009faa:	61bb      	str	r3, [r7, #24]
 8009fac:	e007      	b.n	8009fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	781a      	ldrb	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1cf      	bne.n	8009f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2140      	movs	r1, #64	; 0x40
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fc51 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e006      	b.n	8009ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e000      	b.n	8009ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ffc:	2302      	movs	r3, #2
  }
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3720      	adds	r7, #32
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a006:	b480      	push	{r7}
 800a008:	b085      	sub	sp, #20
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	4613      	mov	r3, r2
 800a012:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b20      	cmp	r3, #32
 800a01e:	d130      	bne.n	800a082 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <HAL_UART_Transmit_IT+0x26>
 800a026:	88fb      	ldrh	r3, [r7, #6]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e029      	b.n	800a084 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_UART_Transmit_IT+0x38>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e022      	b.n	800a084 <HAL_UART_Transmit_IT+0x7e>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	88fa      	ldrh	r2, [r7, #6]
 800a050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2221      	movs	r2, #33	; 0x21
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a07c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a082:	2302      	movs	r3, #2
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d11d      	bne.n	800a0e6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <HAL_UART_Receive_IT+0x26>
 800a0b0:	88fb      	ldrh	r3, [r7, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e016      	b.n	800a0e8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d101      	bne.n	800a0c8 <HAL_UART_Receive_IT+0x38>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e00f      	b.n	800a0e8 <HAL_UART_Receive_IT+0x58>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68b9      	ldr	r1, [r7, #8]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 fc41 	bl	800a964 <UART_Start_Receive_IT>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	e000      	b.n	800a0e8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
  }
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b20      	cmp	r3, #32
 800a108:	d11d      	bne.n	800a146 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <HAL_UART_Receive_DMA+0x26>
 800a110:	88fb      	ldrh	r3, [r7, #6]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e016      	b.n	800a148 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_UART_Receive_DMA+0x38>
 800a124:	2302      	movs	r3, #2
 800a126:	e00f      	b.n	800a148 <HAL_UART_Receive_DMA+0x58>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a136:	88fb      	ldrh	r3, [r7, #6]
 800a138:	461a      	mov	r2, r3
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 fc4f 	bl	800a9e0 <UART_Start_Receive_DMA>
 800a142:	4603      	mov	r3, r0
 800a144:	e000      	b.n	800a148 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a146:	2302      	movs	r3, #2
  }
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b0ba      	sub	sp, #232	; 0xe8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a176:	2300      	movs	r3, #0
 800a178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a186:	f003 030f 	and.w	r3, r3, #15
 800a18a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a18e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10f      	bne.n	800a1b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d009      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x66>
 800a1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a6:	f003 0320 	and.w	r3, r3, #32
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fdbb 	bl	800ad2a <UART_Receive_IT>
      return;
 800a1b4:	e256      	b.n	800a664 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a1b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80de 	beq.w	800a37c <HAL_UART_IRQHandler+0x22c>
 800a1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80d1 	beq.w	800a37c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <HAL_UART_IRQHandler+0xae>
 800a1e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	f043 0201 	orr.w	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <HAL_UART_IRQHandler+0xd2>
 800a20a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	f043 0202 	orr.w	r2, r3, #2
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00b      	beq.n	800a246 <HAL_UART_IRQHandler+0xf6>
 800a22e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	f043 0204 	orr.w	r2, r3, #4
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d011      	beq.n	800a276 <HAL_UART_IRQHandler+0x126>
 800a252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d105      	bne.n	800a26a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	f043 0208 	orr.w	r2, r3, #8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 81ed 	beq.w	800a65a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d008      	beq.n	800a29e <HAL_UART_IRQHandler+0x14e>
 800a28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a290:	f003 0320 	and.w	r3, r3, #32
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fd46 	bl	800ad2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2301      	moveq	r3, #1
 800a2ae:	2300      	movne	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	f003 0308 	and.w	r3, r3, #8
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d103      	bne.n	800a2ca <HAL_UART_IRQHandler+0x17a>
 800a2c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04f      	beq.n	800a36a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fc4e 	bl	800ab6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d141      	bne.n	800a362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3314      	adds	r3, #20
 800a2e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3314      	adds	r3, #20
 800a306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a30a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a30e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1d9      	bne.n	800a2de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d013      	beq.n	800a35a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	4a7d      	ldr	r2, [pc, #500]	; (800a52c <HAL_UART_IRQHandler+0x3dc>)
 800a338:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd faee 	bl	8007920 <HAL_DMA_Abort_IT>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d016      	beq.n	800a378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a358:	e00e      	b.n	800a378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7f8 fe84 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a360:	e00a      	b.n	800a378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7f8 fe80 	bl	8003068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	e006      	b.n	800a378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7f8 fe7c 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a376:	e170      	b.n	800a65a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a378:	bf00      	nop
    return;
 800a37a:	e16e      	b.n	800a65a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	2b01      	cmp	r3, #1
 800a382:	f040 814a 	bne.w	800a61a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a38a:	f003 0310 	and.w	r3, r3, #16
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 8143 	beq.w	800a61a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a398:	f003 0310 	and.w	r3, r3, #16
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 813c 	beq.w	800a61a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60bb      	str	r3, [r7, #8]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	60bb      	str	r3, [r7, #8]
 800a3b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c2:	2b40      	cmp	r3, #64	; 0x40
 800a3c4:	f040 80b4 	bne.w	800a530 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8140 	beq.w	800a65e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	f080 8139 	bcs.w	800a65e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fe:	f000 8088 	beq.w	800a512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	330c      	adds	r3, #12
 800a408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a41c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	330c      	adds	r3, #12
 800a42a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a42e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a43a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a43e:	e841 2300 	strex	r3, r2, [r1]
 800a442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1d9      	bne.n	800a402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3314      	adds	r3, #20
 800a454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a45e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3314      	adds	r3, #20
 800a46e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a47a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e1      	bne.n	800a44e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3314      	adds	r3, #20
 800a490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a49a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a4ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a4b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e3      	bne.n	800a48a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4da:	e853 3f00 	ldrex	r3, [r3]
 800a4de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e2:	f023 0310 	bic.w	r3, r3, #16
 800a4e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	330c      	adds	r3, #12
 800a4f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4f4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e3      	bne.n	800a4d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd f997 	bl	8007840 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f8ac 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a528:	e099      	b.n	800a65e <HAL_UART_IRQHandler+0x50e>
 800a52a:	bf00      	nop
 800a52c:	0800ac33 	.word	0x0800ac33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a538:	b29b      	uxth	r3, r3
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a544:	b29b      	uxth	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 808b 	beq.w	800a662 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a54c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 8086 	beq.w	800a662 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	330c      	adds	r3, #12
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a56c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	330c      	adds	r3, #12
 800a576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a57a:	647a      	str	r2, [r7, #68]	; 0x44
 800a57c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e3      	bne.n	800a556 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3314      	adds	r3, #20
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	623b      	str	r3, [r7, #32]
   return(result);
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	f023 0301 	bic.w	r3, r3, #1
 800a5a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3314      	adds	r3, #20
 800a5ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a5b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e3      	bne.n	800a58e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	e853 3f00 	ldrex	r3, [r3]
 800a5e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 0310 	bic.w	r3, r3, #16
 800a5ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5f8:	61fa      	str	r2, [r7, #28]
 800a5fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fc:	69b9      	ldr	r1, [r7, #24]
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	e841 2300 	strex	r3, r2, [r1]
 800a604:	617b      	str	r3, [r7, #20]
   return(result);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1e3      	bne.n	800a5d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a60c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f834 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a618:	e023      	b.n	800a662 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <HAL_UART_IRQHandler+0x4ea>
 800a626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fb11 	bl	800ac5a <UART_Transmit_IT>
    return;
 800a638:	e014      	b.n	800a664 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <HAL_UART_IRQHandler+0x514>
 800a646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fb51 	bl	800acfa <UART_EndTransmit_IT>
    return;
 800a658:	e004      	b.n	800a664 <HAL_UART_IRQHandler+0x514>
    return;
 800a65a:	bf00      	nop
 800a65c:	e002      	b.n	800a664 <HAL_UART_IRQHandler+0x514>
      return;
 800a65e:	bf00      	nop
 800a660:	e000      	b.n	800a664 <HAL_UART_IRQHandler+0x514>
      return;
 800a662:	bf00      	nop
  }
}
 800a664:	37e8      	adds	r7, #232	; 0xe8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop

0800a66c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b09c      	sub	sp, #112	; 0x70
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d172      	bne.n	800a79a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	330c      	adds	r3, #12
 800a6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	330c      	adds	r3, #12
 800a6d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6da:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3314      	adds	r3, #20
 800a6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	f023 0301 	bic.w	r3, r3, #1
 800a704:	667b      	str	r3, [r7, #100]	; 0x64
 800a706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3314      	adds	r3, #20
 800a70c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a70e:	647a      	str	r2, [r7, #68]	; 0x44
 800a710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e5      	bne.n	800a6ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3314      	adds	r3, #20
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	623b      	str	r3, [r7, #32]
   return(result);
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a738:	663b      	str	r3, [r7, #96]	; 0x60
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3314      	adds	r3, #20
 800a740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a742:	633a      	str	r2, [r7, #48]	; 0x30
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e5      	bne.n	800a722 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a758:	2220      	movs	r2, #32
 800a75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	2b01      	cmp	r3, #1
 800a764:	d119      	bne.n	800a79a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	330c      	adds	r3, #12
 800a76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	60fb      	str	r3, [r7, #12]
   return(result);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f023 0310 	bic.w	r3, r3, #16
 800a77c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	330c      	adds	r3, #12
 800a784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a786:	61fa      	str	r2, [r7, #28]
 800a788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	69b9      	ldr	r1, [r7, #24]
 800a78c:	69fa      	ldr	r2, [r7, #28]
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	617b      	str	r3, [r7, #20]
   return(result);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e5      	bne.n	800a766 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d106      	bne.n	800a7b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7aa:	f7ff ff69 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7ae:	e002      	b.n	800a7b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a7b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7b2:	f7f8 fbf3 	bl	8002f9c <HAL_UART_RxCpltCallback>
}
 800a7b6:	bf00      	nop
 800a7b8:	3770      	adds	r7, #112	; 0x70
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d108      	bne.n	800a7e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f7ff ff4e 	bl	800a680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7e4:	e002      	b.n	800a7ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7ff ff40 	bl	800a66c <HAL_UART_RxHalfCpltCallback>
}
 800a7ec:	bf00      	nop
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b21      	cmp	r3, #33	; 0x21
 800a826:	d108      	bne.n	800a83a <UART_DMAError+0x46>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a834:	68b8      	ldr	r0, [r7, #8]
 800a836:	f000 f971 	bl	800ab1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b40      	cmp	r3, #64	; 0x40
 800a846:	bf0c      	ite	eq
 800a848:	2301      	moveq	r3, #1
 800a84a:	2300      	movne	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b22      	cmp	r3, #34	; 0x22
 800a85a:	d108      	bne.n	800a86e <UART_DMAError+0x7a>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	f000 f97f 	bl	800ab6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	f043 0210 	orr.w	r2, r3, #16
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	f7f8 fbf4 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b090      	sub	sp, #64	; 0x40
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a898:	e050      	b.n	800a93c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a89a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d04c      	beq.n	800a93c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8a8:	f7fb f9f4 	bl	8005c94 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d241      	bcs.n	800a93c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	e853 3f00 	ldrex	r3, [r3]
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	330c      	adds	r3, #12
 800a8d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8d8:	637a      	str	r2, [r7, #52]	; 0x34
 800a8da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e5      	bne.n	800a8b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3314      	adds	r3, #20
 800a8f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f023 0301 	bic.w	r3, r3, #1
 800a902:	63bb      	str	r3, [r7, #56]	; 0x38
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3314      	adds	r3, #20
 800a90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a90c:	623a      	str	r2, [r7, #32]
 800a90e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	69f9      	ldr	r1, [r7, #28]
 800a912:	6a3a      	ldr	r2, [r7, #32]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	61bb      	str	r3, [r7, #24]
   return(result);
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e5      	bne.n	800a8ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2220      	movs	r2, #32
 800a924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e00f      	b.n	800a95c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4013      	ands	r3, r2
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	429a      	cmp	r2, r3
 800a94a:	bf0c      	ite	eq
 800a94c:	2301      	moveq	r3, #1
 800a94e:	2300      	movne	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	429a      	cmp	r2, r3
 800a958:	d09f      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3740      	adds	r7, #64	; 0x40
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	88fa      	ldrh	r2, [r7, #6]
 800a97c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	88fa      	ldrh	r2, [r7, #6]
 800a982:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2222      	movs	r2, #34	; 0x22
 800a98e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d007      	beq.n	800a9b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68da      	ldr	r2, [r3, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	695a      	ldr	r2, [r3, #20]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 0201 	orr.w	r2, r2, #1
 800a9c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0220 	orr.w	r2, r2, #32
 800a9d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b098      	sub	sp, #96	; 0x60
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2222      	movs	r2, #34	; 0x22
 800aa04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	4a40      	ldr	r2, [pc, #256]	; (800ab10 <UART_Start_Receive_DMA+0x130>)
 800aa0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	4a3f      	ldr	r2, [pc, #252]	; (800ab14 <UART_Start_Receive_DMA+0x134>)
 800aa16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	4a3e      	ldr	r2, [pc, #248]	; (800ab18 <UART_Start_Receive_DMA+0x138>)
 800aa1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa24:	2200      	movs	r2, #0
 800aa26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa28:	f107 0308 	add.w	r3, r7, #8
 800aa2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	f7fc fea6 	bl	8007790 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d019      	beq.n	800aa9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa80:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	330c      	adds	r3, #12
 800aa88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e5      	bne.n	800aa6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	f043 0301 	orr.w	r3, r3, #1
 800aab4:	657b      	str	r3, [r7, #84]	; 0x54
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3314      	adds	r3, #20
 800aabc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aabe:	63ba      	str	r2, [r7, #56]	; 0x38
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3314      	adds	r3, #20
 800aad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	617b      	str	r3, [r7, #20]
   return(result);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae8:	653b      	str	r3, [r7, #80]	; 0x50
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3314      	adds	r3, #20
 800aaf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaf2:	627a      	str	r2, [r7, #36]	; 0x24
 800aaf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6a39      	ldr	r1, [r7, #32]
 800aaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3760      	adds	r7, #96	; 0x60
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	0800a699 	.word	0x0800a699
 800ab14:	0800a7bf 	.word	0x0800a7bf
 800ab18:	0800a7f5 	.word	0x0800a7f5

0800ab1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	330c      	adds	r3, #12
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	61ba      	str	r2, [r7, #24]
 800ab46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6979      	ldr	r1, [r7, #20]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	613b      	str	r3, [r7, #16]
   return(result);
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e5      	bne.n	800ab24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ab60:	bf00      	nop
 800ab62:	3724      	adds	r7, #36	; 0x24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b095      	sub	sp, #84	; 0x54
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	330c      	adds	r3, #12
 800ab92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab94:	643a      	str	r2, [r7, #64]	; 0x40
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e5      	bne.n	800ab74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3314      	adds	r3, #20
 800abae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f023 0301 	bic.w	r3, r3, #1
 800abbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3314      	adds	r3, #20
 800abc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e5      	bne.n	800aba8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d119      	bne.n	800ac18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	330c      	adds	r3, #12
 800abea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	e853 3f00 	ldrex	r3, [r3]
 800abf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f023 0310 	bic.w	r3, r3, #16
 800abfa:	647b      	str	r3, [r7, #68]	; 0x44
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	330c      	adds	r3, #12
 800ac02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac04:	61ba      	str	r2, [r7, #24]
 800ac06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	6979      	ldr	r1, [r7, #20]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	613b      	str	r3, [r7, #16]
   return(result);
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e5      	bne.n	800abe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac26:	bf00      	nop
 800ac28:	3754      	adds	r7, #84	; 0x54
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7f8 fa0b 	bl	8003068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac52:	bf00      	nop
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b21      	cmp	r3, #33	; 0x21
 800ac6c:	d13e      	bne.n	800acec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac76:	d114      	bne.n	800aca2 <UART_Transmit_IT+0x48>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d110      	bne.n	800aca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	1c9a      	adds	r2, r3, #2
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	621a      	str	r2, [r3, #32]
 800aca0:	e008      	b.n	800acb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6211      	str	r1, [r2, #32]
 800acac:	781a      	ldrb	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acb8:	b29b      	uxth	r3, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4619      	mov	r1, r3
 800acc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10f      	bne.n	800ace8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68da      	ldr	r2, [r3, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ace6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	e000      	b.n	800acee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800acec:	2302      	movs	r3, #2
  }
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7f8 f9ce 	bl	80030bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b08c      	sub	sp, #48	; 0x30
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b22      	cmp	r3, #34	; 0x22
 800ad3c:	f040 80ab 	bne.w	800ae96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad48:	d117      	bne.n	800ad7a <UART_Receive_IT+0x50>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d113      	bne.n	800ad7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad72:	1c9a      	adds	r2, r3, #2
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	629a      	str	r2, [r3, #40]	; 0x28
 800ad78:	e026      	b.n	800adc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8c:	d007      	beq.n	800ad9e <UART_Receive_IT+0x74>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <UART_Receive_IT+0x82>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	e008      	b.n	800adbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adcc:	b29b      	uxth	r3, r3
 800adce:	3b01      	subs	r3, #1
 800add0:	b29b      	uxth	r3, r3
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4619      	mov	r1, r3
 800add6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800add8:	2b00      	cmp	r3, #0
 800adda:	d15a      	bne.n	800ae92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0220 	bic.w	r2, r2, #32
 800adea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695a      	ldr	r2, [r3, #20]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d135      	bne.n	800ae88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	330c      	adds	r3, #12
 800ae28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	613b      	str	r3, [r7, #16]
   return(result);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f023 0310 	bic.w	r3, r3, #16
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	330c      	adds	r3, #12
 800ae40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae42:	623a      	str	r2, [r7, #32]
 800ae44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	69f9      	ldr	r1, [r7, #28]
 800ae48:	6a3a      	ldr	r2, [r7, #32]
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e5      	bne.n	800ae22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0310 	and.w	r3, r3, #16
 800ae60:	2b10      	cmp	r3, #16
 800ae62:	d10a      	bne.n	800ae7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fbfd 	bl	800a680 <HAL_UARTEx_RxEventCallback>
 800ae86:	e002      	b.n	800ae8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7f8 f887 	bl	8002f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e002      	b.n	800ae98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e000      	b.n	800ae98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae96:	2302      	movs	r3, #2
  }
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3730      	adds	r7, #48	; 0x30
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aea4:	b0c0      	sub	sp, #256	; 0x100
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aebc:	68d9      	ldr	r1, [r3, #12]
 800aebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	ea40 0301 	orr.w	r3, r0, r1
 800aec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aeca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	431a      	orrs	r2, r3
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	431a      	orrs	r2, r3
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aef8:	f021 010c 	bic.w	r1, r1, #12
 800aefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af06:	430b      	orrs	r3, r1
 800af08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1a:	6999      	ldr	r1, [r3, #24]
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	ea40 0301 	orr.w	r3, r0, r1
 800af26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b8f      	ldr	r3, [pc, #572]	; (800b16c <UART_SetConfig+0x2cc>)
 800af30:	429a      	cmp	r2, r3
 800af32:	d005      	beq.n	800af40 <UART_SetConfig+0xa0>
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b8d      	ldr	r3, [pc, #564]	; (800b170 <UART_SetConfig+0x2d0>)
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d104      	bne.n	800af4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af40:	f7fd fdcc 	bl	8008adc <HAL_RCC_GetPCLK2Freq>
 800af44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af48:	e003      	b.n	800af52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af4a:	f7fd fdb3 	bl	8008ab4 <HAL_RCC_GetPCLK1Freq>
 800af4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af5c:	f040 810c 	bne.w	800b178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af64:	2200      	movs	r2, #0
 800af66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	1891      	adds	r1, r2, r2
 800af78:	65b9      	str	r1, [r7, #88]	; 0x58
 800af7a:	415b      	adcs	r3, r3
 800af7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af82:	4621      	mov	r1, r4
 800af84:	eb12 0801 	adds.w	r8, r2, r1
 800af88:	4629      	mov	r1, r5
 800af8a:	eb43 0901 	adc.w	r9, r3, r1
 800af8e:	f04f 0200 	mov.w	r2, #0
 800af92:	f04f 0300 	mov.w	r3, #0
 800af96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afa2:	4690      	mov	r8, r2
 800afa4:	4699      	mov	r9, r3
 800afa6:	4623      	mov	r3, r4
 800afa8:	eb18 0303 	adds.w	r3, r8, r3
 800afac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afb0:	462b      	mov	r3, r5
 800afb2:	eb49 0303 	adc.w	r3, r9, r3
 800afb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800afca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800afce:	460b      	mov	r3, r1
 800afd0:	18db      	adds	r3, r3, r3
 800afd2:	653b      	str	r3, [r7, #80]	; 0x50
 800afd4:	4613      	mov	r3, r2
 800afd6:	eb42 0303 	adc.w	r3, r2, r3
 800afda:	657b      	str	r3, [r7, #84]	; 0x54
 800afdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800afe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800afe4:	f7f5 fe30 	bl	8000c48 <__aeabi_uldivmod>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4b61      	ldr	r3, [pc, #388]	; (800b174 <UART_SetConfig+0x2d4>)
 800afee:	fba3 2302 	umull	r2, r3, r3, r2
 800aff2:	095b      	lsrs	r3, r3, #5
 800aff4:	011c      	lsls	r4, r3, #4
 800aff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800affa:	2200      	movs	r2, #0
 800affc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	1891      	adds	r1, r2, r2
 800b00e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b010:	415b      	adcs	r3, r3
 800b012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b018:	4641      	mov	r1, r8
 800b01a:	eb12 0a01 	adds.w	sl, r2, r1
 800b01e:	4649      	mov	r1, r9
 800b020:	eb43 0b01 	adc.w	fp, r3, r1
 800b024:	f04f 0200 	mov.w	r2, #0
 800b028:	f04f 0300 	mov.w	r3, #0
 800b02c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b038:	4692      	mov	sl, r2
 800b03a:	469b      	mov	fp, r3
 800b03c:	4643      	mov	r3, r8
 800b03e:	eb1a 0303 	adds.w	r3, sl, r3
 800b042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b046:	464b      	mov	r3, r9
 800b048:	eb4b 0303 	adc.w	r3, fp, r3
 800b04c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b05c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b064:	460b      	mov	r3, r1
 800b066:	18db      	adds	r3, r3, r3
 800b068:	643b      	str	r3, [r7, #64]	; 0x40
 800b06a:	4613      	mov	r3, r2
 800b06c:	eb42 0303 	adc.w	r3, r2, r3
 800b070:	647b      	str	r3, [r7, #68]	; 0x44
 800b072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b07a:	f7f5 fde5 	bl	8000c48 <__aeabi_uldivmod>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4611      	mov	r1, r2
 800b084:	4b3b      	ldr	r3, [pc, #236]	; (800b174 <UART_SetConfig+0x2d4>)
 800b086:	fba3 2301 	umull	r2, r3, r3, r1
 800b08a:	095b      	lsrs	r3, r3, #5
 800b08c:	2264      	movs	r2, #100	; 0x64
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	1acb      	subs	r3, r1, r3
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b09a:	4b36      	ldr	r3, [pc, #216]	; (800b174 <UART_SetConfig+0x2d4>)
 800b09c:	fba3 2302 	umull	r2, r3, r3, r2
 800b0a0:	095b      	lsrs	r3, r3, #5
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0a8:	441c      	add	r4, r3
 800b0aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b0b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b0bc:	4642      	mov	r2, r8
 800b0be:	464b      	mov	r3, r9
 800b0c0:	1891      	adds	r1, r2, r2
 800b0c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b0c4:	415b      	adcs	r3, r3
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	1851      	adds	r1, r2, r1
 800b0d0:	6339      	str	r1, [r7, #48]	; 0x30
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	414b      	adcs	r3, r1
 800b0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b0e4:	4659      	mov	r1, fp
 800b0e6:	00cb      	lsls	r3, r1, #3
 800b0e8:	4651      	mov	r1, sl
 800b0ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ee:	4651      	mov	r1, sl
 800b0f0:	00ca      	lsls	r2, r1, #3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4642      	mov	r2, r8
 800b0fa:	189b      	adds	r3, r3, r2
 800b0fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b100:	464b      	mov	r3, r9
 800b102:	460a      	mov	r2, r1
 800b104:	eb42 0303 	adc.w	r3, r2, r3
 800b108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b11c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b120:	460b      	mov	r3, r1
 800b122:	18db      	adds	r3, r3, r3
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
 800b126:	4613      	mov	r3, r2
 800b128:	eb42 0303 	adc.w	r3, r2, r3
 800b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b12e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b136:	f7f5 fd87 	bl	8000c48 <__aeabi_uldivmod>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <UART_SetConfig+0x2d4>)
 800b140:	fba3 1302 	umull	r1, r3, r3, r2
 800b144:	095b      	lsrs	r3, r3, #5
 800b146:	2164      	movs	r1, #100	; 0x64
 800b148:	fb01 f303 	mul.w	r3, r1, r3
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	3332      	adds	r3, #50	; 0x32
 800b152:	4a08      	ldr	r2, [pc, #32]	; (800b174 <UART_SetConfig+0x2d4>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	095b      	lsrs	r3, r3, #5
 800b15a:	f003 0207 	and.w	r2, r3, #7
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4422      	add	r2, r4
 800b166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b168:	e106      	b.n	800b378 <UART_SetConfig+0x4d8>
 800b16a:	bf00      	nop
 800b16c:	40011000 	.word	0x40011000
 800b170:	40011400 	.word	0x40011400
 800b174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b18a:	4642      	mov	r2, r8
 800b18c:	464b      	mov	r3, r9
 800b18e:	1891      	adds	r1, r2, r2
 800b190:	6239      	str	r1, [r7, #32]
 800b192:	415b      	adcs	r3, r3
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
 800b196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b19a:	4641      	mov	r1, r8
 800b19c:	1854      	adds	r4, r2, r1
 800b19e:	4649      	mov	r1, r9
 800b1a0:	eb43 0501 	adc.w	r5, r3, r1
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	00eb      	lsls	r3, r5, #3
 800b1ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1b2:	00e2      	lsls	r2, r4, #3
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	461d      	mov	r5, r3
 800b1b8:	4643      	mov	r3, r8
 800b1ba:	18e3      	adds	r3, r4, r3
 800b1bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	eb45 0303 	adc.w	r3, r5, r3
 800b1c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	008b      	lsls	r3, r1, #2
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	008a      	lsls	r2, r1, #2
 800b1f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1f8:	f7f5 fd26 	bl	8000c48 <__aeabi_uldivmod>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4b60      	ldr	r3, [pc, #384]	; (800b384 <UART_SetConfig+0x4e4>)
 800b202:	fba3 2302 	umull	r2, r3, r3, r2
 800b206:	095b      	lsrs	r3, r3, #5
 800b208:	011c      	lsls	r4, r3, #4
 800b20a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	1891      	adds	r1, r2, r2
 800b222:	61b9      	str	r1, [r7, #24]
 800b224:	415b      	adcs	r3, r3
 800b226:	61fb      	str	r3, [r7, #28]
 800b228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b22c:	4641      	mov	r1, r8
 800b22e:	1851      	adds	r1, r2, r1
 800b230:	6139      	str	r1, [r7, #16]
 800b232:	4649      	mov	r1, r9
 800b234:	414b      	adcs	r3, r1
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	f04f 0200 	mov.w	r2, #0
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b244:	4659      	mov	r1, fp
 800b246:	00cb      	lsls	r3, r1, #3
 800b248:	4651      	mov	r1, sl
 800b24a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b24e:	4651      	mov	r1, sl
 800b250:	00ca      	lsls	r2, r1, #3
 800b252:	4610      	mov	r0, r2
 800b254:	4619      	mov	r1, r3
 800b256:	4603      	mov	r3, r0
 800b258:	4642      	mov	r2, r8
 800b25a:	189b      	adds	r3, r3, r2
 800b25c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b260:	464b      	mov	r3, r9
 800b262:	460a      	mov	r2, r1
 800b264:	eb42 0303 	adc.w	r3, r2, r3
 800b268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	67bb      	str	r3, [r7, #120]	; 0x78
 800b276:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b284:	4649      	mov	r1, r9
 800b286:	008b      	lsls	r3, r1, #2
 800b288:	4641      	mov	r1, r8
 800b28a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b28e:	4641      	mov	r1, r8
 800b290:	008a      	lsls	r2, r1, #2
 800b292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b296:	f7f5 fcd7 	bl	8000c48 <__aeabi_uldivmod>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	4b38      	ldr	r3, [pc, #224]	; (800b384 <UART_SetConfig+0x4e4>)
 800b2a2:	fba3 2301 	umull	r2, r3, r3, r1
 800b2a6:	095b      	lsrs	r3, r3, #5
 800b2a8:	2264      	movs	r2, #100	; 0x64
 800b2aa:	fb02 f303 	mul.w	r3, r2, r3
 800b2ae:	1acb      	subs	r3, r1, r3
 800b2b0:	011b      	lsls	r3, r3, #4
 800b2b2:	3332      	adds	r3, #50	; 0x32
 800b2b4:	4a33      	ldr	r2, [pc, #204]	; (800b384 <UART_SetConfig+0x4e4>)
 800b2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ba:	095b      	lsrs	r3, r3, #5
 800b2bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2c0:	441c      	add	r4, r3
 800b2c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	673b      	str	r3, [r7, #112]	; 0x70
 800b2ca:	677a      	str	r2, [r7, #116]	; 0x74
 800b2cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	1891      	adds	r1, r2, r2
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	415b      	adcs	r3, r3
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	1851      	adds	r1, r2, r1
 800b2e4:	6039      	str	r1, [r7, #0]
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	414b      	adcs	r3, r1
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2f8:	4659      	mov	r1, fp
 800b2fa:	00cb      	lsls	r3, r1, #3
 800b2fc:	4651      	mov	r1, sl
 800b2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b302:	4651      	mov	r1, sl
 800b304:	00ca      	lsls	r2, r1, #3
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	4603      	mov	r3, r0
 800b30c:	4642      	mov	r2, r8
 800b30e:	189b      	adds	r3, r3, r2
 800b310:	66bb      	str	r3, [r7, #104]	; 0x68
 800b312:	464b      	mov	r3, r9
 800b314:	460a      	mov	r2, r1
 800b316:	eb42 0303 	adc.w	r3, r2, r3
 800b31a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	663b      	str	r3, [r7, #96]	; 0x60
 800b326:	667a      	str	r2, [r7, #100]	; 0x64
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	f04f 0300 	mov.w	r3, #0
 800b330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b334:	4649      	mov	r1, r9
 800b336:	008b      	lsls	r3, r1, #2
 800b338:	4641      	mov	r1, r8
 800b33a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b33e:	4641      	mov	r1, r8
 800b340:	008a      	lsls	r2, r1, #2
 800b342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b346:	f7f5 fc7f 	bl	8000c48 <__aeabi_uldivmod>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <UART_SetConfig+0x4e4>)
 800b350:	fba3 1302 	umull	r1, r3, r3, r2
 800b354:	095b      	lsrs	r3, r3, #5
 800b356:	2164      	movs	r1, #100	; 0x64
 800b358:	fb01 f303 	mul.w	r3, r1, r3
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	3332      	adds	r3, #50	; 0x32
 800b362:	4a08      	ldr	r2, [pc, #32]	; (800b384 <UART_SetConfig+0x4e4>)
 800b364:	fba2 2303 	umull	r2, r3, r2, r3
 800b368:	095b      	lsrs	r3, r3, #5
 800b36a:	f003 020f 	and.w	r2, r3, #15
 800b36e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4422      	add	r2, r4
 800b376:	609a      	str	r2, [r3, #8]
}
 800b378:	bf00      	nop
 800b37a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b37e:	46bd      	mov	sp, r7
 800b380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b384:	51eb851f 	.word	0x51eb851f

0800b388 <PID_Cal>:
 * @param CurrVal_set giá trị feedback của hệ thống
 * @return
 */

float PID_Cal(PID_Param *pid,float Target_set,float CurrVal_set)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	ed87 0a02 	vstr	s0, [r7, #8]
 800b394:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	e = Target_set - CurrVal_set;
 800b398:	ed97 7a02 	vldr	s14, [r7, #8]
 800b39c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	edc3 7a00 	vstr	s15, [r3]

	if(!kI) kB = 0;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	edd3 7a05 	vldr	s15, [r3, #20]
 800b3b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b8:	d104      	bne.n	800b3c4 <PID_Cal+0x3c>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	61da      	str	r2, [r3, #28]
 800b3c2:	e009      	b.n	800b3d8 <PID_Cal+0x50>
	else kB = 1/deltaT;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	edc3 7a07 	vstr	s15, [r3, #28]

//-----------------------Propotion Term----------------//
	uP = kP*e;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	ed93 7a03 	vldr	s14, [r3, #12]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	edd3 7a00 	vldr	s15, [r3]
 800b3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	edc3 7a04 	vstr	s15, [r3, #16]

//-----------------------Integral Term-----------------//
	uI +=(kI*e + kB*(-u + uHat))*deltaT;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	ed93 7a06 	vldr	s14, [r3, #24]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	edd3 6a05 	vldr	s13, [r3, #20]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	edd3 7a00 	vldr	s15, [r3]
 800b400:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	ed93 6a07 	vldr	s12, [r3, #28]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b416:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b41a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b41e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	edd3 7a02 	vldr	s15, [r3, #8]
 800b428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b42c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Derivative Term---------------//
	uD = kD*(e - e_Pre)/deltaT;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	ed93 7a08 	vldr	s14, [r3, #32]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	edd3 6a00 	vldr	s13, [r3]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	edd3 7a01 	vldr	s15, [r3, #4]
 800b448:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b44c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	ed93 7a02 	vldr	s14, [r3, #8]
 800b456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	uD_Fil = (1-alpha)*uD_FilPre+alpha*uD;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b46a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

//-----------------------Previous Value----------------//
	e_Pre = e;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	605a      	str	r2, [r3, #4]
	uD_FilPre = uD_Fil;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	62da      	str	r2, [r3, #44]	; 0x2c

//-----------------------Sum---------------------------//
	u = uP + uI + uD;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	ed93 7a04 	vldr	s14, [r3, #16]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	edd3 7a06 	vldr	s15, [r3, #24]
 800b4ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	if(u >= u_AboveLimit) uHat = u_AboveLimit;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b4ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d6:	db04      	blt.n	800b4e2 <PID_Cal+0x15a>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	639a      	str	r2, [r3, #56]	; 0x38
 800b4e0:	e013      	b.n	800b50a <PID_Cal+0x182>
	else if(u <= u_BelowLimit) uHat = u_BelowLimit;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b4ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	d804      	bhi.n	800b502 <PID_Cal+0x17a>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38
 800b500:	e003      	b.n	800b50a <PID_Cal+0x182>
	else uHat = u;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
	return uHat;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50e:	ee07 3a90 	vmov	s15, r3
}
 800b512:	eeb0 0a67 	vmov.f32	s0, s15
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	4603      	mov	r3, r0
 800b528:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b52e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b532:	2b84      	cmp	r3, #132	; 0x84
 800b534:	d005      	beq.n	800b542 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4413      	add	r3, r2
 800b53e:	3303      	adds	r3, #3
 800b540:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b542:	68fb      	ldr	r3, [r7, #12]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b554:	f000 faf6 	bl	800bb44 <vTaskStartScheduler>
  
  return osOK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b55e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b560:	b089      	sub	sp, #36	; 0x24
 800b562:	af04      	add	r7, sp, #16
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d020      	beq.n	800b5b2 <osThreadCreate+0x54>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01c      	beq.n	800b5b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685c      	ldr	r4, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	691e      	ldr	r6, [r3, #16]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff ffc8 	bl	800b520 <makeFreeRtosPriority>
 800b590:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b59a:	9202      	str	r2, [sp, #8]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	9100      	str	r1, [sp, #0]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 f8ed 	bl	800b786 <xTaskCreateStatic>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	e01c      	b.n	800b5ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685c      	ldr	r4, [r3, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff ffaa 	bl	800b520 <makeFreeRtosPriority>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	9200      	str	r2, [sp, #0]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	4632      	mov	r2, r6
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 f92f 	bl	800b840 <xTaskCreate>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d001      	beq.n	800b5ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e000      	b.n	800b5ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <osDelay+0x16>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	e000      	b.n	800b60e <osDelay+0x18>
 800b60c:	2301      	movs	r3, #1
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fa64 	bl	800badc <vTaskDelay>
  
  return osOK;
 800b614:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f103 0208 	add.w	r2, r3, #8
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f103 0208 	add.w	r2, r3, #8
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f103 0208 	add.w	r2, r3, #8
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d103      	bne.n	800b6e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	e00c      	b.n	800b6fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	60fb      	str	r3, [r7, #12]
 800b6e6:	e002      	b.n	800b6ee <vListInsert+0x2e>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d2f6      	bcs.n	800b6e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	601a      	str	r2, [r3, #0]
}
 800b726:	bf00      	nop
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	6892      	ldr	r2, [r2, #8]
 800b748:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6852      	ldr	r2, [r2, #4]
 800b752:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d103      	bne.n	800b766 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	1e5a      	subs	r2, r3, #1
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b786:	b580      	push	{r7, lr}
 800b788:	b08e      	sub	sp, #56	; 0x38
 800b78a:	af04      	add	r7, sp, #16
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	607a      	str	r2, [r7, #4]
 800b792:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10a      	bne.n	800b7b0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7ac:	bf00      	nop
 800b7ae:	e7fe      	b.n	800b7ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <xTaskCreateStatic+0x46>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	61fb      	str	r3, [r7, #28]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7cc:	23a0      	movs	r3, #160	; 0xa0
 800b7ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2ba0      	cmp	r3, #160	; 0xa0
 800b7d4:	d00a      	beq.n	800b7ec <xTaskCreateStatic+0x66>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	61bb      	str	r3, [r7, #24]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d01e      	beq.n	800b832 <xTaskCreateStatic+0xac>
 800b7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d01b      	beq.n	800b832 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b802:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	2202      	movs	r2, #2
 800b808:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b80c:	2300      	movs	r3, #0
 800b80e:	9303      	str	r3, [sp, #12]
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	9302      	str	r3, [sp, #8]
 800b814:	f107 0314 	add.w	r3, r7, #20
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f851 	bl	800b8cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b82c:	f000 f8ec 	bl	800ba08 <prvAddNewTaskToReadyList>
 800b830:	e001      	b.n	800b836 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b836:	697b      	ldr	r3, [r7, #20]
	}
 800b838:	4618      	mov	r0, r3
 800b83a:	3728      	adds	r7, #40	; 0x28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08c      	sub	sp, #48	; 0x30
 800b844:	af04      	add	r7, sp, #16
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	4613      	mov	r3, r2
 800b84e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b850:	88fb      	ldrh	r3, [r7, #6]
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4618      	mov	r0, r3
 800b856:	f001 f937 	bl	800cac8 <pvPortMalloc>
 800b85a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00e      	beq.n	800b880 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b862:	20a0      	movs	r0, #160	; 0xa0
 800b864:	f001 f930 	bl	800cac8 <pvPortMalloc>
 800b868:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	631a      	str	r2, [r3, #48]	; 0x30
 800b876:	e005      	b.n	800b884 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b878:	6978      	ldr	r0, [r7, #20]
 800b87a:	f001 f9f1 	bl	800cc60 <vPortFree>
 800b87e:	e001      	b.n	800b884 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d017      	beq.n	800b8ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b892:	88fa      	ldrh	r2, [r7, #6]
 800b894:	2300      	movs	r3, #0
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	9302      	str	r3, [sp, #8]
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f80f 	bl	800b8cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ae:	69f8      	ldr	r0, [r7, #28]
 800b8b0:	f000 f8aa 	bl	800ba08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	61bb      	str	r3, [r7, #24]
 800b8b8:	e002      	b.n	800b8c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b8be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
	}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3720      	adds	r7, #32
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	f023 0307 	bic.w	r3, r3, #7
 800b8f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	617b      	str	r3, [r7, #20]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01f      	beq.n	800b95a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b91a:	2300      	movs	r3, #0
 800b91c:	61fb      	str	r3, [r7, #28]
 800b91e:	e012      	b.n	800b946 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	4413      	add	r3, r2
 800b926:	7819      	ldrb	r1, [r3, #0]
 800b928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	4413      	add	r3, r2
 800b92e:	3334      	adds	r3, #52	; 0x34
 800b930:	460a      	mov	r2, r1
 800b932:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d006      	beq.n	800b94e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	3301      	adds	r3, #1
 800b944:	61fb      	str	r3, [r7, #28]
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	2b0f      	cmp	r3, #15
 800b94a:	d9e9      	bls.n	800b920 <prvInitialiseNewTask+0x54>
 800b94c:	e000      	b.n	800b950 <prvInitialiseNewTask+0x84>
			{
				break;
 800b94e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b958:	e003      	b.n	800b962 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	2b06      	cmp	r3, #6
 800b966:	d901      	bls.n	800b96c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b968:	2306      	movs	r3, #6
 800b96a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b970:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b976:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	2200      	movs	r2, #0
 800b97c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff fe6b 	bl	800b65e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98a:	3318      	adds	r3, #24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff fe66 	bl	800b65e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b996:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	f1c3 0207 	rsb	r2, r3, #7
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	334c      	adds	r3, #76	; 0x4c
 800b9bc:	224c      	movs	r2, #76	; 0x4c
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f001 fff6 	bl	800d9b2 <memset>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <prvInitialiseNewTask+0x130>)
 800b9ca:	651a      	str	r2, [r3, #80]	; 0x50
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	4a0c      	ldr	r2, [pc, #48]	; (800ba00 <prvInitialiseNewTask+0x134>)
 800b9d0:	655a      	str	r2, [r3, #84]	; 0x54
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	4a0b      	ldr	r2, [pc, #44]	; (800ba04 <prvInitialiseNewTask+0x138>)
 800b9d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	68f9      	ldr	r1, [r7, #12]
 800b9dc:	69b8      	ldr	r0, [r7, #24]
 800b9de:	f000 fe21 	bl	800c624 <pxPortInitialiseStack>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d002      	beq.n	800b9f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9f4:	bf00      	nop
 800b9f6:	3720      	adds	r7, #32
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2000508c 	.word	0x2000508c
 800ba00:	200050f4 	.word	0x200050f4
 800ba04:	2000515c 	.word	0x2000515c

0800ba08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba10:	f000 ff38 	bl	800c884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba14:	4b2a      	ldr	r3, [pc, #168]	; (800bac0 <prvAddNewTaskToReadyList+0xb8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	4a29      	ldr	r2, [pc, #164]	; (800bac0 <prvAddNewTaskToReadyList+0xb8>)
 800ba1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba1e:	4b29      	ldr	r3, [pc, #164]	; (800bac4 <prvAddNewTaskToReadyList+0xbc>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba26:	4a27      	ldr	r2, [pc, #156]	; (800bac4 <prvAddNewTaskToReadyList+0xbc>)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba2c:	4b24      	ldr	r3, [pc, #144]	; (800bac0 <prvAddNewTaskToReadyList+0xb8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d110      	bne.n	800ba56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba34:	f000 facc 	bl	800bfd0 <prvInitialiseTaskLists>
 800ba38:	e00d      	b.n	800ba56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba3a:	4b23      	ldr	r3, [pc, #140]	; (800bac8 <prvAddNewTaskToReadyList+0xc0>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d109      	bne.n	800ba56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba42:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <prvAddNewTaskToReadyList+0xbc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d802      	bhi.n	800ba56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba50:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <prvAddNewTaskToReadyList+0xbc>)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba56:	4b1d      	ldr	r3, [pc, #116]	; (800bacc <prvAddNewTaskToReadyList+0xc4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	4a1b      	ldr	r2, [pc, #108]	; (800bacc <prvAddNewTaskToReadyList+0xc4>)
 800ba5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	2201      	movs	r2, #1
 800ba66:	409a      	lsls	r2, r3
 800ba68:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <prvAddNewTaskToReadyList+0xc8>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <prvAddNewTaskToReadyList+0xc8>)
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba76:	4613      	mov	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4a15      	ldr	r2, [pc, #84]	; (800bad4 <prvAddNewTaskToReadyList+0xcc>)
 800ba80:	441a      	add	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7ff fdf5 	bl	800b678 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba8e:	f000 ff29 	bl	800c8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <prvAddNewTaskToReadyList+0xc0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00e      	beq.n	800bab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <prvAddNewTaskToReadyList+0xbc>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d207      	bcs.n	800bab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800baa8:	4b0b      	ldr	r3, [pc, #44]	; (800bad8 <prvAddNewTaskToReadyList+0xd0>)
 800baaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20001438 	.word	0x20001438
 800bac4:	20001338 	.word	0x20001338
 800bac8:	20001444 	.word	0x20001444
 800bacc:	20001454 	.word	0x20001454
 800bad0:	20001440 	.word	0x20001440
 800bad4:	2000133c 	.word	0x2000133c
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d017      	beq.n	800bb1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <vTaskDelay+0x60>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00a      	beq.n	800bb0c <vTaskDelay+0x30>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	60bb      	str	r3, [r7, #8]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb0c:	f000 f884 	bl	800bc18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb10:	2100      	movs	r1, #0
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fd20 	bl	800c558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb18:	f000 f88c 	bl	800bc34 <xTaskResumeAll>
 800bb1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d107      	bne.n	800bb34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <vTaskDelay+0x64>)
 800bb26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20001460 	.word	0x20001460
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08a      	sub	sp, #40	; 0x28
 800bb48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb52:	463a      	mov	r2, r7
 800bb54:	1d39      	adds	r1, r7, #4
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7f7 f926 	bl	8002dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	9202      	str	r2, [sp, #8]
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	460a      	mov	r2, r1
 800bb72:	4921      	ldr	r1, [pc, #132]	; (800bbf8 <vTaskStartScheduler+0xb4>)
 800bb74:	4821      	ldr	r0, [pc, #132]	; (800bbfc <vTaskStartScheduler+0xb8>)
 800bb76:	f7ff fe06 	bl	800b786 <xTaskCreateStatic>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	4a20      	ldr	r2, [pc, #128]	; (800bc00 <vTaskStartScheduler+0xbc>)
 800bb7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb80:	4b1f      	ldr	r3, [pc, #124]	; (800bc00 <vTaskStartScheduler+0xbc>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e001      	b.n	800bb92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d11b      	bne.n	800bbd0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	613b      	str	r3, [r7, #16]
}
 800bbaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbac:	4b15      	ldr	r3, [pc, #84]	; (800bc04 <vTaskStartScheduler+0xc0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	334c      	adds	r3, #76	; 0x4c
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <vTaskStartScheduler+0xc4>)
 800bbb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbb6:	4b15      	ldr	r3, [pc, #84]	; (800bc0c <vTaskStartScheduler+0xc8>)
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbbe:	4b14      	ldr	r3, [pc, #80]	; (800bc10 <vTaskStartScheduler+0xcc>)
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbc4:	4b13      	ldr	r3, [pc, #76]	; (800bc14 <vTaskStartScheduler+0xd0>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbca:	f000 fdb9 	bl	800c740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbce:	e00e      	b.n	800bbee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd6:	d10a      	bne.n	800bbee <vTaskStartScheduler+0xaa>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	60fb      	str	r3, [r7, #12]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <vTaskStartScheduler+0xa8>
}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	08012140 	.word	0x08012140
 800bbfc:	0800bfa1 	.word	0x0800bfa1
 800bc00:	2000145c 	.word	0x2000145c
 800bc04:	20001338 	.word	0x20001338
 800bc08:	20000068 	.word	0x20000068
 800bc0c:	20001458 	.word	0x20001458
 800bc10:	20001444 	.word	0x20001444
 800bc14:	2000143c 	.word	0x2000143c

0800bc18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc1c:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <vTaskSuspendAll+0x18>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	4a03      	ldr	r2, [pc, #12]	; (800bc30 <vTaskSuspendAll+0x18>)
 800bc24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc26:	bf00      	nop
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20001460 	.word	0x20001460

0800bc34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc42:	4b41      	ldr	r3, [pc, #260]	; (800bd48 <xTaskResumeAll+0x114>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	603b      	str	r3, [r7, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc60:	f000 fe10 	bl	800c884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc64:	4b38      	ldr	r3, [pc, #224]	; (800bd48 <xTaskResumeAll+0x114>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	4a37      	ldr	r2, [pc, #220]	; (800bd48 <xTaskResumeAll+0x114>)
 800bc6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6e:	4b36      	ldr	r3, [pc, #216]	; (800bd48 <xTaskResumeAll+0x114>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d161      	bne.n	800bd3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc76:	4b35      	ldr	r3, [pc, #212]	; (800bd4c <xTaskResumeAll+0x118>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d05d      	beq.n	800bd3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc7e:	e02e      	b.n	800bcde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc80:	4b33      	ldr	r3, [pc, #204]	; (800bd50 <xTaskResumeAll+0x11c>)
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3318      	adds	r3, #24
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff fd50 	bl	800b732 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3304      	adds	r3, #4
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fd4b 	bl	800b732 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	2201      	movs	r2, #1
 800bca2:	409a      	lsls	r2, r3
 800bca4:	4b2b      	ldr	r3, [pc, #172]	; (800bd54 <xTaskResumeAll+0x120>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	4a2a      	ldr	r2, [pc, #168]	; (800bd54 <xTaskResumeAll+0x120>)
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4a27      	ldr	r2, [pc, #156]	; (800bd58 <xTaskResumeAll+0x124>)
 800bcbc:	441a      	add	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	f7ff fcd7 	bl	800b678 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcce:	4b23      	ldr	r3, [pc, #140]	; (800bd5c <xTaskResumeAll+0x128>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d302      	bcc.n	800bcde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bcd8:	4b21      	ldr	r3, [pc, #132]	; (800bd60 <xTaskResumeAll+0x12c>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcde:	4b1c      	ldr	r3, [pc, #112]	; (800bd50 <xTaskResumeAll+0x11c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1cc      	bne.n	800bc80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcec:	f000 fa12 	bl	800c114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcf0:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <xTaskResumeAll+0x130>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d010      	beq.n	800bd1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcfc:	f000 f836 	bl	800bd6c <xTaskIncrementTick>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bd06:	4b16      	ldr	r3, [pc, #88]	; (800bd60 <xTaskResumeAll+0x12c>)
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1f1      	bne.n	800bcfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bd18:	4b12      	ldr	r3, [pc, #72]	; (800bd64 <xTaskResumeAll+0x130>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd1e:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <xTaskResumeAll+0x12c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d009      	beq.n	800bd3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd26:	2301      	movs	r3, #1
 800bd28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <xTaskResumeAll+0x134>)
 800bd2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd3a:	f000 fdd3 	bl	800c8e4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20001460 	.word	0x20001460
 800bd4c:	20001438 	.word	0x20001438
 800bd50:	200013f8 	.word	0x200013f8
 800bd54:	20001440 	.word	0x20001440
 800bd58:	2000133c 	.word	0x2000133c
 800bd5c:	20001338 	.word	0x20001338
 800bd60:	2000144c 	.word	0x2000144c
 800bd64:	20001448 	.word	0x20001448
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd76:	4b4e      	ldr	r3, [pc, #312]	; (800beb0 <xTaskIncrementTick+0x144>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f040 808e 	bne.w	800be9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd80:	4b4c      	ldr	r3, [pc, #304]	; (800beb4 <xTaskIncrementTick+0x148>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3301      	adds	r3, #1
 800bd86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd88:	4a4a      	ldr	r2, [pc, #296]	; (800beb4 <xTaskIncrementTick+0x148>)
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d120      	bne.n	800bdd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd94:	4b48      	ldr	r3, [pc, #288]	; (800beb8 <xTaskIncrementTick+0x14c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00a      	beq.n	800bdb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	603b      	str	r3, [r7, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <xTaskIncrementTick+0x46>
 800bdb4:	4b40      	ldr	r3, [pc, #256]	; (800beb8 <xTaskIncrementTick+0x14c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	4b40      	ldr	r3, [pc, #256]	; (800bebc <xTaskIncrementTick+0x150>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a3e      	ldr	r2, [pc, #248]	; (800beb8 <xTaskIncrementTick+0x14c>)
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	4a3e      	ldr	r2, [pc, #248]	; (800bebc <xTaskIncrementTick+0x150>)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	4b3d      	ldr	r3, [pc, #244]	; (800bec0 <xTaskIncrementTick+0x154>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	4a3c      	ldr	r2, [pc, #240]	; (800bec0 <xTaskIncrementTick+0x154>)
 800bdd0:	6013      	str	r3, [r2, #0]
 800bdd2:	f000 f99f 	bl	800c114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdd6:	4b3b      	ldr	r3, [pc, #236]	; (800bec4 <xTaskIncrementTick+0x158>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d348      	bcc.n	800be72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bde0:	4b35      	ldr	r3, [pc, #212]	; (800beb8 <xTaskIncrementTick+0x14c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d104      	bne.n	800bdf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdea:	4b36      	ldr	r3, [pc, #216]	; (800bec4 <xTaskIncrementTick+0x158>)
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf0:	601a      	str	r2, [r3, #0]
					break;
 800bdf2:	e03e      	b.n	800be72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	4b30      	ldr	r3, [pc, #192]	; (800beb8 <xTaskIncrementTick+0x14c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d203      	bcs.n	800be14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be0c:	4a2d      	ldr	r2, [pc, #180]	; (800bec4 <xTaskIncrementTick+0x158>)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be12:	e02e      	b.n	800be72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fc8a 	bl	800b732 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	3318      	adds	r3, #24
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff fc81 	bl	800b732 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be34:	2201      	movs	r2, #1
 800be36:	409a      	lsls	r2, r3
 800be38:	4b23      	ldr	r3, [pc, #140]	; (800bec8 <xTaskIncrementTick+0x15c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	4a22      	ldr	r2, [pc, #136]	; (800bec8 <xTaskIncrementTick+0x15c>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a1f      	ldr	r2, [pc, #124]	; (800becc <xTaskIncrementTick+0x160>)
 800be50:	441a      	add	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7ff fc0d 	bl	800b678 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be62:	4b1b      	ldr	r3, [pc, #108]	; (800bed0 <xTaskIncrementTick+0x164>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	429a      	cmp	r2, r3
 800be6a:	d3b9      	bcc.n	800bde0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be6c:	2301      	movs	r3, #1
 800be6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be70:	e7b6      	b.n	800bde0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be72:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <xTaskIncrementTick+0x164>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be78:	4914      	ldr	r1, [pc, #80]	; (800becc <xTaskIncrementTick+0x160>)
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d901      	bls.n	800be8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800be8a:	2301      	movs	r3, #1
 800be8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be8e:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <xTaskIncrementTick+0x168>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d007      	beq.n	800bea6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800be96:	2301      	movs	r3, #1
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	e004      	b.n	800bea6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be9c:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <xTaskIncrementTick+0x16c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	4a0d      	ldr	r2, [pc, #52]	; (800bed8 <xTaskIncrementTick+0x16c>)
 800bea4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bea6:	697b      	ldr	r3, [r7, #20]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20001460 	.word	0x20001460
 800beb4:	2000143c 	.word	0x2000143c
 800beb8:	200013f0 	.word	0x200013f0
 800bebc:	200013f4 	.word	0x200013f4
 800bec0:	20001450 	.word	0x20001450
 800bec4:	20001458 	.word	0x20001458
 800bec8:	20001440 	.word	0x20001440
 800becc:	2000133c 	.word	0x2000133c
 800bed0:	20001338 	.word	0x20001338
 800bed4:	2000144c 	.word	0x2000144c
 800bed8:	20001448 	.word	0x20001448

0800bedc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bee2:	4b29      	ldr	r3, [pc, #164]	; (800bf88 <vTaskSwitchContext+0xac>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800beea:	4b28      	ldr	r3, [pc, #160]	; (800bf8c <vTaskSwitchContext+0xb0>)
 800beec:	2201      	movs	r2, #1
 800beee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bef0:	e044      	b.n	800bf7c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bef2:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <vTaskSwitchContext+0xb0>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef8:	4b25      	ldr	r3, [pc, #148]	; (800bf90 <vTaskSwitchContext+0xb4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	fab3 f383 	clz	r3, r3
 800bf04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf06:	7afb      	ldrb	r3, [r7, #11]
 800bf08:	f1c3 031f 	rsb	r3, r3, #31
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	4921      	ldr	r1, [pc, #132]	; (800bf94 <vTaskSwitchContext+0xb8>)
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	440b      	add	r3, r1
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	607b      	str	r3, [r7, #4]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <vTaskSwitchContext+0x5a>
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4a14      	ldr	r2, [pc, #80]	; (800bf94 <vTaskSwitchContext+0xb8>)
 800bf44:	4413      	add	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	605a      	str	r2, [r3, #4]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d104      	bne.n	800bf68 <vTaskSwitchContext+0x8c>
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	605a      	str	r2, [r3, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <vTaskSwitchContext+0xbc>)
 800bf70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <vTaskSwitchContext+0xbc>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	334c      	adds	r3, #76	; 0x4c
 800bf78:	4a08      	ldr	r2, [pc, #32]	; (800bf9c <vTaskSwitchContext+0xc0>)
 800bf7a:	6013      	str	r3, [r2, #0]
}
 800bf7c:	bf00      	nop
 800bf7e:	371c      	adds	r7, #28
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr
 800bf88:	20001460 	.word	0x20001460
 800bf8c:	2000144c 	.word	0x2000144c
 800bf90:	20001440 	.word	0x20001440
 800bf94:	2000133c 	.word	0x2000133c
 800bf98:	20001338 	.word	0x20001338
 800bf9c:	20000068 	.word	0x20000068

0800bfa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfa8:	f000 f852 	bl	800c050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfac:	4b06      	ldr	r3, [pc, #24]	; (800bfc8 <prvIdleTask+0x28>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d9f9      	bls.n	800bfa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <prvIdleTask+0x2c>)
 800bfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfc4:	e7f0      	b.n	800bfa8 <prvIdleTask+0x8>
 800bfc6:	bf00      	nop
 800bfc8:	2000133c 	.word	0x2000133c
 800bfcc:	e000ed04 	.word	0xe000ed04

0800bfd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	607b      	str	r3, [r7, #4]
 800bfda:	e00c      	b.n	800bff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4a12      	ldr	r2, [pc, #72]	; (800c030 <prvInitialiseTaskLists+0x60>)
 800bfe8:	4413      	add	r3, r2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff fb17 	bl	800b61e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3301      	adds	r3, #1
 800bff4:	607b      	str	r3, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b06      	cmp	r3, #6
 800bffa:	d9ef      	bls.n	800bfdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bffc:	480d      	ldr	r0, [pc, #52]	; (800c034 <prvInitialiseTaskLists+0x64>)
 800bffe:	f7ff fb0e 	bl	800b61e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c002:	480d      	ldr	r0, [pc, #52]	; (800c038 <prvInitialiseTaskLists+0x68>)
 800c004:	f7ff fb0b 	bl	800b61e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c008:	480c      	ldr	r0, [pc, #48]	; (800c03c <prvInitialiseTaskLists+0x6c>)
 800c00a:	f7ff fb08 	bl	800b61e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c00e:	480c      	ldr	r0, [pc, #48]	; (800c040 <prvInitialiseTaskLists+0x70>)
 800c010:	f7ff fb05 	bl	800b61e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c014:	480b      	ldr	r0, [pc, #44]	; (800c044 <prvInitialiseTaskLists+0x74>)
 800c016:	f7ff fb02 	bl	800b61e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c01a:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <prvInitialiseTaskLists+0x78>)
 800c01c:	4a05      	ldr	r2, [pc, #20]	; (800c034 <prvInitialiseTaskLists+0x64>)
 800c01e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <prvInitialiseTaskLists+0x7c>)
 800c022:	4a05      	ldr	r2, [pc, #20]	; (800c038 <prvInitialiseTaskLists+0x68>)
 800c024:	601a      	str	r2, [r3, #0]
}
 800c026:	bf00      	nop
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	2000133c 	.word	0x2000133c
 800c034:	200013c8 	.word	0x200013c8
 800c038:	200013dc 	.word	0x200013dc
 800c03c:	200013f8 	.word	0x200013f8
 800c040:	2000140c 	.word	0x2000140c
 800c044:	20001424 	.word	0x20001424
 800c048:	200013f0 	.word	0x200013f0
 800c04c:	200013f4 	.word	0x200013f4

0800c050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c056:	e019      	b.n	800c08c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c058:	f000 fc14 	bl	800c884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c05c:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <prvCheckTasksWaitingTermination+0x50>)
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3304      	adds	r3, #4
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff fb62 	bl	800b732 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <prvCheckTasksWaitingTermination+0x54>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3b01      	subs	r3, #1
 800c074:	4a0b      	ldr	r2, [pc, #44]	; (800c0a4 <prvCheckTasksWaitingTermination+0x54>)
 800c076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c078:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <prvCheckTasksWaitingTermination+0x58>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	4a0a      	ldr	r2, [pc, #40]	; (800c0a8 <prvCheckTasksWaitingTermination+0x58>)
 800c080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c082:	f000 fc2f 	bl	800c8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f810 	bl	800c0ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c08c:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <prvCheckTasksWaitingTermination+0x58>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e1      	bne.n	800c058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	2000140c 	.word	0x2000140c
 800c0a4:	20001438 	.word	0x20001438
 800c0a8:	20001420 	.word	0x20001420

0800c0ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	334c      	adds	r3, #76	; 0x4c
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f001 fc97 	bl	800d9ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d108      	bne.n	800c0da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fdc7 	bl	800cc60 <vPortFree>
				vPortFree( pxTCB );
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fdc4 	bl	800cc60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0d8:	e018      	b.n	800c10c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d103      	bne.n	800c0ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fdbb 	bl	800cc60 <vPortFree>
	}
 800c0ea:	e00f      	b.n	800c10c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d00a      	beq.n	800c10c <prvDeleteTCB+0x60>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60fb      	str	r3, [r7, #12]
}
 800c108:	bf00      	nop
 800c10a:	e7fe      	b.n	800c10a <prvDeleteTCB+0x5e>
	}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <prvResetNextTaskUnblockTime+0x38>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <prvResetNextTaskUnblockTime+0x3c>)
 800c126:	f04f 32ff 	mov.w	r2, #4294967295
 800c12a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c12c:	e008      	b.n	800c140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c12e:	4b07      	ldr	r3, [pc, #28]	; (800c14c <prvResetNextTaskUnblockTime+0x38>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	4a04      	ldr	r2, [pc, #16]	; (800c150 <prvResetNextTaskUnblockTime+0x3c>)
 800c13e:	6013      	str	r3, [r2, #0]
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	200013f0 	.word	0x200013f0
 800c150:	20001458 	.word	0x20001458

0800c154 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c162:	f000 fb8f 	bl	800c884 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c166:	4b29      	ldr	r3, [pc, #164]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b02      	cmp	r3, #2
 800c172:	d01c      	beq.n	800c1ae <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c174:	4b25      	ldr	r3, [pc, #148]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	43d2      	mvns	r2, r2
 800c180:	400a      	ands	r2, r1
 800c182:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c186:	4b21      	ldr	r3, [pc, #132]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00b      	beq.n	800c1ae <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c196:	2101      	movs	r1, #1
 800c198:	6838      	ldr	r0, [r7, #0]
 800c19a:	f000 f9dd 	bl	800c558 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c19e:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <xTaskNotifyWait+0xbc>)
 800c1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a4:	601a      	str	r2, [r3, #0]
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c1ae:	f000 fb99 	bl	800c8e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c1b2:	f000 fb67 	bl	800c884 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c1bc:	4b13      	ldr	r3, [pc, #76]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c1c8:	4b10      	ldr	r3, [pc, #64]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d002      	beq.n	800c1dc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	e00a      	b.n	800c1f2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	43d2      	mvns	r2, r2
 800c1e8:	400a      	ands	r2, r1
 800c1ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1f2:	4b06      	ldr	r3, [pc, #24]	; (800c20c <xTaskNotifyWait+0xb8>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800c1fc:	f000 fb72 	bl	800c8e4 <vPortExitCritical>

		return xReturn;
 800c200:	697b      	ldr	r3, [r7, #20]
	}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20001338 	.word	0x20001338
 800c210:	e000ed04 	.word	0xe000ed04

0800c214 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	; 0x28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c224:	2301      	movs	r3, #1
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <xTaskGenericNotify+0x30>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	61bb      	str	r3, [r7, #24]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c248:	f000 fb1c 	bl	800c884 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d004      	beq.n	800c25c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c262:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d82d      	bhi.n	800c2ce <xTaskGenericNotify+0xba>
 800c272:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <xTaskGenericNotify+0x64>)
 800c274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c278:	0800c2f1 	.word	0x0800c2f1
 800c27c:	0800c28d 	.word	0x0800c28d
 800c280:	0800c29f 	.word	0x0800c29f
 800c284:	0800c2af 	.word	0x0800c2af
 800c288:	0800c2b9 	.word	0x0800c2b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c28c:	6a3b      	ldr	r3, [r7, #32]
 800c28e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	431a      	orrs	r2, r3
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c29c:	e02b      	b.n	800c2f6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c29e:	6a3b      	ldr	r3, [r7, #32]
 800c2a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c2ac:	e023      	b.n	800c2f6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c2b6:	e01e      	b.n	800c2f6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c2b8:	7ffb      	ldrb	r3, [r7, #31]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d004      	beq.n	800c2c8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c2c6:	e016      	b.n	800c2f6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c2cc:	e013      	b.n	800c2f6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d00c      	beq.n	800c2f4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	617b      	str	r3, [r7, #20]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <xTaskGenericNotify+0xda>
					break;
 800c2f0:	bf00      	nop
 800c2f2:	e000      	b.n	800c2f6 <xTaskGenericNotify+0xe2>

					break;
 800c2f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c2f6:	7ffb      	ldrb	r3, [r7, #31]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d139      	bne.n	800c370 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff fa16 	bl	800b732 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30a:	2201      	movs	r2, #1
 800c30c:	409a      	lsls	r2, r3
 800c30e:	4b1c      	ldr	r3, [pc, #112]	; (800c380 <xTaskGenericNotify+0x16c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4313      	orrs	r3, r2
 800c314:	4a1a      	ldr	r2, [pc, #104]	; (800c380 <xTaskGenericNotify+0x16c>)
 800c316:	6013      	str	r3, [r2, #0]
 800c318:	6a3b      	ldr	r3, [r7, #32]
 800c31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4a17      	ldr	r2, [pc, #92]	; (800c384 <xTaskGenericNotify+0x170>)
 800c326:	441a      	add	r2, r3
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	3304      	adds	r3, #4
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7ff f9a2 	bl	800b678 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <xTaskGenericNotify+0x13e>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	613b      	str	r3, [r7, #16]
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <xTaskGenericNotify+0x174>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d907      	bls.n	800c370 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <xTaskGenericNotify+0x178>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c370:	f000 fab8 	bl	800c8e4 <vPortExitCritical>

		return xReturn;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c376:	4618      	mov	r0, r3
 800c378:	3728      	adds	r7, #40	; 0x28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	20001440 	.word	0x20001440
 800c384:	2000133c 	.word	0x2000133c
 800c388:	20001338 	.word	0x20001338
 800c38c:	e000ed04 	.word	0xe000ed04

0800c390 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08e      	sub	sp, #56	; 0x38
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	4613      	mov	r3, r2
 800c39e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10a      	bne.n	800c3c0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3c0:	f000 fb42 	bl	800ca48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	623a      	str	r2, [r7, #32]
 800c3de:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c3e0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d004      	beq.n	800c3f4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c3fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	2202      	movs	r2, #2
 800c402:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d82f      	bhi.n	800c46c <xTaskGenericNotifyFromISR+0xdc>
 800c40c:	a201      	add	r2, pc, #4	; (adr r2, 800c414 <xTaskGenericNotifyFromISR+0x84>)
 800c40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c412:	bf00      	nop
 800c414:	0800c48f 	.word	0x0800c48f
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c43b 	.word	0x0800c43b
 800c420:	0800c44b 	.word	0x0800c44b
 800c424:	0800c455 	.word	0x0800c455
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	431a      	orrs	r2, r3
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c438:	e02c      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c448:	e024      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c452:	e01f      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d004      	beq.n	800c466 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c464:	e016      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c466:	2300      	movs	r3, #0
 800c468:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c46a:	e013      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c476:	d00c      	beq.n	800c492 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	61bb      	str	r3, [r7, #24]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <xTaskGenericNotifyFromISR+0x104>
					break;
 800c492:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d145      	bne.n	800c528 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00a      	beq.n	800c4ba <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	617b      	str	r3, [r7, #20]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ba:	4b21      	ldr	r3, [pc, #132]	; (800c540 <xTaskGenericNotifyFromISR+0x1b0>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d11c      	bne.n	800c4fc <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff f933 	bl	800b732 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	409a      	lsls	r2, r3
 800c4d4:	4b1b      	ldr	r3, [pc, #108]	; (800c544 <xTaskGenericNotifyFromISR+0x1b4>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	4a1a      	ldr	r2, [pc, #104]	; (800c544 <xTaskGenericNotifyFromISR+0x1b4>)
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4a17      	ldr	r2, [pc, #92]	; (800c548 <xTaskGenericNotifyFromISR+0x1b8>)
 800c4ec:	441a      	add	r2, r3
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	f7ff f8bf 	bl	800b678 <vListInsertEnd>
 800c4fa:	e005      	b.n	800c508 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	3318      	adds	r3, #24
 800c500:	4619      	mov	r1, r3
 800c502:	4812      	ldr	r0, [pc, #72]	; (800c54c <xTaskGenericNotifyFromISR+0x1bc>)
 800c504:	f7ff f8b8 	bl	800b678 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4b10      	ldr	r3, [pc, #64]	; (800c550 <xTaskGenericNotifyFromISR+0x1c0>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c512:	429a      	cmp	r2, r3
 800c514:	d908      	bls.n	800c528 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d002      	beq.n	800c522 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51e:	2201      	movs	r2, #1
 800c520:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c522:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <xTaskGenericNotifyFromISR+0x1c4>)
 800c524:	2201      	movs	r2, #1
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c532:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c536:	4618      	mov	r0, r3
 800c538:	3738      	adds	r7, #56	; 0x38
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20001460 	.word	0x20001460
 800c544:	20001440 	.word	0x20001440
 800c548:	2000133c 	.word	0x2000133c
 800c54c:	200013f8 	.word	0x200013f8
 800c550:	20001338 	.word	0x20001338
 800c554:	2000144c 	.word	0x2000144c

0800c558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c562:	4b29      	ldr	r3, [pc, #164]	; (800c608 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c568:	4b28      	ldr	r3, [pc, #160]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff f8df 	bl	800b732 <uxListRemove>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10b      	bne.n	800c592 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c57a:	4b24      	ldr	r3, [pc, #144]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	2201      	movs	r2, #1
 800c582:	fa02 f303 	lsl.w	r3, r2, r3
 800c586:	43da      	mvns	r2, r3
 800c588:	4b21      	ldr	r3, [pc, #132]	; (800c610 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4013      	ands	r3, r2
 800c58e:	4a20      	ldr	r2, [pc, #128]	; (800c610 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c590:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d10a      	bne.n	800c5b0 <prvAddCurrentTaskToDelayedList+0x58>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d007      	beq.n	800c5b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	481a      	ldr	r0, [pc, #104]	; (800c614 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c5aa:	f7ff f865 	bl	800b678 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5ae:	e026      	b.n	800c5fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5b8:	4b14      	ldr	r3, [pc, #80]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d209      	bcs.n	800c5dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c8:	4b13      	ldr	r3, [pc, #76]	; (800c618 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	f7ff f873 	bl	800b6c0 <vListInsert>
}
 800c5da:	e010      	b.n	800c5fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7ff f869 	bl	800b6c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d202      	bcs.n	800c5fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5f8:	4a09      	ldr	r2, [pc, #36]	; (800c620 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	6013      	str	r3, [r2, #0]
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	2000143c 	.word	0x2000143c
 800c60c:	20001338 	.word	0x20001338
 800c610:	20001440 	.word	0x20001440
 800c614:	20001424 	.word	0x20001424
 800c618:	200013f4 	.word	0x200013f4
 800c61c:	200013f0 	.word	0x200013f0
 800c620:	20001458 	.word	0x20001458

0800c624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3b04      	subs	r3, #4
 800c634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f023 0201 	bic.w	r2, r3, #1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b04      	subs	r3, #4
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c654:	4a0c      	ldr	r2, [pc, #48]	; (800c688 <pxPortInitialiseStack+0x64>)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3b14      	subs	r3, #20
 800c65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3b04      	subs	r3, #4
 800c66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f06f 0202 	mvn.w	r2, #2
 800c672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3b20      	subs	r3, #32
 800c678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c67a:	68fb      	ldr	r3, [r7, #12]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	0800c68d 	.word	0x0800c68d

0800c68c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c696:	4b12      	ldr	r3, [pc, #72]	; (800c6e0 <prvTaskExitError+0x54>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69e:	d00a      	beq.n	800c6b6 <prvTaskExitError+0x2a>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60fb      	str	r3, [r7, #12]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <prvTaskExitError+0x28>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60bb      	str	r3, [r7, #8]
}
 800c6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6ca:	bf00      	nop
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0fc      	beq.n	800c6cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6d2:	bf00      	nop
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	2000000c 	.word	0x2000000c
	...

0800c6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <pxCurrentTCBConst2>)
 800c6f2:	6819      	ldr	r1, [r3, #0]
 800c6f4:	6808      	ldr	r0, [r1, #0]
 800c6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	f380 8809 	msr	PSP, r0
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8811 	msr	BASEPRI, r0
 800c70a:	4770      	bx	lr
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst2>:
 800c710:	20001338 	.word	0x20001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c718:	4808      	ldr	r0, [pc, #32]	; (800c73c <prvPortStartFirstTask+0x24>)
 800c71a:	6800      	ldr	r0, [r0, #0]
 800c71c:	6800      	ldr	r0, [r0, #0]
 800c71e:	f380 8808 	msr	MSP, r0
 800c722:	f04f 0000 	mov.w	r0, #0
 800c726:	f380 8814 	msr	CONTROL, r0
 800c72a:	b662      	cpsie	i
 800c72c:	b661      	cpsie	f
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	df00      	svc	0
 800c738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c73a:	bf00      	nop
 800c73c:	e000ed08 	.word	0xe000ed08

0800c740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c746:	4b46      	ldr	r3, [pc, #280]	; (800c860 <xPortStartScheduler+0x120>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a46      	ldr	r2, [pc, #280]	; (800c864 <xPortStartScheduler+0x124>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d10a      	bne.n	800c766 <xPortStartScheduler+0x26>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	613b      	str	r3, [r7, #16]
}
 800c762:	bf00      	nop
 800c764:	e7fe      	b.n	800c764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c766:	4b3e      	ldr	r3, [pc, #248]	; (800c860 <xPortStartScheduler+0x120>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a3f      	ldr	r2, [pc, #252]	; (800c868 <xPortStartScheduler+0x128>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d10a      	bne.n	800c786 <xPortStartScheduler+0x46>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	60fb      	str	r3, [r7, #12]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c786:	4b39      	ldr	r3, [pc, #228]	; (800c86c <xPortStartScheduler+0x12c>)
 800c788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	22ff      	movs	r2, #255	; 0xff
 800c796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	4b31      	ldr	r3, [pc, #196]	; (800c870 <xPortStartScheduler+0x130>)
 800c7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7ae:	4b31      	ldr	r3, [pc, #196]	; (800c874 <xPortStartScheduler+0x134>)
 800c7b0:	2207      	movs	r2, #7
 800c7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7b4:	e009      	b.n	800c7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7b6:	4b2f      	ldr	r3, [pc, #188]	; (800c874 <xPortStartScheduler+0x134>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	4a2d      	ldr	r2, [pc, #180]	; (800c874 <xPortStartScheduler+0x134>)
 800c7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ca:	78fb      	ldrb	r3, [r7, #3]
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d2:	2b80      	cmp	r3, #128	; 0x80
 800c7d4:	d0ef      	beq.n	800c7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7d6:	4b27      	ldr	r3, [pc, #156]	; (800c874 <xPortStartScheduler+0x134>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f1c3 0307 	rsb	r3, r3, #7
 800c7de:	2b04      	cmp	r3, #4
 800c7e0:	d00a      	beq.n	800c7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60bb      	str	r3, [r7, #8]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7f8:	4b1e      	ldr	r3, [pc, #120]	; (800c874 <xPortStartScheduler+0x134>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <xPortStartScheduler+0x134>)
 800c800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c802:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <xPortStartScheduler+0x134>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c80a:	4a1a      	ldr	r2, [pc, #104]	; (800c874 <xPortStartScheduler+0x134>)
 800c80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	b2da      	uxtb	r2, r3
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c816:	4b18      	ldr	r3, [pc, #96]	; (800c878 <xPortStartScheduler+0x138>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a17      	ldr	r2, [pc, #92]	; (800c878 <xPortStartScheduler+0x138>)
 800c81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c822:	4b15      	ldr	r3, [pc, #84]	; (800c878 <xPortStartScheduler+0x138>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a14      	ldr	r2, [pc, #80]	; (800c878 <xPortStartScheduler+0x138>)
 800c828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c82e:	f000 f8dd 	bl	800c9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c832:	4b12      	ldr	r3, [pc, #72]	; (800c87c <xPortStartScheduler+0x13c>)
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c838:	f000 f8fc 	bl	800ca34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c83c:	4b10      	ldr	r3, [pc, #64]	; (800c880 <xPortStartScheduler+0x140>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a0f      	ldr	r2, [pc, #60]	; (800c880 <xPortStartScheduler+0x140>)
 800c842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c848:	f7ff ff66 	bl	800c718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c84c:	f7ff fb46 	bl	800bedc <vTaskSwitchContext>
	prvTaskExitError();
 800c850:	f7ff ff1c 	bl	800c68c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	e000ed00 	.word	0xe000ed00
 800c864:	410fc271 	.word	0x410fc271
 800c868:	410fc270 	.word	0x410fc270
 800c86c:	e000e400 	.word	0xe000e400
 800c870:	20001464 	.word	0x20001464
 800c874:	20001468 	.word	0x20001468
 800c878:	e000ed20 	.word	0xe000ed20
 800c87c:	2000000c 	.word	0x2000000c
 800c880:	e000ef34 	.word	0xe000ef34

0800c884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	607b      	str	r3, [r7, #4]
}
 800c89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c89e:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <vPortEnterCritical+0x58>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	4a0d      	ldr	r2, [pc, #52]	; (800c8dc <vPortEnterCritical+0x58>)
 800c8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8a8:	4b0c      	ldr	r3, [pc, #48]	; (800c8dc <vPortEnterCritical+0x58>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d10f      	bne.n	800c8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <vPortEnterCritical+0x5c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00a      	beq.n	800c8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	603b      	str	r3, [r7, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	e7fe      	b.n	800c8ce <vPortEnterCritical+0x4a>
	}
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	2000000c 	.word	0x2000000c
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8ea:	4b12      	ldr	r3, [pc, #72]	; (800c934 <vPortExitCritical+0x50>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <vPortExitCritical+0x24>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	607b      	str	r3, [r7, #4]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <vPortExitCritical+0x50>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	4a09      	ldr	r2, [pc, #36]	; (800c934 <vPortExitCritical+0x50>)
 800c910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c912:	4b08      	ldr	r3, [pc, #32]	; (800c934 <vPortExitCritical+0x50>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <vPortExitCritical+0x42>
 800c91a:	2300      	movs	r3, #0
 800c91c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	f383 8811 	msr	BASEPRI, r3
}
 800c924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c926:	bf00      	nop
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	2000000c 	.word	0x2000000c
	...

0800c940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c940:	f3ef 8009 	mrs	r0, PSP
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	4b15      	ldr	r3, [pc, #84]	; (800c9a0 <pxCurrentTCBConst>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	f01e 0f10 	tst.w	lr, #16
 800c950:	bf08      	it	eq
 800c952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	6010      	str	r0, [r2, #0]
 800c95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c964:	f380 8811 	msr	BASEPRI, r0
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f7ff fab4 	bl	800bedc <vTaskSwitchContext>
 800c974:	f04f 0000 	mov.w	r0, #0
 800c978:	f380 8811 	msr	BASEPRI, r0
 800c97c:	bc09      	pop	{r0, r3}
 800c97e:	6819      	ldr	r1, [r3, #0]
 800c980:	6808      	ldr	r0, [r1, #0]
 800c982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c986:	f01e 0f10 	tst.w	lr, #16
 800c98a:	bf08      	it	eq
 800c98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c990:	f380 8809 	msr	PSP, r0
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	f3af 8000 	nop.w

0800c9a0 <pxCurrentTCBConst>:
 800c9a0:	20001338 	.word	0x20001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop

0800c9a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	607b      	str	r3, [r7, #4]
}
 800c9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9c2:	f7ff f9d3 	bl	800bd6c <xTaskIncrementTick>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <SysTick_Handler+0x40>)
 800c9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f383 8811 	msr	BASEPRI, r3
}
 800c9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <vPortSetupTimerInterrupt+0x34>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ca24 <vPortSetupTimerInterrupt+0x38>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ca28 <vPortSetupTimerInterrupt+0x3c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a0a      	ldr	r2, [pc, #40]	; (800ca2c <vPortSetupTimerInterrupt+0x40>)
 800ca02:	fba2 2303 	umull	r2, r3, r2, r3
 800ca06:	099b      	lsrs	r3, r3, #6
 800ca08:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <vPortSetupTimerInterrupt+0x44>)
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca0e:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <vPortSetupTimerInterrupt+0x34>)
 800ca10:	2207      	movs	r2, #7
 800ca12:	601a      	str	r2, [r3, #0]
}
 800ca14:	bf00      	nop
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	e000e010 	.word	0xe000e010
 800ca24:	e000e018 	.word	0xe000e018
 800ca28:	20000000 	.word	0x20000000
 800ca2c:	10624dd3 	.word	0x10624dd3
 800ca30:	e000e014 	.word	0xe000e014

0800ca34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca44 <vPortEnableVFP+0x10>
 800ca38:	6801      	ldr	r1, [r0, #0]
 800ca3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca3e:	6001      	str	r1, [r0, #0]
 800ca40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca42:	bf00      	nop
 800ca44:	e000ed88 	.word	0xe000ed88

0800ca48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca4e:	f3ef 8305 	mrs	r3, IPSR
 800ca52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b0f      	cmp	r3, #15
 800ca58:	d914      	bls.n	800ca84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca5a:	4a17      	ldr	r2, [pc, #92]	; (800cab8 <vPortValidateInterruptPriority+0x70>)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4413      	add	r3, r2
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca64:	4b15      	ldr	r3, [pc, #84]	; (800cabc <vPortValidateInterruptPriority+0x74>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	7afa      	ldrb	r2, [r7, #11]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d20a      	bcs.n	800ca84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	607b      	str	r3, [r7, #4]
}
 800ca80:	bf00      	nop
 800ca82:	e7fe      	b.n	800ca82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca84:	4b0e      	ldr	r3, [pc, #56]	; (800cac0 <vPortValidateInterruptPriority+0x78>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca8c:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <vPortValidateInterruptPriority+0x7c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d90a      	bls.n	800caaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	603b      	str	r3, [r7, #0]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <vPortValidateInterruptPriority+0x60>
	}
 800caaa:	bf00      	nop
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	e000e3f0 	.word	0xe000e3f0
 800cabc:	20001464 	.word	0x20001464
 800cac0:	e000ed0c 	.word	0xe000ed0c
 800cac4:	20001468 	.word	0x20001468

0800cac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b08a      	sub	sp, #40	; 0x28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cad4:	f7ff f8a0 	bl	800bc18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cad8:	4b5b      	ldr	r3, [pc, #364]	; (800cc48 <pvPortMalloc+0x180>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cae0:	f000 f920 	bl	800cd24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cae4:	4b59      	ldr	r3, [pc, #356]	; (800cc4c <pvPortMalloc+0x184>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4013      	ands	r3, r2
 800caec:	2b00      	cmp	r3, #0
 800caee:	f040 8093 	bne.w	800cc18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d01d      	beq.n	800cb34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800caf8:	2208      	movs	r2, #8
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f003 0307 	and.w	r3, r3, #7
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d014      	beq.n	800cb34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f023 0307 	bic.w	r3, r3, #7
 800cb10:	3308      	adds	r3, #8
 800cb12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00a      	beq.n	800cb34 <pvPortMalloc+0x6c>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	617b      	str	r3, [r7, #20]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d06e      	beq.n	800cc18 <pvPortMalloc+0x150>
 800cb3a:	4b45      	ldr	r3, [pc, #276]	; (800cc50 <pvPortMalloc+0x188>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d869      	bhi.n	800cc18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb44:	4b43      	ldr	r3, [pc, #268]	; (800cc54 <pvPortMalloc+0x18c>)
 800cb46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb48:	4b42      	ldr	r3, [pc, #264]	; (800cc54 <pvPortMalloc+0x18c>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb4e:	e004      	b.n	800cb5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d903      	bls.n	800cb6c <pvPortMalloc+0xa4>
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1f1      	bne.n	800cb50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb6c:	4b36      	ldr	r3, [pc, #216]	; (800cc48 <pvPortMalloc+0x180>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d050      	beq.n	800cc18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2208      	movs	r2, #8
 800cb7c:	4413      	add	r3, r2
 800cb7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	2308      	movs	r3, #8
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d91f      	bls.n	800cbd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <pvPortMalloc+0xf8>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	613b      	str	r3, [r7, #16]
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	1ad2      	subs	r2, r2, r3
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbd2:	69b8      	ldr	r0, [r7, #24]
 800cbd4:	f000 f908 	bl	800cde8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbd8:	4b1d      	ldr	r3, [pc, #116]	; (800cc50 <pvPortMalloc+0x188>)
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	4a1b      	ldr	r2, [pc, #108]	; (800cc50 <pvPortMalloc+0x188>)
 800cbe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbe6:	4b1a      	ldr	r3, [pc, #104]	; (800cc50 <pvPortMalloc+0x188>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	4b1b      	ldr	r3, [pc, #108]	; (800cc58 <pvPortMalloc+0x190>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d203      	bcs.n	800cbfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbf2:	4b17      	ldr	r3, [pc, #92]	; (800cc50 <pvPortMalloc+0x188>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <pvPortMalloc+0x190>)
 800cbf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <pvPortMalloc+0x184>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc0e:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <pvPortMalloc+0x194>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	4a11      	ldr	r2, [pc, #68]	; (800cc5c <pvPortMalloc+0x194>)
 800cc16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc18:	f7ff f80c 	bl	800bc34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	f003 0307 	and.w	r3, r3, #7
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <pvPortMalloc+0x174>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	60fb      	str	r3, [r7, #12]
}
 800cc38:	bf00      	nop
 800cc3a:	e7fe      	b.n	800cc3a <pvPortMalloc+0x172>
	return pvReturn;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3728      	adds	r7, #40	; 0x28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20005074 	.word	0x20005074
 800cc4c:	20005088 	.word	0x20005088
 800cc50:	20005078 	.word	0x20005078
 800cc54:	2000506c 	.word	0x2000506c
 800cc58:	2000507c 	.word	0x2000507c
 800cc5c:	20005080 	.word	0x20005080

0800cc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d04d      	beq.n	800cd0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc72:	2308      	movs	r3, #8
 800cc74:	425b      	negs	r3, r3
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	4413      	add	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	4b24      	ldr	r3, [pc, #144]	; (800cd18 <vPortFree+0xb8>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4013      	ands	r3, r2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10a      	bne.n	800cca4 <vPortFree+0x44>
	__asm volatile
 800cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	60fb      	str	r3, [r7, #12]
}
 800cca0:	bf00      	nop
 800cca2:	e7fe      	b.n	800cca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <vPortFree+0x62>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	60bb      	str	r3, [r7, #8]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	4b14      	ldr	r3, [pc, #80]	; (800cd18 <vPortFree+0xb8>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4013      	ands	r3, r2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01e      	beq.n	800cd0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d11a      	bne.n	800cd0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	4b0e      	ldr	r3, [pc, #56]	; (800cd18 <vPortFree+0xb8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	43db      	mvns	r3, r3
 800cce2:	401a      	ands	r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cce8:	f7fe ff96 	bl	800bc18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <vPortFree+0xbc>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	4a09      	ldr	r2, [pc, #36]	; (800cd1c <vPortFree+0xbc>)
 800ccf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccfa:	6938      	ldr	r0, [r7, #16]
 800ccfc:	f000 f874 	bl	800cde8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd00:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <vPortFree+0xc0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3301      	adds	r3, #1
 800cd06:	4a06      	ldr	r2, [pc, #24]	; (800cd20 <vPortFree+0xc0>)
 800cd08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd0a:	f7fe ff93 	bl	800bc34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd0e:	bf00      	nop
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20005088 	.word	0x20005088
 800cd1c:	20005078 	.word	0x20005078
 800cd20:	20005084 	.word	0x20005084

0800cd24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd30:	4b27      	ldr	r3, [pc, #156]	; (800cdd0 <prvHeapInit+0xac>)
 800cd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00c      	beq.n	800cd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3307      	adds	r3, #7
 800cd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f023 0307 	bic.w	r3, r3, #7
 800cd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	4a1f      	ldr	r2, [pc, #124]	; (800cdd0 <prvHeapInit+0xac>)
 800cd54:	4413      	add	r3, r2
 800cd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd5c:	4a1d      	ldr	r2, [pc, #116]	; (800cdd4 <prvHeapInit+0xb0>)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd62:	4b1c      	ldr	r3, [pc, #112]	; (800cdd4 <prvHeapInit+0xb0>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd70:	2208      	movs	r2, #8
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	1a9b      	subs	r3, r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 0307 	bic.w	r3, r3, #7
 800cd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4a15      	ldr	r2, [pc, #84]	; (800cdd8 <prvHeapInit+0xb4>)
 800cd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd86:	4b14      	ldr	r3, [pc, #80]	; (800cdd8 <prvHeapInit+0xb4>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd8e:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <prvHeapInit+0xb4>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	1ad2      	subs	r2, r2, r3
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cda4:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <prvHeapInit+0xb4>)
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4a0a      	ldr	r2, [pc, #40]	; (800cddc <prvHeapInit+0xb8>)
 800cdb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	4a09      	ldr	r2, [pc, #36]	; (800cde0 <prvHeapInit+0xbc>)
 800cdba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <prvHeapInit+0xc0>)
 800cdbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdc2:	601a      	str	r2, [r3, #0]
}
 800cdc4:	bf00      	nop
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	2000146c 	.word	0x2000146c
 800cdd4:	2000506c 	.word	0x2000506c
 800cdd8:	20005074 	.word	0x20005074
 800cddc:	2000507c 	.word	0x2000507c
 800cde0:	20005078 	.word	0x20005078
 800cde4:	20005088 	.word	0x20005088

0800cde8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdf0:	4b28      	ldr	r3, [pc, #160]	; (800ce94 <prvInsertBlockIntoFreeList+0xac>)
 800cdf2:	60fb      	str	r3, [r7, #12]
 800cdf4:	e002      	b.n	800cdfc <prvInsertBlockIntoFreeList+0x14>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d8f7      	bhi.n	800cdf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	4413      	add	r3, r2
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d108      	bne.n	800ce2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	441a      	add	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	441a      	add	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d118      	bne.n	800ce70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <prvInsertBlockIntoFreeList+0xb0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d00d      	beq.n	800ce66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	441a      	add	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	e008      	b.n	800ce78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce66:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <prvInsertBlockIntoFreeList+0xb0>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	e003      	b.n	800ce78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d002      	beq.n	800ce86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	2000506c 	.word	0x2000506c
 800ce98:	20005074 	.word	0x20005074

0800ce9c <__cvt>:
 800ce9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cea0:	ec55 4b10 	vmov	r4, r5, d0
 800cea4:	2d00      	cmp	r5, #0
 800cea6:	460e      	mov	r6, r1
 800cea8:	4619      	mov	r1, r3
 800ceaa:	462b      	mov	r3, r5
 800ceac:	bfbb      	ittet	lt
 800ceae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ceb2:	461d      	movlt	r5, r3
 800ceb4:	2300      	movge	r3, #0
 800ceb6:	232d      	movlt	r3, #45	; 0x2d
 800ceb8:	700b      	strb	r3, [r1, #0]
 800ceba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cec0:	4691      	mov	r9, r2
 800cec2:	f023 0820 	bic.w	r8, r3, #32
 800cec6:	bfbc      	itt	lt
 800cec8:	4622      	movlt	r2, r4
 800ceca:	4614      	movlt	r4, r2
 800cecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ced0:	d005      	beq.n	800cede <__cvt+0x42>
 800ced2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ced6:	d100      	bne.n	800ceda <__cvt+0x3e>
 800ced8:	3601      	adds	r6, #1
 800ceda:	2102      	movs	r1, #2
 800cedc:	e000      	b.n	800cee0 <__cvt+0x44>
 800cede:	2103      	movs	r1, #3
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	ab02      	add	r3, sp, #8
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	ec45 4b10 	vmov	d0, r4, r5
 800ceec:	4653      	mov	r3, sl
 800ceee:	4632      	mov	r2, r6
 800cef0:	f000 fed6 	bl	800dca0 <_dtoa_r>
 800cef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cef8:	4607      	mov	r7, r0
 800cefa:	d102      	bne.n	800cf02 <__cvt+0x66>
 800cefc:	f019 0f01 	tst.w	r9, #1
 800cf00:	d022      	beq.n	800cf48 <__cvt+0xac>
 800cf02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf06:	eb07 0906 	add.w	r9, r7, r6
 800cf0a:	d110      	bne.n	800cf2e <__cvt+0x92>
 800cf0c:	783b      	ldrb	r3, [r7, #0]
 800cf0e:	2b30      	cmp	r3, #48	; 0x30
 800cf10:	d10a      	bne.n	800cf28 <__cvt+0x8c>
 800cf12:	2200      	movs	r2, #0
 800cf14:	2300      	movs	r3, #0
 800cf16:	4620      	mov	r0, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	f7f3 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf1e:	b918      	cbnz	r0, 800cf28 <__cvt+0x8c>
 800cf20:	f1c6 0601 	rsb	r6, r6, #1
 800cf24:	f8ca 6000 	str.w	r6, [sl]
 800cf28:	f8da 3000 	ldr.w	r3, [sl]
 800cf2c:	4499      	add	r9, r3
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2300      	movs	r3, #0
 800cf32:	4620      	mov	r0, r4
 800cf34:	4629      	mov	r1, r5
 800cf36:	f7f3 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf3a:	b108      	cbz	r0, 800cf40 <__cvt+0xa4>
 800cf3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf40:	2230      	movs	r2, #48	; 0x30
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	454b      	cmp	r3, r9
 800cf46:	d307      	bcc.n	800cf58 <__cvt+0xbc>
 800cf48:	9b03      	ldr	r3, [sp, #12]
 800cf4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf4c:	1bdb      	subs	r3, r3, r7
 800cf4e:	4638      	mov	r0, r7
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	b004      	add	sp, #16
 800cf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf58:	1c59      	adds	r1, r3, #1
 800cf5a:	9103      	str	r1, [sp, #12]
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	e7f0      	b.n	800cf42 <__cvt+0xa6>

0800cf60 <__exponent>:
 800cf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf62:	4603      	mov	r3, r0
 800cf64:	2900      	cmp	r1, #0
 800cf66:	bfb8      	it	lt
 800cf68:	4249      	neglt	r1, r1
 800cf6a:	f803 2b02 	strb.w	r2, [r3], #2
 800cf6e:	bfb4      	ite	lt
 800cf70:	222d      	movlt	r2, #45	; 0x2d
 800cf72:	222b      	movge	r2, #43	; 0x2b
 800cf74:	2909      	cmp	r1, #9
 800cf76:	7042      	strb	r2, [r0, #1]
 800cf78:	dd2a      	ble.n	800cfd0 <__exponent+0x70>
 800cf7a:	f10d 0207 	add.w	r2, sp, #7
 800cf7e:	4617      	mov	r7, r2
 800cf80:	260a      	movs	r6, #10
 800cf82:	4694      	mov	ip, r2
 800cf84:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf88:	fb06 1415 	mls	r4, r6, r5, r1
 800cf8c:	3430      	adds	r4, #48	; 0x30
 800cf8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cf92:	460c      	mov	r4, r1
 800cf94:	2c63      	cmp	r4, #99	; 0x63
 800cf96:	f102 32ff 	add.w	r2, r2, #4294967295
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	dcf1      	bgt.n	800cf82 <__exponent+0x22>
 800cf9e:	3130      	adds	r1, #48	; 0x30
 800cfa0:	f1ac 0402 	sub.w	r4, ip, #2
 800cfa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cfa8:	1c41      	adds	r1, r0, #1
 800cfaa:	4622      	mov	r2, r4
 800cfac:	42ba      	cmp	r2, r7
 800cfae:	d30a      	bcc.n	800cfc6 <__exponent+0x66>
 800cfb0:	f10d 0209 	add.w	r2, sp, #9
 800cfb4:	eba2 020c 	sub.w	r2, r2, ip
 800cfb8:	42bc      	cmp	r4, r7
 800cfba:	bf88      	it	hi
 800cfbc:	2200      	movhi	r2, #0
 800cfbe:	4413      	add	r3, r2
 800cfc0:	1a18      	subs	r0, r3, r0
 800cfc2:	b003      	add	sp, #12
 800cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cfca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cfce:	e7ed      	b.n	800cfac <__exponent+0x4c>
 800cfd0:	2330      	movs	r3, #48	; 0x30
 800cfd2:	3130      	adds	r1, #48	; 0x30
 800cfd4:	7083      	strb	r3, [r0, #2]
 800cfd6:	70c1      	strb	r1, [r0, #3]
 800cfd8:	1d03      	adds	r3, r0, #4
 800cfda:	e7f1      	b.n	800cfc0 <__exponent+0x60>

0800cfdc <_printf_float>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	ed2d 8b02 	vpush	{d8}
 800cfe4:	b08d      	sub	sp, #52	; 0x34
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfec:	4616      	mov	r6, r2
 800cfee:	461f      	mov	r7, r3
 800cff0:	4605      	mov	r5, r0
 800cff2:	f000 fce7 	bl	800d9c4 <_localeconv_r>
 800cff6:	f8d0 a000 	ldr.w	sl, [r0]
 800cffa:	4650      	mov	r0, sl
 800cffc:	f7f3 f938 	bl	8000270 <strlen>
 800d000:	2300      	movs	r3, #0
 800d002:	930a      	str	r3, [sp, #40]	; 0x28
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	9305      	str	r3, [sp, #20]
 800d008:	f8d8 3000 	ldr.w	r3, [r8]
 800d00c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d010:	3307      	adds	r3, #7
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	f103 0208 	add.w	r2, r3, #8
 800d01a:	f8c8 2000 	str.w	r2, [r8]
 800d01e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d026:	9307      	str	r3, [sp, #28]
 800d028:	f8cd 8018 	str.w	r8, [sp, #24]
 800d02c:	ee08 0a10 	vmov	s16, r0
 800d030:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d038:	4b9e      	ldr	r3, [pc, #632]	; (800d2b4 <_printf_float+0x2d8>)
 800d03a:	f04f 32ff 	mov.w	r2, #4294967295
 800d03e:	f7f3 fd75 	bl	8000b2c <__aeabi_dcmpun>
 800d042:	bb88      	cbnz	r0, 800d0a8 <_printf_float+0xcc>
 800d044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d048:	4b9a      	ldr	r3, [pc, #616]	; (800d2b4 <_printf_float+0x2d8>)
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	f7f3 fd4f 	bl	8000af0 <__aeabi_dcmple>
 800d052:	bb48      	cbnz	r0, 800d0a8 <_printf_float+0xcc>
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	f7f3 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800d060:	b110      	cbz	r0, 800d068 <_printf_float+0x8c>
 800d062:	232d      	movs	r3, #45	; 0x2d
 800d064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d068:	4a93      	ldr	r2, [pc, #588]	; (800d2b8 <_printf_float+0x2dc>)
 800d06a:	4b94      	ldr	r3, [pc, #592]	; (800d2bc <_printf_float+0x2e0>)
 800d06c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d070:	bf94      	ite	ls
 800d072:	4690      	movls	r8, r2
 800d074:	4698      	movhi	r8, r3
 800d076:	2303      	movs	r3, #3
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	9b05      	ldr	r3, [sp, #20]
 800d07c:	f023 0304 	bic.w	r3, r3, #4
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	f04f 0900 	mov.w	r9, #0
 800d086:	9700      	str	r7, [sp, #0]
 800d088:	4633      	mov	r3, r6
 800d08a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d08c:	4621      	mov	r1, r4
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f9da 	bl	800d448 <_printf_common>
 800d094:	3001      	adds	r0, #1
 800d096:	f040 8090 	bne.w	800d1ba <_printf_float+0x1de>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b00d      	add	sp, #52	; 0x34
 800d0a0:	ecbd 8b02 	vpop	{d8}
 800d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f7f3 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 800d0b4:	b140      	cbz	r0, 800d0c8 <_printf_float+0xec>
 800d0b6:	464b      	mov	r3, r9
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	bfbc      	itt	lt
 800d0bc:	232d      	movlt	r3, #45	; 0x2d
 800d0be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0c2:	4a7f      	ldr	r2, [pc, #508]	; (800d2c0 <_printf_float+0x2e4>)
 800d0c4:	4b7f      	ldr	r3, [pc, #508]	; (800d2c4 <_printf_float+0x2e8>)
 800d0c6:	e7d1      	b.n	800d06c <_printf_float+0x90>
 800d0c8:	6863      	ldr	r3, [r4, #4]
 800d0ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0ce:	9206      	str	r2, [sp, #24]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	d13f      	bne.n	800d154 <_printf_float+0x178>
 800d0d4:	2306      	movs	r3, #6
 800d0d6:	6063      	str	r3, [r4, #4]
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	6861      	ldr	r1, [r4, #4]
 800d0dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	9303      	str	r3, [sp, #12]
 800d0e4:	ab0a      	add	r3, sp, #40	; 0x28
 800d0e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0ea:	ab09      	add	r3, sp, #36	; 0x24
 800d0ec:	ec49 8b10 	vmov	d0, r8, r9
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	6022      	str	r2, [r4, #0]
 800d0f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7ff fecf 	bl	800ce9c <__cvt>
 800d0fe:	9b06      	ldr	r3, [sp, #24]
 800d100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d102:	2b47      	cmp	r3, #71	; 0x47
 800d104:	4680      	mov	r8, r0
 800d106:	d108      	bne.n	800d11a <_printf_float+0x13e>
 800d108:	1cc8      	adds	r0, r1, #3
 800d10a:	db02      	blt.n	800d112 <_printf_float+0x136>
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	4299      	cmp	r1, r3
 800d110:	dd41      	ble.n	800d196 <_printf_float+0x1ba>
 800d112:	f1ab 0302 	sub.w	r3, fp, #2
 800d116:	fa5f fb83 	uxtb.w	fp, r3
 800d11a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d11e:	d820      	bhi.n	800d162 <_printf_float+0x186>
 800d120:	3901      	subs	r1, #1
 800d122:	465a      	mov	r2, fp
 800d124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d128:	9109      	str	r1, [sp, #36]	; 0x24
 800d12a:	f7ff ff19 	bl	800cf60 <__exponent>
 800d12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d130:	1813      	adds	r3, r2, r0
 800d132:	2a01      	cmp	r2, #1
 800d134:	4681      	mov	r9, r0
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	dc02      	bgt.n	800d140 <_printf_float+0x164>
 800d13a:	6822      	ldr	r2, [r4, #0]
 800d13c:	07d2      	lsls	r2, r2, #31
 800d13e:	d501      	bpl.n	800d144 <_printf_float+0x168>
 800d140:	3301      	adds	r3, #1
 800d142:	6123      	str	r3, [r4, #16]
 800d144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d09c      	beq.n	800d086 <_printf_float+0xaa>
 800d14c:	232d      	movs	r3, #45	; 0x2d
 800d14e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d152:	e798      	b.n	800d086 <_printf_float+0xaa>
 800d154:	9a06      	ldr	r2, [sp, #24]
 800d156:	2a47      	cmp	r2, #71	; 0x47
 800d158:	d1be      	bne.n	800d0d8 <_printf_float+0xfc>
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1bc      	bne.n	800d0d8 <_printf_float+0xfc>
 800d15e:	2301      	movs	r3, #1
 800d160:	e7b9      	b.n	800d0d6 <_printf_float+0xfa>
 800d162:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d166:	d118      	bne.n	800d19a <_printf_float+0x1be>
 800d168:	2900      	cmp	r1, #0
 800d16a:	6863      	ldr	r3, [r4, #4]
 800d16c:	dd0b      	ble.n	800d186 <_printf_float+0x1aa>
 800d16e:	6121      	str	r1, [r4, #16]
 800d170:	b913      	cbnz	r3, 800d178 <_printf_float+0x19c>
 800d172:	6822      	ldr	r2, [r4, #0]
 800d174:	07d0      	lsls	r0, r2, #31
 800d176:	d502      	bpl.n	800d17e <_printf_float+0x1a2>
 800d178:	3301      	adds	r3, #1
 800d17a:	440b      	add	r3, r1
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d180:	f04f 0900 	mov.w	r9, #0
 800d184:	e7de      	b.n	800d144 <_printf_float+0x168>
 800d186:	b913      	cbnz	r3, 800d18e <_printf_float+0x1b2>
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	07d2      	lsls	r2, r2, #31
 800d18c:	d501      	bpl.n	800d192 <_printf_float+0x1b6>
 800d18e:	3302      	adds	r3, #2
 800d190:	e7f4      	b.n	800d17c <_printf_float+0x1a0>
 800d192:	2301      	movs	r3, #1
 800d194:	e7f2      	b.n	800d17c <_printf_float+0x1a0>
 800d196:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19c:	4299      	cmp	r1, r3
 800d19e:	db05      	blt.n	800d1ac <_printf_float+0x1d0>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	6121      	str	r1, [r4, #16]
 800d1a4:	07d8      	lsls	r0, r3, #31
 800d1a6:	d5ea      	bpl.n	800d17e <_printf_float+0x1a2>
 800d1a8:	1c4b      	adds	r3, r1, #1
 800d1aa:	e7e7      	b.n	800d17c <_printf_float+0x1a0>
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	bfd4      	ite	le
 800d1b0:	f1c1 0202 	rsble	r2, r1, #2
 800d1b4:	2201      	movgt	r2, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	e7e0      	b.n	800d17c <_printf_float+0x1a0>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	055a      	lsls	r2, r3, #21
 800d1be:	d407      	bmi.n	800d1d0 <_printf_float+0x1f4>
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	4642      	mov	r2, r8
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	d12c      	bne.n	800d228 <_printf_float+0x24c>
 800d1ce:	e764      	b.n	800d09a <_printf_float+0xbe>
 800d1d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1d4:	f240 80e0 	bls.w	800d398 <_printf_float+0x3bc>
 800d1d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f7f3 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d034      	beq.n	800d252 <_printf_float+0x276>
 800d1e8:	4a37      	ldr	r2, [pc, #220]	; (800d2c8 <_printf_float+0x2ec>)
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b8      	blx	r7
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f af51 	beq.w	800d09a <_printf_float+0xbe>
 800d1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	db02      	blt.n	800d206 <_printf_float+0x22a>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	07d8      	lsls	r0, r3, #31
 800d204:	d510      	bpl.n	800d228 <_printf_float+0x24c>
 800d206:	ee18 3a10 	vmov	r3, s16
 800d20a:	4652      	mov	r2, sl
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	f43f af41 	beq.w	800d09a <_printf_float+0xbe>
 800d218:	f04f 0800 	mov.w	r8, #0
 800d21c:	f104 091a 	add.w	r9, r4, #26
 800d220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d222:	3b01      	subs	r3, #1
 800d224:	4543      	cmp	r3, r8
 800d226:	dc09      	bgt.n	800d23c <_printf_float+0x260>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	079b      	lsls	r3, r3, #30
 800d22c:	f100 8107 	bmi.w	800d43e <_printf_float+0x462>
 800d230:	68e0      	ldr	r0, [r4, #12]
 800d232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d234:	4298      	cmp	r0, r3
 800d236:	bfb8      	it	lt
 800d238:	4618      	movlt	r0, r3
 800d23a:	e730      	b.n	800d09e <_printf_float+0xc2>
 800d23c:	2301      	movs	r3, #1
 800d23e:	464a      	mov	r2, r9
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	47b8      	blx	r7
 800d246:	3001      	adds	r0, #1
 800d248:	f43f af27 	beq.w	800d09a <_printf_float+0xbe>
 800d24c:	f108 0801 	add.w	r8, r8, #1
 800d250:	e7e6      	b.n	800d220 <_printf_float+0x244>
 800d252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	dc39      	bgt.n	800d2cc <_printf_float+0x2f0>
 800d258:	4a1b      	ldr	r2, [pc, #108]	; (800d2c8 <_printf_float+0x2ec>)
 800d25a:	2301      	movs	r3, #1
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af19 	beq.w	800d09a <_printf_float+0xbe>
 800d268:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d26c:	4313      	orrs	r3, r2
 800d26e:	d102      	bne.n	800d276 <_printf_float+0x29a>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	d5d8      	bpl.n	800d228 <_printf_float+0x24c>
 800d276:	ee18 3a10 	vmov	r3, s16
 800d27a:	4652      	mov	r2, sl
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	47b8      	blx	r7
 800d282:	3001      	adds	r0, #1
 800d284:	f43f af09 	beq.w	800d09a <_printf_float+0xbe>
 800d288:	f04f 0900 	mov.w	r9, #0
 800d28c:	f104 0a1a 	add.w	sl, r4, #26
 800d290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d292:	425b      	negs	r3, r3
 800d294:	454b      	cmp	r3, r9
 800d296:	dc01      	bgt.n	800d29c <_printf_float+0x2c0>
 800d298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d29a:	e792      	b.n	800d1c2 <_printf_float+0x1e6>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4652      	mov	r2, sl
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b8      	blx	r7
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	f43f aef7 	beq.w	800d09a <_printf_float+0xbe>
 800d2ac:	f109 0901 	add.w	r9, r9, #1
 800d2b0:	e7ee      	b.n	800d290 <_printf_float+0x2b4>
 800d2b2:	bf00      	nop
 800d2b4:	7fefffff 	.word	0x7fefffff
 800d2b8:	08012168 	.word	0x08012168
 800d2bc:	0801216c 	.word	0x0801216c
 800d2c0:	08012170 	.word	0x08012170
 800d2c4:	08012174 	.word	0x08012174
 800d2c8:	08012178 	.word	0x08012178
 800d2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	bfa8      	it	ge
 800d2d4:	461a      	movge	r2, r3
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	4691      	mov	r9, r2
 800d2da:	dc37      	bgt.n	800d34c <_printf_float+0x370>
 800d2dc:	f04f 0b00 	mov.w	fp, #0
 800d2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2e4:	f104 021a 	add.w	r2, r4, #26
 800d2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	eba3 0309 	sub.w	r3, r3, r9
 800d2f0:	455b      	cmp	r3, fp
 800d2f2:	dc33      	bgt.n	800d35c <_printf_float+0x380>
 800d2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	db3b      	blt.n	800d374 <_printf_float+0x398>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	07da      	lsls	r2, r3, #31
 800d300:	d438      	bmi.n	800d374 <_printf_float+0x398>
 800d302:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d306:	eba2 0903 	sub.w	r9, r2, r3
 800d30a:	9b05      	ldr	r3, [sp, #20]
 800d30c:	1ad2      	subs	r2, r2, r3
 800d30e:	4591      	cmp	r9, r2
 800d310:	bfa8      	it	ge
 800d312:	4691      	movge	r9, r2
 800d314:	f1b9 0f00 	cmp.w	r9, #0
 800d318:	dc35      	bgt.n	800d386 <_printf_float+0x3aa>
 800d31a:	f04f 0800 	mov.w	r8, #0
 800d31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d322:	f104 0a1a 	add.w	sl, r4, #26
 800d326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	eba3 0309 	sub.w	r3, r3, r9
 800d330:	4543      	cmp	r3, r8
 800d332:	f77f af79 	ble.w	800d228 <_printf_float+0x24c>
 800d336:	2301      	movs	r3, #1
 800d338:	4652      	mov	r2, sl
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	f43f aeaa 	beq.w	800d09a <_printf_float+0xbe>
 800d346:	f108 0801 	add.w	r8, r8, #1
 800d34a:	e7ec      	b.n	800d326 <_printf_float+0x34a>
 800d34c:	4613      	mov	r3, r2
 800d34e:	4631      	mov	r1, r6
 800d350:	4642      	mov	r2, r8
 800d352:	4628      	mov	r0, r5
 800d354:	47b8      	blx	r7
 800d356:	3001      	adds	r0, #1
 800d358:	d1c0      	bne.n	800d2dc <_printf_float+0x300>
 800d35a:	e69e      	b.n	800d09a <_printf_float+0xbe>
 800d35c:	2301      	movs	r3, #1
 800d35e:	4631      	mov	r1, r6
 800d360:	4628      	mov	r0, r5
 800d362:	9205      	str	r2, [sp, #20]
 800d364:	47b8      	blx	r7
 800d366:	3001      	adds	r0, #1
 800d368:	f43f ae97 	beq.w	800d09a <_printf_float+0xbe>
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	f10b 0b01 	add.w	fp, fp, #1
 800d372:	e7b9      	b.n	800d2e8 <_printf_float+0x30c>
 800d374:	ee18 3a10 	vmov	r3, s16
 800d378:	4652      	mov	r2, sl
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	d1be      	bne.n	800d302 <_printf_float+0x326>
 800d384:	e689      	b.n	800d09a <_printf_float+0xbe>
 800d386:	9a05      	ldr	r2, [sp, #20]
 800d388:	464b      	mov	r3, r9
 800d38a:	4442      	add	r2, r8
 800d38c:	4631      	mov	r1, r6
 800d38e:	4628      	mov	r0, r5
 800d390:	47b8      	blx	r7
 800d392:	3001      	adds	r0, #1
 800d394:	d1c1      	bne.n	800d31a <_printf_float+0x33e>
 800d396:	e680      	b.n	800d09a <_printf_float+0xbe>
 800d398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d39a:	2a01      	cmp	r2, #1
 800d39c:	dc01      	bgt.n	800d3a2 <_printf_float+0x3c6>
 800d39e:	07db      	lsls	r3, r3, #31
 800d3a0:	d53a      	bpl.n	800d418 <_printf_float+0x43c>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4642      	mov	r2, r8
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	47b8      	blx	r7
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	f43f ae74 	beq.w	800d09a <_printf_float+0xbe>
 800d3b2:	ee18 3a10 	vmov	r3, s16
 800d3b6:	4652      	mov	r2, sl
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f ae6b 	beq.w	800d09a <_printf_float+0xbe>
 800d3c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d3d0:	f7f3 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3d4:	b9d8      	cbnz	r0, 800d40e <_printf_float+0x432>
 800d3d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d3da:	f108 0201 	add.w	r2, r8, #1
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d10e      	bne.n	800d406 <_printf_float+0x42a>
 800d3e8:	e657      	b.n	800d09a <_printf_float+0xbe>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4652      	mov	r2, sl
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	47b8      	blx	r7
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f43f ae50 	beq.w	800d09a <_printf_float+0xbe>
 800d3fa:	f108 0801 	add.w	r8, r8, #1
 800d3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d400:	3b01      	subs	r3, #1
 800d402:	4543      	cmp	r3, r8
 800d404:	dcf1      	bgt.n	800d3ea <_printf_float+0x40e>
 800d406:	464b      	mov	r3, r9
 800d408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d40c:	e6da      	b.n	800d1c4 <_printf_float+0x1e8>
 800d40e:	f04f 0800 	mov.w	r8, #0
 800d412:	f104 0a1a 	add.w	sl, r4, #26
 800d416:	e7f2      	b.n	800d3fe <_printf_float+0x422>
 800d418:	2301      	movs	r3, #1
 800d41a:	4642      	mov	r2, r8
 800d41c:	e7df      	b.n	800d3de <_printf_float+0x402>
 800d41e:	2301      	movs	r3, #1
 800d420:	464a      	mov	r2, r9
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	47b8      	blx	r7
 800d428:	3001      	adds	r0, #1
 800d42a:	f43f ae36 	beq.w	800d09a <_printf_float+0xbe>
 800d42e:	f108 0801 	add.w	r8, r8, #1
 800d432:	68e3      	ldr	r3, [r4, #12]
 800d434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d436:	1a5b      	subs	r3, r3, r1
 800d438:	4543      	cmp	r3, r8
 800d43a:	dcf0      	bgt.n	800d41e <_printf_float+0x442>
 800d43c:	e6f8      	b.n	800d230 <_printf_float+0x254>
 800d43e:	f04f 0800 	mov.w	r8, #0
 800d442:	f104 0919 	add.w	r9, r4, #25
 800d446:	e7f4      	b.n	800d432 <_printf_float+0x456>

0800d448 <_printf_common>:
 800d448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d44c:	4616      	mov	r6, r2
 800d44e:	4699      	mov	r9, r3
 800d450:	688a      	ldr	r2, [r1, #8]
 800d452:	690b      	ldr	r3, [r1, #16]
 800d454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d458:	4293      	cmp	r3, r2
 800d45a:	bfb8      	it	lt
 800d45c:	4613      	movlt	r3, r2
 800d45e:	6033      	str	r3, [r6, #0]
 800d460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d464:	4607      	mov	r7, r0
 800d466:	460c      	mov	r4, r1
 800d468:	b10a      	cbz	r2, 800d46e <_printf_common+0x26>
 800d46a:	3301      	adds	r3, #1
 800d46c:	6033      	str	r3, [r6, #0]
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	0699      	lsls	r1, r3, #26
 800d472:	bf42      	ittt	mi
 800d474:	6833      	ldrmi	r3, [r6, #0]
 800d476:	3302      	addmi	r3, #2
 800d478:	6033      	strmi	r3, [r6, #0]
 800d47a:	6825      	ldr	r5, [r4, #0]
 800d47c:	f015 0506 	ands.w	r5, r5, #6
 800d480:	d106      	bne.n	800d490 <_printf_common+0x48>
 800d482:	f104 0a19 	add.w	sl, r4, #25
 800d486:	68e3      	ldr	r3, [r4, #12]
 800d488:	6832      	ldr	r2, [r6, #0]
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc26      	bgt.n	800d4de <_printf_common+0x96>
 800d490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d494:	1e13      	subs	r3, r2, #0
 800d496:	6822      	ldr	r2, [r4, #0]
 800d498:	bf18      	it	ne
 800d49a:	2301      	movne	r3, #1
 800d49c:	0692      	lsls	r2, r2, #26
 800d49e:	d42b      	bmi.n	800d4f8 <_printf_common+0xb0>
 800d4a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	47c0      	blx	r8
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	d01e      	beq.n	800d4ec <_printf_common+0xa4>
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	6922      	ldr	r2, [r4, #16]
 800d4b2:	f003 0306 	and.w	r3, r3, #6
 800d4b6:	2b04      	cmp	r3, #4
 800d4b8:	bf02      	ittt	eq
 800d4ba:	68e5      	ldreq	r5, [r4, #12]
 800d4bc:	6833      	ldreq	r3, [r6, #0]
 800d4be:	1aed      	subeq	r5, r5, r3
 800d4c0:	68a3      	ldr	r3, [r4, #8]
 800d4c2:	bf0c      	ite	eq
 800d4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4c8:	2500      	movne	r5, #0
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	bfc4      	itt	gt
 800d4ce:	1a9b      	subgt	r3, r3, r2
 800d4d0:	18ed      	addgt	r5, r5, r3
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	341a      	adds	r4, #26
 800d4d6:	42b5      	cmp	r5, r6
 800d4d8:	d11a      	bne.n	800d510 <_printf_common+0xc8>
 800d4da:	2000      	movs	r0, #0
 800d4dc:	e008      	b.n	800d4f0 <_printf_common+0xa8>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	47c0      	blx	r8
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	d103      	bne.n	800d4f4 <_printf_common+0xac>
 800d4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f4:	3501      	adds	r5, #1
 800d4f6:	e7c6      	b.n	800d486 <_printf_common+0x3e>
 800d4f8:	18e1      	adds	r1, r4, r3
 800d4fa:	1c5a      	adds	r2, r3, #1
 800d4fc:	2030      	movs	r0, #48	; 0x30
 800d4fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d502:	4422      	add	r2, r4
 800d504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d50c:	3302      	adds	r3, #2
 800d50e:	e7c7      	b.n	800d4a0 <_printf_common+0x58>
 800d510:	2301      	movs	r3, #1
 800d512:	4622      	mov	r2, r4
 800d514:	4649      	mov	r1, r9
 800d516:	4638      	mov	r0, r7
 800d518:	47c0      	blx	r8
 800d51a:	3001      	adds	r0, #1
 800d51c:	d0e6      	beq.n	800d4ec <_printf_common+0xa4>
 800d51e:	3601      	adds	r6, #1
 800d520:	e7d9      	b.n	800d4d6 <_printf_common+0x8e>
	...

0800d524 <_printf_i>:
 800d524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d528:	7e0f      	ldrb	r7, [r1, #24]
 800d52a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d52c:	2f78      	cmp	r7, #120	; 0x78
 800d52e:	4691      	mov	r9, r2
 800d530:	4680      	mov	r8, r0
 800d532:	460c      	mov	r4, r1
 800d534:	469a      	mov	sl, r3
 800d536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d53a:	d807      	bhi.n	800d54c <_printf_i+0x28>
 800d53c:	2f62      	cmp	r7, #98	; 0x62
 800d53e:	d80a      	bhi.n	800d556 <_printf_i+0x32>
 800d540:	2f00      	cmp	r7, #0
 800d542:	f000 80d4 	beq.w	800d6ee <_printf_i+0x1ca>
 800d546:	2f58      	cmp	r7, #88	; 0x58
 800d548:	f000 80c0 	beq.w	800d6cc <_printf_i+0x1a8>
 800d54c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d554:	e03a      	b.n	800d5cc <_printf_i+0xa8>
 800d556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d55a:	2b15      	cmp	r3, #21
 800d55c:	d8f6      	bhi.n	800d54c <_printf_i+0x28>
 800d55e:	a101      	add	r1, pc, #4	; (adr r1, 800d564 <_printf_i+0x40>)
 800d560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d564:	0800d5bd 	.word	0x0800d5bd
 800d568:	0800d5d1 	.word	0x0800d5d1
 800d56c:	0800d54d 	.word	0x0800d54d
 800d570:	0800d54d 	.word	0x0800d54d
 800d574:	0800d54d 	.word	0x0800d54d
 800d578:	0800d54d 	.word	0x0800d54d
 800d57c:	0800d5d1 	.word	0x0800d5d1
 800d580:	0800d54d 	.word	0x0800d54d
 800d584:	0800d54d 	.word	0x0800d54d
 800d588:	0800d54d 	.word	0x0800d54d
 800d58c:	0800d54d 	.word	0x0800d54d
 800d590:	0800d6d5 	.word	0x0800d6d5
 800d594:	0800d5fd 	.word	0x0800d5fd
 800d598:	0800d68f 	.word	0x0800d68f
 800d59c:	0800d54d 	.word	0x0800d54d
 800d5a0:	0800d54d 	.word	0x0800d54d
 800d5a4:	0800d6f7 	.word	0x0800d6f7
 800d5a8:	0800d54d 	.word	0x0800d54d
 800d5ac:	0800d5fd 	.word	0x0800d5fd
 800d5b0:	0800d54d 	.word	0x0800d54d
 800d5b4:	0800d54d 	.word	0x0800d54d
 800d5b8:	0800d697 	.word	0x0800d697
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	1d1a      	adds	r2, r3, #4
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	602a      	str	r2, [r5, #0]
 800d5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e09f      	b.n	800d710 <_printf_i+0x1ec>
 800d5d0:	6820      	ldr	r0, [r4, #0]
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	0607      	lsls	r7, r0, #24
 800d5d6:	f103 0104 	add.w	r1, r3, #4
 800d5da:	6029      	str	r1, [r5, #0]
 800d5dc:	d501      	bpl.n	800d5e2 <_printf_i+0xbe>
 800d5de:	681e      	ldr	r6, [r3, #0]
 800d5e0:	e003      	b.n	800d5ea <_printf_i+0xc6>
 800d5e2:	0646      	lsls	r6, r0, #25
 800d5e4:	d5fb      	bpl.n	800d5de <_printf_i+0xba>
 800d5e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d5ea:	2e00      	cmp	r6, #0
 800d5ec:	da03      	bge.n	800d5f6 <_printf_i+0xd2>
 800d5ee:	232d      	movs	r3, #45	; 0x2d
 800d5f0:	4276      	negs	r6, r6
 800d5f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5f6:	485a      	ldr	r0, [pc, #360]	; (800d760 <_printf_i+0x23c>)
 800d5f8:	230a      	movs	r3, #10
 800d5fa:	e012      	b.n	800d622 <_printf_i+0xfe>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	1d19      	adds	r1, r3, #4
 800d602:	6029      	str	r1, [r5, #0]
 800d604:	0605      	lsls	r5, r0, #24
 800d606:	d501      	bpl.n	800d60c <_printf_i+0xe8>
 800d608:	681e      	ldr	r6, [r3, #0]
 800d60a:	e002      	b.n	800d612 <_printf_i+0xee>
 800d60c:	0641      	lsls	r1, r0, #25
 800d60e:	d5fb      	bpl.n	800d608 <_printf_i+0xe4>
 800d610:	881e      	ldrh	r6, [r3, #0]
 800d612:	4853      	ldr	r0, [pc, #332]	; (800d760 <_printf_i+0x23c>)
 800d614:	2f6f      	cmp	r7, #111	; 0x6f
 800d616:	bf0c      	ite	eq
 800d618:	2308      	moveq	r3, #8
 800d61a:	230a      	movne	r3, #10
 800d61c:	2100      	movs	r1, #0
 800d61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d622:	6865      	ldr	r5, [r4, #4]
 800d624:	60a5      	str	r5, [r4, #8]
 800d626:	2d00      	cmp	r5, #0
 800d628:	bfa2      	ittt	ge
 800d62a:	6821      	ldrge	r1, [r4, #0]
 800d62c:	f021 0104 	bicge.w	r1, r1, #4
 800d630:	6021      	strge	r1, [r4, #0]
 800d632:	b90e      	cbnz	r6, 800d638 <_printf_i+0x114>
 800d634:	2d00      	cmp	r5, #0
 800d636:	d04b      	beq.n	800d6d0 <_printf_i+0x1ac>
 800d638:	4615      	mov	r5, r2
 800d63a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d63e:	fb03 6711 	mls	r7, r3, r1, r6
 800d642:	5dc7      	ldrb	r7, [r0, r7]
 800d644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d648:	4637      	mov	r7, r6
 800d64a:	42bb      	cmp	r3, r7
 800d64c:	460e      	mov	r6, r1
 800d64e:	d9f4      	bls.n	800d63a <_printf_i+0x116>
 800d650:	2b08      	cmp	r3, #8
 800d652:	d10b      	bne.n	800d66c <_printf_i+0x148>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	07de      	lsls	r6, r3, #31
 800d658:	d508      	bpl.n	800d66c <_printf_i+0x148>
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	6861      	ldr	r1, [r4, #4]
 800d65e:	4299      	cmp	r1, r3
 800d660:	bfde      	ittt	le
 800d662:	2330      	movle	r3, #48	; 0x30
 800d664:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d66c:	1b52      	subs	r2, r2, r5
 800d66e:	6122      	str	r2, [r4, #16]
 800d670:	f8cd a000 	str.w	sl, [sp]
 800d674:	464b      	mov	r3, r9
 800d676:	aa03      	add	r2, sp, #12
 800d678:	4621      	mov	r1, r4
 800d67a:	4640      	mov	r0, r8
 800d67c:	f7ff fee4 	bl	800d448 <_printf_common>
 800d680:	3001      	adds	r0, #1
 800d682:	d14a      	bne.n	800d71a <_printf_i+0x1f6>
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	b004      	add	sp, #16
 800d68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	f043 0320 	orr.w	r3, r3, #32
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	4833      	ldr	r0, [pc, #204]	; (800d764 <_printf_i+0x240>)
 800d698:	2778      	movs	r7, #120	; 0x78
 800d69a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	6829      	ldr	r1, [r5, #0]
 800d6a2:	061f      	lsls	r7, r3, #24
 800d6a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6a8:	d402      	bmi.n	800d6b0 <_printf_i+0x18c>
 800d6aa:	065f      	lsls	r7, r3, #25
 800d6ac:	bf48      	it	mi
 800d6ae:	b2b6      	uxthmi	r6, r6
 800d6b0:	07df      	lsls	r7, r3, #31
 800d6b2:	bf48      	it	mi
 800d6b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d6b8:	6029      	str	r1, [r5, #0]
 800d6ba:	bf48      	it	mi
 800d6bc:	6023      	strmi	r3, [r4, #0]
 800d6be:	b91e      	cbnz	r6, 800d6c8 <_printf_i+0x1a4>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	f023 0320 	bic.w	r3, r3, #32
 800d6c6:	6023      	str	r3, [r4, #0]
 800d6c8:	2310      	movs	r3, #16
 800d6ca:	e7a7      	b.n	800d61c <_printf_i+0xf8>
 800d6cc:	4824      	ldr	r0, [pc, #144]	; (800d760 <_printf_i+0x23c>)
 800d6ce:	e7e4      	b.n	800d69a <_printf_i+0x176>
 800d6d0:	4615      	mov	r5, r2
 800d6d2:	e7bd      	b.n	800d650 <_printf_i+0x12c>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	6826      	ldr	r6, [r4, #0]
 800d6d8:	6961      	ldr	r1, [r4, #20]
 800d6da:	1d18      	adds	r0, r3, #4
 800d6dc:	6028      	str	r0, [r5, #0]
 800d6de:	0635      	lsls	r5, r6, #24
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	d501      	bpl.n	800d6e8 <_printf_i+0x1c4>
 800d6e4:	6019      	str	r1, [r3, #0]
 800d6e6:	e002      	b.n	800d6ee <_printf_i+0x1ca>
 800d6e8:	0670      	lsls	r0, r6, #25
 800d6ea:	d5fb      	bpl.n	800d6e4 <_printf_i+0x1c0>
 800d6ec:	8019      	strh	r1, [r3, #0]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	4615      	mov	r5, r2
 800d6f4:	e7bc      	b.n	800d670 <_printf_i+0x14c>
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	1d1a      	adds	r2, r3, #4
 800d6fa:	602a      	str	r2, [r5, #0]
 800d6fc:	681d      	ldr	r5, [r3, #0]
 800d6fe:	6862      	ldr	r2, [r4, #4]
 800d700:	2100      	movs	r1, #0
 800d702:	4628      	mov	r0, r5
 800d704:	f7f2 fd64 	bl	80001d0 <memchr>
 800d708:	b108      	cbz	r0, 800d70e <_printf_i+0x1ea>
 800d70a:	1b40      	subs	r0, r0, r5
 800d70c:	6060      	str	r0, [r4, #4]
 800d70e:	6863      	ldr	r3, [r4, #4]
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	2300      	movs	r3, #0
 800d714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d718:	e7aa      	b.n	800d670 <_printf_i+0x14c>
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	462a      	mov	r2, r5
 800d71e:	4649      	mov	r1, r9
 800d720:	4640      	mov	r0, r8
 800d722:	47d0      	blx	sl
 800d724:	3001      	adds	r0, #1
 800d726:	d0ad      	beq.n	800d684 <_printf_i+0x160>
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	079b      	lsls	r3, r3, #30
 800d72c:	d413      	bmi.n	800d756 <_printf_i+0x232>
 800d72e:	68e0      	ldr	r0, [r4, #12]
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	4298      	cmp	r0, r3
 800d734:	bfb8      	it	lt
 800d736:	4618      	movlt	r0, r3
 800d738:	e7a6      	b.n	800d688 <_printf_i+0x164>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4632      	mov	r2, r6
 800d73e:	4649      	mov	r1, r9
 800d740:	4640      	mov	r0, r8
 800d742:	47d0      	blx	sl
 800d744:	3001      	adds	r0, #1
 800d746:	d09d      	beq.n	800d684 <_printf_i+0x160>
 800d748:	3501      	adds	r5, #1
 800d74a:	68e3      	ldr	r3, [r4, #12]
 800d74c:	9903      	ldr	r1, [sp, #12]
 800d74e:	1a5b      	subs	r3, r3, r1
 800d750:	42ab      	cmp	r3, r5
 800d752:	dcf2      	bgt.n	800d73a <_printf_i+0x216>
 800d754:	e7eb      	b.n	800d72e <_printf_i+0x20a>
 800d756:	2500      	movs	r5, #0
 800d758:	f104 0619 	add.w	r6, r4, #25
 800d75c:	e7f5      	b.n	800d74a <_printf_i+0x226>
 800d75e:	bf00      	nop
 800d760:	0801217a 	.word	0x0801217a
 800d764:	0801218b 	.word	0x0801218b

0800d768 <std>:
 800d768:	2300      	movs	r3, #0
 800d76a:	b510      	push	{r4, lr}
 800d76c:	4604      	mov	r4, r0
 800d76e:	e9c0 3300 	strd	r3, r3, [r0]
 800d772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d776:	6083      	str	r3, [r0, #8]
 800d778:	8181      	strh	r1, [r0, #12]
 800d77a:	6643      	str	r3, [r0, #100]	; 0x64
 800d77c:	81c2      	strh	r2, [r0, #14]
 800d77e:	6183      	str	r3, [r0, #24]
 800d780:	4619      	mov	r1, r3
 800d782:	2208      	movs	r2, #8
 800d784:	305c      	adds	r0, #92	; 0x5c
 800d786:	f000 f914 	bl	800d9b2 <memset>
 800d78a:	4b0d      	ldr	r3, [pc, #52]	; (800d7c0 <std+0x58>)
 800d78c:	6263      	str	r3, [r4, #36]	; 0x24
 800d78e:	4b0d      	ldr	r3, [pc, #52]	; (800d7c4 <std+0x5c>)
 800d790:	62a3      	str	r3, [r4, #40]	; 0x28
 800d792:	4b0d      	ldr	r3, [pc, #52]	; (800d7c8 <std+0x60>)
 800d794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d796:	4b0d      	ldr	r3, [pc, #52]	; (800d7cc <std+0x64>)
 800d798:	6323      	str	r3, [r4, #48]	; 0x30
 800d79a:	4b0d      	ldr	r3, [pc, #52]	; (800d7d0 <std+0x68>)
 800d79c:	6224      	str	r4, [r4, #32]
 800d79e:	429c      	cmp	r4, r3
 800d7a0:	d006      	beq.n	800d7b0 <std+0x48>
 800d7a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d7a6:	4294      	cmp	r4, r2
 800d7a8:	d002      	beq.n	800d7b0 <std+0x48>
 800d7aa:	33d0      	adds	r3, #208	; 0xd0
 800d7ac:	429c      	cmp	r4, r3
 800d7ae:	d105      	bne.n	800d7bc <std+0x54>
 800d7b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b8:	f000 b9ce 	b.w	800db58 <__retarget_lock_init_recursive>
 800d7bc:	bd10      	pop	{r4, pc}
 800d7be:	bf00      	nop
 800d7c0:	0800d92d 	.word	0x0800d92d
 800d7c4:	0800d94f 	.word	0x0800d94f
 800d7c8:	0800d987 	.word	0x0800d987
 800d7cc:	0800d9ab 	.word	0x0800d9ab
 800d7d0:	2000508c 	.word	0x2000508c

0800d7d4 <stdio_exit_handler>:
 800d7d4:	4a02      	ldr	r2, [pc, #8]	; (800d7e0 <stdio_exit_handler+0xc>)
 800d7d6:	4903      	ldr	r1, [pc, #12]	; (800d7e4 <stdio_exit_handler+0x10>)
 800d7d8:	4803      	ldr	r0, [pc, #12]	; (800d7e8 <stdio_exit_handler+0x14>)
 800d7da:	f000 b869 	b.w	800d8b0 <_fwalk_sglue>
 800d7de:	bf00      	nop
 800d7e0:	20000010 	.word	0x20000010
 800d7e4:	0800f539 	.word	0x0800f539
 800d7e8:	2000001c 	.word	0x2000001c

0800d7ec <cleanup_stdio>:
 800d7ec:	6841      	ldr	r1, [r0, #4]
 800d7ee:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <cleanup_stdio+0x34>)
 800d7f0:	4299      	cmp	r1, r3
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	d001      	beq.n	800d7fc <cleanup_stdio+0x10>
 800d7f8:	f001 fe9e 	bl	800f538 <_fflush_r>
 800d7fc:	68a1      	ldr	r1, [r4, #8]
 800d7fe:	4b09      	ldr	r3, [pc, #36]	; (800d824 <cleanup_stdio+0x38>)
 800d800:	4299      	cmp	r1, r3
 800d802:	d002      	beq.n	800d80a <cleanup_stdio+0x1e>
 800d804:	4620      	mov	r0, r4
 800d806:	f001 fe97 	bl	800f538 <_fflush_r>
 800d80a:	68e1      	ldr	r1, [r4, #12]
 800d80c:	4b06      	ldr	r3, [pc, #24]	; (800d828 <cleanup_stdio+0x3c>)
 800d80e:	4299      	cmp	r1, r3
 800d810:	d004      	beq.n	800d81c <cleanup_stdio+0x30>
 800d812:	4620      	mov	r0, r4
 800d814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d818:	f001 be8e 	b.w	800f538 <_fflush_r>
 800d81c:	bd10      	pop	{r4, pc}
 800d81e:	bf00      	nop
 800d820:	2000508c 	.word	0x2000508c
 800d824:	200050f4 	.word	0x200050f4
 800d828:	2000515c 	.word	0x2000515c

0800d82c <global_stdio_init.part.0>:
 800d82c:	b510      	push	{r4, lr}
 800d82e:	4b0b      	ldr	r3, [pc, #44]	; (800d85c <global_stdio_init.part.0+0x30>)
 800d830:	4c0b      	ldr	r4, [pc, #44]	; (800d860 <global_stdio_init.part.0+0x34>)
 800d832:	4a0c      	ldr	r2, [pc, #48]	; (800d864 <global_stdio_init.part.0+0x38>)
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	4620      	mov	r0, r4
 800d838:	2200      	movs	r2, #0
 800d83a:	2104      	movs	r1, #4
 800d83c:	f7ff ff94 	bl	800d768 <std>
 800d840:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d844:	2201      	movs	r2, #1
 800d846:	2109      	movs	r1, #9
 800d848:	f7ff ff8e 	bl	800d768 <std>
 800d84c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d850:	2202      	movs	r2, #2
 800d852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d856:	2112      	movs	r1, #18
 800d858:	f7ff bf86 	b.w	800d768 <std>
 800d85c:	200051c4 	.word	0x200051c4
 800d860:	2000508c 	.word	0x2000508c
 800d864:	0800d7d5 	.word	0x0800d7d5

0800d868 <__sfp_lock_acquire>:
 800d868:	4801      	ldr	r0, [pc, #4]	; (800d870 <__sfp_lock_acquire+0x8>)
 800d86a:	f000 b976 	b.w	800db5a <__retarget_lock_acquire_recursive>
 800d86e:	bf00      	nop
 800d870:	200051cd 	.word	0x200051cd

0800d874 <__sfp_lock_release>:
 800d874:	4801      	ldr	r0, [pc, #4]	; (800d87c <__sfp_lock_release+0x8>)
 800d876:	f000 b971 	b.w	800db5c <__retarget_lock_release_recursive>
 800d87a:	bf00      	nop
 800d87c:	200051cd 	.word	0x200051cd

0800d880 <__sinit>:
 800d880:	b510      	push	{r4, lr}
 800d882:	4604      	mov	r4, r0
 800d884:	f7ff fff0 	bl	800d868 <__sfp_lock_acquire>
 800d888:	6a23      	ldr	r3, [r4, #32]
 800d88a:	b11b      	cbz	r3, 800d894 <__sinit+0x14>
 800d88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d890:	f7ff bff0 	b.w	800d874 <__sfp_lock_release>
 800d894:	4b04      	ldr	r3, [pc, #16]	; (800d8a8 <__sinit+0x28>)
 800d896:	6223      	str	r3, [r4, #32]
 800d898:	4b04      	ldr	r3, [pc, #16]	; (800d8ac <__sinit+0x2c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1f5      	bne.n	800d88c <__sinit+0xc>
 800d8a0:	f7ff ffc4 	bl	800d82c <global_stdio_init.part.0>
 800d8a4:	e7f2      	b.n	800d88c <__sinit+0xc>
 800d8a6:	bf00      	nop
 800d8a8:	0800d7ed 	.word	0x0800d7ed
 800d8ac:	200051c4 	.word	0x200051c4

0800d8b0 <_fwalk_sglue>:
 800d8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	4688      	mov	r8, r1
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	2600      	movs	r6, #0
 800d8bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8c0:	f1b9 0901 	subs.w	r9, r9, #1
 800d8c4:	d505      	bpl.n	800d8d2 <_fwalk_sglue+0x22>
 800d8c6:	6824      	ldr	r4, [r4, #0]
 800d8c8:	2c00      	cmp	r4, #0
 800d8ca:	d1f7      	bne.n	800d8bc <_fwalk_sglue+0xc>
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	89ab      	ldrh	r3, [r5, #12]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d907      	bls.n	800d8e8 <_fwalk_sglue+0x38>
 800d8d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	d003      	beq.n	800d8e8 <_fwalk_sglue+0x38>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	47c0      	blx	r8
 800d8e6:	4306      	orrs	r6, r0
 800d8e8:	3568      	adds	r5, #104	; 0x68
 800d8ea:	e7e9      	b.n	800d8c0 <_fwalk_sglue+0x10>

0800d8ec <siprintf>:
 800d8ec:	b40e      	push	{r1, r2, r3}
 800d8ee:	b500      	push	{lr}
 800d8f0:	b09c      	sub	sp, #112	; 0x70
 800d8f2:	ab1d      	add	r3, sp, #116	; 0x74
 800d8f4:	9002      	str	r0, [sp, #8]
 800d8f6:	9006      	str	r0, [sp, #24]
 800d8f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8fc:	4809      	ldr	r0, [pc, #36]	; (800d924 <siprintf+0x38>)
 800d8fe:	9107      	str	r1, [sp, #28]
 800d900:	9104      	str	r1, [sp, #16]
 800d902:	4909      	ldr	r1, [pc, #36]	; (800d928 <siprintf+0x3c>)
 800d904:	f853 2b04 	ldr.w	r2, [r3], #4
 800d908:	9105      	str	r1, [sp, #20]
 800d90a:	6800      	ldr	r0, [r0, #0]
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	a902      	add	r1, sp, #8
 800d910:	f001 fc8e 	bl	800f230 <_svfiprintf_r>
 800d914:	9b02      	ldr	r3, [sp, #8]
 800d916:	2200      	movs	r2, #0
 800d918:	701a      	strb	r2, [r3, #0]
 800d91a:	b01c      	add	sp, #112	; 0x70
 800d91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d920:	b003      	add	sp, #12
 800d922:	4770      	bx	lr
 800d924:	20000068 	.word	0x20000068
 800d928:	ffff0208 	.word	0xffff0208

0800d92c <__sread>:
 800d92c:	b510      	push	{r4, lr}
 800d92e:	460c      	mov	r4, r1
 800d930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d934:	f000 f8c2 	bl	800dabc <_read_r>
 800d938:	2800      	cmp	r0, #0
 800d93a:	bfab      	itete	ge
 800d93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d93e:	89a3      	ldrhlt	r3, [r4, #12]
 800d940:	181b      	addge	r3, r3, r0
 800d942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d946:	bfac      	ite	ge
 800d948:	6563      	strge	r3, [r4, #84]	; 0x54
 800d94a:	81a3      	strhlt	r3, [r4, #12]
 800d94c:	bd10      	pop	{r4, pc}

0800d94e <__swrite>:
 800d94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d952:	461f      	mov	r7, r3
 800d954:	898b      	ldrh	r3, [r1, #12]
 800d956:	05db      	lsls	r3, r3, #23
 800d958:	4605      	mov	r5, r0
 800d95a:	460c      	mov	r4, r1
 800d95c:	4616      	mov	r6, r2
 800d95e:	d505      	bpl.n	800d96c <__swrite+0x1e>
 800d960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d964:	2302      	movs	r3, #2
 800d966:	2200      	movs	r2, #0
 800d968:	f000 f896 	bl	800da98 <_lseek_r>
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	4632      	mov	r2, r6
 800d97a:	463b      	mov	r3, r7
 800d97c:	4628      	mov	r0, r5
 800d97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d982:	f000 b8ad 	b.w	800dae0 <_write_r>

0800d986 <__sseek>:
 800d986:	b510      	push	{r4, lr}
 800d988:	460c      	mov	r4, r1
 800d98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98e:	f000 f883 	bl	800da98 <_lseek_r>
 800d992:	1c43      	adds	r3, r0, #1
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	bf15      	itete	ne
 800d998:	6560      	strne	r0, [r4, #84]	; 0x54
 800d99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9a2:	81a3      	strheq	r3, [r4, #12]
 800d9a4:	bf18      	it	ne
 800d9a6:	81a3      	strhne	r3, [r4, #12]
 800d9a8:	bd10      	pop	{r4, pc}

0800d9aa <__sclose>:
 800d9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ae:	f000 b80d 	b.w	800d9cc <_close_r>

0800d9b2 <memset>:
 800d9b2:	4402      	add	r2, r0
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d100      	bne.n	800d9bc <memset+0xa>
 800d9ba:	4770      	bx	lr
 800d9bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d9c0:	e7f9      	b.n	800d9b6 <memset+0x4>
	...

0800d9c4 <_localeconv_r>:
 800d9c4:	4800      	ldr	r0, [pc, #0]	; (800d9c8 <_localeconv_r+0x4>)
 800d9c6:	4770      	bx	lr
 800d9c8:	2000015c 	.word	0x2000015c

0800d9cc <_close_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d06      	ldr	r5, [pc, #24]	; (800d9e8 <_close_r+0x1c>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	f7f8 f87f 	bl	8005ada <_close>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d102      	bne.n	800d9e6 <_close_r+0x1a>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	b103      	cbz	r3, 800d9e6 <_close_r+0x1a>
 800d9e4:	6023      	str	r3, [r4, #0]
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	200051c8 	.word	0x200051c8

0800d9ec <_reclaim_reent>:
 800d9ec:	4b29      	ldr	r3, [pc, #164]	; (800da94 <_reclaim_reent+0xa8>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4283      	cmp	r3, r0
 800d9f2:	b570      	push	{r4, r5, r6, lr}
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	d04b      	beq.n	800da90 <_reclaim_reent+0xa4>
 800d9f8:	69c3      	ldr	r3, [r0, #28]
 800d9fa:	b143      	cbz	r3, 800da0e <_reclaim_reent+0x22>
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d144      	bne.n	800da8c <_reclaim_reent+0xa0>
 800da02:	69e3      	ldr	r3, [r4, #28]
 800da04:	6819      	ldr	r1, [r3, #0]
 800da06:	b111      	cbz	r1, 800da0e <_reclaim_reent+0x22>
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 ff3b 	bl	800e884 <_free_r>
 800da0e:	6961      	ldr	r1, [r4, #20]
 800da10:	b111      	cbz	r1, 800da18 <_reclaim_reent+0x2c>
 800da12:	4620      	mov	r0, r4
 800da14:	f000 ff36 	bl	800e884 <_free_r>
 800da18:	69e1      	ldr	r1, [r4, #28]
 800da1a:	b111      	cbz	r1, 800da22 <_reclaim_reent+0x36>
 800da1c:	4620      	mov	r0, r4
 800da1e:	f000 ff31 	bl	800e884 <_free_r>
 800da22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da24:	b111      	cbz	r1, 800da2c <_reclaim_reent+0x40>
 800da26:	4620      	mov	r0, r4
 800da28:	f000 ff2c 	bl	800e884 <_free_r>
 800da2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da2e:	b111      	cbz	r1, 800da36 <_reclaim_reent+0x4a>
 800da30:	4620      	mov	r0, r4
 800da32:	f000 ff27 	bl	800e884 <_free_r>
 800da36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da38:	b111      	cbz	r1, 800da40 <_reclaim_reent+0x54>
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 ff22 	bl	800e884 <_free_r>
 800da40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800da42:	b111      	cbz	r1, 800da4a <_reclaim_reent+0x5e>
 800da44:	4620      	mov	r0, r4
 800da46:	f000 ff1d 	bl	800e884 <_free_r>
 800da4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800da4c:	b111      	cbz	r1, 800da54 <_reclaim_reent+0x68>
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 ff18 	bl	800e884 <_free_r>
 800da54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800da56:	b111      	cbz	r1, 800da5e <_reclaim_reent+0x72>
 800da58:	4620      	mov	r0, r4
 800da5a:	f000 ff13 	bl	800e884 <_free_r>
 800da5e:	6a23      	ldr	r3, [r4, #32]
 800da60:	b1b3      	cbz	r3, 800da90 <_reclaim_reent+0xa4>
 800da62:	4620      	mov	r0, r4
 800da64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da68:	4718      	bx	r3
 800da6a:	5949      	ldr	r1, [r1, r5]
 800da6c:	b941      	cbnz	r1, 800da80 <_reclaim_reent+0x94>
 800da6e:	3504      	adds	r5, #4
 800da70:	69e3      	ldr	r3, [r4, #28]
 800da72:	2d80      	cmp	r5, #128	; 0x80
 800da74:	68d9      	ldr	r1, [r3, #12]
 800da76:	d1f8      	bne.n	800da6a <_reclaim_reent+0x7e>
 800da78:	4620      	mov	r0, r4
 800da7a:	f000 ff03 	bl	800e884 <_free_r>
 800da7e:	e7c0      	b.n	800da02 <_reclaim_reent+0x16>
 800da80:	680e      	ldr	r6, [r1, #0]
 800da82:	4620      	mov	r0, r4
 800da84:	f000 fefe 	bl	800e884 <_free_r>
 800da88:	4631      	mov	r1, r6
 800da8a:	e7ef      	b.n	800da6c <_reclaim_reent+0x80>
 800da8c:	2500      	movs	r5, #0
 800da8e:	e7ef      	b.n	800da70 <_reclaim_reent+0x84>
 800da90:	bd70      	pop	{r4, r5, r6, pc}
 800da92:	bf00      	nop
 800da94:	20000068 	.word	0x20000068

0800da98 <_lseek_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d07      	ldr	r5, [pc, #28]	; (800dab8 <_lseek_r+0x20>)
 800da9c:	4604      	mov	r4, r0
 800da9e:	4608      	mov	r0, r1
 800daa0:	4611      	mov	r1, r2
 800daa2:	2200      	movs	r2, #0
 800daa4:	602a      	str	r2, [r5, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	f7f8 f83e 	bl	8005b28 <_lseek>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_lseek_r+0x1e>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_lseek_r+0x1e>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	200051c8 	.word	0x200051c8

0800dabc <_read_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d07      	ldr	r5, [pc, #28]	; (800dadc <_read_r+0x20>)
 800dac0:	4604      	mov	r4, r0
 800dac2:	4608      	mov	r0, r1
 800dac4:	4611      	mov	r1, r2
 800dac6:	2200      	movs	r2, #0
 800dac8:	602a      	str	r2, [r5, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	f7f7 ffcc 	bl	8005a68 <_read>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_read_r+0x1e>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_read_r+0x1e>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	200051c8 	.word	0x200051c8

0800dae0 <_write_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_write_r+0x20>)
 800dae4:	4604      	mov	r4, r0
 800dae6:	4608      	mov	r0, r1
 800dae8:	4611      	mov	r1, r2
 800daea:	2200      	movs	r2, #0
 800daec:	602a      	str	r2, [r5, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f7f7 ffd7 	bl	8005aa2 <_write>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_write_r+0x1e>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_write_r+0x1e>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	200051c8 	.word	0x200051c8

0800db04 <__errno>:
 800db04:	4b01      	ldr	r3, [pc, #4]	; (800db0c <__errno+0x8>)
 800db06:	6818      	ldr	r0, [r3, #0]
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	20000068 	.word	0x20000068

0800db10 <__libc_init_array>:
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	4d0d      	ldr	r5, [pc, #52]	; (800db48 <__libc_init_array+0x38>)
 800db14:	4c0d      	ldr	r4, [pc, #52]	; (800db4c <__libc_init_array+0x3c>)
 800db16:	1b64      	subs	r4, r4, r5
 800db18:	10a4      	asrs	r4, r4, #2
 800db1a:	2600      	movs	r6, #0
 800db1c:	42a6      	cmp	r6, r4
 800db1e:	d109      	bne.n	800db34 <__libc_init_array+0x24>
 800db20:	4d0b      	ldr	r5, [pc, #44]	; (800db50 <__libc_init_array+0x40>)
 800db22:	4c0c      	ldr	r4, [pc, #48]	; (800db54 <__libc_init_array+0x44>)
 800db24:	f004 fa80 	bl	8012028 <_init>
 800db28:	1b64      	subs	r4, r4, r5
 800db2a:	10a4      	asrs	r4, r4, #2
 800db2c:	2600      	movs	r6, #0
 800db2e:	42a6      	cmp	r6, r4
 800db30:	d105      	bne.n	800db3e <__libc_init_array+0x2e>
 800db32:	bd70      	pop	{r4, r5, r6, pc}
 800db34:	f855 3b04 	ldr.w	r3, [r5], #4
 800db38:	4798      	blx	r3
 800db3a:	3601      	adds	r6, #1
 800db3c:	e7ee      	b.n	800db1c <__libc_init_array+0xc>
 800db3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db42:	4798      	blx	r3
 800db44:	3601      	adds	r6, #1
 800db46:	e7f2      	b.n	800db2e <__libc_init_array+0x1e>
 800db48:	08012760 	.word	0x08012760
 800db4c:	08012760 	.word	0x08012760
 800db50:	08012760 	.word	0x08012760
 800db54:	08012764 	.word	0x08012764

0800db58 <__retarget_lock_init_recursive>:
 800db58:	4770      	bx	lr

0800db5a <__retarget_lock_acquire_recursive>:
 800db5a:	4770      	bx	lr

0800db5c <__retarget_lock_release_recursive>:
 800db5c:	4770      	bx	lr

0800db5e <strcpy>:
 800db5e:	4603      	mov	r3, r0
 800db60:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db64:	f803 2b01 	strb.w	r2, [r3], #1
 800db68:	2a00      	cmp	r2, #0
 800db6a:	d1f9      	bne.n	800db60 <strcpy+0x2>
 800db6c:	4770      	bx	lr

0800db6e <memcpy>:
 800db6e:	440a      	add	r2, r1
 800db70:	4291      	cmp	r1, r2
 800db72:	f100 33ff 	add.w	r3, r0, #4294967295
 800db76:	d100      	bne.n	800db7a <memcpy+0xc>
 800db78:	4770      	bx	lr
 800db7a:	b510      	push	{r4, lr}
 800db7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db84:	4291      	cmp	r1, r2
 800db86:	d1f9      	bne.n	800db7c <memcpy+0xe>
 800db88:	bd10      	pop	{r4, pc}

0800db8a <quorem>:
 800db8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8e:	6903      	ldr	r3, [r0, #16]
 800db90:	690c      	ldr	r4, [r1, #16]
 800db92:	42a3      	cmp	r3, r4
 800db94:	4607      	mov	r7, r0
 800db96:	db7e      	blt.n	800dc96 <quorem+0x10c>
 800db98:	3c01      	subs	r4, #1
 800db9a:	f101 0814 	add.w	r8, r1, #20
 800db9e:	f100 0514 	add.w	r5, r0, #20
 800dba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dbb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbc0:	d331      	bcc.n	800dc26 <quorem+0x9c>
 800dbc2:	f04f 0e00 	mov.w	lr, #0
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	46ac      	mov	ip, r5
 800dbca:	46f2      	mov	sl, lr
 800dbcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbd0:	b293      	uxth	r3, r2
 800dbd2:	fb06 e303 	mla	r3, r6, r3, lr
 800dbd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbda:	0c1a      	lsrs	r2, r3, #16
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	ebaa 0303 	sub.w	r3, sl, r3
 800dbe2:	f8dc a000 	ldr.w	sl, [ip]
 800dbe6:	fa13 f38a 	uxtah	r3, r3, sl
 800dbea:	fb06 220e 	mla	r2, r6, lr, r2
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	9b00      	ldr	r3, [sp, #0]
 800dbf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dbf6:	b292      	uxth	r2, r2
 800dbf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dbfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc00:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc04:	4581      	cmp	r9, r0
 800dc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc0a:	f84c 3b04 	str.w	r3, [ip], #4
 800dc0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc12:	d2db      	bcs.n	800dbcc <quorem+0x42>
 800dc14:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc18:	b92b      	cbnz	r3, 800dc26 <quorem+0x9c>
 800dc1a:	9b01      	ldr	r3, [sp, #4]
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	429d      	cmp	r5, r3
 800dc20:	461a      	mov	r2, r3
 800dc22:	d32c      	bcc.n	800dc7e <quorem+0xf4>
 800dc24:	613c      	str	r4, [r7, #16]
 800dc26:	4638      	mov	r0, r7
 800dc28:	f001 f9a8 	bl	800ef7c <__mcmp>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	db22      	blt.n	800dc76 <quorem+0xec>
 800dc30:	3601      	adds	r6, #1
 800dc32:	4629      	mov	r1, r5
 800dc34:	2000      	movs	r0, #0
 800dc36:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc3a:	f8d1 c000 	ldr.w	ip, [r1]
 800dc3e:	b293      	uxth	r3, r2
 800dc40:	1ac3      	subs	r3, r0, r3
 800dc42:	0c12      	lsrs	r2, r2, #16
 800dc44:	fa13 f38c 	uxtah	r3, r3, ip
 800dc48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dc4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc56:	45c1      	cmp	r9, r8
 800dc58:	f841 3b04 	str.w	r3, [r1], #4
 800dc5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc60:	d2e9      	bcs.n	800dc36 <quorem+0xac>
 800dc62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc6a:	b922      	cbnz	r2, 800dc76 <quorem+0xec>
 800dc6c:	3b04      	subs	r3, #4
 800dc6e:	429d      	cmp	r5, r3
 800dc70:	461a      	mov	r2, r3
 800dc72:	d30a      	bcc.n	800dc8a <quorem+0x100>
 800dc74:	613c      	str	r4, [r7, #16]
 800dc76:	4630      	mov	r0, r6
 800dc78:	b003      	add	sp, #12
 800dc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7e:	6812      	ldr	r2, [r2, #0]
 800dc80:	3b04      	subs	r3, #4
 800dc82:	2a00      	cmp	r2, #0
 800dc84:	d1ce      	bne.n	800dc24 <quorem+0x9a>
 800dc86:	3c01      	subs	r4, #1
 800dc88:	e7c9      	b.n	800dc1e <quorem+0x94>
 800dc8a:	6812      	ldr	r2, [r2, #0]
 800dc8c:	3b04      	subs	r3, #4
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	d1f0      	bne.n	800dc74 <quorem+0xea>
 800dc92:	3c01      	subs	r4, #1
 800dc94:	e7eb      	b.n	800dc6e <quorem+0xe4>
 800dc96:	2000      	movs	r0, #0
 800dc98:	e7ee      	b.n	800dc78 <quorem+0xee>
 800dc9a:	0000      	movs	r0, r0
 800dc9c:	0000      	movs	r0, r0
	...

0800dca0 <_dtoa_r>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	ed2d 8b04 	vpush	{d8-d9}
 800dca8:	69c5      	ldr	r5, [r0, #28]
 800dcaa:	b093      	sub	sp, #76	; 0x4c
 800dcac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcb0:	ec57 6b10 	vmov	r6, r7, d0
 800dcb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dcb8:	9107      	str	r1, [sp, #28]
 800dcba:	4604      	mov	r4, r0
 800dcbc:	920a      	str	r2, [sp, #40]	; 0x28
 800dcbe:	930d      	str	r3, [sp, #52]	; 0x34
 800dcc0:	b975      	cbnz	r5, 800dce0 <_dtoa_r+0x40>
 800dcc2:	2010      	movs	r0, #16
 800dcc4:	f000 fe2a 	bl	800e91c <malloc>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	61e0      	str	r0, [r4, #28]
 800dccc:	b920      	cbnz	r0, 800dcd8 <_dtoa_r+0x38>
 800dcce:	4bae      	ldr	r3, [pc, #696]	; (800df88 <_dtoa_r+0x2e8>)
 800dcd0:	21ef      	movs	r1, #239	; 0xef
 800dcd2:	48ae      	ldr	r0, [pc, #696]	; (800df8c <_dtoa_r+0x2ec>)
 800dcd4:	f001 fc82 	bl	800f5dc <__assert_func>
 800dcd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcdc:	6005      	str	r5, [r0, #0]
 800dcde:	60c5      	str	r5, [r0, #12]
 800dce0:	69e3      	ldr	r3, [r4, #28]
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	b151      	cbz	r1, 800dcfc <_dtoa_r+0x5c>
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	604a      	str	r2, [r1, #4]
 800dcea:	2301      	movs	r3, #1
 800dcec:	4093      	lsls	r3, r2
 800dcee:	608b      	str	r3, [r1, #8]
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 ff07 	bl	800eb04 <_Bfree>
 800dcf6:	69e3      	ldr	r3, [r4, #28]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]
 800dcfc:	1e3b      	subs	r3, r7, #0
 800dcfe:	bfbb      	ittet	lt
 800dd00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd04:	9303      	strlt	r3, [sp, #12]
 800dd06:	2300      	movge	r3, #0
 800dd08:	2201      	movlt	r2, #1
 800dd0a:	bfac      	ite	ge
 800dd0c:	f8c8 3000 	strge.w	r3, [r8]
 800dd10:	f8c8 2000 	strlt.w	r2, [r8]
 800dd14:	4b9e      	ldr	r3, [pc, #632]	; (800df90 <_dtoa_r+0x2f0>)
 800dd16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dd1a:	ea33 0308 	bics.w	r3, r3, r8
 800dd1e:	d11b      	bne.n	800dd58 <_dtoa_r+0xb8>
 800dd20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd22:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dd2c:	4333      	orrs	r3, r6
 800dd2e:	f000 8593 	beq.w	800e858 <_dtoa_r+0xbb8>
 800dd32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd34:	b963      	cbnz	r3, 800dd50 <_dtoa_r+0xb0>
 800dd36:	4b97      	ldr	r3, [pc, #604]	; (800df94 <_dtoa_r+0x2f4>)
 800dd38:	e027      	b.n	800dd8a <_dtoa_r+0xea>
 800dd3a:	4b97      	ldr	r3, [pc, #604]	; (800df98 <_dtoa_r+0x2f8>)
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	3308      	adds	r3, #8
 800dd40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	9800      	ldr	r0, [sp, #0]
 800dd46:	b013      	add	sp, #76	; 0x4c
 800dd48:	ecbd 8b04 	vpop	{d8-d9}
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	4b90      	ldr	r3, [pc, #576]	; (800df94 <_dtoa_r+0x2f4>)
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	3303      	adds	r3, #3
 800dd56:	e7f3      	b.n	800dd40 <_dtoa_r+0xa0>
 800dd58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	ec51 0b17 	vmov	r0, r1, d7
 800dd62:	eeb0 8a47 	vmov.f32	s16, s14
 800dd66:	eef0 8a67 	vmov.f32	s17, s15
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f7f2 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd70:	4681      	mov	r9, r0
 800dd72:	b160      	cbz	r0, 800dd8e <_dtoa_r+0xee>
 800dd74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd76:	2301      	movs	r3, #1
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f000 8568 	beq.w	800e852 <_dtoa_r+0xbb2>
 800dd82:	4b86      	ldr	r3, [pc, #536]	; (800df9c <_dtoa_r+0x2fc>)
 800dd84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	e7da      	b.n	800dd44 <_dtoa_r+0xa4>
 800dd8e:	aa10      	add	r2, sp, #64	; 0x40
 800dd90:	a911      	add	r1, sp, #68	; 0x44
 800dd92:	4620      	mov	r0, r4
 800dd94:	eeb0 0a48 	vmov.f32	s0, s16
 800dd98:	eef0 0a68 	vmov.f32	s1, s17
 800dd9c:	f001 f994 	bl	800f0c8 <__d2b>
 800dda0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dda4:	4682      	mov	sl, r0
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	d07f      	beq.n	800deaa <_dtoa_r+0x20a>
 800ddaa:	ee18 3a90 	vmov	r3, s17
 800ddae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ddb6:	ec51 0b18 	vmov	r0, r1, d8
 800ddba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ddbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ddc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4b75      	ldr	r3, [pc, #468]	; (800dfa0 <_dtoa_r+0x300>)
 800ddcc:	f7f2 fa5c 	bl	8000288 <__aeabi_dsub>
 800ddd0:	a367      	add	r3, pc, #412	; (adr r3, 800df70 <_dtoa_r+0x2d0>)
 800ddd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd6:	f7f2 fc0f 	bl	80005f8 <__aeabi_dmul>
 800ddda:	a367      	add	r3, pc, #412	; (adr r3, 800df78 <_dtoa_r+0x2d8>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	f7f2 fa54 	bl	800028c <__adddf3>
 800dde4:	4606      	mov	r6, r0
 800dde6:	4628      	mov	r0, r5
 800dde8:	460f      	mov	r7, r1
 800ddea:	f7f2 fb9b 	bl	8000524 <__aeabi_i2d>
 800ddee:	a364      	add	r3, pc, #400	; (adr r3, 800df80 <_dtoa_r+0x2e0>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	f7f2 fc00 	bl	80005f8 <__aeabi_dmul>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	4639      	mov	r1, r7
 800de00:	f7f2 fa44 	bl	800028c <__adddf3>
 800de04:	4606      	mov	r6, r0
 800de06:	460f      	mov	r7, r1
 800de08:	f7f2 fea6 	bl	8000b58 <__aeabi_d2iz>
 800de0c:	2200      	movs	r2, #0
 800de0e:	4683      	mov	fp, r0
 800de10:	2300      	movs	r3, #0
 800de12:	4630      	mov	r0, r6
 800de14:	4639      	mov	r1, r7
 800de16:	f7f2 fe61 	bl	8000adc <__aeabi_dcmplt>
 800de1a:	b148      	cbz	r0, 800de30 <_dtoa_r+0x190>
 800de1c:	4658      	mov	r0, fp
 800de1e:	f7f2 fb81 	bl	8000524 <__aeabi_i2d>
 800de22:	4632      	mov	r2, r6
 800de24:	463b      	mov	r3, r7
 800de26:	f7f2 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800de2a:	b908      	cbnz	r0, 800de30 <_dtoa_r+0x190>
 800de2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de30:	f1bb 0f16 	cmp.w	fp, #22
 800de34:	d857      	bhi.n	800dee6 <_dtoa_r+0x246>
 800de36:	4b5b      	ldr	r3, [pc, #364]	; (800dfa4 <_dtoa_r+0x304>)
 800de38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de40:	ec51 0b18 	vmov	r0, r1, d8
 800de44:	f7f2 fe4a 	bl	8000adc <__aeabi_dcmplt>
 800de48:	2800      	cmp	r0, #0
 800de4a:	d04e      	beq.n	800deea <_dtoa_r+0x24a>
 800de4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de50:	2300      	movs	r3, #0
 800de52:	930c      	str	r3, [sp, #48]	; 0x30
 800de54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de56:	1b5b      	subs	r3, r3, r5
 800de58:	1e5a      	subs	r2, r3, #1
 800de5a:	bf45      	ittet	mi
 800de5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800de60:	9305      	strmi	r3, [sp, #20]
 800de62:	2300      	movpl	r3, #0
 800de64:	2300      	movmi	r3, #0
 800de66:	9206      	str	r2, [sp, #24]
 800de68:	bf54      	ite	pl
 800de6a:	9305      	strpl	r3, [sp, #20]
 800de6c:	9306      	strmi	r3, [sp, #24]
 800de6e:	f1bb 0f00 	cmp.w	fp, #0
 800de72:	db3c      	blt.n	800deee <_dtoa_r+0x24e>
 800de74:	9b06      	ldr	r3, [sp, #24]
 800de76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800de7a:	445b      	add	r3, fp
 800de7c:	9306      	str	r3, [sp, #24]
 800de7e:	2300      	movs	r3, #0
 800de80:	9308      	str	r3, [sp, #32]
 800de82:	9b07      	ldr	r3, [sp, #28]
 800de84:	2b09      	cmp	r3, #9
 800de86:	d868      	bhi.n	800df5a <_dtoa_r+0x2ba>
 800de88:	2b05      	cmp	r3, #5
 800de8a:	bfc4      	itt	gt
 800de8c:	3b04      	subgt	r3, #4
 800de8e:	9307      	strgt	r3, [sp, #28]
 800de90:	9b07      	ldr	r3, [sp, #28]
 800de92:	f1a3 0302 	sub.w	r3, r3, #2
 800de96:	bfcc      	ite	gt
 800de98:	2500      	movgt	r5, #0
 800de9a:	2501      	movle	r5, #1
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	f200 8085 	bhi.w	800dfac <_dtoa_r+0x30c>
 800dea2:	e8df f003 	tbb	[pc, r3]
 800dea6:	3b2e      	.short	0x3b2e
 800dea8:	5839      	.short	0x5839
 800deaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800deae:	441d      	add	r5, r3
 800deb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	bfc1      	itttt	gt
 800deb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800debc:	fa08 f803 	lslgt.w	r8, r8, r3
 800dec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dec8:	bfd6      	itet	le
 800deca:	f1c3 0320 	rsble	r3, r3, #32
 800dece:	ea48 0003 	orrgt.w	r0, r8, r3
 800ded2:	fa06 f003 	lslle.w	r0, r6, r3
 800ded6:	f7f2 fb15 	bl	8000504 <__aeabi_ui2d>
 800deda:	2201      	movs	r2, #1
 800dedc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dee0:	3d01      	subs	r5, #1
 800dee2:	920e      	str	r2, [sp, #56]	; 0x38
 800dee4:	e76f      	b.n	800ddc6 <_dtoa_r+0x126>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e7b3      	b.n	800de52 <_dtoa_r+0x1b2>
 800deea:	900c      	str	r0, [sp, #48]	; 0x30
 800deec:	e7b2      	b.n	800de54 <_dtoa_r+0x1b4>
 800deee:	9b05      	ldr	r3, [sp, #20]
 800def0:	eba3 030b 	sub.w	r3, r3, fp
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	f1cb 0300 	rsb	r3, fp, #0
 800defa:	9308      	str	r3, [sp, #32]
 800defc:	2300      	movs	r3, #0
 800defe:	930b      	str	r3, [sp, #44]	; 0x2c
 800df00:	e7bf      	b.n	800de82 <_dtoa_r+0x1e2>
 800df02:	2300      	movs	r3, #0
 800df04:	9309      	str	r3, [sp, #36]	; 0x24
 800df06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dc52      	bgt.n	800dfb2 <_dtoa_r+0x312>
 800df0c:	2301      	movs	r3, #1
 800df0e:	9301      	str	r3, [sp, #4]
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	461a      	mov	r2, r3
 800df14:	920a      	str	r2, [sp, #40]	; 0x28
 800df16:	e00b      	b.n	800df30 <_dtoa_r+0x290>
 800df18:	2301      	movs	r3, #1
 800df1a:	e7f3      	b.n	800df04 <_dtoa_r+0x264>
 800df1c:	2300      	movs	r3, #0
 800df1e:	9309      	str	r3, [sp, #36]	; 0x24
 800df20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df22:	445b      	add	r3, fp
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	3301      	adds	r3, #1
 800df28:	2b01      	cmp	r3, #1
 800df2a:	9304      	str	r3, [sp, #16]
 800df2c:	bfb8      	it	lt
 800df2e:	2301      	movlt	r3, #1
 800df30:	69e0      	ldr	r0, [r4, #28]
 800df32:	2100      	movs	r1, #0
 800df34:	2204      	movs	r2, #4
 800df36:	f102 0614 	add.w	r6, r2, #20
 800df3a:	429e      	cmp	r6, r3
 800df3c:	d93d      	bls.n	800dfba <_dtoa_r+0x31a>
 800df3e:	6041      	str	r1, [r0, #4]
 800df40:	4620      	mov	r0, r4
 800df42:	f000 fd9f 	bl	800ea84 <_Balloc>
 800df46:	9000      	str	r0, [sp, #0]
 800df48:	2800      	cmp	r0, #0
 800df4a:	d139      	bne.n	800dfc0 <_dtoa_r+0x320>
 800df4c:	4b16      	ldr	r3, [pc, #88]	; (800dfa8 <_dtoa_r+0x308>)
 800df4e:	4602      	mov	r2, r0
 800df50:	f240 11af 	movw	r1, #431	; 0x1af
 800df54:	e6bd      	b.n	800dcd2 <_dtoa_r+0x32>
 800df56:	2301      	movs	r3, #1
 800df58:	e7e1      	b.n	800df1e <_dtoa_r+0x27e>
 800df5a:	2501      	movs	r5, #1
 800df5c:	2300      	movs	r3, #0
 800df5e:	9307      	str	r3, [sp, #28]
 800df60:	9509      	str	r5, [sp, #36]	; 0x24
 800df62:	f04f 33ff 	mov.w	r3, #4294967295
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	9304      	str	r3, [sp, #16]
 800df6a:	2200      	movs	r2, #0
 800df6c:	2312      	movs	r3, #18
 800df6e:	e7d1      	b.n	800df14 <_dtoa_r+0x274>
 800df70:	636f4361 	.word	0x636f4361
 800df74:	3fd287a7 	.word	0x3fd287a7
 800df78:	8b60c8b3 	.word	0x8b60c8b3
 800df7c:	3fc68a28 	.word	0x3fc68a28
 800df80:	509f79fb 	.word	0x509f79fb
 800df84:	3fd34413 	.word	0x3fd34413
 800df88:	080121a9 	.word	0x080121a9
 800df8c:	080121c0 	.word	0x080121c0
 800df90:	7ff00000 	.word	0x7ff00000
 800df94:	080121a5 	.word	0x080121a5
 800df98:	0801219c 	.word	0x0801219c
 800df9c:	08012179 	.word	0x08012179
 800dfa0:	3ff80000 	.word	0x3ff80000
 800dfa4:	080122b0 	.word	0x080122b0
 800dfa8:	08012218 	.word	0x08012218
 800dfac:	2301      	movs	r3, #1
 800dfae:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb0:	e7d7      	b.n	800df62 <_dtoa_r+0x2c2>
 800dfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	e7ba      	b.n	800df30 <_dtoa_r+0x290>
 800dfba:	3101      	adds	r1, #1
 800dfbc:	0052      	lsls	r2, r2, #1
 800dfbe:	e7ba      	b.n	800df36 <_dtoa_r+0x296>
 800dfc0:	69e3      	ldr	r3, [r4, #28]
 800dfc2:	9a00      	ldr	r2, [sp, #0]
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	9b04      	ldr	r3, [sp, #16]
 800dfc8:	2b0e      	cmp	r3, #14
 800dfca:	f200 80a8 	bhi.w	800e11e <_dtoa_r+0x47e>
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	f000 80a5 	beq.w	800e11e <_dtoa_r+0x47e>
 800dfd4:	f1bb 0f00 	cmp.w	fp, #0
 800dfd8:	dd38      	ble.n	800e04c <_dtoa_r+0x3ac>
 800dfda:	4bc0      	ldr	r3, [pc, #768]	; (800e2dc <_dtoa_r+0x63c>)
 800dfdc:	f00b 020f 	and.w	r2, fp, #15
 800dfe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dfe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dfec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dff0:	d019      	beq.n	800e026 <_dtoa_r+0x386>
 800dff2:	4bbb      	ldr	r3, [pc, #748]	; (800e2e0 <_dtoa_r+0x640>)
 800dff4:	ec51 0b18 	vmov	r0, r1, d8
 800dff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dffc:	f7f2 fc26 	bl	800084c <__aeabi_ddiv>
 800e000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e004:	f008 080f 	and.w	r8, r8, #15
 800e008:	2503      	movs	r5, #3
 800e00a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e2e0 <_dtoa_r+0x640>
 800e00e:	f1b8 0f00 	cmp.w	r8, #0
 800e012:	d10a      	bne.n	800e02a <_dtoa_r+0x38a>
 800e014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e018:	4632      	mov	r2, r6
 800e01a:	463b      	mov	r3, r7
 800e01c:	f7f2 fc16 	bl	800084c <__aeabi_ddiv>
 800e020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e024:	e02b      	b.n	800e07e <_dtoa_r+0x3de>
 800e026:	2502      	movs	r5, #2
 800e028:	e7ef      	b.n	800e00a <_dtoa_r+0x36a>
 800e02a:	f018 0f01 	tst.w	r8, #1
 800e02e:	d008      	beq.n	800e042 <_dtoa_r+0x3a2>
 800e030:	4630      	mov	r0, r6
 800e032:	4639      	mov	r1, r7
 800e034:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	3501      	adds	r5, #1
 800e03e:	4606      	mov	r6, r0
 800e040:	460f      	mov	r7, r1
 800e042:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e046:	f109 0908 	add.w	r9, r9, #8
 800e04a:	e7e0      	b.n	800e00e <_dtoa_r+0x36e>
 800e04c:	f000 809f 	beq.w	800e18e <_dtoa_r+0x4ee>
 800e050:	f1cb 0600 	rsb	r6, fp, #0
 800e054:	4ba1      	ldr	r3, [pc, #644]	; (800e2dc <_dtoa_r+0x63c>)
 800e056:	4fa2      	ldr	r7, [pc, #648]	; (800e2e0 <_dtoa_r+0x640>)
 800e058:	f006 020f 	and.w	r2, r6, #15
 800e05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	ec51 0b18 	vmov	r0, r1, d8
 800e068:	f7f2 fac6 	bl	80005f8 <__aeabi_dmul>
 800e06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e070:	1136      	asrs	r6, r6, #4
 800e072:	2300      	movs	r3, #0
 800e074:	2502      	movs	r5, #2
 800e076:	2e00      	cmp	r6, #0
 800e078:	d17e      	bne.n	800e178 <_dtoa_r+0x4d8>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1d0      	bne.n	800e020 <_dtoa_r+0x380>
 800e07e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 8084 	beq.w	800e192 <_dtoa_r+0x4f2>
 800e08a:	4b96      	ldr	r3, [pc, #600]	; (800e2e4 <_dtoa_r+0x644>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	4640      	mov	r0, r8
 800e090:	4649      	mov	r1, r9
 800e092:	f7f2 fd23 	bl	8000adc <__aeabi_dcmplt>
 800e096:	2800      	cmp	r0, #0
 800e098:	d07b      	beq.n	800e192 <_dtoa_r+0x4f2>
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d078      	beq.n	800e192 <_dtoa_r+0x4f2>
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd39      	ble.n	800e11a <_dtoa_r+0x47a>
 800e0a6:	4b90      	ldr	r3, [pc, #576]	; (800e2e8 <_dtoa_r+0x648>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	4649      	mov	r1, r9
 800e0ae:	f7f2 faa3 	bl	80005f8 <__aeabi_dmul>
 800e0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b6:	9e01      	ldr	r6, [sp, #4]
 800e0b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e0bc:	3501      	adds	r5, #1
 800e0be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f7f2 fa2e 	bl	8000524 <__aeabi_i2d>
 800e0c8:	4642      	mov	r2, r8
 800e0ca:	464b      	mov	r3, r9
 800e0cc:	f7f2 fa94 	bl	80005f8 <__aeabi_dmul>
 800e0d0:	4b86      	ldr	r3, [pc, #536]	; (800e2ec <_dtoa_r+0x64c>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f7f2 f8da 	bl	800028c <__adddf3>
 800e0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0e0:	9303      	str	r3, [sp, #12]
 800e0e2:	2e00      	cmp	r6, #0
 800e0e4:	d158      	bne.n	800e198 <_dtoa_r+0x4f8>
 800e0e6:	4b82      	ldr	r3, [pc, #520]	; (800e2f0 <_dtoa_r+0x650>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 f8cb 	bl	8000288 <__aeabi_dsub>
 800e0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0f6:	4680      	mov	r8, r0
 800e0f8:	4689      	mov	r9, r1
 800e0fa:	f7f2 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f040 8296 	bne.w	800e630 <_dtoa_r+0x990>
 800e104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e108:	4640      	mov	r0, r8
 800e10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e10e:	4649      	mov	r1, r9
 800e110:	f7f2 fce4 	bl	8000adc <__aeabi_dcmplt>
 800e114:	2800      	cmp	r0, #0
 800e116:	f040 8289 	bne.w	800e62c <_dtoa_r+0x98c>
 800e11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e120:	2b00      	cmp	r3, #0
 800e122:	f2c0 814e 	blt.w	800e3c2 <_dtoa_r+0x722>
 800e126:	f1bb 0f0e 	cmp.w	fp, #14
 800e12a:	f300 814a 	bgt.w	800e3c2 <_dtoa_r+0x722>
 800e12e:	4b6b      	ldr	r3, [pc, #428]	; (800e2dc <_dtoa_r+0x63c>)
 800e130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f280 80dc 	bge.w	800e2f8 <_dtoa_r+0x658>
 800e140:	9b04      	ldr	r3, [sp, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	f300 80d8 	bgt.w	800e2f8 <_dtoa_r+0x658>
 800e148:	f040 826f 	bne.w	800e62a <_dtoa_r+0x98a>
 800e14c:	4b68      	ldr	r3, [pc, #416]	; (800e2f0 <_dtoa_r+0x650>)
 800e14e:	2200      	movs	r2, #0
 800e150:	4640      	mov	r0, r8
 800e152:	4649      	mov	r1, r9
 800e154:	f7f2 fa50 	bl	80005f8 <__aeabi_dmul>
 800e158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e15c:	f7f2 fcd2 	bl	8000b04 <__aeabi_dcmpge>
 800e160:	9e04      	ldr	r6, [sp, #16]
 800e162:	4637      	mov	r7, r6
 800e164:	2800      	cmp	r0, #0
 800e166:	f040 8245 	bne.w	800e5f4 <_dtoa_r+0x954>
 800e16a:	9d00      	ldr	r5, [sp, #0]
 800e16c:	2331      	movs	r3, #49	; 0x31
 800e16e:	f805 3b01 	strb.w	r3, [r5], #1
 800e172:	f10b 0b01 	add.w	fp, fp, #1
 800e176:	e241      	b.n	800e5fc <_dtoa_r+0x95c>
 800e178:	07f2      	lsls	r2, r6, #31
 800e17a:	d505      	bpl.n	800e188 <_dtoa_r+0x4e8>
 800e17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e180:	f7f2 fa3a 	bl	80005f8 <__aeabi_dmul>
 800e184:	3501      	adds	r5, #1
 800e186:	2301      	movs	r3, #1
 800e188:	1076      	asrs	r6, r6, #1
 800e18a:	3708      	adds	r7, #8
 800e18c:	e773      	b.n	800e076 <_dtoa_r+0x3d6>
 800e18e:	2502      	movs	r5, #2
 800e190:	e775      	b.n	800e07e <_dtoa_r+0x3de>
 800e192:	9e04      	ldr	r6, [sp, #16]
 800e194:	465f      	mov	r7, fp
 800e196:	e792      	b.n	800e0be <_dtoa_r+0x41e>
 800e198:	9900      	ldr	r1, [sp, #0]
 800e19a:	4b50      	ldr	r3, [pc, #320]	; (800e2dc <_dtoa_r+0x63c>)
 800e19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1a0:	4431      	add	r1, r6
 800e1a2:	9102      	str	r1, [sp, #8]
 800e1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1a6:	eeb0 9a47 	vmov.f32	s18, s14
 800e1aa:	eef0 9a67 	vmov.f32	s19, s15
 800e1ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e1b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1b6:	2900      	cmp	r1, #0
 800e1b8:	d044      	beq.n	800e244 <_dtoa_r+0x5a4>
 800e1ba:	494e      	ldr	r1, [pc, #312]	; (800e2f4 <_dtoa_r+0x654>)
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f7f2 fb45 	bl	800084c <__aeabi_ddiv>
 800e1c2:	ec53 2b19 	vmov	r2, r3, d9
 800e1c6:	f7f2 f85f 	bl	8000288 <__aeabi_dsub>
 800e1ca:	9d00      	ldr	r5, [sp, #0]
 800e1cc:	ec41 0b19 	vmov	d9, r0, r1
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	f7f2 fcc0 	bl	8000b58 <__aeabi_d2iz>
 800e1d8:	4606      	mov	r6, r0
 800e1da:	f7f2 f9a3 	bl	8000524 <__aeabi_i2d>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	f7f2 f84f 	bl	8000288 <__aeabi_dsub>
 800e1ea:	3630      	adds	r6, #48	; 0x30
 800e1ec:	f805 6b01 	strb.w	r6, [r5], #1
 800e1f0:	ec53 2b19 	vmov	r2, r3, d9
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	4689      	mov	r9, r1
 800e1f8:	f7f2 fc70 	bl	8000adc <__aeabi_dcmplt>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d164      	bne.n	800e2ca <_dtoa_r+0x62a>
 800e200:	4642      	mov	r2, r8
 800e202:	464b      	mov	r3, r9
 800e204:	4937      	ldr	r1, [pc, #220]	; (800e2e4 <_dtoa_r+0x644>)
 800e206:	2000      	movs	r0, #0
 800e208:	f7f2 f83e 	bl	8000288 <__aeabi_dsub>
 800e20c:	ec53 2b19 	vmov	r2, r3, d9
 800e210:	f7f2 fc64 	bl	8000adc <__aeabi_dcmplt>
 800e214:	2800      	cmp	r0, #0
 800e216:	f040 80b6 	bne.w	800e386 <_dtoa_r+0x6e6>
 800e21a:	9b02      	ldr	r3, [sp, #8]
 800e21c:	429d      	cmp	r5, r3
 800e21e:	f43f af7c 	beq.w	800e11a <_dtoa_r+0x47a>
 800e222:	4b31      	ldr	r3, [pc, #196]	; (800e2e8 <_dtoa_r+0x648>)
 800e224:	ec51 0b19 	vmov	r0, r1, d9
 800e228:	2200      	movs	r2, #0
 800e22a:	f7f2 f9e5 	bl	80005f8 <__aeabi_dmul>
 800e22e:	4b2e      	ldr	r3, [pc, #184]	; (800e2e8 <_dtoa_r+0x648>)
 800e230:	ec41 0b19 	vmov	d9, r0, r1
 800e234:	2200      	movs	r2, #0
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 f9dd 	bl	80005f8 <__aeabi_dmul>
 800e23e:	4680      	mov	r8, r0
 800e240:	4689      	mov	r9, r1
 800e242:	e7c5      	b.n	800e1d0 <_dtoa_r+0x530>
 800e244:	ec51 0b17 	vmov	r0, r1, d7
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	9b02      	ldr	r3, [sp, #8]
 800e24e:	9d00      	ldr	r5, [sp, #0]
 800e250:	930f      	str	r3, [sp, #60]	; 0x3c
 800e252:	ec41 0b19 	vmov	d9, r0, r1
 800e256:	4649      	mov	r1, r9
 800e258:	4640      	mov	r0, r8
 800e25a:	f7f2 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800e25e:	4606      	mov	r6, r0
 800e260:	f7f2 f960 	bl	8000524 <__aeabi_i2d>
 800e264:	3630      	adds	r6, #48	; 0x30
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 f80b 	bl	8000288 <__aeabi_dsub>
 800e272:	f805 6b01 	strb.w	r6, [r5], #1
 800e276:	9b02      	ldr	r3, [sp, #8]
 800e278:	429d      	cmp	r5, r3
 800e27a:	4680      	mov	r8, r0
 800e27c:	4689      	mov	r9, r1
 800e27e:	f04f 0200 	mov.w	r2, #0
 800e282:	d124      	bne.n	800e2ce <_dtoa_r+0x62e>
 800e284:	4b1b      	ldr	r3, [pc, #108]	; (800e2f4 <_dtoa_r+0x654>)
 800e286:	ec51 0b19 	vmov	r0, r1, d9
 800e28a:	f7f1 ffff 	bl	800028c <__adddf3>
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	4640      	mov	r0, r8
 800e294:	4649      	mov	r1, r9
 800e296:	f7f2 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d173      	bne.n	800e386 <_dtoa_r+0x6e6>
 800e29e:	ec53 2b19 	vmov	r2, r3, d9
 800e2a2:	4914      	ldr	r1, [pc, #80]	; (800e2f4 <_dtoa_r+0x654>)
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	f7f1 ffef 	bl	8000288 <__aeabi_dsub>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	f7f2 fc13 	bl	8000adc <__aeabi_dcmplt>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f43f af2f 	beq.w	800e11a <_dtoa_r+0x47a>
 800e2bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e2be:	1e6b      	subs	r3, r5, #1
 800e2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2c6:	2b30      	cmp	r3, #48	; 0x30
 800e2c8:	d0f8      	beq.n	800e2bc <_dtoa_r+0x61c>
 800e2ca:	46bb      	mov	fp, r7
 800e2cc:	e04a      	b.n	800e364 <_dtoa_r+0x6c4>
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <_dtoa_r+0x648>)
 800e2d0:	f7f2 f992 	bl	80005f8 <__aeabi_dmul>
 800e2d4:	4680      	mov	r8, r0
 800e2d6:	4689      	mov	r9, r1
 800e2d8:	e7bd      	b.n	800e256 <_dtoa_r+0x5b6>
 800e2da:	bf00      	nop
 800e2dc:	080122b0 	.word	0x080122b0
 800e2e0:	08012288 	.word	0x08012288
 800e2e4:	3ff00000 	.word	0x3ff00000
 800e2e8:	40240000 	.word	0x40240000
 800e2ec:	401c0000 	.word	0x401c0000
 800e2f0:	40140000 	.word	0x40140000
 800e2f4:	3fe00000 	.word	0x3fe00000
 800e2f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2fc:	9d00      	ldr	r5, [sp, #0]
 800e2fe:	4642      	mov	r2, r8
 800e300:	464b      	mov	r3, r9
 800e302:	4630      	mov	r0, r6
 800e304:	4639      	mov	r1, r7
 800e306:	f7f2 faa1 	bl	800084c <__aeabi_ddiv>
 800e30a:	f7f2 fc25 	bl	8000b58 <__aeabi_d2iz>
 800e30e:	9001      	str	r0, [sp, #4]
 800e310:	f7f2 f908 	bl	8000524 <__aeabi_i2d>
 800e314:	4642      	mov	r2, r8
 800e316:	464b      	mov	r3, r9
 800e318:	f7f2 f96e 	bl	80005f8 <__aeabi_dmul>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4630      	mov	r0, r6
 800e322:	4639      	mov	r1, r7
 800e324:	f7f1 ffb0 	bl	8000288 <__aeabi_dsub>
 800e328:	9e01      	ldr	r6, [sp, #4]
 800e32a:	9f04      	ldr	r7, [sp, #16]
 800e32c:	3630      	adds	r6, #48	; 0x30
 800e32e:	f805 6b01 	strb.w	r6, [r5], #1
 800e332:	9e00      	ldr	r6, [sp, #0]
 800e334:	1bae      	subs	r6, r5, r6
 800e336:	42b7      	cmp	r7, r6
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	d134      	bne.n	800e3a8 <_dtoa_r+0x708>
 800e33e:	f7f1 ffa5 	bl	800028c <__adddf3>
 800e342:	4642      	mov	r2, r8
 800e344:	464b      	mov	r3, r9
 800e346:	4606      	mov	r6, r0
 800e348:	460f      	mov	r7, r1
 800e34a:	f7f2 fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800e34e:	b9c8      	cbnz	r0, 800e384 <_dtoa_r+0x6e4>
 800e350:	4642      	mov	r2, r8
 800e352:	464b      	mov	r3, r9
 800e354:	4630      	mov	r0, r6
 800e356:	4639      	mov	r1, r7
 800e358:	f7f2 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e35c:	b110      	cbz	r0, 800e364 <_dtoa_r+0x6c4>
 800e35e:	9b01      	ldr	r3, [sp, #4]
 800e360:	07db      	lsls	r3, r3, #31
 800e362:	d40f      	bmi.n	800e384 <_dtoa_r+0x6e4>
 800e364:	4651      	mov	r1, sl
 800e366:	4620      	mov	r0, r4
 800e368:	f000 fbcc 	bl	800eb04 <_Bfree>
 800e36c:	2300      	movs	r3, #0
 800e36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e370:	702b      	strb	r3, [r5, #0]
 800e372:	f10b 0301 	add.w	r3, fp, #1
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f43f ace2 	beq.w	800dd44 <_dtoa_r+0xa4>
 800e380:	601d      	str	r5, [r3, #0]
 800e382:	e4df      	b.n	800dd44 <_dtoa_r+0xa4>
 800e384:	465f      	mov	r7, fp
 800e386:	462b      	mov	r3, r5
 800e388:	461d      	mov	r5, r3
 800e38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e38e:	2a39      	cmp	r2, #57	; 0x39
 800e390:	d106      	bne.n	800e3a0 <_dtoa_r+0x700>
 800e392:	9a00      	ldr	r2, [sp, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d1f7      	bne.n	800e388 <_dtoa_r+0x6e8>
 800e398:	9900      	ldr	r1, [sp, #0]
 800e39a:	2230      	movs	r2, #48	; 0x30
 800e39c:	3701      	adds	r7, #1
 800e39e:	700a      	strb	r2, [r1, #0]
 800e3a0:	781a      	ldrb	r2, [r3, #0]
 800e3a2:	3201      	adds	r2, #1
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	e790      	b.n	800e2ca <_dtoa_r+0x62a>
 800e3a8:	4ba3      	ldr	r3, [pc, #652]	; (800e638 <_dtoa_r+0x998>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f7f2 f924 	bl	80005f8 <__aeabi_dmul>
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	460f      	mov	r7, r1
 800e3b8:	f7f2 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d09e      	beq.n	800e2fe <_dtoa_r+0x65e>
 800e3c0:	e7d0      	b.n	800e364 <_dtoa_r+0x6c4>
 800e3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3c4:	2a00      	cmp	r2, #0
 800e3c6:	f000 80ca 	beq.w	800e55e <_dtoa_r+0x8be>
 800e3ca:	9a07      	ldr	r2, [sp, #28]
 800e3cc:	2a01      	cmp	r2, #1
 800e3ce:	f300 80ad 	bgt.w	800e52c <_dtoa_r+0x88c>
 800e3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3d4:	2a00      	cmp	r2, #0
 800e3d6:	f000 80a5 	beq.w	800e524 <_dtoa_r+0x884>
 800e3da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3de:	9e08      	ldr	r6, [sp, #32]
 800e3e0:	9d05      	ldr	r5, [sp, #20]
 800e3e2:	9a05      	ldr	r2, [sp, #20]
 800e3e4:	441a      	add	r2, r3
 800e3e6:	9205      	str	r2, [sp, #20]
 800e3e8:	9a06      	ldr	r2, [sp, #24]
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	441a      	add	r2, r3
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	9206      	str	r2, [sp, #24]
 800e3f2:	f000 fc3d 	bl	800ec70 <__i2b>
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	b165      	cbz	r5, 800e414 <_dtoa_r+0x774>
 800e3fa:	9b06      	ldr	r3, [sp, #24]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dd09      	ble.n	800e414 <_dtoa_r+0x774>
 800e400:	42ab      	cmp	r3, r5
 800e402:	9a05      	ldr	r2, [sp, #20]
 800e404:	bfa8      	it	ge
 800e406:	462b      	movge	r3, r5
 800e408:	1ad2      	subs	r2, r2, r3
 800e40a:	9205      	str	r2, [sp, #20]
 800e40c:	9a06      	ldr	r2, [sp, #24]
 800e40e:	1aed      	subs	r5, r5, r3
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	9306      	str	r3, [sp, #24]
 800e414:	9b08      	ldr	r3, [sp, #32]
 800e416:	b1f3      	cbz	r3, 800e456 <_dtoa_r+0x7b6>
 800e418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 80a3 	beq.w	800e566 <_dtoa_r+0x8c6>
 800e420:	2e00      	cmp	r6, #0
 800e422:	dd10      	ble.n	800e446 <_dtoa_r+0x7a6>
 800e424:	4639      	mov	r1, r7
 800e426:	4632      	mov	r2, r6
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 fce1 	bl	800edf0 <__pow5mult>
 800e42e:	4652      	mov	r2, sl
 800e430:	4601      	mov	r1, r0
 800e432:	4607      	mov	r7, r0
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fc31 	bl	800ec9c <__multiply>
 800e43a:	4651      	mov	r1, sl
 800e43c:	4680      	mov	r8, r0
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fb60 	bl	800eb04 <_Bfree>
 800e444:	46c2      	mov	sl, r8
 800e446:	9b08      	ldr	r3, [sp, #32]
 800e448:	1b9a      	subs	r2, r3, r6
 800e44a:	d004      	beq.n	800e456 <_dtoa_r+0x7b6>
 800e44c:	4651      	mov	r1, sl
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 fcce 	bl	800edf0 <__pow5mult>
 800e454:	4682      	mov	sl, r0
 800e456:	2101      	movs	r1, #1
 800e458:	4620      	mov	r0, r4
 800e45a:	f000 fc09 	bl	800ec70 <__i2b>
 800e45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e460:	2b00      	cmp	r3, #0
 800e462:	4606      	mov	r6, r0
 800e464:	f340 8081 	ble.w	800e56a <_dtoa_r+0x8ca>
 800e468:	461a      	mov	r2, r3
 800e46a:	4601      	mov	r1, r0
 800e46c:	4620      	mov	r0, r4
 800e46e:	f000 fcbf 	bl	800edf0 <__pow5mult>
 800e472:	9b07      	ldr	r3, [sp, #28]
 800e474:	2b01      	cmp	r3, #1
 800e476:	4606      	mov	r6, r0
 800e478:	dd7a      	ble.n	800e570 <_dtoa_r+0x8d0>
 800e47a:	f04f 0800 	mov.w	r8, #0
 800e47e:	6933      	ldr	r3, [r6, #16]
 800e480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e484:	6918      	ldr	r0, [r3, #16]
 800e486:	f000 fba5 	bl	800ebd4 <__hi0bits>
 800e48a:	f1c0 0020 	rsb	r0, r0, #32
 800e48e:	9b06      	ldr	r3, [sp, #24]
 800e490:	4418      	add	r0, r3
 800e492:	f010 001f 	ands.w	r0, r0, #31
 800e496:	f000 8094 	beq.w	800e5c2 <_dtoa_r+0x922>
 800e49a:	f1c0 0320 	rsb	r3, r0, #32
 800e49e:	2b04      	cmp	r3, #4
 800e4a0:	f340 8085 	ble.w	800e5ae <_dtoa_r+0x90e>
 800e4a4:	9b05      	ldr	r3, [sp, #20]
 800e4a6:	f1c0 001c 	rsb	r0, r0, #28
 800e4aa:	4403      	add	r3, r0
 800e4ac:	9305      	str	r3, [sp, #20]
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	4403      	add	r3, r0
 800e4b2:	4405      	add	r5, r0
 800e4b4:	9306      	str	r3, [sp, #24]
 800e4b6:	9b05      	ldr	r3, [sp, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	dd05      	ble.n	800e4c8 <_dtoa_r+0x828>
 800e4bc:	4651      	mov	r1, sl
 800e4be:	461a      	mov	r2, r3
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f000 fcef 	bl	800eea4 <__lshift>
 800e4c6:	4682      	mov	sl, r0
 800e4c8:	9b06      	ldr	r3, [sp, #24]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	dd05      	ble.n	800e4da <_dtoa_r+0x83a>
 800e4ce:	4631      	mov	r1, r6
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 fce6 	bl	800eea4 <__lshift>
 800e4d8:	4606      	mov	r6, r0
 800e4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d072      	beq.n	800e5c6 <_dtoa_r+0x926>
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	4650      	mov	r0, sl
 800e4e4:	f000 fd4a 	bl	800ef7c <__mcmp>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	da6c      	bge.n	800e5c6 <_dtoa_r+0x926>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	4651      	mov	r1, sl
 800e4f0:	220a      	movs	r2, #10
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f000 fb28 	bl	800eb48 <__multadd>
 800e4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4fe:	4682      	mov	sl, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 81b0 	beq.w	800e866 <_dtoa_r+0xbc6>
 800e506:	2300      	movs	r3, #0
 800e508:	4639      	mov	r1, r7
 800e50a:	220a      	movs	r2, #10
 800e50c:	4620      	mov	r0, r4
 800e50e:	f000 fb1b 	bl	800eb48 <__multadd>
 800e512:	9b01      	ldr	r3, [sp, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	4607      	mov	r7, r0
 800e518:	f300 8096 	bgt.w	800e648 <_dtoa_r+0x9a8>
 800e51c:	9b07      	ldr	r3, [sp, #28]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	dc59      	bgt.n	800e5d6 <_dtoa_r+0x936>
 800e522:	e091      	b.n	800e648 <_dtoa_r+0x9a8>
 800e524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e52a:	e758      	b.n	800e3de <_dtoa_r+0x73e>
 800e52c:	9b04      	ldr	r3, [sp, #16]
 800e52e:	1e5e      	subs	r6, r3, #1
 800e530:	9b08      	ldr	r3, [sp, #32]
 800e532:	42b3      	cmp	r3, r6
 800e534:	bfbf      	itttt	lt
 800e536:	9b08      	ldrlt	r3, [sp, #32]
 800e538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e53a:	9608      	strlt	r6, [sp, #32]
 800e53c:	1af3      	sublt	r3, r6, r3
 800e53e:	bfb4      	ite	lt
 800e540:	18d2      	addlt	r2, r2, r3
 800e542:	1b9e      	subge	r6, r3, r6
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	bfbc      	itt	lt
 800e548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e54a:	2600      	movlt	r6, #0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	bfb7      	itett	lt
 800e550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e558:	1a9d      	sublt	r5, r3, r2
 800e55a:	2300      	movlt	r3, #0
 800e55c:	e741      	b.n	800e3e2 <_dtoa_r+0x742>
 800e55e:	9e08      	ldr	r6, [sp, #32]
 800e560:	9d05      	ldr	r5, [sp, #20]
 800e562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e564:	e748      	b.n	800e3f8 <_dtoa_r+0x758>
 800e566:	9a08      	ldr	r2, [sp, #32]
 800e568:	e770      	b.n	800e44c <_dtoa_r+0x7ac>
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	dc19      	bgt.n	800e5a4 <_dtoa_r+0x904>
 800e570:	9b02      	ldr	r3, [sp, #8]
 800e572:	b9bb      	cbnz	r3, 800e5a4 <_dtoa_r+0x904>
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e57a:	b99b      	cbnz	r3, 800e5a4 <_dtoa_r+0x904>
 800e57c:	9b03      	ldr	r3, [sp, #12]
 800e57e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e582:	0d1b      	lsrs	r3, r3, #20
 800e584:	051b      	lsls	r3, r3, #20
 800e586:	b183      	cbz	r3, 800e5aa <_dtoa_r+0x90a>
 800e588:	9b05      	ldr	r3, [sp, #20]
 800e58a:	3301      	adds	r3, #1
 800e58c:	9305      	str	r3, [sp, #20]
 800e58e:	9b06      	ldr	r3, [sp, #24]
 800e590:	3301      	adds	r3, #1
 800e592:	9306      	str	r3, [sp, #24]
 800e594:	f04f 0801 	mov.w	r8, #1
 800e598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f47f af6f 	bne.w	800e47e <_dtoa_r+0x7de>
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	e774      	b.n	800e48e <_dtoa_r+0x7ee>
 800e5a4:	f04f 0800 	mov.w	r8, #0
 800e5a8:	e7f6      	b.n	800e598 <_dtoa_r+0x8f8>
 800e5aa:	4698      	mov	r8, r3
 800e5ac:	e7f4      	b.n	800e598 <_dtoa_r+0x8f8>
 800e5ae:	d082      	beq.n	800e4b6 <_dtoa_r+0x816>
 800e5b0:	9a05      	ldr	r2, [sp, #20]
 800e5b2:	331c      	adds	r3, #28
 800e5b4:	441a      	add	r2, r3
 800e5b6:	9205      	str	r2, [sp, #20]
 800e5b8:	9a06      	ldr	r2, [sp, #24]
 800e5ba:	441a      	add	r2, r3
 800e5bc:	441d      	add	r5, r3
 800e5be:	9206      	str	r2, [sp, #24]
 800e5c0:	e779      	b.n	800e4b6 <_dtoa_r+0x816>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	e7f4      	b.n	800e5b0 <_dtoa_r+0x910>
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dc37      	bgt.n	800e63c <_dtoa_r+0x99c>
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	dd34      	ble.n	800e63c <_dtoa_r+0x99c>
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	b963      	cbnz	r3, 800e5f4 <_dtoa_r+0x954>
 800e5da:	4631      	mov	r1, r6
 800e5dc:	2205      	movs	r2, #5
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f000 fab2 	bl	800eb48 <__multadd>
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	4650      	mov	r0, sl
 800e5ea:	f000 fcc7 	bl	800ef7c <__mcmp>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f73f adbb 	bgt.w	800e16a <_dtoa_r+0x4ca>
 800e5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5f6:	9d00      	ldr	r5, [sp, #0]
 800e5f8:	ea6f 0b03 	mvn.w	fp, r3
 800e5fc:	f04f 0800 	mov.w	r8, #0
 800e600:	4631      	mov	r1, r6
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fa7e 	bl	800eb04 <_Bfree>
 800e608:	2f00      	cmp	r7, #0
 800e60a:	f43f aeab 	beq.w	800e364 <_dtoa_r+0x6c4>
 800e60e:	f1b8 0f00 	cmp.w	r8, #0
 800e612:	d005      	beq.n	800e620 <_dtoa_r+0x980>
 800e614:	45b8      	cmp	r8, r7
 800e616:	d003      	beq.n	800e620 <_dtoa_r+0x980>
 800e618:	4641      	mov	r1, r8
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 fa72 	bl	800eb04 <_Bfree>
 800e620:	4639      	mov	r1, r7
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fa6e 	bl	800eb04 <_Bfree>
 800e628:	e69c      	b.n	800e364 <_dtoa_r+0x6c4>
 800e62a:	2600      	movs	r6, #0
 800e62c:	4637      	mov	r7, r6
 800e62e:	e7e1      	b.n	800e5f4 <_dtoa_r+0x954>
 800e630:	46bb      	mov	fp, r7
 800e632:	4637      	mov	r7, r6
 800e634:	e599      	b.n	800e16a <_dtoa_r+0x4ca>
 800e636:	bf00      	nop
 800e638:	40240000 	.word	0x40240000
 800e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 80c8 	beq.w	800e7d4 <_dtoa_r+0xb34>
 800e644:	9b04      	ldr	r3, [sp, #16]
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	2d00      	cmp	r5, #0
 800e64a:	dd05      	ble.n	800e658 <_dtoa_r+0x9b8>
 800e64c:	4639      	mov	r1, r7
 800e64e:	462a      	mov	r2, r5
 800e650:	4620      	mov	r0, r4
 800e652:	f000 fc27 	bl	800eea4 <__lshift>
 800e656:	4607      	mov	r7, r0
 800e658:	f1b8 0f00 	cmp.w	r8, #0
 800e65c:	d05b      	beq.n	800e716 <_dtoa_r+0xa76>
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	4620      	mov	r0, r4
 800e662:	f000 fa0f 	bl	800ea84 <_Balloc>
 800e666:	4605      	mov	r5, r0
 800e668:	b928      	cbnz	r0, 800e676 <_dtoa_r+0x9d6>
 800e66a:	4b83      	ldr	r3, [pc, #524]	; (800e878 <_dtoa_r+0xbd8>)
 800e66c:	4602      	mov	r2, r0
 800e66e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e672:	f7ff bb2e 	b.w	800dcd2 <_dtoa_r+0x32>
 800e676:	693a      	ldr	r2, [r7, #16]
 800e678:	3202      	adds	r2, #2
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	f107 010c 	add.w	r1, r7, #12
 800e680:	300c      	adds	r0, #12
 800e682:	f7ff fa74 	bl	800db6e <memcpy>
 800e686:	2201      	movs	r2, #1
 800e688:	4629      	mov	r1, r5
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 fc0a 	bl	800eea4 <__lshift>
 800e690:	9b00      	ldr	r3, [sp, #0]
 800e692:	3301      	adds	r3, #1
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e69a:	4413      	add	r3, r2
 800e69c:	9308      	str	r3, [sp, #32]
 800e69e:	9b02      	ldr	r3, [sp, #8]
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	46b8      	mov	r8, r7
 800e6a6:	9306      	str	r3, [sp, #24]
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	9b04      	ldr	r3, [sp, #16]
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	4650      	mov	r0, sl
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	f7ff fa69 	bl	800db8a <quorem>
 800e6b8:	4641      	mov	r1, r8
 800e6ba:	9002      	str	r0, [sp, #8]
 800e6bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	f000 fc5b 	bl	800ef7c <__mcmp>
 800e6c6:	463a      	mov	r2, r7
 800e6c8:	9005      	str	r0, [sp, #20]
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f000 fc71 	bl	800efb4 <__mdiff>
 800e6d2:	68c2      	ldr	r2, [r0, #12]
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	bb02      	cbnz	r2, 800e71a <_dtoa_r+0xa7a>
 800e6d8:	4601      	mov	r1, r0
 800e6da:	4650      	mov	r0, sl
 800e6dc:	f000 fc4e 	bl	800ef7c <__mcmp>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	4629      	mov	r1, r5
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e8:	f000 fa0c 	bl	800eb04 <_Bfree>
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6f0:	9d04      	ldr	r5, [sp, #16]
 800e6f2:	ea43 0102 	orr.w	r1, r3, r2
 800e6f6:	9b06      	ldr	r3, [sp, #24]
 800e6f8:	4319      	orrs	r1, r3
 800e6fa:	d110      	bne.n	800e71e <_dtoa_r+0xa7e>
 800e6fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e700:	d029      	beq.n	800e756 <_dtoa_r+0xab6>
 800e702:	9b05      	ldr	r3, [sp, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	dd02      	ble.n	800e70e <_dtoa_r+0xa6e>
 800e708:	9b02      	ldr	r3, [sp, #8]
 800e70a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e70e:	9b01      	ldr	r3, [sp, #4]
 800e710:	f883 9000 	strb.w	r9, [r3]
 800e714:	e774      	b.n	800e600 <_dtoa_r+0x960>
 800e716:	4638      	mov	r0, r7
 800e718:	e7ba      	b.n	800e690 <_dtoa_r+0x9f0>
 800e71a:	2201      	movs	r2, #1
 800e71c:	e7e1      	b.n	800e6e2 <_dtoa_r+0xa42>
 800e71e:	9b05      	ldr	r3, [sp, #20]
 800e720:	2b00      	cmp	r3, #0
 800e722:	db04      	blt.n	800e72e <_dtoa_r+0xa8e>
 800e724:	9907      	ldr	r1, [sp, #28]
 800e726:	430b      	orrs	r3, r1
 800e728:	9906      	ldr	r1, [sp, #24]
 800e72a:	430b      	orrs	r3, r1
 800e72c:	d120      	bne.n	800e770 <_dtoa_r+0xad0>
 800e72e:	2a00      	cmp	r2, #0
 800e730:	dded      	ble.n	800e70e <_dtoa_r+0xa6e>
 800e732:	4651      	mov	r1, sl
 800e734:	2201      	movs	r2, #1
 800e736:	4620      	mov	r0, r4
 800e738:	f000 fbb4 	bl	800eea4 <__lshift>
 800e73c:	4631      	mov	r1, r6
 800e73e:	4682      	mov	sl, r0
 800e740:	f000 fc1c 	bl	800ef7c <__mcmp>
 800e744:	2800      	cmp	r0, #0
 800e746:	dc03      	bgt.n	800e750 <_dtoa_r+0xab0>
 800e748:	d1e1      	bne.n	800e70e <_dtoa_r+0xa6e>
 800e74a:	f019 0f01 	tst.w	r9, #1
 800e74e:	d0de      	beq.n	800e70e <_dtoa_r+0xa6e>
 800e750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e754:	d1d8      	bne.n	800e708 <_dtoa_r+0xa68>
 800e756:	9a01      	ldr	r2, [sp, #4]
 800e758:	2339      	movs	r3, #57	; 0x39
 800e75a:	7013      	strb	r3, [r2, #0]
 800e75c:	462b      	mov	r3, r5
 800e75e:	461d      	mov	r5, r3
 800e760:	3b01      	subs	r3, #1
 800e762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e766:	2a39      	cmp	r2, #57	; 0x39
 800e768:	d06c      	beq.n	800e844 <_dtoa_r+0xba4>
 800e76a:	3201      	adds	r2, #1
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	e747      	b.n	800e600 <_dtoa_r+0x960>
 800e770:	2a00      	cmp	r2, #0
 800e772:	dd07      	ble.n	800e784 <_dtoa_r+0xae4>
 800e774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e778:	d0ed      	beq.n	800e756 <_dtoa_r+0xab6>
 800e77a:	9a01      	ldr	r2, [sp, #4]
 800e77c:	f109 0301 	add.w	r3, r9, #1
 800e780:	7013      	strb	r3, [r2, #0]
 800e782:	e73d      	b.n	800e600 <_dtoa_r+0x960>
 800e784:	9b04      	ldr	r3, [sp, #16]
 800e786:	9a08      	ldr	r2, [sp, #32]
 800e788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d043      	beq.n	800e818 <_dtoa_r+0xb78>
 800e790:	4651      	mov	r1, sl
 800e792:	2300      	movs	r3, #0
 800e794:	220a      	movs	r2, #10
 800e796:	4620      	mov	r0, r4
 800e798:	f000 f9d6 	bl	800eb48 <__multadd>
 800e79c:	45b8      	cmp	r8, r7
 800e79e:	4682      	mov	sl, r0
 800e7a0:	f04f 0300 	mov.w	r3, #0
 800e7a4:	f04f 020a 	mov.w	r2, #10
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	d107      	bne.n	800e7be <_dtoa_r+0xb1e>
 800e7ae:	f000 f9cb 	bl	800eb48 <__multadd>
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	9b04      	ldr	r3, [sp, #16]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	9304      	str	r3, [sp, #16]
 800e7bc:	e775      	b.n	800e6aa <_dtoa_r+0xa0a>
 800e7be:	f000 f9c3 	bl	800eb48 <__multadd>
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	4680      	mov	r8, r0
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	220a      	movs	r2, #10
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f000 f9bc 	bl	800eb48 <__multadd>
 800e7d0:	4607      	mov	r7, r0
 800e7d2:	e7f0      	b.n	800e7b6 <_dtoa_r+0xb16>
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	9301      	str	r3, [sp, #4]
 800e7d8:	9d00      	ldr	r5, [sp, #0]
 800e7da:	4631      	mov	r1, r6
 800e7dc:	4650      	mov	r0, sl
 800e7de:	f7ff f9d4 	bl	800db8a <quorem>
 800e7e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e7e6:	9b00      	ldr	r3, [sp, #0]
 800e7e8:	f805 9b01 	strb.w	r9, [r5], #1
 800e7ec:	1aea      	subs	r2, r5, r3
 800e7ee:	9b01      	ldr	r3, [sp, #4]
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	dd07      	ble.n	800e804 <_dtoa_r+0xb64>
 800e7f4:	4651      	mov	r1, sl
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 f9a4 	bl	800eb48 <__multadd>
 800e800:	4682      	mov	sl, r0
 800e802:	e7ea      	b.n	800e7da <_dtoa_r+0xb3a>
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	bfc8      	it	gt
 800e80a:	461d      	movgt	r5, r3
 800e80c:	9b00      	ldr	r3, [sp, #0]
 800e80e:	bfd8      	it	le
 800e810:	2501      	movle	r5, #1
 800e812:	441d      	add	r5, r3
 800e814:	f04f 0800 	mov.w	r8, #0
 800e818:	4651      	mov	r1, sl
 800e81a:	2201      	movs	r2, #1
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fb41 	bl	800eea4 <__lshift>
 800e822:	4631      	mov	r1, r6
 800e824:	4682      	mov	sl, r0
 800e826:	f000 fba9 	bl	800ef7c <__mcmp>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	dc96      	bgt.n	800e75c <_dtoa_r+0xabc>
 800e82e:	d102      	bne.n	800e836 <_dtoa_r+0xb96>
 800e830:	f019 0f01 	tst.w	r9, #1
 800e834:	d192      	bne.n	800e75c <_dtoa_r+0xabc>
 800e836:	462b      	mov	r3, r5
 800e838:	461d      	mov	r5, r3
 800e83a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e83e:	2a30      	cmp	r2, #48	; 0x30
 800e840:	d0fa      	beq.n	800e838 <_dtoa_r+0xb98>
 800e842:	e6dd      	b.n	800e600 <_dtoa_r+0x960>
 800e844:	9a00      	ldr	r2, [sp, #0]
 800e846:	429a      	cmp	r2, r3
 800e848:	d189      	bne.n	800e75e <_dtoa_r+0xabe>
 800e84a:	f10b 0b01 	add.w	fp, fp, #1
 800e84e:	2331      	movs	r3, #49	; 0x31
 800e850:	e796      	b.n	800e780 <_dtoa_r+0xae0>
 800e852:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <_dtoa_r+0xbdc>)
 800e854:	f7ff ba99 	b.w	800dd8a <_dtoa_r+0xea>
 800e858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f47f aa6d 	bne.w	800dd3a <_dtoa_r+0x9a>
 800e860:	4b07      	ldr	r3, [pc, #28]	; (800e880 <_dtoa_r+0xbe0>)
 800e862:	f7ff ba92 	b.w	800dd8a <_dtoa_r+0xea>
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dcb5      	bgt.n	800e7d8 <_dtoa_r+0xb38>
 800e86c:	9b07      	ldr	r3, [sp, #28]
 800e86e:	2b02      	cmp	r3, #2
 800e870:	f73f aeb1 	bgt.w	800e5d6 <_dtoa_r+0x936>
 800e874:	e7b0      	b.n	800e7d8 <_dtoa_r+0xb38>
 800e876:	bf00      	nop
 800e878:	08012218 	.word	0x08012218
 800e87c:	08012178 	.word	0x08012178
 800e880:	0801219c 	.word	0x0801219c

0800e884 <_free_r>:
 800e884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e886:	2900      	cmp	r1, #0
 800e888:	d044      	beq.n	800e914 <_free_r+0x90>
 800e88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e88e:	9001      	str	r0, [sp, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	f1a1 0404 	sub.w	r4, r1, #4
 800e896:	bfb8      	it	lt
 800e898:	18e4      	addlt	r4, r4, r3
 800e89a:	f000 f8e7 	bl	800ea6c <__malloc_lock>
 800e89e:	4a1e      	ldr	r2, [pc, #120]	; (800e918 <_free_r+0x94>)
 800e8a0:	9801      	ldr	r0, [sp, #4]
 800e8a2:	6813      	ldr	r3, [r2, #0]
 800e8a4:	b933      	cbnz	r3, 800e8b4 <_free_r+0x30>
 800e8a6:	6063      	str	r3, [r4, #4]
 800e8a8:	6014      	str	r4, [r2, #0]
 800e8aa:	b003      	add	sp, #12
 800e8ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8b0:	f000 b8e2 	b.w	800ea78 <__malloc_unlock>
 800e8b4:	42a3      	cmp	r3, r4
 800e8b6:	d908      	bls.n	800e8ca <_free_r+0x46>
 800e8b8:	6825      	ldr	r5, [r4, #0]
 800e8ba:	1961      	adds	r1, r4, r5
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf01      	itttt	eq
 800e8c0:	6819      	ldreq	r1, [r3, #0]
 800e8c2:	685b      	ldreq	r3, [r3, #4]
 800e8c4:	1949      	addeq	r1, r1, r5
 800e8c6:	6021      	streq	r1, [r4, #0]
 800e8c8:	e7ed      	b.n	800e8a6 <_free_r+0x22>
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	b10b      	cbz	r3, 800e8d4 <_free_r+0x50>
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	d9fa      	bls.n	800e8ca <_free_r+0x46>
 800e8d4:	6811      	ldr	r1, [r2, #0]
 800e8d6:	1855      	adds	r5, r2, r1
 800e8d8:	42a5      	cmp	r5, r4
 800e8da:	d10b      	bne.n	800e8f4 <_free_r+0x70>
 800e8dc:	6824      	ldr	r4, [r4, #0]
 800e8de:	4421      	add	r1, r4
 800e8e0:	1854      	adds	r4, r2, r1
 800e8e2:	42a3      	cmp	r3, r4
 800e8e4:	6011      	str	r1, [r2, #0]
 800e8e6:	d1e0      	bne.n	800e8aa <_free_r+0x26>
 800e8e8:	681c      	ldr	r4, [r3, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	6053      	str	r3, [r2, #4]
 800e8ee:	440c      	add	r4, r1
 800e8f0:	6014      	str	r4, [r2, #0]
 800e8f2:	e7da      	b.n	800e8aa <_free_r+0x26>
 800e8f4:	d902      	bls.n	800e8fc <_free_r+0x78>
 800e8f6:	230c      	movs	r3, #12
 800e8f8:	6003      	str	r3, [r0, #0]
 800e8fa:	e7d6      	b.n	800e8aa <_free_r+0x26>
 800e8fc:	6825      	ldr	r5, [r4, #0]
 800e8fe:	1961      	adds	r1, r4, r5
 800e900:	428b      	cmp	r3, r1
 800e902:	bf04      	itt	eq
 800e904:	6819      	ldreq	r1, [r3, #0]
 800e906:	685b      	ldreq	r3, [r3, #4]
 800e908:	6063      	str	r3, [r4, #4]
 800e90a:	bf04      	itt	eq
 800e90c:	1949      	addeq	r1, r1, r5
 800e90e:	6021      	streq	r1, [r4, #0]
 800e910:	6054      	str	r4, [r2, #4]
 800e912:	e7ca      	b.n	800e8aa <_free_r+0x26>
 800e914:	b003      	add	sp, #12
 800e916:	bd30      	pop	{r4, r5, pc}
 800e918:	200051d0 	.word	0x200051d0

0800e91c <malloc>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	; (800e928 <malloc+0xc>)
 800e91e:	4601      	mov	r1, r0
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f000 b823 	b.w	800e96c <_malloc_r>
 800e926:	bf00      	nop
 800e928:	20000068 	.word	0x20000068

0800e92c <sbrk_aligned>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4e0e      	ldr	r6, [pc, #56]	; (800e968 <sbrk_aligned+0x3c>)
 800e930:	460c      	mov	r4, r1
 800e932:	6831      	ldr	r1, [r6, #0]
 800e934:	4605      	mov	r5, r0
 800e936:	b911      	cbnz	r1, 800e93e <sbrk_aligned+0x12>
 800e938:	f000 fe40 	bl	800f5bc <_sbrk_r>
 800e93c:	6030      	str	r0, [r6, #0]
 800e93e:	4621      	mov	r1, r4
 800e940:	4628      	mov	r0, r5
 800e942:	f000 fe3b 	bl	800f5bc <_sbrk_r>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d00a      	beq.n	800e960 <sbrk_aligned+0x34>
 800e94a:	1cc4      	adds	r4, r0, #3
 800e94c:	f024 0403 	bic.w	r4, r4, #3
 800e950:	42a0      	cmp	r0, r4
 800e952:	d007      	beq.n	800e964 <sbrk_aligned+0x38>
 800e954:	1a21      	subs	r1, r4, r0
 800e956:	4628      	mov	r0, r5
 800e958:	f000 fe30 	bl	800f5bc <_sbrk_r>
 800e95c:	3001      	adds	r0, #1
 800e95e:	d101      	bne.n	800e964 <sbrk_aligned+0x38>
 800e960:	f04f 34ff 	mov.w	r4, #4294967295
 800e964:	4620      	mov	r0, r4
 800e966:	bd70      	pop	{r4, r5, r6, pc}
 800e968:	200051d4 	.word	0x200051d4

0800e96c <_malloc_r>:
 800e96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e970:	1ccd      	adds	r5, r1, #3
 800e972:	f025 0503 	bic.w	r5, r5, #3
 800e976:	3508      	adds	r5, #8
 800e978:	2d0c      	cmp	r5, #12
 800e97a:	bf38      	it	cc
 800e97c:	250c      	movcc	r5, #12
 800e97e:	2d00      	cmp	r5, #0
 800e980:	4607      	mov	r7, r0
 800e982:	db01      	blt.n	800e988 <_malloc_r+0x1c>
 800e984:	42a9      	cmp	r1, r5
 800e986:	d905      	bls.n	800e994 <_malloc_r+0x28>
 800e988:	230c      	movs	r3, #12
 800e98a:	603b      	str	r3, [r7, #0]
 800e98c:	2600      	movs	r6, #0
 800e98e:	4630      	mov	r0, r6
 800e990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ea68 <_malloc_r+0xfc>
 800e998:	f000 f868 	bl	800ea6c <__malloc_lock>
 800e99c:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a0:	461c      	mov	r4, r3
 800e9a2:	bb5c      	cbnz	r4, 800e9fc <_malloc_r+0x90>
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	f7ff ffc0 	bl	800e92c <sbrk_aligned>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	d155      	bne.n	800ea5e <_malloc_r+0xf2>
 800e9b2:	f8d8 4000 	ldr.w	r4, [r8]
 800e9b6:	4626      	mov	r6, r4
 800e9b8:	2e00      	cmp	r6, #0
 800e9ba:	d145      	bne.n	800ea48 <_malloc_r+0xdc>
 800e9bc:	2c00      	cmp	r4, #0
 800e9be:	d048      	beq.n	800ea52 <_malloc_r+0xe6>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	eb04 0903 	add.w	r9, r4, r3
 800e9ca:	f000 fdf7 	bl	800f5bc <_sbrk_r>
 800e9ce:	4581      	cmp	r9, r0
 800e9d0:	d13f      	bne.n	800ea52 <_malloc_r+0xe6>
 800e9d2:	6821      	ldr	r1, [r4, #0]
 800e9d4:	1a6d      	subs	r5, r5, r1
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f7ff ffa7 	bl	800e92c <sbrk_aligned>
 800e9de:	3001      	adds	r0, #1
 800e9e0:	d037      	beq.n	800ea52 <_malloc_r+0xe6>
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	442b      	add	r3, r5
 800e9e6:	6023      	str	r3, [r4, #0]
 800e9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d038      	beq.n	800ea62 <_malloc_r+0xf6>
 800e9f0:	685a      	ldr	r2, [r3, #4]
 800e9f2:	42a2      	cmp	r2, r4
 800e9f4:	d12b      	bne.n	800ea4e <_malloc_r+0xe2>
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	605a      	str	r2, [r3, #4]
 800e9fa:	e00f      	b.n	800ea1c <_malloc_r+0xb0>
 800e9fc:	6822      	ldr	r2, [r4, #0]
 800e9fe:	1b52      	subs	r2, r2, r5
 800ea00:	d41f      	bmi.n	800ea42 <_malloc_r+0xd6>
 800ea02:	2a0b      	cmp	r2, #11
 800ea04:	d917      	bls.n	800ea36 <_malloc_r+0xca>
 800ea06:	1961      	adds	r1, r4, r5
 800ea08:	42a3      	cmp	r3, r4
 800ea0a:	6025      	str	r5, [r4, #0]
 800ea0c:	bf18      	it	ne
 800ea0e:	6059      	strne	r1, [r3, #4]
 800ea10:	6863      	ldr	r3, [r4, #4]
 800ea12:	bf08      	it	eq
 800ea14:	f8c8 1000 	streq.w	r1, [r8]
 800ea18:	5162      	str	r2, [r4, r5]
 800ea1a:	604b      	str	r3, [r1, #4]
 800ea1c:	4638      	mov	r0, r7
 800ea1e:	f104 060b 	add.w	r6, r4, #11
 800ea22:	f000 f829 	bl	800ea78 <__malloc_unlock>
 800ea26:	f026 0607 	bic.w	r6, r6, #7
 800ea2a:	1d23      	adds	r3, r4, #4
 800ea2c:	1af2      	subs	r2, r6, r3
 800ea2e:	d0ae      	beq.n	800e98e <_malloc_r+0x22>
 800ea30:	1b9b      	subs	r3, r3, r6
 800ea32:	50a3      	str	r3, [r4, r2]
 800ea34:	e7ab      	b.n	800e98e <_malloc_r+0x22>
 800ea36:	42a3      	cmp	r3, r4
 800ea38:	6862      	ldr	r2, [r4, #4]
 800ea3a:	d1dd      	bne.n	800e9f8 <_malloc_r+0x8c>
 800ea3c:	f8c8 2000 	str.w	r2, [r8]
 800ea40:	e7ec      	b.n	800ea1c <_malloc_r+0xb0>
 800ea42:	4623      	mov	r3, r4
 800ea44:	6864      	ldr	r4, [r4, #4]
 800ea46:	e7ac      	b.n	800e9a2 <_malloc_r+0x36>
 800ea48:	4634      	mov	r4, r6
 800ea4a:	6876      	ldr	r6, [r6, #4]
 800ea4c:	e7b4      	b.n	800e9b8 <_malloc_r+0x4c>
 800ea4e:	4613      	mov	r3, r2
 800ea50:	e7cc      	b.n	800e9ec <_malloc_r+0x80>
 800ea52:	230c      	movs	r3, #12
 800ea54:	603b      	str	r3, [r7, #0]
 800ea56:	4638      	mov	r0, r7
 800ea58:	f000 f80e 	bl	800ea78 <__malloc_unlock>
 800ea5c:	e797      	b.n	800e98e <_malloc_r+0x22>
 800ea5e:	6025      	str	r5, [r4, #0]
 800ea60:	e7dc      	b.n	800ea1c <_malloc_r+0xb0>
 800ea62:	605b      	str	r3, [r3, #4]
 800ea64:	deff      	udf	#255	; 0xff
 800ea66:	bf00      	nop
 800ea68:	200051d0 	.word	0x200051d0

0800ea6c <__malloc_lock>:
 800ea6c:	4801      	ldr	r0, [pc, #4]	; (800ea74 <__malloc_lock+0x8>)
 800ea6e:	f7ff b874 	b.w	800db5a <__retarget_lock_acquire_recursive>
 800ea72:	bf00      	nop
 800ea74:	200051cc 	.word	0x200051cc

0800ea78 <__malloc_unlock>:
 800ea78:	4801      	ldr	r0, [pc, #4]	; (800ea80 <__malloc_unlock+0x8>)
 800ea7a:	f7ff b86f 	b.w	800db5c <__retarget_lock_release_recursive>
 800ea7e:	bf00      	nop
 800ea80:	200051cc 	.word	0x200051cc

0800ea84 <_Balloc>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	69c6      	ldr	r6, [r0, #28]
 800ea88:	4604      	mov	r4, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	b976      	cbnz	r6, 800eaac <_Balloc+0x28>
 800ea8e:	2010      	movs	r0, #16
 800ea90:	f7ff ff44 	bl	800e91c <malloc>
 800ea94:	4602      	mov	r2, r0
 800ea96:	61e0      	str	r0, [r4, #28]
 800ea98:	b920      	cbnz	r0, 800eaa4 <_Balloc+0x20>
 800ea9a:	4b18      	ldr	r3, [pc, #96]	; (800eafc <_Balloc+0x78>)
 800ea9c:	4818      	ldr	r0, [pc, #96]	; (800eb00 <_Balloc+0x7c>)
 800ea9e:	216b      	movs	r1, #107	; 0x6b
 800eaa0:	f000 fd9c 	bl	800f5dc <__assert_func>
 800eaa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaa8:	6006      	str	r6, [r0, #0]
 800eaaa:	60c6      	str	r6, [r0, #12]
 800eaac:	69e6      	ldr	r6, [r4, #28]
 800eaae:	68f3      	ldr	r3, [r6, #12]
 800eab0:	b183      	cbz	r3, 800ead4 <_Balloc+0x50>
 800eab2:	69e3      	ldr	r3, [r4, #28]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaba:	b9b8      	cbnz	r0, 800eaec <_Balloc+0x68>
 800eabc:	2101      	movs	r1, #1
 800eabe:	fa01 f605 	lsl.w	r6, r1, r5
 800eac2:	1d72      	adds	r2, r6, #5
 800eac4:	0092      	lsls	r2, r2, #2
 800eac6:	4620      	mov	r0, r4
 800eac8:	f000 fda6 	bl	800f618 <_calloc_r>
 800eacc:	b160      	cbz	r0, 800eae8 <_Balloc+0x64>
 800eace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ead2:	e00e      	b.n	800eaf2 <_Balloc+0x6e>
 800ead4:	2221      	movs	r2, #33	; 0x21
 800ead6:	2104      	movs	r1, #4
 800ead8:	4620      	mov	r0, r4
 800eada:	f000 fd9d 	bl	800f618 <_calloc_r>
 800eade:	69e3      	ldr	r3, [r4, #28]
 800eae0:	60f0      	str	r0, [r6, #12]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1e4      	bne.n	800eab2 <_Balloc+0x2e>
 800eae8:	2000      	movs	r0, #0
 800eaea:	bd70      	pop	{r4, r5, r6, pc}
 800eaec:	6802      	ldr	r2, [r0, #0]
 800eaee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eaf8:	e7f7      	b.n	800eaea <_Balloc+0x66>
 800eafa:	bf00      	nop
 800eafc:	080121a9 	.word	0x080121a9
 800eb00:	08012229 	.word	0x08012229

0800eb04 <_Bfree>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	69c6      	ldr	r6, [r0, #28]
 800eb08:	4605      	mov	r5, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	b976      	cbnz	r6, 800eb2c <_Bfree+0x28>
 800eb0e:	2010      	movs	r0, #16
 800eb10:	f7ff ff04 	bl	800e91c <malloc>
 800eb14:	4602      	mov	r2, r0
 800eb16:	61e8      	str	r0, [r5, #28]
 800eb18:	b920      	cbnz	r0, 800eb24 <_Bfree+0x20>
 800eb1a:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <_Bfree+0x3c>)
 800eb1c:	4809      	ldr	r0, [pc, #36]	; (800eb44 <_Bfree+0x40>)
 800eb1e:	218f      	movs	r1, #143	; 0x8f
 800eb20:	f000 fd5c 	bl	800f5dc <__assert_func>
 800eb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb28:	6006      	str	r6, [r0, #0]
 800eb2a:	60c6      	str	r6, [r0, #12]
 800eb2c:	b13c      	cbz	r4, 800eb3e <_Bfree+0x3a>
 800eb2e:	69eb      	ldr	r3, [r5, #28]
 800eb30:	6862      	ldr	r2, [r4, #4]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb38:	6021      	str	r1, [r4, #0]
 800eb3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	080121a9 	.word	0x080121a9
 800eb44:	08012229 	.word	0x08012229

0800eb48 <__multadd>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	690d      	ldr	r5, [r1, #16]
 800eb4e:	4607      	mov	r7, r0
 800eb50:	460c      	mov	r4, r1
 800eb52:	461e      	mov	r6, r3
 800eb54:	f101 0c14 	add.w	ip, r1, #20
 800eb58:	2000      	movs	r0, #0
 800eb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800eb5e:	b299      	uxth	r1, r3
 800eb60:	fb02 6101 	mla	r1, r2, r1, r6
 800eb64:	0c1e      	lsrs	r6, r3, #16
 800eb66:	0c0b      	lsrs	r3, r1, #16
 800eb68:	fb02 3306 	mla	r3, r2, r6, r3
 800eb6c:	b289      	uxth	r1, r1
 800eb6e:	3001      	adds	r0, #1
 800eb70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb74:	4285      	cmp	r5, r0
 800eb76:	f84c 1b04 	str.w	r1, [ip], #4
 800eb7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb7e:	dcec      	bgt.n	800eb5a <__multadd+0x12>
 800eb80:	b30e      	cbz	r6, 800ebc6 <__multadd+0x7e>
 800eb82:	68a3      	ldr	r3, [r4, #8]
 800eb84:	42ab      	cmp	r3, r5
 800eb86:	dc19      	bgt.n	800ebbc <__multadd+0x74>
 800eb88:	6861      	ldr	r1, [r4, #4]
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	3101      	adds	r1, #1
 800eb8e:	f7ff ff79 	bl	800ea84 <_Balloc>
 800eb92:	4680      	mov	r8, r0
 800eb94:	b928      	cbnz	r0, 800eba2 <__multadd+0x5a>
 800eb96:	4602      	mov	r2, r0
 800eb98:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <__multadd+0x84>)
 800eb9a:	480d      	ldr	r0, [pc, #52]	; (800ebd0 <__multadd+0x88>)
 800eb9c:	21ba      	movs	r1, #186	; 0xba
 800eb9e:	f000 fd1d 	bl	800f5dc <__assert_func>
 800eba2:	6922      	ldr	r2, [r4, #16]
 800eba4:	3202      	adds	r2, #2
 800eba6:	f104 010c 	add.w	r1, r4, #12
 800ebaa:	0092      	lsls	r2, r2, #2
 800ebac:	300c      	adds	r0, #12
 800ebae:	f7fe ffde 	bl	800db6e <memcpy>
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	f7ff ffa5 	bl	800eb04 <_Bfree>
 800ebba:	4644      	mov	r4, r8
 800ebbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebc0:	3501      	adds	r5, #1
 800ebc2:	615e      	str	r6, [r3, #20]
 800ebc4:	6125      	str	r5, [r4, #16]
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebcc:	08012218 	.word	0x08012218
 800ebd0:	08012229 	.word	0x08012229

0800ebd4 <__hi0bits>:
 800ebd4:	0c03      	lsrs	r3, r0, #16
 800ebd6:	041b      	lsls	r3, r3, #16
 800ebd8:	b9d3      	cbnz	r3, 800ec10 <__hi0bits+0x3c>
 800ebda:	0400      	lsls	r0, r0, #16
 800ebdc:	2310      	movs	r3, #16
 800ebde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebe2:	bf04      	itt	eq
 800ebe4:	0200      	lsleq	r0, r0, #8
 800ebe6:	3308      	addeq	r3, #8
 800ebe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebec:	bf04      	itt	eq
 800ebee:	0100      	lsleq	r0, r0, #4
 800ebf0:	3304      	addeq	r3, #4
 800ebf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebf6:	bf04      	itt	eq
 800ebf8:	0080      	lsleq	r0, r0, #2
 800ebfa:	3302      	addeq	r3, #2
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	db05      	blt.n	800ec0c <__hi0bits+0x38>
 800ec00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec04:	f103 0301 	add.w	r3, r3, #1
 800ec08:	bf08      	it	eq
 800ec0a:	2320      	moveq	r3, #32
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	4770      	bx	lr
 800ec10:	2300      	movs	r3, #0
 800ec12:	e7e4      	b.n	800ebde <__hi0bits+0xa>

0800ec14 <__lo0bits>:
 800ec14:	6803      	ldr	r3, [r0, #0]
 800ec16:	f013 0207 	ands.w	r2, r3, #7
 800ec1a:	d00c      	beq.n	800ec36 <__lo0bits+0x22>
 800ec1c:	07d9      	lsls	r1, r3, #31
 800ec1e:	d422      	bmi.n	800ec66 <__lo0bits+0x52>
 800ec20:	079a      	lsls	r2, r3, #30
 800ec22:	bf49      	itett	mi
 800ec24:	085b      	lsrmi	r3, r3, #1
 800ec26:	089b      	lsrpl	r3, r3, #2
 800ec28:	6003      	strmi	r3, [r0, #0]
 800ec2a:	2201      	movmi	r2, #1
 800ec2c:	bf5c      	itt	pl
 800ec2e:	6003      	strpl	r3, [r0, #0]
 800ec30:	2202      	movpl	r2, #2
 800ec32:	4610      	mov	r0, r2
 800ec34:	4770      	bx	lr
 800ec36:	b299      	uxth	r1, r3
 800ec38:	b909      	cbnz	r1, 800ec3e <__lo0bits+0x2a>
 800ec3a:	0c1b      	lsrs	r3, r3, #16
 800ec3c:	2210      	movs	r2, #16
 800ec3e:	b2d9      	uxtb	r1, r3
 800ec40:	b909      	cbnz	r1, 800ec46 <__lo0bits+0x32>
 800ec42:	3208      	adds	r2, #8
 800ec44:	0a1b      	lsrs	r3, r3, #8
 800ec46:	0719      	lsls	r1, r3, #28
 800ec48:	bf04      	itt	eq
 800ec4a:	091b      	lsreq	r3, r3, #4
 800ec4c:	3204      	addeq	r2, #4
 800ec4e:	0799      	lsls	r1, r3, #30
 800ec50:	bf04      	itt	eq
 800ec52:	089b      	lsreq	r3, r3, #2
 800ec54:	3202      	addeq	r2, #2
 800ec56:	07d9      	lsls	r1, r3, #31
 800ec58:	d403      	bmi.n	800ec62 <__lo0bits+0x4e>
 800ec5a:	085b      	lsrs	r3, r3, #1
 800ec5c:	f102 0201 	add.w	r2, r2, #1
 800ec60:	d003      	beq.n	800ec6a <__lo0bits+0x56>
 800ec62:	6003      	str	r3, [r0, #0]
 800ec64:	e7e5      	b.n	800ec32 <__lo0bits+0x1e>
 800ec66:	2200      	movs	r2, #0
 800ec68:	e7e3      	b.n	800ec32 <__lo0bits+0x1e>
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	e7e1      	b.n	800ec32 <__lo0bits+0x1e>
	...

0800ec70 <__i2b>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	460c      	mov	r4, r1
 800ec74:	2101      	movs	r1, #1
 800ec76:	f7ff ff05 	bl	800ea84 <_Balloc>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	b928      	cbnz	r0, 800ec8a <__i2b+0x1a>
 800ec7e:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <__i2b+0x24>)
 800ec80:	4805      	ldr	r0, [pc, #20]	; (800ec98 <__i2b+0x28>)
 800ec82:	f240 1145 	movw	r1, #325	; 0x145
 800ec86:	f000 fca9 	bl	800f5dc <__assert_func>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	6144      	str	r4, [r0, #20]
 800ec8e:	6103      	str	r3, [r0, #16]
 800ec90:	bd10      	pop	{r4, pc}
 800ec92:	bf00      	nop
 800ec94:	08012218 	.word	0x08012218
 800ec98:	08012229 	.word	0x08012229

0800ec9c <__multiply>:
 800ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca0:	4691      	mov	r9, r2
 800eca2:	690a      	ldr	r2, [r1, #16]
 800eca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	bfb8      	it	lt
 800ecac:	460b      	movlt	r3, r1
 800ecae:	460c      	mov	r4, r1
 800ecb0:	bfbc      	itt	lt
 800ecb2:	464c      	movlt	r4, r9
 800ecb4:	4699      	movlt	r9, r3
 800ecb6:	6927      	ldr	r7, [r4, #16]
 800ecb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	6861      	ldr	r1, [r4, #4]
 800ecc0:	eb07 060a 	add.w	r6, r7, sl
 800ecc4:	42b3      	cmp	r3, r6
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	bfb8      	it	lt
 800ecca:	3101      	addlt	r1, #1
 800eccc:	f7ff feda 	bl	800ea84 <_Balloc>
 800ecd0:	b930      	cbnz	r0, 800ece0 <__multiply+0x44>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	4b44      	ldr	r3, [pc, #272]	; (800ede8 <__multiply+0x14c>)
 800ecd6:	4845      	ldr	r0, [pc, #276]	; (800edec <__multiply+0x150>)
 800ecd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ecdc:	f000 fc7e 	bl	800f5dc <__assert_func>
 800ece0:	f100 0514 	add.w	r5, r0, #20
 800ece4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ece8:	462b      	mov	r3, r5
 800ecea:	2200      	movs	r2, #0
 800ecec:	4543      	cmp	r3, r8
 800ecee:	d321      	bcc.n	800ed34 <__multiply+0x98>
 800ecf0:	f104 0314 	add.w	r3, r4, #20
 800ecf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ecf8:	f109 0314 	add.w	r3, r9, #20
 800ecfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed00:	9202      	str	r2, [sp, #8]
 800ed02:	1b3a      	subs	r2, r7, r4
 800ed04:	3a15      	subs	r2, #21
 800ed06:	f022 0203 	bic.w	r2, r2, #3
 800ed0a:	3204      	adds	r2, #4
 800ed0c:	f104 0115 	add.w	r1, r4, #21
 800ed10:	428f      	cmp	r7, r1
 800ed12:	bf38      	it	cc
 800ed14:	2204      	movcc	r2, #4
 800ed16:	9201      	str	r2, [sp, #4]
 800ed18:	9a02      	ldr	r2, [sp, #8]
 800ed1a:	9303      	str	r3, [sp, #12]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d80c      	bhi.n	800ed3a <__multiply+0x9e>
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	dd03      	ble.n	800ed2c <__multiply+0x90>
 800ed24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d05b      	beq.n	800ede4 <__multiply+0x148>
 800ed2c:	6106      	str	r6, [r0, #16]
 800ed2e:	b005      	add	sp, #20
 800ed30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed34:	f843 2b04 	str.w	r2, [r3], #4
 800ed38:	e7d8      	b.n	800ecec <__multiply+0x50>
 800ed3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed3e:	f1ba 0f00 	cmp.w	sl, #0
 800ed42:	d024      	beq.n	800ed8e <__multiply+0xf2>
 800ed44:	f104 0e14 	add.w	lr, r4, #20
 800ed48:	46a9      	mov	r9, r5
 800ed4a:	f04f 0c00 	mov.w	ip, #0
 800ed4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed52:	f8d9 1000 	ldr.w	r1, [r9]
 800ed56:	fa1f fb82 	uxth.w	fp, r2
 800ed5a:	b289      	uxth	r1, r1
 800ed5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed64:	f8d9 2000 	ldr.w	r2, [r9]
 800ed68:	4461      	add	r1, ip
 800ed6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed76:	b289      	uxth	r1, r1
 800ed78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed7c:	4577      	cmp	r7, lr
 800ed7e:	f849 1b04 	str.w	r1, [r9], #4
 800ed82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed86:	d8e2      	bhi.n	800ed4e <__multiply+0xb2>
 800ed88:	9a01      	ldr	r2, [sp, #4]
 800ed8a:	f845 c002 	str.w	ip, [r5, r2]
 800ed8e:	9a03      	ldr	r2, [sp, #12]
 800ed90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed94:	3304      	adds	r3, #4
 800ed96:	f1b9 0f00 	cmp.w	r9, #0
 800ed9a:	d021      	beq.n	800ede0 <__multiply+0x144>
 800ed9c:	6829      	ldr	r1, [r5, #0]
 800ed9e:	f104 0c14 	add.w	ip, r4, #20
 800eda2:	46ae      	mov	lr, r5
 800eda4:	f04f 0a00 	mov.w	sl, #0
 800eda8:	f8bc b000 	ldrh.w	fp, [ip]
 800edac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800edb0:	fb09 220b 	mla	r2, r9, fp, r2
 800edb4:	4452      	add	r2, sl
 800edb6:	b289      	uxth	r1, r1
 800edb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edbc:	f84e 1b04 	str.w	r1, [lr], #4
 800edc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800edc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edc8:	f8be 1000 	ldrh.w	r1, [lr]
 800edcc:	fb09 110a 	mla	r1, r9, sl, r1
 800edd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800edd4:	4567      	cmp	r7, ip
 800edd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edda:	d8e5      	bhi.n	800eda8 <__multiply+0x10c>
 800eddc:	9a01      	ldr	r2, [sp, #4]
 800edde:	50a9      	str	r1, [r5, r2]
 800ede0:	3504      	adds	r5, #4
 800ede2:	e799      	b.n	800ed18 <__multiply+0x7c>
 800ede4:	3e01      	subs	r6, #1
 800ede6:	e79b      	b.n	800ed20 <__multiply+0x84>
 800ede8:	08012218 	.word	0x08012218
 800edec:	08012229 	.word	0x08012229

0800edf0 <__pow5mult>:
 800edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf4:	4615      	mov	r5, r2
 800edf6:	f012 0203 	ands.w	r2, r2, #3
 800edfa:	4606      	mov	r6, r0
 800edfc:	460f      	mov	r7, r1
 800edfe:	d007      	beq.n	800ee10 <__pow5mult+0x20>
 800ee00:	4c25      	ldr	r4, [pc, #148]	; (800ee98 <__pow5mult+0xa8>)
 800ee02:	3a01      	subs	r2, #1
 800ee04:	2300      	movs	r3, #0
 800ee06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee0a:	f7ff fe9d 	bl	800eb48 <__multadd>
 800ee0e:	4607      	mov	r7, r0
 800ee10:	10ad      	asrs	r5, r5, #2
 800ee12:	d03d      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee14:	69f4      	ldr	r4, [r6, #28]
 800ee16:	b97c      	cbnz	r4, 800ee38 <__pow5mult+0x48>
 800ee18:	2010      	movs	r0, #16
 800ee1a:	f7ff fd7f 	bl	800e91c <malloc>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	61f0      	str	r0, [r6, #28]
 800ee22:	b928      	cbnz	r0, 800ee30 <__pow5mult+0x40>
 800ee24:	4b1d      	ldr	r3, [pc, #116]	; (800ee9c <__pow5mult+0xac>)
 800ee26:	481e      	ldr	r0, [pc, #120]	; (800eea0 <__pow5mult+0xb0>)
 800ee28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ee2c:	f000 fbd6 	bl	800f5dc <__assert_func>
 800ee30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee34:	6004      	str	r4, [r0, #0]
 800ee36:	60c4      	str	r4, [r0, #12]
 800ee38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ee3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee40:	b94c      	cbnz	r4, 800ee56 <__pow5mult+0x66>
 800ee42:	f240 2171 	movw	r1, #625	; 0x271
 800ee46:	4630      	mov	r0, r6
 800ee48:	f7ff ff12 	bl	800ec70 <__i2b>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee52:	4604      	mov	r4, r0
 800ee54:	6003      	str	r3, [r0, #0]
 800ee56:	f04f 0900 	mov.w	r9, #0
 800ee5a:	07eb      	lsls	r3, r5, #31
 800ee5c:	d50a      	bpl.n	800ee74 <__pow5mult+0x84>
 800ee5e:	4639      	mov	r1, r7
 800ee60:	4622      	mov	r2, r4
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7ff ff1a 	bl	800ec9c <__multiply>
 800ee68:	4639      	mov	r1, r7
 800ee6a:	4680      	mov	r8, r0
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f7ff fe49 	bl	800eb04 <_Bfree>
 800ee72:	4647      	mov	r7, r8
 800ee74:	106d      	asrs	r5, r5, #1
 800ee76:	d00b      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	b938      	cbnz	r0, 800ee8c <__pow5mult+0x9c>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4630      	mov	r0, r6
 800ee82:	f7ff ff0b 	bl	800ec9c <__multiply>
 800ee86:	6020      	str	r0, [r4, #0]
 800ee88:	f8c0 9000 	str.w	r9, [r0]
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	e7e4      	b.n	800ee5a <__pow5mult+0x6a>
 800ee90:	4638      	mov	r0, r7
 800ee92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee96:	bf00      	nop
 800ee98:	08012378 	.word	0x08012378
 800ee9c:	080121a9 	.word	0x080121a9
 800eea0:	08012229 	.word	0x08012229

0800eea4 <__lshift>:
 800eea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea8:	460c      	mov	r4, r1
 800eeaa:	6849      	ldr	r1, [r1, #4]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	4691      	mov	r9, r2
 800eeb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eebc:	f108 0601 	add.w	r6, r8, #1
 800eec0:	42b3      	cmp	r3, r6
 800eec2:	db0b      	blt.n	800eedc <__lshift+0x38>
 800eec4:	4638      	mov	r0, r7
 800eec6:	f7ff fddd 	bl	800ea84 <_Balloc>
 800eeca:	4605      	mov	r5, r0
 800eecc:	b948      	cbnz	r0, 800eee2 <__lshift+0x3e>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b28      	ldr	r3, [pc, #160]	; (800ef74 <__lshift+0xd0>)
 800eed2:	4829      	ldr	r0, [pc, #164]	; (800ef78 <__lshift+0xd4>)
 800eed4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eed8:	f000 fb80 	bl	800f5dc <__assert_func>
 800eedc:	3101      	adds	r1, #1
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	e7ee      	b.n	800eec0 <__lshift+0x1c>
 800eee2:	2300      	movs	r3, #0
 800eee4:	f100 0114 	add.w	r1, r0, #20
 800eee8:	f100 0210 	add.w	r2, r0, #16
 800eeec:	4618      	mov	r0, r3
 800eeee:	4553      	cmp	r3, sl
 800eef0:	db33      	blt.n	800ef5a <__lshift+0xb6>
 800eef2:	6920      	ldr	r0, [r4, #16]
 800eef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eef8:	f104 0314 	add.w	r3, r4, #20
 800eefc:	f019 091f 	ands.w	r9, r9, #31
 800ef00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef08:	d02b      	beq.n	800ef62 <__lshift+0xbe>
 800ef0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef0e:	468a      	mov	sl, r1
 800ef10:	2200      	movs	r2, #0
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	fa00 f009 	lsl.w	r0, r0, r9
 800ef18:	4310      	orrs	r0, r2
 800ef1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ef1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef22:	459c      	cmp	ip, r3
 800ef24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef28:	d8f3      	bhi.n	800ef12 <__lshift+0x6e>
 800ef2a:	ebac 0304 	sub.w	r3, ip, r4
 800ef2e:	3b15      	subs	r3, #21
 800ef30:	f023 0303 	bic.w	r3, r3, #3
 800ef34:	3304      	adds	r3, #4
 800ef36:	f104 0015 	add.w	r0, r4, #21
 800ef3a:	4584      	cmp	ip, r0
 800ef3c:	bf38      	it	cc
 800ef3e:	2304      	movcc	r3, #4
 800ef40:	50ca      	str	r2, [r1, r3]
 800ef42:	b10a      	cbz	r2, 800ef48 <__lshift+0xa4>
 800ef44:	f108 0602 	add.w	r6, r8, #2
 800ef48:	3e01      	subs	r6, #1
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	612e      	str	r6, [r5, #16]
 800ef4e:	4621      	mov	r1, r4
 800ef50:	f7ff fdd8 	bl	800eb04 <_Bfree>
 800ef54:	4628      	mov	r0, r5
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef5e:	3301      	adds	r3, #1
 800ef60:	e7c5      	b.n	800eeee <__lshift+0x4a>
 800ef62:	3904      	subs	r1, #4
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef6c:	459c      	cmp	ip, r3
 800ef6e:	d8f9      	bhi.n	800ef64 <__lshift+0xc0>
 800ef70:	e7ea      	b.n	800ef48 <__lshift+0xa4>
 800ef72:	bf00      	nop
 800ef74:	08012218 	.word	0x08012218
 800ef78:	08012229 	.word	0x08012229

0800ef7c <__mcmp>:
 800ef7c:	b530      	push	{r4, r5, lr}
 800ef7e:	6902      	ldr	r2, [r0, #16]
 800ef80:	690c      	ldr	r4, [r1, #16]
 800ef82:	1b12      	subs	r2, r2, r4
 800ef84:	d10e      	bne.n	800efa4 <__mcmp+0x28>
 800ef86:	f100 0314 	add.w	r3, r0, #20
 800ef8a:	3114      	adds	r1, #20
 800ef8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef9c:	42a5      	cmp	r5, r4
 800ef9e:	d003      	beq.n	800efa8 <__mcmp+0x2c>
 800efa0:	d305      	bcc.n	800efae <__mcmp+0x32>
 800efa2:	2201      	movs	r2, #1
 800efa4:	4610      	mov	r0, r2
 800efa6:	bd30      	pop	{r4, r5, pc}
 800efa8:	4283      	cmp	r3, r0
 800efaa:	d3f3      	bcc.n	800ef94 <__mcmp+0x18>
 800efac:	e7fa      	b.n	800efa4 <__mcmp+0x28>
 800efae:	f04f 32ff 	mov.w	r2, #4294967295
 800efb2:	e7f7      	b.n	800efa4 <__mcmp+0x28>

0800efb4 <__mdiff>:
 800efb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	460c      	mov	r4, r1
 800efba:	4606      	mov	r6, r0
 800efbc:	4611      	mov	r1, r2
 800efbe:	4620      	mov	r0, r4
 800efc0:	4690      	mov	r8, r2
 800efc2:	f7ff ffdb 	bl	800ef7c <__mcmp>
 800efc6:	1e05      	subs	r5, r0, #0
 800efc8:	d110      	bne.n	800efec <__mdiff+0x38>
 800efca:	4629      	mov	r1, r5
 800efcc:	4630      	mov	r0, r6
 800efce:	f7ff fd59 	bl	800ea84 <_Balloc>
 800efd2:	b930      	cbnz	r0, 800efe2 <__mdiff+0x2e>
 800efd4:	4b3a      	ldr	r3, [pc, #232]	; (800f0c0 <__mdiff+0x10c>)
 800efd6:	4602      	mov	r2, r0
 800efd8:	f240 2137 	movw	r1, #567	; 0x237
 800efdc:	4839      	ldr	r0, [pc, #228]	; (800f0c4 <__mdiff+0x110>)
 800efde:	f000 fafd 	bl	800f5dc <__assert_func>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efec:	bfa4      	itt	ge
 800efee:	4643      	movge	r3, r8
 800eff0:	46a0      	movge	r8, r4
 800eff2:	4630      	mov	r0, r6
 800eff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eff8:	bfa6      	itte	ge
 800effa:	461c      	movge	r4, r3
 800effc:	2500      	movge	r5, #0
 800effe:	2501      	movlt	r5, #1
 800f000:	f7ff fd40 	bl	800ea84 <_Balloc>
 800f004:	b920      	cbnz	r0, 800f010 <__mdiff+0x5c>
 800f006:	4b2e      	ldr	r3, [pc, #184]	; (800f0c0 <__mdiff+0x10c>)
 800f008:	4602      	mov	r2, r0
 800f00a:	f240 2145 	movw	r1, #581	; 0x245
 800f00e:	e7e5      	b.n	800efdc <__mdiff+0x28>
 800f010:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f014:	6926      	ldr	r6, [r4, #16]
 800f016:	60c5      	str	r5, [r0, #12]
 800f018:	f104 0914 	add.w	r9, r4, #20
 800f01c:	f108 0514 	add.w	r5, r8, #20
 800f020:	f100 0e14 	add.w	lr, r0, #20
 800f024:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f02c:	f108 0210 	add.w	r2, r8, #16
 800f030:	46f2      	mov	sl, lr
 800f032:	2100      	movs	r1, #0
 800f034:	f859 3b04 	ldr.w	r3, [r9], #4
 800f038:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f03c:	fa11 f88b 	uxtah	r8, r1, fp
 800f040:	b299      	uxth	r1, r3
 800f042:	0c1b      	lsrs	r3, r3, #16
 800f044:	eba8 0801 	sub.w	r8, r8, r1
 800f048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f04c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f050:	fa1f f888 	uxth.w	r8, r8
 800f054:	1419      	asrs	r1, r3, #16
 800f056:	454e      	cmp	r6, r9
 800f058:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f05c:	f84a 3b04 	str.w	r3, [sl], #4
 800f060:	d8e8      	bhi.n	800f034 <__mdiff+0x80>
 800f062:	1b33      	subs	r3, r6, r4
 800f064:	3b15      	subs	r3, #21
 800f066:	f023 0303 	bic.w	r3, r3, #3
 800f06a:	3304      	adds	r3, #4
 800f06c:	3415      	adds	r4, #21
 800f06e:	42a6      	cmp	r6, r4
 800f070:	bf38      	it	cc
 800f072:	2304      	movcc	r3, #4
 800f074:	441d      	add	r5, r3
 800f076:	4473      	add	r3, lr
 800f078:	469e      	mov	lr, r3
 800f07a:	462e      	mov	r6, r5
 800f07c:	4566      	cmp	r6, ip
 800f07e:	d30e      	bcc.n	800f09e <__mdiff+0xea>
 800f080:	f10c 0203 	add.w	r2, ip, #3
 800f084:	1b52      	subs	r2, r2, r5
 800f086:	f022 0203 	bic.w	r2, r2, #3
 800f08a:	3d03      	subs	r5, #3
 800f08c:	45ac      	cmp	ip, r5
 800f08e:	bf38      	it	cc
 800f090:	2200      	movcc	r2, #0
 800f092:	4413      	add	r3, r2
 800f094:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f098:	b17a      	cbz	r2, 800f0ba <__mdiff+0x106>
 800f09a:	6107      	str	r7, [r0, #16]
 800f09c:	e7a4      	b.n	800efe8 <__mdiff+0x34>
 800f09e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f0a2:	fa11 f288 	uxtah	r2, r1, r8
 800f0a6:	1414      	asrs	r4, r2, #16
 800f0a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f0ac:	b292      	uxth	r2, r2
 800f0ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f0b2:	f84e 2b04 	str.w	r2, [lr], #4
 800f0b6:	1421      	asrs	r1, r4, #16
 800f0b8:	e7e0      	b.n	800f07c <__mdiff+0xc8>
 800f0ba:	3f01      	subs	r7, #1
 800f0bc:	e7ea      	b.n	800f094 <__mdiff+0xe0>
 800f0be:	bf00      	nop
 800f0c0:	08012218 	.word	0x08012218
 800f0c4:	08012229 	.word	0x08012229

0800f0c8 <__d2b>:
 800f0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	460f      	mov	r7, r1
 800f0ce:	2101      	movs	r1, #1
 800f0d0:	ec59 8b10 	vmov	r8, r9, d0
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	f7ff fcd5 	bl	800ea84 <_Balloc>
 800f0da:	4604      	mov	r4, r0
 800f0dc:	b930      	cbnz	r0, 800f0ec <__d2b+0x24>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	4b24      	ldr	r3, [pc, #144]	; (800f174 <__d2b+0xac>)
 800f0e2:	4825      	ldr	r0, [pc, #148]	; (800f178 <__d2b+0xb0>)
 800f0e4:	f240 310f 	movw	r1, #783	; 0x30f
 800f0e8:	f000 fa78 	bl	800f5dc <__assert_func>
 800f0ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0f4:	bb2d      	cbnz	r5, 800f142 <__d2b+0x7a>
 800f0f6:	9301      	str	r3, [sp, #4]
 800f0f8:	f1b8 0300 	subs.w	r3, r8, #0
 800f0fc:	d026      	beq.n	800f14c <__d2b+0x84>
 800f0fe:	4668      	mov	r0, sp
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	f7ff fd87 	bl	800ec14 <__lo0bits>
 800f106:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f10a:	b1e8      	cbz	r0, 800f148 <__d2b+0x80>
 800f10c:	f1c0 0320 	rsb	r3, r0, #32
 800f110:	fa02 f303 	lsl.w	r3, r2, r3
 800f114:	430b      	orrs	r3, r1
 800f116:	40c2      	lsrs	r2, r0
 800f118:	6163      	str	r3, [r4, #20]
 800f11a:	9201      	str	r2, [sp, #4]
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	61a3      	str	r3, [r4, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	bf14      	ite	ne
 800f124:	2202      	movne	r2, #2
 800f126:	2201      	moveq	r2, #1
 800f128:	6122      	str	r2, [r4, #16]
 800f12a:	b1bd      	cbz	r5, 800f15c <__d2b+0x94>
 800f12c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f130:	4405      	add	r5, r0
 800f132:	603d      	str	r5, [r7, #0]
 800f134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f138:	6030      	str	r0, [r6, #0]
 800f13a:	4620      	mov	r0, r4
 800f13c:	b003      	add	sp, #12
 800f13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f146:	e7d6      	b.n	800f0f6 <__d2b+0x2e>
 800f148:	6161      	str	r1, [r4, #20]
 800f14a:	e7e7      	b.n	800f11c <__d2b+0x54>
 800f14c:	a801      	add	r0, sp, #4
 800f14e:	f7ff fd61 	bl	800ec14 <__lo0bits>
 800f152:	9b01      	ldr	r3, [sp, #4]
 800f154:	6163      	str	r3, [r4, #20]
 800f156:	3020      	adds	r0, #32
 800f158:	2201      	movs	r2, #1
 800f15a:	e7e5      	b.n	800f128 <__d2b+0x60>
 800f15c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f164:	6038      	str	r0, [r7, #0]
 800f166:	6918      	ldr	r0, [r3, #16]
 800f168:	f7ff fd34 	bl	800ebd4 <__hi0bits>
 800f16c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f170:	e7e2      	b.n	800f138 <__d2b+0x70>
 800f172:	bf00      	nop
 800f174:	08012218 	.word	0x08012218
 800f178:	08012229 	.word	0x08012229

0800f17c <__ssputs_r>:
 800f17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f180:	688e      	ldr	r6, [r1, #8]
 800f182:	461f      	mov	r7, r3
 800f184:	42be      	cmp	r6, r7
 800f186:	680b      	ldr	r3, [r1, #0]
 800f188:	4682      	mov	sl, r0
 800f18a:	460c      	mov	r4, r1
 800f18c:	4690      	mov	r8, r2
 800f18e:	d82c      	bhi.n	800f1ea <__ssputs_r+0x6e>
 800f190:	898a      	ldrh	r2, [r1, #12]
 800f192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f196:	d026      	beq.n	800f1e6 <__ssputs_r+0x6a>
 800f198:	6965      	ldr	r5, [r4, #20]
 800f19a:	6909      	ldr	r1, [r1, #16]
 800f19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1a0:	eba3 0901 	sub.w	r9, r3, r1
 800f1a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1a8:	1c7b      	adds	r3, r7, #1
 800f1aa:	444b      	add	r3, r9
 800f1ac:	106d      	asrs	r5, r5, #1
 800f1ae:	429d      	cmp	r5, r3
 800f1b0:	bf38      	it	cc
 800f1b2:	461d      	movcc	r5, r3
 800f1b4:	0553      	lsls	r3, r2, #21
 800f1b6:	d527      	bpl.n	800f208 <__ssputs_r+0x8c>
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	f7ff fbd7 	bl	800e96c <_malloc_r>
 800f1be:	4606      	mov	r6, r0
 800f1c0:	b360      	cbz	r0, 800f21c <__ssputs_r+0xa0>
 800f1c2:	6921      	ldr	r1, [r4, #16]
 800f1c4:	464a      	mov	r2, r9
 800f1c6:	f7fe fcd2 	bl	800db6e <memcpy>
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1d4:	81a3      	strh	r3, [r4, #12]
 800f1d6:	6126      	str	r6, [r4, #16]
 800f1d8:	6165      	str	r5, [r4, #20]
 800f1da:	444e      	add	r6, r9
 800f1dc:	eba5 0509 	sub.w	r5, r5, r9
 800f1e0:	6026      	str	r6, [r4, #0]
 800f1e2:	60a5      	str	r5, [r4, #8]
 800f1e4:	463e      	mov	r6, r7
 800f1e6:	42be      	cmp	r6, r7
 800f1e8:	d900      	bls.n	800f1ec <__ssputs_r+0x70>
 800f1ea:	463e      	mov	r6, r7
 800f1ec:	6820      	ldr	r0, [r4, #0]
 800f1ee:	4632      	mov	r2, r6
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	f000 f9c9 	bl	800f588 <memmove>
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	1b9b      	subs	r3, r3, r6
 800f1fa:	60a3      	str	r3, [r4, #8]
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	4433      	add	r3, r6
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	2000      	movs	r0, #0
 800f204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f208:	462a      	mov	r2, r5
 800f20a:	f000 fa2d 	bl	800f668 <_realloc_r>
 800f20e:	4606      	mov	r6, r0
 800f210:	2800      	cmp	r0, #0
 800f212:	d1e0      	bne.n	800f1d6 <__ssputs_r+0x5a>
 800f214:	6921      	ldr	r1, [r4, #16]
 800f216:	4650      	mov	r0, sl
 800f218:	f7ff fb34 	bl	800e884 <_free_r>
 800f21c:	230c      	movs	r3, #12
 800f21e:	f8ca 3000 	str.w	r3, [sl]
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	f04f 30ff 	mov.w	r0, #4294967295
 800f22e:	e7e9      	b.n	800f204 <__ssputs_r+0x88>

0800f230 <_svfiprintf_r>:
 800f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f234:	4698      	mov	r8, r3
 800f236:	898b      	ldrh	r3, [r1, #12]
 800f238:	061b      	lsls	r3, r3, #24
 800f23a:	b09d      	sub	sp, #116	; 0x74
 800f23c:	4607      	mov	r7, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	4614      	mov	r4, r2
 800f242:	d50e      	bpl.n	800f262 <_svfiprintf_r+0x32>
 800f244:	690b      	ldr	r3, [r1, #16]
 800f246:	b963      	cbnz	r3, 800f262 <_svfiprintf_r+0x32>
 800f248:	2140      	movs	r1, #64	; 0x40
 800f24a:	f7ff fb8f 	bl	800e96c <_malloc_r>
 800f24e:	6028      	str	r0, [r5, #0]
 800f250:	6128      	str	r0, [r5, #16]
 800f252:	b920      	cbnz	r0, 800f25e <_svfiprintf_r+0x2e>
 800f254:	230c      	movs	r3, #12
 800f256:	603b      	str	r3, [r7, #0]
 800f258:	f04f 30ff 	mov.w	r0, #4294967295
 800f25c:	e0d0      	b.n	800f400 <_svfiprintf_r+0x1d0>
 800f25e:	2340      	movs	r3, #64	; 0x40
 800f260:	616b      	str	r3, [r5, #20]
 800f262:	2300      	movs	r3, #0
 800f264:	9309      	str	r3, [sp, #36]	; 0x24
 800f266:	2320      	movs	r3, #32
 800f268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f270:	2330      	movs	r3, #48	; 0x30
 800f272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f418 <_svfiprintf_r+0x1e8>
 800f276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f27a:	f04f 0901 	mov.w	r9, #1
 800f27e:	4623      	mov	r3, r4
 800f280:	469a      	mov	sl, r3
 800f282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f286:	b10a      	cbz	r2, 800f28c <_svfiprintf_r+0x5c>
 800f288:	2a25      	cmp	r2, #37	; 0x25
 800f28a:	d1f9      	bne.n	800f280 <_svfiprintf_r+0x50>
 800f28c:	ebba 0b04 	subs.w	fp, sl, r4
 800f290:	d00b      	beq.n	800f2aa <_svfiprintf_r+0x7a>
 800f292:	465b      	mov	r3, fp
 800f294:	4622      	mov	r2, r4
 800f296:	4629      	mov	r1, r5
 800f298:	4638      	mov	r0, r7
 800f29a:	f7ff ff6f 	bl	800f17c <__ssputs_r>
 800f29e:	3001      	adds	r0, #1
 800f2a0:	f000 80a9 	beq.w	800f3f6 <_svfiprintf_r+0x1c6>
 800f2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a6:	445a      	add	r2, fp
 800f2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f000 80a1 	beq.w	800f3f6 <_svfiprintf_r+0x1c6>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2be:	f10a 0a01 	add.w	sl, sl, #1
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	9307      	str	r3, [sp, #28]
 800f2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800f2cc:	4654      	mov	r4, sl
 800f2ce:	2205      	movs	r2, #5
 800f2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d4:	4850      	ldr	r0, [pc, #320]	; (800f418 <_svfiprintf_r+0x1e8>)
 800f2d6:	f7f0 ff7b 	bl	80001d0 <memchr>
 800f2da:	9a04      	ldr	r2, [sp, #16]
 800f2dc:	b9d8      	cbnz	r0, 800f316 <_svfiprintf_r+0xe6>
 800f2de:	06d0      	lsls	r0, r2, #27
 800f2e0:	bf44      	itt	mi
 800f2e2:	2320      	movmi	r3, #32
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2e8:	0711      	lsls	r1, r2, #28
 800f2ea:	bf44      	itt	mi
 800f2ec:	232b      	movmi	r3, #43	; 0x2b
 800f2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f8:	d015      	beq.n	800f326 <_svfiprintf_r+0xf6>
 800f2fa:	9a07      	ldr	r2, [sp, #28]
 800f2fc:	4654      	mov	r4, sl
 800f2fe:	2000      	movs	r0, #0
 800f300:	f04f 0c0a 	mov.w	ip, #10
 800f304:	4621      	mov	r1, r4
 800f306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f30a:	3b30      	subs	r3, #48	; 0x30
 800f30c:	2b09      	cmp	r3, #9
 800f30e:	d94d      	bls.n	800f3ac <_svfiprintf_r+0x17c>
 800f310:	b1b0      	cbz	r0, 800f340 <_svfiprintf_r+0x110>
 800f312:	9207      	str	r2, [sp, #28]
 800f314:	e014      	b.n	800f340 <_svfiprintf_r+0x110>
 800f316:	eba0 0308 	sub.w	r3, r0, r8
 800f31a:	fa09 f303 	lsl.w	r3, r9, r3
 800f31e:	4313      	orrs	r3, r2
 800f320:	9304      	str	r3, [sp, #16]
 800f322:	46a2      	mov	sl, r4
 800f324:	e7d2      	b.n	800f2cc <_svfiprintf_r+0x9c>
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	1d19      	adds	r1, r3, #4
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	9103      	str	r1, [sp, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bfbb      	ittet	lt
 800f332:	425b      	neglt	r3, r3
 800f334:	f042 0202 	orrlt.w	r2, r2, #2
 800f338:	9307      	strge	r3, [sp, #28]
 800f33a:	9307      	strlt	r3, [sp, #28]
 800f33c:	bfb8      	it	lt
 800f33e:	9204      	strlt	r2, [sp, #16]
 800f340:	7823      	ldrb	r3, [r4, #0]
 800f342:	2b2e      	cmp	r3, #46	; 0x2e
 800f344:	d10c      	bne.n	800f360 <_svfiprintf_r+0x130>
 800f346:	7863      	ldrb	r3, [r4, #1]
 800f348:	2b2a      	cmp	r3, #42	; 0x2a
 800f34a:	d134      	bne.n	800f3b6 <_svfiprintf_r+0x186>
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	1d1a      	adds	r2, r3, #4
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	9203      	str	r2, [sp, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	bfb8      	it	lt
 800f358:	f04f 33ff 	movlt.w	r3, #4294967295
 800f35c:	3402      	adds	r4, #2
 800f35e:	9305      	str	r3, [sp, #20]
 800f360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f428 <_svfiprintf_r+0x1f8>
 800f364:	7821      	ldrb	r1, [r4, #0]
 800f366:	2203      	movs	r2, #3
 800f368:	4650      	mov	r0, sl
 800f36a:	f7f0 ff31 	bl	80001d0 <memchr>
 800f36e:	b138      	cbz	r0, 800f380 <_svfiprintf_r+0x150>
 800f370:	9b04      	ldr	r3, [sp, #16]
 800f372:	eba0 000a 	sub.w	r0, r0, sl
 800f376:	2240      	movs	r2, #64	; 0x40
 800f378:	4082      	lsls	r2, r0
 800f37a:	4313      	orrs	r3, r2
 800f37c:	3401      	adds	r4, #1
 800f37e:	9304      	str	r3, [sp, #16]
 800f380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f384:	4825      	ldr	r0, [pc, #148]	; (800f41c <_svfiprintf_r+0x1ec>)
 800f386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f38a:	2206      	movs	r2, #6
 800f38c:	f7f0 ff20 	bl	80001d0 <memchr>
 800f390:	2800      	cmp	r0, #0
 800f392:	d038      	beq.n	800f406 <_svfiprintf_r+0x1d6>
 800f394:	4b22      	ldr	r3, [pc, #136]	; (800f420 <_svfiprintf_r+0x1f0>)
 800f396:	bb1b      	cbnz	r3, 800f3e0 <_svfiprintf_r+0x1b0>
 800f398:	9b03      	ldr	r3, [sp, #12]
 800f39a:	3307      	adds	r3, #7
 800f39c:	f023 0307 	bic.w	r3, r3, #7
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	9303      	str	r3, [sp, #12]
 800f3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a6:	4433      	add	r3, r6
 800f3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3aa:	e768      	b.n	800f27e <_svfiprintf_r+0x4e>
 800f3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	e7a6      	b.n	800f304 <_svfiprintf_r+0xd4>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	3401      	adds	r4, #1
 800f3ba:	9305      	str	r3, [sp, #20]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	f04f 0c0a 	mov.w	ip, #10
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3c8:	3a30      	subs	r2, #48	; 0x30
 800f3ca:	2a09      	cmp	r2, #9
 800f3cc:	d903      	bls.n	800f3d6 <_svfiprintf_r+0x1a6>
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d0c6      	beq.n	800f360 <_svfiprintf_r+0x130>
 800f3d2:	9105      	str	r1, [sp, #20]
 800f3d4:	e7c4      	b.n	800f360 <_svfiprintf_r+0x130>
 800f3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3da:	4604      	mov	r4, r0
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e7f0      	b.n	800f3c2 <_svfiprintf_r+0x192>
 800f3e0:	ab03      	add	r3, sp, #12
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	462a      	mov	r2, r5
 800f3e6:	4b0f      	ldr	r3, [pc, #60]	; (800f424 <_svfiprintf_r+0x1f4>)
 800f3e8:	a904      	add	r1, sp, #16
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	f7fd fdf6 	bl	800cfdc <_printf_float>
 800f3f0:	1c42      	adds	r2, r0, #1
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	d1d6      	bne.n	800f3a4 <_svfiprintf_r+0x174>
 800f3f6:	89ab      	ldrh	r3, [r5, #12]
 800f3f8:	065b      	lsls	r3, r3, #25
 800f3fa:	f53f af2d 	bmi.w	800f258 <_svfiprintf_r+0x28>
 800f3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f400:	b01d      	add	sp, #116	; 0x74
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f406:	ab03      	add	r3, sp, #12
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	462a      	mov	r2, r5
 800f40c:	4b05      	ldr	r3, [pc, #20]	; (800f424 <_svfiprintf_r+0x1f4>)
 800f40e:	a904      	add	r1, sp, #16
 800f410:	4638      	mov	r0, r7
 800f412:	f7fe f887 	bl	800d524 <_printf_i>
 800f416:	e7eb      	b.n	800f3f0 <_svfiprintf_r+0x1c0>
 800f418:	08012384 	.word	0x08012384
 800f41c:	0801238e 	.word	0x0801238e
 800f420:	0800cfdd 	.word	0x0800cfdd
 800f424:	0800f17d 	.word	0x0800f17d
 800f428:	0801238a 	.word	0x0801238a

0800f42c <__sflush_r>:
 800f42c:	898a      	ldrh	r2, [r1, #12]
 800f42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	4605      	mov	r5, r0
 800f434:	0710      	lsls	r0, r2, #28
 800f436:	460c      	mov	r4, r1
 800f438:	d458      	bmi.n	800f4ec <__sflush_r+0xc0>
 800f43a:	684b      	ldr	r3, [r1, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	dc05      	bgt.n	800f44c <__sflush_r+0x20>
 800f440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	dc02      	bgt.n	800f44c <__sflush_r+0x20>
 800f446:	2000      	movs	r0, #0
 800f448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f44e:	2e00      	cmp	r6, #0
 800f450:	d0f9      	beq.n	800f446 <__sflush_r+0x1a>
 800f452:	2300      	movs	r3, #0
 800f454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f458:	682f      	ldr	r7, [r5, #0]
 800f45a:	6a21      	ldr	r1, [r4, #32]
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	d032      	beq.n	800f4c6 <__sflush_r+0x9a>
 800f460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	075a      	lsls	r2, r3, #29
 800f466:	d505      	bpl.n	800f474 <__sflush_r+0x48>
 800f468:	6863      	ldr	r3, [r4, #4]
 800f46a:	1ac0      	subs	r0, r0, r3
 800f46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f46e:	b10b      	cbz	r3, 800f474 <__sflush_r+0x48>
 800f470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f472:	1ac0      	subs	r0, r0, r3
 800f474:	2300      	movs	r3, #0
 800f476:	4602      	mov	r2, r0
 800f478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f47a:	6a21      	ldr	r1, [r4, #32]
 800f47c:	4628      	mov	r0, r5
 800f47e:	47b0      	blx	r6
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	d106      	bne.n	800f494 <__sflush_r+0x68>
 800f486:	6829      	ldr	r1, [r5, #0]
 800f488:	291d      	cmp	r1, #29
 800f48a:	d82b      	bhi.n	800f4e4 <__sflush_r+0xb8>
 800f48c:	4a29      	ldr	r2, [pc, #164]	; (800f534 <__sflush_r+0x108>)
 800f48e:	410a      	asrs	r2, r1
 800f490:	07d6      	lsls	r6, r2, #31
 800f492:	d427      	bmi.n	800f4e4 <__sflush_r+0xb8>
 800f494:	2200      	movs	r2, #0
 800f496:	6062      	str	r2, [r4, #4]
 800f498:	04d9      	lsls	r1, r3, #19
 800f49a:	6922      	ldr	r2, [r4, #16]
 800f49c:	6022      	str	r2, [r4, #0]
 800f49e:	d504      	bpl.n	800f4aa <__sflush_r+0x7e>
 800f4a0:	1c42      	adds	r2, r0, #1
 800f4a2:	d101      	bne.n	800f4a8 <__sflush_r+0x7c>
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	b903      	cbnz	r3, 800f4aa <__sflush_r+0x7e>
 800f4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800f4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ac:	602f      	str	r7, [r5, #0]
 800f4ae:	2900      	cmp	r1, #0
 800f4b0:	d0c9      	beq.n	800f446 <__sflush_r+0x1a>
 800f4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4b6:	4299      	cmp	r1, r3
 800f4b8:	d002      	beq.n	800f4c0 <__sflush_r+0x94>
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f7ff f9e2 	bl	800e884 <_free_r>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800f4c4:	e7c0      	b.n	800f448 <__sflush_r+0x1c>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b0      	blx	r6
 800f4cc:	1c41      	adds	r1, r0, #1
 800f4ce:	d1c8      	bne.n	800f462 <__sflush_r+0x36>
 800f4d0:	682b      	ldr	r3, [r5, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d0c5      	beq.n	800f462 <__sflush_r+0x36>
 800f4d6:	2b1d      	cmp	r3, #29
 800f4d8:	d001      	beq.n	800f4de <__sflush_r+0xb2>
 800f4da:	2b16      	cmp	r3, #22
 800f4dc:	d101      	bne.n	800f4e2 <__sflush_r+0xb6>
 800f4de:	602f      	str	r7, [r5, #0]
 800f4e0:	e7b1      	b.n	800f446 <__sflush_r+0x1a>
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	e7ad      	b.n	800f448 <__sflush_r+0x1c>
 800f4ec:	690f      	ldr	r7, [r1, #16]
 800f4ee:	2f00      	cmp	r7, #0
 800f4f0:	d0a9      	beq.n	800f446 <__sflush_r+0x1a>
 800f4f2:	0793      	lsls	r3, r2, #30
 800f4f4:	680e      	ldr	r6, [r1, #0]
 800f4f6:	bf08      	it	eq
 800f4f8:	694b      	ldreq	r3, [r1, #20]
 800f4fa:	600f      	str	r7, [r1, #0]
 800f4fc:	bf18      	it	ne
 800f4fe:	2300      	movne	r3, #0
 800f500:	eba6 0807 	sub.w	r8, r6, r7
 800f504:	608b      	str	r3, [r1, #8]
 800f506:	f1b8 0f00 	cmp.w	r8, #0
 800f50a:	dd9c      	ble.n	800f446 <__sflush_r+0x1a>
 800f50c:	6a21      	ldr	r1, [r4, #32]
 800f50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f510:	4643      	mov	r3, r8
 800f512:	463a      	mov	r2, r7
 800f514:	4628      	mov	r0, r5
 800f516:	47b0      	blx	r6
 800f518:	2800      	cmp	r0, #0
 800f51a:	dc06      	bgt.n	800f52a <__sflush_r+0xfe>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	e78e      	b.n	800f448 <__sflush_r+0x1c>
 800f52a:	4407      	add	r7, r0
 800f52c:	eba8 0800 	sub.w	r8, r8, r0
 800f530:	e7e9      	b.n	800f506 <__sflush_r+0xda>
 800f532:	bf00      	nop
 800f534:	dfbffffe 	.word	0xdfbffffe

0800f538 <_fflush_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	690b      	ldr	r3, [r1, #16]
 800f53c:	4605      	mov	r5, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	b913      	cbnz	r3, 800f548 <_fflush_r+0x10>
 800f542:	2500      	movs	r5, #0
 800f544:	4628      	mov	r0, r5
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	b118      	cbz	r0, 800f552 <_fflush_r+0x1a>
 800f54a:	6a03      	ldr	r3, [r0, #32]
 800f54c:	b90b      	cbnz	r3, 800f552 <_fflush_r+0x1a>
 800f54e:	f7fe f997 	bl	800d880 <__sinit>
 800f552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0f3      	beq.n	800f542 <_fflush_r+0xa>
 800f55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f55c:	07d0      	lsls	r0, r2, #31
 800f55e:	d404      	bmi.n	800f56a <_fflush_r+0x32>
 800f560:	0599      	lsls	r1, r3, #22
 800f562:	d402      	bmi.n	800f56a <_fflush_r+0x32>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f7fe faf8 	bl	800db5a <__retarget_lock_acquire_recursive>
 800f56a:	4628      	mov	r0, r5
 800f56c:	4621      	mov	r1, r4
 800f56e:	f7ff ff5d 	bl	800f42c <__sflush_r>
 800f572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f574:	07da      	lsls	r2, r3, #31
 800f576:	4605      	mov	r5, r0
 800f578:	d4e4      	bmi.n	800f544 <_fflush_r+0xc>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	059b      	lsls	r3, r3, #22
 800f57e:	d4e1      	bmi.n	800f544 <_fflush_r+0xc>
 800f580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f582:	f7fe faeb 	bl	800db5c <__retarget_lock_release_recursive>
 800f586:	e7dd      	b.n	800f544 <_fflush_r+0xc>

0800f588 <memmove>:
 800f588:	4288      	cmp	r0, r1
 800f58a:	b510      	push	{r4, lr}
 800f58c:	eb01 0402 	add.w	r4, r1, r2
 800f590:	d902      	bls.n	800f598 <memmove+0x10>
 800f592:	4284      	cmp	r4, r0
 800f594:	4623      	mov	r3, r4
 800f596:	d807      	bhi.n	800f5a8 <memmove+0x20>
 800f598:	1e43      	subs	r3, r0, #1
 800f59a:	42a1      	cmp	r1, r4
 800f59c:	d008      	beq.n	800f5b0 <memmove+0x28>
 800f59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5a6:	e7f8      	b.n	800f59a <memmove+0x12>
 800f5a8:	4402      	add	r2, r0
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	428a      	cmp	r2, r1
 800f5ae:	d100      	bne.n	800f5b2 <memmove+0x2a>
 800f5b0:	bd10      	pop	{r4, pc}
 800f5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5ba:	e7f7      	b.n	800f5ac <memmove+0x24>

0800f5bc <_sbrk_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4d06      	ldr	r5, [pc, #24]	; (800f5d8 <_sbrk_r+0x1c>)
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	4608      	mov	r0, r1
 800f5c6:	602b      	str	r3, [r5, #0]
 800f5c8:	f7f6 fabc 	bl	8005b44 <_sbrk>
 800f5cc:	1c43      	adds	r3, r0, #1
 800f5ce:	d102      	bne.n	800f5d6 <_sbrk_r+0x1a>
 800f5d0:	682b      	ldr	r3, [r5, #0]
 800f5d2:	b103      	cbz	r3, 800f5d6 <_sbrk_r+0x1a>
 800f5d4:	6023      	str	r3, [r4, #0]
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	200051c8 	.word	0x200051c8

0800f5dc <__assert_func>:
 800f5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5de:	4614      	mov	r4, r2
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	4b09      	ldr	r3, [pc, #36]	; (800f608 <__assert_func+0x2c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	68d8      	ldr	r0, [r3, #12]
 800f5ea:	b14c      	cbz	r4, 800f600 <__assert_func+0x24>
 800f5ec:	4b07      	ldr	r3, [pc, #28]	; (800f60c <__assert_func+0x30>)
 800f5ee:	9100      	str	r1, [sp, #0]
 800f5f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5f4:	4906      	ldr	r1, [pc, #24]	; (800f610 <__assert_func+0x34>)
 800f5f6:	462b      	mov	r3, r5
 800f5f8:	f000 f872 	bl	800f6e0 <fiprintf>
 800f5fc:	f000 f882 	bl	800f704 <abort>
 800f600:	4b04      	ldr	r3, [pc, #16]	; (800f614 <__assert_func+0x38>)
 800f602:	461c      	mov	r4, r3
 800f604:	e7f3      	b.n	800f5ee <__assert_func+0x12>
 800f606:	bf00      	nop
 800f608:	20000068 	.word	0x20000068
 800f60c:	0801239f 	.word	0x0801239f
 800f610:	080123ac 	.word	0x080123ac
 800f614:	080123da 	.word	0x080123da

0800f618 <_calloc_r>:
 800f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f61a:	fba1 2402 	umull	r2, r4, r1, r2
 800f61e:	b94c      	cbnz	r4, 800f634 <_calloc_r+0x1c>
 800f620:	4611      	mov	r1, r2
 800f622:	9201      	str	r2, [sp, #4]
 800f624:	f7ff f9a2 	bl	800e96c <_malloc_r>
 800f628:	9a01      	ldr	r2, [sp, #4]
 800f62a:	4605      	mov	r5, r0
 800f62c:	b930      	cbnz	r0, 800f63c <_calloc_r+0x24>
 800f62e:	4628      	mov	r0, r5
 800f630:	b003      	add	sp, #12
 800f632:	bd30      	pop	{r4, r5, pc}
 800f634:	220c      	movs	r2, #12
 800f636:	6002      	str	r2, [r0, #0]
 800f638:	2500      	movs	r5, #0
 800f63a:	e7f8      	b.n	800f62e <_calloc_r+0x16>
 800f63c:	4621      	mov	r1, r4
 800f63e:	f7fe f9b8 	bl	800d9b2 <memset>
 800f642:	e7f4      	b.n	800f62e <_calloc_r+0x16>

0800f644 <__ascii_mbtowc>:
 800f644:	b082      	sub	sp, #8
 800f646:	b901      	cbnz	r1, 800f64a <__ascii_mbtowc+0x6>
 800f648:	a901      	add	r1, sp, #4
 800f64a:	b142      	cbz	r2, 800f65e <__ascii_mbtowc+0x1a>
 800f64c:	b14b      	cbz	r3, 800f662 <__ascii_mbtowc+0x1e>
 800f64e:	7813      	ldrb	r3, [r2, #0]
 800f650:	600b      	str	r3, [r1, #0]
 800f652:	7812      	ldrb	r2, [r2, #0]
 800f654:	1e10      	subs	r0, r2, #0
 800f656:	bf18      	it	ne
 800f658:	2001      	movne	r0, #1
 800f65a:	b002      	add	sp, #8
 800f65c:	4770      	bx	lr
 800f65e:	4610      	mov	r0, r2
 800f660:	e7fb      	b.n	800f65a <__ascii_mbtowc+0x16>
 800f662:	f06f 0001 	mvn.w	r0, #1
 800f666:	e7f8      	b.n	800f65a <__ascii_mbtowc+0x16>

0800f668 <_realloc_r>:
 800f668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66c:	4680      	mov	r8, r0
 800f66e:	4614      	mov	r4, r2
 800f670:	460e      	mov	r6, r1
 800f672:	b921      	cbnz	r1, 800f67e <_realloc_r+0x16>
 800f674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	4611      	mov	r1, r2
 800f67a:	f7ff b977 	b.w	800e96c <_malloc_r>
 800f67e:	b92a      	cbnz	r2, 800f68c <_realloc_r+0x24>
 800f680:	f7ff f900 	bl	800e884 <_free_r>
 800f684:	4625      	mov	r5, r4
 800f686:	4628      	mov	r0, r5
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	f000 f841 	bl	800f712 <_malloc_usable_size_r>
 800f690:	4284      	cmp	r4, r0
 800f692:	4607      	mov	r7, r0
 800f694:	d802      	bhi.n	800f69c <_realloc_r+0x34>
 800f696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f69a:	d812      	bhi.n	800f6c2 <_realloc_r+0x5a>
 800f69c:	4621      	mov	r1, r4
 800f69e:	4640      	mov	r0, r8
 800f6a0:	f7ff f964 	bl	800e96c <_malloc_r>
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d0ed      	beq.n	800f686 <_realloc_r+0x1e>
 800f6aa:	42bc      	cmp	r4, r7
 800f6ac:	4622      	mov	r2, r4
 800f6ae:	4631      	mov	r1, r6
 800f6b0:	bf28      	it	cs
 800f6b2:	463a      	movcs	r2, r7
 800f6b4:	f7fe fa5b 	bl	800db6e <memcpy>
 800f6b8:	4631      	mov	r1, r6
 800f6ba:	4640      	mov	r0, r8
 800f6bc:	f7ff f8e2 	bl	800e884 <_free_r>
 800f6c0:	e7e1      	b.n	800f686 <_realloc_r+0x1e>
 800f6c2:	4635      	mov	r5, r6
 800f6c4:	e7df      	b.n	800f686 <_realloc_r+0x1e>

0800f6c6 <__ascii_wctomb>:
 800f6c6:	b149      	cbz	r1, 800f6dc <__ascii_wctomb+0x16>
 800f6c8:	2aff      	cmp	r2, #255	; 0xff
 800f6ca:	bf85      	ittet	hi
 800f6cc:	238a      	movhi	r3, #138	; 0x8a
 800f6ce:	6003      	strhi	r3, [r0, #0]
 800f6d0:	700a      	strbls	r2, [r1, #0]
 800f6d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f6d6:	bf98      	it	ls
 800f6d8:	2001      	movls	r0, #1
 800f6da:	4770      	bx	lr
 800f6dc:	4608      	mov	r0, r1
 800f6de:	4770      	bx	lr

0800f6e0 <fiprintf>:
 800f6e0:	b40e      	push	{r1, r2, r3}
 800f6e2:	b503      	push	{r0, r1, lr}
 800f6e4:	4601      	mov	r1, r0
 800f6e6:	ab03      	add	r3, sp, #12
 800f6e8:	4805      	ldr	r0, [pc, #20]	; (800f700 <fiprintf+0x20>)
 800f6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ee:	6800      	ldr	r0, [r0, #0]
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	f000 f83f 	bl	800f774 <_vfiprintf_r>
 800f6f6:	b002      	add	sp, #8
 800f6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6fc:	b003      	add	sp, #12
 800f6fe:	4770      	bx	lr
 800f700:	20000068 	.word	0x20000068

0800f704 <abort>:
 800f704:	b508      	push	{r3, lr}
 800f706:	2006      	movs	r0, #6
 800f708:	f000 fa0c 	bl	800fb24 <raise>
 800f70c:	2001      	movs	r0, #1
 800f70e:	f7f6 f9a1 	bl	8005a54 <_exit>

0800f712 <_malloc_usable_size_r>:
 800f712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f716:	1f18      	subs	r0, r3, #4
 800f718:	2b00      	cmp	r3, #0
 800f71a:	bfbc      	itt	lt
 800f71c:	580b      	ldrlt	r3, [r1, r0]
 800f71e:	18c0      	addlt	r0, r0, r3
 800f720:	4770      	bx	lr

0800f722 <__sfputc_r>:
 800f722:	6893      	ldr	r3, [r2, #8]
 800f724:	3b01      	subs	r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	b410      	push	{r4}
 800f72a:	6093      	str	r3, [r2, #8]
 800f72c:	da08      	bge.n	800f740 <__sfputc_r+0x1e>
 800f72e:	6994      	ldr	r4, [r2, #24]
 800f730:	42a3      	cmp	r3, r4
 800f732:	db01      	blt.n	800f738 <__sfputc_r+0x16>
 800f734:	290a      	cmp	r1, #10
 800f736:	d103      	bne.n	800f740 <__sfputc_r+0x1e>
 800f738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73c:	f000 b934 	b.w	800f9a8 <__swbuf_r>
 800f740:	6813      	ldr	r3, [r2, #0]
 800f742:	1c58      	adds	r0, r3, #1
 800f744:	6010      	str	r0, [r2, #0]
 800f746:	7019      	strb	r1, [r3, #0]
 800f748:	4608      	mov	r0, r1
 800f74a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <__sfputs_r>:
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	4606      	mov	r6, r0
 800f754:	460f      	mov	r7, r1
 800f756:	4614      	mov	r4, r2
 800f758:	18d5      	adds	r5, r2, r3
 800f75a:	42ac      	cmp	r4, r5
 800f75c:	d101      	bne.n	800f762 <__sfputs_r+0x12>
 800f75e:	2000      	movs	r0, #0
 800f760:	e007      	b.n	800f772 <__sfputs_r+0x22>
 800f762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f766:	463a      	mov	r2, r7
 800f768:	4630      	mov	r0, r6
 800f76a:	f7ff ffda 	bl	800f722 <__sfputc_r>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	d1f3      	bne.n	800f75a <__sfputs_r+0xa>
 800f772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f774 <_vfiprintf_r>:
 800f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	460d      	mov	r5, r1
 800f77a:	b09d      	sub	sp, #116	; 0x74
 800f77c:	4614      	mov	r4, r2
 800f77e:	4698      	mov	r8, r3
 800f780:	4606      	mov	r6, r0
 800f782:	b118      	cbz	r0, 800f78c <_vfiprintf_r+0x18>
 800f784:	6a03      	ldr	r3, [r0, #32]
 800f786:	b90b      	cbnz	r3, 800f78c <_vfiprintf_r+0x18>
 800f788:	f7fe f87a 	bl	800d880 <__sinit>
 800f78c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f78e:	07d9      	lsls	r1, r3, #31
 800f790:	d405      	bmi.n	800f79e <_vfiprintf_r+0x2a>
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	059a      	lsls	r2, r3, #22
 800f796:	d402      	bmi.n	800f79e <_vfiprintf_r+0x2a>
 800f798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f79a:	f7fe f9de 	bl	800db5a <__retarget_lock_acquire_recursive>
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	071b      	lsls	r3, r3, #28
 800f7a2:	d501      	bpl.n	800f7a8 <_vfiprintf_r+0x34>
 800f7a4:	692b      	ldr	r3, [r5, #16]
 800f7a6:	b99b      	cbnz	r3, 800f7d0 <_vfiprintf_r+0x5c>
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f000 f93a 	bl	800fa24 <__swsetup_r>
 800f7b0:	b170      	cbz	r0, 800f7d0 <_vfiprintf_r+0x5c>
 800f7b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7b4:	07dc      	lsls	r4, r3, #31
 800f7b6:	d504      	bpl.n	800f7c2 <_vfiprintf_r+0x4e>
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	b01d      	add	sp, #116	; 0x74
 800f7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c2:	89ab      	ldrh	r3, [r5, #12]
 800f7c4:	0598      	lsls	r0, r3, #22
 800f7c6:	d4f7      	bmi.n	800f7b8 <_vfiprintf_r+0x44>
 800f7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ca:	f7fe f9c7 	bl	800db5c <__retarget_lock_release_recursive>
 800f7ce:	e7f3      	b.n	800f7b8 <_vfiprintf_r+0x44>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d4:	2320      	movs	r3, #32
 800f7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7de:	2330      	movs	r3, #48	; 0x30
 800f7e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f994 <_vfiprintf_r+0x220>
 800f7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7e8:	f04f 0901 	mov.w	r9, #1
 800f7ec:	4623      	mov	r3, r4
 800f7ee:	469a      	mov	sl, r3
 800f7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7f4:	b10a      	cbz	r2, 800f7fa <_vfiprintf_r+0x86>
 800f7f6:	2a25      	cmp	r2, #37	; 0x25
 800f7f8:	d1f9      	bne.n	800f7ee <_vfiprintf_r+0x7a>
 800f7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f7fe:	d00b      	beq.n	800f818 <_vfiprintf_r+0xa4>
 800f800:	465b      	mov	r3, fp
 800f802:	4622      	mov	r2, r4
 800f804:	4629      	mov	r1, r5
 800f806:	4630      	mov	r0, r6
 800f808:	f7ff ffa2 	bl	800f750 <__sfputs_r>
 800f80c:	3001      	adds	r0, #1
 800f80e:	f000 80a9 	beq.w	800f964 <_vfiprintf_r+0x1f0>
 800f812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f814:	445a      	add	r2, fp
 800f816:	9209      	str	r2, [sp, #36]	; 0x24
 800f818:	f89a 3000 	ldrb.w	r3, [sl]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f000 80a1 	beq.w	800f964 <_vfiprintf_r+0x1f0>
 800f822:	2300      	movs	r3, #0
 800f824:	f04f 32ff 	mov.w	r2, #4294967295
 800f828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f82c:	f10a 0a01 	add.w	sl, sl, #1
 800f830:	9304      	str	r3, [sp, #16]
 800f832:	9307      	str	r3, [sp, #28]
 800f834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f838:	931a      	str	r3, [sp, #104]	; 0x68
 800f83a:	4654      	mov	r4, sl
 800f83c:	2205      	movs	r2, #5
 800f83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f842:	4854      	ldr	r0, [pc, #336]	; (800f994 <_vfiprintf_r+0x220>)
 800f844:	f7f0 fcc4 	bl	80001d0 <memchr>
 800f848:	9a04      	ldr	r2, [sp, #16]
 800f84a:	b9d8      	cbnz	r0, 800f884 <_vfiprintf_r+0x110>
 800f84c:	06d1      	lsls	r1, r2, #27
 800f84e:	bf44      	itt	mi
 800f850:	2320      	movmi	r3, #32
 800f852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f856:	0713      	lsls	r3, r2, #28
 800f858:	bf44      	itt	mi
 800f85a:	232b      	movmi	r3, #43	; 0x2b
 800f85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f860:	f89a 3000 	ldrb.w	r3, [sl]
 800f864:	2b2a      	cmp	r3, #42	; 0x2a
 800f866:	d015      	beq.n	800f894 <_vfiprintf_r+0x120>
 800f868:	9a07      	ldr	r2, [sp, #28]
 800f86a:	4654      	mov	r4, sl
 800f86c:	2000      	movs	r0, #0
 800f86e:	f04f 0c0a 	mov.w	ip, #10
 800f872:	4621      	mov	r1, r4
 800f874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f878:	3b30      	subs	r3, #48	; 0x30
 800f87a:	2b09      	cmp	r3, #9
 800f87c:	d94d      	bls.n	800f91a <_vfiprintf_r+0x1a6>
 800f87e:	b1b0      	cbz	r0, 800f8ae <_vfiprintf_r+0x13a>
 800f880:	9207      	str	r2, [sp, #28]
 800f882:	e014      	b.n	800f8ae <_vfiprintf_r+0x13a>
 800f884:	eba0 0308 	sub.w	r3, r0, r8
 800f888:	fa09 f303 	lsl.w	r3, r9, r3
 800f88c:	4313      	orrs	r3, r2
 800f88e:	9304      	str	r3, [sp, #16]
 800f890:	46a2      	mov	sl, r4
 800f892:	e7d2      	b.n	800f83a <_vfiprintf_r+0xc6>
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	1d19      	adds	r1, r3, #4
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	9103      	str	r1, [sp, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bfbb      	ittet	lt
 800f8a0:	425b      	neglt	r3, r3
 800f8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f8a6:	9307      	strge	r3, [sp, #28]
 800f8a8:	9307      	strlt	r3, [sp, #28]
 800f8aa:	bfb8      	it	lt
 800f8ac:	9204      	strlt	r2, [sp, #16]
 800f8ae:	7823      	ldrb	r3, [r4, #0]
 800f8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f8b2:	d10c      	bne.n	800f8ce <_vfiprintf_r+0x15a>
 800f8b4:	7863      	ldrb	r3, [r4, #1]
 800f8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b8:	d134      	bne.n	800f924 <_vfiprintf_r+0x1b0>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	1d1a      	adds	r2, r3, #4
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	9203      	str	r2, [sp, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	bfb8      	it	lt
 800f8c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8ca:	3402      	adds	r4, #2
 800f8cc:	9305      	str	r3, [sp, #20]
 800f8ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f9a4 <_vfiprintf_r+0x230>
 800f8d2:	7821      	ldrb	r1, [r4, #0]
 800f8d4:	2203      	movs	r2, #3
 800f8d6:	4650      	mov	r0, sl
 800f8d8:	f7f0 fc7a 	bl	80001d0 <memchr>
 800f8dc:	b138      	cbz	r0, 800f8ee <_vfiprintf_r+0x17a>
 800f8de:	9b04      	ldr	r3, [sp, #16]
 800f8e0:	eba0 000a 	sub.w	r0, r0, sl
 800f8e4:	2240      	movs	r2, #64	; 0x40
 800f8e6:	4082      	lsls	r2, r0
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	3401      	adds	r4, #1
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f2:	4829      	ldr	r0, [pc, #164]	; (800f998 <_vfiprintf_r+0x224>)
 800f8f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8f8:	2206      	movs	r2, #6
 800f8fa:	f7f0 fc69 	bl	80001d0 <memchr>
 800f8fe:	2800      	cmp	r0, #0
 800f900:	d03f      	beq.n	800f982 <_vfiprintf_r+0x20e>
 800f902:	4b26      	ldr	r3, [pc, #152]	; (800f99c <_vfiprintf_r+0x228>)
 800f904:	bb1b      	cbnz	r3, 800f94e <_vfiprintf_r+0x1da>
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	3307      	adds	r3, #7
 800f90a:	f023 0307 	bic.w	r3, r3, #7
 800f90e:	3308      	adds	r3, #8
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f914:	443b      	add	r3, r7
 800f916:	9309      	str	r3, [sp, #36]	; 0x24
 800f918:	e768      	b.n	800f7ec <_vfiprintf_r+0x78>
 800f91a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f91e:	460c      	mov	r4, r1
 800f920:	2001      	movs	r0, #1
 800f922:	e7a6      	b.n	800f872 <_vfiprintf_r+0xfe>
 800f924:	2300      	movs	r3, #0
 800f926:	3401      	adds	r4, #1
 800f928:	9305      	str	r3, [sp, #20]
 800f92a:	4619      	mov	r1, r3
 800f92c:	f04f 0c0a 	mov.w	ip, #10
 800f930:	4620      	mov	r0, r4
 800f932:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f936:	3a30      	subs	r2, #48	; 0x30
 800f938:	2a09      	cmp	r2, #9
 800f93a:	d903      	bls.n	800f944 <_vfiprintf_r+0x1d0>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d0c6      	beq.n	800f8ce <_vfiprintf_r+0x15a>
 800f940:	9105      	str	r1, [sp, #20]
 800f942:	e7c4      	b.n	800f8ce <_vfiprintf_r+0x15a>
 800f944:	fb0c 2101 	mla	r1, ip, r1, r2
 800f948:	4604      	mov	r4, r0
 800f94a:	2301      	movs	r3, #1
 800f94c:	e7f0      	b.n	800f930 <_vfiprintf_r+0x1bc>
 800f94e:	ab03      	add	r3, sp, #12
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	462a      	mov	r2, r5
 800f954:	4b12      	ldr	r3, [pc, #72]	; (800f9a0 <_vfiprintf_r+0x22c>)
 800f956:	a904      	add	r1, sp, #16
 800f958:	4630      	mov	r0, r6
 800f95a:	f7fd fb3f 	bl	800cfdc <_printf_float>
 800f95e:	4607      	mov	r7, r0
 800f960:	1c78      	adds	r0, r7, #1
 800f962:	d1d6      	bne.n	800f912 <_vfiprintf_r+0x19e>
 800f964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f966:	07d9      	lsls	r1, r3, #31
 800f968:	d405      	bmi.n	800f976 <_vfiprintf_r+0x202>
 800f96a:	89ab      	ldrh	r3, [r5, #12]
 800f96c:	059a      	lsls	r2, r3, #22
 800f96e:	d402      	bmi.n	800f976 <_vfiprintf_r+0x202>
 800f970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f972:	f7fe f8f3 	bl	800db5c <__retarget_lock_release_recursive>
 800f976:	89ab      	ldrh	r3, [r5, #12]
 800f978:	065b      	lsls	r3, r3, #25
 800f97a:	f53f af1d 	bmi.w	800f7b8 <_vfiprintf_r+0x44>
 800f97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f980:	e71c      	b.n	800f7bc <_vfiprintf_r+0x48>
 800f982:	ab03      	add	r3, sp, #12
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	462a      	mov	r2, r5
 800f988:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <_vfiprintf_r+0x22c>)
 800f98a:	a904      	add	r1, sp, #16
 800f98c:	4630      	mov	r0, r6
 800f98e:	f7fd fdc9 	bl	800d524 <_printf_i>
 800f992:	e7e4      	b.n	800f95e <_vfiprintf_r+0x1ea>
 800f994:	08012384 	.word	0x08012384
 800f998:	0801238e 	.word	0x0801238e
 800f99c:	0800cfdd 	.word	0x0800cfdd
 800f9a0:	0800f751 	.word	0x0800f751
 800f9a4:	0801238a 	.word	0x0801238a

0800f9a8 <__swbuf_r>:
 800f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9aa:	460e      	mov	r6, r1
 800f9ac:	4614      	mov	r4, r2
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	b118      	cbz	r0, 800f9ba <__swbuf_r+0x12>
 800f9b2:	6a03      	ldr	r3, [r0, #32]
 800f9b4:	b90b      	cbnz	r3, 800f9ba <__swbuf_r+0x12>
 800f9b6:	f7fd ff63 	bl	800d880 <__sinit>
 800f9ba:	69a3      	ldr	r3, [r4, #24]
 800f9bc:	60a3      	str	r3, [r4, #8]
 800f9be:	89a3      	ldrh	r3, [r4, #12]
 800f9c0:	071a      	lsls	r2, r3, #28
 800f9c2:	d525      	bpl.n	800fa10 <__swbuf_r+0x68>
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	b31b      	cbz	r3, 800fa10 <__swbuf_r+0x68>
 800f9c8:	6823      	ldr	r3, [r4, #0]
 800f9ca:	6922      	ldr	r2, [r4, #16]
 800f9cc:	1a98      	subs	r0, r3, r2
 800f9ce:	6963      	ldr	r3, [r4, #20]
 800f9d0:	b2f6      	uxtb	r6, r6
 800f9d2:	4283      	cmp	r3, r0
 800f9d4:	4637      	mov	r7, r6
 800f9d6:	dc04      	bgt.n	800f9e2 <__swbuf_r+0x3a>
 800f9d8:	4621      	mov	r1, r4
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7ff fdac 	bl	800f538 <_fflush_r>
 800f9e0:	b9e0      	cbnz	r0, 800fa1c <__swbuf_r+0x74>
 800f9e2:	68a3      	ldr	r3, [r4, #8]
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	60a3      	str	r3, [r4, #8]
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	6022      	str	r2, [r4, #0]
 800f9ee:	701e      	strb	r6, [r3, #0]
 800f9f0:	6962      	ldr	r2, [r4, #20]
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d004      	beq.n	800fa02 <__swbuf_r+0x5a>
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	07db      	lsls	r3, r3, #31
 800f9fc:	d506      	bpl.n	800fa0c <__swbuf_r+0x64>
 800f9fe:	2e0a      	cmp	r6, #10
 800fa00:	d104      	bne.n	800fa0c <__swbuf_r+0x64>
 800fa02:	4621      	mov	r1, r4
 800fa04:	4628      	mov	r0, r5
 800fa06:	f7ff fd97 	bl	800f538 <_fflush_r>
 800fa0a:	b938      	cbnz	r0, 800fa1c <__swbuf_r+0x74>
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa10:	4621      	mov	r1, r4
 800fa12:	4628      	mov	r0, r5
 800fa14:	f000 f806 	bl	800fa24 <__swsetup_r>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d0d5      	beq.n	800f9c8 <__swbuf_r+0x20>
 800fa1c:	f04f 37ff 	mov.w	r7, #4294967295
 800fa20:	e7f4      	b.n	800fa0c <__swbuf_r+0x64>
	...

0800fa24 <__swsetup_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4b2a      	ldr	r3, [pc, #168]	; (800fad0 <__swsetup_r+0xac>)
 800fa28:	4605      	mov	r5, r0
 800fa2a:	6818      	ldr	r0, [r3, #0]
 800fa2c:	460c      	mov	r4, r1
 800fa2e:	b118      	cbz	r0, 800fa38 <__swsetup_r+0x14>
 800fa30:	6a03      	ldr	r3, [r0, #32]
 800fa32:	b90b      	cbnz	r3, 800fa38 <__swsetup_r+0x14>
 800fa34:	f7fd ff24 	bl	800d880 <__sinit>
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa3e:	0718      	lsls	r0, r3, #28
 800fa40:	d422      	bmi.n	800fa88 <__swsetup_r+0x64>
 800fa42:	06d9      	lsls	r1, r3, #27
 800fa44:	d407      	bmi.n	800fa56 <__swsetup_r+0x32>
 800fa46:	2309      	movs	r3, #9
 800fa48:	602b      	str	r3, [r5, #0]
 800fa4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa4e:	81a3      	strh	r3, [r4, #12]
 800fa50:	f04f 30ff 	mov.w	r0, #4294967295
 800fa54:	e034      	b.n	800fac0 <__swsetup_r+0x9c>
 800fa56:	0758      	lsls	r0, r3, #29
 800fa58:	d512      	bpl.n	800fa80 <__swsetup_r+0x5c>
 800fa5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa5c:	b141      	cbz	r1, 800fa70 <__swsetup_r+0x4c>
 800fa5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa62:	4299      	cmp	r1, r3
 800fa64:	d002      	beq.n	800fa6c <__swsetup_r+0x48>
 800fa66:	4628      	mov	r0, r5
 800fa68:	f7fe ff0c 	bl	800e884 <_free_r>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	6363      	str	r3, [r4, #52]	; 0x34
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa76:	81a3      	strh	r3, [r4, #12]
 800fa78:	2300      	movs	r3, #0
 800fa7a:	6063      	str	r3, [r4, #4]
 800fa7c:	6923      	ldr	r3, [r4, #16]
 800fa7e:	6023      	str	r3, [r4, #0]
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f043 0308 	orr.w	r3, r3, #8
 800fa86:	81a3      	strh	r3, [r4, #12]
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	b94b      	cbnz	r3, 800faa0 <__swsetup_r+0x7c>
 800fa8c:	89a3      	ldrh	r3, [r4, #12]
 800fa8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa96:	d003      	beq.n	800faa0 <__swsetup_r+0x7c>
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f000 f884 	bl	800fba8 <__smakebuf_r>
 800faa0:	89a0      	ldrh	r0, [r4, #12]
 800faa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faa6:	f010 0301 	ands.w	r3, r0, #1
 800faaa:	d00a      	beq.n	800fac2 <__swsetup_r+0x9e>
 800faac:	2300      	movs	r3, #0
 800faae:	60a3      	str	r3, [r4, #8]
 800fab0:	6963      	ldr	r3, [r4, #20]
 800fab2:	425b      	negs	r3, r3
 800fab4:	61a3      	str	r3, [r4, #24]
 800fab6:	6923      	ldr	r3, [r4, #16]
 800fab8:	b943      	cbnz	r3, 800facc <__swsetup_r+0xa8>
 800faba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fabe:	d1c4      	bne.n	800fa4a <__swsetup_r+0x26>
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	0781      	lsls	r1, r0, #30
 800fac4:	bf58      	it	pl
 800fac6:	6963      	ldrpl	r3, [r4, #20]
 800fac8:	60a3      	str	r3, [r4, #8]
 800faca:	e7f4      	b.n	800fab6 <__swsetup_r+0x92>
 800facc:	2000      	movs	r0, #0
 800face:	e7f7      	b.n	800fac0 <__swsetup_r+0x9c>
 800fad0:	20000068 	.word	0x20000068

0800fad4 <_raise_r>:
 800fad4:	291f      	cmp	r1, #31
 800fad6:	b538      	push	{r3, r4, r5, lr}
 800fad8:	4604      	mov	r4, r0
 800fada:	460d      	mov	r5, r1
 800fadc:	d904      	bls.n	800fae8 <_raise_r+0x14>
 800fade:	2316      	movs	r3, #22
 800fae0:	6003      	str	r3, [r0, #0]
 800fae2:	f04f 30ff 	mov.w	r0, #4294967295
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800faea:	b112      	cbz	r2, 800faf2 <_raise_r+0x1e>
 800faec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faf0:	b94b      	cbnz	r3, 800fb06 <_raise_r+0x32>
 800faf2:	4620      	mov	r0, r4
 800faf4:	f000 f830 	bl	800fb58 <_getpid_r>
 800faf8:	462a      	mov	r2, r5
 800fafa:	4601      	mov	r1, r0
 800fafc:	4620      	mov	r0, r4
 800fafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb02:	f000 b817 	b.w	800fb34 <_kill_r>
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d00a      	beq.n	800fb20 <_raise_r+0x4c>
 800fb0a:	1c59      	adds	r1, r3, #1
 800fb0c:	d103      	bne.n	800fb16 <_raise_r+0x42>
 800fb0e:	2316      	movs	r3, #22
 800fb10:	6003      	str	r3, [r0, #0]
 800fb12:	2001      	movs	r0, #1
 800fb14:	e7e7      	b.n	800fae6 <_raise_r+0x12>
 800fb16:	2400      	movs	r4, #0
 800fb18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	4798      	blx	r3
 800fb20:	2000      	movs	r0, #0
 800fb22:	e7e0      	b.n	800fae6 <_raise_r+0x12>

0800fb24 <raise>:
 800fb24:	4b02      	ldr	r3, [pc, #8]	; (800fb30 <raise+0xc>)
 800fb26:	4601      	mov	r1, r0
 800fb28:	6818      	ldr	r0, [r3, #0]
 800fb2a:	f7ff bfd3 	b.w	800fad4 <_raise_r>
 800fb2e:	bf00      	nop
 800fb30:	20000068 	.word	0x20000068

0800fb34 <_kill_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d07      	ldr	r5, [pc, #28]	; (800fb54 <_kill_r+0x20>)
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4608      	mov	r0, r1
 800fb3e:	4611      	mov	r1, r2
 800fb40:	602b      	str	r3, [r5, #0]
 800fb42:	f7f5 ff77 	bl	8005a34 <_kill>
 800fb46:	1c43      	adds	r3, r0, #1
 800fb48:	d102      	bne.n	800fb50 <_kill_r+0x1c>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	b103      	cbz	r3, 800fb50 <_kill_r+0x1c>
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	bd38      	pop	{r3, r4, r5, pc}
 800fb52:	bf00      	nop
 800fb54:	200051c8 	.word	0x200051c8

0800fb58 <_getpid_r>:
 800fb58:	f7f5 bf64 	b.w	8005a24 <_getpid>

0800fb5c <__swhatbuf_r>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	460c      	mov	r4, r1
 800fb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb64:	2900      	cmp	r1, #0
 800fb66:	b096      	sub	sp, #88	; 0x58
 800fb68:	4615      	mov	r5, r2
 800fb6a:	461e      	mov	r6, r3
 800fb6c:	da0d      	bge.n	800fb8a <__swhatbuf_r+0x2e>
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fb74:	f04f 0100 	mov.w	r1, #0
 800fb78:	bf0c      	ite	eq
 800fb7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fb7e:	2340      	movne	r3, #64	; 0x40
 800fb80:	2000      	movs	r0, #0
 800fb82:	6031      	str	r1, [r6, #0]
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	b016      	add	sp, #88	; 0x58
 800fb88:	bd70      	pop	{r4, r5, r6, pc}
 800fb8a:	466a      	mov	r2, sp
 800fb8c:	f000 f848 	bl	800fc20 <_fstat_r>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	dbec      	blt.n	800fb6e <__swhatbuf_r+0x12>
 800fb94:	9901      	ldr	r1, [sp, #4]
 800fb96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb9e:	4259      	negs	r1, r3
 800fba0:	4159      	adcs	r1, r3
 800fba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba6:	e7eb      	b.n	800fb80 <__swhatbuf_r+0x24>

0800fba8 <__smakebuf_r>:
 800fba8:	898b      	ldrh	r3, [r1, #12]
 800fbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbac:	079d      	lsls	r5, r3, #30
 800fbae:	4606      	mov	r6, r0
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	d507      	bpl.n	800fbc4 <__smakebuf_r+0x1c>
 800fbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	6163      	str	r3, [r4, #20]
 800fbc0:	b002      	add	sp, #8
 800fbc2:	bd70      	pop	{r4, r5, r6, pc}
 800fbc4:	ab01      	add	r3, sp, #4
 800fbc6:	466a      	mov	r2, sp
 800fbc8:	f7ff ffc8 	bl	800fb5c <__swhatbuf_r>
 800fbcc:	9900      	ldr	r1, [sp, #0]
 800fbce:	4605      	mov	r5, r0
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7fe fecb 	bl	800e96c <_malloc_r>
 800fbd6:	b948      	cbnz	r0, 800fbec <__smakebuf_r+0x44>
 800fbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbdc:	059a      	lsls	r2, r3, #22
 800fbde:	d4ef      	bmi.n	800fbc0 <__smakebuf_r+0x18>
 800fbe0:	f023 0303 	bic.w	r3, r3, #3
 800fbe4:	f043 0302 	orr.w	r3, r3, #2
 800fbe8:	81a3      	strh	r3, [r4, #12]
 800fbea:	e7e3      	b.n	800fbb4 <__smakebuf_r+0xc>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	6020      	str	r0, [r4, #0]
 800fbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf4:	81a3      	strh	r3, [r4, #12]
 800fbf6:	9b00      	ldr	r3, [sp, #0]
 800fbf8:	6163      	str	r3, [r4, #20]
 800fbfa:	9b01      	ldr	r3, [sp, #4]
 800fbfc:	6120      	str	r0, [r4, #16]
 800fbfe:	b15b      	cbz	r3, 800fc18 <__smakebuf_r+0x70>
 800fc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc04:	4630      	mov	r0, r6
 800fc06:	f000 f81d 	bl	800fc44 <_isatty_r>
 800fc0a:	b128      	cbz	r0, 800fc18 <__smakebuf_r+0x70>
 800fc0c:	89a3      	ldrh	r3, [r4, #12]
 800fc0e:	f023 0303 	bic.w	r3, r3, #3
 800fc12:	f043 0301 	orr.w	r3, r3, #1
 800fc16:	81a3      	strh	r3, [r4, #12]
 800fc18:	89a3      	ldrh	r3, [r4, #12]
 800fc1a:	431d      	orrs	r5, r3
 800fc1c:	81a5      	strh	r5, [r4, #12]
 800fc1e:	e7cf      	b.n	800fbc0 <__smakebuf_r+0x18>

0800fc20 <_fstat_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	4d07      	ldr	r5, [pc, #28]	; (800fc40 <_fstat_r+0x20>)
 800fc24:	2300      	movs	r3, #0
 800fc26:	4604      	mov	r4, r0
 800fc28:	4608      	mov	r0, r1
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	602b      	str	r3, [r5, #0]
 800fc2e:	f7f5 ff60 	bl	8005af2 <_fstat>
 800fc32:	1c43      	adds	r3, r0, #1
 800fc34:	d102      	bne.n	800fc3c <_fstat_r+0x1c>
 800fc36:	682b      	ldr	r3, [r5, #0]
 800fc38:	b103      	cbz	r3, 800fc3c <_fstat_r+0x1c>
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	bf00      	nop
 800fc40:	200051c8 	.word	0x200051c8

0800fc44 <_isatty_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d06      	ldr	r5, [pc, #24]	; (800fc60 <_isatty_r+0x1c>)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	4608      	mov	r0, r1
 800fc4e:	602b      	str	r3, [r5, #0]
 800fc50:	f7f5 ff5f 	bl	8005b12 <_isatty>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_isatty_r+0x1a>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_isatty_r+0x1a>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	200051c8 	.word	0x200051c8

0800fc64 <atan2>:
 800fc64:	f000 bbb8 	b.w	80103d8 <__ieee754_atan2>

0800fc68 <pow>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	ed2d 8b02 	vpush	{d8}
 800fc6e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc72:	eef0 8a60 	vmov.f32	s17, s1
 800fc76:	ec55 4b11 	vmov	r4, r5, d1
 800fc7a:	f000 fc75 	bl	8010568 <__ieee754_pow>
 800fc7e:	4622      	mov	r2, r4
 800fc80:	462b      	mov	r3, r5
 800fc82:	4620      	mov	r0, r4
 800fc84:	4629      	mov	r1, r5
 800fc86:	ec57 6b10 	vmov	r6, r7, d0
 800fc8a:	f7f0 ff4f 	bl	8000b2c <__aeabi_dcmpun>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d13b      	bne.n	800fd0a <pow+0xa2>
 800fc92:	ec51 0b18 	vmov	r0, r1, d8
 800fc96:	2200      	movs	r2, #0
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f7f0 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc9e:	b1b8      	cbz	r0, 800fcd0 <pow+0x68>
 800fca0:	2200      	movs	r2, #0
 800fca2:	2300      	movs	r3, #0
 800fca4:	4620      	mov	r0, r4
 800fca6:	4629      	mov	r1, r5
 800fca8:	f7f0 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d146      	bne.n	800fd3e <pow+0xd6>
 800fcb0:	ec45 4b10 	vmov	d0, r4, r5
 800fcb4:	f000 f920 	bl	800fef8 <finite>
 800fcb8:	b338      	cbz	r0, 800fd0a <pow+0xa2>
 800fcba:	2200      	movs	r2, #0
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	4629      	mov	r1, r5
 800fcc2:	f7f0 ff0b 	bl	8000adc <__aeabi_dcmplt>
 800fcc6:	b300      	cbz	r0, 800fd0a <pow+0xa2>
 800fcc8:	f7fd ff1c 	bl	800db04 <__errno>
 800fccc:	2322      	movs	r3, #34	; 0x22
 800fcce:	e01b      	b.n	800fd08 <pow+0xa0>
 800fcd0:	ec47 6b10 	vmov	d0, r6, r7
 800fcd4:	f000 f910 	bl	800fef8 <finite>
 800fcd8:	b9e0      	cbnz	r0, 800fd14 <pow+0xac>
 800fcda:	eeb0 0a48 	vmov.f32	s0, s16
 800fcde:	eef0 0a68 	vmov.f32	s1, s17
 800fce2:	f000 f909 	bl	800fef8 <finite>
 800fce6:	b1a8      	cbz	r0, 800fd14 <pow+0xac>
 800fce8:	ec45 4b10 	vmov	d0, r4, r5
 800fcec:	f000 f904 	bl	800fef8 <finite>
 800fcf0:	b180      	cbz	r0, 800fd14 <pow+0xac>
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	463b      	mov	r3, r7
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 ff17 	bl	8000b2c <__aeabi_dcmpun>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d0e2      	beq.n	800fcc8 <pow+0x60>
 800fd02:	f7fd feff 	bl	800db04 <__errno>
 800fd06:	2321      	movs	r3, #33	; 0x21
 800fd08:	6003      	str	r3, [r0, #0]
 800fd0a:	ecbd 8b02 	vpop	{d8}
 800fd0e:	ec47 6b10 	vmov	d0, r6, r7
 800fd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd14:	2200      	movs	r2, #0
 800fd16:	2300      	movs	r3, #0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	f7f0 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	d0f2      	beq.n	800fd0a <pow+0xa2>
 800fd24:	eeb0 0a48 	vmov.f32	s0, s16
 800fd28:	eef0 0a68 	vmov.f32	s1, s17
 800fd2c:	f000 f8e4 	bl	800fef8 <finite>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d0ea      	beq.n	800fd0a <pow+0xa2>
 800fd34:	ec45 4b10 	vmov	d0, r4, r5
 800fd38:	f000 f8de 	bl	800fef8 <finite>
 800fd3c:	e7c3      	b.n	800fcc6 <pow+0x5e>
 800fd3e:	4f01      	ldr	r7, [pc, #4]	; (800fd44 <pow+0xdc>)
 800fd40:	2600      	movs	r6, #0
 800fd42:	e7e2      	b.n	800fd0a <pow+0xa2>
 800fd44:	3ff00000 	.word	0x3ff00000

0800fd48 <sqrt>:
 800fd48:	b538      	push	{r3, r4, r5, lr}
 800fd4a:	ed2d 8b02 	vpush	{d8}
 800fd4e:	ec55 4b10 	vmov	r4, r5, d0
 800fd52:	f000 f8dd 	bl	800ff10 <__ieee754_sqrt>
 800fd56:	4622      	mov	r2, r4
 800fd58:	462b      	mov	r3, r5
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd62:	eef0 8a60 	vmov.f32	s17, s1
 800fd66:	f7f0 fee1 	bl	8000b2c <__aeabi_dcmpun>
 800fd6a:	b990      	cbnz	r0, 800fd92 <sqrt+0x4a>
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	2300      	movs	r3, #0
 800fd70:	4620      	mov	r0, r4
 800fd72:	4629      	mov	r1, r5
 800fd74:	f7f0 feb2 	bl	8000adc <__aeabi_dcmplt>
 800fd78:	b158      	cbz	r0, 800fd92 <sqrt+0x4a>
 800fd7a:	f7fd fec3 	bl	800db04 <__errno>
 800fd7e:	2321      	movs	r3, #33	; 0x21
 800fd80:	6003      	str	r3, [r0, #0]
 800fd82:	2200      	movs	r2, #0
 800fd84:	2300      	movs	r3, #0
 800fd86:	4610      	mov	r0, r2
 800fd88:	4619      	mov	r1, r3
 800fd8a:	f7f0 fd5f 	bl	800084c <__aeabi_ddiv>
 800fd8e:	ec41 0b18 	vmov	d8, r0, r1
 800fd92:	eeb0 0a48 	vmov.f32	s0, s16
 800fd96:	eef0 0a68 	vmov.f32	s1, s17
 800fd9a:	ecbd 8b02 	vpop	{d8}
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}

0800fda0 <cos>:
 800fda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fda2:	ec53 2b10 	vmov	r2, r3, d0
 800fda6:	4826      	ldr	r0, [pc, #152]	; (800fe40 <cos+0xa0>)
 800fda8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fdac:	4281      	cmp	r1, r0
 800fdae:	dc06      	bgt.n	800fdbe <cos+0x1e>
 800fdb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fe38 <cos+0x98>
 800fdb4:	b005      	add	sp, #20
 800fdb6:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdba:	f000 b985 	b.w	80100c8 <__kernel_cos>
 800fdbe:	4821      	ldr	r0, [pc, #132]	; (800fe44 <cos+0xa4>)
 800fdc0:	4281      	cmp	r1, r0
 800fdc2:	dd09      	ble.n	800fdd8 <cos+0x38>
 800fdc4:	ee10 0a10 	vmov	r0, s0
 800fdc8:	4619      	mov	r1, r3
 800fdca:	f7f0 fa5d 	bl	8000288 <__aeabi_dsub>
 800fdce:	ec41 0b10 	vmov	d0, r0, r1
 800fdd2:	b005      	add	sp, #20
 800fdd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdd8:	4668      	mov	r0, sp
 800fdda:	f001 f8f1 	bl	8010fc0 <__ieee754_rem_pio2>
 800fdde:	f000 0003 	and.w	r0, r0, #3
 800fde2:	2801      	cmp	r0, #1
 800fde4:	d00b      	beq.n	800fdfe <cos+0x5e>
 800fde6:	2802      	cmp	r0, #2
 800fde8:	d016      	beq.n	800fe18 <cos+0x78>
 800fdea:	b9e0      	cbnz	r0, 800fe26 <cos+0x86>
 800fdec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdf0:	ed9d 0b00 	vldr	d0, [sp]
 800fdf4:	f000 f968 	bl	80100c8 <__kernel_cos>
 800fdf8:	ec51 0b10 	vmov	r0, r1, d0
 800fdfc:	e7e7      	b.n	800fdce <cos+0x2e>
 800fdfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe02:	ed9d 0b00 	vldr	d0, [sp]
 800fe06:	f000 fa27 	bl	8010258 <__kernel_sin>
 800fe0a:	ec53 2b10 	vmov	r2, r3, d0
 800fe0e:	ee10 0a10 	vmov	r0, s0
 800fe12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe16:	e7da      	b.n	800fdce <cos+0x2e>
 800fe18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe1c:	ed9d 0b00 	vldr	d0, [sp]
 800fe20:	f000 f952 	bl	80100c8 <__kernel_cos>
 800fe24:	e7f1      	b.n	800fe0a <cos+0x6a>
 800fe26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe2a:	ed9d 0b00 	vldr	d0, [sp]
 800fe2e:	2001      	movs	r0, #1
 800fe30:	f000 fa12 	bl	8010258 <__kernel_sin>
 800fe34:	e7e0      	b.n	800fdf8 <cos+0x58>
 800fe36:	bf00      	nop
	...
 800fe40:	3fe921fb 	.word	0x3fe921fb
 800fe44:	7fefffff 	.word	0x7fefffff

0800fe48 <sin>:
 800fe48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe4a:	ec53 2b10 	vmov	r2, r3, d0
 800fe4e:	4828      	ldr	r0, [pc, #160]	; (800fef0 <sin+0xa8>)
 800fe50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe54:	4281      	cmp	r1, r0
 800fe56:	dc07      	bgt.n	800fe68 <sin+0x20>
 800fe58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fee8 <sin+0xa0>
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	b005      	add	sp, #20
 800fe60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe64:	f000 b9f8 	b.w	8010258 <__kernel_sin>
 800fe68:	4822      	ldr	r0, [pc, #136]	; (800fef4 <sin+0xac>)
 800fe6a:	4281      	cmp	r1, r0
 800fe6c:	dd09      	ble.n	800fe82 <sin+0x3a>
 800fe6e:	ee10 0a10 	vmov	r0, s0
 800fe72:	4619      	mov	r1, r3
 800fe74:	f7f0 fa08 	bl	8000288 <__aeabi_dsub>
 800fe78:	ec41 0b10 	vmov	d0, r0, r1
 800fe7c:	b005      	add	sp, #20
 800fe7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe82:	4668      	mov	r0, sp
 800fe84:	f001 f89c 	bl	8010fc0 <__ieee754_rem_pio2>
 800fe88:	f000 0003 	and.w	r0, r0, #3
 800fe8c:	2801      	cmp	r0, #1
 800fe8e:	d00c      	beq.n	800feaa <sin+0x62>
 800fe90:	2802      	cmp	r0, #2
 800fe92:	d011      	beq.n	800feb8 <sin+0x70>
 800fe94:	b9f0      	cbnz	r0, 800fed4 <sin+0x8c>
 800fe96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe9a:	ed9d 0b00 	vldr	d0, [sp]
 800fe9e:	2001      	movs	r0, #1
 800fea0:	f000 f9da 	bl	8010258 <__kernel_sin>
 800fea4:	ec51 0b10 	vmov	r0, r1, d0
 800fea8:	e7e6      	b.n	800fe78 <sin+0x30>
 800feaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800feae:	ed9d 0b00 	vldr	d0, [sp]
 800feb2:	f000 f909 	bl	80100c8 <__kernel_cos>
 800feb6:	e7f5      	b.n	800fea4 <sin+0x5c>
 800feb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800febc:	ed9d 0b00 	vldr	d0, [sp]
 800fec0:	2001      	movs	r0, #1
 800fec2:	f000 f9c9 	bl	8010258 <__kernel_sin>
 800fec6:	ec53 2b10 	vmov	r2, r3, d0
 800feca:	ee10 0a10 	vmov	r0, s0
 800fece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fed2:	e7d1      	b.n	800fe78 <sin+0x30>
 800fed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fed8:	ed9d 0b00 	vldr	d0, [sp]
 800fedc:	f000 f8f4 	bl	80100c8 <__kernel_cos>
 800fee0:	e7f1      	b.n	800fec6 <sin+0x7e>
 800fee2:	bf00      	nop
 800fee4:	f3af 8000 	nop.w
	...
 800fef0:	3fe921fb 	.word	0x3fe921fb
 800fef4:	7fefffff 	.word	0x7fefffff

0800fef8 <finite>:
 800fef8:	b082      	sub	sp, #8
 800fefa:	ed8d 0b00 	vstr	d0, [sp]
 800fefe:	9801      	ldr	r0, [sp, #4]
 800ff00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff08:	0fc0      	lsrs	r0, r0, #31
 800ff0a:	b002      	add	sp, #8
 800ff0c:	4770      	bx	lr
	...

0800ff10 <__ieee754_sqrt>:
 800ff10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	ec55 4b10 	vmov	r4, r5, d0
 800ff18:	4e67      	ldr	r6, [pc, #412]	; (80100b8 <__ieee754_sqrt+0x1a8>)
 800ff1a:	43ae      	bics	r6, r5
 800ff1c:	ee10 0a10 	vmov	r0, s0
 800ff20:	ee10 2a10 	vmov	r2, s0
 800ff24:	4629      	mov	r1, r5
 800ff26:	462b      	mov	r3, r5
 800ff28:	d10d      	bne.n	800ff46 <__ieee754_sqrt+0x36>
 800ff2a:	f7f0 fb65 	bl	80005f8 <__aeabi_dmul>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	460b      	mov	r3, r1
 800ff32:	4620      	mov	r0, r4
 800ff34:	4629      	mov	r1, r5
 800ff36:	f7f0 f9a9 	bl	800028c <__adddf3>
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	460d      	mov	r5, r1
 800ff3e:	ec45 4b10 	vmov	d0, r4, r5
 800ff42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	dc0b      	bgt.n	800ff62 <__ieee754_sqrt+0x52>
 800ff4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ff4e:	4326      	orrs	r6, r4
 800ff50:	d0f5      	beq.n	800ff3e <__ieee754_sqrt+0x2e>
 800ff52:	b135      	cbz	r5, 800ff62 <__ieee754_sqrt+0x52>
 800ff54:	f7f0 f998 	bl	8000288 <__aeabi_dsub>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	f7f0 fc76 	bl	800084c <__aeabi_ddiv>
 800ff60:	e7eb      	b.n	800ff3a <__ieee754_sqrt+0x2a>
 800ff62:	1509      	asrs	r1, r1, #20
 800ff64:	f000 808d 	beq.w	8010082 <__ieee754_sqrt+0x172>
 800ff68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff6c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ff70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff74:	07c9      	lsls	r1, r1, #31
 800ff76:	bf5c      	itt	pl
 800ff78:	005b      	lslpl	r3, r3, #1
 800ff7a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ff7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff82:	bf58      	it	pl
 800ff84:	0052      	lslpl	r2, r2, #1
 800ff86:	2500      	movs	r5, #0
 800ff88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ff8c:	1076      	asrs	r6, r6, #1
 800ff8e:	0052      	lsls	r2, r2, #1
 800ff90:	f04f 0e16 	mov.w	lr, #22
 800ff94:	46ac      	mov	ip, r5
 800ff96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff9a:	eb0c 0001 	add.w	r0, ip, r1
 800ff9e:	4298      	cmp	r0, r3
 800ffa0:	bfde      	ittt	le
 800ffa2:	1a1b      	suble	r3, r3, r0
 800ffa4:	eb00 0c01 	addle.w	ip, r0, r1
 800ffa8:	186d      	addle	r5, r5, r1
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	f1be 0e01 	subs.w	lr, lr, #1
 800ffb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ffb4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ffb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ffbc:	d1ed      	bne.n	800ff9a <__ieee754_sqrt+0x8a>
 800ffbe:	4674      	mov	r4, lr
 800ffc0:	2720      	movs	r7, #32
 800ffc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ffc6:	4563      	cmp	r3, ip
 800ffc8:	eb01 000e 	add.w	r0, r1, lr
 800ffcc:	dc02      	bgt.n	800ffd4 <__ieee754_sqrt+0xc4>
 800ffce:	d113      	bne.n	800fff8 <__ieee754_sqrt+0xe8>
 800ffd0:	4290      	cmp	r0, r2
 800ffd2:	d811      	bhi.n	800fff8 <__ieee754_sqrt+0xe8>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	eb00 0e01 	add.w	lr, r0, r1
 800ffda:	da57      	bge.n	801008c <__ieee754_sqrt+0x17c>
 800ffdc:	f1be 0f00 	cmp.w	lr, #0
 800ffe0:	db54      	blt.n	801008c <__ieee754_sqrt+0x17c>
 800ffe2:	f10c 0801 	add.w	r8, ip, #1
 800ffe6:	eba3 030c 	sub.w	r3, r3, ip
 800ffea:	4290      	cmp	r0, r2
 800ffec:	bf88      	it	hi
 800ffee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fff2:	1a12      	subs	r2, r2, r0
 800fff4:	440c      	add	r4, r1
 800fff6:	46c4      	mov	ip, r8
 800fff8:	005b      	lsls	r3, r3, #1
 800fffa:	3f01      	subs	r7, #1
 800fffc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010000:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010004:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010008:	d1dd      	bne.n	800ffc6 <__ieee754_sqrt+0xb6>
 801000a:	4313      	orrs	r3, r2
 801000c:	d01b      	beq.n	8010046 <__ieee754_sqrt+0x136>
 801000e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80100bc <__ieee754_sqrt+0x1ac>
 8010012:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80100c0 <__ieee754_sqrt+0x1b0>
 8010016:	e9da 0100 	ldrd	r0, r1, [sl]
 801001a:	e9db 2300 	ldrd	r2, r3, [fp]
 801001e:	f7f0 f933 	bl	8000288 <__aeabi_dsub>
 8010022:	e9da 8900 	ldrd	r8, r9, [sl]
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4640      	mov	r0, r8
 801002c:	4649      	mov	r1, r9
 801002e:	f7f0 fd5f 	bl	8000af0 <__aeabi_dcmple>
 8010032:	b140      	cbz	r0, 8010046 <__ieee754_sqrt+0x136>
 8010034:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010038:	e9da 0100 	ldrd	r0, r1, [sl]
 801003c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010040:	d126      	bne.n	8010090 <__ieee754_sqrt+0x180>
 8010042:	3501      	adds	r5, #1
 8010044:	463c      	mov	r4, r7
 8010046:	106a      	asrs	r2, r5, #1
 8010048:	0863      	lsrs	r3, r4, #1
 801004a:	07e9      	lsls	r1, r5, #31
 801004c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010050:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010054:	bf48      	it	mi
 8010056:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801005a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801005e:	461c      	mov	r4, r3
 8010060:	e76d      	b.n	800ff3e <__ieee754_sqrt+0x2e>
 8010062:	0ad3      	lsrs	r3, r2, #11
 8010064:	3815      	subs	r0, #21
 8010066:	0552      	lsls	r2, r2, #21
 8010068:	2b00      	cmp	r3, #0
 801006a:	d0fa      	beq.n	8010062 <__ieee754_sqrt+0x152>
 801006c:	02dc      	lsls	r4, r3, #11
 801006e:	d50a      	bpl.n	8010086 <__ieee754_sqrt+0x176>
 8010070:	f1c1 0420 	rsb	r4, r1, #32
 8010074:	fa22 f404 	lsr.w	r4, r2, r4
 8010078:	1e4d      	subs	r5, r1, #1
 801007a:	408a      	lsls	r2, r1
 801007c:	4323      	orrs	r3, r4
 801007e:	1b41      	subs	r1, r0, r5
 8010080:	e772      	b.n	800ff68 <__ieee754_sqrt+0x58>
 8010082:	4608      	mov	r0, r1
 8010084:	e7f0      	b.n	8010068 <__ieee754_sqrt+0x158>
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	3101      	adds	r1, #1
 801008a:	e7ef      	b.n	801006c <__ieee754_sqrt+0x15c>
 801008c:	46e0      	mov	r8, ip
 801008e:	e7aa      	b.n	800ffe6 <__ieee754_sqrt+0xd6>
 8010090:	f7f0 f8fc 	bl	800028c <__adddf3>
 8010094:	e9da 8900 	ldrd	r8, r9, [sl]
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	4640      	mov	r0, r8
 801009e:	4649      	mov	r1, r9
 80100a0:	f7f0 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80100a4:	b120      	cbz	r0, 80100b0 <__ieee754_sqrt+0x1a0>
 80100a6:	1ca0      	adds	r0, r4, #2
 80100a8:	bf08      	it	eq
 80100aa:	3501      	addeq	r5, #1
 80100ac:	3402      	adds	r4, #2
 80100ae:	e7ca      	b.n	8010046 <__ieee754_sqrt+0x136>
 80100b0:	3401      	adds	r4, #1
 80100b2:	f024 0401 	bic.w	r4, r4, #1
 80100b6:	e7c6      	b.n	8010046 <__ieee754_sqrt+0x136>
 80100b8:	7ff00000 	.word	0x7ff00000
 80100bc:	200001d8 	.word	0x200001d8
 80100c0:	200001e0 	.word	0x200001e0
 80100c4:	00000000 	.word	0x00000000

080100c8 <__kernel_cos>:
 80100c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	ec57 6b10 	vmov	r6, r7, d0
 80100d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80100d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80100d8:	ed8d 1b00 	vstr	d1, [sp]
 80100dc:	da07      	bge.n	80100ee <__kernel_cos+0x26>
 80100de:	ee10 0a10 	vmov	r0, s0
 80100e2:	4639      	mov	r1, r7
 80100e4:	f7f0 fd38 	bl	8000b58 <__aeabi_d2iz>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	f000 8088 	beq.w	80101fe <__kernel_cos+0x136>
 80100ee:	4632      	mov	r2, r6
 80100f0:	463b      	mov	r3, r7
 80100f2:	4630      	mov	r0, r6
 80100f4:	4639      	mov	r1, r7
 80100f6:	f7f0 fa7f 	bl	80005f8 <__aeabi_dmul>
 80100fa:	4b51      	ldr	r3, [pc, #324]	; (8010240 <__kernel_cos+0x178>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	4604      	mov	r4, r0
 8010100:	460d      	mov	r5, r1
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	a340      	add	r3, pc, #256	; (adr r3, 8010208 <__kernel_cos+0x140>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	4682      	mov	sl, r0
 801010e:	468b      	mov	fp, r1
 8010110:	4620      	mov	r0, r4
 8010112:	4629      	mov	r1, r5
 8010114:	f7f0 fa70 	bl	80005f8 <__aeabi_dmul>
 8010118:	a33d      	add	r3, pc, #244	; (adr r3, 8010210 <__kernel_cos+0x148>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	f7f0 f8b5 	bl	800028c <__adddf3>
 8010122:	4622      	mov	r2, r4
 8010124:	462b      	mov	r3, r5
 8010126:	f7f0 fa67 	bl	80005f8 <__aeabi_dmul>
 801012a:	a33b      	add	r3, pc, #236	; (adr r3, 8010218 <__kernel_cos+0x150>)
 801012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010130:	f7f0 f8aa 	bl	8000288 <__aeabi_dsub>
 8010134:	4622      	mov	r2, r4
 8010136:	462b      	mov	r3, r5
 8010138:	f7f0 fa5e 	bl	80005f8 <__aeabi_dmul>
 801013c:	a338      	add	r3, pc, #224	; (adr r3, 8010220 <__kernel_cos+0x158>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	f7f0 f8a3 	bl	800028c <__adddf3>
 8010146:	4622      	mov	r2, r4
 8010148:	462b      	mov	r3, r5
 801014a:	f7f0 fa55 	bl	80005f8 <__aeabi_dmul>
 801014e:	a336      	add	r3, pc, #216	; (adr r3, 8010228 <__kernel_cos+0x160>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	4622      	mov	r2, r4
 801015a:	462b      	mov	r3, r5
 801015c:	f7f0 fa4c 	bl	80005f8 <__aeabi_dmul>
 8010160:	a333      	add	r3, pc, #204	; (adr r3, 8010230 <__kernel_cos+0x168>)
 8010162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010166:	f7f0 f891 	bl	800028c <__adddf3>
 801016a:	4622      	mov	r2, r4
 801016c:	462b      	mov	r3, r5
 801016e:	f7f0 fa43 	bl	80005f8 <__aeabi_dmul>
 8010172:	4622      	mov	r2, r4
 8010174:	462b      	mov	r3, r5
 8010176:	f7f0 fa3f 	bl	80005f8 <__aeabi_dmul>
 801017a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801017e:	4604      	mov	r4, r0
 8010180:	460d      	mov	r5, r1
 8010182:	4630      	mov	r0, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f7f0 fa37 	bl	80005f8 <__aeabi_dmul>
 801018a:	460b      	mov	r3, r1
 801018c:	4602      	mov	r2, r0
 801018e:	4629      	mov	r1, r5
 8010190:	4620      	mov	r0, r4
 8010192:	f7f0 f879 	bl	8000288 <__aeabi_dsub>
 8010196:	4b2b      	ldr	r3, [pc, #172]	; (8010244 <__kernel_cos+0x17c>)
 8010198:	4598      	cmp	r8, r3
 801019a:	4606      	mov	r6, r0
 801019c:	460f      	mov	r7, r1
 801019e:	dc10      	bgt.n	80101c2 <__kernel_cos+0xfa>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4650      	mov	r0, sl
 80101a6:	4659      	mov	r1, fp
 80101a8:	f7f0 f86e 	bl	8000288 <__aeabi_dsub>
 80101ac:	460b      	mov	r3, r1
 80101ae:	4926      	ldr	r1, [pc, #152]	; (8010248 <__kernel_cos+0x180>)
 80101b0:	4602      	mov	r2, r0
 80101b2:	2000      	movs	r0, #0
 80101b4:	f7f0 f868 	bl	8000288 <__aeabi_dsub>
 80101b8:	ec41 0b10 	vmov	d0, r0, r1
 80101bc:	b003      	add	sp, #12
 80101be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c2:	4b22      	ldr	r3, [pc, #136]	; (801024c <__kernel_cos+0x184>)
 80101c4:	4920      	ldr	r1, [pc, #128]	; (8010248 <__kernel_cos+0x180>)
 80101c6:	4598      	cmp	r8, r3
 80101c8:	bfcc      	ite	gt
 80101ca:	4d21      	ldrgt	r5, [pc, #132]	; (8010250 <__kernel_cos+0x188>)
 80101cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80101d0:	2400      	movs	r4, #0
 80101d2:	4622      	mov	r2, r4
 80101d4:	462b      	mov	r3, r5
 80101d6:	2000      	movs	r0, #0
 80101d8:	f7f0 f856 	bl	8000288 <__aeabi_dsub>
 80101dc:	4622      	mov	r2, r4
 80101de:	4680      	mov	r8, r0
 80101e0:	4689      	mov	r9, r1
 80101e2:	462b      	mov	r3, r5
 80101e4:	4650      	mov	r0, sl
 80101e6:	4659      	mov	r1, fp
 80101e8:	f7f0 f84e 	bl	8000288 <__aeabi_dsub>
 80101ec:	4632      	mov	r2, r6
 80101ee:	463b      	mov	r3, r7
 80101f0:	f7f0 f84a 	bl	8000288 <__aeabi_dsub>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4640      	mov	r0, r8
 80101fa:	4649      	mov	r1, r9
 80101fc:	e7da      	b.n	80101b4 <__kernel_cos+0xec>
 80101fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010238 <__kernel_cos+0x170>
 8010202:	e7db      	b.n	80101bc <__kernel_cos+0xf4>
 8010204:	f3af 8000 	nop.w
 8010208:	be8838d4 	.word	0xbe8838d4
 801020c:	bda8fae9 	.word	0xbda8fae9
 8010210:	bdb4b1c4 	.word	0xbdb4b1c4
 8010214:	3e21ee9e 	.word	0x3e21ee9e
 8010218:	809c52ad 	.word	0x809c52ad
 801021c:	3e927e4f 	.word	0x3e927e4f
 8010220:	19cb1590 	.word	0x19cb1590
 8010224:	3efa01a0 	.word	0x3efa01a0
 8010228:	16c15177 	.word	0x16c15177
 801022c:	3f56c16c 	.word	0x3f56c16c
 8010230:	5555554c 	.word	0x5555554c
 8010234:	3fa55555 	.word	0x3fa55555
 8010238:	00000000 	.word	0x00000000
 801023c:	3ff00000 	.word	0x3ff00000
 8010240:	3fe00000 	.word	0x3fe00000
 8010244:	3fd33332 	.word	0x3fd33332
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	3fe90000 	.word	0x3fe90000
 8010250:	3fd20000 	.word	0x3fd20000
 8010254:	00000000 	.word	0x00000000

08010258 <__kernel_sin>:
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	ed2d 8b04 	vpush	{d8-d9}
 8010260:	eeb0 8a41 	vmov.f32	s16, s2
 8010264:	eef0 8a61 	vmov.f32	s17, s3
 8010268:	ec55 4b10 	vmov	r4, r5, d0
 801026c:	b083      	sub	sp, #12
 801026e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010276:	9001      	str	r0, [sp, #4]
 8010278:	da06      	bge.n	8010288 <__kernel_sin+0x30>
 801027a:	ee10 0a10 	vmov	r0, s0
 801027e:	4629      	mov	r1, r5
 8010280:	f7f0 fc6a 	bl	8000b58 <__aeabi_d2iz>
 8010284:	2800      	cmp	r0, #0
 8010286:	d051      	beq.n	801032c <__kernel_sin+0xd4>
 8010288:	4622      	mov	r2, r4
 801028a:	462b      	mov	r3, r5
 801028c:	4620      	mov	r0, r4
 801028e:	4629      	mov	r1, r5
 8010290:	f7f0 f9b2 	bl	80005f8 <__aeabi_dmul>
 8010294:	4682      	mov	sl, r0
 8010296:	468b      	mov	fp, r1
 8010298:	4602      	mov	r2, r0
 801029a:	460b      	mov	r3, r1
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	f7f0 f9aa 	bl	80005f8 <__aeabi_dmul>
 80102a4:	a341      	add	r3, pc, #260	; (adr r3, 80103ac <__kernel_sin+0x154>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	4680      	mov	r8, r0
 80102ac:	4689      	mov	r9, r1
 80102ae:	4650      	mov	r0, sl
 80102b0:	4659      	mov	r1, fp
 80102b2:	f7f0 f9a1 	bl	80005f8 <__aeabi_dmul>
 80102b6:	a33f      	add	r3, pc, #252	; (adr r3, 80103b4 <__kernel_sin+0x15c>)
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	f7ef ffe4 	bl	8000288 <__aeabi_dsub>
 80102c0:	4652      	mov	r2, sl
 80102c2:	465b      	mov	r3, fp
 80102c4:	f7f0 f998 	bl	80005f8 <__aeabi_dmul>
 80102c8:	a33c      	add	r3, pc, #240	; (adr r3, 80103bc <__kernel_sin+0x164>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	f7ef ffdd 	bl	800028c <__adddf3>
 80102d2:	4652      	mov	r2, sl
 80102d4:	465b      	mov	r3, fp
 80102d6:	f7f0 f98f 	bl	80005f8 <__aeabi_dmul>
 80102da:	a33a      	add	r3, pc, #232	; (adr r3, 80103c4 <__kernel_sin+0x16c>)
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	f7ef ffd2 	bl	8000288 <__aeabi_dsub>
 80102e4:	4652      	mov	r2, sl
 80102e6:	465b      	mov	r3, fp
 80102e8:	f7f0 f986 	bl	80005f8 <__aeabi_dmul>
 80102ec:	a337      	add	r3, pc, #220	; (adr r3, 80103cc <__kernel_sin+0x174>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f7ef ffcb 	bl	800028c <__adddf3>
 80102f6:	9b01      	ldr	r3, [sp, #4]
 80102f8:	4606      	mov	r6, r0
 80102fa:	460f      	mov	r7, r1
 80102fc:	b9eb      	cbnz	r3, 801033a <__kernel_sin+0xe2>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	4650      	mov	r0, sl
 8010304:	4659      	mov	r1, fp
 8010306:	f7f0 f977 	bl	80005f8 <__aeabi_dmul>
 801030a:	a325      	add	r3, pc, #148	; (adr r3, 80103a0 <__kernel_sin+0x148>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	f7ef ffba 	bl	8000288 <__aeabi_dsub>
 8010314:	4642      	mov	r2, r8
 8010316:	464b      	mov	r3, r9
 8010318:	f7f0 f96e 	bl	80005f8 <__aeabi_dmul>
 801031c:	4602      	mov	r2, r0
 801031e:	460b      	mov	r3, r1
 8010320:	4620      	mov	r0, r4
 8010322:	4629      	mov	r1, r5
 8010324:	f7ef ffb2 	bl	800028c <__adddf3>
 8010328:	4604      	mov	r4, r0
 801032a:	460d      	mov	r5, r1
 801032c:	ec45 4b10 	vmov	d0, r4, r5
 8010330:	b003      	add	sp, #12
 8010332:	ecbd 8b04 	vpop	{d8-d9}
 8010336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033a:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <__kernel_sin+0x150>)
 801033c:	ec51 0b18 	vmov	r0, r1, d8
 8010340:	2200      	movs	r2, #0
 8010342:	f7f0 f959 	bl	80005f8 <__aeabi_dmul>
 8010346:	4632      	mov	r2, r6
 8010348:	ec41 0b19 	vmov	d9, r0, r1
 801034c:	463b      	mov	r3, r7
 801034e:	4640      	mov	r0, r8
 8010350:	4649      	mov	r1, r9
 8010352:	f7f0 f951 	bl	80005f8 <__aeabi_dmul>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	ec51 0b19 	vmov	r0, r1, d9
 801035e:	f7ef ff93 	bl	8000288 <__aeabi_dsub>
 8010362:	4652      	mov	r2, sl
 8010364:	465b      	mov	r3, fp
 8010366:	f7f0 f947 	bl	80005f8 <__aeabi_dmul>
 801036a:	ec53 2b18 	vmov	r2, r3, d8
 801036e:	f7ef ff8b 	bl	8000288 <__aeabi_dsub>
 8010372:	a30b      	add	r3, pc, #44	; (adr r3, 80103a0 <__kernel_sin+0x148>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	4640      	mov	r0, r8
 801037e:	4649      	mov	r1, r9
 8010380:	f7f0 f93a 	bl	80005f8 <__aeabi_dmul>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	4630      	mov	r0, r6
 801038a:	4639      	mov	r1, r7
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4620      	mov	r0, r4
 8010396:	4629      	mov	r1, r5
 8010398:	f7ef ff76 	bl	8000288 <__aeabi_dsub>
 801039c:	e7c4      	b.n	8010328 <__kernel_sin+0xd0>
 801039e:	bf00      	nop
 80103a0:	55555549 	.word	0x55555549
 80103a4:	3fc55555 	.word	0x3fc55555
 80103a8:	3fe00000 	.word	0x3fe00000
 80103ac:	5acfd57c 	.word	0x5acfd57c
 80103b0:	3de5d93a 	.word	0x3de5d93a
 80103b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80103b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80103bc:	57b1fe7d 	.word	0x57b1fe7d
 80103c0:	3ec71de3 	.word	0x3ec71de3
 80103c4:	19c161d5 	.word	0x19c161d5
 80103c8:	3f2a01a0 	.word	0x3f2a01a0
 80103cc:	1110f8a6 	.word	0x1110f8a6
 80103d0:	3f811111 	.word	0x3f811111
 80103d4:	00000000 	.word	0x00000000

080103d8 <__ieee754_atan2>:
 80103d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103dc:	ec57 6b11 	vmov	r6, r7, d1
 80103e0:	4273      	negs	r3, r6
 80103e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8010560 <__ieee754_atan2+0x188>
 80103e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80103ea:	4333      	orrs	r3, r6
 80103ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80103f0:	4543      	cmp	r3, r8
 80103f2:	ec51 0b10 	vmov	r0, r1, d0
 80103f6:	ee11 5a10 	vmov	r5, s2
 80103fa:	d80a      	bhi.n	8010412 <__ieee754_atan2+0x3a>
 80103fc:	4244      	negs	r4, r0
 80103fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010402:	4304      	orrs	r4, r0
 8010404:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010408:	4544      	cmp	r4, r8
 801040a:	ee10 9a10 	vmov	r9, s0
 801040e:	468e      	mov	lr, r1
 8010410:	d907      	bls.n	8010422 <__ieee754_atan2+0x4a>
 8010412:	4632      	mov	r2, r6
 8010414:	463b      	mov	r3, r7
 8010416:	f7ef ff39 	bl	800028c <__adddf3>
 801041a:	ec41 0b10 	vmov	d0, r0, r1
 801041e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010422:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010426:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801042a:	4334      	orrs	r4, r6
 801042c:	d103      	bne.n	8010436 <__ieee754_atan2+0x5e>
 801042e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010432:	f000 bfcd 	b.w	80113d0 <atan>
 8010436:	17bc      	asrs	r4, r7, #30
 8010438:	f004 0402 	and.w	r4, r4, #2
 801043c:	ea53 0909 	orrs.w	r9, r3, r9
 8010440:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010444:	d107      	bne.n	8010456 <__ieee754_atan2+0x7e>
 8010446:	2c02      	cmp	r4, #2
 8010448:	d05f      	beq.n	801050a <__ieee754_atan2+0x132>
 801044a:	2c03      	cmp	r4, #3
 801044c:	d1e5      	bne.n	801041a <__ieee754_atan2+0x42>
 801044e:	a140      	add	r1, pc, #256	; (adr r1, 8010550 <__ieee754_atan2+0x178>)
 8010450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010454:	e7e1      	b.n	801041a <__ieee754_atan2+0x42>
 8010456:	4315      	orrs	r5, r2
 8010458:	d106      	bne.n	8010468 <__ieee754_atan2+0x90>
 801045a:	f1be 0f00 	cmp.w	lr, #0
 801045e:	da5f      	bge.n	8010520 <__ieee754_atan2+0x148>
 8010460:	a13d      	add	r1, pc, #244	; (adr r1, 8010558 <__ieee754_atan2+0x180>)
 8010462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010466:	e7d8      	b.n	801041a <__ieee754_atan2+0x42>
 8010468:	4542      	cmp	r2, r8
 801046a:	d10f      	bne.n	801048c <__ieee754_atan2+0xb4>
 801046c:	4293      	cmp	r3, r2
 801046e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010472:	d107      	bne.n	8010484 <__ieee754_atan2+0xac>
 8010474:	2c02      	cmp	r4, #2
 8010476:	d84c      	bhi.n	8010512 <__ieee754_atan2+0x13a>
 8010478:	4b33      	ldr	r3, [pc, #204]	; (8010548 <__ieee754_atan2+0x170>)
 801047a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801047e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010482:	e7ca      	b.n	801041a <__ieee754_atan2+0x42>
 8010484:	2c02      	cmp	r4, #2
 8010486:	d848      	bhi.n	801051a <__ieee754_atan2+0x142>
 8010488:	4b30      	ldr	r3, [pc, #192]	; (801054c <__ieee754_atan2+0x174>)
 801048a:	e7f6      	b.n	801047a <__ieee754_atan2+0xa2>
 801048c:	4543      	cmp	r3, r8
 801048e:	d0e4      	beq.n	801045a <__ieee754_atan2+0x82>
 8010490:	1a9b      	subs	r3, r3, r2
 8010492:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010496:	ea4f 5223 	mov.w	r2, r3, asr #20
 801049a:	da1e      	bge.n	80104da <__ieee754_atan2+0x102>
 801049c:	2f00      	cmp	r7, #0
 801049e:	da01      	bge.n	80104a4 <__ieee754_atan2+0xcc>
 80104a0:	323c      	adds	r2, #60	; 0x3c
 80104a2:	db1e      	blt.n	80104e2 <__ieee754_atan2+0x10a>
 80104a4:	4632      	mov	r2, r6
 80104a6:	463b      	mov	r3, r7
 80104a8:	f7f0 f9d0 	bl	800084c <__aeabi_ddiv>
 80104ac:	ec41 0b10 	vmov	d0, r0, r1
 80104b0:	f001 f92e 	bl	8011710 <fabs>
 80104b4:	f000 ff8c 	bl	80113d0 <atan>
 80104b8:	ec51 0b10 	vmov	r0, r1, d0
 80104bc:	2c01      	cmp	r4, #1
 80104be:	d013      	beq.n	80104e8 <__ieee754_atan2+0x110>
 80104c0:	2c02      	cmp	r4, #2
 80104c2:	d015      	beq.n	80104f0 <__ieee754_atan2+0x118>
 80104c4:	2c00      	cmp	r4, #0
 80104c6:	d0a8      	beq.n	801041a <__ieee754_atan2+0x42>
 80104c8:	a317      	add	r3, pc, #92	; (adr r3, 8010528 <__ieee754_atan2+0x150>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef fedb 	bl	8000288 <__aeabi_dsub>
 80104d2:	a317      	add	r3, pc, #92	; (adr r3, 8010530 <__ieee754_atan2+0x158>)
 80104d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d8:	e014      	b.n	8010504 <__ieee754_atan2+0x12c>
 80104da:	a117      	add	r1, pc, #92	; (adr r1, 8010538 <__ieee754_atan2+0x160>)
 80104dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104e0:	e7ec      	b.n	80104bc <__ieee754_atan2+0xe4>
 80104e2:	2000      	movs	r0, #0
 80104e4:	2100      	movs	r1, #0
 80104e6:	e7e9      	b.n	80104bc <__ieee754_atan2+0xe4>
 80104e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104ec:	4619      	mov	r1, r3
 80104ee:	e794      	b.n	801041a <__ieee754_atan2+0x42>
 80104f0:	a30d      	add	r3, pc, #52	; (adr r3, 8010528 <__ieee754_atan2+0x150>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7ef fec7 	bl	8000288 <__aeabi_dsub>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	a10c      	add	r1, pc, #48	; (adr r1, 8010530 <__ieee754_atan2+0x158>)
 8010500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010504:	f7ef fec0 	bl	8000288 <__aeabi_dsub>
 8010508:	e787      	b.n	801041a <__ieee754_atan2+0x42>
 801050a:	a109      	add	r1, pc, #36	; (adr r1, 8010530 <__ieee754_atan2+0x158>)
 801050c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010510:	e783      	b.n	801041a <__ieee754_atan2+0x42>
 8010512:	a10b      	add	r1, pc, #44	; (adr r1, 8010540 <__ieee754_atan2+0x168>)
 8010514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010518:	e77f      	b.n	801041a <__ieee754_atan2+0x42>
 801051a:	2000      	movs	r0, #0
 801051c:	2100      	movs	r1, #0
 801051e:	e77c      	b.n	801041a <__ieee754_atan2+0x42>
 8010520:	a105      	add	r1, pc, #20	; (adr r1, 8010538 <__ieee754_atan2+0x160>)
 8010522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010526:	e778      	b.n	801041a <__ieee754_atan2+0x42>
 8010528:	33145c07 	.word	0x33145c07
 801052c:	3ca1a626 	.word	0x3ca1a626
 8010530:	54442d18 	.word	0x54442d18
 8010534:	400921fb 	.word	0x400921fb
 8010538:	54442d18 	.word	0x54442d18
 801053c:	3ff921fb 	.word	0x3ff921fb
 8010540:	54442d18 	.word	0x54442d18
 8010544:	3fe921fb 	.word	0x3fe921fb
 8010548:	080124e0 	.word	0x080124e0
 801054c:	080124f8 	.word	0x080124f8
 8010550:	54442d18 	.word	0x54442d18
 8010554:	c00921fb 	.word	0xc00921fb
 8010558:	54442d18 	.word	0x54442d18
 801055c:	bff921fb 	.word	0xbff921fb
 8010560:	7ff00000 	.word	0x7ff00000
 8010564:	00000000 	.word	0x00000000

08010568 <__ieee754_pow>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	ed2d 8b06 	vpush	{d8-d10}
 8010570:	b089      	sub	sp, #36	; 0x24
 8010572:	ed8d 1b00 	vstr	d1, [sp]
 8010576:	e9dd 2900 	ldrd	r2, r9, [sp]
 801057a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801057e:	ea58 0102 	orrs.w	r1, r8, r2
 8010582:	ec57 6b10 	vmov	r6, r7, d0
 8010586:	d115      	bne.n	80105b4 <__ieee754_pow+0x4c>
 8010588:	19b3      	adds	r3, r6, r6
 801058a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801058e:	4152      	adcs	r2, r2
 8010590:	4299      	cmp	r1, r3
 8010592:	4b89      	ldr	r3, [pc, #548]	; (80107b8 <__ieee754_pow+0x250>)
 8010594:	4193      	sbcs	r3, r2
 8010596:	f080 84d1 	bcs.w	8010f3c <__ieee754_pow+0x9d4>
 801059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059e:	4630      	mov	r0, r6
 80105a0:	4639      	mov	r1, r7
 80105a2:	f7ef fe73 	bl	800028c <__adddf3>
 80105a6:	ec41 0b10 	vmov	d0, r0, r1
 80105aa:	b009      	add	sp, #36	; 0x24
 80105ac:	ecbd 8b06 	vpop	{d8-d10}
 80105b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b4:	4b81      	ldr	r3, [pc, #516]	; (80107bc <__ieee754_pow+0x254>)
 80105b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80105ba:	429c      	cmp	r4, r3
 80105bc:	ee10 aa10 	vmov	sl, s0
 80105c0:	463d      	mov	r5, r7
 80105c2:	dc06      	bgt.n	80105d2 <__ieee754_pow+0x6a>
 80105c4:	d101      	bne.n	80105ca <__ieee754_pow+0x62>
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	d1e7      	bne.n	801059a <__ieee754_pow+0x32>
 80105ca:	4598      	cmp	r8, r3
 80105cc:	dc01      	bgt.n	80105d2 <__ieee754_pow+0x6a>
 80105ce:	d10f      	bne.n	80105f0 <__ieee754_pow+0x88>
 80105d0:	b172      	cbz	r2, 80105f0 <__ieee754_pow+0x88>
 80105d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80105d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80105da:	ea55 050a 	orrs.w	r5, r5, sl
 80105de:	d1dc      	bne.n	801059a <__ieee754_pow+0x32>
 80105e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80105e4:	18db      	adds	r3, r3, r3
 80105e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80105ea:	4152      	adcs	r2, r2
 80105ec:	429d      	cmp	r5, r3
 80105ee:	e7d0      	b.n	8010592 <__ieee754_pow+0x2a>
 80105f0:	2d00      	cmp	r5, #0
 80105f2:	da3b      	bge.n	801066c <__ieee754_pow+0x104>
 80105f4:	4b72      	ldr	r3, [pc, #456]	; (80107c0 <__ieee754_pow+0x258>)
 80105f6:	4598      	cmp	r8, r3
 80105f8:	dc51      	bgt.n	801069e <__ieee754_pow+0x136>
 80105fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80105fe:	4598      	cmp	r8, r3
 8010600:	f340 84ab 	ble.w	8010f5a <__ieee754_pow+0x9f2>
 8010604:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801060c:	2b14      	cmp	r3, #20
 801060e:	dd0f      	ble.n	8010630 <__ieee754_pow+0xc8>
 8010610:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010614:	fa22 f103 	lsr.w	r1, r2, r3
 8010618:	fa01 f303 	lsl.w	r3, r1, r3
 801061c:	4293      	cmp	r3, r2
 801061e:	f040 849c 	bne.w	8010f5a <__ieee754_pow+0x9f2>
 8010622:	f001 0101 	and.w	r1, r1, #1
 8010626:	f1c1 0302 	rsb	r3, r1, #2
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	b182      	cbz	r2, 8010650 <__ieee754_pow+0xe8>
 801062e:	e05f      	b.n	80106f0 <__ieee754_pow+0x188>
 8010630:	2a00      	cmp	r2, #0
 8010632:	d15b      	bne.n	80106ec <__ieee754_pow+0x184>
 8010634:	f1c3 0314 	rsb	r3, r3, #20
 8010638:	fa48 f103 	asr.w	r1, r8, r3
 801063c:	fa01 f303 	lsl.w	r3, r1, r3
 8010640:	4543      	cmp	r3, r8
 8010642:	f040 8487 	bne.w	8010f54 <__ieee754_pow+0x9ec>
 8010646:	f001 0101 	and.w	r1, r1, #1
 801064a:	f1c1 0302 	rsb	r3, r1, #2
 801064e:	9304      	str	r3, [sp, #16]
 8010650:	4b5c      	ldr	r3, [pc, #368]	; (80107c4 <__ieee754_pow+0x25c>)
 8010652:	4598      	cmp	r8, r3
 8010654:	d132      	bne.n	80106bc <__ieee754_pow+0x154>
 8010656:	f1b9 0f00 	cmp.w	r9, #0
 801065a:	f280 8477 	bge.w	8010f4c <__ieee754_pow+0x9e4>
 801065e:	4959      	ldr	r1, [pc, #356]	; (80107c4 <__ieee754_pow+0x25c>)
 8010660:	4632      	mov	r2, r6
 8010662:	463b      	mov	r3, r7
 8010664:	2000      	movs	r0, #0
 8010666:	f7f0 f8f1 	bl	800084c <__aeabi_ddiv>
 801066a:	e79c      	b.n	80105a6 <__ieee754_pow+0x3e>
 801066c:	2300      	movs	r3, #0
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	2a00      	cmp	r2, #0
 8010672:	d13d      	bne.n	80106f0 <__ieee754_pow+0x188>
 8010674:	4b51      	ldr	r3, [pc, #324]	; (80107bc <__ieee754_pow+0x254>)
 8010676:	4598      	cmp	r8, r3
 8010678:	d1ea      	bne.n	8010650 <__ieee754_pow+0xe8>
 801067a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801067e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010682:	ea53 030a 	orrs.w	r3, r3, sl
 8010686:	f000 8459 	beq.w	8010f3c <__ieee754_pow+0x9d4>
 801068a:	4b4f      	ldr	r3, [pc, #316]	; (80107c8 <__ieee754_pow+0x260>)
 801068c:	429c      	cmp	r4, r3
 801068e:	dd08      	ble.n	80106a2 <__ieee754_pow+0x13a>
 8010690:	f1b9 0f00 	cmp.w	r9, #0
 8010694:	f2c0 8456 	blt.w	8010f44 <__ieee754_pow+0x9dc>
 8010698:	e9dd 0100 	ldrd	r0, r1, [sp]
 801069c:	e783      	b.n	80105a6 <__ieee754_pow+0x3e>
 801069e:	2302      	movs	r3, #2
 80106a0:	e7e5      	b.n	801066e <__ieee754_pow+0x106>
 80106a2:	f1b9 0f00 	cmp.w	r9, #0
 80106a6:	f04f 0000 	mov.w	r0, #0
 80106aa:	f04f 0100 	mov.w	r1, #0
 80106ae:	f6bf af7a 	bge.w	80105a6 <__ieee754_pow+0x3e>
 80106b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80106b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80106ba:	e774      	b.n	80105a6 <__ieee754_pow+0x3e>
 80106bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80106c0:	d106      	bne.n	80106d0 <__ieee754_pow+0x168>
 80106c2:	4632      	mov	r2, r6
 80106c4:	463b      	mov	r3, r7
 80106c6:	4630      	mov	r0, r6
 80106c8:	4639      	mov	r1, r7
 80106ca:	f7ef ff95 	bl	80005f8 <__aeabi_dmul>
 80106ce:	e76a      	b.n	80105a6 <__ieee754_pow+0x3e>
 80106d0:	4b3e      	ldr	r3, [pc, #248]	; (80107cc <__ieee754_pow+0x264>)
 80106d2:	4599      	cmp	r9, r3
 80106d4:	d10c      	bne.n	80106f0 <__ieee754_pow+0x188>
 80106d6:	2d00      	cmp	r5, #0
 80106d8:	db0a      	blt.n	80106f0 <__ieee754_pow+0x188>
 80106da:	ec47 6b10 	vmov	d0, r6, r7
 80106de:	b009      	add	sp, #36	; 0x24
 80106e0:	ecbd 8b06 	vpop	{d8-d10}
 80106e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e8:	f7ff bc12 	b.w	800ff10 <__ieee754_sqrt>
 80106ec:	2300      	movs	r3, #0
 80106ee:	9304      	str	r3, [sp, #16]
 80106f0:	ec47 6b10 	vmov	d0, r6, r7
 80106f4:	f001 f80c 	bl	8011710 <fabs>
 80106f8:	ec51 0b10 	vmov	r0, r1, d0
 80106fc:	f1ba 0f00 	cmp.w	sl, #0
 8010700:	d129      	bne.n	8010756 <__ieee754_pow+0x1ee>
 8010702:	b124      	cbz	r4, 801070e <__ieee754_pow+0x1a6>
 8010704:	4b2f      	ldr	r3, [pc, #188]	; (80107c4 <__ieee754_pow+0x25c>)
 8010706:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801070a:	429a      	cmp	r2, r3
 801070c:	d123      	bne.n	8010756 <__ieee754_pow+0x1ee>
 801070e:	f1b9 0f00 	cmp.w	r9, #0
 8010712:	da05      	bge.n	8010720 <__ieee754_pow+0x1b8>
 8010714:	4602      	mov	r2, r0
 8010716:	460b      	mov	r3, r1
 8010718:	2000      	movs	r0, #0
 801071a:	492a      	ldr	r1, [pc, #168]	; (80107c4 <__ieee754_pow+0x25c>)
 801071c:	f7f0 f896 	bl	800084c <__aeabi_ddiv>
 8010720:	2d00      	cmp	r5, #0
 8010722:	f6bf af40 	bge.w	80105a6 <__ieee754_pow+0x3e>
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801072c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010730:	431c      	orrs	r4, r3
 8010732:	d108      	bne.n	8010746 <__ieee754_pow+0x1de>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4610      	mov	r0, r2
 801073a:	4619      	mov	r1, r3
 801073c:	f7ef fda4 	bl	8000288 <__aeabi_dsub>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	e78f      	b.n	8010666 <__ieee754_pow+0xfe>
 8010746:	9b04      	ldr	r3, [sp, #16]
 8010748:	2b01      	cmp	r3, #1
 801074a:	f47f af2c 	bne.w	80105a6 <__ieee754_pow+0x3e>
 801074e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010752:	4619      	mov	r1, r3
 8010754:	e727      	b.n	80105a6 <__ieee754_pow+0x3e>
 8010756:	0feb      	lsrs	r3, r5, #31
 8010758:	3b01      	subs	r3, #1
 801075a:	9306      	str	r3, [sp, #24]
 801075c:	9a06      	ldr	r2, [sp, #24]
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	4313      	orrs	r3, r2
 8010762:	d102      	bne.n	801076a <__ieee754_pow+0x202>
 8010764:	4632      	mov	r2, r6
 8010766:	463b      	mov	r3, r7
 8010768:	e7e6      	b.n	8010738 <__ieee754_pow+0x1d0>
 801076a:	4b19      	ldr	r3, [pc, #100]	; (80107d0 <__ieee754_pow+0x268>)
 801076c:	4598      	cmp	r8, r3
 801076e:	f340 80fb 	ble.w	8010968 <__ieee754_pow+0x400>
 8010772:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010776:	4598      	cmp	r8, r3
 8010778:	4b13      	ldr	r3, [pc, #76]	; (80107c8 <__ieee754_pow+0x260>)
 801077a:	dd0c      	ble.n	8010796 <__ieee754_pow+0x22e>
 801077c:	429c      	cmp	r4, r3
 801077e:	dc0f      	bgt.n	80107a0 <__ieee754_pow+0x238>
 8010780:	f1b9 0f00 	cmp.w	r9, #0
 8010784:	da0f      	bge.n	80107a6 <__ieee754_pow+0x23e>
 8010786:	2000      	movs	r0, #0
 8010788:	b009      	add	sp, #36	; 0x24
 801078a:	ecbd 8b06 	vpop	{d8-d10}
 801078e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010792:	f001 b86e 	b.w	8011872 <__math_oflow>
 8010796:	429c      	cmp	r4, r3
 8010798:	dbf2      	blt.n	8010780 <__ieee754_pow+0x218>
 801079a:	4b0a      	ldr	r3, [pc, #40]	; (80107c4 <__ieee754_pow+0x25c>)
 801079c:	429c      	cmp	r4, r3
 801079e:	dd19      	ble.n	80107d4 <__ieee754_pow+0x26c>
 80107a0:	f1b9 0f00 	cmp.w	r9, #0
 80107a4:	dcef      	bgt.n	8010786 <__ieee754_pow+0x21e>
 80107a6:	2000      	movs	r0, #0
 80107a8:	b009      	add	sp, #36	; 0x24
 80107aa:	ecbd 8b06 	vpop	{d8-d10}
 80107ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b2:	f001 b855 	b.w	8011860 <__math_uflow>
 80107b6:	bf00      	nop
 80107b8:	fff00000 	.word	0xfff00000
 80107bc:	7ff00000 	.word	0x7ff00000
 80107c0:	433fffff 	.word	0x433fffff
 80107c4:	3ff00000 	.word	0x3ff00000
 80107c8:	3fefffff 	.word	0x3fefffff
 80107cc:	3fe00000 	.word	0x3fe00000
 80107d0:	41e00000 	.word	0x41e00000
 80107d4:	4b60      	ldr	r3, [pc, #384]	; (8010958 <__ieee754_pow+0x3f0>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	f7ef fd56 	bl	8000288 <__aeabi_dsub>
 80107dc:	a354      	add	r3, pc, #336	; (adr r3, 8010930 <__ieee754_pow+0x3c8>)
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	4604      	mov	r4, r0
 80107e4:	460d      	mov	r5, r1
 80107e6:	f7ef ff07 	bl	80005f8 <__aeabi_dmul>
 80107ea:	a353      	add	r3, pc, #332	; (adr r3, 8010938 <__ieee754_pow+0x3d0>)
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	4606      	mov	r6, r0
 80107f2:	460f      	mov	r7, r1
 80107f4:	4620      	mov	r0, r4
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7ef fefe 	bl	80005f8 <__aeabi_dmul>
 80107fc:	4b57      	ldr	r3, [pc, #348]	; (801095c <__ieee754_pow+0x3f4>)
 80107fe:	4682      	mov	sl, r0
 8010800:	468b      	mov	fp, r1
 8010802:	2200      	movs	r2, #0
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7ef fef6 	bl	80005f8 <__aeabi_dmul>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	a14b      	add	r1, pc, #300	; (adr r1, 8010940 <__ieee754_pow+0x3d8>)
 8010812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010816:	f7ef fd37 	bl	8000288 <__aeabi_dsub>
 801081a:	4622      	mov	r2, r4
 801081c:	462b      	mov	r3, r5
 801081e:	f7ef feeb 	bl	80005f8 <__aeabi_dmul>
 8010822:	4602      	mov	r2, r0
 8010824:	460b      	mov	r3, r1
 8010826:	2000      	movs	r0, #0
 8010828:	494d      	ldr	r1, [pc, #308]	; (8010960 <__ieee754_pow+0x3f8>)
 801082a:	f7ef fd2d 	bl	8000288 <__aeabi_dsub>
 801082e:	4622      	mov	r2, r4
 8010830:	4680      	mov	r8, r0
 8010832:	4689      	mov	r9, r1
 8010834:	462b      	mov	r3, r5
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7ef fedd 	bl	80005f8 <__aeabi_dmul>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	4640      	mov	r0, r8
 8010844:	4649      	mov	r1, r9
 8010846:	f7ef fed7 	bl	80005f8 <__aeabi_dmul>
 801084a:	a33f      	add	r3, pc, #252	; (adr r3, 8010948 <__ieee754_pow+0x3e0>)
 801084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010850:	f7ef fed2 	bl	80005f8 <__aeabi_dmul>
 8010854:	4602      	mov	r2, r0
 8010856:	460b      	mov	r3, r1
 8010858:	4650      	mov	r0, sl
 801085a:	4659      	mov	r1, fp
 801085c:	f7ef fd14 	bl	8000288 <__aeabi_dsub>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	4680      	mov	r8, r0
 8010866:	4689      	mov	r9, r1
 8010868:	4630      	mov	r0, r6
 801086a:	4639      	mov	r1, r7
 801086c:	f7ef fd0e 	bl	800028c <__adddf3>
 8010870:	2000      	movs	r0, #0
 8010872:	4632      	mov	r2, r6
 8010874:	463b      	mov	r3, r7
 8010876:	4604      	mov	r4, r0
 8010878:	460d      	mov	r5, r1
 801087a:	f7ef fd05 	bl	8000288 <__aeabi_dsub>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	4640      	mov	r0, r8
 8010884:	4649      	mov	r1, r9
 8010886:	f7ef fcff 	bl	8000288 <__aeabi_dsub>
 801088a:	9b04      	ldr	r3, [sp, #16]
 801088c:	9a06      	ldr	r2, [sp, #24]
 801088e:	3b01      	subs	r3, #1
 8010890:	4313      	orrs	r3, r2
 8010892:	4682      	mov	sl, r0
 8010894:	468b      	mov	fp, r1
 8010896:	f040 81e7 	bne.w	8010c68 <__ieee754_pow+0x700>
 801089a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010950 <__ieee754_pow+0x3e8>
 801089e:	eeb0 8a47 	vmov.f32	s16, s14
 80108a2:	eef0 8a67 	vmov.f32	s17, s15
 80108a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80108aa:	2600      	movs	r6, #0
 80108ac:	4632      	mov	r2, r6
 80108ae:	463b      	mov	r3, r7
 80108b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108b4:	f7ef fce8 	bl	8000288 <__aeabi_dsub>
 80108b8:	4622      	mov	r2, r4
 80108ba:	462b      	mov	r3, r5
 80108bc:	f7ef fe9c 	bl	80005f8 <__aeabi_dmul>
 80108c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108c4:	4680      	mov	r8, r0
 80108c6:	4689      	mov	r9, r1
 80108c8:	4650      	mov	r0, sl
 80108ca:	4659      	mov	r1, fp
 80108cc:	f7ef fe94 	bl	80005f8 <__aeabi_dmul>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	4640      	mov	r0, r8
 80108d6:	4649      	mov	r1, r9
 80108d8:	f7ef fcd8 	bl	800028c <__adddf3>
 80108dc:	4632      	mov	r2, r6
 80108de:	463b      	mov	r3, r7
 80108e0:	4680      	mov	r8, r0
 80108e2:	4689      	mov	r9, r1
 80108e4:	4620      	mov	r0, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	f7ef fe86 	bl	80005f8 <__aeabi_dmul>
 80108ec:	460b      	mov	r3, r1
 80108ee:	4604      	mov	r4, r0
 80108f0:	460d      	mov	r5, r1
 80108f2:	4602      	mov	r2, r0
 80108f4:	4649      	mov	r1, r9
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7ef fcc8 	bl	800028c <__adddf3>
 80108fc:	4b19      	ldr	r3, [pc, #100]	; (8010964 <__ieee754_pow+0x3fc>)
 80108fe:	4299      	cmp	r1, r3
 8010900:	ec45 4b19 	vmov	d9, r4, r5
 8010904:	4606      	mov	r6, r0
 8010906:	460f      	mov	r7, r1
 8010908:	468b      	mov	fp, r1
 801090a:	f340 82f0 	ble.w	8010eee <__ieee754_pow+0x986>
 801090e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010916:	4303      	orrs	r3, r0
 8010918:	f000 81e4 	beq.w	8010ce4 <__ieee754_pow+0x77c>
 801091c:	ec51 0b18 	vmov	r0, r1, d8
 8010920:	2200      	movs	r2, #0
 8010922:	2300      	movs	r3, #0
 8010924:	f7f0 f8da 	bl	8000adc <__aeabi_dcmplt>
 8010928:	3800      	subs	r0, #0
 801092a:	bf18      	it	ne
 801092c:	2001      	movne	r0, #1
 801092e:	e72b      	b.n	8010788 <__ieee754_pow+0x220>
 8010930:	60000000 	.word	0x60000000
 8010934:	3ff71547 	.word	0x3ff71547
 8010938:	f85ddf44 	.word	0xf85ddf44
 801093c:	3e54ae0b 	.word	0x3e54ae0b
 8010940:	55555555 	.word	0x55555555
 8010944:	3fd55555 	.word	0x3fd55555
 8010948:	652b82fe 	.word	0x652b82fe
 801094c:	3ff71547 	.word	0x3ff71547
 8010950:	00000000 	.word	0x00000000
 8010954:	bff00000 	.word	0xbff00000
 8010958:	3ff00000 	.word	0x3ff00000
 801095c:	3fd00000 	.word	0x3fd00000
 8010960:	3fe00000 	.word	0x3fe00000
 8010964:	408fffff 	.word	0x408fffff
 8010968:	4bd5      	ldr	r3, [pc, #852]	; (8010cc0 <__ieee754_pow+0x758>)
 801096a:	402b      	ands	r3, r5
 801096c:	2200      	movs	r2, #0
 801096e:	b92b      	cbnz	r3, 801097c <__ieee754_pow+0x414>
 8010970:	4bd4      	ldr	r3, [pc, #848]	; (8010cc4 <__ieee754_pow+0x75c>)
 8010972:	f7ef fe41 	bl	80005f8 <__aeabi_dmul>
 8010976:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801097a:	460c      	mov	r4, r1
 801097c:	1523      	asrs	r3, r4, #20
 801097e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010982:	4413      	add	r3, r2
 8010984:	9305      	str	r3, [sp, #20]
 8010986:	4bd0      	ldr	r3, [pc, #832]	; (8010cc8 <__ieee754_pow+0x760>)
 8010988:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801098c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010990:	429c      	cmp	r4, r3
 8010992:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010996:	dd08      	ble.n	80109aa <__ieee754_pow+0x442>
 8010998:	4bcc      	ldr	r3, [pc, #816]	; (8010ccc <__ieee754_pow+0x764>)
 801099a:	429c      	cmp	r4, r3
 801099c:	f340 8162 	ble.w	8010c64 <__ieee754_pow+0x6fc>
 80109a0:	9b05      	ldr	r3, [sp, #20]
 80109a2:	3301      	adds	r3, #1
 80109a4:	9305      	str	r3, [sp, #20]
 80109a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80109aa:	2400      	movs	r4, #0
 80109ac:	00e3      	lsls	r3, r4, #3
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	4bc7      	ldr	r3, [pc, #796]	; (8010cd0 <__ieee754_pow+0x768>)
 80109b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109b6:	ed93 7b00 	vldr	d7, [r3]
 80109ba:	4629      	mov	r1, r5
 80109bc:	ec53 2b17 	vmov	r2, r3, d7
 80109c0:	eeb0 9a47 	vmov.f32	s18, s14
 80109c4:	eef0 9a67 	vmov.f32	s19, s15
 80109c8:	4682      	mov	sl, r0
 80109ca:	f7ef fc5d 	bl	8000288 <__aeabi_dsub>
 80109ce:	4652      	mov	r2, sl
 80109d0:	4606      	mov	r6, r0
 80109d2:	460f      	mov	r7, r1
 80109d4:	462b      	mov	r3, r5
 80109d6:	ec51 0b19 	vmov	r0, r1, d9
 80109da:	f7ef fc57 	bl	800028c <__adddf3>
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	2000      	movs	r0, #0
 80109e4:	49bb      	ldr	r1, [pc, #748]	; (8010cd4 <__ieee754_pow+0x76c>)
 80109e6:	f7ef ff31 	bl	800084c <__aeabi_ddiv>
 80109ea:	ec41 0b1a 	vmov	d10, r0, r1
 80109ee:	4602      	mov	r2, r0
 80109f0:	460b      	mov	r3, r1
 80109f2:	4630      	mov	r0, r6
 80109f4:	4639      	mov	r1, r7
 80109f6:	f7ef fdff 	bl	80005f8 <__aeabi_dmul>
 80109fa:	2300      	movs	r3, #0
 80109fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a00:	9302      	str	r3, [sp, #8]
 8010a02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010a06:	46ab      	mov	fp, r5
 8010a08:	106d      	asrs	r5, r5, #1
 8010a0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010a0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010a12:	ec41 0b18 	vmov	d8, r0, r1
 8010a16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	4614      	mov	r4, r2
 8010a22:	461d      	mov	r5, r3
 8010a24:	f7ef fde8 	bl	80005f8 <__aeabi_dmul>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	4639      	mov	r1, r7
 8010a30:	f7ef fc2a 	bl	8000288 <__aeabi_dsub>
 8010a34:	ec53 2b19 	vmov	r2, r3, d9
 8010a38:	4606      	mov	r6, r0
 8010a3a:	460f      	mov	r7, r1
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	4629      	mov	r1, r5
 8010a40:	f7ef fc22 	bl	8000288 <__aeabi_dsub>
 8010a44:	4602      	mov	r2, r0
 8010a46:	460b      	mov	r3, r1
 8010a48:	4650      	mov	r0, sl
 8010a4a:	4659      	mov	r1, fp
 8010a4c:	f7ef fc1c 	bl	8000288 <__aeabi_dsub>
 8010a50:	4642      	mov	r2, r8
 8010a52:	464b      	mov	r3, r9
 8010a54:	f7ef fdd0 	bl	80005f8 <__aeabi_dmul>
 8010a58:	4602      	mov	r2, r0
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	4639      	mov	r1, r7
 8010a60:	f7ef fc12 	bl	8000288 <__aeabi_dsub>
 8010a64:	ec53 2b1a 	vmov	r2, r3, d10
 8010a68:	f7ef fdc6 	bl	80005f8 <__aeabi_dmul>
 8010a6c:	ec53 2b18 	vmov	r2, r3, d8
 8010a70:	ec41 0b19 	vmov	d9, r0, r1
 8010a74:	ec51 0b18 	vmov	r0, r1, d8
 8010a78:	f7ef fdbe 	bl	80005f8 <__aeabi_dmul>
 8010a7c:	a37c      	add	r3, pc, #496	; (adr r3, 8010c70 <__ieee754_pow+0x708>)
 8010a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a82:	4604      	mov	r4, r0
 8010a84:	460d      	mov	r5, r1
 8010a86:	f7ef fdb7 	bl	80005f8 <__aeabi_dmul>
 8010a8a:	a37b      	add	r3, pc, #492	; (adr r3, 8010c78 <__ieee754_pow+0x710>)
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	f7ef fbfc 	bl	800028c <__adddf3>
 8010a94:	4622      	mov	r2, r4
 8010a96:	462b      	mov	r3, r5
 8010a98:	f7ef fdae 	bl	80005f8 <__aeabi_dmul>
 8010a9c:	a378      	add	r3, pc, #480	; (adr r3, 8010c80 <__ieee754_pow+0x718>)
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	f7ef fbf3 	bl	800028c <__adddf3>
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	462b      	mov	r3, r5
 8010aaa:	f7ef fda5 	bl	80005f8 <__aeabi_dmul>
 8010aae:	a376      	add	r3, pc, #472	; (adr r3, 8010c88 <__ieee754_pow+0x720>)
 8010ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab4:	f7ef fbea 	bl	800028c <__adddf3>
 8010ab8:	4622      	mov	r2, r4
 8010aba:	462b      	mov	r3, r5
 8010abc:	f7ef fd9c 	bl	80005f8 <__aeabi_dmul>
 8010ac0:	a373      	add	r3, pc, #460	; (adr r3, 8010c90 <__ieee754_pow+0x728>)
 8010ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac6:	f7ef fbe1 	bl	800028c <__adddf3>
 8010aca:	4622      	mov	r2, r4
 8010acc:	462b      	mov	r3, r5
 8010ace:	f7ef fd93 	bl	80005f8 <__aeabi_dmul>
 8010ad2:	a371      	add	r3, pc, #452	; (adr r3, 8010c98 <__ieee754_pow+0x730>)
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	f7ef fbd8 	bl	800028c <__adddf3>
 8010adc:	4622      	mov	r2, r4
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	462b      	mov	r3, r5
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	4629      	mov	r1, r5
 8010ae8:	f7ef fd86 	bl	80005f8 <__aeabi_dmul>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	4630      	mov	r0, r6
 8010af2:	4639      	mov	r1, r7
 8010af4:	f7ef fd80 	bl	80005f8 <__aeabi_dmul>
 8010af8:	4642      	mov	r2, r8
 8010afa:	4604      	mov	r4, r0
 8010afc:	460d      	mov	r5, r1
 8010afe:	464b      	mov	r3, r9
 8010b00:	ec51 0b18 	vmov	r0, r1, d8
 8010b04:	f7ef fbc2 	bl	800028c <__adddf3>
 8010b08:	ec53 2b19 	vmov	r2, r3, d9
 8010b0c:	f7ef fd74 	bl	80005f8 <__aeabi_dmul>
 8010b10:	4622      	mov	r2, r4
 8010b12:	462b      	mov	r3, r5
 8010b14:	f7ef fbba 	bl	800028c <__adddf3>
 8010b18:	4642      	mov	r2, r8
 8010b1a:	4682      	mov	sl, r0
 8010b1c:	468b      	mov	fp, r1
 8010b1e:	464b      	mov	r3, r9
 8010b20:	4640      	mov	r0, r8
 8010b22:	4649      	mov	r1, r9
 8010b24:	f7ef fd68 	bl	80005f8 <__aeabi_dmul>
 8010b28:	4b6b      	ldr	r3, [pc, #428]	; (8010cd8 <__ieee754_pow+0x770>)
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	4606      	mov	r6, r0
 8010b2e:	460f      	mov	r7, r1
 8010b30:	f7ef fbac 	bl	800028c <__adddf3>
 8010b34:	4652      	mov	r2, sl
 8010b36:	465b      	mov	r3, fp
 8010b38:	f7ef fba8 	bl	800028c <__adddf3>
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	4604      	mov	r4, r0
 8010b40:	460d      	mov	r5, r1
 8010b42:	4602      	mov	r2, r0
 8010b44:	460b      	mov	r3, r1
 8010b46:	4640      	mov	r0, r8
 8010b48:	4649      	mov	r1, r9
 8010b4a:	f7ef fd55 	bl	80005f8 <__aeabi_dmul>
 8010b4e:	4b62      	ldr	r3, [pc, #392]	; (8010cd8 <__ieee754_pow+0x770>)
 8010b50:	4680      	mov	r8, r0
 8010b52:	4689      	mov	r9, r1
 8010b54:	2200      	movs	r2, #0
 8010b56:	4620      	mov	r0, r4
 8010b58:	4629      	mov	r1, r5
 8010b5a:	f7ef fb95 	bl	8000288 <__aeabi_dsub>
 8010b5e:	4632      	mov	r2, r6
 8010b60:	463b      	mov	r3, r7
 8010b62:	f7ef fb91 	bl	8000288 <__aeabi_dsub>
 8010b66:	4602      	mov	r2, r0
 8010b68:	460b      	mov	r3, r1
 8010b6a:	4650      	mov	r0, sl
 8010b6c:	4659      	mov	r1, fp
 8010b6e:	f7ef fb8b 	bl	8000288 <__aeabi_dsub>
 8010b72:	ec53 2b18 	vmov	r2, r3, d8
 8010b76:	f7ef fd3f 	bl	80005f8 <__aeabi_dmul>
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	460f      	mov	r7, r1
 8010b80:	462b      	mov	r3, r5
 8010b82:	ec51 0b19 	vmov	r0, r1, d9
 8010b86:	f7ef fd37 	bl	80005f8 <__aeabi_dmul>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4630      	mov	r0, r6
 8010b90:	4639      	mov	r1, r7
 8010b92:	f7ef fb7b 	bl	800028c <__adddf3>
 8010b96:	4606      	mov	r6, r0
 8010b98:	460f      	mov	r7, r1
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	f7ef fb73 	bl	800028c <__adddf3>
 8010ba6:	a33e      	add	r3, pc, #248	; (adr r3, 8010ca0 <__ieee754_pow+0x738>)
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	2000      	movs	r0, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	f7ef fd21 	bl	80005f8 <__aeabi_dmul>
 8010bb6:	4642      	mov	r2, r8
 8010bb8:	ec41 0b18 	vmov	d8, r0, r1
 8010bbc:	464b      	mov	r3, r9
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	f7ef fb61 	bl	8000288 <__aeabi_dsub>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	f7ef fb5b 	bl	8000288 <__aeabi_dsub>
 8010bd2:	a335      	add	r3, pc, #212	; (adr r3, 8010ca8 <__ieee754_pow+0x740>)
 8010bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd8:	f7ef fd0e 	bl	80005f8 <__aeabi_dmul>
 8010bdc:	a334      	add	r3, pc, #208	; (adr r3, 8010cb0 <__ieee754_pow+0x748>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	4606      	mov	r6, r0
 8010be4:	460f      	mov	r7, r1
 8010be6:	4620      	mov	r0, r4
 8010be8:	4629      	mov	r1, r5
 8010bea:	f7ef fd05 	bl	80005f8 <__aeabi_dmul>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	f7ef fb49 	bl	800028c <__adddf3>
 8010bfa:	9a07      	ldr	r2, [sp, #28]
 8010bfc:	4b37      	ldr	r3, [pc, #220]	; (8010cdc <__ieee754_pow+0x774>)
 8010bfe:	4413      	add	r3, r2
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fb42 	bl	800028c <__adddf3>
 8010c08:	4682      	mov	sl, r0
 8010c0a:	9805      	ldr	r0, [sp, #20]
 8010c0c:	468b      	mov	fp, r1
 8010c0e:	f7ef fc89 	bl	8000524 <__aeabi_i2d>
 8010c12:	9a07      	ldr	r2, [sp, #28]
 8010c14:	4b32      	ldr	r3, [pc, #200]	; (8010ce0 <__ieee754_pow+0x778>)
 8010c16:	4413      	add	r3, r2
 8010c18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	460f      	mov	r7, r1
 8010c20:	4652      	mov	r2, sl
 8010c22:	465b      	mov	r3, fp
 8010c24:	ec51 0b18 	vmov	r0, r1, d8
 8010c28:	f7ef fb30 	bl	800028c <__adddf3>
 8010c2c:	4642      	mov	r2, r8
 8010c2e:	464b      	mov	r3, r9
 8010c30:	f7ef fb2c 	bl	800028c <__adddf3>
 8010c34:	4632      	mov	r2, r6
 8010c36:	463b      	mov	r3, r7
 8010c38:	f7ef fb28 	bl	800028c <__adddf3>
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	4632      	mov	r2, r6
 8010c40:	463b      	mov	r3, r7
 8010c42:	4604      	mov	r4, r0
 8010c44:	460d      	mov	r5, r1
 8010c46:	f7ef fb1f 	bl	8000288 <__aeabi_dsub>
 8010c4a:	4642      	mov	r2, r8
 8010c4c:	464b      	mov	r3, r9
 8010c4e:	f7ef fb1b 	bl	8000288 <__aeabi_dsub>
 8010c52:	ec53 2b18 	vmov	r2, r3, d8
 8010c56:	f7ef fb17 	bl	8000288 <__aeabi_dsub>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4650      	mov	r0, sl
 8010c60:	4659      	mov	r1, fp
 8010c62:	e610      	b.n	8010886 <__ieee754_pow+0x31e>
 8010c64:	2401      	movs	r4, #1
 8010c66:	e6a1      	b.n	80109ac <__ieee754_pow+0x444>
 8010c68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010cb8 <__ieee754_pow+0x750>
 8010c6c:	e617      	b.n	801089e <__ieee754_pow+0x336>
 8010c6e:	bf00      	nop
 8010c70:	4a454eef 	.word	0x4a454eef
 8010c74:	3fca7e28 	.word	0x3fca7e28
 8010c78:	93c9db65 	.word	0x93c9db65
 8010c7c:	3fcd864a 	.word	0x3fcd864a
 8010c80:	a91d4101 	.word	0xa91d4101
 8010c84:	3fd17460 	.word	0x3fd17460
 8010c88:	518f264d 	.word	0x518f264d
 8010c8c:	3fd55555 	.word	0x3fd55555
 8010c90:	db6fabff 	.word	0xdb6fabff
 8010c94:	3fdb6db6 	.word	0x3fdb6db6
 8010c98:	33333303 	.word	0x33333303
 8010c9c:	3fe33333 	.word	0x3fe33333
 8010ca0:	e0000000 	.word	0xe0000000
 8010ca4:	3feec709 	.word	0x3feec709
 8010ca8:	dc3a03fd 	.word	0xdc3a03fd
 8010cac:	3feec709 	.word	0x3feec709
 8010cb0:	145b01f5 	.word	0x145b01f5
 8010cb4:	be3e2fe0 	.word	0xbe3e2fe0
 8010cb8:	00000000 	.word	0x00000000
 8010cbc:	3ff00000 	.word	0x3ff00000
 8010cc0:	7ff00000 	.word	0x7ff00000
 8010cc4:	43400000 	.word	0x43400000
 8010cc8:	0003988e 	.word	0x0003988e
 8010ccc:	000bb679 	.word	0x000bb679
 8010cd0:	08012510 	.word	0x08012510
 8010cd4:	3ff00000 	.word	0x3ff00000
 8010cd8:	40080000 	.word	0x40080000
 8010cdc:	08012530 	.word	0x08012530
 8010ce0:	08012520 	.word	0x08012520
 8010ce4:	a3b3      	add	r3, pc, #716	; (adr r3, 8010fb4 <__ieee754_pow+0xa4c>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	4640      	mov	r0, r8
 8010cec:	4649      	mov	r1, r9
 8010cee:	f7ef facd 	bl	800028c <__adddf3>
 8010cf2:	4622      	mov	r2, r4
 8010cf4:	ec41 0b1a 	vmov	d10, r0, r1
 8010cf8:	462b      	mov	r3, r5
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	f7ef fac3 	bl	8000288 <__aeabi_dsub>
 8010d02:	4602      	mov	r2, r0
 8010d04:	460b      	mov	r3, r1
 8010d06:	ec51 0b1a 	vmov	r0, r1, d10
 8010d0a:	f7ef ff05 	bl	8000b18 <__aeabi_dcmpgt>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	f47f ae04 	bne.w	801091c <__ieee754_pow+0x3b4>
 8010d14:	4aa2      	ldr	r2, [pc, #648]	; (8010fa0 <__ieee754_pow+0xa38>)
 8010d16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	f340 8107 	ble.w	8010f2e <__ieee754_pow+0x9c6>
 8010d20:	151b      	asrs	r3, r3, #20
 8010d22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010d26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010d2a:	fa4a fa03 	asr.w	sl, sl, r3
 8010d2e:	44da      	add	sl, fp
 8010d30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010d34:	489b      	ldr	r0, [pc, #620]	; (8010fa4 <__ieee754_pow+0xa3c>)
 8010d36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010d3a:	4108      	asrs	r0, r1
 8010d3c:	ea00 030a 	and.w	r3, r0, sl
 8010d40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010d44:	f1c1 0114 	rsb	r1, r1, #20
 8010d48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010d4c:	fa4a fa01 	asr.w	sl, sl, r1
 8010d50:	f1bb 0f00 	cmp.w	fp, #0
 8010d54:	f04f 0200 	mov.w	r2, #0
 8010d58:	4620      	mov	r0, r4
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	bfb8      	it	lt
 8010d5e:	f1ca 0a00 	rsblt	sl, sl, #0
 8010d62:	f7ef fa91 	bl	8000288 <__aeabi_dsub>
 8010d66:	ec41 0b19 	vmov	d9, r0, r1
 8010d6a:	4642      	mov	r2, r8
 8010d6c:	464b      	mov	r3, r9
 8010d6e:	ec51 0b19 	vmov	r0, r1, d9
 8010d72:	f7ef fa8b 	bl	800028c <__adddf3>
 8010d76:	a37a      	add	r3, pc, #488	; (adr r3, 8010f60 <__ieee754_pow+0x9f8>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460d      	mov	r5, r1
 8010d82:	f7ef fc39 	bl	80005f8 <__aeabi_dmul>
 8010d86:	ec53 2b19 	vmov	r2, r3, d9
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	460f      	mov	r7, r1
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef fa79 	bl	8000288 <__aeabi_dsub>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	4649      	mov	r1, r9
 8010d9e:	f7ef fa73 	bl	8000288 <__aeabi_dsub>
 8010da2:	a371      	add	r3, pc, #452	; (adr r3, 8010f68 <__ieee754_pow+0xa00>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	f7ef fc26 	bl	80005f8 <__aeabi_dmul>
 8010dac:	a370      	add	r3, pc, #448	; (adr r3, 8010f70 <__ieee754_pow+0xa08>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	4680      	mov	r8, r0
 8010db4:	4689      	mov	r9, r1
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fc1d 	bl	80005f8 <__aeabi_dmul>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	f7ef fa61 	bl	800028c <__adddf3>
 8010dca:	4604      	mov	r4, r0
 8010dcc:	460d      	mov	r5, r1
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	f7ef fa59 	bl	800028c <__adddf3>
 8010dda:	4632      	mov	r2, r6
 8010ddc:	463b      	mov	r3, r7
 8010dde:	4680      	mov	r8, r0
 8010de0:	4689      	mov	r9, r1
 8010de2:	f7ef fa51 	bl	8000288 <__aeabi_dsub>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	4620      	mov	r0, r4
 8010dec:	4629      	mov	r1, r5
 8010dee:	f7ef fa4b 	bl	8000288 <__aeabi_dsub>
 8010df2:	4642      	mov	r2, r8
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	464b      	mov	r3, r9
 8010dfa:	4640      	mov	r0, r8
 8010dfc:	4649      	mov	r1, r9
 8010dfe:	f7ef fbfb 	bl	80005f8 <__aeabi_dmul>
 8010e02:	a35d      	add	r3, pc, #372	; (adr r3, 8010f78 <__ieee754_pow+0xa10>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	4604      	mov	r4, r0
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	f7ef fbf4 	bl	80005f8 <__aeabi_dmul>
 8010e10:	a35b      	add	r3, pc, #364	; (adr r3, 8010f80 <__ieee754_pow+0xa18>)
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	f7ef fa37 	bl	8000288 <__aeabi_dsub>
 8010e1a:	4622      	mov	r2, r4
 8010e1c:	462b      	mov	r3, r5
 8010e1e:	f7ef fbeb 	bl	80005f8 <__aeabi_dmul>
 8010e22:	a359      	add	r3, pc, #356	; (adr r3, 8010f88 <__ieee754_pow+0xa20>)
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	f7ef fa30 	bl	800028c <__adddf3>
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	462b      	mov	r3, r5
 8010e30:	f7ef fbe2 	bl	80005f8 <__aeabi_dmul>
 8010e34:	a356      	add	r3, pc, #344	; (adr r3, 8010f90 <__ieee754_pow+0xa28>)
 8010e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3a:	f7ef fa25 	bl	8000288 <__aeabi_dsub>
 8010e3e:	4622      	mov	r2, r4
 8010e40:	462b      	mov	r3, r5
 8010e42:	f7ef fbd9 	bl	80005f8 <__aeabi_dmul>
 8010e46:	a354      	add	r3, pc, #336	; (adr r3, 8010f98 <__ieee754_pow+0xa30>)
 8010e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4c:	f7ef fa1e 	bl	800028c <__adddf3>
 8010e50:	4622      	mov	r2, r4
 8010e52:	462b      	mov	r3, r5
 8010e54:	f7ef fbd0 	bl	80005f8 <__aeabi_dmul>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	4640      	mov	r0, r8
 8010e5e:	4649      	mov	r1, r9
 8010e60:	f7ef fa12 	bl	8000288 <__aeabi_dsub>
 8010e64:	4604      	mov	r4, r0
 8010e66:	460d      	mov	r5, r1
 8010e68:	4602      	mov	r2, r0
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	4640      	mov	r0, r8
 8010e6e:	4649      	mov	r1, r9
 8010e70:	f7ef fbc2 	bl	80005f8 <__aeabi_dmul>
 8010e74:	2200      	movs	r2, #0
 8010e76:	ec41 0b19 	vmov	d9, r0, r1
 8010e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fa01 	bl	8000288 <__aeabi_dsub>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	ec51 0b19 	vmov	r0, r1, d9
 8010e8e:	f7ef fcdd 	bl	800084c <__aeabi_ddiv>
 8010e92:	4632      	mov	r2, r6
 8010e94:	4604      	mov	r4, r0
 8010e96:	460d      	mov	r5, r1
 8010e98:	463b      	mov	r3, r7
 8010e9a:	4640      	mov	r0, r8
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	f7ef fbab 	bl	80005f8 <__aeabi_dmul>
 8010ea2:	4632      	mov	r2, r6
 8010ea4:	463b      	mov	r3, r7
 8010ea6:	f7ef f9f1 	bl	800028c <__adddf3>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4620      	mov	r0, r4
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7ef f9e9 	bl	8000288 <__aeabi_dsub>
 8010eb6:	4642      	mov	r2, r8
 8010eb8:	464b      	mov	r3, r9
 8010eba:	f7ef f9e5 	bl	8000288 <__aeabi_dsub>
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	4939      	ldr	r1, [pc, #228]	; (8010fa8 <__ieee754_pow+0xa40>)
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	f7ef f9df 	bl	8000288 <__aeabi_dsub>
 8010eca:	ec41 0b10 	vmov	d0, r0, r1
 8010ece:	ee10 3a90 	vmov	r3, s1
 8010ed2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010eda:	da2b      	bge.n	8010f34 <__ieee754_pow+0x9cc>
 8010edc:	4650      	mov	r0, sl
 8010ede:	f000 fc23 	bl	8011728 <scalbn>
 8010ee2:	ec51 0b10 	vmov	r0, r1, d0
 8010ee6:	ec53 2b18 	vmov	r2, r3, d8
 8010eea:	f7ff bbee 	b.w	80106ca <__ieee754_pow+0x162>
 8010eee:	4b2f      	ldr	r3, [pc, #188]	; (8010fac <__ieee754_pow+0xa44>)
 8010ef0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010ef4:	429e      	cmp	r6, r3
 8010ef6:	f77f af0d 	ble.w	8010d14 <__ieee754_pow+0x7ac>
 8010efa:	4b2d      	ldr	r3, [pc, #180]	; (8010fb0 <__ieee754_pow+0xa48>)
 8010efc:	440b      	add	r3, r1
 8010efe:	4303      	orrs	r3, r0
 8010f00:	d009      	beq.n	8010f16 <__ieee754_pow+0x9ae>
 8010f02:	ec51 0b18 	vmov	r0, r1, d8
 8010f06:	2200      	movs	r2, #0
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f7ef fde7 	bl	8000adc <__aeabi_dcmplt>
 8010f0e:	3800      	subs	r0, #0
 8010f10:	bf18      	it	ne
 8010f12:	2001      	movne	r0, #1
 8010f14:	e448      	b.n	80107a8 <__ieee754_pow+0x240>
 8010f16:	4622      	mov	r2, r4
 8010f18:	462b      	mov	r3, r5
 8010f1a:	f7ef f9b5 	bl	8000288 <__aeabi_dsub>
 8010f1e:	4642      	mov	r2, r8
 8010f20:	464b      	mov	r3, r9
 8010f22:	f7ef fdef 	bl	8000b04 <__aeabi_dcmpge>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f43f aef4 	beq.w	8010d14 <__ieee754_pow+0x7ac>
 8010f2c:	e7e9      	b.n	8010f02 <__ieee754_pow+0x99a>
 8010f2e:	f04f 0a00 	mov.w	sl, #0
 8010f32:	e71a      	b.n	8010d6a <__ieee754_pow+0x802>
 8010f34:	ec51 0b10 	vmov	r0, r1, d0
 8010f38:	4619      	mov	r1, r3
 8010f3a:	e7d4      	b.n	8010ee6 <__ieee754_pow+0x97e>
 8010f3c:	491a      	ldr	r1, [pc, #104]	; (8010fa8 <__ieee754_pow+0xa40>)
 8010f3e:	2000      	movs	r0, #0
 8010f40:	f7ff bb31 	b.w	80105a6 <__ieee754_pow+0x3e>
 8010f44:	2000      	movs	r0, #0
 8010f46:	2100      	movs	r1, #0
 8010f48:	f7ff bb2d 	b.w	80105a6 <__ieee754_pow+0x3e>
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	4639      	mov	r1, r7
 8010f50:	f7ff bb29 	b.w	80105a6 <__ieee754_pow+0x3e>
 8010f54:	9204      	str	r2, [sp, #16]
 8010f56:	f7ff bb7b 	b.w	8010650 <__ieee754_pow+0xe8>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	f7ff bb65 	b.w	801062a <__ieee754_pow+0xc2>
 8010f60:	00000000 	.word	0x00000000
 8010f64:	3fe62e43 	.word	0x3fe62e43
 8010f68:	fefa39ef 	.word	0xfefa39ef
 8010f6c:	3fe62e42 	.word	0x3fe62e42
 8010f70:	0ca86c39 	.word	0x0ca86c39
 8010f74:	be205c61 	.word	0xbe205c61
 8010f78:	72bea4d0 	.word	0x72bea4d0
 8010f7c:	3e663769 	.word	0x3e663769
 8010f80:	c5d26bf1 	.word	0xc5d26bf1
 8010f84:	3ebbbd41 	.word	0x3ebbbd41
 8010f88:	af25de2c 	.word	0xaf25de2c
 8010f8c:	3f11566a 	.word	0x3f11566a
 8010f90:	16bebd93 	.word	0x16bebd93
 8010f94:	3f66c16c 	.word	0x3f66c16c
 8010f98:	5555553e 	.word	0x5555553e
 8010f9c:	3fc55555 	.word	0x3fc55555
 8010fa0:	3fe00000 	.word	0x3fe00000
 8010fa4:	fff00000 	.word	0xfff00000
 8010fa8:	3ff00000 	.word	0x3ff00000
 8010fac:	4090cbff 	.word	0x4090cbff
 8010fb0:	3f6f3400 	.word	0x3f6f3400
 8010fb4:	652b82fe 	.word	0x652b82fe
 8010fb8:	3c971547 	.word	0x3c971547
 8010fbc:	00000000 	.word	0x00000000

08010fc0 <__ieee754_rem_pio2>:
 8010fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ed2d 8b02 	vpush	{d8}
 8010fc8:	ec55 4b10 	vmov	r4, r5, d0
 8010fcc:	4bca      	ldr	r3, [pc, #808]	; (80112f8 <__ieee754_rem_pio2+0x338>)
 8010fce:	b08b      	sub	sp, #44	; 0x2c
 8010fd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010fd4:	4598      	cmp	r8, r3
 8010fd6:	4682      	mov	sl, r0
 8010fd8:	9502      	str	r5, [sp, #8]
 8010fda:	dc08      	bgt.n	8010fee <__ieee754_rem_pio2+0x2e>
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	ed80 0b00 	vstr	d0, [r0]
 8010fe4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010fe8:	f04f 0b00 	mov.w	fp, #0
 8010fec:	e028      	b.n	8011040 <__ieee754_rem_pio2+0x80>
 8010fee:	4bc3      	ldr	r3, [pc, #780]	; (80112fc <__ieee754_rem_pio2+0x33c>)
 8010ff0:	4598      	cmp	r8, r3
 8010ff2:	dc78      	bgt.n	80110e6 <__ieee754_rem_pio2+0x126>
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	4ec2      	ldr	r6, [pc, #776]	; (8011300 <__ieee754_rem_pio2+0x340>)
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	ee10 0a10 	vmov	r0, s0
 8010ffe:	a3b0      	add	r3, pc, #704	; (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	4629      	mov	r1, r5
 8011006:	dd39      	ble.n	801107c <__ieee754_rem_pio2+0xbc>
 8011008:	f7ef f93e 	bl	8000288 <__aeabi_dsub>
 801100c:	45b0      	cmp	r8, r6
 801100e:	4604      	mov	r4, r0
 8011010:	460d      	mov	r5, r1
 8011012:	d01b      	beq.n	801104c <__ieee754_rem_pio2+0x8c>
 8011014:	a3ac      	add	r3, pc, #688	; (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	f7ef f935 	bl	8000288 <__aeabi_dsub>
 801101e:	4602      	mov	r2, r0
 8011020:	460b      	mov	r3, r1
 8011022:	e9ca 2300 	strd	r2, r3, [sl]
 8011026:	4620      	mov	r0, r4
 8011028:	4629      	mov	r1, r5
 801102a:	f7ef f92d 	bl	8000288 <__aeabi_dsub>
 801102e:	a3a6      	add	r3, pc, #664	; (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 8011030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011034:	f7ef f928 	bl	8000288 <__aeabi_dsub>
 8011038:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801103c:	f04f 0b01 	mov.w	fp, #1
 8011040:	4658      	mov	r0, fp
 8011042:	b00b      	add	sp, #44	; 0x2c
 8011044:	ecbd 8b02 	vpop	{d8}
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	a3a0      	add	r3, pc, #640	; (adr r3, 80112d0 <__ieee754_rem_pio2+0x310>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	f7ef f919 	bl	8000288 <__aeabi_dsub>
 8011056:	a3a0      	add	r3, pc, #640	; (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 8011058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105c:	4604      	mov	r4, r0
 801105e:	460d      	mov	r5, r1
 8011060:	f7ef f912 	bl	8000288 <__aeabi_dsub>
 8011064:	4602      	mov	r2, r0
 8011066:	460b      	mov	r3, r1
 8011068:	e9ca 2300 	strd	r2, r3, [sl]
 801106c:	4620      	mov	r0, r4
 801106e:	4629      	mov	r1, r5
 8011070:	f7ef f90a 	bl	8000288 <__aeabi_dsub>
 8011074:	a398      	add	r3, pc, #608	; (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 8011076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107a:	e7db      	b.n	8011034 <__ieee754_rem_pio2+0x74>
 801107c:	f7ef f906 	bl	800028c <__adddf3>
 8011080:	45b0      	cmp	r8, r6
 8011082:	4604      	mov	r4, r0
 8011084:	460d      	mov	r5, r1
 8011086:	d016      	beq.n	80110b6 <__ieee754_rem_pio2+0xf6>
 8011088:	a38f      	add	r3, pc, #572	; (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 801108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108e:	f7ef f8fd 	bl	800028c <__adddf3>
 8011092:	4602      	mov	r2, r0
 8011094:	460b      	mov	r3, r1
 8011096:	e9ca 2300 	strd	r2, r3, [sl]
 801109a:	4620      	mov	r0, r4
 801109c:	4629      	mov	r1, r5
 801109e:	f7ef f8f3 	bl	8000288 <__aeabi_dsub>
 80110a2:	a389      	add	r3, pc, #548	; (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	f7ef f8f0 	bl	800028c <__adddf3>
 80110ac:	f04f 3bff 	mov.w	fp, #4294967295
 80110b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80110b4:	e7c4      	b.n	8011040 <__ieee754_rem_pio2+0x80>
 80110b6:	a386      	add	r3, pc, #536	; (adr r3, 80112d0 <__ieee754_rem_pio2+0x310>)
 80110b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110bc:	f7ef f8e6 	bl	800028c <__adddf3>
 80110c0:	a385      	add	r3, pc, #532	; (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	4604      	mov	r4, r0
 80110c8:	460d      	mov	r5, r1
 80110ca:	f7ef f8df 	bl	800028c <__adddf3>
 80110ce:	4602      	mov	r2, r0
 80110d0:	460b      	mov	r3, r1
 80110d2:	e9ca 2300 	strd	r2, r3, [sl]
 80110d6:	4620      	mov	r0, r4
 80110d8:	4629      	mov	r1, r5
 80110da:	f7ef f8d5 	bl	8000288 <__aeabi_dsub>
 80110de:	a37e      	add	r3, pc, #504	; (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	e7e0      	b.n	80110a8 <__ieee754_rem_pio2+0xe8>
 80110e6:	4b87      	ldr	r3, [pc, #540]	; (8011304 <__ieee754_rem_pio2+0x344>)
 80110e8:	4598      	cmp	r8, r3
 80110ea:	f300 80d8 	bgt.w	801129e <__ieee754_rem_pio2+0x2de>
 80110ee:	f000 fb0f 	bl	8011710 <fabs>
 80110f2:	ec55 4b10 	vmov	r4, r5, d0
 80110f6:	ee10 0a10 	vmov	r0, s0
 80110fa:	a379      	add	r3, pc, #484	; (adr r3, 80112e0 <__ieee754_rem_pio2+0x320>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	4629      	mov	r1, r5
 8011102:	f7ef fa79 	bl	80005f8 <__aeabi_dmul>
 8011106:	4b80      	ldr	r3, [pc, #512]	; (8011308 <__ieee754_rem_pio2+0x348>)
 8011108:	2200      	movs	r2, #0
 801110a:	f7ef f8bf 	bl	800028c <__adddf3>
 801110e:	f7ef fd23 	bl	8000b58 <__aeabi_d2iz>
 8011112:	4683      	mov	fp, r0
 8011114:	f7ef fa06 	bl	8000524 <__aeabi_i2d>
 8011118:	4602      	mov	r2, r0
 801111a:	460b      	mov	r3, r1
 801111c:	ec43 2b18 	vmov	d8, r2, r3
 8011120:	a367      	add	r3, pc, #412	; (adr r3, 80112c0 <__ieee754_rem_pio2+0x300>)
 8011122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011126:	f7ef fa67 	bl	80005f8 <__aeabi_dmul>
 801112a:	4602      	mov	r2, r0
 801112c:	460b      	mov	r3, r1
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef f8a9 	bl	8000288 <__aeabi_dsub>
 8011136:	a364      	add	r3, pc, #400	; (adr r3, 80112c8 <__ieee754_rem_pio2+0x308>)
 8011138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113c:	4606      	mov	r6, r0
 801113e:	460f      	mov	r7, r1
 8011140:	ec51 0b18 	vmov	r0, r1, d8
 8011144:	f7ef fa58 	bl	80005f8 <__aeabi_dmul>
 8011148:	f1bb 0f1f 	cmp.w	fp, #31
 801114c:	4604      	mov	r4, r0
 801114e:	460d      	mov	r5, r1
 8011150:	dc0d      	bgt.n	801116e <__ieee754_rem_pio2+0x1ae>
 8011152:	4b6e      	ldr	r3, [pc, #440]	; (801130c <__ieee754_rem_pio2+0x34c>)
 8011154:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801115c:	4543      	cmp	r3, r8
 801115e:	d006      	beq.n	801116e <__ieee754_rem_pio2+0x1ae>
 8011160:	4622      	mov	r2, r4
 8011162:	462b      	mov	r3, r5
 8011164:	4630      	mov	r0, r6
 8011166:	4639      	mov	r1, r7
 8011168:	f7ef f88e 	bl	8000288 <__aeabi_dsub>
 801116c:	e00e      	b.n	801118c <__ieee754_rem_pio2+0x1cc>
 801116e:	462b      	mov	r3, r5
 8011170:	4622      	mov	r2, r4
 8011172:	4630      	mov	r0, r6
 8011174:	4639      	mov	r1, r7
 8011176:	f7ef f887 	bl	8000288 <__aeabi_dsub>
 801117a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801117e:	9303      	str	r3, [sp, #12]
 8011180:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011184:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011188:	2b10      	cmp	r3, #16
 801118a:	dc02      	bgt.n	8011192 <__ieee754_rem_pio2+0x1d2>
 801118c:	e9ca 0100 	strd	r0, r1, [sl]
 8011190:	e039      	b.n	8011206 <__ieee754_rem_pio2+0x246>
 8011192:	a34f      	add	r3, pc, #316	; (adr r3, 80112d0 <__ieee754_rem_pio2+0x310>)
 8011194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011198:	ec51 0b18 	vmov	r0, r1, d8
 801119c:	f7ef fa2c 	bl	80005f8 <__aeabi_dmul>
 80111a0:	4604      	mov	r4, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef f86c 	bl	8000288 <__aeabi_dsub>
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	4680      	mov	r8, r0
 80111b6:	4689      	mov	r9, r1
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef f864 	bl	8000288 <__aeabi_dsub>
 80111c0:	4622      	mov	r2, r4
 80111c2:	462b      	mov	r3, r5
 80111c4:	f7ef f860 	bl	8000288 <__aeabi_dsub>
 80111c8:	a343      	add	r3, pc, #268	; (adr r3, 80112d8 <__ieee754_rem_pio2+0x318>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	4604      	mov	r4, r0
 80111d0:	460d      	mov	r5, r1
 80111d2:	ec51 0b18 	vmov	r0, r1, d8
 80111d6:	f7ef fa0f 	bl	80005f8 <__aeabi_dmul>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef f853 	bl	8000288 <__aeabi_dsub>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	4604      	mov	r4, r0
 80111e8:	460d      	mov	r5, r1
 80111ea:	4640      	mov	r0, r8
 80111ec:	4649      	mov	r1, r9
 80111ee:	f7ef f84b 	bl	8000288 <__aeabi_dsub>
 80111f2:	9a03      	ldr	r2, [sp, #12]
 80111f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	2b31      	cmp	r3, #49	; 0x31
 80111fc:	dc24      	bgt.n	8011248 <__ieee754_rem_pio2+0x288>
 80111fe:	e9ca 0100 	strd	r0, r1, [sl]
 8011202:	4646      	mov	r6, r8
 8011204:	464f      	mov	r7, r9
 8011206:	e9da 8900 	ldrd	r8, r9, [sl]
 801120a:	4630      	mov	r0, r6
 801120c:	4642      	mov	r2, r8
 801120e:	464b      	mov	r3, r9
 8011210:	4639      	mov	r1, r7
 8011212:	f7ef f839 	bl	8000288 <__aeabi_dsub>
 8011216:	462b      	mov	r3, r5
 8011218:	4622      	mov	r2, r4
 801121a:	f7ef f835 	bl	8000288 <__aeabi_dsub>
 801121e:	9b02      	ldr	r3, [sp, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011226:	f6bf af0b 	bge.w	8011040 <__ieee754_rem_pio2+0x80>
 801122a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801122e:	f8ca 3004 	str.w	r3, [sl, #4]
 8011232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011236:	f8ca 8000 	str.w	r8, [sl]
 801123a:	f8ca 0008 	str.w	r0, [sl, #8]
 801123e:	f8ca 300c 	str.w	r3, [sl, #12]
 8011242:	f1cb 0b00 	rsb	fp, fp, #0
 8011246:	e6fb      	b.n	8011040 <__ieee754_rem_pio2+0x80>
 8011248:	a327      	add	r3, pc, #156	; (adr r3, 80112e8 <__ieee754_rem_pio2+0x328>)
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	ec51 0b18 	vmov	r0, r1, d8
 8011252:	f7ef f9d1 	bl	80005f8 <__aeabi_dmul>
 8011256:	4604      	mov	r4, r0
 8011258:	460d      	mov	r5, r1
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	4640      	mov	r0, r8
 8011260:	4649      	mov	r1, r9
 8011262:	f7ef f811 	bl	8000288 <__aeabi_dsub>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	4606      	mov	r6, r0
 801126c:	460f      	mov	r7, r1
 801126e:	4640      	mov	r0, r8
 8011270:	4649      	mov	r1, r9
 8011272:	f7ef f809 	bl	8000288 <__aeabi_dsub>
 8011276:	4622      	mov	r2, r4
 8011278:	462b      	mov	r3, r5
 801127a:	f7ef f805 	bl	8000288 <__aeabi_dsub>
 801127e:	a31c      	add	r3, pc, #112	; (adr r3, 80112f0 <__ieee754_rem_pio2+0x330>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	4604      	mov	r4, r0
 8011286:	460d      	mov	r5, r1
 8011288:	ec51 0b18 	vmov	r0, r1, d8
 801128c:	f7ef f9b4 	bl	80005f8 <__aeabi_dmul>
 8011290:	4622      	mov	r2, r4
 8011292:	462b      	mov	r3, r5
 8011294:	f7ee fff8 	bl	8000288 <__aeabi_dsub>
 8011298:	4604      	mov	r4, r0
 801129a:	460d      	mov	r5, r1
 801129c:	e760      	b.n	8011160 <__ieee754_rem_pio2+0x1a0>
 801129e:	4b1c      	ldr	r3, [pc, #112]	; (8011310 <__ieee754_rem_pio2+0x350>)
 80112a0:	4598      	cmp	r8, r3
 80112a2:	dd37      	ble.n	8011314 <__ieee754_rem_pio2+0x354>
 80112a4:	ee10 2a10 	vmov	r2, s0
 80112a8:	462b      	mov	r3, r5
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ee ffeb 	bl	8000288 <__aeabi_dsub>
 80112b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80112b6:	e9ca 0100 	strd	r0, r1, [sl]
 80112ba:	e695      	b.n	8010fe8 <__ieee754_rem_pio2+0x28>
 80112bc:	f3af 8000 	nop.w
 80112c0:	54400000 	.word	0x54400000
 80112c4:	3ff921fb 	.word	0x3ff921fb
 80112c8:	1a626331 	.word	0x1a626331
 80112cc:	3dd0b461 	.word	0x3dd0b461
 80112d0:	1a600000 	.word	0x1a600000
 80112d4:	3dd0b461 	.word	0x3dd0b461
 80112d8:	2e037073 	.word	0x2e037073
 80112dc:	3ba3198a 	.word	0x3ba3198a
 80112e0:	6dc9c883 	.word	0x6dc9c883
 80112e4:	3fe45f30 	.word	0x3fe45f30
 80112e8:	2e000000 	.word	0x2e000000
 80112ec:	3ba3198a 	.word	0x3ba3198a
 80112f0:	252049c1 	.word	0x252049c1
 80112f4:	397b839a 	.word	0x397b839a
 80112f8:	3fe921fb 	.word	0x3fe921fb
 80112fc:	4002d97b 	.word	0x4002d97b
 8011300:	3ff921fb 	.word	0x3ff921fb
 8011304:	413921fb 	.word	0x413921fb
 8011308:	3fe00000 	.word	0x3fe00000
 801130c:	08012540 	.word	0x08012540
 8011310:	7fefffff 	.word	0x7fefffff
 8011314:	ea4f 5628 	mov.w	r6, r8, asr #20
 8011318:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801131c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8011320:	4620      	mov	r0, r4
 8011322:	460d      	mov	r5, r1
 8011324:	f7ef fc18 	bl	8000b58 <__aeabi_d2iz>
 8011328:	f7ef f8fc 	bl	8000524 <__aeabi_i2d>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	4620      	mov	r0, r4
 8011332:	4629      	mov	r1, r5
 8011334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011338:	f7ee ffa6 	bl	8000288 <__aeabi_dsub>
 801133c:	4b21      	ldr	r3, [pc, #132]	; (80113c4 <__ieee754_rem_pio2+0x404>)
 801133e:	2200      	movs	r2, #0
 8011340:	f7ef f95a 	bl	80005f8 <__aeabi_dmul>
 8011344:	460d      	mov	r5, r1
 8011346:	4604      	mov	r4, r0
 8011348:	f7ef fc06 	bl	8000b58 <__aeabi_d2iz>
 801134c:	f7ef f8ea 	bl	8000524 <__aeabi_i2d>
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4620      	mov	r0, r4
 8011356:	4629      	mov	r1, r5
 8011358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801135c:	f7ee ff94 	bl	8000288 <__aeabi_dsub>
 8011360:	4b18      	ldr	r3, [pc, #96]	; (80113c4 <__ieee754_rem_pio2+0x404>)
 8011362:	2200      	movs	r2, #0
 8011364:	f7ef f948 	bl	80005f8 <__aeabi_dmul>
 8011368:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801136c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8011370:	2703      	movs	r7, #3
 8011372:	2400      	movs	r4, #0
 8011374:	2500      	movs	r5, #0
 8011376:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801137a:	4622      	mov	r2, r4
 801137c:	462b      	mov	r3, r5
 801137e:	46b9      	mov	r9, r7
 8011380:	3f01      	subs	r7, #1
 8011382:	f7ef fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011386:	2800      	cmp	r0, #0
 8011388:	d1f5      	bne.n	8011376 <__ieee754_rem_pio2+0x3b6>
 801138a:	4b0f      	ldr	r3, [pc, #60]	; (80113c8 <__ieee754_rem_pio2+0x408>)
 801138c:	9301      	str	r3, [sp, #4]
 801138e:	2302      	movs	r3, #2
 8011390:	9300      	str	r3, [sp, #0]
 8011392:	4632      	mov	r2, r6
 8011394:	464b      	mov	r3, r9
 8011396:	4651      	mov	r1, sl
 8011398:	a804      	add	r0, sp, #16
 801139a:	f000 fa75 	bl	8011888 <__kernel_rem_pio2>
 801139e:	9b02      	ldr	r3, [sp, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	4683      	mov	fp, r0
 80113a4:	f6bf ae4c 	bge.w	8011040 <__ieee754_rem_pio2+0x80>
 80113a8:	e9da 2100 	ldrd	r2, r1, [sl]
 80113ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113b0:	e9ca 2300 	strd	r2, r3, [sl]
 80113b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80113b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80113c0:	e73f      	b.n	8011242 <__ieee754_rem_pio2+0x282>
 80113c2:	bf00      	nop
 80113c4:	41700000 	.word	0x41700000
 80113c8:	080125c0 	.word	0x080125c0
 80113cc:	00000000 	.word	0x00000000

080113d0 <atan>:
 80113d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d4:	ec55 4b10 	vmov	r4, r5, d0
 80113d8:	4bc3      	ldr	r3, [pc, #780]	; (80116e8 <atan+0x318>)
 80113da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80113de:	429e      	cmp	r6, r3
 80113e0:	46ab      	mov	fp, r5
 80113e2:	dd18      	ble.n	8011416 <atan+0x46>
 80113e4:	4bc1      	ldr	r3, [pc, #772]	; (80116ec <atan+0x31c>)
 80113e6:	429e      	cmp	r6, r3
 80113e8:	dc01      	bgt.n	80113ee <atan+0x1e>
 80113ea:	d109      	bne.n	8011400 <atan+0x30>
 80113ec:	b144      	cbz	r4, 8011400 <atan+0x30>
 80113ee:	4622      	mov	r2, r4
 80113f0:	462b      	mov	r3, r5
 80113f2:	4620      	mov	r0, r4
 80113f4:	4629      	mov	r1, r5
 80113f6:	f7ee ff49 	bl	800028c <__adddf3>
 80113fa:	4604      	mov	r4, r0
 80113fc:	460d      	mov	r5, r1
 80113fe:	e006      	b.n	801140e <atan+0x3e>
 8011400:	f1bb 0f00 	cmp.w	fp, #0
 8011404:	f300 8131 	bgt.w	801166a <atan+0x29a>
 8011408:	a59b      	add	r5, pc, #620	; (adr r5, 8011678 <atan+0x2a8>)
 801140a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801140e:	ec45 4b10 	vmov	d0, r4, r5
 8011412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011416:	4bb6      	ldr	r3, [pc, #728]	; (80116f0 <atan+0x320>)
 8011418:	429e      	cmp	r6, r3
 801141a:	dc14      	bgt.n	8011446 <atan+0x76>
 801141c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011420:	429e      	cmp	r6, r3
 8011422:	dc0d      	bgt.n	8011440 <atan+0x70>
 8011424:	a396      	add	r3, pc, #600	; (adr r3, 8011680 <atan+0x2b0>)
 8011426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142a:	ee10 0a10 	vmov	r0, s0
 801142e:	4629      	mov	r1, r5
 8011430:	f7ee ff2c 	bl	800028c <__adddf3>
 8011434:	4baf      	ldr	r3, [pc, #700]	; (80116f4 <atan+0x324>)
 8011436:	2200      	movs	r2, #0
 8011438:	f7ef fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 801143c:	2800      	cmp	r0, #0
 801143e:	d1e6      	bne.n	801140e <atan+0x3e>
 8011440:	f04f 3aff 	mov.w	sl, #4294967295
 8011444:	e02b      	b.n	801149e <atan+0xce>
 8011446:	f000 f963 	bl	8011710 <fabs>
 801144a:	4bab      	ldr	r3, [pc, #684]	; (80116f8 <atan+0x328>)
 801144c:	429e      	cmp	r6, r3
 801144e:	ec55 4b10 	vmov	r4, r5, d0
 8011452:	f300 80bf 	bgt.w	80115d4 <atan+0x204>
 8011456:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801145a:	429e      	cmp	r6, r3
 801145c:	f300 80a0 	bgt.w	80115a0 <atan+0x1d0>
 8011460:	ee10 2a10 	vmov	r2, s0
 8011464:	ee10 0a10 	vmov	r0, s0
 8011468:	462b      	mov	r3, r5
 801146a:	4629      	mov	r1, r5
 801146c:	f7ee ff0e 	bl	800028c <__adddf3>
 8011470:	4ba0      	ldr	r3, [pc, #640]	; (80116f4 <atan+0x324>)
 8011472:	2200      	movs	r2, #0
 8011474:	f7ee ff08 	bl	8000288 <__aeabi_dsub>
 8011478:	2200      	movs	r2, #0
 801147a:	4606      	mov	r6, r0
 801147c:	460f      	mov	r7, r1
 801147e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011482:	4620      	mov	r0, r4
 8011484:	4629      	mov	r1, r5
 8011486:	f7ee ff01 	bl	800028c <__adddf3>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4630      	mov	r0, r6
 8011490:	4639      	mov	r1, r7
 8011492:	f7ef f9db 	bl	800084c <__aeabi_ddiv>
 8011496:	f04f 0a00 	mov.w	sl, #0
 801149a:	4604      	mov	r4, r0
 801149c:	460d      	mov	r5, r1
 801149e:	4622      	mov	r2, r4
 80114a0:	462b      	mov	r3, r5
 80114a2:	4620      	mov	r0, r4
 80114a4:	4629      	mov	r1, r5
 80114a6:	f7ef f8a7 	bl	80005f8 <__aeabi_dmul>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4680      	mov	r8, r0
 80114b0:	4689      	mov	r9, r1
 80114b2:	f7ef f8a1 	bl	80005f8 <__aeabi_dmul>
 80114b6:	a374      	add	r3, pc, #464	; (adr r3, 8011688 <atan+0x2b8>)
 80114b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	f7ef f89a 	bl	80005f8 <__aeabi_dmul>
 80114c4:	a372      	add	r3, pc, #456	; (adr r3, 8011690 <atan+0x2c0>)
 80114c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ca:	f7ee fedf 	bl	800028c <__adddf3>
 80114ce:	4632      	mov	r2, r6
 80114d0:	463b      	mov	r3, r7
 80114d2:	f7ef f891 	bl	80005f8 <__aeabi_dmul>
 80114d6:	a370      	add	r3, pc, #448	; (adr r3, 8011698 <atan+0x2c8>)
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7ee fed6 	bl	800028c <__adddf3>
 80114e0:	4632      	mov	r2, r6
 80114e2:	463b      	mov	r3, r7
 80114e4:	f7ef f888 	bl	80005f8 <__aeabi_dmul>
 80114e8:	a36d      	add	r3, pc, #436	; (adr r3, 80116a0 <atan+0x2d0>)
 80114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ee:	f7ee fecd 	bl	800028c <__adddf3>
 80114f2:	4632      	mov	r2, r6
 80114f4:	463b      	mov	r3, r7
 80114f6:	f7ef f87f 	bl	80005f8 <__aeabi_dmul>
 80114fa:	a36b      	add	r3, pc, #428	; (adr r3, 80116a8 <atan+0x2d8>)
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	f7ee fec4 	bl	800028c <__adddf3>
 8011504:	4632      	mov	r2, r6
 8011506:	463b      	mov	r3, r7
 8011508:	f7ef f876 	bl	80005f8 <__aeabi_dmul>
 801150c:	a368      	add	r3, pc, #416	; (adr r3, 80116b0 <atan+0x2e0>)
 801150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011512:	f7ee febb 	bl	800028c <__adddf3>
 8011516:	4642      	mov	r2, r8
 8011518:	464b      	mov	r3, r9
 801151a:	f7ef f86d 	bl	80005f8 <__aeabi_dmul>
 801151e:	a366      	add	r3, pc, #408	; (adr r3, 80116b8 <atan+0x2e8>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	4680      	mov	r8, r0
 8011526:	4689      	mov	r9, r1
 8011528:	4630      	mov	r0, r6
 801152a:	4639      	mov	r1, r7
 801152c:	f7ef f864 	bl	80005f8 <__aeabi_dmul>
 8011530:	a363      	add	r3, pc, #396	; (adr r3, 80116c0 <atan+0x2f0>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	f7ee fea7 	bl	8000288 <__aeabi_dsub>
 801153a:	4632      	mov	r2, r6
 801153c:	463b      	mov	r3, r7
 801153e:	f7ef f85b 	bl	80005f8 <__aeabi_dmul>
 8011542:	a361      	add	r3, pc, #388	; (adr r3, 80116c8 <atan+0x2f8>)
 8011544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011548:	f7ee fe9e 	bl	8000288 <__aeabi_dsub>
 801154c:	4632      	mov	r2, r6
 801154e:	463b      	mov	r3, r7
 8011550:	f7ef f852 	bl	80005f8 <__aeabi_dmul>
 8011554:	a35e      	add	r3, pc, #376	; (adr r3, 80116d0 <atan+0x300>)
 8011556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155a:	f7ee fe95 	bl	8000288 <__aeabi_dsub>
 801155e:	4632      	mov	r2, r6
 8011560:	463b      	mov	r3, r7
 8011562:	f7ef f849 	bl	80005f8 <__aeabi_dmul>
 8011566:	a35c      	add	r3, pc, #368	; (adr r3, 80116d8 <atan+0x308>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	f7ee fe8c 	bl	8000288 <__aeabi_dsub>
 8011570:	4632      	mov	r2, r6
 8011572:	463b      	mov	r3, r7
 8011574:	f7ef f840 	bl	80005f8 <__aeabi_dmul>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4640      	mov	r0, r8
 801157e:	4649      	mov	r1, r9
 8011580:	f7ee fe84 	bl	800028c <__adddf3>
 8011584:	4622      	mov	r2, r4
 8011586:	462b      	mov	r3, r5
 8011588:	f7ef f836 	bl	80005f8 <__aeabi_dmul>
 801158c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	d14b      	bne.n	801162e <atan+0x25e>
 8011596:	4620      	mov	r0, r4
 8011598:	4629      	mov	r1, r5
 801159a:	f7ee fe75 	bl	8000288 <__aeabi_dsub>
 801159e:	e72c      	b.n	80113fa <atan+0x2a>
 80115a0:	ee10 0a10 	vmov	r0, s0
 80115a4:	4b53      	ldr	r3, [pc, #332]	; (80116f4 <atan+0x324>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	4629      	mov	r1, r5
 80115aa:	f7ee fe6d 	bl	8000288 <__aeabi_dsub>
 80115ae:	4b51      	ldr	r3, [pc, #324]	; (80116f4 <atan+0x324>)
 80115b0:	4606      	mov	r6, r0
 80115b2:	460f      	mov	r7, r1
 80115b4:	2200      	movs	r2, #0
 80115b6:	4620      	mov	r0, r4
 80115b8:	4629      	mov	r1, r5
 80115ba:	f7ee fe67 	bl	800028c <__adddf3>
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4630      	mov	r0, r6
 80115c4:	4639      	mov	r1, r7
 80115c6:	f7ef f941 	bl	800084c <__aeabi_ddiv>
 80115ca:	f04f 0a01 	mov.w	sl, #1
 80115ce:	4604      	mov	r4, r0
 80115d0:	460d      	mov	r5, r1
 80115d2:	e764      	b.n	801149e <atan+0xce>
 80115d4:	4b49      	ldr	r3, [pc, #292]	; (80116fc <atan+0x32c>)
 80115d6:	429e      	cmp	r6, r3
 80115d8:	da1d      	bge.n	8011616 <atan+0x246>
 80115da:	ee10 0a10 	vmov	r0, s0
 80115de:	4b48      	ldr	r3, [pc, #288]	; (8011700 <atan+0x330>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	4629      	mov	r1, r5
 80115e4:	f7ee fe50 	bl	8000288 <__aeabi_dsub>
 80115e8:	4b45      	ldr	r3, [pc, #276]	; (8011700 <atan+0x330>)
 80115ea:	4606      	mov	r6, r0
 80115ec:	460f      	mov	r7, r1
 80115ee:	2200      	movs	r2, #0
 80115f0:	4620      	mov	r0, r4
 80115f2:	4629      	mov	r1, r5
 80115f4:	f7ef f800 	bl	80005f8 <__aeabi_dmul>
 80115f8:	4b3e      	ldr	r3, [pc, #248]	; (80116f4 <atan+0x324>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	f7ee fe46 	bl	800028c <__adddf3>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	4630      	mov	r0, r6
 8011606:	4639      	mov	r1, r7
 8011608:	f7ef f920 	bl	800084c <__aeabi_ddiv>
 801160c:	f04f 0a02 	mov.w	sl, #2
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	e743      	b.n	801149e <atan+0xce>
 8011616:	462b      	mov	r3, r5
 8011618:	ee10 2a10 	vmov	r2, s0
 801161c:	4939      	ldr	r1, [pc, #228]	; (8011704 <atan+0x334>)
 801161e:	2000      	movs	r0, #0
 8011620:	f7ef f914 	bl	800084c <__aeabi_ddiv>
 8011624:	f04f 0a03 	mov.w	sl, #3
 8011628:	4604      	mov	r4, r0
 801162a:	460d      	mov	r5, r1
 801162c:	e737      	b.n	801149e <atan+0xce>
 801162e:	4b36      	ldr	r3, [pc, #216]	; (8011708 <atan+0x338>)
 8011630:	4e36      	ldr	r6, [pc, #216]	; (801170c <atan+0x33c>)
 8011632:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163a:	f7ee fe25 	bl	8000288 <__aeabi_dsub>
 801163e:	4622      	mov	r2, r4
 8011640:	462b      	mov	r3, r5
 8011642:	f7ee fe21 	bl	8000288 <__aeabi_dsub>
 8011646:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801164a:	4602      	mov	r2, r0
 801164c:	460b      	mov	r3, r1
 801164e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011652:	f7ee fe19 	bl	8000288 <__aeabi_dsub>
 8011656:	f1bb 0f00 	cmp.w	fp, #0
 801165a:	4604      	mov	r4, r0
 801165c:	460d      	mov	r5, r1
 801165e:	f6bf aed6 	bge.w	801140e <atan+0x3e>
 8011662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011666:	461d      	mov	r5, r3
 8011668:	e6d1      	b.n	801140e <atan+0x3e>
 801166a:	a51d      	add	r5, pc, #116	; (adr r5, 80116e0 <atan+0x310>)
 801166c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011670:	e6cd      	b.n	801140e <atan+0x3e>
 8011672:	bf00      	nop
 8011674:	f3af 8000 	nop.w
 8011678:	54442d18 	.word	0x54442d18
 801167c:	bff921fb 	.word	0xbff921fb
 8011680:	8800759c 	.word	0x8800759c
 8011684:	7e37e43c 	.word	0x7e37e43c
 8011688:	e322da11 	.word	0xe322da11
 801168c:	3f90ad3a 	.word	0x3f90ad3a
 8011690:	24760deb 	.word	0x24760deb
 8011694:	3fa97b4b 	.word	0x3fa97b4b
 8011698:	a0d03d51 	.word	0xa0d03d51
 801169c:	3fb10d66 	.word	0x3fb10d66
 80116a0:	c54c206e 	.word	0xc54c206e
 80116a4:	3fb745cd 	.word	0x3fb745cd
 80116a8:	920083ff 	.word	0x920083ff
 80116ac:	3fc24924 	.word	0x3fc24924
 80116b0:	5555550d 	.word	0x5555550d
 80116b4:	3fd55555 	.word	0x3fd55555
 80116b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80116bc:	bfa2b444 	.word	0xbfa2b444
 80116c0:	52defd9a 	.word	0x52defd9a
 80116c4:	3fadde2d 	.word	0x3fadde2d
 80116c8:	af749a6d 	.word	0xaf749a6d
 80116cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80116d0:	fe231671 	.word	0xfe231671
 80116d4:	3fbc71c6 	.word	0x3fbc71c6
 80116d8:	9998ebc4 	.word	0x9998ebc4
 80116dc:	3fc99999 	.word	0x3fc99999
 80116e0:	54442d18 	.word	0x54442d18
 80116e4:	3ff921fb 	.word	0x3ff921fb
 80116e8:	440fffff 	.word	0x440fffff
 80116ec:	7ff00000 	.word	0x7ff00000
 80116f0:	3fdbffff 	.word	0x3fdbffff
 80116f4:	3ff00000 	.word	0x3ff00000
 80116f8:	3ff2ffff 	.word	0x3ff2ffff
 80116fc:	40038000 	.word	0x40038000
 8011700:	3ff80000 	.word	0x3ff80000
 8011704:	bff00000 	.word	0xbff00000
 8011708:	080126e8 	.word	0x080126e8
 801170c:	080126c8 	.word	0x080126c8

08011710 <fabs>:
 8011710:	ec51 0b10 	vmov	r0, r1, d0
 8011714:	ee10 2a10 	vmov	r2, s0
 8011718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801171c:	ec43 2b10 	vmov	d0, r2, r3
 8011720:	4770      	bx	lr
 8011722:	0000      	movs	r0, r0
 8011724:	0000      	movs	r0, r0
	...

08011728 <scalbn>:
 8011728:	b570      	push	{r4, r5, r6, lr}
 801172a:	ec55 4b10 	vmov	r4, r5, d0
 801172e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011732:	4606      	mov	r6, r0
 8011734:	462b      	mov	r3, r5
 8011736:	b999      	cbnz	r1, 8011760 <scalbn+0x38>
 8011738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801173c:	4323      	orrs	r3, r4
 801173e:	d03f      	beq.n	80117c0 <scalbn+0x98>
 8011740:	4b35      	ldr	r3, [pc, #212]	; (8011818 <scalbn+0xf0>)
 8011742:	4629      	mov	r1, r5
 8011744:	ee10 0a10 	vmov	r0, s0
 8011748:	2200      	movs	r2, #0
 801174a:	f7ee ff55 	bl	80005f8 <__aeabi_dmul>
 801174e:	4b33      	ldr	r3, [pc, #204]	; (801181c <scalbn+0xf4>)
 8011750:	429e      	cmp	r6, r3
 8011752:	4604      	mov	r4, r0
 8011754:	460d      	mov	r5, r1
 8011756:	da10      	bge.n	801177a <scalbn+0x52>
 8011758:	a327      	add	r3, pc, #156	; (adr r3, 80117f8 <scalbn+0xd0>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	e01f      	b.n	80117a0 <scalbn+0x78>
 8011760:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011764:	4291      	cmp	r1, r2
 8011766:	d10c      	bne.n	8011782 <scalbn+0x5a>
 8011768:	ee10 2a10 	vmov	r2, s0
 801176c:	4620      	mov	r0, r4
 801176e:	4629      	mov	r1, r5
 8011770:	f7ee fd8c 	bl	800028c <__adddf3>
 8011774:	4604      	mov	r4, r0
 8011776:	460d      	mov	r5, r1
 8011778:	e022      	b.n	80117c0 <scalbn+0x98>
 801177a:	460b      	mov	r3, r1
 801177c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011780:	3936      	subs	r1, #54	; 0x36
 8011782:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011786:	4296      	cmp	r6, r2
 8011788:	dd0d      	ble.n	80117a6 <scalbn+0x7e>
 801178a:	2d00      	cmp	r5, #0
 801178c:	a11c      	add	r1, pc, #112	; (adr r1, 8011800 <scalbn+0xd8>)
 801178e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011792:	da02      	bge.n	801179a <scalbn+0x72>
 8011794:	a11c      	add	r1, pc, #112	; (adr r1, 8011808 <scalbn+0xe0>)
 8011796:	e9d1 0100 	ldrd	r0, r1, [r1]
 801179a:	a319      	add	r3, pc, #100	; (adr r3, 8011800 <scalbn+0xd8>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	f7ee ff2a 	bl	80005f8 <__aeabi_dmul>
 80117a4:	e7e6      	b.n	8011774 <scalbn+0x4c>
 80117a6:	1872      	adds	r2, r6, r1
 80117a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80117ac:	428a      	cmp	r2, r1
 80117ae:	dcec      	bgt.n	801178a <scalbn+0x62>
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	dd08      	ble.n	80117c6 <scalbn+0x9e>
 80117b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80117b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80117bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80117c0:	ec45 4b10 	vmov	d0, r4, r5
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80117ca:	da08      	bge.n	80117de <scalbn+0xb6>
 80117cc:	2d00      	cmp	r5, #0
 80117ce:	a10a      	add	r1, pc, #40	; (adr r1, 80117f8 <scalbn+0xd0>)
 80117d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117d4:	dac0      	bge.n	8011758 <scalbn+0x30>
 80117d6:	a10e      	add	r1, pc, #56	; (adr r1, 8011810 <scalbn+0xe8>)
 80117d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117dc:	e7bc      	b.n	8011758 <scalbn+0x30>
 80117de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80117e2:	3236      	adds	r2, #54	; 0x36
 80117e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80117e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80117ec:	4620      	mov	r0, r4
 80117ee:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <scalbn+0xf8>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	e7d5      	b.n	80117a0 <scalbn+0x78>
 80117f4:	f3af 8000 	nop.w
 80117f8:	c2f8f359 	.word	0xc2f8f359
 80117fc:	01a56e1f 	.word	0x01a56e1f
 8011800:	8800759c 	.word	0x8800759c
 8011804:	7e37e43c 	.word	0x7e37e43c
 8011808:	8800759c 	.word	0x8800759c
 801180c:	fe37e43c 	.word	0xfe37e43c
 8011810:	c2f8f359 	.word	0xc2f8f359
 8011814:	81a56e1f 	.word	0x81a56e1f
 8011818:	43500000 	.word	0x43500000
 801181c:	ffff3cb0 	.word	0xffff3cb0
 8011820:	3c900000 	.word	0x3c900000

08011824 <with_errno>:
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	4604      	mov	r4, r0
 8011828:	460d      	mov	r5, r1
 801182a:	4616      	mov	r6, r2
 801182c:	f7fc f96a 	bl	800db04 <__errno>
 8011830:	4629      	mov	r1, r5
 8011832:	6006      	str	r6, [r0, #0]
 8011834:	4620      	mov	r0, r4
 8011836:	bd70      	pop	{r4, r5, r6, pc}

08011838 <xflow>:
 8011838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801183a:	4614      	mov	r4, r2
 801183c:	461d      	mov	r5, r3
 801183e:	b108      	cbz	r0, 8011844 <xflow+0xc>
 8011840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011844:	e9cd 2300 	strd	r2, r3, [sp]
 8011848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801184c:	4620      	mov	r0, r4
 801184e:	4629      	mov	r1, r5
 8011850:	f7ee fed2 	bl	80005f8 <__aeabi_dmul>
 8011854:	2222      	movs	r2, #34	; 0x22
 8011856:	b003      	add	sp, #12
 8011858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801185c:	f7ff bfe2 	b.w	8011824 <with_errno>

08011860 <__math_uflow>:
 8011860:	b508      	push	{r3, lr}
 8011862:	2200      	movs	r2, #0
 8011864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011868:	f7ff ffe6 	bl	8011838 <xflow>
 801186c:	ec41 0b10 	vmov	d0, r0, r1
 8011870:	bd08      	pop	{r3, pc}

08011872 <__math_oflow>:
 8011872:	b508      	push	{r3, lr}
 8011874:	2200      	movs	r2, #0
 8011876:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801187a:	f7ff ffdd 	bl	8011838 <xflow>
 801187e:	ec41 0b10 	vmov	d0, r0, r1
 8011882:	bd08      	pop	{r3, pc}
 8011884:	0000      	movs	r0, r0
	...

08011888 <__kernel_rem_pio2>:
 8011888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188c:	ed2d 8b02 	vpush	{d8}
 8011890:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011894:	f112 0f14 	cmn.w	r2, #20
 8011898:	9306      	str	r3, [sp, #24]
 801189a:	9104      	str	r1, [sp, #16]
 801189c:	4bc2      	ldr	r3, [pc, #776]	; (8011ba8 <__kernel_rem_pio2+0x320>)
 801189e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80118a0:	9009      	str	r0, [sp, #36]	; 0x24
 80118a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	9b06      	ldr	r3, [sp, #24]
 80118aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80118ae:	bfa8      	it	ge
 80118b0:	1ed4      	subge	r4, r2, #3
 80118b2:	9305      	str	r3, [sp, #20]
 80118b4:	bfb2      	itee	lt
 80118b6:	2400      	movlt	r4, #0
 80118b8:	2318      	movge	r3, #24
 80118ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80118be:	f06f 0317 	mvn.w	r3, #23
 80118c2:	fb04 3303 	mla	r3, r4, r3, r3
 80118c6:	eb03 0a02 	add.w	sl, r3, r2
 80118ca:	9b00      	ldr	r3, [sp, #0]
 80118cc:	9a05      	ldr	r2, [sp, #20]
 80118ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011b98 <__kernel_rem_pio2+0x310>
 80118d2:	eb03 0802 	add.w	r8, r3, r2
 80118d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80118d8:	1aa7      	subs	r7, r4, r2
 80118da:	ae20      	add	r6, sp, #128	; 0x80
 80118dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80118e0:	2500      	movs	r5, #0
 80118e2:	4545      	cmp	r5, r8
 80118e4:	dd13      	ble.n	801190e <__kernel_rem_pio2+0x86>
 80118e6:	9b06      	ldr	r3, [sp, #24]
 80118e8:	aa20      	add	r2, sp, #128	; 0x80
 80118ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80118ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80118f2:	f04f 0800 	mov.w	r8, #0
 80118f6:	9b00      	ldr	r3, [sp, #0]
 80118f8:	4598      	cmp	r8, r3
 80118fa:	dc31      	bgt.n	8011960 <__kernel_rem_pio2+0xd8>
 80118fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011b98 <__kernel_rem_pio2+0x310>
 8011900:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011908:	462f      	mov	r7, r5
 801190a:	2600      	movs	r6, #0
 801190c:	e01b      	b.n	8011946 <__kernel_rem_pio2+0xbe>
 801190e:	42ef      	cmn	r7, r5
 8011910:	d407      	bmi.n	8011922 <__kernel_rem_pio2+0x9a>
 8011912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011916:	f7ee fe05 	bl	8000524 <__aeabi_i2d>
 801191a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801191e:	3501      	adds	r5, #1
 8011920:	e7df      	b.n	80118e2 <__kernel_rem_pio2+0x5a>
 8011922:	ec51 0b18 	vmov	r0, r1, d8
 8011926:	e7f8      	b.n	801191a <__kernel_rem_pio2+0x92>
 8011928:	e9d7 2300 	ldrd	r2, r3, [r7]
 801192c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011930:	f7ee fe62 	bl	80005f8 <__aeabi_dmul>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801193c:	f7ee fca6 	bl	800028c <__adddf3>
 8011940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011944:	3601      	adds	r6, #1
 8011946:	9b05      	ldr	r3, [sp, #20]
 8011948:	429e      	cmp	r6, r3
 801194a:	f1a7 0708 	sub.w	r7, r7, #8
 801194e:	ddeb      	ble.n	8011928 <__kernel_rem_pio2+0xa0>
 8011950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011954:	f108 0801 	add.w	r8, r8, #1
 8011958:	ecab 7b02 	vstmia	fp!, {d7}
 801195c:	3508      	adds	r5, #8
 801195e:	e7ca      	b.n	80118f6 <__kernel_rem_pio2+0x6e>
 8011960:	9b00      	ldr	r3, [sp, #0]
 8011962:	aa0c      	add	r2, sp, #48	; 0x30
 8011964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011968:	930b      	str	r3, [sp, #44]	; 0x2c
 801196a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801196c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011970:	9c00      	ldr	r4, [sp, #0]
 8011972:	930a      	str	r3, [sp, #40]	; 0x28
 8011974:	00e3      	lsls	r3, r4, #3
 8011976:	9308      	str	r3, [sp, #32]
 8011978:	ab98      	add	r3, sp, #608	; 0x260
 801197a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801197e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011982:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011986:	ab70      	add	r3, sp, #448	; 0x1c0
 8011988:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801198c:	46c3      	mov	fp, r8
 801198e:	46a1      	mov	r9, r4
 8011990:	f1b9 0f00 	cmp.w	r9, #0
 8011994:	f1a5 0508 	sub.w	r5, r5, #8
 8011998:	dc77      	bgt.n	8011a8a <__kernel_rem_pio2+0x202>
 801199a:	ec47 6b10 	vmov	d0, r6, r7
 801199e:	4650      	mov	r0, sl
 80119a0:	f7ff fec2 	bl	8011728 <scalbn>
 80119a4:	ec57 6b10 	vmov	r6, r7, d0
 80119a8:	2200      	movs	r2, #0
 80119aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80119ae:	ee10 0a10 	vmov	r0, s0
 80119b2:	4639      	mov	r1, r7
 80119b4:	f7ee fe20 	bl	80005f8 <__aeabi_dmul>
 80119b8:	ec41 0b10 	vmov	d0, r0, r1
 80119bc:	f000 fab4 	bl	8011f28 <floor>
 80119c0:	4b7a      	ldr	r3, [pc, #488]	; (8011bac <__kernel_rem_pio2+0x324>)
 80119c2:	ec51 0b10 	vmov	r0, r1, d0
 80119c6:	2200      	movs	r2, #0
 80119c8:	f7ee fe16 	bl	80005f8 <__aeabi_dmul>
 80119cc:	4602      	mov	r2, r0
 80119ce:	460b      	mov	r3, r1
 80119d0:	4630      	mov	r0, r6
 80119d2:	4639      	mov	r1, r7
 80119d4:	f7ee fc58 	bl	8000288 <__aeabi_dsub>
 80119d8:	460f      	mov	r7, r1
 80119da:	4606      	mov	r6, r0
 80119dc:	f7ef f8bc 	bl	8000b58 <__aeabi_d2iz>
 80119e0:	9002      	str	r0, [sp, #8]
 80119e2:	f7ee fd9f 	bl	8000524 <__aeabi_i2d>
 80119e6:	4602      	mov	r2, r0
 80119e8:	460b      	mov	r3, r1
 80119ea:	4630      	mov	r0, r6
 80119ec:	4639      	mov	r1, r7
 80119ee:	f7ee fc4b 	bl	8000288 <__aeabi_dsub>
 80119f2:	f1ba 0f00 	cmp.w	sl, #0
 80119f6:	4606      	mov	r6, r0
 80119f8:	460f      	mov	r7, r1
 80119fa:	dd6d      	ble.n	8011ad8 <__kernel_rem_pio2+0x250>
 80119fc:	1e61      	subs	r1, r4, #1
 80119fe:	ab0c      	add	r3, sp, #48	; 0x30
 8011a00:	9d02      	ldr	r5, [sp, #8]
 8011a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a06:	f1ca 0018 	rsb	r0, sl, #24
 8011a0a:	fa43 f200 	asr.w	r2, r3, r0
 8011a0e:	4415      	add	r5, r2
 8011a10:	4082      	lsls	r2, r0
 8011a12:	1a9b      	subs	r3, r3, r2
 8011a14:	aa0c      	add	r2, sp, #48	; 0x30
 8011a16:	9502      	str	r5, [sp, #8]
 8011a18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011a1c:	f1ca 0217 	rsb	r2, sl, #23
 8011a20:	fa43 fb02 	asr.w	fp, r3, r2
 8011a24:	f1bb 0f00 	cmp.w	fp, #0
 8011a28:	dd65      	ble.n	8011af6 <__kernel_rem_pio2+0x26e>
 8011a2a:	9b02      	ldr	r3, [sp, #8]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	3301      	adds	r3, #1
 8011a30:	9302      	str	r3, [sp, #8]
 8011a32:	4615      	mov	r5, r2
 8011a34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011a38:	4294      	cmp	r4, r2
 8011a3a:	f300 809f 	bgt.w	8011b7c <__kernel_rem_pio2+0x2f4>
 8011a3e:	f1ba 0f00 	cmp.w	sl, #0
 8011a42:	dd07      	ble.n	8011a54 <__kernel_rem_pio2+0x1cc>
 8011a44:	f1ba 0f01 	cmp.w	sl, #1
 8011a48:	f000 80c1 	beq.w	8011bce <__kernel_rem_pio2+0x346>
 8011a4c:	f1ba 0f02 	cmp.w	sl, #2
 8011a50:	f000 80c7 	beq.w	8011be2 <__kernel_rem_pio2+0x35a>
 8011a54:	f1bb 0f02 	cmp.w	fp, #2
 8011a58:	d14d      	bne.n	8011af6 <__kernel_rem_pio2+0x26e>
 8011a5a:	4632      	mov	r2, r6
 8011a5c:	463b      	mov	r3, r7
 8011a5e:	4954      	ldr	r1, [pc, #336]	; (8011bb0 <__kernel_rem_pio2+0x328>)
 8011a60:	2000      	movs	r0, #0
 8011a62:	f7ee fc11 	bl	8000288 <__aeabi_dsub>
 8011a66:	4606      	mov	r6, r0
 8011a68:	460f      	mov	r7, r1
 8011a6a:	2d00      	cmp	r5, #0
 8011a6c:	d043      	beq.n	8011af6 <__kernel_rem_pio2+0x26e>
 8011a6e:	4650      	mov	r0, sl
 8011a70:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011ba0 <__kernel_rem_pio2+0x318>
 8011a74:	f7ff fe58 	bl	8011728 <scalbn>
 8011a78:	4630      	mov	r0, r6
 8011a7a:	4639      	mov	r1, r7
 8011a7c:	ec53 2b10 	vmov	r2, r3, d0
 8011a80:	f7ee fc02 	bl	8000288 <__aeabi_dsub>
 8011a84:	4606      	mov	r6, r0
 8011a86:	460f      	mov	r7, r1
 8011a88:	e035      	b.n	8011af6 <__kernel_rem_pio2+0x26e>
 8011a8a:	4b4a      	ldr	r3, [pc, #296]	; (8011bb4 <__kernel_rem_pio2+0x32c>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	4630      	mov	r0, r6
 8011a90:	4639      	mov	r1, r7
 8011a92:	f7ee fdb1 	bl	80005f8 <__aeabi_dmul>
 8011a96:	f7ef f85f 	bl	8000b58 <__aeabi_d2iz>
 8011a9a:	f7ee fd43 	bl	8000524 <__aeabi_i2d>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	ec43 2b18 	vmov	d8, r2, r3
 8011aa6:	4b44      	ldr	r3, [pc, #272]	; (8011bb8 <__kernel_rem_pio2+0x330>)
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f7ee fda5 	bl	80005f8 <__aeabi_dmul>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	4630      	mov	r0, r6
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	f7ee fbe7 	bl	8000288 <__aeabi_dsub>
 8011aba:	f7ef f84d 	bl	8000b58 <__aeabi_d2iz>
 8011abe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ac2:	f84b 0b04 	str.w	r0, [fp], #4
 8011ac6:	ec51 0b18 	vmov	r0, r1, d8
 8011aca:	f7ee fbdf 	bl	800028c <__adddf3>
 8011ace:	f109 39ff 	add.w	r9, r9, #4294967295
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460f      	mov	r7, r1
 8011ad6:	e75b      	b.n	8011990 <__kernel_rem_pio2+0x108>
 8011ad8:	d106      	bne.n	8011ae8 <__kernel_rem_pio2+0x260>
 8011ada:	1e63      	subs	r3, r4, #1
 8011adc:	aa0c      	add	r2, sp, #48	; 0x30
 8011ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ae2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011ae6:	e79d      	b.n	8011a24 <__kernel_rem_pio2+0x19c>
 8011ae8:	4b34      	ldr	r3, [pc, #208]	; (8011bbc <__kernel_rem_pio2+0x334>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	f7ef f80a 	bl	8000b04 <__aeabi_dcmpge>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d140      	bne.n	8011b76 <__kernel_rem_pio2+0x2ee>
 8011af4:	4683      	mov	fp, r0
 8011af6:	2200      	movs	r2, #0
 8011af8:	2300      	movs	r3, #0
 8011afa:	4630      	mov	r0, r6
 8011afc:	4639      	mov	r1, r7
 8011afe:	f7ee ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b02:	2800      	cmp	r0, #0
 8011b04:	f000 80c1 	beq.w	8011c8a <__kernel_rem_pio2+0x402>
 8011b08:	1e65      	subs	r5, r4, #1
 8011b0a:	462b      	mov	r3, r5
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	9900      	ldr	r1, [sp, #0]
 8011b10:	428b      	cmp	r3, r1
 8011b12:	da6d      	bge.n	8011bf0 <__kernel_rem_pio2+0x368>
 8011b14:	2a00      	cmp	r2, #0
 8011b16:	f000 808a 	beq.w	8011c2e <__kernel_rem_pio2+0x3a6>
 8011b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8011b1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011b20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 80ae 	beq.w	8011c86 <__kernel_rem_pio2+0x3fe>
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011ba0 <__kernel_rem_pio2+0x318>
 8011b30:	f7ff fdfa 	bl	8011728 <scalbn>
 8011b34:	1c6b      	adds	r3, r5, #1
 8011b36:	00da      	lsls	r2, r3, #3
 8011b38:	9205      	str	r2, [sp, #20]
 8011b3a:	ec57 6b10 	vmov	r6, r7, d0
 8011b3e:	aa70      	add	r2, sp, #448	; 0x1c0
 8011b40:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011bb4 <__kernel_rem_pio2+0x32c>
 8011b44:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011b48:	462c      	mov	r4, r5
 8011b4a:	f04f 0800 	mov.w	r8, #0
 8011b4e:	2c00      	cmp	r4, #0
 8011b50:	f280 80d4 	bge.w	8011cfc <__kernel_rem_pio2+0x474>
 8011b54:	462c      	mov	r4, r5
 8011b56:	2c00      	cmp	r4, #0
 8011b58:	f2c0 8102 	blt.w	8011d60 <__kernel_rem_pio2+0x4d8>
 8011b5c:	4b18      	ldr	r3, [pc, #96]	; (8011bc0 <__kernel_rem_pio2+0x338>)
 8011b5e:	461e      	mov	r6, r3
 8011b60:	ab70      	add	r3, sp, #448	; 0x1c0
 8011b62:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8011b66:	1b2b      	subs	r3, r5, r4
 8011b68:	f04f 0900 	mov.w	r9, #0
 8011b6c:	f04f 0a00 	mov.w	sl, #0
 8011b70:	2700      	movs	r7, #0
 8011b72:	9306      	str	r3, [sp, #24]
 8011b74:	e0e6      	b.n	8011d44 <__kernel_rem_pio2+0x4bc>
 8011b76:	f04f 0b02 	mov.w	fp, #2
 8011b7a:	e756      	b.n	8011a2a <__kernel_rem_pio2+0x1a2>
 8011b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8011b80:	bb05      	cbnz	r5, 8011bc4 <__kernel_rem_pio2+0x33c>
 8011b82:	b123      	cbz	r3, 8011b8e <__kernel_rem_pio2+0x306>
 8011b84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011b88:	f8c8 3000 	str.w	r3, [r8]
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	3201      	adds	r2, #1
 8011b90:	f108 0804 	add.w	r8, r8, #4
 8011b94:	461d      	mov	r5, r3
 8011b96:	e74f      	b.n	8011a38 <__kernel_rem_pio2+0x1b0>
	...
 8011ba4:	3ff00000 	.word	0x3ff00000
 8011ba8:	08012748 	.word	0x08012748
 8011bac:	40200000 	.word	0x40200000
 8011bb0:	3ff00000 	.word	0x3ff00000
 8011bb4:	3e700000 	.word	0x3e700000
 8011bb8:	41700000 	.word	0x41700000
 8011bbc:	3fe00000 	.word	0x3fe00000
 8011bc0:	08012708 	.word	0x08012708
 8011bc4:	1acb      	subs	r3, r1, r3
 8011bc6:	f8c8 3000 	str.w	r3, [r8]
 8011bca:	462b      	mov	r3, r5
 8011bcc:	e7df      	b.n	8011b8e <__kernel_rem_pio2+0x306>
 8011bce:	1e62      	subs	r2, r4, #1
 8011bd0:	ab0c      	add	r3, sp, #48	; 0x30
 8011bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011bda:	a90c      	add	r1, sp, #48	; 0x30
 8011bdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011be0:	e738      	b.n	8011a54 <__kernel_rem_pio2+0x1cc>
 8011be2:	1e62      	subs	r2, r4, #1
 8011be4:	ab0c      	add	r3, sp, #48	; 0x30
 8011be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011bee:	e7f4      	b.n	8011bda <__kernel_rem_pio2+0x352>
 8011bf0:	a90c      	add	r1, sp, #48	; 0x30
 8011bf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	430a      	orrs	r2, r1
 8011bfa:	e788      	b.n	8011b0e <__kernel_rem_pio2+0x286>
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011c02:	2900      	cmp	r1, #0
 8011c04:	d0fa      	beq.n	8011bfc <__kernel_rem_pio2+0x374>
 8011c06:	9a08      	ldr	r2, [sp, #32]
 8011c08:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011c0c:	446a      	add	r2, sp
 8011c0e:	3a98      	subs	r2, #152	; 0x98
 8011c10:	9208      	str	r2, [sp, #32]
 8011c12:	9a06      	ldr	r2, [sp, #24]
 8011c14:	a920      	add	r1, sp, #128	; 0x80
 8011c16:	18a2      	adds	r2, r4, r2
 8011c18:	18e3      	adds	r3, r4, r3
 8011c1a:	f104 0801 	add.w	r8, r4, #1
 8011c1e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011c22:	9302      	str	r3, [sp, #8]
 8011c24:	9b02      	ldr	r3, [sp, #8]
 8011c26:	4543      	cmp	r3, r8
 8011c28:	da04      	bge.n	8011c34 <__kernel_rem_pio2+0x3ac>
 8011c2a:	461c      	mov	r4, r3
 8011c2c:	e6a2      	b.n	8011974 <__kernel_rem_pio2+0xec>
 8011c2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c30:	2301      	movs	r3, #1
 8011c32:	e7e4      	b.n	8011bfe <__kernel_rem_pio2+0x376>
 8011c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c36:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011c3a:	f7ee fc73 	bl	8000524 <__aeabi_i2d>
 8011c3e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c44:	46ab      	mov	fp, r5
 8011c46:	461c      	mov	r4, r3
 8011c48:	f04f 0900 	mov.w	r9, #0
 8011c4c:	2600      	movs	r6, #0
 8011c4e:	2700      	movs	r7, #0
 8011c50:	9b05      	ldr	r3, [sp, #20]
 8011c52:	4599      	cmp	r9, r3
 8011c54:	dd06      	ble.n	8011c64 <__kernel_rem_pio2+0x3dc>
 8011c56:	9b08      	ldr	r3, [sp, #32]
 8011c58:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011c5c:	f108 0801 	add.w	r8, r8, #1
 8011c60:	9308      	str	r3, [sp, #32]
 8011c62:	e7df      	b.n	8011c24 <__kernel_rem_pio2+0x39c>
 8011c64:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011c68:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011c6c:	f7ee fcc4 	bl	80005f8 <__aeabi_dmul>
 8011c70:	4602      	mov	r2, r0
 8011c72:	460b      	mov	r3, r1
 8011c74:	4630      	mov	r0, r6
 8011c76:	4639      	mov	r1, r7
 8011c78:	f7ee fb08 	bl	800028c <__adddf3>
 8011c7c:	f109 0901 	add.w	r9, r9, #1
 8011c80:	4606      	mov	r6, r0
 8011c82:	460f      	mov	r7, r1
 8011c84:	e7e4      	b.n	8011c50 <__kernel_rem_pio2+0x3c8>
 8011c86:	3d01      	subs	r5, #1
 8011c88:	e747      	b.n	8011b1a <__kernel_rem_pio2+0x292>
 8011c8a:	ec47 6b10 	vmov	d0, r6, r7
 8011c8e:	f1ca 0000 	rsb	r0, sl, #0
 8011c92:	f7ff fd49 	bl	8011728 <scalbn>
 8011c96:	ec57 6b10 	vmov	r6, r7, d0
 8011c9a:	4ba0      	ldr	r3, [pc, #640]	; (8011f1c <__kernel_rem_pio2+0x694>)
 8011c9c:	ee10 0a10 	vmov	r0, s0
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	4639      	mov	r1, r7
 8011ca4:	f7ee ff2e 	bl	8000b04 <__aeabi_dcmpge>
 8011ca8:	b1f8      	cbz	r0, 8011cea <__kernel_rem_pio2+0x462>
 8011caa:	4b9d      	ldr	r3, [pc, #628]	; (8011f20 <__kernel_rem_pio2+0x698>)
 8011cac:	2200      	movs	r2, #0
 8011cae:	4630      	mov	r0, r6
 8011cb0:	4639      	mov	r1, r7
 8011cb2:	f7ee fca1 	bl	80005f8 <__aeabi_dmul>
 8011cb6:	f7ee ff4f 	bl	8000b58 <__aeabi_d2iz>
 8011cba:	4680      	mov	r8, r0
 8011cbc:	f7ee fc32 	bl	8000524 <__aeabi_i2d>
 8011cc0:	4b96      	ldr	r3, [pc, #600]	; (8011f1c <__kernel_rem_pio2+0x694>)
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f7ee fc98 	bl	80005f8 <__aeabi_dmul>
 8011cc8:	460b      	mov	r3, r1
 8011cca:	4602      	mov	r2, r0
 8011ccc:	4639      	mov	r1, r7
 8011cce:	4630      	mov	r0, r6
 8011cd0:	f7ee fada 	bl	8000288 <__aeabi_dsub>
 8011cd4:	f7ee ff40 	bl	8000b58 <__aeabi_d2iz>
 8011cd8:	1c65      	adds	r5, r4, #1
 8011cda:	ab0c      	add	r3, sp, #48	; 0x30
 8011cdc:	f10a 0a18 	add.w	sl, sl, #24
 8011ce0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ce4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011ce8:	e71f      	b.n	8011b2a <__kernel_rem_pio2+0x2a2>
 8011cea:	4630      	mov	r0, r6
 8011cec:	4639      	mov	r1, r7
 8011cee:	f7ee ff33 	bl	8000b58 <__aeabi_d2iz>
 8011cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8011cf4:	4625      	mov	r5, r4
 8011cf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011cfa:	e716      	b.n	8011b2a <__kernel_rem_pio2+0x2a2>
 8011cfc:	ab0c      	add	r3, sp, #48	; 0x30
 8011cfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011d02:	f7ee fc0f 	bl	8000524 <__aeabi_i2d>
 8011d06:	4632      	mov	r2, r6
 8011d08:	463b      	mov	r3, r7
 8011d0a:	f7ee fc75 	bl	80005f8 <__aeabi_dmul>
 8011d0e:	4642      	mov	r2, r8
 8011d10:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011d14:	464b      	mov	r3, r9
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	f7ee fc6d 	bl	80005f8 <__aeabi_dmul>
 8011d1e:	3c01      	subs	r4, #1
 8011d20:	4606      	mov	r6, r0
 8011d22:	460f      	mov	r7, r1
 8011d24:	e713      	b.n	8011b4e <__kernel_rem_pio2+0x2c6>
 8011d26:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011d2a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011d2e:	f7ee fc63 	bl	80005f8 <__aeabi_dmul>
 8011d32:	4602      	mov	r2, r0
 8011d34:	460b      	mov	r3, r1
 8011d36:	4648      	mov	r0, r9
 8011d38:	4651      	mov	r1, sl
 8011d3a:	f7ee faa7 	bl	800028c <__adddf3>
 8011d3e:	3701      	adds	r7, #1
 8011d40:	4681      	mov	r9, r0
 8011d42:	468a      	mov	sl, r1
 8011d44:	9b00      	ldr	r3, [sp, #0]
 8011d46:	429f      	cmp	r7, r3
 8011d48:	dc02      	bgt.n	8011d50 <__kernel_rem_pio2+0x4c8>
 8011d4a:	9b06      	ldr	r3, [sp, #24]
 8011d4c:	429f      	cmp	r7, r3
 8011d4e:	ddea      	ble.n	8011d26 <__kernel_rem_pio2+0x49e>
 8011d50:	9a06      	ldr	r2, [sp, #24]
 8011d52:	ab48      	add	r3, sp, #288	; 0x120
 8011d54:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011d58:	e9c6 9a00 	strd	r9, sl, [r6]
 8011d5c:	3c01      	subs	r4, #1
 8011d5e:	e6fa      	b.n	8011b56 <__kernel_rem_pio2+0x2ce>
 8011d60:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011d62:	2b02      	cmp	r3, #2
 8011d64:	dc0b      	bgt.n	8011d7e <__kernel_rem_pio2+0x4f6>
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	dc39      	bgt.n	8011dde <__kernel_rem_pio2+0x556>
 8011d6a:	d05d      	beq.n	8011e28 <__kernel_rem_pio2+0x5a0>
 8011d6c:	9b02      	ldr	r3, [sp, #8]
 8011d6e:	f003 0007 	and.w	r0, r3, #7
 8011d72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011d76:	ecbd 8b02 	vpop	{d8}
 8011d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d1f3      	bne.n	8011d6c <__kernel_rem_pio2+0x4e4>
 8011d84:	9b05      	ldr	r3, [sp, #20]
 8011d86:	9500      	str	r5, [sp, #0]
 8011d88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011d8c:	eb0d 0403 	add.w	r4, sp, r3
 8011d90:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011d94:	46a2      	mov	sl, r4
 8011d96:	9b00      	ldr	r3, [sp, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f1aa 0a08 	sub.w	sl, sl, #8
 8011d9e:	dc69      	bgt.n	8011e74 <__kernel_rem_pio2+0x5ec>
 8011da0:	46aa      	mov	sl, r5
 8011da2:	f1ba 0f01 	cmp.w	sl, #1
 8011da6:	f1a4 0408 	sub.w	r4, r4, #8
 8011daa:	f300 8083 	bgt.w	8011eb4 <__kernel_rem_pio2+0x62c>
 8011dae:	9c05      	ldr	r4, [sp, #20]
 8011db0:	ab48      	add	r3, sp, #288	; 0x120
 8011db2:	441c      	add	r4, r3
 8011db4:	2000      	movs	r0, #0
 8011db6:	2100      	movs	r1, #0
 8011db8:	2d01      	cmp	r5, #1
 8011dba:	f300 809a 	bgt.w	8011ef2 <__kernel_rem_pio2+0x66a>
 8011dbe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011dc2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011dc6:	f1bb 0f00 	cmp.w	fp, #0
 8011dca:	f040 8098 	bne.w	8011efe <__kernel_rem_pio2+0x676>
 8011dce:	9b04      	ldr	r3, [sp, #16]
 8011dd0:	e9c3 7800 	strd	r7, r8, [r3]
 8011dd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011dd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011ddc:	e7c6      	b.n	8011d6c <__kernel_rem_pio2+0x4e4>
 8011dde:	9e05      	ldr	r6, [sp, #20]
 8011de0:	ab48      	add	r3, sp, #288	; 0x120
 8011de2:	441e      	add	r6, r3
 8011de4:	462c      	mov	r4, r5
 8011de6:	2000      	movs	r0, #0
 8011de8:	2100      	movs	r1, #0
 8011dea:	2c00      	cmp	r4, #0
 8011dec:	da33      	bge.n	8011e56 <__kernel_rem_pio2+0x5ce>
 8011dee:	f1bb 0f00 	cmp.w	fp, #0
 8011df2:	d036      	beq.n	8011e62 <__kernel_rem_pio2+0x5da>
 8011df4:	4602      	mov	r2, r0
 8011df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dfa:	9c04      	ldr	r4, [sp, #16]
 8011dfc:	e9c4 2300 	strd	r2, r3, [r4]
 8011e00:	4602      	mov	r2, r0
 8011e02:	460b      	mov	r3, r1
 8011e04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011e08:	f7ee fa3e 	bl	8000288 <__aeabi_dsub>
 8011e0c:	ae4a      	add	r6, sp, #296	; 0x128
 8011e0e:	2401      	movs	r4, #1
 8011e10:	42a5      	cmp	r5, r4
 8011e12:	da29      	bge.n	8011e68 <__kernel_rem_pio2+0x5e0>
 8011e14:	f1bb 0f00 	cmp.w	fp, #0
 8011e18:	d002      	beq.n	8011e20 <__kernel_rem_pio2+0x598>
 8011e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e1e:	4619      	mov	r1, r3
 8011e20:	9b04      	ldr	r3, [sp, #16]
 8011e22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011e26:	e7a1      	b.n	8011d6c <__kernel_rem_pio2+0x4e4>
 8011e28:	9c05      	ldr	r4, [sp, #20]
 8011e2a:	ab48      	add	r3, sp, #288	; 0x120
 8011e2c:	441c      	add	r4, r3
 8011e2e:	2000      	movs	r0, #0
 8011e30:	2100      	movs	r1, #0
 8011e32:	2d00      	cmp	r5, #0
 8011e34:	da09      	bge.n	8011e4a <__kernel_rem_pio2+0x5c2>
 8011e36:	f1bb 0f00 	cmp.w	fp, #0
 8011e3a:	d002      	beq.n	8011e42 <__kernel_rem_pio2+0x5ba>
 8011e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e40:	4619      	mov	r1, r3
 8011e42:	9b04      	ldr	r3, [sp, #16]
 8011e44:	e9c3 0100 	strd	r0, r1, [r3]
 8011e48:	e790      	b.n	8011d6c <__kernel_rem_pio2+0x4e4>
 8011e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e4e:	f7ee fa1d 	bl	800028c <__adddf3>
 8011e52:	3d01      	subs	r5, #1
 8011e54:	e7ed      	b.n	8011e32 <__kernel_rem_pio2+0x5aa>
 8011e56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011e5a:	f7ee fa17 	bl	800028c <__adddf3>
 8011e5e:	3c01      	subs	r4, #1
 8011e60:	e7c3      	b.n	8011dea <__kernel_rem_pio2+0x562>
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	e7c8      	b.n	8011dfa <__kernel_rem_pio2+0x572>
 8011e68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011e6c:	f7ee fa0e 	bl	800028c <__adddf3>
 8011e70:	3401      	adds	r4, #1
 8011e72:	e7cd      	b.n	8011e10 <__kernel_rem_pio2+0x588>
 8011e74:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	4632      	mov	r2, r6
 8011e84:	463b      	mov	r3, r7
 8011e86:	4640      	mov	r0, r8
 8011e88:	4649      	mov	r1, r9
 8011e8a:	f7ee f9ff 	bl	800028c <__adddf3>
 8011e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011e92:	4602      	mov	r2, r0
 8011e94:	460b      	mov	r3, r1
 8011e96:	4640      	mov	r0, r8
 8011e98:	4649      	mov	r1, r9
 8011e9a:	f7ee f9f5 	bl	8000288 <__aeabi_dsub>
 8011e9e:	4632      	mov	r2, r6
 8011ea0:	463b      	mov	r3, r7
 8011ea2:	f7ee f9f3 	bl	800028c <__adddf3>
 8011ea6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011eaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011eae:	ed8a 7b00 	vstr	d7, [sl]
 8011eb2:	e770      	b.n	8011d96 <__kernel_rem_pio2+0x50e>
 8011eb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011eb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	4632      	mov	r2, r6
 8011ec0:	463b      	mov	r3, r7
 8011ec2:	4649      	mov	r1, r9
 8011ec4:	f7ee f9e2 	bl	800028c <__adddf3>
 8011ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	4640      	mov	r0, r8
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	f7ee f9d8 	bl	8000288 <__aeabi_dsub>
 8011ed8:	4632      	mov	r2, r6
 8011eda:	463b      	mov	r3, r7
 8011edc:	f7ee f9d6 	bl	800028c <__adddf3>
 8011ee0:	ed9d 7b00 	vldr	d7, [sp]
 8011ee4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ee8:	ed84 7b00 	vstr	d7, [r4]
 8011eec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ef0:	e757      	b.n	8011da2 <__kernel_rem_pio2+0x51a>
 8011ef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011ef6:	f7ee f9c9 	bl	800028c <__adddf3>
 8011efa:	3d01      	subs	r5, #1
 8011efc:	e75c      	b.n	8011db8 <__kernel_rem_pio2+0x530>
 8011efe:	9b04      	ldr	r3, [sp, #16]
 8011f00:	9a04      	ldr	r2, [sp, #16]
 8011f02:	601f      	str	r7, [r3, #0]
 8011f04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011f08:	605c      	str	r4, [r3, #4]
 8011f0a:	609d      	str	r5, [r3, #8]
 8011f0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011f10:	60d3      	str	r3, [r2, #12]
 8011f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f16:	6110      	str	r0, [r2, #16]
 8011f18:	6153      	str	r3, [r2, #20]
 8011f1a:	e727      	b.n	8011d6c <__kernel_rem_pio2+0x4e4>
 8011f1c:	41700000 	.word	0x41700000
 8011f20:	3e700000 	.word	0x3e700000
 8011f24:	00000000 	.word	0x00000000

08011f28 <floor>:
 8011f28:	ec51 0b10 	vmov	r0, r1, d0
 8011f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011f38:	2e13      	cmp	r6, #19
 8011f3a:	ee10 5a10 	vmov	r5, s0
 8011f3e:	ee10 8a10 	vmov	r8, s0
 8011f42:	460c      	mov	r4, r1
 8011f44:	dc31      	bgt.n	8011faa <floor+0x82>
 8011f46:	2e00      	cmp	r6, #0
 8011f48:	da14      	bge.n	8011f74 <floor+0x4c>
 8011f4a:	a333      	add	r3, pc, #204	; (adr r3, 8012018 <floor+0xf0>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	f7ee f99c 	bl	800028c <__adddf3>
 8011f54:	2200      	movs	r2, #0
 8011f56:	2300      	movs	r3, #0
 8011f58:	f7ee fdde 	bl	8000b18 <__aeabi_dcmpgt>
 8011f5c:	b138      	cbz	r0, 8011f6e <floor+0x46>
 8011f5e:	2c00      	cmp	r4, #0
 8011f60:	da53      	bge.n	801200a <floor+0xe2>
 8011f62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011f66:	4325      	orrs	r5, r4
 8011f68:	d052      	beq.n	8012010 <floor+0xe8>
 8011f6a:	4c2d      	ldr	r4, [pc, #180]	; (8012020 <floor+0xf8>)
 8011f6c:	2500      	movs	r5, #0
 8011f6e:	4621      	mov	r1, r4
 8011f70:	4628      	mov	r0, r5
 8011f72:	e024      	b.n	8011fbe <floor+0x96>
 8011f74:	4f2b      	ldr	r7, [pc, #172]	; (8012024 <floor+0xfc>)
 8011f76:	4137      	asrs	r7, r6
 8011f78:	ea01 0307 	and.w	r3, r1, r7
 8011f7c:	4303      	orrs	r3, r0
 8011f7e:	d01e      	beq.n	8011fbe <floor+0x96>
 8011f80:	a325      	add	r3, pc, #148	; (adr r3, 8012018 <floor+0xf0>)
 8011f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f86:	f7ee f981 	bl	800028c <__adddf3>
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f7ee fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d0eb      	beq.n	8011f6e <floor+0x46>
 8011f96:	2c00      	cmp	r4, #0
 8011f98:	bfbe      	ittt	lt
 8011f9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011f9e:	4133      	asrlt	r3, r6
 8011fa0:	18e4      	addlt	r4, r4, r3
 8011fa2:	ea24 0407 	bic.w	r4, r4, r7
 8011fa6:	2500      	movs	r5, #0
 8011fa8:	e7e1      	b.n	8011f6e <floor+0x46>
 8011faa:	2e33      	cmp	r6, #51	; 0x33
 8011fac:	dd0b      	ble.n	8011fc6 <floor+0x9e>
 8011fae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011fb2:	d104      	bne.n	8011fbe <floor+0x96>
 8011fb4:	ee10 2a10 	vmov	r2, s0
 8011fb8:	460b      	mov	r3, r1
 8011fba:	f7ee f967 	bl	800028c <__adddf3>
 8011fbe:	ec41 0b10 	vmov	d0, r0, r1
 8011fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011fca:	f04f 37ff 	mov.w	r7, #4294967295
 8011fce:	40df      	lsrs	r7, r3
 8011fd0:	4238      	tst	r0, r7
 8011fd2:	d0f4      	beq.n	8011fbe <floor+0x96>
 8011fd4:	a310      	add	r3, pc, #64	; (adr r3, 8012018 <floor+0xf0>)
 8011fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fda:	f7ee f957 	bl	800028c <__adddf3>
 8011fde:	2200      	movs	r2, #0
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	f7ee fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d0c1      	beq.n	8011f6e <floor+0x46>
 8011fea:	2c00      	cmp	r4, #0
 8011fec:	da0a      	bge.n	8012004 <floor+0xdc>
 8011fee:	2e14      	cmp	r6, #20
 8011ff0:	d101      	bne.n	8011ff6 <floor+0xce>
 8011ff2:	3401      	adds	r4, #1
 8011ff4:	e006      	b.n	8012004 <floor+0xdc>
 8011ff6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	40b3      	lsls	r3, r6
 8011ffe:	441d      	add	r5, r3
 8012000:	45a8      	cmp	r8, r5
 8012002:	d8f6      	bhi.n	8011ff2 <floor+0xca>
 8012004:	ea25 0507 	bic.w	r5, r5, r7
 8012008:	e7b1      	b.n	8011f6e <floor+0x46>
 801200a:	2500      	movs	r5, #0
 801200c:	462c      	mov	r4, r5
 801200e:	e7ae      	b.n	8011f6e <floor+0x46>
 8012010:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012014:	e7ab      	b.n	8011f6e <floor+0x46>
 8012016:	bf00      	nop
 8012018:	8800759c 	.word	0x8800759c
 801201c:	7e37e43c 	.word	0x7e37e43c
 8012020:	bff00000 	.word	0xbff00000
 8012024:	000fffff 	.word	0x000fffff

08012028 <_init>:
 8012028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801202a:	bf00      	nop
 801202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801202e:	bc08      	pop	{r3}
 8012030:	469e      	mov	lr, r3
 8012032:	4770      	bx	lr

08012034 <_fini>:
 8012034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012036:	bf00      	nop
 8012038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801203a:	bc08      	pop	{r3}
 801203c:	469e      	mov	lr, r3
 801203e:	4770      	bx	lr
